
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c0  080066c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080066c0  080066c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066c0  080066c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080066c0  080066c0  000166c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  08006740  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08006740  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00087e40  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005715  00000000  00000000  000a7ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001598  00000000  00000000  000ad5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001400  00000000  00000000  000aeb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b6f2  00000000  00000000  000aff88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001945e  00000000  00000000  000cb67a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000996a1  00000000  00000000  000e4ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e179  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007314  00000000  00000000  0017e1f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08006198 	.word	0x08006198

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08006198 	.word	0x08006198

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	70fb      	strb	r3, [r7, #3]
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2200      	movs	r2, #0
 800016c:	701a      	strb	r2, [r3, #0]
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2200      	movs	r2, #0
 8000172:	605a      	str	r2, [r3, #4]
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	2200      	movs	r2, #0
 8000178:	609a      	str	r2, [r3, #8]
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	60da      	str	r2, [r3, #12]
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2200      	movs	r2, #0
 8000184:	741a      	strb	r2, [r3, #16]
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2200      	movs	r2, #0
 800018a:	745a      	strb	r2, [r3, #17]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2201      	movs	r2, #1
 8000190:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	2b03      	cmp	r3, #3
 8000196:	d802      	bhi.n	800019e <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	78fa      	ldrb	r2, [r7, #3]
 800019c:	701a      	strb	r2, [r3, #0]
}
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4618      	mov	r0, r3
 80001a2:	370c      	adds	r7, #12
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 80001b6:	6878      	ldr	r0, [r7, #4]
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	9300      	str	r3, [sp, #0]
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <_ZNSt7__cxx119to_stringEi+0x24>)
 80001be:	2210      	movs	r2, #16
 80001c0:	4904      	ldr	r1, [pc, #16]	; (80001d4 <_ZNSt7__cxx119to_stringEi+0x28>)
 80001c2:	f000 f84d 	bl	8000260 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80001c6:	6878      	ldr	r0, [r7, #4]
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	080061b0 	.word	0x080061b0
 80001d4:	08005b69 	.word	0x08005b69

080001d8 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t;
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 80001e0:	23d0      	movs	r3, #208	; 0xd0
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2220      	movs	r2, #32
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f005 fb86 	bl	800590c <memset>
	i2cBufferIndex = 0;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2200      	movs	r2, #0
 8000204:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4618      	mov	r0, r3
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af02      	add	r7, sp, #8
 8000232:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 8000234:	6878      	ldr	r0, [r7, #4]
 8000236:	f7ff ffd9 	bl	80001ec <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f7ff ffcc 	bl	80001d8 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8000240:	4603      	mov	r3, r0
 8000242:	4619      	mov	r1, r3
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	2301      	movs	r3, #1
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2300      	movs	r3, #0
 800024c:	4803      	ldr	r0, [pc, #12]	; (800025c <_ZN10DS1307_RTC5setupEv+0x30>)
 800024e:	f002 fab3 	bl	80027b8 <HAL_I2C_Master_Transmit>
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	2000015c 	.word	0x2000015c

08000260 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8000260:	b408      	push	{r3}
 8000262:	b590      	push	{r4, r7, lr}
 8000264:	b088      	sub	sp, #32
 8000266:	af00      	add	r7, sp, #0
 8000268:	60f8      	str	r0, [r7, #12]
 800026a:	60b9      	str	r1, [r7, #8]
 800026c:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3307      	adds	r3, #7
 8000272:	3307      	adds	r3, #7
 8000274:	08db      	lsrs	r3, r3, #3
 8000276:	00db      	lsls	r3, r3, #3
 8000278:	ebad 0d03 	sub.w	sp, sp, r3
 800027c:	466b      	mov	r3, sp
 800027e:	3307      	adds	r3, #7
 8000280:	08db      	lsrs	r3, r3, #3
 8000282:	00db      	lsls	r3, r3, #3
 8000284:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8000286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028a:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 800028c:	68bc      	ldr	r4, [r7, #8]
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000292:	6879      	ldr	r1, [r7, #4]
 8000294:	69f8      	ldr	r0, [r7, #28]
 8000296:	47a0      	blx	r4
 8000298:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	69fa      	ldr	r2, [r7, #28]
 800029e:	18d4      	adds	r4, r2, r3
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	4618      	mov	r0, r3
 80002a6:	f004 ff35 	bl	8005114 <_ZNSaIcEC1Ev>
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	4622      	mov	r2, r4
 80002b0:	69f9      	ldr	r1, [r7, #28]
 80002b2:	68f8      	ldr	r0, [r7, #12]
 80002b4:	f000 f837 	bl	8000326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	4618      	mov	r0, r3
 80002be:	f004 ff2a 	bl	8005116 <_ZNSaIcED1Ev>
    }
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	3720      	adds	r7, #32
 80002c6:	46bd      	mov	sp, r7
 80002c8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80002cc:	b001      	add	sp, #4
 80002ce:	4770      	bx	lr

080002d0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	2100      	movs	r1, #0
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f005 f967 	bl	80055b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 80002e6:	4603      	mov	r3, r0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f837 	bl	800035c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4619      	mov	r1, r3
 80002f2:	68f8      	ldr	r0, [r7, #12]
 80002f4:	f005 f817 	bl	8005326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80002f8:	68f8      	ldr	r0, [r7, #12]
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 800030c:	68b9      	ldr	r1, [r7, #8]
 800030e:	68f8      	ldr	r0, [r7, #12]
 8000310:	f005 f9b0 	bl	8005674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8000314:	6879      	ldr	r1, [r7, #4]
 8000316:	68f8      	ldr	r0, [r7, #12]
 8000318:	f005 f992 	bl	8005640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 800031c:	bf00      	nop
    }
 800031e:	68f8      	ldr	r0, [r7, #12]
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8000326:	b590      	push	{r4, r7, lr}
 8000328:	b085      	sub	sp, #20
 800032a:	af00      	add	r7, sp, #0
 800032c:	60f8      	str	r0, [r7, #12]
 800032e:	60b9      	str	r1, [r7, #8]
 8000330:	607a      	str	r2, [r7, #4]
 8000332:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8000334:	68fc      	ldr	r4, [r7, #12]
 8000336:	68f8      	ldr	r0, [r7, #12]
 8000338:	f004 ff17 	bl	800516a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800033c:	4603      	mov	r3, r0
 800033e:	683a      	ldr	r2, [r7, #0]
 8000340:	4619      	mov	r1, r3
 8000342:	4620      	mov	r0, r4
 8000344:	f005 f994 	bl	8005670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	68b9      	ldr	r1, [r7, #8]
 800034c:	68f8      	ldr	r0, [r7, #12]
 800034e:	f000 f80f 	bl	8000370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	4618      	mov	r0, r3
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	bd90      	pop	{r4, r7, pc}

0800035c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4618      	mov	r0, r3
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	68b9      	ldr	r1, [r7, #8]
 8000380:	68f8      	ldr	r0, [r7, #12]
 8000382:	f000 f804 	bl	800038e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8000386:	bf00      	nop
 8000388:	3718      	adds	r7, #24
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800038e:	b590      	push	{r4, r7, lr}
 8000390:	b087      	sub	sp, #28
 8000392:	af00      	add	r7, sp, #0
 8000394:	60f8      	str	r0, [r7, #12]
 8000396:	60b9      	str	r1, [r7, #8]
 8000398:	607a      	str	r2, [r7, #4]
 800039a:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800039c:	4623      	mov	r3, r4
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	68b9      	ldr	r1, [r7, #8]
 80003a2:	68f8      	ldr	r0, [r7, #12]
 80003a4:	f000 f804 	bl	80003b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80003a8:	bf00      	nop
 80003aa:	371c      	adds	r7, #28
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd90      	pop	{r4, r7, pc}

080003b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
 80003bc:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80003be:	68b8      	ldr	r0, [r7, #8]
 80003c0:	f000 f83e 	bl	8000440 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d005      	beq.n	80003d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80003ca:	68ba      	ldr	r2, [r7, #8]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d001      	beq.n	80003d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80003d2:	2301      	movs	r3, #1
 80003d4:	e000      	b.n	80003d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80003d6:	2300      	movs	r3, #0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d002      	beq.n	80003e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80003dc:	4817      	ldr	r0, [pc, #92]	; (800043c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80003de:	f004 fe9b 	bl	8005118 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	68b8      	ldr	r0, [r7, #8]
 80003e6:	f000 f843 	bl	8000470 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80003ea:	4603      	mov	r3, r0
 80003ec:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	2b0f      	cmp	r3, #15
 80003f2:	d910      	bls.n	8000416 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	2200      	movs	r2, #0
 80003fa:	4619      	mov	r1, r3
 80003fc:	68f8      	ldr	r0, [r7, #12]
 80003fe:	f004 febd 	bl	800517c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8000402:	4603      	mov	r3, r0
 8000404:	4619      	mov	r1, r3
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f004 feab 	bl	8005162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	4619      	mov	r1, r3
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f004 feac 	bl	800516e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8000416:	68f8      	ldr	r0, [r7, #12]
 8000418:	f004 fea5 	bl	8005166 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800041c:	4603      	mov	r3, r0
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	68b9      	ldr	r1, [r7, #8]
 8000422:	4618      	mov	r0, r3
 8000424:	f004 ff07 	bl	8005236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	4619      	mov	r1, r3
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f004 fea0 	bl	8005172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	080061d0 	.word	0x080061d0

08000440 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2b00      	cmp	r3, #0
 800044c:	bf0c      	ite	eq
 800044e:	2301      	moveq	r3, #1
 8000450:	2300      	movne	r3, #0
 8000452:	b2db      	uxtb	r3, r3
 8000454:	4618      	mov	r0, r3
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8000470:	b5b0      	push	{r4, r5, r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800047a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ffed 	bl	800045e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8000484:	462a      	mov	r2, r5
 8000486:	6839      	ldr	r1, [r7, #0]
 8000488:	4620      	mov	r0, r4
 800048a:	f000 f805 	bl	8000498 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800048e:	4603      	mov	r3, r0
    }
 8000490:	4618      	mov	r0, r3
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bdb0      	pop	{r4, r5, r7, pc}

08000498 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	1ad3      	subs	r3, r2, r3
    }
 80004aa:	4618      	mov	r0, r3
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <_ZN10ST7920_LCD12TEXT_4_WRITEC1Ev>:
	typedef struct
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
	}TEXT_4_WRITE;
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4618      	mov	r0, r3
 80004c0:	f004 ff2a 	bl	8005318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4618      	mov	r0, r3
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <_ZN10ST7920_LCDC1Ev>:
	u8g2_Setup_st7920_p_128x64_f(U8G2_Display, U8G2_R0, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
	u8g2_InitDisplay(U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
	u8g2_SetPowerSave(U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
}

ST7920_LCD::ST7920_LCD()
 80004ce:	b590      	push	{r4, r7, lr}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3308      	adds	r3, #8
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ffea 	bl	80004b4 <_ZN10ST7920_LCD12TEXT_4_WRITEC1Ev>
{
	U8G2_Display = new u8g2_t();
 80004e0:	2084      	movs	r0, #132	; 0x84
 80004e2:	f004 fdfd 	bl	80050e0 <_Znwj>
 80004e6:	4603      	mov	r3, r0
 80004e8:	461c      	mov	r4, r3
 80004ea:	4620      	mov	r0, r4
 80004ec:	2384      	movs	r3, #132	; 0x84
 80004ee:	461a      	mov	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f005 fa0b 	bl	800590c <memset>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601c      	str	r4, [r3, #0]
	DispParams.width = 128;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	711a      	strb	r2, [r3, #4]
	DispParams.high = 64;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2240      	movs	r2, #64	; 0x40
 8000504:	715a      	strb	r2, [r3, #5]
}
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4618      	mov	r0, r3
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bd90      	pop	{r4, r7, pc}

08000510 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	bool State = false;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	889b      	ldrh	r3, [r3, #4]
 8000524:	4619      	mov	r1, r3
 8000526:	4610      	mov	r0, r2
 8000528:	f001 ff34 	bl	8002394 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	bf0c      	ite	eq
 8000532:	2301      	moveq	r3, #1
 8000534:	2300      	movne	r3, #0
 8000536:	b2db      	uxtb	r3, r3
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 800054a:	b480      	push	{r7}
 800054c:	b085      	sub	sp, #20
 800054e:	af00      	add	r7, sp, #0
 8000550:	60f8      	str	r0, [r7, #12]
 8000552:	60b9      	str	r1, [r7, #8]
 8000554:	4611      	mov	r1, r2
 8000556:	461a      	mov	r2, r3
 8000558:	460b      	mov	r3, r1
 800055a:	80fb      	strh	r3, [r7, #6]
 800055c:	4613      	mov	r3, r2
 800055e:	80bb      	strh	r3, [r7, #4]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2200      	movs	r2, #0
 800056a:	819a      	strh	r2, [r3, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2200      	movs	r2, #0
 8000570:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	68ba      	ldr	r2, [r7, #8]
 8000576:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	88fa      	ldrh	r2, [r7, #6]
 800057c:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	88ba      	ldrh	r2, [r7, #4]
 8000582:	819a      	strh	r2, [r3, #12]
}
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4618      	mov	r0, r3
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 8000598:	2302      	movs	r3, #2
 800059a:	73fb      	strb	r3, [r7, #15]
	bool ButtonState = readPin();
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f7ff ffb7 	bl	8000510 <_ZN6BUTTON7readPinEv>
 80005a2:	4603      	mov	r3, r0
 80005a4:	73bb      	strb	r3, [r7, #14]
	if(ButtonState)
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d033      	beq.n	8000614 <_ZN6BUTTON11checkButtonEv+0x84>
	{
		longPressDelay = HAL_GetTick();
 80005ac:	f000 ff72 	bl	8001494 <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d018      	beq.n	80005ee <_ZN6BUTTON11checkButtonEv+0x5e>
		{
			ButtonState = readPin();
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ffa7 	bl	8000510 <_ZN6BUTTON7readPinEv>
 80005c2:	4603      	mov	r3, r0
 80005c4:	73bb      	strb	r3, [r7, #14]
			if(HAL_GetTick() - longPressDelay > delay)
 80005c6:	f000 ff65 	bl	8001494 <HAL_GetTick>
 80005ca:	4602      	mov	r2, r0
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	8992      	ldrh	r2, [r2, #12]
 80005d6:	4293      	cmp	r3, r2
 80005d8:	bf8c      	ite	hi
 80005da:	2301      	movhi	r3, #1
 80005dc:	2300      	movls	r3, #0
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0e8      	beq.n	80005b6 <_ZN6BUTTON11checkButtonEv+0x26>
			{
				Status = LONG_PRESSED;
 80005e4:	2301      	movs	r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
				wasLongPressed = true;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	739a      	strb	r2, [r3, #14]
				break;
			}
		}
		if(!wasLongPressed)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	7b9b      	ldrb	r3, [r3, #14]
 80005f2:	f083 0301 	eor.w	r3, r3, #1
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <_ZN6BUTTON11checkButtonEv+0x72>
		{
			Status = PRESSED;
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e002      	b.n	8000608 <_ZN6BUTTON11checkButtonEv+0x78>
		}
		else
		{
			wasLongPressed = false;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
		HAL_Delay(25);
 800060e:	2019      	movs	r0, #25
 8000610:	f000 ff4a 	bl	80014a8 <HAL_Delay>
	}
	return Status;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 1000);
 8000628:	2010      	movs	r0, #16
 800062a:	f004 fd59 	bl	80050e0 <_Znwj>
 800062e:	4603      	mov	r3, r0
 8000630:	461c      	mov	r4, r3
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800063a:	491c      	ldr	r1, [pc, #112]	; (80006ac <_ZN8DryerKeyC1Ev+0x8c>)
 800063c:	4620      	mov	r0, r4
 800063e:	f7ff ff84 	bl	800054a <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 1000);
 8000646:	2010      	movs	r0, #16
 8000648:	f004 fd4a 	bl	80050e0 <_Znwj>
 800064c:	4603      	mov	r3, r0
 800064e:	461c      	mov	r4, r3
 8000650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000654:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000658:	4914      	ldr	r1, [pc, #80]	; (80006ac <_ZN8DryerKeyC1Ev+0x8c>)
 800065a:	4620      	mov	r0, r4
 800065c:	f7ff ff75 	bl	800054a <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 1000);
 8000664:	2010      	movs	r0, #16
 8000666:	f004 fd3b 	bl	80050e0 <_Znwj>
 800066a:	4603      	mov	r3, r0
 800066c:	461c      	mov	r4, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <_ZN8DryerKeyC1Ev+0x8c>)
 8000678:	4620      	mov	r0, r4
 800067a:	f7ff ff66 	bl	800054a <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 1000);
 8000682:	2010      	movs	r0, #16
 8000684:	f004 fd2c 	bl	80050e0 <_Znwj>
 8000688:	4603      	mov	r3, r0
 800068a:	461c      	mov	r4, r3
 800068c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000690:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000694:	4905      	ldr	r1, [pc, #20]	; (80006ac <_ZN8DryerKeyC1Ev+0x8c>)
 8000696:	4620      	mov	r0, r4
 8000698:	f7ff ff57 	bl	800054a <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	60dc      	str	r4, [r3, #12]
}
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd90      	pop	{r4, r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40010c00 	.word	0x40010c00

080006b0 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 80006b8:	2308      	movs	r3, #8
 80006ba:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	dc1d      	bgt.n	8000702 <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff5e 	bl	8000590 <_ZN6BUTTON11checkButtonEv>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d102      	bne.n	80006e4 <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	75fb      	strb	r3, [r7, #23]
 80006e2:	e006      	b.n	80006f2 <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d103      	bne.n	80006f2 <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	3304      	adds	r3, #4
 80006f0:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d103      	bne.n	8000700 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	3301      	adds	r3, #1
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	e7df      	b.n	80006c0 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 8000700:	bf00      	nop
		}
	}
	return KeyPressed;
 8000702:	7dfb      	ldrb	r3, [r7, #23]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <_ZN11SerialDebug11writeSerialEv>:
//{
//	RxReady = true;
//}

void SerialDebug::writeSerial()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fe4a 	bl	80053b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800071c:	4603      	mov	r3, r0
 800071e:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4618      	mov	r0, r3
 8000724:	f004 ffa2 	bl	800566c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000728:	4601      	mov	r1, r0
 800072a:	89fa      	ldrh	r2, [r7, #14]
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <_ZN11SerialDebug11writeSerialEv+0x30>)
 8000730:	f003 fffe 	bl	8004730 <HAL_UART_Transmit>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000248 	.word	0x20000248

08000740 <_ZN11SerialDebugC1Ev>:


SerialDebug::SerialDebug()
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4618      	mov	r0, r3
 800074c:	f004 fde4 	bl	8005318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2020 	strb.w	r2, [r3, #32]
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
}
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void SerialDebug::sendDbgStr(std::string DbgStr)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b089      	sub	sp, #36	; 0x24
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
	if(!DbgStr.empty())
 800076e:	6838      	ldr	r0, [r7, #0]
 8000770:	f004 fe51 	bl	8005416 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8000774:	4603      	mov	r3, r0
 8000776:	f083 0301 	eor.w	r3, r3, #1
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d013      	beq.n	80007a8 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	{
		serialBuffer = DbgStr + "\n";
 8000780:	687c      	ldr	r4, [r7, #4]
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 8000788:	6839      	ldr	r1, [r7, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fdb8 	bl	8000300 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	4619      	mov	r1, r3
 8000796:	4620      	mov	r0, r4
 8000798:	f004 fde5 	bl	8005366 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	4618      	mov	r0, r3
 80007a2:	f004 fdda 	bl	800535a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80007a6:	e004      	b.n	80007b2 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4906      	ldr	r1, [pc, #24]	; (80007c4 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 fee4 	bl	800557a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	}
	writeSerial();
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff ffaa 	bl	800070c <_ZN11SerialDebug11writeSerialEv>
}
 80007b8:	bf00      	nop
 80007ba:	3724      	adds	r7, #36	; 0x24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	080061fc 	.word	0x080061fc
 80007c4:	08006200 	.word	0x08006200

080007c8 <_ZN11SerialDebug12readSerialITEPh>:

bool SerialDebug::readSerialIT(uint8_t *Data)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	bool Ready = false;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]
//	if(RxReady)
//	{
		Ready = true;
 80007d6:	2301      	movs	r3, #1
 80007d8:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 100);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f103 011a 	add.w	r1, r3, #26
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	2206      	movs	r2, #6
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <_ZN11SerialDebug12readSerialITEPh+0x48>)
 80007e6:	f004 f83c 	bl	8004862 <HAL_UART_Receive>
		memcpy(Data, rxBuffer, RECEIVE_BUFFER_LEN);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	331a      	adds	r3, #26
 80007ee:	2206      	movs	r2, #6
 80007f0:	4619      	mov	r1, r3
 80007f2:	6838      	ldr	r0, [r7, #0]
 80007f4:	f005 f866 	bl	80058c4 <memcpy>
		memset(rxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	331a      	adds	r3, #26
 80007fc:	2206      	movs	r2, #6
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f005 f883 	bl	800590c <memset>
//		RxReady = false;
//	}
	return Ready;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000248 	.word	0x20000248

08000814 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_ADC1_Init+0x74>)
 8000826:	4a19      	ldr	r2, [pc, #100]	; (800088c <MX_ADC1_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_ADC1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_ADC1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_ADC1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_ADC1_Init+0x74>)
 800083e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000842:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_ADC1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_ADC1_Init+0x74>)
 800084c:	2201      	movs	r2, #1
 800084e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_ADC1_Init+0x74>)
 8000852:	f000 fe4b 	bl	80014ec <HAL_ADC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800085c:	f000 fa8c 	bl	8000d78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000864:	2301      	movs	r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_ADC1_Init+0x74>)
 8000872:	f000 ffa5 	bl	80017c0 <HAL_ADC_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800087c:	f000 fa7c 	bl	8000d78 <Error_Handler>
  }

}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000012c 	.word	0x2000012c
 800088c:	40012400 	.word	0x40012400

08000890 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <HAL_ADC_MspInit+0x6c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d121      	bne.n	80008f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <HAL_ADC_MspInit+0x70>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <HAL_ADC_MspInit+0x70>)
 80008b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HAL_ADC_MspInit+0x70>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <HAL_ADC_MspInit+0x70>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <HAL_ADC_MspInit+0x70>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_ADC_MspInit+0x70>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 80008e0:	2301      	movs	r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e4:	2303      	movs	r3, #3
 80008e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <HAL_ADC_MspInit+0x74>)
 80008f0:	f001 fb16 	bl	8001f20 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008f4:	bf00      	nop
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40012400 	.word	0x40012400
 8000900:	40021000 	.word	0x40021000
 8000904:	40010800 	.word	0x40010800

08000908 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <MX_GPIO_Init+0xd4>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a2e      	ldr	r2, [pc, #184]	; (80009dc <MX_GPIO_Init+0xd4>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_GPIO_Init+0xd4>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <MX_GPIO_Init+0xd4>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a28      	ldr	r2, [pc, #160]	; (80009dc <MX_GPIO_Init+0xd4>)
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_GPIO_Init+0xd4>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0308 	and.w	r3, r3, #8
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoCoupleCS_Pin|LcdCS_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	210c      	movs	r1, #12
 8000950:	4823      	ldr	r0, [pc, #140]	; (80009e0 <MX_GPIO_Init+0xd8>)
 8000952:	f001 fd45 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Thermo_ctrl_Pin|FanCtrl_Pin|RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800095c:	4820      	ldr	r0, [pc, #128]	; (80009e0 <MX_GPIO_Init+0xd8>)
 800095e:	f001 fd3f 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCoupleCS_Pin|LcdCS_Pin|FanCtrl_Pin;
 8000962:	f240 430c 	movw	r3, #1036	; 0x40c
 8000966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4619      	mov	r1, r3
 800097a:	4819      	ldr	r0, [pc, #100]	; (80009e0 <MX_GPIO_Init+0xd8>)
 800097c:	f001 fad0 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|LeftButton_Pin|OkButton_Pin;
 8000980:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000984:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800098a:	2302      	movs	r3, #2
 800098c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4619      	mov	r1, r3
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_GPIO_Init+0xdc>)
 8000996:	f001 fac3 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DownButton_Pin;
 800099a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DownButton_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	4619      	mov	r1, r3
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_GPIO_Init+0xdc>)
 80009b0:	f001 fab6 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Thermo_ctrl_Pin|RedLed_Pin|GreenLed_Pin;
 80009b4:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 80009b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2302      	movs	r3, #2
 80009c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	4619      	mov	r1, r3
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_GPIO_Init+0xd8>)
 80009ce:	f001 faa7 	bl	8001f20 <HAL_GPIO_Init>

}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010800 	.word	0x40010800
 80009e4:	40010c00 	.word	0x40010c00

080009e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009ee:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <MX_I2C1_Init+0x54>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_I2C1_Init+0x58>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a26:	f001 fd0d 	bl	8002444 <HAL_I2C_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a30:	f000 f9a2 	bl	8000d78 <Error_Handler>
  }

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2000015c 	.word	0x2000015c
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	000186a0 	.word	0x000186a0

08000a44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <HAL_I2C_MspInit+0x90>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d132      	bne.n	8000aca <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0308 	and.w	r3, r3, #8
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000a7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a82:	2312      	movs	r3, #18
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4812      	ldr	r0, [pc, #72]	; (8000adc <HAL_I2C_MspInit+0x98>)
 8000a92:	f001 fa45 	bl	8001f20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_I2C_MspInit+0x9c>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8000aac:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <HAL_I2C_MspInit+0x9c>)
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_I2C_MspInit+0x94>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	; 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010c00 	.word	0x40010c00
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <_ZNSt11char_traitsIcE6lengthEPKc>:
	  return 0;
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus > 201402
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fb2d 	bl	800014c <strlen>
 8000af2:	4603      	mov	r3, r0
      }
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b09e      	sub	sp, #120	; 0x78
 8000b00:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b02:	f000 fc6f 	bl	80013e4 <HAL_Init>


  /* Configure the system clock */
  SystemClock_Config();
 8000b06:	f000 f8d3 	bl	8000cb0 <_Z18SystemClock_Configv>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0a:	f7ff fefd 	bl	8000908 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b0e:	f7ff fe81 	bl	8000814 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b12:	f7ff ff69 	bl	80009e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b16:	f000 f9d7 	bl	8000ec8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000b1a:	f000 fb47 	bl	80011ac <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b1e:	f000 fbaf 	bl	8001280 <MX_USART1_UART_Init>

  RtcClock.setup();
 8000b22:	485d      	ldr	r0, [pc, #372]	; (8000c98 <main+0x19c>)
 8000b24:	f7ff fb82 	bl	800022c <_ZN10DS1307_RTC5setupEv>


  bool RtcSetted = false;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  while (1)
  {
	  uint8_t WichKey = DryerKey::NO_KEY, TestKey = 0;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000b34:	2300      	movs	r3, #0
 8000b36:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  char SerialData[RECEIVE_BUFFER_LEN] = {0};
 8000b3a:	f107 0318 	add.w	r3, r7, #24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	809a      	strh	r2, [r3, #4]
//	  Display.testDisplay("Test");

	  Dbg.readSerialIT((uint8_t *)SerialData);
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4854      	ldr	r0, [pc, #336]	; (8000c9c <main+0x1a0>)
 8000b4c:	f7ff fe3c 	bl	80007c8 <_ZN11SerialDebug12readSerialITEPh>
	  if(SerialData[5] != 0)
 8000b50:	7f7b      	ldrb	r3, [r7, #29]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d039      	beq.n	8000bca <main+0xce>
	  {
		  std::string Rec = "";
 8000b56:	f107 0320 	add.w	r3, r7, #32
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 fada 	bl	8005114 <_ZNSaIcEC1Ev>
 8000b60:	f107 0220 	add.w	r2, r7, #32
 8000b64:	463b      	mov	r3, r7
 8000b66:	494e      	ldr	r1, [pc, #312]	; (8000ca0 <main+0x1a4>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fdb5 	bl	80056d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	4618      	mov	r0, r3
 8000b74:	f004 facf 	bl	8005116 <_ZNSaIcED1Ev>
		  for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	673b      	str	r3, [r7, #112]	; 0x70
 8000b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	dc0d      	bgt.n	8000b9e <main+0xa2>
			  Rec += SerialData[i];
 8000b82:	f107 0218 	add.w	r2, r7, #24
 8000b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b88:	4413      	add	r3, r2
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 fc63 	bl	800545c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
		  for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8000b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b98:	3301      	adds	r3, #1
 8000b9a:	673b      	str	r3, [r7, #112]	; 0x70
 8000b9c:	e7ee      	b.n	8000b7c <main+0x80>
		  Dbg.sendDbgStr("Ricevuto: " + Rec);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	463a      	mov	r2, r7
 8000ba4:	493f      	ldr	r1, [pc, #252]	; (8000ca4 <main+0x1a8>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f8f6 	bl	8000d98 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	483a      	ldr	r0, [pc, #232]	; (8000c9c <main+0x1a0>)
 8000bb4:	f7ff fdd6 	bl	8000764 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 fbcc 	bl	800535a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  std::string Rec = "";
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fbc8 	bl	800535a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  }

	  WichKey = Keyboard.checkKey();
 8000bca:	4837      	ldr	r0, [pc, #220]	; (8000ca8 <main+0x1ac>)
 8000bcc:	f7ff fd70 	bl	80006b0 <_ZN8DryerKey8checkKeyEv>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	  switch(WichKey)
 8000bd6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000bda:	2b07      	cmp	r3, #7
 8000bdc:	d832      	bhi.n	8000c44 <main+0x148>
 8000bde:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <main+0xe8>)
 8000be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be4:	08000c05 	.word	0x08000c05
 8000be8:	08000c0d 	.word	0x08000c0d
 8000bec:	08000c15 	.word	0x08000c15
 8000bf0:	08000c1d 	.word	0x08000c1d
 8000bf4:	08000c25 	.word	0x08000c25
 8000bf8:	08000c2d 	.word	0x08000c2d
 8000bfc:	08000c35 	.word	0x08000c35
 8000c00:	08000c3d 	.word	0x08000c3d
	  {
	  case DryerKey::UP_KEY:
		  TestKey = 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  break;
 8000c0a:	e01c      	b.n	8000c46 <main+0x14a>
	  case DryerKey::DOWN_KEY:
		  TestKey = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  break;
 8000c12:	e018      	b.n	8000c46 <main+0x14a>
	  case DryerKey::LEFT_KEY:
		  TestKey = 3;
 8000c14:	2303      	movs	r3, #3
 8000c16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  break;
 8000c1a:	e014      	b.n	8000c46 <main+0x14a>
	  case DryerKey::OK_KEY:
		  TestKey = 4;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  break;
 8000c22:	e010      	b.n	8000c46 <main+0x14a>
	  case DryerKey::LONG_UP_KEY:
		  TestKey = 5;
 8000c24:	2305      	movs	r3, #5
 8000c26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  break;
 8000c2a:	e00c      	b.n	8000c46 <main+0x14a>
	  case DryerKey::LONG_DOWN_KEY:
		  TestKey = 6;
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  break;
 8000c32:	e008      	b.n	8000c46 <main+0x14a>
	  case DryerKey::LONG_LEFT_KEY:
		  TestKey = 7;
 8000c34:	2307      	movs	r3, #7
 8000c36:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  break;
 8000c3a:	e004      	b.n	8000c46 <main+0x14a>
	  case DryerKey::LONG_OK_KEY:
		  TestKey = 8;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  break;
 8000c42:	e000      	b.n	8000c46 <main+0x14a>
	  default:
		  break;
 8000c44:	bf00      	nop
	  }
	  if(TestKey != 0)
 8000c46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01f      	beq.n	8000c8e <main+0x192>
	  {
		  Dbg.sendDbgStr("Il tasto premuto vale " + std::to_string(TestKey));
 8000c4e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000c52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff faa7 	bl	80001ac <_ZNSt7__cxx119to_stringEi>
 8000c5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c62:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000c66:	4911      	ldr	r1, [pc, #68]	; (8000cac <main+0x1b0>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fb31 	bl	80002d0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8000c6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c72:	4619      	mov	r1, r3
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <main+0x1a0>)
 8000c76:	f7ff fd75 	bl	8000764 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000c7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 fb6b 	bl	800535a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000c84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 fb66 	bl	800535a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  }

	  HAL_Delay(1);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 fc0a 	bl	80014a8 <HAL_Delay>
  }
 8000c94:	e74b      	b.n	8000b2e <main+0x32>
 8000c96:	bf00      	nop
 8000c98:	200000e4 	.word	0x200000e4
 8000c9c:	2000008c 	.word	0x2000008c
 8000ca0:	08006220 	.word	0x08006220
 8000ca4:	08006224 	.word	0x08006224
 8000ca8:	200000d4 	.word	0x200000d4
 8000cac:	08006230 	.word	0x08006230

08000cb0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b094      	sub	sp, #80	; 0x50
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cba:	2228      	movs	r2, #40	; 0x28
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 fe24 	bl	800590c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce8:	2310      	movs	r3, #16
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cec:	2302      	movs	r3, #2
 8000cee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 f860 	bl	8002dc4 <HAL_RCC_OscConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	bf14      	ite	ne
 8000d0a:	2301      	movne	r3, #1
 8000d0c:	2300      	moveq	r3, #0
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 8000d14:	f000 f830 	bl	8000d78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d18:	230f      	movs	r3, #15
 8000d1a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 fbb6 	bl	80034a4 <HAL_RCC_ClockConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	bf14      	ite	ne
 8000d3e:	2301      	movne	r3, #1
 8000d40:	2300      	moveq	r3, #0
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8000d48:	f000 f816 	bl	8000d78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 fde6 	bl	8003928 <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bf14      	ite	ne
 8000d62:	2301      	movne	r3, #1
 8000d64:	2300      	moveq	r3, #0
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8000d6c:	f000 f804 	bl	8000d78 <Error_Handler>
  }
}
 8000d70:	bf00      	nop
 8000d72:	3750      	adds	r7, #80	; 0x50
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 8000da4:	68b8      	ldr	r0, [r7, #8]
 8000da6:	f7ff fe9d 	bl	8000ae4 <_ZNSt11char_traitsIcE6lengthEPKc>
 8000daa:	6178      	str	r0, [r7, #20]
      __string_type __str;
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f004 fab3 	bl	8005318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      __str.reserve(__len + __rhs.size());
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f004 fafc 	bl	80053b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000db8:	4602      	mov	r2, r0
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f004 faf7 	bl	80053b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f004 fc28 	bl	8005620 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f004 fc1e 	bl	8005614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8000dd8:	bf00      	nop
    }
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_ZN10ST7920_LCD12TEXT_4_WRITED1Ev>:
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 fab4 	bl	800535a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_ZN10ST7920_LCDD1Ev>:
class ST7920_LCD
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3308      	adds	r3, #8
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ffea 	bl	8000de2 <_ZN10ST7920_LCD12TEXT_4_WRITED1Ev>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_ZN11SerialDebugD1Ev>:

#define SEND_TIMEOUT		100
#define DBG_BUFFER			500
#define RECEIVE_BUFFER_LEN	  6

class SerialDebug
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f004 fa99 	bl	800535a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <_Z41__static_initialization_and_destruction_0ii>:
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d114      	bne.n	8000e6e <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10f      	bne.n	8000e6e <_Z41__static_initialization_and_destruction_0ii+0x3a>
SerialDebug Dbg;
 8000e4e:	4811      	ldr	r0, [pc, #68]	; (8000e94 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000e50:	f7ff fc76 	bl	8000740 <_ZN11SerialDebugC1Ev>
ST7920_LCD Display;
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000e56:	f7ff fb3a 	bl	80004ce <_ZN10ST7920_LCDC1Ev>
DryerKey Keyboard;
 8000e5a:	4810      	ldr	r0, [pc, #64]	; (8000e9c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000e5c:	f7ff fbe0 	bl	8000620 <_ZN8DryerKeyC1Ev>
DS1307_RTC RtcClock;
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000e62:	f7ff f9d5 	bl	8000210 <_ZN10DS1307_RTCC1Ev>
ChronoTimer GetTimeTimer(ChronoTimer::MILLIS);
 8000e66:	2100      	movs	r1, #0
 8000e68:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000e6a:	f7ff f977 	bl	800015c <_ZN11ChronoTimerC1Eh>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10a      	bne.n	8000e8a <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d105      	bne.n	8000e8a <_Z41__static_initialization_and_destruction_0ii+0x56>
ST7920_LCD Display;
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000e80:	f7ff ffbc 	bl	8000dfc <_ZN10ST7920_LCDD1Ev>
SerialDebug Dbg;
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000e86:	f7ff ffc7 	bl	8000e18 <_ZN11SerialDebugD1Ev>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000008c 	.word	0x2000008c
 8000e98:	200000b0 	.word	0x200000b0
 8000e9c:	200000d4 	.word	0x200000d4
 8000ea0:	200000e4 	.word	0x200000e4
 8000ea4:	20000108 	.word	0x20000108

08000ea8 <_GLOBAL__sub_I_Dbg>:
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f7ff ffbf 	bl	8000e34 <_Z41__static_initialization_and_destruction_0ii>
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_GLOBAL__sub_D_Dbg>:
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff ffb7 	bl	8000e34 <_Z41__static_initialization_and_destruction_0ii>
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <MX_SPI1_Init+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f14:	220a      	movs	r2, #10
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f1a:	f002 fe0f 	bl	8003b3c <HAL_SPI_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f24:	f7ff ff28 	bl	8000d78 <Error_Handler>
  }

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200001b0 	.word	0x200001b0
 8000f30:	40013000 	.word	0x40013000

08000f34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <HAL_SPI_MspInit+0x88>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d12f      	bne.n	8000fb4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_SPI_MspInit+0x8c>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <HAL_SPI_MspInit+0x8c>)
 8000f5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_SPI_MspInit+0x8c>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <HAL_SPI_MspInit+0x8c>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <HAL_SPI_MspInit+0x8c>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_SPI_MspInit+0x8c>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 8000f84:	23a0      	movs	r3, #160	; 0xa0
 8000f86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <HAL_SPI_MspInit+0x90>)
 8000f98:	f000 ffc2 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Miso_Pin;
 8000f9c:	2340      	movs	r3, #64	; 0x40
 8000f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Miso_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <HAL_SPI_MspInit+0x90>)
 8000fb0:	f000 ffb6 	bl	8001f20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3720      	adds	r7, #32
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40013000 	.word	0x40013000
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010800 	.word	0x40010800

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_MspInit+0x5c>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	4a14      	ldr	r2, [pc, #80]	; (8001024 <HAL_MspInit+0x5c>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6193      	str	r3, [r2, #24]
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_MspInit+0x5c>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_MspInit+0x5c>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <HAL_MspInit+0x5c>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_MspInit+0x5c>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_MspInit+0x60>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_MspInit+0x60>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <HardFault_Handler+0x4>

0800103e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <MemManage_Handler+0x4>

08001044 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <BusFault_Handler+0x4>

0800104a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <UsageFault_Handler+0x4>

08001050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f9fa 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <USART1_IRQHandler+0x10>)
 8001086:	f003 fc93 	bl	80049b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000248 	.word	0x20000248

08001094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	return 1;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <_kill>:

int _kill(int pid, int sig)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010ac:	f004 fbc2 	bl	8005834 <__errno>
 80010b0:	4602      	mov	r2, r0
 80010b2:	2316      	movs	r3, #22
 80010b4:	6013      	str	r3, [r2, #0]
	return -1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_exit>:

void _exit (int status)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffe7 	bl	80010a2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010d4:	e7fe      	b.n	80010d4 <_exit+0x12>
	...

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f004 fb94 	bl	8005834 <__errno>
 800110c:	4602      	mov	r2, r0
 800110e:	230c      	movs	r3, #12
 8001110:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20005000 	.word	0x20005000
 8001138:	00000400 	.word	0x00000400
 800113c:	2000011c 	.word	0x2000011c
 8001140:	20000290 	.word	0x20000290

08001144 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <SystemInit+0x5c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <SystemInit+0x5c>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <SystemInit+0x5c>)
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4911      	ldr	r1, [pc, #68]	; (80011a0 <SystemInit+0x5c>)
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <SystemInit+0x60>)
 800115c:	4013      	ands	r3, r2
 800115e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <SystemInit+0x5c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <SystemInit+0x5c>)
 8001166:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800116a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <SystemInit+0x5c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SystemInit+0x5c>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <SystemInit+0x5c>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <SystemInit+0x5c>)
 8001182:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001186:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SystemInit+0x5c>)
 800118a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800118e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SystemInit+0x64>)
 8001192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001196:	609a      	str	r2, [r3, #8]
#endif 
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40021000 	.word	0x40021000
 80011a4:	f8ff0000 	.word	0xf8ff0000
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <MX_TIM2_Init+0x98>)
 80011cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <MX_TIM2_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_TIM2_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_TIM2_Init+0x98>)
 80011e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_TIM2_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_TIM2_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f2:	4814      	ldr	r0, [pc, #80]	; (8001244 <MX_TIM2_Init+0x98>)
 80011f4:	f002 fdb4 	bl	8003d60 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011fe:	f7ff fdbb 	bl	8000d78 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <MX_TIM2_Init+0x98>)
 8001212:	f002 fe2b 	bl	8003e6c <HAL_TIM_SlaveConfigSynchro>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800121c:	f7ff fdac 	bl	8000d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_TIM2_Init+0x98>)
 800122e:	f003 f941 	bl	80044b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001238:	f7ff fd9e 	bl	8000d78 <Error_Handler>
  }

}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000208 	.word	0x20000208

08001248 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001258:	d10b      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_TIM_Base_MspInit+0x34>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_TIM_Base_MspInit+0x34>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_TIM_Base_MspInit+0x34>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000

08001280 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_USART1_UART_Init+0x50>)
 8001288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 800128c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USART1_UART_Init+0x4c>)
 80012b8:	f003 f992 	bl	80045e0 <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012c2:	f7ff fd59 	bl	8000d78 <Error_Handler>
  }

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000248 	.word	0x20000248
 80012d0:	40013800 	.word	0x40013800

080012d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a26      	ldr	r2, [pc, #152]	; (8001388 <HAL_UART_MspInit+0xb4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d145      	bne.n	8001380 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <HAL_UART_MspInit+0xb8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a24      	ldr	r2, [pc, #144]	; (800138c <HAL_UART_MspInit+0xb8>)
 80012fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_UART_MspInit+0xb8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_UART_MspInit+0xb8>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_UART_MspInit+0xb8>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_UART_MspInit+0xb8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8001324:	2340      	movs	r3, #64	; 0x40
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4816      	ldr	r0, [pc, #88]	; (8001390 <HAL_UART_MspInit+0xbc>)
 8001338:	f000 fdf2 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4810      	ldr	r0, [pc, #64]	; (8001390 <HAL_UART_MspInit+0xbc>)
 8001350:	f000 fde6 	bl	8001f20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_UART_MspInit+0xc0>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_UART_MspInit+0xc0>)
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	2025      	movs	r0, #37	; 0x25
 8001376:	f000 fd0d 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800137a:	2025      	movs	r0, #37	; 0x25
 800137c:	f000 fd36 	bl	8001dec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40013800 	.word	0x40013800
 800138c:	40021000 	.word	0x40021000
 8001390:	40010c00 	.word	0x40010c00
 8001394:	40010000 	.word	0x40010000

08001398 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001398:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800139a:	e003      	b.n	80013a4 <LoopCopyDataInit>

0800139c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800139e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013a2:	3104      	adds	r1, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013ac:	d3f6      	bcc.n	800139c <CopyDataInit>
  ldr r2, =_sbss
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013b0:	e002      	b.n	80013b8 <LoopFillZerobss>

080013b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013b4:	f842 3b04 	str.w	r3, [r2], #4

080013b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013bc:	d3f9      	bcc.n	80013b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013be:	f7ff fec1 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c2:	f004 fa3d 	bl	8005840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c6:	f7ff fb99 	bl	8000afc <main>
  bx lr
 80013ca:	4770      	bx	lr
  ldr r3, =_sidata
 80013cc:	080066d0 	.word	0x080066d0
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013d4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80013d8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80013dc:	20000290 	.word	0x20000290

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_Init+0x28>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_Init+0x28>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 fcad 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fde2 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fcf4 	bl	8001e1c <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 fca2 	bl	8001d94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000000 	.word	0x20000000
 8001468:	20000008 	.word	0x20000008
 800146c:	20000004 	.word	0x20000004

08001470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_IncTick+0x1c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_IncTick+0x20>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_IncTick+0x20>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000008 	.word	0x20000008
 8001490:	20000288 	.word	0x20000288

08001494 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b02      	ldr	r3, [pc, #8]	; (80014a4 <HAL_GetTick+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000288 	.word	0x20000288

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff fff0 	bl	8001494 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_Delay+0x40>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffe0 	bl	8001494 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000008 	.word	0x20000008

080014ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e153      	b.n	80017b6 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a9f      	ldr	r2, [pc, #636]	; (8001790 <HAL_ADC_Init+0x2a4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d009      	beq.n	800152c <HAL_ADC_Init+0x40>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a9d      	ldr	r2, [pc, #628]	; (8001794 <HAL_ADC_Init+0x2a8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d004      	beq.n	800152c <HAL_ADC_Init+0x40>
 8001522:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001526:	489c      	ldr	r0, [pc, #624]	; (8001798 <HAL_ADC_Init+0x2ac>)
 8001528:	f7ff fc2c 	bl	8000d84 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d009      	beq.n	8001548 <HAL_ADC_Init+0x5c>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800153c:	d004      	beq.n	8001548 <HAL_ADC_Init+0x5c>
 800153e:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8001542:	4895      	ldr	r0, [pc, #596]	; (8001798 <HAL_ADC_Init+0x2ac>)
 8001544:	f7ff fc1e 	bl	8000d84 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <HAL_ADC_Init+0x78>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001558:	d004      	beq.n	8001564 <HAL_ADC_Init+0x78>
 800155a:	f240 11b5 	movw	r1, #437	; 0x1b5
 800155e:	488e      	ldr	r0, [pc, #568]	; (8001798 <HAL_ADC_Init+0x2ac>)
 8001560:	f7ff fc10 	bl	8000d84 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7b1b      	ldrb	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <HAL_ADC_Init+0x92>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7b1b      	ldrb	r3, [r3, #12]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d004      	beq.n	800157e <HAL_ADC_Init+0x92>
 8001574:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001578:	4887      	ldr	r0, [pc, #540]	; (8001798 <HAL_ADC_Init+0x2ac>)
 800157a:	f7ff fc03 	bl	8000d84 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d022      	beq.n	80015cc <HAL_ADC_Init+0xe0>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800158e:	d01d      	beq.n	80015cc <HAL_ADC_Init+0xe0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001598:	d018      	beq.n	80015cc <HAL_ADC_Init+0xe0>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015a2:	d013      	beq.n	80015cc <HAL_ADC_Init+0xe0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80015ac:	d00e      	beq.n	80015cc <HAL_ADC_Init+0xe0>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80015b6:	d009      	beq.n	80015cc <HAL_ADC_Init+0xe0>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015c0:	d004      	beq.n	80015cc <HAL_ADC_Init+0xe0>
 80015c2:	f240 11b7 	movw	r1, #439	; 0x1b7
 80015c6:	4874      	ldr	r0, [pc, #464]	; (8001798 <HAL_ADC_Init+0x2ac>)
 80015c8:	f7ff fbdc 	bl	8000d84 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d02a      	beq.n	800162a <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_ADC_Init+0xf8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b10      	cmp	r3, #16
 80015e2:	d904      	bls.n	80015ee <HAL_ADC_Init+0x102>
 80015e4:	f240 11bb 	movw	r1, #443	; 0x1bb
 80015e8:	486b      	ldr	r0, [pc, #428]	; (8001798 <HAL_ADC_Init+0x2ac>)
 80015ea:	f7ff fbcb 	bl	8000d84 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7d1b      	ldrb	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <HAL_ADC_Init+0x11c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7d1b      	ldrb	r3, [r3, #20]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d004      	beq.n	8001608 <HAL_ADC_Init+0x11c>
 80015fe:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001602:	4865      	ldr	r0, [pc, #404]	; (8001798 <HAL_ADC_Init+0x2ac>)
 8001604:	f7ff fbbe 	bl	8000d84 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7d1b      	ldrb	r3, [r3, #20]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00c      	beq.n	800162a <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_ADC_Init+0x134>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b08      	cmp	r3, #8
 800161e:	d904      	bls.n	800162a <HAL_ADC_Init+0x13e>
 8001620:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001624:	485c      	ldr	r0, [pc, #368]	; (8001798 <HAL_ADC_Init+0x2ac>)
 8001626:	f7ff fbad 	bl	8000d84 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff f925 	bl	8000890 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fa7e 	bl	8001b48 <ADC_ConversionStop_Disable>
 800164c:	4603      	mov	r3, r0
 800164e:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2b00      	cmp	r3, #0
 800165a:	f040 80a3 	bne.w	80017a4 <HAL_ADC_Init+0x2b8>
 800165e:	7dfb      	ldrb	r3, [r7, #23]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 809f 	bne.w	80017a4 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800166e:	f023 0302 	bic.w	r3, r3, #2
 8001672:	f043 0202 	orr.w	r2, r3, #2
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001682:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7b1b      	ldrb	r3, [r3, #12]
 8001688:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800168a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	4313      	orrs	r3, r2
 8001690:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800169a:	d003      	beq.n	80016a4 <HAL_ADC_Init+0x1b8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d102      	bne.n	80016aa <HAL_ADC_Init+0x1be>
 80016a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a8:	e000      	b.n	80016ac <HAL_ADC_Init+0x1c0>
 80016aa:	2300      	movs	r3, #0
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7d1b      	ldrb	r3, [r3, #20]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d119      	bne.n	80016ee <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7b1b      	ldrb	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d109      	bne.n	80016d6 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	035a      	lsls	r2, r3, #13
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	e00b      	b.n	80016ee <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	f043 0220 	orr.w	r2, r3, #32
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	f043 0201 	orr.w	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	430a      	orrs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_ADC_Init+0x2b0>)
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	430b      	orrs	r3, r1
 8001714:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800171e:	d003      	beq.n	8001728 <HAL_ADC_Init+0x23c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d104      	bne.n	8001732 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	3b01      	subs	r3, #1
 800172e:	051b      	lsls	r3, r3, #20
 8001730:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_ADC_Init+0x2b4>)
 800174e:	4013      	ands	r3, r2
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	429a      	cmp	r2, r3
 8001754:	d10b      	bne.n	800176e <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	f023 0303 	bic.w	r3, r3, #3
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800176c:	e022      	b.n	80017b4 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	f023 0312 	bic.w	r3, r3, #18
 8001776:	f043 0210 	orr.w	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	f043 0201 	orr.w	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800178e:	e011      	b.n	80017b4 <HAL_ADC_Init+0x2c8>
 8001790:	40012400 	.word	0x40012400
 8001794:	40012800 	.word	0x40012800
 8001798:	08006274 	.word	0x08006274
 800179c:	ffe1f7fd 	.word	0xffe1f7fd
 80017a0:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	f043 0210 	orr.w	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop

080017c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a88      	ldr	r2, [pc, #544]	; (80019f8 <HAL_ADC_ConfigChannel+0x238>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d009      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0x30>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a86      	ldr	r2, [pc, #536]	; (80019fc <HAL_ADC_ConfigChannel+0x23c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d004      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0x30>
 80017e6:	f240 71ce 	movw	r1, #1998	; 0x7ce
 80017ea:	4885      	ldr	r0, [pc, #532]	; (8001a00 <HAL_ADC_ConfigChannel+0x240>)
 80017ec:	f7ff faca 	bl	8000d84 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d048      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d044      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d040      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d03c      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b04      	cmp	r3, #4
 8001816:	d038      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d034      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b06      	cmp	r3, #6
 8001826:	d030      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b07      	cmp	r3, #7
 800182e:	d02c      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b08      	cmp	r3, #8
 8001836:	d028      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b09      	cmp	r3, #9
 800183e:	d024      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b0a      	cmp	r3, #10
 8001846:	d020      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b0b      	cmp	r3, #11
 800184e:	d01c      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d018      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b0d      	cmp	r3, #13
 800185e:	d014      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b0e      	cmp	r3, #14
 8001866:	d010      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d00c      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b10      	cmp	r3, #16
 8001876:	d008      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b11      	cmp	r3, #17
 800187e:	d004      	beq.n	800188a <HAL_ADC_ConfigChannel+0xca>
 8001880:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8001884:	485e      	ldr	r0, [pc, #376]	; (8001a00 <HAL_ADC_ConfigChannel+0x240>)
 8001886:	f7ff fa7d 	bl	8000d84 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d040      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d03c      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d038      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d034      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d030      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d02c      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b07      	cmp	r3, #7
 80018c0:	d028      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d024      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b09      	cmp	r3, #9
 80018d0:	d020      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b0a      	cmp	r3, #10
 80018d8:	d01c      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b0b      	cmp	r3, #11
 80018e0:	d018      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d014      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b0d      	cmp	r3, #13
 80018f0:	d010      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b0e      	cmp	r3, #14
 80018f8:	d00c      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b0f      	cmp	r3, #15
 8001900:	d008      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b10      	cmp	r3, #16
 8001908:	d004      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x154>
 800190a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800190e:	483c      	ldr	r0, [pc, #240]	; (8001a00 <HAL_ADC_ConfigChannel+0x240>)
 8001910:	f7ff fa38 	bl	8000d84 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_ADC_ConfigChannel+0x19e>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d01c      	beq.n	800195e <HAL_ADC_ConfigChannel+0x19e>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d018      	beq.n	800195e <HAL_ADC_ConfigChannel+0x19e>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d014      	beq.n	800195e <HAL_ADC_ConfigChannel+0x19e>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d010      	beq.n	800195e <HAL_ADC_ConfigChannel+0x19e>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b05      	cmp	r3, #5
 8001942:	d00c      	beq.n	800195e <HAL_ADC_ConfigChannel+0x19e>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b06      	cmp	r3, #6
 800194a:	d008      	beq.n	800195e <HAL_ADC_ConfigChannel+0x19e>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b07      	cmp	r3, #7
 8001952:	d004      	beq.n	800195e <HAL_ADC_ConfigChannel+0x19e>
 8001954:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8001958:	4829      	ldr	r0, [pc, #164]	; (8001a00 <HAL_ADC_ConfigChannel+0x240>)
 800195a:	f7ff fa13 	bl	8000d84 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_ADC_ConfigChannel+0x1ac>
 8001968:	2302      	movs	r3, #2
 800196a:	e0e2      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x372>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b06      	cmp	r3, #6
 800197a:	d81c      	bhi.n	80019b6 <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b05      	subs	r3, #5
 800198e:	221f      	movs	r2, #31
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	4019      	ands	r1, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	3b05      	subs	r3, #5
 80019a8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	635a      	str	r2, [r3, #52]	; 0x34
 80019b4:	e042      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d822      	bhi.n	8001a04 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	3b23      	subs	r3, #35	; 0x23
 80019d0:	221f      	movs	r2, #31
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	4019      	ands	r1, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	3b23      	subs	r3, #35	; 0x23
 80019ea:	fa00 f203 	lsl.w	r2, r0, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30
 80019f6:	e021      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x27c>
 80019f8:	40012400 	.word	0x40012400
 80019fc:	40012800 	.word	0x40012800
 8001a00:	08006274 	.word	0x08006274
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b41      	subs	r3, #65	; 0x41
 8001a16:	221f      	movs	r2, #31
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4019      	ands	r1, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b41      	subs	r3, #65	; 0x41
 8001a30:	fa00 f203 	lsl.w	r2, r0, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	d91c      	bls.n	8001a7e <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68d9      	ldr	r1, [r3, #12]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	3b1e      	subs	r3, #30
 8001a56:	2207      	movs	r2, #7
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4019      	ands	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6898      	ldr	r0, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b1e      	subs	r3, #30
 8001a70:	fa00 f203 	lsl.w	r2, r0, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	e019      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6919      	ldr	r1, [r3, #16]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2207      	movs	r2, #7
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4019      	ands	r1, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6898      	ldr	r0, [r3, #8]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d003      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001abe:	2b11      	cmp	r3, #17
 8001ac0:	d132      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_ADC_ConfigChannel+0x37c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d125      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d126      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ae8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d11a      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_ADC_ConfigChannel+0x380>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_ADC_ConfigChannel+0x384>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0c9a      	lsrs	r2, r3, #18
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b08:	e002      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f9      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x34a>
 8001b16:	e007      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40012400 	.word	0x40012400
 8001b40:	20000000 	.word	0x20000000
 8001b44:	431bde83 	.word	0x431bde83

08001b48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d127      	bne.n	8001bb2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b72:	f7ff fc8f 	bl	8001494 <HAL_GetTick>
 8001b76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b78:	e014      	b.n	8001ba4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b7a:	f7ff fc8b 	bl	8001494 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d90d      	bls.n	8001ba4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	f043 0210 	orr.w	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e007      	b.n	8001bb4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d0e3      	beq.n	8001b7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4906      	ldr	r1, [pc, #24]	; (8001c54 <__NVIC_EnableIRQ+0x34>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff90 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b07      	cmp	r3, #7
 8001d60:	d00f      	beq.n	8001d82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b06      	cmp	r3, #6
 8001d66:	d00c      	beq.n	8001d82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d009      	beq.n	8001d82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d006      	beq.n	8001d82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d003      	beq.n	8001d82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d7a:	2192      	movs	r1, #146	; 0x92
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001d7e:	f7ff f801 	bl	8000d84 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ff1a 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	080062ac 	.word	0x080062ac

08001d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b0f      	cmp	r3, #15
 8001daa:	d903      	bls.n	8001db4 <HAL_NVIC_SetPriority+0x20>
 8001dac:	21aa      	movs	r1, #170	; 0xaa
 8001dae:	480e      	ldr	r0, [pc, #56]	; (8001de8 <HAL_NVIC_SetPriority+0x54>)
 8001db0:	f7fe ffe8 	bl	8000d84 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b0f      	cmp	r3, #15
 8001db8:	d903      	bls.n	8001dc2 <HAL_NVIC_SetPriority+0x2e>
 8001dba:	21ab      	movs	r1, #171	; 0xab
 8001dbc:	480a      	ldr	r0, [pc, #40]	; (8001de8 <HAL_NVIC_SetPriority+0x54>)
 8001dbe:	f7fe ffe1 	bl	8000d84 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc2:	f7ff ff1f 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001dc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	6978      	ldr	r0, [r7, #20]
 8001dce:	f7ff ff6d 	bl	8001cac <NVIC_EncodePriority>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff3c 	bl	8001c58 <__NVIC_SetPriority>
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	080062ac 	.word	0x080062ac

08001dec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	da03      	bge.n	8001e06 <HAL_NVIC_EnableIRQ+0x1a>
 8001dfe:	21be      	movs	r1, #190	; 0xbe
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_NVIC_EnableIRQ+0x2c>)
 8001e02:	f7fe ffbf 	bl	8000d84 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff08 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	080062ac 	.word	0x080062ac

08001e1c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff73 	bl	8001d10 <SysTick_Config>
 8001e2a:	4603      	mov	r3, r0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d005      	beq.n	8001e56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e051      	b.n	8001efa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 020e 	bic.w	r2, r2, #14
 8001e64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <HAL_DMA_Abort_IT+0xd0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d029      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0xa0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <HAL_DMA_Abort_IT+0xd4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d022      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0x9c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_DMA_Abort_IT+0xd8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d01a      	beq.n	8001eca <HAL_DMA_Abort_IT+0x96>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_DMA_Abort_IT+0xdc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d012      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x90>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <HAL_DMA_Abort_IT+0xe0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00a      	beq.n	8001ebe <HAL_DMA_Abort_IT+0x8a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <HAL_DMA_Abort_IT+0xe4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d102      	bne.n	8001eb8 <HAL_DMA_Abort_IT+0x84>
 8001eb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eb6:	e00e      	b.n	8001ed6 <HAL_DMA_Abort_IT+0xa2>
 8001eb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ebc:	e00b      	b.n	8001ed6 <HAL_DMA_Abort_IT+0xa2>
 8001ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec2:	e008      	b.n	8001ed6 <HAL_DMA_Abort_IT+0xa2>
 8001ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec8:	e005      	b.n	8001ed6 <HAL_DMA_Abort_IT+0xa2>
 8001eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ece:	e002      	b.n	8001ed6 <HAL_DMA_Abort_IT+0xa2>
 8001ed0:	2310      	movs	r3, #16
 8001ed2:	e000      	b.n	8001ed6 <HAL_DMA_Abort_IT+0xa2>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <HAL_DMA_Abort_IT+0xe8>)
 8001ed8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
    } 
  }
  return status;
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40020008 	.word	0x40020008
 8001f08:	4002001c 	.word	0x4002001c
 8001f0c:	40020030 	.word	0x40020030
 8001f10:	40020044 	.word	0x40020044
 8001f14:	40020058 	.word	0x40020058
 8001f18:	4002006c 	.word	0x4002006c
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a9c      	ldr	r2, [pc, #624]	; (80021a8 <HAL_GPIO_Init+0x288>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x42>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a9b      	ldr	r2, [pc, #620]	; (80021ac <HAL_GPIO_Init+0x28c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00f      	beq.n	8001f62 <HAL_GPIO_Init+0x42>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a9a      	ldr	r2, [pc, #616]	; (80021b0 <HAL_GPIO_Init+0x290>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00b      	beq.n	8001f62 <HAL_GPIO_Init+0x42>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a99      	ldr	r2, [pc, #612]	; (80021b4 <HAL_GPIO_Init+0x294>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x42>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a98      	ldr	r2, [pc, #608]	; (80021b8 <HAL_GPIO_Init+0x298>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x42>
 8001f5a:	21bd      	movs	r1, #189	; 0xbd
 8001f5c:	4897      	ldr	r0, [pc, #604]	; (80021bc <HAL_GPIO_Init+0x29c>)
 8001f5e:	f7fe ff11 	bl	8000d84 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_GPIO_Init+0x58>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	041b      	lsls	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x60>
 8001f78:	21be      	movs	r1, #190	; 0xbe
 8001f7a:	4890      	ldr	r0, [pc, #576]	; (80021bc <HAL_GPIO_Init+0x29c>)
 8001f7c:	f7fe ff02 	bl	8000d84 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 81eb 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	f000 81e6 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b11      	cmp	r3, #17
 8001f9a:	f000 81e1 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	f000 81dc 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b12      	cmp	r3, #18
 8001fae:	f000 81d7 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4a82      	ldr	r2, [pc, #520]	; (80021c0 <HAL_GPIO_Init+0x2a0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	f000 81d1 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a80      	ldr	r2, [pc, #512]	; (80021c4 <HAL_GPIO_Init+0x2a4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	f000 81cb 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4a7e      	ldr	r2, [pc, #504]	; (80021c8 <HAL_GPIO_Init+0x2a8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	f000 81c5 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4a7c      	ldr	r2, [pc, #496]	; (80021cc <HAL_GPIO_Init+0x2ac>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	f000 81bf 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a7a      	ldr	r2, [pc, #488]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	f000 81b9 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4a78      	ldr	r2, [pc, #480]	; (80021d4 <HAL_GPIO_Init+0x2b4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	f000 81b3 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	f000 81ae 	beq.w	8002360 <HAL_GPIO_Init+0x440>
 8002004:	21bf      	movs	r1, #191	; 0xbf
 8002006:	486d      	ldr	r0, [pc, #436]	; (80021bc <HAL_GPIO_Init+0x29c>)
 8002008:	f7fe febc 	bl	8000d84 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200c:	e1a8      	b.n	8002360 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800200e:	2201      	movs	r2, #1
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	429a      	cmp	r2, r3
 8002028:	f040 8197 	bne.w	800235a <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a5e      	ldr	r2, [pc, #376]	; (80021a8 <HAL_GPIO_Init+0x288>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <HAL_GPIO_Init+0x13c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a5d      	ldr	r2, [pc, #372]	; (80021ac <HAL_GPIO_Init+0x28c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d00f      	beq.n	800205c <HAL_GPIO_Init+0x13c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a5c      	ldr	r2, [pc, #368]	; (80021b0 <HAL_GPIO_Init+0x290>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00b      	beq.n	800205c <HAL_GPIO_Init+0x13c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a5b      	ldr	r2, [pc, #364]	; (80021b4 <HAL_GPIO_Init+0x294>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d007      	beq.n	800205c <HAL_GPIO_Init+0x13c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a5a      	ldr	r2, [pc, #360]	; (80021b8 <HAL_GPIO_Init+0x298>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x13c>
 8002054:	21cd      	movs	r1, #205	; 0xcd
 8002056:	4859      	ldr	r0, [pc, #356]	; (80021bc <HAL_GPIO_Init+0x29c>)
 8002058:	f7fe fe94 	bl	8000d84 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b12      	cmp	r3, #18
 8002062:	d065      	beq.n	8002130 <HAL_GPIO_Init+0x210>
 8002064:	2b12      	cmp	r3, #18
 8002066:	d80e      	bhi.n	8002086 <HAL_GPIO_Init+0x166>
 8002068:	2b02      	cmp	r3, #2
 800206a:	d04c      	beq.n	8002106 <HAL_GPIO_Init+0x1e6>
 800206c:	2b02      	cmp	r3, #2
 800206e:	d804      	bhi.n	800207a <HAL_GPIO_Init+0x15a>
 8002070:	2b00      	cmp	r3, #0
 8002072:	d072      	beq.n	800215a <HAL_GPIO_Init+0x23a>
 8002074:	2b01      	cmp	r3, #1
 8002076:	d01d      	beq.n	80020b4 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002078:	e0b1      	b.n	80021de <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800207a:	2b03      	cmp	r3, #3
 800207c:	f000 80ac 	beq.w	80021d8 <HAL_GPIO_Init+0x2b8>
 8002080:	2b11      	cmp	r3, #17
 8002082:	d02b      	beq.n	80020dc <HAL_GPIO_Init+0x1bc>
          break;
 8002084:	e0ab      	b.n	80021de <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8002086:	4a4f      	ldr	r2, [pc, #316]	; (80021c4 <HAL_GPIO_Init+0x2a4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d066      	beq.n	800215a <HAL_GPIO_Init+0x23a>
 800208c:	4a4d      	ldr	r2, [pc, #308]	; (80021c4 <HAL_GPIO_Init+0x2a4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d806      	bhi.n	80020a0 <HAL_GPIO_Init+0x180>
 8002092:	4a4b      	ldr	r2, [pc, #300]	; (80021c0 <HAL_GPIO_Init+0x2a0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d060      	beq.n	800215a <HAL_GPIO_Init+0x23a>
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x2ac>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d05d      	beq.n	800215a <HAL_GPIO_Init+0x23a>
          break;
 800209e:	e09e      	b.n	80021de <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80020a0:	4a49      	ldr	r2, [pc, #292]	; (80021c8 <HAL_GPIO_Init+0x2a8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d059      	beq.n	800215a <HAL_GPIO_Init+0x23a>
 80020a6:	4a4b      	ldr	r2, [pc, #300]	; (80021d4 <HAL_GPIO_Init+0x2b4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d056      	beq.n	800215a <HAL_GPIO_Init+0x23a>
 80020ac:	4a48      	ldr	r2, [pc, #288]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d053      	beq.n	800215a <HAL_GPIO_Init+0x23a>
          break;
 80020b2:	e094      	b.n	80021de <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d00b      	beq.n	80020d4 <HAL_GPIO_Init+0x1b4>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d007      	beq.n	80020d4 <HAL_GPIO_Init+0x1b4>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x1b4>
 80020cc:	21d5      	movs	r1, #213	; 0xd5
 80020ce:	483b      	ldr	r0, [pc, #236]	; (80021bc <HAL_GPIO_Init+0x29c>)
 80020d0:	f7fe fe58 	bl	8000d84 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	623b      	str	r3, [r7, #32]
          break;
 80020da:	e080      	b.n	80021de <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d00b      	beq.n	80020fc <HAL_GPIO_Init+0x1dc>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d007      	beq.n	80020fc <HAL_GPIO_Init+0x1dc>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x1dc>
 80020f4:	21dc      	movs	r1, #220	; 0xdc
 80020f6:	4831      	ldr	r0, [pc, #196]	; (80021bc <HAL_GPIO_Init+0x29c>)
 80020f8:	f7fe fe44 	bl	8000d84 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	3304      	adds	r3, #4
 8002102:	623b      	str	r3, [r7, #32]
          break;
 8002104:	e06b      	b.n	80021de <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d00b      	beq.n	8002126 <HAL_GPIO_Init+0x206>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d007      	beq.n	8002126 <HAL_GPIO_Init+0x206>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x206>
 800211e:	21e3      	movs	r1, #227	; 0xe3
 8002120:	4826      	ldr	r0, [pc, #152]	; (80021bc <HAL_GPIO_Init+0x29c>)
 8002122:	f7fe fe2f 	bl	8000d84 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	3308      	adds	r3, #8
 800212c:	623b      	str	r3, [r7, #32]
          break;
 800212e:	e056      	b.n	80021de <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d00b      	beq.n	8002150 <HAL_GPIO_Init+0x230>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d007      	beq.n	8002150 <HAL_GPIO_Init+0x230>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x230>
 8002148:	21ea      	movs	r1, #234	; 0xea
 800214a:	481c      	ldr	r0, [pc, #112]	; (80021bc <HAL_GPIO_Init+0x29c>)
 800214c:	f7fe fe1a 	bl	8000d84 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	330c      	adds	r3, #12
 8002156:	623b      	str	r3, [r7, #32]
          break;
 8002158:	e041      	b.n	80021de <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <HAL_GPIO_Init+0x25a>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d007      	beq.n	800217a <HAL_GPIO_Init+0x25a>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x25a>
 8002172:	21f7      	movs	r1, #247	; 0xf7
 8002174:	4811      	ldr	r0, [pc, #68]	; (80021bc <HAL_GPIO_Init+0x29c>)
 8002176:	f7fe fe05 	bl	8000d84 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002182:	2304      	movs	r3, #4
 8002184:	623b      	str	r3, [r7, #32]
          break;
 8002186:	e02a      	b.n	80021de <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002190:	2308      	movs	r3, #8
 8002192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	611a      	str	r2, [r3, #16]
          break;
 800219a:	e020      	b.n	80021de <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800219c:	2308      	movs	r3, #8
 800219e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	615a      	str	r2, [r3, #20]
          break;
 80021a6:	e01a      	b.n	80021de <HAL_GPIO_Init+0x2be>
 80021a8:	40010800 	.word	0x40010800
 80021ac:	40010c00 	.word	0x40010c00
 80021b0:	40011000 	.word	0x40011000
 80021b4:	40011400 	.word	0x40011400
 80021b8:	40011800 	.word	0x40011800
 80021bc:	080062e8 	.word	0x080062e8
 80021c0:	10110000 	.word	0x10110000
 80021c4:	10210000 	.word	0x10210000
 80021c8:	10310000 	.word	0x10310000
 80021cc:	10120000 	.word	0x10120000
 80021d0:	10220000 	.word	0x10220000
 80021d4:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
          break;
 80021dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2bff      	cmp	r3, #255	; 0xff
 80021e2:	d801      	bhi.n	80021e8 <HAL_GPIO_Init+0x2c8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	e001      	b.n	80021ec <HAL_GPIO_Init+0x2cc>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2bff      	cmp	r3, #255	; 0xff
 80021f2:	d802      	bhi.n	80021fa <HAL_GPIO_Init+0x2da>
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x2e0>
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	3b08      	subs	r3, #8
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	210f      	movs	r1, #15
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	401a      	ands	r2, r3
 8002212:	6a39      	ldr	r1, [r7, #32]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	431a      	orrs	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8096 	beq.w	800235a <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800222e:	4b52      	ldr	r3, [pc, #328]	; (8002378 <HAL_GPIO_Init+0x458>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	4a51      	ldr	r2, [pc, #324]	; (8002378 <HAL_GPIO_Init+0x458>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6193      	str	r3, [r2, #24]
 800223a:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <HAL_GPIO_Init+0x458>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002246:	4a4d      	ldr	r2, [pc, #308]	; (800237c <HAL_GPIO_Init+0x45c>)
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	3302      	adds	r3, #2
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	220f      	movs	r2, #15
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4013      	ands	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a44      	ldr	r2, [pc, #272]	; (8002380 <HAL_GPIO_Init+0x460>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x37a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a43      	ldr	r2, [pc, #268]	; (8002384 <HAL_GPIO_Init+0x464>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x376>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a42      	ldr	r2, [pc, #264]	; (8002388 <HAL_GPIO_Init+0x468>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x372>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a41      	ldr	r2, [pc, #260]	; (800238c <HAL_GPIO_Init+0x46c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x36e>
 800228a:	2303      	movs	r3, #3
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x37c>
 800228e:	2304      	movs	r3, #4
 8002290:	e004      	b.n	800229c <HAL_GPIO_Init+0x37c>
 8002292:	2302      	movs	r3, #2
 8002294:	e002      	b.n	800229c <HAL_GPIO_Init+0x37c>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x37c>
 800229a:	2300      	movs	r3, #0
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	f002 0203 	and.w	r2, r2, #3
 80022a2:	0092      	lsls	r2, r2, #2
 80022a4:	4093      	lsls	r3, r2
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ac:	4933      	ldr	r1, [pc, #204]	; (800237c <HAL_GPIO_Init+0x45c>)
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022c6:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_GPIO_Init+0x470>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4931      	ldr	r1, [pc, #196]	; (8002390 <HAL_GPIO_Init+0x470>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
 80022d2:	e006      	b.n	80022e2 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022d4:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <HAL_GPIO_Init+0x470>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	43db      	mvns	r3, r3
 80022dc:	492c      	ldr	r1, [pc, #176]	; (8002390 <HAL_GPIO_Init+0x470>)
 80022de:	4013      	ands	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_GPIO_Init+0x470>)
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4927      	ldr	r1, [pc, #156]	; (8002390 <HAL_GPIO_Init+0x470>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
 80022fa:	e006      	b.n	800230a <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022fc:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_GPIO_Init+0x470>)
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	43db      	mvns	r3, r3
 8002304:	4922      	ldr	r1, [pc, #136]	; (8002390 <HAL_GPIO_Init+0x470>)
 8002306:	4013      	ands	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_GPIO_Init+0x470>)
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	491d      	ldr	r1, [pc, #116]	; (8002390 <HAL_GPIO_Init+0x470>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
 8002322:	e006      	b.n	8002332 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_GPIO_Init+0x470>)
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	43db      	mvns	r3, r3
 800232c:	4918      	ldr	r1, [pc, #96]	; (8002390 <HAL_GPIO_Init+0x470>)
 800232e:	4013      	ands	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HAL_GPIO_Init+0x470>)
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	4913      	ldr	r1, [pc, #76]	; (8002390 <HAL_GPIO_Init+0x470>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	60cb      	str	r3, [r1, #12]
 800234a:	e006      	b.n	800235a <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_GPIO_Init+0x470>)
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	43db      	mvns	r3, r3
 8002354:	490e      	ldr	r1, [pc, #56]	; (8002390 <HAL_GPIO_Init+0x470>)
 8002356:	4013      	ands	r3, r2
 8002358:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	3301      	adds	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	f47f ae4f 	bne.w	800200e <HAL_GPIO_Init+0xee>
  }
}
 8002370:	bf00      	nop
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	40010000 	.word	0x40010000
 8002380:	40010800 	.word	0x40010800
 8002384:	40010c00 	.word	0x40010c00
 8002388:	40011000 	.word	0x40011000
 800238c:	40011400 	.word	0x40011400
 8002390:	40010400 	.word	0x40010400

08002394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80023a0:	887b      	ldrh	r3, [r7, #2]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d004      	beq.n	80023b0 <HAL_GPIO_ReadPin+0x1c>
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	041b      	lsls	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <HAL_GPIO_ReadPin+0x26>
 80023b0:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80023b4:	4809      	ldr	r0, [pc, #36]	; (80023dc <HAL_GPIO_ReadPin+0x48>)
 80023b6:	f7fe fce5 	bl	8000d84 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	e001      	b.n	80023d0 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	080062e8 	.word	0x080062e8

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
 80023ec:	4613      	mov	r3, r2
 80023ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <HAL_GPIO_WritePin+0x20>
 80023f6:	887b      	ldrh	r3, [r7, #2]
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	041b      	lsls	r3, r3, #16
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d004      	beq.n	800240a <HAL_GPIO_WritePin+0x2a>
 8002400:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8002404:	480e      	ldr	r0, [pc, #56]	; (8002440 <HAL_GPIO_WritePin+0x60>)
 8002406:	f7fe fcbd 	bl	8000d84 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800240a:	787b      	ldrb	r3, [r7, #1]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <HAL_GPIO_WritePin+0x40>
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d004      	beq.n	8002420 <HAL_GPIO_WritePin+0x40>
 8002416:	f240 11d5 	movw	r1, #469	; 0x1d5
 800241a:	4809      	ldr	r0, [pc, #36]	; (8002440 <HAL_GPIO_WritePin+0x60>)
 800241c:	f7fe fcb2 	bl	8000d84 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800242c:	e003      	b.n	8002436 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	041a      	lsls	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	611a      	str	r2, [r3, #16]
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	080062e8 	.word	0x080062e8

08002444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e1ab      	b.n	80027ae <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4aa0      	ldr	r2, [pc, #640]	; (80026dc <HAL_I2C_Init+0x298>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_I2C_Init+0x30>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a9e      	ldr	r2, [pc, #632]	; (80026e0 <HAL_I2C_Init+0x29c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_I2C_Init+0x30>
 800246a:	f240 11d1 	movw	r1, #465	; 0x1d1
 800246e:	489d      	ldr	r0, [pc, #628]	; (80026e4 <HAL_I2C_Init+0x2a0>)
 8002470:	f7fe fc88 	bl	8000d84 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_I2C_Init+0x42>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4a99      	ldr	r2, [pc, #612]	; (80026e8 <HAL_I2C_Init+0x2a4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d904      	bls.n	8002490 <HAL_I2C_Init+0x4c>
 8002486:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800248a:	4896      	ldr	r0, [pc, #600]	; (80026e4 <HAL_I2C_Init+0x2a0>)
 800248c:	f7fe fc7a 	bl	8000d84 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <HAL_I2C_Init+0x68>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024a0:	d004      	beq.n	80024ac <HAL_I2C_Init+0x68>
 80024a2:	f240 11d3 	movw	r1, #467	; 0x1d3
 80024a6:	488f      	ldr	r0, [pc, #572]	; (80026e4 <HAL_I2C_Init+0x2a0>)
 80024a8:	f7fe fc6c 	bl	8000d84 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024b4:	f023 0303 	bic.w	r3, r3, #3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d004      	beq.n	80024c6 <HAL_I2C_Init+0x82>
 80024bc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80024c0:	4888      	ldr	r0, [pc, #544]	; (80026e4 <HAL_I2C_Init+0x2a0>)
 80024c2:	f7fe fc5f 	bl	8000d84 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ce:	d009      	beq.n	80024e4 <HAL_I2C_Init+0xa0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024d8:	d004      	beq.n	80024e4 <HAL_I2C_Init+0xa0>
 80024da:	f240 11d5 	movw	r1, #469	; 0x1d5
 80024de:	4881      	ldr	r0, [pc, #516]	; (80026e4 <HAL_I2C_Init+0x2a0>)
 80024e0:	f7fe fc50 	bl	8000d84 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_I2C_Init+0xba>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d004      	beq.n	80024fe <HAL_I2C_Init+0xba>
 80024f4:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80024f8:	487a      	ldr	r0, [pc, #488]	; (80026e4 <HAL_I2C_Init+0x2a0>)
 80024fa:	f7fe fc43 	bl	8000d84 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_I2C_Init+0xd0>
 800250a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800250e:	4875      	ldr	r0, [pc, #468]	; (80026e4 <HAL_I2C_Init+0x2a0>)
 8002510:	f7fe fc38 	bl	8000d84 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_I2C_Init+0xea>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d004      	beq.n	800252e <HAL_I2C_Init+0xea>
 8002524:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002528:	486e      	ldr	r0, [pc, #440]	; (80026e4 <HAL_I2C_Init+0x2a0>)
 800252a:	f7fe fc2b 	bl	8000d84 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_I2C_Init+0x104>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	2b80      	cmp	r3, #128	; 0x80
 800253c:	d004      	beq.n	8002548 <HAL_I2C_Init+0x104>
 800253e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002542:	4868      	ldr	r0, [pc, #416]	; (80026e4 <HAL_I2C_Init+0x2a0>)
 8002544:	f7fe fc1e 	bl	8000d84 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d106      	bne.n	8002562 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7fe fa71 	bl	8000a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2224      	movs	r2, #36	; 0x24
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002588:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002598:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800259a:	f001 f97f 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 800259e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a51      	ldr	r2, [pc, #324]	; (80026ec <HAL_I2C_Init+0x2a8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d807      	bhi.n	80025ba <HAL_I2C_Init+0x176>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a50      	ldr	r2, [pc, #320]	; (80026f0 <HAL_I2C_Init+0x2ac>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	bf94      	ite	ls
 80025b2:	2301      	movls	r3, #1
 80025b4:	2300      	movhi	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	e006      	b.n	80025c8 <HAL_I2C_Init+0x184>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a4d      	ldr	r2, [pc, #308]	; (80026f4 <HAL_I2C_Init+0x2b0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	bf94      	ite	ls
 80025c2:	2301      	movls	r3, #1
 80025c4:	2300      	movhi	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0ee      	b.n	80027ae <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a49      	ldr	r2, [pc, #292]	; (80026f8 <HAL_I2C_Init+0x2b4>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	0c9b      	lsrs	r3, r3, #18
 80025da:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a3b      	ldr	r2, [pc, #236]	; (80026ec <HAL_I2C_Init+0x2a8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d802      	bhi.n	800260a <HAL_I2C_Init+0x1c6>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3301      	adds	r3, #1
 8002608:	e009      	b.n	800261e <HAL_I2C_Init+0x1da>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	4a39      	ldr	r2, [pc, #228]	; (80026fc <HAL_I2C_Init+0x2b8>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	099b      	lsrs	r3, r3, #6
 800261c:	3301      	adds	r3, #1
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	430b      	orrs	r3, r1
 8002624:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002630:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	492c      	ldr	r1, [pc, #176]	; (80026ec <HAL_I2C_Init+0x2a8>)
 800263a:	428b      	cmp	r3, r1
 800263c:	d80d      	bhi.n	800265a <HAL_I2C_Init+0x216>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e59      	subs	r1, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fbb1 f3f3 	udiv	r3, r1, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf38      	it	cc
 8002656:	2304      	movcc	r3, #4
 8002658:	e062      	b.n	8002720 <HAL_I2C_Init+0x2dc>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d111      	bne.n	8002686 <HAL_I2C_Init+0x242>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1e58      	subs	r0, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	440b      	add	r3, r1
 8002670:	fbb0 f3f3 	udiv	r3, r0, r3
 8002674:	3301      	adds	r3, #1
 8002676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf0c      	ite	eq
 800267e:	2301      	moveq	r3, #1
 8002680:	2300      	movne	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	e012      	b.n	80026ac <HAL_I2C_Init+0x268>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1e58      	subs	r0, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	0099      	lsls	r1, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	fbb0 f3f3 	udiv	r3, r0, r3
 800269c:	3301      	adds	r3, #1
 800269e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf0c      	ite	eq
 80026a6:	2301      	moveq	r3, #1
 80026a8:	2300      	movne	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Init+0x270>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e035      	b.n	8002720 <HAL_I2C_Init+0x2dc>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d121      	bne.n	8002700 <HAL_I2C_Init+0x2bc>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e58      	subs	r0, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	440b      	add	r3, r1
 80026ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d8:	e022      	b.n	8002720 <HAL_I2C_Init+0x2dc>
 80026da:	bf00      	nop
 80026dc:	40005400 	.word	0x40005400
 80026e0:	40005800 	.word	0x40005800
 80026e4:	08006324 	.word	0x08006324
 80026e8:	00061a80 	.word	0x00061a80
 80026ec:	000186a0 	.word	0x000186a0
 80026f0:	001e847f 	.word	0x001e847f
 80026f4:	003d08ff 	.word	0x003d08ff
 80026f8:	431bde83 	.word	0x431bde83
 80026fc:	10624dd3 	.word	0x10624dd3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e58      	subs	r0, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	0099      	lsls	r1, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	fbb0 f3f3 	udiv	r3, r0, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	6809      	ldr	r1, [r1, #0]
 8002724:	4313      	orrs	r3, r2
 8002726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800274e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6911      	ldr	r1, [r2, #16]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68d2      	ldr	r2, [r2, #12]
 800275a:	4311      	orrs	r1, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	430b      	orrs	r3, r1
 8002762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop

080027b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	461a      	mov	r2, r3
 80027c4:	460b      	mov	r3, r1
 80027c6:	817b      	strh	r3, [r7, #10]
 80027c8:	4613      	mov	r3, r2
 80027ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7fe fe62 	bl	8001494 <HAL_GetTick>
 80027d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b20      	cmp	r3, #32
 80027dc:	f040 80e0 	bne.w	80029a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2319      	movs	r3, #25
 80027e6:	2201      	movs	r2, #1
 80027e8:	4970      	ldr	r1, [pc, #448]	; (80029ac <HAL_I2C_Master_Transmit+0x1f4>)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f964 	bl	8002ab8 <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
 80027f8:	e0d3      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_I2C_Master_Transmit+0x50>
 8002804:	2302      	movs	r3, #2
 8002806:	e0cc      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d007      	beq.n	800282e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0201 	orr.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2221      	movs	r2, #33	; 0x21
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2210      	movs	r2, #16
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	893a      	ldrh	r2, [r7, #8]
 800285e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a50      	ldr	r2, [pc, #320]	; (80029b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002870:	8979      	ldrh	r1, [r7, #10]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f89c 	bl	80029b4 <I2C_MasterRequestWrite>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e08d      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800289c:	e066      	b.n	800296c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	6a39      	ldr	r1, [r7, #32]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f9de 	bl	8002c64 <I2C_WaitOnTXEFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d107      	bne.n	80028c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e06b      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	781a      	ldrb	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b04      	cmp	r3, #4
 8002906:	d11b      	bne.n	8002940 <HAL_I2C_Master_Transmit+0x188>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	d017      	beq.n	8002940 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	6a39      	ldr	r1, [r7, #32]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f9ce 	bl	8002ce6 <I2C_WaitOnBTFFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00d      	beq.n	800296c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2b04      	cmp	r3, #4
 8002956:	d107      	bne.n	8002968 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002966:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e01a      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	d194      	bne.n	800289e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	e000      	b.n	80029a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	00100002 	.word	0x00100002
 80029b0:	ffff0000 	.word	0xffff0000

080029b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	460b      	mov	r3, r1
 80029c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d006      	beq.n	80029de <I2C_MasterRequestWrite+0x2a>
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d003      	beq.n	80029de <I2C_MasterRequestWrite+0x2a>
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029dc:	d108      	bne.n	80029f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e00b      	b.n	8002a08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	2b12      	cmp	r3, #18
 80029f6:	d107      	bne.n	8002a08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f84f 	bl	8002ab8 <I2C_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00d      	beq.n	8002a3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2e:	d103      	bne.n	8002a38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e035      	b.n	8002aa8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a44:	d108      	bne.n	8002a58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a46:	897b      	ldrh	r3, [r7, #10]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a54:	611a      	str	r2, [r3, #16]
 8002a56:	e01b      	b.n	8002a90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	11db      	asrs	r3, r3, #7
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 0306 	and.w	r3, r3, #6
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f063 030f 	orn	r3, r3, #15
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <I2C_MasterRequestWrite+0xfc>)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f875 	bl	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e010      	b.n	8002aa8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a86:	897b      	ldrh	r3, [r7, #10]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4907      	ldr	r1, [pc, #28]	; (8002ab4 <I2C_MasterRequestWrite+0x100>)
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f865 	bl	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	00010008 	.word	0x00010008
 8002ab4:	00010002 	.word	0x00010002

08002ab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac8:	e025      	b.n	8002b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d021      	beq.n	8002b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad2:	f7fe fcdf 	bl	8001494 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d302      	bcc.n	8002ae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d116      	bne.n	8002b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f043 0220 	orr.w	r2, r3, #32
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e023      	b.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10d      	bne.n	8002b3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	e00c      	b.n	8002b56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4013      	ands	r3, r2
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d0b6      	beq.n	8002aca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b74:	e051      	b.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b84:	d123      	bne.n	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0204 	orr.w	r2, r3, #4
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e046      	b.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d021      	beq.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd6:	f7fe fc5d 	bl	8001494 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d116      	bne.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e020      	b.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d10c      	bne.n	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	e00b      	b.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	43da      	mvns	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d18d      	bne.n	8002b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c70:	e02d      	b.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f878 	bl	8002d68 <I2C_IsAcknowledgeFailed>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e02d      	b.n	8002cde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d021      	beq.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7fe fc03 	bl	8001494 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d116      	bne.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f043 0220 	orr.w	r2, r3, #32
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e007      	b.n	8002cde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b80      	cmp	r3, #128	; 0x80
 8002cda:	d1ca      	bne.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf2:	e02d      	b.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f837 	bl	8002d68 <I2C_IsAcknowledgeFailed>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e02d      	b.n	8002d60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d021      	beq.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0c:	f7fe fbc2 	bl	8001494 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d302      	bcc.n	8002d22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d116      	bne.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e007      	b.n	8002d60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d1ca      	bne.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7e:	d11b      	bne.n	8002db8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f043 0204 	orr.w	r2, r3, #4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e35c      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x54>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <HAL_RCC_OscConfig+0x54>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d110      	bne.n	8002e18 <HAL_RCC_OscConfig+0x54>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10a      	bne.n	8002e18 <HAL_RCC_OscConfig+0x54>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <HAL_RCC_OscConfig+0x54>
 8002e0e:	f240 1167 	movw	r1, #359	; 0x167
 8002e12:	48a5      	ldr	r0, [pc, #660]	; (80030a8 <HAL_RCC_OscConfig+0x2e4>)
 8002e14:	f7fd ffb6 	bl	8000d84 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 809a 	beq.w	8002f5a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00e      	beq.n	8002e4c <HAL_RCC_OscConfig+0x88>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e36:	d009      	beq.n	8002e4c <HAL_RCC_OscConfig+0x88>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e40:	d004      	beq.n	8002e4c <HAL_RCC_OscConfig+0x88>
 8002e42:	f240 116d 	movw	r1, #365	; 0x16d
 8002e46:	4898      	ldr	r0, [pc, #608]	; (80030a8 <HAL_RCC_OscConfig+0x2e4>)
 8002e48:	f7fd ff9c 	bl	8000d84 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e4c:	4b97      	ldr	r3, [pc, #604]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d00c      	beq.n	8002e72 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e58:	4b94      	ldr	r3, [pc, #592]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d112      	bne.n	8002e8a <HAL_RCC_OscConfig+0xc6>
 8002e64:	4b91      	ldr	r3, [pc, #580]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e70:	d10b      	bne.n	8002e8a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e72:	4b8e      	ldr	r3, [pc, #568]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d06c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x194>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d168      	bne.n	8002f58 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e302      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCC_OscConfig+0xde>
 8002e94:	4b85      	ldr	r3, [pc, #532]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a84      	ldr	r2, [pc, #528]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	e02e      	b.n	8002f00 <HAL_RCC_OscConfig+0x13c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x100>
 8002eaa:	4b80      	ldr	r3, [pc, #512]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7f      	ldr	r2, [pc, #508]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b7d      	ldr	r3, [pc, #500]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7c      	ldr	r2, [pc, #496]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0x13c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x124>
 8002ece:	4b77      	ldr	r3, [pc, #476]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a76      	ldr	r2, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b74      	ldr	r3, [pc, #464]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a73      	ldr	r2, [pc, #460]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0x13c>
 8002ee8:	4b70      	ldr	r3, [pc, #448]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a6f      	ldr	r2, [pc, #444]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6c      	ldr	r2, [pc, #432]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe fac4 	bl	8001494 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fe fac0 	bl	8001494 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e2b6      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b62      	ldr	r3, [pc, #392]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x14c>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe fab0 	bl	8001494 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fe faac 	bl	8001494 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e2a2      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	4b58      	ldr	r3, [pc, #352]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x174>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d079      	beq.n	800305a <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_RCC_OscConfig+0x1bc>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d004      	beq.n	8002f80 <HAL_RCC_OscConfig+0x1bc>
 8002f76:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002f7a:	484b      	ldr	r0, [pc, #300]	; (80030a8 <HAL_RCC_OscConfig+0x2e4>)
 8002f7c:	f7fd ff02 	bl	8000d84 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	2b1f      	cmp	r3, #31
 8002f86:	d904      	bls.n	8002f92 <HAL_RCC_OscConfig+0x1ce>
 8002f88:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8002f8c:	4846      	ldr	r0, [pc, #280]	; (80030a8 <HAL_RCC_OscConfig+0x2e4>)
 8002f8e:	f7fd fef9 	bl	8000d84 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f92:	4b46      	ldr	r3, [pc, #280]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f9e:	4b43      	ldr	r3, [pc, #268]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x220>
 8002faa:	4b40      	ldr	r3, [pc, #256]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x20a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e260      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4933      	ldr	r1, [pc, #204]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e03a      	b.n	800305a <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <HAL_RCC_OscConfig+0x2ec>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7fe fa4f 	bl	8001494 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fa4b 	bl	8001494 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e241      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b27      	ldr	r3, [pc, #156]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4921      	ldr	r1, [pc, #132]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_RCC_OscConfig+0x2ec>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fe fa2e 	bl	8001494 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303c:	f7fe fa2a 	bl	8001494 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e220      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	4b17      	ldr	r3, [pc, #92]	; (80030ac <HAL_RCC_OscConfig+0x2e8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d048      	beq.n	80030f8 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_RCC_OscConfig+0x2bc>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d004      	beq.n	8003080 <HAL_RCC_OscConfig+0x2bc>
 8003076:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800307a:	480b      	ldr	r0, [pc, #44]	; (80030a8 <HAL_RCC_OscConfig+0x2e4>)
 800307c:	f7fd fe82 	bl	8000d84 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d021      	beq.n	80030cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <HAL_RCC_OscConfig+0x2f0>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7fe fa01 	bl	8001494 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003094:	e010      	b.n	80030b8 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003096:	f7fe f9fd 	bl	8001494 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d909      	bls.n	80030b8 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1f3      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
 80030a8:	0800635c 	.word	0x0800635c
 80030ac:	40021000 	.word	0x40021000
 80030b0:	42420000 	.word	0x42420000
 80030b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b8:	4b67      	ldr	r3, [pc, #412]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0e8      	beq.n	8003096 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030c4:	2001      	movs	r0, #1
 80030c6:	f000 fc11 	bl	80038ec <RCC_Delay>
 80030ca:	e015      	b.n	80030f8 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030cc:	4b63      	ldr	r3, [pc, #396]	; (800325c <HAL_RCC_OscConfig+0x498>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d2:	f7fe f9df 	bl	8001494 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030da:	f7fe f9db 	bl	8001494 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e1d1      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	4b5a      	ldr	r3, [pc, #360]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f0      	bne.n	80030da <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80c0 	beq.w	8003286 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <HAL_RCC_OscConfig+0x368>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d008      	beq.n	800312c <HAL_RCC_OscConfig+0x368>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d004      	beq.n	800312c <HAL_RCC_OscConfig+0x368>
 8003122:	f240 2111 	movw	r1, #529	; 0x211
 8003126:	484e      	ldr	r0, [pc, #312]	; (8003260 <HAL_RCC_OscConfig+0x49c>)
 8003128:	f7fd fe2c 	bl	8000d84 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312c:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10d      	bne.n	8003154 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4a46      	ldr	r2, [pc, #280]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	61d3      	str	r3, [r2, #28]
 8003144:	4b44      	ldr	r3, [pc, #272]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003150:	2301      	movs	r3, #1
 8003152:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	4b43      	ldr	r3, [pc, #268]	; (8003264 <HAL_RCC_OscConfig+0x4a0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d118      	bne.n	8003192 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003160:	4b40      	ldr	r3, [pc, #256]	; (8003264 <HAL_RCC_OscConfig+0x4a0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a3f      	ldr	r2, [pc, #252]	; (8003264 <HAL_RCC_OscConfig+0x4a0>)
 8003166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316c:	f7fe f992 	bl	8001494 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003174:	f7fe f98e 	bl	8001494 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e184      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b37      	ldr	r3, [pc, #220]	; (8003264 <HAL_RCC_OscConfig+0x4a0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d106      	bne.n	80031a8 <HAL_RCC_OscConfig+0x3e4>
 800319a:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4a2e      	ldr	r2, [pc, #184]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6213      	str	r3, [r2, #32]
 80031a6:	e02d      	b.n	8003204 <HAL_RCC_OscConfig+0x440>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10c      	bne.n	80031ca <HAL_RCC_OscConfig+0x406>
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4a28      	ldr	r2, [pc, #160]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	6213      	str	r3, [r2, #32]
 80031bc:	4b26      	ldr	r3, [pc, #152]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4a25      	ldr	r2, [pc, #148]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031c2:	f023 0304 	bic.w	r3, r3, #4
 80031c6:	6213      	str	r3, [r2, #32]
 80031c8:	e01c      	b.n	8003204 <HAL_RCC_OscConfig+0x440>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b05      	cmp	r3, #5
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x428>
 80031d2:	4b21      	ldr	r3, [pc, #132]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a20      	ldr	r2, [pc, #128]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	6213      	str	r3, [r2, #32]
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0x440>
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	6213      	str	r3, [r2, #32]
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4a16      	ldr	r2, [pc, #88]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 80031fe:	f023 0304 	bic.w	r3, r3, #4
 8003202:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fe f942 	bl	8001494 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fe f93e 	bl	8001494 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e132      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_OscConfig+0x494>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0ee      	beq.n	8003214 <HAL_RCC_OscConfig+0x450>
 8003236:	e01d      	b.n	8003274 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003238:	f7fe f92c 	bl	8001494 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	e013      	b.n	8003268 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fe f928 	bl	8001494 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d90a      	bls.n	8003268 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e11c      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	42420480 	.word	0x42420480
 8003260:	0800635c 	.word	0x0800635c
 8003264:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	4b8b      	ldr	r3, [pc, #556]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e5      	bne.n	8003240 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b87      	ldr	r3, [pc, #540]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4a86      	ldr	r2, [pc, #536]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003284:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x4e4>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d008      	beq.n	80032a8 <HAL_RCC_OscConfig+0x4e4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d004      	beq.n	80032a8 <HAL_RCC_OscConfig+0x4e4>
 800329e:	f240 21af 	movw	r1, #687	; 0x2af
 80032a2:	487e      	ldr	r0, [pc, #504]	; (800349c <HAL_RCC_OscConfig+0x6d8>)
 80032a4:	f7fd fd6e 	bl	8000d84 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80ee 	beq.w	800348e <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b2:	4b79      	ldr	r3, [pc, #484]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	f000 80ce 	beq.w	800345c <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	f040 80b2 	bne.w	800342e <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_RCC_OscConfig+0x522>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032da:	d004      	beq.n	80032e6 <HAL_RCC_OscConfig+0x522>
 80032dc:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80032e0:	486e      	ldr	r0, [pc, #440]	; (800349c <HAL_RCC_OscConfig+0x6d8>)
 80032e2:	f7fd fd4f 	bl	8000d84 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d04a      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032f6:	d045      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003300:	d040      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800330a:	d03b      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003314:	d036      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800331e:	d031      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003328:	d02c      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003332:	d027      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800333c:	d022      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003346:	d01d      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003350:	d018      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800335a:	d013      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003364:	d00e      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800336e:	d009      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003378:	d004      	beq.n	8003384 <HAL_RCC_OscConfig+0x5c0>
 800337a:	f240 21b9 	movw	r1, #697	; 0x2b9
 800337e:	4847      	ldr	r0, [pc, #284]	; (800349c <HAL_RCC_OscConfig+0x6d8>)
 8003380:	f7fd fd00 	bl	8000d84 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003384:	4b46      	ldr	r3, [pc, #280]	; (80034a0 <HAL_RCC_OscConfig+0x6dc>)
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338a:	f7fe f883 	bl	8001494 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003392:	f7fe f87f 	bl	8001494 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e075      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a4:	4b3c      	ldr	r3, [pc, #240]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f0      	bne.n	8003392 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d116      	bne.n	80033e8 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_OscConfig+0x612>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ca:	d004      	beq.n	80033d6 <HAL_RCC_OscConfig+0x612>
 80033cc:	f240 21cf 	movw	r1, #719	; 0x2cf
 80033d0:	4832      	ldr	r0, [pc, #200]	; (800349c <HAL_RCC_OscConfig+0x6d8>)
 80033d2:	f7fd fcd7 	bl	8000d84 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033d6:	4b30      	ldr	r3, [pc, #192]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	492d      	ldr	r1, [pc, #180]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a19      	ldr	r1, [r3, #32]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	430b      	orrs	r3, r1
 80033fa:	4927      	ldr	r1, [pc, #156]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003400:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <HAL_RCC_OscConfig+0x6dc>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fe f845 	bl	8001494 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fe f841 	bl	8001494 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e037      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x64a>
 800342c:	e02f      	b.n	800348e <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342e:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <HAL_RCC_OscConfig+0x6dc>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe f82e 	bl	8001494 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fe f82a 	bl	8001494 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e020      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344e:	4b12      	ldr	r3, [pc, #72]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x678>
 800345a:	e018      	b.n	800348e <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e013      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x6d4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	429a      	cmp	r2, r3
 800347a:	d106      	bne.n	800348a <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	0800635c 	.word	0x0800635c
 80034a0:	42420060 	.word	0x42420060

080034a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e176      	b.n	80037a6 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x4e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d110      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x4e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x4e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d104      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x4e>
 80034e8:	f44f 714e 	mov.w	r1, #824	; 0x338
 80034ec:	4874      	ldr	r0, [pc, #464]	; (80036c0 <HAL_RCC_ClockConfig+0x21c>)
 80034ee:	f7fd fc49 	bl	8000d84 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCC_ClockConfig+0x6a>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d007      	beq.n	800350e <HAL_RCC_ClockConfig+0x6a>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d004      	beq.n	800350e <HAL_RCC_ClockConfig+0x6a>
 8003504:	f240 3139 	movw	r1, #825	; 0x339
 8003508:	486d      	ldr	r0, [pc, #436]	; (80036c0 <HAL_RCC_ClockConfig+0x21c>)
 800350a:	f7fd fc3b 	bl	8000d84 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800350e:	4b6d      	ldr	r3, [pc, #436]	; (80036c4 <HAL_RCC_ClockConfig+0x220>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d910      	bls.n	800353e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351c:	4b69      	ldr	r3, [pc, #420]	; (80036c4 <HAL_RCC_ClockConfig+0x220>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 0207 	bic.w	r2, r3, #7
 8003524:	4967      	ldr	r1, [pc, #412]	; (80036c4 <HAL_RCC_ClockConfig+0x220>)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	4313      	orrs	r3, r2
 800352a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352c:	4b65      	ldr	r3, [pc, #404]	; (80036c4 <HAL_RCC_ClockConfig+0x220>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d001      	beq.n	800353e <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e133      	b.n	80037a6 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d049      	beq.n	80035de <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003556:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4a5b      	ldr	r2, [pc, #364]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 800355c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003560:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800356e:	4b56      	ldr	r3, [pc, #344]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4a55      	ldr	r2, [pc, #340]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 8003574:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003578:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d024      	beq.n	80035cc <HAL_RCC_ClockConfig+0x128>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b80      	cmp	r3, #128	; 0x80
 8003588:	d020      	beq.n	80035cc <HAL_RCC_ClockConfig+0x128>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b90      	cmp	r3, #144	; 0x90
 8003590:	d01c      	beq.n	80035cc <HAL_RCC_ClockConfig+0x128>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2ba0      	cmp	r3, #160	; 0xa0
 8003598:	d018      	beq.n	80035cc <HAL_RCC_ClockConfig+0x128>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2bb0      	cmp	r3, #176	; 0xb0
 80035a0:	d014      	beq.n	80035cc <HAL_RCC_ClockConfig+0x128>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2bc0      	cmp	r3, #192	; 0xc0
 80035a8:	d010      	beq.n	80035cc <HAL_RCC_ClockConfig+0x128>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2bd0      	cmp	r3, #208	; 0xd0
 80035b0:	d00c      	beq.n	80035cc <HAL_RCC_ClockConfig+0x128>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2be0      	cmp	r3, #224	; 0xe0
 80035b8:	d008      	beq.n	80035cc <HAL_RCC_ClockConfig+0x128>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2bf0      	cmp	r3, #240	; 0xf0
 80035c0:	d004      	beq.n	80035cc <HAL_RCC_ClockConfig+0x128>
 80035c2:	f240 315f 	movw	r1, #863	; 0x35f
 80035c6:	483e      	ldr	r0, [pc, #248]	; (80036c0 <HAL_RCC_ClockConfig+0x21c>)
 80035c8:	f7fd fbdc 	bl	8000d84 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035cc:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	493b      	ldr	r1, [pc, #236]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d051      	beq.n	800368e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <HAL_RCC_ClockConfig+0x168>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d008      	beq.n	800360c <HAL_RCC_ClockConfig+0x168>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d004      	beq.n	800360c <HAL_RCC_ClockConfig+0x168>
 8003602:	f240 3166 	movw	r1, #870	; 0x366
 8003606:	482e      	ldr	r0, [pc, #184]	; (80036c0 <HAL_RCC_ClockConfig+0x21c>)
 8003608:	f7fd fbbc 	bl	8000d84 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d107      	bne.n	8003624 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003614:	4b2c      	ldr	r3, [pc, #176]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d115      	bne.n	800364c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0c0      	b.n	80037a6 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d107      	bne.n	800363c <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362c:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d109      	bne.n	800364c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0b4      	b.n	80037a6 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0ac      	b.n	80037a6 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f023 0203 	bic.w	r2, r3, #3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	491b      	ldr	r1, [pc, #108]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 800365a:	4313      	orrs	r3, r2
 800365c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800365e:	f7fd ff19 	bl	8001494 <HAL_GetTick>
 8003662:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003664:	e00a      	b.n	800367c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003666:	f7fd ff15 	bl	8001494 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f241 3288 	movw	r2, #5000	; 0x1388
 8003674:	4293      	cmp	r3, r2
 8003676:	d901      	bls.n	800367c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e094      	b.n	80037a6 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_RCC_ClockConfig+0x224>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 020c 	and.w	r2, r3, #12
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	429a      	cmp	r2, r3
 800368c:	d1eb      	bne.n	8003666 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <HAL_RCC_ClockConfig+0x220>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d217      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x220>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 0207 	bic.w	r2, r3, #7
 80036a4:	4907      	ldr	r1, [pc, #28]	; (80036c4 <HAL_RCC_ClockConfig+0x220>)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_ClockConfig+0x220>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d008      	beq.n	80036cc <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e073      	b.n	80037a6 <HAL_RCC_ClockConfig+0x302>
 80036be:	bf00      	nop
 80036c0:	0800635c 	.word	0x0800635c
 80036c4:	40022000 	.word	0x40022000
 80036c8:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d025      	beq.n	8003724 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d018      	beq.n	8003712 <HAL_RCC_ClockConfig+0x26e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e8:	d013      	beq.n	8003712 <HAL_RCC_ClockConfig+0x26e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80036f2:	d00e      	beq.n	8003712 <HAL_RCC_ClockConfig+0x26e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x26e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003706:	d004      	beq.n	8003712 <HAL_RCC_ClockConfig+0x26e>
 8003708:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800370c:	4828      	ldr	r0, [pc, #160]	; (80037b0 <HAL_RCC_ClockConfig+0x30c>)
 800370e:	f7fd fb39 	bl	8000d84 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <HAL_RCC_ClockConfig+0x310>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4925      	ldr	r1, [pc, #148]	; (80037b4 <HAL_RCC_ClockConfig+0x310>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d026      	beq.n	800377e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d018      	beq.n	800376a <HAL_RCC_ClockConfig+0x2c6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003740:	d013      	beq.n	800376a <HAL_RCC_ClockConfig+0x2c6>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800374a:	d00e      	beq.n	800376a <HAL_RCC_ClockConfig+0x2c6>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003754:	d009      	beq.n	800376a <HAL_RCC_ClockConfig+0x2c6>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800375e:	d004      	beq.n	800376a <HAL_RCC_ClockConfig+0x2c6>
 8003760:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003764:	4812      	ldr	r0, [pc, #72]	; (80037b0 <HAL_RCC_ClockConfig+0x30c>)
 8003766:	f7fd fb0d 	bl	8000d84 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <HAL_RCC_ClockConfig+0x310>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	490e      	ldr	r1, [pc, #56]	; (80037b4 <HAL_RCC_ClockConfig+0x310>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800377e:	f000 f821 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8003782:	4601      	mov	r1, r0
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_ClockConfig+0x310>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	4a0a      	ldr	r2, [pc, #40]	; (80037b8 <HAL_RCC_ClockConfig+0x314>)
 8003790:	5cd3      	ldrb	r3, [r2, r3]
 8003792:	fa21 f303 	lsr.w	r3, r1, r3
 8003796:	4a09      	ldr	r2, [pc, #36]	; (80037bc <HAL_RCC_ClockConfig+0x318>)
 8003798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x31c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fd fe36 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	0800635c 	.word	0x0800635c
 80037b4:	40021000 	.word	0x40021000
 80037b8:	080064e0 	.word	0x080064e0
 80037bc:	20000000 	.word	0x20000000
 80037c0:	20000004 	.word	0x20000004

080037c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c4:	b490      	push	{r4, r7}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037cc:	1d3c      	adds	r4, r7, #4
 80037ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037d4:	4b28      	ldr	r3, [pc, #160]	; (8003878 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d002      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x40>
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d003      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x46>
 8003802:	e02d      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003804:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003806:	623b      	str	r3, [r7, #32]
      break;
 8003808:	e02d      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	0c9b      	lsrs	r3, r3, #18
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003816:	4413      	add	r3, r2
 8003818:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800381c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003828:	4b14      	ldr	r3, [pc, #80]	; (800387c <HAL_RCC_GetSysClockFreq+0xb8>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	0c5b      	lsrs	r3, r3, #17
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003836:	4413      	add	r3, r2
 8003838:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800383c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4a0f      	ldr	r2, [pc, #60]	; (8003880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003842:	fb02 f203 	mul.w	r2, r2, r3
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	e004      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	623b      	str	r3, [r7, #32]
      break;
 800385e:	e002      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003862:	623b      	str	r3, [r7, #32]
      break;
 8003864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003866:	6a3b      	ldr	r3, [r7, #32]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3728      	adds	r7, #40	; 0x28
 800386c:	46bd      	mov	sp, r7
 800386e:	bc90      	pop	{r4, r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	08006394 	.word	0x08006394
 8003878:	080063a4 	.word	0x080063a4
 800387c:	40021000 	.word	0x40021000
 8003880:	007a1200 	.word	0x007a1200
 8003884:	003d0900 	.word	0x003d0900

08003888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b02      	ldr	r3, [pc, #8]	; (8003898 <HAL_RCC_GetHCLKFreq+0x10>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	20000000 	.word	0x20000000

0800389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a0:	f7ff fff2 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a4:	4601      	mov	r1, r0
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4a03      	ldr	r2, [pc, #12]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b2:	5cd3      	ldrb	r3, [r2, r3]
 80038b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	080064f0 	.word	0x080064f0

080038c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038c8:	f7ff ffde 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038cc:	4601      	mov	r1, r0
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	0adb      	lsrs	r3, r3, #11
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4a03      	ldr	r2, [pc, #12]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038da:	5cd3      	ldrb	r3, [r2, r3]
 80038dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	080064f0 	.word	0x080064f0

080038ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <RCC_Delay+0x34>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <RCC_Delay+0x38>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0a5b      	lsrs	r3, r3, #9
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003908:	bf00      	nop
  }
  while (Delay --);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	60fa      	str	r2, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f9      	bne.n	8003908 <RCC_Delay+0x1c>
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000000 	.word	0x20000000
 8003924:	10624dd3 	.word	0x10624dd3

08003928 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10f      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800395c:	216c      	movs	r1, #108	; 0x6c
 800395e:	4873      	ldr	r0, [pc, #460]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003960:	f7fd fa10 	bl	8000d84 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8095 	beq.w	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d012      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003982:	d00d      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800398c:	d008      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003996:	d003      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003998:	2172      	movs	r1, #114	; 0x72
 800399a:	4864      	ldr	r0, [pc, #400]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800399c:	f7fd f9f2 	bl	8000d84 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 80039a0:	2300      	movs	r3, #0
 80039a2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a4:	4b62      	ldr	r3, [pc, #392]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10d      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	4b5f      	ldr	r3, [pc, #380]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	4a5e      	ldr	r2, [pc, #376]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	61d3      	str	r3, [r2, #28]
 80039bc:	4b5c      	ldr	r3, [pc, #368]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b59      	ldr	r3, [pc, #356]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d118      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d8:	4b56      	ldr	r3, [pc, #344]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a55      	ldr	r2, [pc, #340]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e4:	f7fd fd56 	bl	8001494 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ea:	e008      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fd fd52 	bl	8001494 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e092      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fe:	4b4d      	ldr	r3, [pc, #308]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a0a:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d02e      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d027      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a28:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a32:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a38:	4b3f      	ldr	r3, [pc, #252]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a3e:	4a3c      	ldr	r2, [pc, #240]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d014      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fd fd21 	bl	8001494 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fd fd1d 	bl	8001494 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e05b      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	4b30      	ldr	r3, [pc, #192]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ee      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	492a      	ldr	r1, [pc, #168]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d105      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a90:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	4a26      	ldr	r2, [pc, #152]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01f      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d012      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003ace:	21b9      	movs	r1, #185	; 0xb9
 8003ad0:	4816      	ldr	r0, [pc, #88]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003ad2:	f7fd f957 	bl	8000d84 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad6:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	4913      	ldr	r1, [pc, #76]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d016      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afc:	d008      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b06:	f240 1115 	movw	r1, #277	; 0x115
 8003b0a:	4808      	ldr	r0, [pc, #32]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003b0c:	f7fd f93a 	bl	8000d84 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b10:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4904      	ldr	r1, [pc, #16]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	080063a8 	.word	0x080063a8
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40007000 	.word	0x40007000
 8003b38:	42420440 	.word	0x42420440

08003b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0fd      	b.n	8003d4a <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a80      	ldr	r2, [pc, #512]	; (8003d54 <HAL_SPI_Init+0x218>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d009      	beq.n	8003b6c <HAL_SPI_Init+0x30>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a7e      	ldr	r2, [pc, #504]	; (8003d58 <HAL_SPI_Init+0x21c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <HAL_SPI_Init+0x30>
 8003b62:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003b66:	487d      	ldr	r0, [pc, #500]	; (8003d5c <HAL_SPI_Init+0x220>)
 8003b68:	f7fd f90c 	bl	8000d84 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d009      	beq.n	8003b88 <HAL_SPI_Init+0x4c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b7c:	d004      	beq.n	8003b88 <HAL_SPI_Init+0x4c>
 8003b7e:	f240 1159 	movw	r1, #345	; 0x159
 8003b82:	4876      	ldr	r0, [pc, #472]	; (8003d5c <HAL_SPI_Init+0x220>)
 8003b84:	f7fd f8fe 	bl	8000d84 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00e      	beq.n	8003bae <HAL_SPI_Init+0x72>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b98:	d009      	beq.n	8003bae <HAL_SPI_Init+0x72>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba2:	d004      	beq.n	8003bae <HAL_SPI_Init+0x72>
 8003ba4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003ba8:	486c      	ldr	r0, [pc, #432]	; (8003d5c <HAL_SPI_Init+0x220>)
 8003baa:	f7fd f8eb 	bl	8000d84 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb6:	d008      	beq.n	8003bca <HAL_SPI_Init+0x8e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <HAL_SPI_Init+0x8e>
 8003bc0:	f240 115b 	movw	r1, #347	; 0x15b
 8003bc4:	4865      	ldr	r0, [pc, #404]	; (8003d5c <HAL_SPI_Init+0x220>)
 8003bc6:	f7fd f8dd 	bl	8000d84 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_SPI_Init+0xb4>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <HAL_SPI_Init+0xb4>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003be4:	d004      	beq.n	8003bf0 <HAL_SPI_Init+0xb4>
 8003be6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003bea:	485c      	ldr	r0, [pc, #368]	; (8003d5c <HAL_SPI_Init+0x220>)
 8003bec:	f7fd f8ca 	bl	8000d84 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_SPI_Init+0xfe>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d01c      	beq.n	8003c3a <HAL_SPI_Init+0xfe>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d018      	beq.n	8003c3a <HAL_SPI_Init+0xfe>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	2b18      	cmp	r3, #24
 8003c0e:	d014      	beq.n	8003c3a <HAL_SPI_Init+0xfe>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d010      	beq.n	8003c3a <HAL_SPI_Init+0xfe>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	2b28      	cmp	r3, #40	; 0x28
 8003c1e:	d00c      	beq.n	8003c3a <HAL_SPI_Init+0xfe>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2b30      	cmp	r3, #48	; 0x30
 8003c26:	d008      	beq.n	8003c3a <HAL_SPI_Init+0xfe>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	2b38      	cmp	r3, #56	; 0x38
 8003c2e:	d004      	beq.n	8003c3a <HAL_SPI_Init+0xfe>
 8003c30:	f240 115d 	movw	r1, #349	; 0x15d
 8003c34:	4849      	ldr	r0, [pc, #292]	; (8003d5c <HAL_SPI_Init+0x220>)
 8003c36:	f7fd f8a5 	bl	8000d84 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_SPI_Init+0x118>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d004      	beq.n	8003c54 <HAL_SPI_Init+0x118>
 8003c4a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003c4e:	4843      	ldr	r0, [pc, #268]	; (8003d5c <HAL_SPI_Init+0x220>)
 8003c50:	f7fd f898 	bl	8000d84 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_SPI_Init+0x12a>
 8003c5c:	f240 1161 	movw	r1, #353	; 0x161
 8003c60:	483e      	ldr	r0, [pc, #248]	; (8003d5c <HAL_SPI_Init+0x220>)
 8003c62:	f7fd f88f 	bl	8000d84 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d119      	bne.n	8003ca2 <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_SPI_Init+0x14c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d004      	beq.n	8003c88 <HAL_SPI_Init+0x14c>
 8003c7e:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8003c82:	4836      	ldr	r0, [pc, #216]	; (8003d5c <HAL_SPI_Init+0x220>)
 8003c84:	f7fd f87e 	bl	8000d84 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_SPI_Init+0x166>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d004      	beq.n	8003ca2 <HAL_SPI_Init+0x166>
 8003c98:	f240 1165 	movw	r1, #357	; 0x165
 8003c9c:	482f      	ldr	r0, [pc, #188]	; (8003d5c <HAL_SPI_Init+0x220>)
 8003c9e:	f7fd f871 	bl	8000d84 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fd f939 	bl	8000f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	ea42 0103 	orr.w	r1, r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	0c1a      	lsrs	r2, r3, #16
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f002 0204 	and.w	r2, r2, #4
 8003d28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40013000 	.word	0x40013000
 8003d58:	40003800 	.word	0x40003800
 8003d5c:	080063f8 	.word	0x080063f8

08003d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e06f      	b.n	8003e52 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a39      	ldr	r2, [pc, #228]	; (8003e5c <HAL_TIM_Base_Init+0xfc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_TIM_Base_Init+0x44>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d00e      	beq.n	8003da4 <HAL_TIM_Base_Init+0x44>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a35      	ldr	r2, [pc, #212]	; (8003e60 <HAL_TIM_Base_Init+0x100>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_TIM_Base_Init+0x44>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a33      	ldr	r2, [pc, #204]	; (8003e64 <HAL_TIM_Base_Init+0x104>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_TIM_Base_Init+0x44>
 8003d9a:	f44f 7189 	mov.w	r1, #274	; 0x112
 8003d9e:	4832      	ldr	r0, [pc, #200]	; (8003e68 <HAL_TIM_Base_Init+0x108>)
 8003da0:	f7fc fff0 	bl	8000d84 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d014      	beq.n	8003dd6 <HAL_TIM_Base_Init+0x76>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d010      	beq.n	8003dd6 <HAL_TIM_Base_Init+0x76>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d00c      	beq.n	8003dd6 <HAL_TIM_Base_Init+0x76>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d008      	beq.n	8003dd6 <HAL_TIM_Base_Init+0x76>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b60      	cmp	r3, #96	; 0x60
 8003dca:	d004      	beq.n	8003dd6 <HAL_TIM_Base_Init+0x76>
 8003dcc:	f240 1113 	movw	r1, #275	; 0x113
 8003dd0:	4825      	ldr	r0, [pc, #148]	; (8003e68 <HAL_TIM_Base_Init+0x108>)
 8003dd2:	f7fc ffd7 	bl	8000d84 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00e      	beq.n	8003dfc <HAL_TIM_Base_Init+0x9c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de6:	d009      	beq.n	8003dfc <HAL_TIM_Base_Init+0x9c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df0:	d004      	beq.n	8003dfc <HAL_TIM_Base_Init+0x9c>
 8003df2:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003df6:	481c      	ldr	r0, [pc, #112]	; (8003e68 <HAL_TIM_Base_Init+0x108>)
 8003df8:	f7fc ffc4 	bl	8000d84 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_TIM_Base_Init+0xb6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b80      	cmp	r3, #128	; 0x80
 8003e0a:	d004      	beq.n	8003e16 <HAL_TIM_Base_Init+0xb6>
 8003e0c:	f240 1115 	movw	r1, #277	; 0x115
 8003e10:	4815      	ldr	r0, [pc, #84]	; (8003e68 <HAL_TIM_Base_Init+0x108>)
 8003e12:	f7fc ffb7 	bl	8000d84 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fd fa0c 	bl	8001248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f000 f8b4 	bl	8003fb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40000800 	.word	0x40000800
 8003e68:	08006430 	.word	0x08006430

08003e6c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a49      	ldr	r2, [pc, #292]	; (8003fa0 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e88:	d00e      	beq.n	8003ea8 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a45      	ldr	r2, [pc, #276]	; (8003fa4 <HAL_TIM_SlaveConfigSynchro+0x138>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a43      	ldr	r2, [pc, #268]	; (8003fa8 <HAL_TIM_SlaveConfigSynchro+0x13c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003e9e:	f241 213b 	movw	r1, #4667	; 0x123b
 8003ea2:	4842      	ldr	r0, [pc, #264]	; (8003fac <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003ea4:	f7fc ff6e 	bl	8000d84 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d014      	beq.n	8003eda <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d010      	beq.n	8003eda <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b05      	cmp	r3, #5
 8003ebe:	d00c      	beq.n	8003eda <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b06      	cmp	r3, #6
 8003ec6:	d008      	beq.n	8003eda <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b07      	cmp	r3, #7
 8003ece:	d004      	beq.n	8003eda <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003ed0:	f241 213c 	movw	r1, #4668	; 0x123c
 8003ed4:	4835      	ldr	r0, [pc, #212]	; (8003fac <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003ed6:	f7fc ff55 	bl	8000d84 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d020      	beq.n	8003f24 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d01c      	beq.n	8003f24 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d018      	beq.n	8003f24 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b30      	cmp	r3, #48	; 0x30
 8003ef8:	d014      	beq.n	8003f24 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d010      	beq.n	8003f24 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b50      	cmp	r3, #80	; 0x50
 8003f08:	d00c      	beq.n	8003f24 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b60      	cmp	r3, #96	; 0x60
 8003f10:	d008      	beq.n	8003f24 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b70      	cmp	r3, #112	; 0x70
 8003f18:	d004      	beq.n	8003f24 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003f1a:	f241 213d 	movw	r1, #4669	; 0x123d
 8003f1e:	4823      	ldr	r0, [pc, #140]	; (8003fac <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003f20:	f7fc ff30 	bl	8000d84 <assert_failed>

  __HAL_LOCK(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_TIM_SlaveConfigSynchro+0xc6>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e031      	b.n	8003f96 <HAL_TIM_SlaveConfigSynchro+0x12a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f42:	6839      	ldr	r1, [r7, #0]
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f895 	bl	8004074 <TIM_SlaveTimer_SetConfig>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <HAL_TIM_SlaveConfigSynchro+0xf8>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e018      	b.n	8003f96 <HAL_TIM_SlaveConfigSynchro+0x12a>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f72:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f82:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	08006430 	.word	0x08006430

08003fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a29      	ldr	r2, [pc, #164]	; (8004068 <TIM_Base_SetConfig+0xb8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x30>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x30>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a26      	ldr	r2, [pc, #152]	; (800406c <TIM_Base_SetConfig+0xbc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x30>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a25      	ldr	r2, [pc, #148]	; (8004070 <TIM_Base_SetConfig+0xc0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <TIM_Base_SetConfig+0xb8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00b      	beq.n	8004012 <TIM_Base_SetConfig+0x62>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d007      	beq.n	8004012 <TIM_Base_SetConfig+0x62>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a19      	ldr	r2, [pc, #100]	; (800406c <TIM_Base_SetConfig+0xbc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_Base_SetConfig+0x62>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a18      	ldr	r2, [pc, #96]	; (8004070 <TIM_Base_SetConfig+0xc0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d108      	bne.n	8004024 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <TIM_Base_SetConfig+0xb8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d103      	bne.n	8004058 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	615a      	str	r2, [r3, #20]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800

08004074 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0307 	bic.w	r3, r3, #7
 800409e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b30      	cmp	r3, #48	; 0x30
 80040b8:	f000 8158 	beq.w	800436c <TIM_SlaveTimer_SetConfig+0x2f8>
 80040bc:	2b30      	cmp	r3, #48	; 0x30
 80040be:	d809      	bhi.n	80040d4 <TIM_SlaveTimer_SetConfig+0x60>
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	f000 8153 	beq.w	800436c <TIM_SlaveTimer_SetConfig+0x2f8>
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	f000 8150 	beq.w	800436c <TIM_SlaveTimer_SetConfig+0x2f8>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 814d 	beq.w	800436c <TIM_SlaveTimer_SetConfig+0x2f8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80040d2:	e165      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 80040d4:	2b50      	cmp	r3, #80	; 0x50
 80040d6:	f000 80b5 	beq.w	8004244 <TIM_SlaveTimer_SetConfig+0x1d0>
 80040da:	2b50      	cmp	r3, #80	; 0x50
 80040dc:	d802      	bhi.n	80040e4 <TIM_SlaveTimer_SetConfig+0x70>
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d065      	beq.n	80041ae <TIM_SlaveTimer_SetConfig+0x13a>
      break;
 80040e2:	e15d      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 80040e4:	2b60      	cmp	r3, #96	; 0x60
 80040e6:	f000 80f3 	beq.w	80042d0 <TIM_SlaveTimer_SetConfig+0x25c>
 80040ea:	2b70      	cmp	r3, #112	; 0x70
 80040ec:	d000      	beq.n	80040f0 <TIM_SlaveTimer_SetConfig+0x7c>
      break;
 80040ee:	e157      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a99      	ldr	r2, [pc, #612]	; (800435c <TIM_SlaveTimer_SetConfig+0x2e8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <TIM_SlaveTimer_SetConfig+0xae>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d00e      	beq.n	8004122 <TIM_SlaveTimer_SetConfig+0xae>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a95      	ldr	r2, [pc, #596]	; (8004360 <TIM_SlaveTimer_SetConfig+0x2ec>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d009      	beq.n	8004122 <TIM_SlaveTimer_SetConfig+0xae>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a94      	ldr	r2, [pc, #592]	; (8004364 <TIM_SlaveTimer_SetConfig+0x2f0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d004      	beq.n	8004122 <TIM_SlaveTimer_SetConfig+0xae>
 8004118:	f641 011c 	movw	r1, #6172	; 0x181c
 800411c:	4892      	ldr	r0, [pc, #584]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800411e:	f7fc fe31 	bl	8000d84 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d013      	beq.n	8004152 <TIM_SlaveTimer_SetConfig+0xde>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004132:	d00e      	beq.n	8004152 <TIM_SlaveTimer_SetConfig+0xde>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413c:	d009      	beq.n	8004152 <TIM_SlaveTimer_SetConfig+0xde>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004146:	d004      	beq.n	8004152 <TIM_SlaveTimer_SetConfig+0xde>
 8004148:	f641 011d 	movw	r1, #6173	; 0x181d
 800414c:	4886      	ldr	r0, [pc, #536]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800414e:	f7fc fe19 	bl	8000d84 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415a:	d014      	beq.n	8004186 <TIM_SlaveTimer_SetConfig+0x112>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <TIM_SlaveTimer_SetConfig+0x112>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00c      	beq.n	8004186 <TIM_SlaveTimer_SetConfig+0x112>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d008      	beq.n	8004186 <TIM_SlaveTimer_SetConfig+0x112>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b0a      	cmp	r3, #10
 800417a:	d004      	beq.n	8004186 <TIM_SlaveTimer_SetConfig+0x112>
 800417c:	f641 011e 	movw	r1, #6174	; 0x181e
 8004180:	4879      	ldr	r0, [pc, #484]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004182:	f7fc fdff 	bl	8000d84 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b0f      	cmp	r3, #15
 800418c:	d904      	bls.n	8004198 <TIM_SlaveTimer_SetConfig+0x124>
 800418e:	f641 011f 	movw	r1, #6175	; 0x181f
 8004192:	4875      	ldr	r0, [pc, #468]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004194:	f7fc fdf6 	bl	8000d84 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68d9      	ldr	r1, [r3, #12]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f000 f965 	bl	8004476 <TIM_ETR_SetConfig>
      break;
 80041ac:	e0f8      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a6a      	ldr	r2, [pc, #424]	; (800435c <TIM_SlaveTimer_SetConfig+0x2e8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <TIM_SlaveTimer_SetConfig+0x16c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c0:	d00e      	beq.n	80041e0 <TIM_SlaveTimer_SetConfig+0x16c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a66      	ldr	r2, [pc, #408]	; (8004360 <TIM_SlaveTimer_SetConfig+0x2ec>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d009      	beq.n	80041e0 <TIM_SlaveTimer_SetConfig+0x16c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a64      	ldr	r2, [pc, #400]	; (8004364 <TIM_SlaveTimer_SetConfig+0x2f0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d004      	beq.n	80041e0 <TIM_SlaveTimer_SetConfig+0x16c>
 80041d6:	f641 012b 	movw	r1, #6187	; 0x182b
 80041da:	4863      	ldr	r0, [pc, #396]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80041dc:	f7fc fdd2 	bl	8000d84 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b0f      	cmp	r3, #15
 80041e6:	d904      	bls.n	80041f2 <TIM_SlaveTimer_SetConfig+0x17e>
 80041e8:	f641 012c 	movw	r1, #6188	; 0x182c
 80041ec:	485e      	ldr	r0, [pc, #376]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80041ee:	f7fc fdc9 	bl	8000d84 <assert_failed>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d101      	bne.n	80041fe <TIM_SlaveTimer_SetConfig+0x18a>
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0d1      	b.n	80043a2 <TIM_SlaveTimer_SetConfig+0x32e>
      tmpccer = htim->Instance->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a1a      	ldr	r2, [r3, #32]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004224:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	621a      	str	r2, [r3, #32]
      break;
 8004242:	e0ad      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a44      	ldr	r2, [pc, #272]	; (800435c <TIM_SlaveTimer_SetConfig+0x2e8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <TIM_SlaveTimer_SetConfig+0x202>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004256:	d00e      	beq.n	8004276 <TIM_SlaveTimer_SetConfig+0x202>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a40      	ldr	r2, [pc, #256]	; (8004360 <TIM_SlaveTimer_SetConfig+0x2ec>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d009      	beq.n	8004276 <TIM_SlaveTimer_SetConfig+0x202>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3f      	ldr	r2, [pc, #252]	; (8004364 <TIM_SlaveTimer_SetConfig+0x2f0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <TIM_SlaveTimer_SetConfig+0x202>
 800426c:	f641 0145 	movw	r1, #6213	; 0x1845
 8004270:	483d      	ldr	r0, [pc, #244]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004272:	f7fc fd87 	bl	8000d84 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427e:	d014      	beq.n	80042aa <TIM_SlaveTimer_SetConfig+0x236>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d010      	beq.n	80042aa <TIM_SlaveTimer_SetConfig+0x236>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00c      	beq.n	80042aa <TIM_SlaveTimer_SetConfig+0x236>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d008      	beq.n	80042aa <TIM_SlaveTimer_SetConfig+0x236>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b0a      	cmp	r3, #10
 800429e:	d004      	beq.n	80042aa <TIM_SlaveTimer_SetConfig+0x236>
 80042a0:	f641 0146 	movw	r1, #6214	; 0x1846
 80042a4:	4830      	ldr	r0, [pc, #192]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80042a6:	f7fc fd6d 	bl	8000d84 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b0f      	cmp	r3, #15
 80042b0:	d904      	bls.n	80042bc <TIM_SlaveTimer_SetConfig+0x248>
 80042b2:	f641 0147 	movw	r1, #6215	; 0x1847
 80042b6:	482c      	ldr	r0, [pc, #176]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80042b8:	f7fc fd64 	bl	8000d84 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	6899      	ldr	r1, [r3, #8]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	461a      	mov	r2, r3
 80042ca:	f000 f877 	bl	80043bc <TIM_TI1_ConfigInputStage>
      break;
 80042ce:	e067      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a21      	ldr	r2, [pc, #132]	; (800435c <TIM_SlaveTimer_SetConfig+0x2e8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <TIM_SlaveTimer_SetConfig+0x28e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e2:	d00e      	beq.n	8004302 <TIM_SlaveTimer_SetConfig+0x28e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <TIM_SlaveTimer_SetConfig+0x2ec>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d009      	beq.n	8004302 <TIM_SlaveTimer_SetConfig+0x28e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1c      	ldr	r2, [pc, #112]	; (8004364 <TIM_SlaveTimer_SetConfig+0x2f0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d004      	beq.n	8004302 <TIM_SlaveTimer_SetConfig+0x28e>
 80042f8:	f641 0153 	movw	r1, #6227	; 0x1853
 80042fc:	481a      	ldr	r0, [pc, #104]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80042fe:	f7fc fd41 	bl	8000d84 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430a:	d014      	beq.n	8004336 <TIM_SlaveTimer_SetConfig+0x2c2>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d010      	beq.n	8004336 <TIM_SlaveTimer_SetConfig+0x2c2>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00c      	beq.n	8004336 <TIM_SlaveTimer_SetConfig+0x2c2>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d008      	beq.n	8004336 <TIM_SlaveTimer_SetConfig+0x2c2>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b0a      	cmp	r3, #10
 800432a:	d004      	beq.n	8004336 <TIM_SlaveTimer_SetConfig+0x2c2>
 800432c:	f641 0154 	movw	r1, #6228	; 0x1854
 8004330:	480d      	ldr	r0, [pc, #52]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004332:	f7fc fd27 	bl	8000d84 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b0f      	cmp	r3, #15
 800433c:	d904      	bls.n	8004348 <TIM_SlaveTimer_SetConfig+0x2d4>
 800433e:	f641 0155 	movw	r1, #6229	; 0x1855
 8004342:	4809      	ldr	r0, [pc, #36]	; (8004368 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004344:	f7fc fd1e 	bl	8000d84 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	461a      	mov	r2, r3
 8004356:	f000 f85f 	bl	8004418 <TIM_TI2_ConfigInputStage>
      break;
 800435a:	e021      	b.n	80043a0 <TIM_SlaveTimer_SetConfig+0x32c>
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800
 8004368:	08006430 	.word	0x08006430
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <TIM_SlaveTimer_SetConfig+0x338>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <TIM_SlaveTimer_SetConfig+0x32a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437e:	d00e      	beq.n	800439e <TIM_SlaveTimer_SetConfig+0x32a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <TIM_SlaveTimer_SetConfig+0x33c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d009      	beq.n	800439e <TIM_SlaveTimer_SetConfig+0x32a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <TIM_SlaveTimer_SetConfig+0x340>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d004      	beq.n	800439e <TIM_SlaveTimer_SetConfig+0x32a>
 8004394:	f641 0164 	movw	r1, #6244	; 0x1864
 8004398:	4807      	ldr	r0, [pc, #28]	; (80043b8 <TIM_SlaveTimer_SetConfig+0x344>)
 800439a:	f7fc fcf3 	bl	8000d84 <assert_failed>
      break;
 800439e:	bf00      	nop
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	08006430 	.word	0x08006430

080043bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0201 	bic.w	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 030a 	bic.w	r3, r3, #10
 80043f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f023 0210 	bic.w	r2, r3, #16
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004442:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	031b      	lsls	r3, r3, #12
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004454:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	621a      	str	r2, [r3, #32]
}
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004476:	b480      	push	{r7}
 8004478:	b087      	sub	sp, #28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004490:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	021a      	lsls	r2, r3, #8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	431a      	orrs	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4313      	orrs	r3, r2
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	609a      	str	r2, [r3, #8]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a43      	ldr	r2, [pc, #268]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d0:	d00e      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a3f      	ldr	r2, [pc, #252]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d009      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a3d      	ldr	r2, [pc, #244]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80044e6:	f240 6164 	movw	r1, #1636	; 0x664
 80044ea:	483c      	ldr	r0, [pc, #240]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80044ec:	f7fc fc4a 	bl	8000d84 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d01c      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b20      	cmp	r3, #32
 8004506:	d018      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b30      	cmp	r3, #48	; 0x30
 800450e:	d014      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b40      	cmp	r3, #64	; 0x40
 8004516:	d010      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b50      	cmp	r3, #80	; 0x50
 800451e:	d00c      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b60      	cmp	r3, #96	; 0x60
 8004526:	d008      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b70      	cmp	r3, #112	; 0x70
 800452e:	d004      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004530:	f240 6165 	movw	r1, #1637	; 0x665
 8004534:	4829      	ldr	r0, [pc, #164]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004536:	f7fc fc25 	bl	8000d84 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b80      	cmp	r3, #128	; 0x80
 8004540:	d008      	beq.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800454a:	f240 6166 	movw	r1, #1638	; 0x666
 800454e:	4823      	ldr	r0, [pc, #140]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004550:	f7fc fc18 	bl	8000d84 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800455e:	2302      	movs	r3, #2
 8004560:	e032      	b.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	08006468 	.word	0x08006468

080045e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e092      	b.n	8004718 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d02c      	beq.n	8004654 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a48      	ldr	r2, [pc, #288]	; (8004720 <HAL_UART_Init+0x140>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <HAL_UART_Init+0x42>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a46      	ldr	r2, [pc, #280]	; (8004724 <HAL_UART_Init+0x144>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_UART_Init+0x42>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a45      	ldr	r2, [pc, #276]	; (8004728 <HAL_UART_Init+0x148>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_UART_Init+0x42>
 8004618:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800461c:	4843      	ldr	r0, [pc, #268]	; (800472c <HAL_UART_Init+0x14c>)
 800461e:	f7fc fbb1 	bl	8000d84 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d028      	beq.n	800467c <HAL_UART_Init+0x9c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004632:	d023      	beq.n	800467c <HAL_UART_Init+0x9c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463c:	d01e      	beq.n	800467c <HAL_UART_Init+0x9c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004646:	d019      	beq.n	800467c <HAL_UART_Init+0x9c>
 8004648:	f240 1147 	movw	r1, #327	; 0x147
 800464c:	4837      	ldr	r0, [pc, #220]	; (800472c <HAL_UART_Init+0x14c>)
 800464e:	f7fc fb99 	bl	8000d84 <assert_failed>
 8004652:	e013      	b.n	800467c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a31      	ldr	r2, [pc, #196]	; (8004720 <HAL_UART_Init+0x140>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00e      	beq.n	800467c <HAL_UART_Init+0x9c>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a30      	ldr	r2, [pc, #192]	; (8004724 <HAL_UART_Init+0x144>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d009      	beq.n	800467c <HAL_UART_Init+0x9c>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a2e      	ldr	r2, [pc, #184]	; (8004728 <HAL_UART_Init+0x148>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <HAL_UART_Init+0x9c>
 8004672:	f240 114b 	movw	r1, #331	; 0x14b
 8004676:	482d      	ldr	r0, [pc, #180]	; (800472c <HAL_UART_Init+0x14c>)
 8004678:	f7fc fb84 	bl	8000d84 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <HAL_UART_Init+0xb8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468c:	d004      	beq.n	8004698 <HAL_UART_Init+0xb8>
 800468e:	f240 114d 	movw	r1, #333	; 0x14d
 8004692:	4826      	ldr	r0, [pc, #152]	; (800472c <HAL_UART_Init+0x14c>)
 8004694:	f7fc fb76 	bl	8000d84 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fc fe11 	bl	80012d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2224      	movs	r2, #36	; 0x24
 80046b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fbf0 	bl	8004eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40013800 	.word	0x40013800
 8004724:	40004400 	.word	0x40004400
 8004728:	40004800 	.word	0x40004800
 800472c:	080064a4 	.word	0x080064a4

08004730 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b20      	cmp	r3, #32
 800474e:	f040 8083 	bne.w	8004858 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_UART_Transmit+0x2e>
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e07b      	b.n	800485a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_UART_Transmit+0x40>
 800476c:	2302      	movs	r3, #2
 800476e:	e074      	b.n	800485a <HAL_UART_Transmit+0x12a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2221      	movs	r2, #33	; 0x21
 8004782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004786:	f7fc fe85 	bl	8001494 <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	88fa      	ldrh	r2, [r7, #6]
 8004796:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004798:	e042      	b.n	8004820 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b0:	d122      	bne.n	80047f8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2200      	movs	r2, #0
 80047ba:	2180      	movs	r1, #128	; 0x80
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fa0e 	bl	8004bde <UART_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e046      	b.n	800485a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047de:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d103      	bne.n	80047f0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	3302      	adds	r3, #2
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	e017      	b.n	8004820 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	3301      	adds	r3, #1
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	e013      	b.n	8004820 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2200      	movs	r2, #0
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f9eb 	bl	8004bde <UART_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e023      	b.n	800485a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	60ba      	str	r2, [r7, #8]
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1b7      	bne.n	800479a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2200      	movs	r2, #0
 8004832:	2140      	movs	r1, #64	; 0x40
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f9d2 	bl	8004bde <UART_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e00a      	b.n	800485a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b088      	sub	sp, #32
 8004866:	af02      	add	r7, sp, #8
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b20      	cmp	r3, #32
 8004880:	f040 8090 	bne.w	80049a4 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_UART_Receive+0x2e>
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e088      	b.n	80049a6 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Receive+0x40>
 800489e:	2302      	movs	r3, #2
 80048a0:	e081      	b.n	80049a6 <HAL_UART_Receive+0x144>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2222      	movs	r2, #34	; 0x22
 80048b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80048b8:	f7fc fdec 	bl	8001494 <HAL_GetTick>
 80048bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	88fa      	ldrh	r2, [r7, #6]
 80048c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80048ca:	e05c      	b.n	8004986 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e2:	d12b      	bne.n	800493c <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2200      	movs	r2, #0
 80048ec:	2120      	movs	r1, #32
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f975 	bl	8004bde <UART_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e053      	b.n	80049a6 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10c      	bne.n	8004924 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004916:	b29a      	uxth	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	3302      	adds	r3, #2
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	e030      	b.n	8004986 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	b29b      	uxth	r3, r3
 800492c:	b2db      	uxtb	r3, r3
 800492e:	b29a      	uxth	r2, r3
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	3301      	adds	r3, #1
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	e024      	b.n	8004986 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2200      	movs	r2, #0
 8004944:	2120      	movs	r1, #32
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f949 	bl	8004bde <UART_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e027      	b.n	80049a6 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d108      	bne.n	8004970 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	60ba      	str	r2, [r7, #8]
 800496a:	b2ca      	uxtb	r2, r1
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	e00a      	b.n	8004986 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	1c59      	adds	r1, r3, #1
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d19d      	bne.n	80048cc <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_UART_IRQHandler+0x52>
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9d7 	bl	8004dae <UART_Receive_IT>
      return;
 8004a00:	e0cc      	b.n	8004b9c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80ab 	beq.w	8004b60 <HAL_UART_IRQHandler+0x1b0>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <HAL_UART_IRQHandler+0x70>
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80a0 	beq.w	8004b60 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <HAL_UART_IRQHandler+0x90>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a38:	f043 0201 	orr.w	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_UART_IRQHandler+0xb0>
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	f043 0202 	orr.w	r2, r3, #2
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_UART_IRQHandler+0xd0>
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	f043 0204 	orr.w	r2, r3, #4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_UART_IRQHandler+0xf0>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	f043 0208 	orr.w	r2, r3, #8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d078      	beq.n	8004b9a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x112>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f976 	bl	8004dae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf14      	ite	ne
 8004ad0:	2301      	movne	r3, #1
 8004ad2:	2300      	moveq	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d102      	bne.n	8004aea <HAL_UART_IRQHandler+0x13a>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d031      	beq.n	8004b4e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f8c1 	bl	8004c72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d023      	beq.n	8004b46 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d013      	beq.n	8004b3e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1a:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <HAL_UART_IRQHandler+0x1f4>)
 8004b1c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fd f986 	bl	8001e34 <HAL_DMA_Abort_IT>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d016      	beq.n	8004b5c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3c:	e00e      	b.n	8004b5c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f844 	bl	8004bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b44:	e00a      	b.n	8004b5c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f840 	bl	8004bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b4c:	e006      	b.n	8004b5c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f83c 	bl	8004bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b5a:	e01e      	b.n	8004b9a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5c:	bf00      	nop
    return;
 8004b5e:	e01c      	b.n	8004b9a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_UART_IRQHandler+0x1cc>
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f8ad 	bl	8004cd4 <UART_Transmit_IT>
    return;
 8004b7a:	e00f      	b.n	8004b9c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_UART_IRQHandler+0x1ec>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f8f4 	bl	8004d7e <UART_EndTransmit_IT>
    return;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <HAL_UART_IRQHandler+0x1ec>
    return;
 8004b9a:	bf00      	nop
  }
}
 8004b9c:	3720      	adds	r7, #32
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	08004cad 	.word	0x08004cad

08004ba8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr

08004bba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr

08004bde <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	603b      	str	r3, [r7, #0]
 8004bea:	4613      	mov	r3, r2
 8004bec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bee:	e02c      	b.n	8004c4a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d028      	beq.n	8004c4a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x30>
 8004bfe:	f7fc fc49 	bl	8001494 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d21d      	bcs.n	8004c4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c1c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695a      	ldr	r2, [r3, #20]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0201 	bic.w	r2, r2, #1
 8004c2c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e00f      	b.n	8004c6a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4013      	ands	r3, r2
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	bf0c      	ite	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	2300      	movne	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d0c3      	beq.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c88:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7ff ff80 	bl	8004bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b21      	cmp	r3, #33	; 0x21
 8004ce6:	d144      	bne.n	8004d72 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf0:	d11a      	bne.n	8004d28 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d06:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	1c9a      	adds	r2, r3, #2
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	621a      	str	r2, [r3, #32]
 8004d1a:	e00e      	b.n	8004d3a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	621a      	str	r2, [r3, #32]
 8004d26:	e008      	b.n	8004d3a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	1c59      	adds	r1, r3, #1
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6211      	str	r1, [r2, #32]
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	4619      	mov	r1, r3
 8004d48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10f      	bne.n	8004d6e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e000      	b.n	8004d74 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
  }
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr

08004d7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff ff02 	bl	8004ba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b22      	cmp	r3, #34	; 0x22
 8004dc0:	d171      	bne.n	8004ea6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dca:	d123      	bne.n	8004e14 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10e      	bne.n	8004df8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	1c9a      	adds	r2, r3, #2
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	629a      	str	r2, [r3, #40]	; 0x28
 8004df6:	e029      	b.n	8004e4c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	629a      	str	r2, [r3, #40]	; 0x28
 8004e12:	e01b      	b.n	8004e4c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6858      	ldr	r0, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	1c59      	adds	r1, r3, #1
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6291      	str	r1, [r2, #40]	; 0x28
 8004e2c:	b2c2      	uxtb	r2, r0
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	e00c      	b.n	8004e4c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	1c58      	adds	r0, r3, #1
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	6288      	str	r0, [r1, #40]	; 0x28
 8004e44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d120      	bne.n	8004ea2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0220 	bic.w	r2, r2, #32
 8004e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff fe8e 	bl	8004bba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e002      	b.n	8004ea8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
  }
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a84      	ldr	r2, [pc, #528]	; (80050d0 <UART_SetConfig+0x220>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d904      	bls.n	8004ecc <UART_SetConfig+0x1c>
 8004ec2:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8004ec6:	4883      	ldr	r0, [pc, #524]	; (80050d4 <UART_SetConfig+0x224>)
 8004ec8:	f7fb ff5c 	bl	8000d84 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d009      	beq.n	8004ee8 <UART_SetConfig+0x38>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004edc:	d004      	beq.n	8004ee8 <UART_SetConfig+0x38>
 8004ede:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8004ee2:	487c      	ldr	r0, [pc, #496]	; (80050d4 <UART_SetConfig+0x224>)
 8004ee4:	f7fb ff4e 	bl	8000d84 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00e      	beq.n	8004f0e <UART_SetConfig+0x5e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef8:	d009      	beq.n	8004f0e <UART_SetConfig+0x5e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f02:	d004      	beq.n	8004f0e <UART_SetConfig+0x5e>
 8004f04:	f640 31ff 	movw	r1, #3071	; 0xbff
 8004f08:	4872      	ldr	r0, [pc, #456]	; (80050d4 <UART_SetConfig+0x224>)
 8004f0a:	f7fb ff3b 	bl	8000d84 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d103      	bne.n	8004f24 <UART_SetConfig+0x74>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d104      	bne.n	8004f2e <UART_SetConfig+0x7e>
 8004f24:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004f28:	486a      	ldr	r0, [pc, #424]	; (80050d4 <UART_SetConfig+0x224>)
 8004f2a:	f7fb ff2b 	bl	8000d84 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f60:	f023 030c 	bic.w	r3, r3, #12
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	68f9      	ldr	r1, [r7, #12]
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699a      	ldr	r2, [r3, #24]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a53      	ldr	r2, [pc, #332]	; (80050d8 <UART_SetConfig+0x228>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d14e      	bne.n	800502c <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f8e:	f7fe fc99 	bl	80038c4 <HAL_RCC_GetPCLK2Freq>
 8004f92:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009a      	lsls	r2, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	4a4c      	ldr	r2, [pc, #304]	; (80050dc <UART_SetConfig+0x22c>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	0119      	lsls	r1, r3, #4
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009a      	lsls	r2, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fca:	4b44      	ldr	r3, [pc, #272]	; (80050dc <UART_SetConfig+0x22c>)
 8004fcc:	fba3 0302 	umull	r0, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	2064      	movs	r0, #100	; 0x64
 8004fd4:	fb00 f303 	mul.w	r3, r0, r3
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	3332      	adds	r3, #50	; 0x32
 8004fde:	4a3f      	ldr	r2, [pc, #252]	; (80050dc <UART_SetConfig+0x22c>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fea:	4419      	add	r1, r3
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009a      	lsls	r2, r3, #2
 8004ff6:	441a      	add	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005002:	4b36      	ldr	r3, [pc, #216]	; (80050dc <UART_SetConfig+0x22c>)
 8005004:	fba3 0302 	umull	r0, r3, r3, r2
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	2064      	movs	r0, #100	; 0x64
 800500c:	fb00 f303 	mul.w	r3, r0, r3
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	3332      	adds	r3, #50	; 0x32
 8005016:	4a31      	ldr	r2, [pc, #196]	; (80050dc <UART_SetConfig+0x22c>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	f003 020f 	and.w	r2, r3, #15
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	440a      	add	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800502a:	e04d      	b.n	80050c8 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 800502c:	f7fe fc36 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8005030:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009a      	lsls	r2, r3, #2
 800503c:	441a      	add	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	fbb2 f3f3 	udiv	r3, r2, r3
 8005048:	4a24      	ldr	r2, [pc, #144]	; (80050dc <UART_SetConfig+0x22c>)
 800504a:	fba2 2303 	umull	r2, r3, r2, r3
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	0119      	lsls	r1, r3, #4
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009a      	lsls	r2, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	fbb2 f2f3 	udiv	r2, r2, r3
 8005068:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <UART_SetConfig+0x22c>)
 800506a:	fba3 0302 	umull	r0, r3, r3, r2
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2064      	movs	r0, #100	; 0x64
 8005072:	fb00 f303 	mul.w	r3, r0, r3
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	3332      	adds	r3, #50	; 0x32
 800507c:	4a17      	ldr	r2, [pc, #92]	; (80050dc <UART_SetConfig+0x22c>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005088:	4419      	add	r1, r3
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	009a      	lsls	r2, r3, #2
 8005094:	441a      	add	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a0:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <UART_SetConfig+0x22c>)
 80050a2:	fba3 0302 	umull	r0, r3, r3, r2
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	2064      	movs	r0, #100	; 0x64
 80050aa:	fb00 f303 	mul.w	r3, r0, r3
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	3332      	adds	r3, #50	; 0x32
 80050b4:	4a09      	ldr	r2, [pc, #36]	; (80050dc <UART_SetConfig+0x22c>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	f003 020f 	and.w	r2, r3, #15
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	440a      	add	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	0044aa20 	.word	0x0044aa20
 80050d4:	080064a4 	.word	0x080064a4
 80050d8:	40013800 	.word	0x40013800
 80050dc:	51eb851f 	.word	0x51eb851f

080050e0 <_Znwj>:
 80050e0:	b510      	push	{r4, lr}
 80050e2:	2800      	cmp	r0, #0
 80050e4:	bf14      	ite	ne
 80050e6:	4604      	movne	r4, r0
 80050e8:	2401      	moveq	r4, #1
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 fbcc 	bl	8005888 <malloc>
 80050f0:	b930      	cbnz	r0, 8005100 <_Znwj+0x20>
 80050f2:	f000 f807 	bl	8005104 <_ZSt15get_new_handlerv>
 80050f6:	b908      	cbnz	r0, 80050fc <_Znwj+0x1c>
 80050f8:	f000 fb95 	bl	8005826 <abort>
 80050fc:	4780      	blx	r0
 80050fe:	e7f4      	b.n	80050ea <_Znwj+0xa>
 8005100:	bd10      	pop	{r4, pc}
	...

08005104 <_ZSt15get_new_handlerv>:
 8005104:	4b02      	ldr	r3, [pc, #8]	; (8005110 <_ZSt15get_new_handlerv+0xc>)
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	f3bf 8f5b 	dmb	ish
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000120 	.word	0x20000120

08005114 <_ZNSaIcEC1Ev>:
 8005114:	4770      	bx	lr

08005116 <_ZNSaIcED1Ev>:
 8005116:	4770      	bx	lr

08005118 <_ZSt19__throw_logic_errorPKc>:
 8005118:	b508      	push	{r3, lr}
 800511a:	f000 fb84 	bl	8005826 <abort>

0800511e <_ZSt20__throw_length_errorPKc>:
 800511e:	b508      	push	{r3, lr}
 8005120:	f000 fb81 	bl	8005826 <abort>

08005124 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8005124:	b40f      	push	{r0, r1, r2, r3}
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	f107 0410 	add.w	r4, r7, #16
 8005130:	f854 5b04 	ldr.w	r5, [r4], #4
 8005134:	4628      	mov	r0, r5
 8005136:	f7fb f809 	bl	800014c <strlen>
 800513a:	f200 230e 	addw	r3, r0, #526	; 0x20e
 800513e:	f023 0307 	bic.w	r3, r3, #7
 8005142:	ebad 0d03 	sub.w	sp, sp, r3
 8005146:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800514a:	4623      	mov	r3, r4
 800514c:	462a      	mov	r2, r5
 800514e:	4668      	mov	r0, sp
 8005150:	607c      	str	r4, [r7, #4]
 8005152:	f000 fb27 	bl	80057a4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8005156:	f000 fb66 	bl	8005826 <abort>

0800515a <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800515a:	b10a      	cbz	r2, 8005160 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800515c:	f000 bbb2 	b.w	80058c4 <memcpy>
 8005160:	4770      	bx	lr

08005162 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8005162:	6001      	str	r1, [r0, #0]
 8005164:	4770      	bx	lr

08005166 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8005166:	6800      	ldr	r0, [r0, #0]
 8005168:	4770      	bx	lr

0800516a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800516a:	3008      	adds	r0, #8
 800516c:	4770      	bx	lr

0800516e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800516e:	6081      	str	r1, [r0, #8]
 8005170:	4770      	bx	lr

08005172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8005172:	2200      	movs	r2, #0
 8005174:	6803      	ldr	r3, [r0, #0]
 8005176:	6041      	str	r1, [r0, #4]
 8005178:	545a      	strb	r2, [r3, r1]
 800517a:	4770      	bx	lr

0800517c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800517c:	b508      	push	{r3, lr}
 800517e:	680b      	ldr	r3, [r1, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	da02      	bge.n	800518a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8005184:	4809      	ldr	r0, [pc, #36]	; (80051ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8005186:	f7ff ffca 	bl	800511e <_ZSt20__throw_length_errorPKc>
 800518a:	4293      	cmp	r3, r2
 800518c:	d908      	bls.n	80051a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800518e:	0052      	lsls	r2, r2, #1
 8005190:	4293      	cmp	r3, r2
 8005192:	d205      	bcs.n	80051a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005194:	2a00      	cmp	r2, #0
 8005196:	bfb6      	itet	lt
 8005198:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800519c:	600a      	strge	r2, [r1, #0]
 800519e:	600b      	strlt	r3, [r1, #0]
 80051a0:	6808      	ldr	r0, [r1, #0]
 80051a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051a6:	3001      	adds	r0, #1
 80051a8:	f7ff bf9a 	b.w	80050e0 <_Znwj>
 80051ac:	0800659d 	.word	0x0800659d

080051b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80051b0:	4603      	mov	r3, r0
 80051b2:	f853 0b08 	ldr.w	r0, [r3], #8
 80051b6:	4298      	cmp	r0, r3
 80051b8:	d001      	beq.n	80051be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80051ba:	f000 baa3 	b.w	8005704 <_ZdlPv>
 80051be:	4770      	bx	lr

080051c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80051c0:	b510      	push	{r4, lr}
 80051c2:	6843      	ldr	r3, [r0, #4]
 80051c4:	4614      	mov	r4, r2
 80051c6:	4299      	cmp	r1, r3
 80051c8:	d904      	bls.n	80051d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 80051ca:	460a      	mov	r2, r1
 80051cc:	4802      	ldr	r0, [pc, #8]	; (80051d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80051ce:	4621      	mov	r1, r4
 80051d0:	f7ff ffa8 	bl	8005124 <_ZSt24__throw_out_of_range_fmtPKcz>
 80051d4:	4608      	mov	r0, r1
 80051d6:	bd10      	pop	{r4, pc}
 80051d8:	080064f8 	.word	0x080064f8

080051dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80051dc:	b508      	push	{r3, lr}
 80051de:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80051e2:	6840      	ldr	r0, [r0, #4]
 80051e4:	3901      	subs	r1, #1
 80051e6:	1a09      	subs	r1, r1, r0
 80051e8:	4291      	cmp	r1, r2
 80051ea:	d202      	bcs.n	80051f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff ff96 	bl	800511e <_ZSt20__throw_length_errorPKc>
 80051f2:	bd08      	pop	{r3, pc}

080051f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80051f4:	6803      	ldr	r3, [r0, #0]
 80051f6:	428b      	cmp	r3, r1
 80051f8:	d806      	bhi.n	8005208 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80051fa:	6840      	ldr	r0, [r0, #4]
 80051fc:	4418      	add	r0, r3
 80051fe:	4281      	cmp	r1, r0
 8005200:	bf94      	ite	ls
 8005202:	2000      	movls	r0, #0
 8005204:	2001      	movhi	r0, #1
 8005206:	4770      	bx	lr
 8005208:	2001      	movs	r0, #1
 800520a:	4770      	bx	lr

0800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800520c:	2a01      	cmp	r2, #1
 800520e:	b510      	push	{r4, lr}
 8005210:	d102      	bne.n	8005218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8005212:	780a      	ldrb	r2, [r1, #0]
 8005214:	7002      	strb	r2, [r0, #0]
 8005216:	bd10      	pop	{r4, pc}
 8005218:	f7ff ff9f 	bl	800515a <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800521c:	e7fb      	b.n	8005216 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800521e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800521e:	2a01      	cmp	r2, #1
 8005220:	b430      	push	{r4, r5}
 8005222:	d103      	bne.n	800522c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8005224:	780b      	ldrb	r3, [r1, #0]
 8005226:	7003      	strb	r3, [r0, #0]
 8005228:	bc30      	pop	{r4, r5}
 800522a:	4770      	bx	lr
 800522c:	2a00      	cmp	r2, #0
 800522e:	d0fb      	beq.n	8005228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8005230:	bc30      	pop	{r4, r5}
 8005232:	f000 bb52 	b.w	80058da <memmove>

08005236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8005236:	b508      	push	{r3, lr}
 8005238:	1a52      	subs	r2, r2, r1
 800523a:	f7ff ffe7 	bl	800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800523e:	bd08      	pop	{r3, pc}

08005240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005240:	b508      	push	{r3, lr}
 8005242:	1a52      	subs	r2, r2, r1
 8005244:	f7ff ffe2 	bl	800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005248:	bd08      	pop	{r3, pc}

0800524a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800524a:	4288      	cmp	r0, r1
 800524c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800524e:	4604      	mov	r4, r0
 8005250:	460e      	mov	r6, r1
 8005252:	d020      	beq.n	8005296 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8005254:	6802      	ldr	r2, [r0, #0]
 8005256:	f100 0308 	add.w	r3, r0, #8
 800525a:	429a      	cmp	r2, r3
 800525c:	bf08      	it	eq
 800525e:	220f      	moveq	r2, #15
 8005260:	684d      	ldr	r5, [r1, #4]
 8005262:	bf18      	it	ne
 8005264:	6882      	ldrne	r2, [r0, #8]
 8005266:	42aa      	cmp	r2, r5
 8005268:	d20b      	bcs.n	8005282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 800526a:	a902      	add	r1, sp, #8
 800526c:	f841 5d04 	str.w	r5, [r1, #-4]!
 8005270:	f7ff ff84 	bl	800517c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005274:	4607      	mov	r7, r0
 8005276:	4620      	mov	r0, r4
 8005278:	f7ff ff9a 	bl	80051b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800527c:	9b01      	ldr	r3, [sp, #4]
 800527e:	6027      	str	r7, [r4, #0]
 8005280:	60a3      	str	r3, [r4, #8]
 8005282:	b125      	cbz	r5, 800528e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8005284:	462a      	mov	r2, r5
 8005286:	6831      	ldr	r1, [r6, #0]
 8005288:	6820      	ldr	r0, [r4, #0]
 800528a:	f7ff ffbf 	bl	800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800528e:	2200      	movs	r2, #0
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	6065      	str	r5, [r4, #4]
 8005294:	555a      	strb	r2, [r3, r5]
 8005296:	b003      	add	sp, #12
 8005298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800529a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800529a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800529e:	4616      	mov	r6, r2
 80052a0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80052a4:	6842      	ldr	r2, [r0, #4]
 80052a6:	469a      	mov	sl, r3
 80052a8:	eba8 0306 	sub.w	r3, r8, r6
 80052ac:	1a57      	subs	r7, r2, r1
 80052ae:	4413      	add	r3, r2
 80052b0:	6802      	ldr	r2, [r0, #0]
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	f100 0308 	add.w	r3, r0, #8
 80052b8:	429a      	cmp	r2, r3
 80052ba:	460d      	mov	r5, r1
 80052bc:	bf14      	ite	ne
 80052be:	6882      	ldrne	r2, [r0, #8]
 80052c0:	220f      	moveq	r2, #15
 80052c2:	a901      	add	r1, sp, #4
 80052c4:	4604      	mov	r4, r0
 80052c6:	f7ff ff59 	bl	800517c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80052ca:	1bbf      	subs	r7, r7, r6
 80052cc:	4681      	mov	r9, r0
 80052ce:	b11d      	cbz	r5, 80052d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80052d0:	462a      	mov	r2, r5
 80052d2:	6821      	ldr	r1, [r4, #0]
 80052d4:	f7ff ff9a 	bl	800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80052d8:	f1ba 0f00 	cmp.w	sl, #0
 80052dc:	d008      	beq.n	80052f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80052de:	f1b8 0f00 	cmp.w	r8, #0
 80052e2:	d005      	beq.n	80052f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80052e4:	4642      	mov	r2, r8
 80052e6:	4651      	mov	r1, sl
 80052e8:	eb09 0005 	add.w	r0, r9, r5
 80052ec:	f7ff ff8e 	bl	800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80052f0:	b147      	cbz	r7, 8005304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 80052f2:	6821      	ldr	r1, [r4, #0]
 80052f4:	442e      	add	r6, r5
 80052f6:	eb05 0008 	add.w	r0, r5, r8
 80052fa:	463a      	mov	r2, r7
 80052fc:	4431      	add	r1, r6
 80052fe:	4448      	add	r0, r9
 8005300:	f7ff ff84 	bl	800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005304:	4620      	mov	r0, r4
 8005306:	f7ff ff53 	bl	80051b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800530a:	9b01      	ldr	r3, [sp, #4]
 800530c:	f8c4 9000 	str.w	r9, [r4]
 8005310:	60a3      	str	r3, [r4, #8]
 8005312:	b002      	add	sp, #8
 8005314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8005318:	f100 0208 	add.w	r2, r0, #8
 800531c:	6002      	str	r2, [r0, #0]
 800531e:	2200      	movs	r2, #0
 8005320:	6042      	str	r2, [r0, #4]
 8005322:	7202      	strb	r2, [r0, #8]
 8005324:	4770      	bx	lr

08005326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8005326:	b570      	push	{r4, r5, r6, lr}
 8005328:	4604      	mov	r4, r0
 800532a:	460e      	mov	r6, r1
 800532c:	3008      	adds	r0, #8
 800532e:	6020      	str	r0, [r4, #0]
 8005330:	f856 3b08 	ldr.w	r3, [r6], #8
 8005334:	460d      	mov	r5, r1
 8005336:	429e      	cmp	r6, r3
 8005338:	d10b      	bne.n	8005352 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800533a:	2210      	movs	r2, #16
 800533c:	4631      	mov	r1, r6
 800533e:	f7ff ff0c 	bl	800515a <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005342:	686b      	ldr	r3, [r5, #4]
 8005344:	4620      	mov	r0, r4
 8005346:	6063      	str	r3, [r4, #4]
 8005348:	2300      	movs	r3, #0
 800534a:	602e      	str	r6, [r5, #0]
 800534c:	606b      	str	r3, [r5, #4]
 800534e:	722b      	strb	r3, [r5, #8]
 8005350:	bd70      	pop	{r4, r5, r6, pc}
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	688b      	ldr	r3, [r1, #8]
 8005356:	60a3      	str	r3, [r4, #8]
 8005358:	e7f3      	b.n	8005342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800535a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800535a:	b510      	push	{r4, lr}
 800535c:	4604      	mov	r4, r0
 800535e:	f7ff ff27 	bl	80051b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005362:	4620      	mov	r0, r4
 8005364:	bd10      	pop	{r4, pc}

08005366 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8005366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005368:	460b      	mov	r3, r1
 800536a:	4606      	mov	r6, r0
 800536c:	f853 7b08 	ldr.w	r7, [r3], #8
 8005370:	4605      	mov	r5, r0
 8005372:	42bb      	cmp	r3, r7
 8005374:	460c      	mov	r4, r1
 8005376:	f856 2b08 	ldr.w	r2, [r6], #8
 800537a:	d016      	beq.n	80053aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 800537c:	4296      	cmp	r6, r2
 800537e:	bf08      	it	eq
 8005380:	2200      	moveq	r2, #0
 8005382:	6007      	str	r7, [r0, #0]
 8005384:	6849      	ldr	r1, [r1, #4]
 8005386:	bf18      	it	ne
 8005388:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 800538c:	6041      	str	r1, [r0, #4]
 800538e:	68a1      	ldr	r1, [r4, #8]
 8005390:	6081      	str	r1, [r0, #8]
 8005392:	b142      	cbz	r2, 80053a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8005394:	6022      	str	r2, [r4, #0]
 8005396:	f8c4 c008 	str.w	ip, [r4, #8]
 800539a:	2300      	movs	r3, #0
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	6063      	str	r3, [r4, #4]
 80053a0:	7013      	strb	r3, [r2, #0]
 80053a2:	4628      	mov	r0, r5
 80053a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	e7f7      	b.n	800539a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 80053aa:	f7ff ff4e 	bl	800524a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80053ae:	e7f4      	b.n	800539a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

080053b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 80053b0:	6840      	ldr	r0, [r0, #4]
 80053b2:	4770      	bx	lr

080053b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 80053b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053b6:	4605      	mov	r5, r0
 80053b8:	6843      	ldr	r3, [r0, #4]
 80053ba:	9101      	str	r1, [sp, #4]
 80053bc:	4299      	cmp	r1, r3
 80053be:	f855 1b08 	ldr.w	r1, [r5], #8
 80053c2:	bf38      	it	cc
 80053c4:	9301      	strcc	r3, [sp, #4]
 80053c6:	428d      	cmp	r5, r1
 80053c8:	bf0c      	ite	eq
 80053ca:	220f      	moveq	r2, #15
 80053cc:	6882      	ldrne	r2, [r0, #8]
 80053ce:	4604      	mov	r4, r0
 80053d0:	9801      	ldr	r0, [sp, #4]
 80053d2:	4290      	cmp	r0, r2
 80053d4:	d012      	beq.n	80053fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>
 80053d6:	d801      	bhi.n	80053dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x28>
 80053d8:	280f      	cmp	r0, #15
 80053da:	d911      	bls.n	8005400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4c>
 80053dc:	a901      	add	r1, sp, #4
 80053de:	4620      	mov	r0, r4
 80053e0:	f7ff fecc 	bl	800517c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80053e4:	4605      	mov	r5, r0
 80053e6:	6862      	ldr	r2, [r4, #4]
 80053e8:	6821      	ldr	r1, [r4, #0]
 80053ea:	3201      	adds	r2, #1
 80053ec:	f7ff ff0e 	bl	800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7ff fedd 	bl	80051b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	6025      	str	r5, [r4, #0]
 80053fa:	60a3      	str	r3, [r4, #8]
 80053fc:	b003      	add	sp, #12
 80053fe:	bd30      	pop	{r4, r5, pc}
 8005400:	428d      	cmp	r5, r1
 8005402:	d0fb      	beq.n	80053fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	4628      	mov	r0, r5
 8005408:	f7ff ff00 	bl	800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800540c:	6820      	ldr	r0, [r4, #0]
 800540e:	f000 f979 	bl	8005704 <_ZdlPv>
 8005412:	6025      	str	r5, [r4, #0]
 8005414:	e7f2      	b.n	80053fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>

08005416 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8005416:	6840      	ldr	r0, [r0, #4]
 8005418:	fab0 f080 	clz	r0, r0
 800541c:	0940      	lsrs	r0, r0, #5
 800541e:	4770      	bx	lr

08005420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8005420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005422:	6802      	ldr	r2, [r0, #0]
 8005424:	f100 0308 	add.w	r3, r0, #8
 8005428:	429a      	cmp	r2, r3
 800542a:	bf08      	it	eq
 800542c:	230f      	moveq	r3, #15
 800542e:	6846      	ldr	r6, [r0, #4]
 8005430:	bf18      	it	ne
 8005432:	6883      	ldrne	r3, [r0, #8]
 8005434:	1c75      	adds	r5, r6, #1
 8005436:	429d      	cmp	r5, r3
 8005438:	4604      	mov	r4, r0
 800543a:	460f      	mov	r7, r1
 800543c:	d906      	bls.n	800544c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 800543e:	2301      	movs	r3, #1
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	2300      	movs	r3, #0
 8005444:	4631      	mov	r1, r6
 8005446:	461a      	mov	r2, r3
 8005448:	f7ff ff27 	bl	800529a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800544c:	2200      	movs	r2, #0
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	559f      	strb	r7, [r3, r6]
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	6065      	str	r5, [r4, #4]
 8005456:	555a      	strb	r2, [r3, r5]
 8005458:	b003      	add	sp, #12
 800545a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800545c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 800545c:	b510      	push	{r4, lr}
 800545e:	4604      	mov	r4, r0
 8005460:	f7ff ffde 	bl	8005420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8005464:	4620      	mov	r0, r4
 8005466:	bd10      	pop	{r4, pc}

08005468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8005468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546c:	4614      	mov	r4, r2
 800546e:	4681      	mov	r9, r0
 8005470:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005472:	460f      	mov	r7, r1
 8005474:	462a      	mov	r2, r5
 8005476:	4698      	mov	r8, r3
 8005478:	4621      	mov	r1, r4
 800547a:	4b37      	ldr	r3, [pc, #220]	; (8005558 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 800547c:	f7ff feae 	bl	80051dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8005480:	464a      	mov	r2, r9
 8005482:	f852 6b08 	ldr.w	r6, [r2], #8
 8005486:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800548a:	4296      	cmp	r6, r2
 800548c:	bf08      	it	eq
 800548e:	220f      	moveq	r2, #15
 8005490:	eba5 0b04 	sub.w	fp, r5, r4
 8005494:	bf18      	it	ne
 8005496:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 800549a:	eb03 0a0b 	add.w	sl, r3, fp
 800549e:	4552      	cmp	r2, sl
 80054a0:	d34e      	bcc.n	8005540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80054a2:	443e      	add	r6, r7
 80054a4:	4641      	mov	r1, r8
 80054a6:	1bdf      	subs	r7, r3, r7
 80054a8:	4648      	mov	r0, r9
 80054aa:	1b3f      	subs	r7, r7, r4
 80054ac:	f7ff fea2 	bl	80051f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80054b0:	b170      	cbz	r0, 80054d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80054b2:	b137      	cbz	r7, 80054c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80054b4:	42ac      	cmp	r4, r5
 80054b6:	d004      	beq.n	80054c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80054b8:	463a      	mov	r2, r7
 80054ba:	1931      	adds	r1, r6, r4
 80054bc:	1970      	adds	r0, r6, r5
 80054be:	f7ff feae 	bl	800521e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80054c2:	b30d      	cbz	r5, 8005508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80054c4:	462a      	mov	r2, r5
 80054c6:	4641      	mov	r1, r8
 80054c8:	4630      	mov	r0, r6
 80054ca:	f7ff fe9f 	bl	800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80054ce:	e01b      	b.n	8005508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80054d0:	b135      	cbz	r5, 80054e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 80054d2:	42ac      	cmp	r4, r5
 80054d4:	d33c      	bcc.n	8005550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 80054d6:	462a      	mov	r2, r5
 80054d8:	4641      	mov	r1, r8
 80054da:	4630      	mov	r0, r6
 80054dc:	f7ff fe9f 	bl	800521e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80054e0:	b197      	cbz	r7, 8005508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80054e2:	42ac      	cmp	r4, r5
 80054e4:	d010      	beq.n	8005508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80054e6:	463a      	mov	r2, r7
 80054e8:	1931      	adds	r1, r6, r4
 80054ea:	1970      	adds	r0, r6, r5
 80054ec:	f7ff fe97 	bl	800521e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80054f0:	42ac      	cmp	r4, r5
 80054f2:	d209      	bcs.n	8005508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80054f4:	4434      	add	r4, r6
 80054f6:	eb08 0305 	add.w	r3, r8, r5
 80054fa:	429c      	cmp	r4, r3
 80054fc:	d30f      	bcc.n	800551e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80054fe:	462a      	mov	r2, r5
 8005500:	4641      	mov	r1, r8
 8005502:	4630      	mov	r0, r6
 8005504:	f7ff fe8b 	bl	800521e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005508:	2200      	movs	r2, #0
 800550a:	4648      	mov	r0, r9
 800550c:	f8d9 3000 	ldr.w	r3, [r9]
 8005510:	f8c9 a004 	str.w	sl, [r9, #4]
 8005514:	f803 200a 	strb.w	r2, [r3, sl]
 8005518:	b003      	add	sp, #12
 800551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551e:	4544      	cmp	r4, r8
 8005520:	d803      	bhi.n	800552a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 8005522:	462a      	mov	r2, r5
 8005524:	eb08 010b 	add.w	r1, r8, fp
 8005528:	e7ce      	b.n	80054c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800552a:	eba4 0408 	sub.w	r4, r4, r8
 800552e:	4622      	mov	r2, r4
 8005530:	4641      	mov	r1, r8
 8005532:	4630      	mov	r0, r6
 8005534:	f7ff fe73 	bl	800521e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8005538:	1b2a      	subs	r2, r5, r4
 800553a:	1971      	adds	r1, r6, r5
 800553c:	1930      	adds	r0, r6, r4
 800553e:	e7c4      	b.n	80054ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8005540:	9500      	str	r5, [sp, #0]
 8005542:	4643      	mov	r3, r8
 8005544:	4622      	mov	r2, r4
 8005546:	4639      	mov	r1, r7
 8005548:	4648      	mov	r0, r9
 800554a:	f7ff fea6 	bl	800529a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800554e:	e7db      	b.n	8005508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8005550:	2f00      	cmp	r7, #0
 8005552:	d0cf      	beq.n	80054f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8005554:	e7c7      	b.n	80054e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8005556:	bf00      	nop
 8005558:	0800652f 	.word	0x0800652f

0800555c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800555c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800555e:	4604      	mov	r4, r0
 8005560:	4608      	mov	r0, r1
 8005562:	460d      	mov	r5, r1
 8005564:	f7fa fdf2 	bl	800014c <strlen>
 8005568:	462b      	mov	r3, r5
 800556a:	9000      	str	r0, [sp, #0]
 800556c:	6862      	ldr	r2, [r4, #4]
 800556e:	2100      	movs	r1, #0
 8005570:	4620      	mov	r0, r4
 8005572:	f7ff ff79 	bl	8005468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8005576:	b003      	add	sp, #12
 8005578:	bd30      	pop	{r4, r5, pc}

0800557a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800557a:	b508      	push	{r3, lr}
 800557c:	f7ff ffee 	bl	800555c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8005580:	bd08      	pop	{r3, pc}
	...

08005584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8005584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005586:	4604      	mov	r4, r0
 8005588:	460f      	mov	r7, r1
 800558a:	4615      	mov	r5, r2
 800558c:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 800558e:	461e      	mov	r6, r3
 8005590:	f7ff fe16 	bl	80051c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8005594:	6862      	ldr	r2, [r4, #4]
 8005596:	9b08      	ldr	r3, [sp, #32]
 8005598:	1bd2      	subs	r2, r2, r7
 800559a:	42aa      	cmp	r2, r5
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	4601      	mov	r1, r0
 80055a0:	4633      	mov	r3, r6
 80055a2:	bf28      	it	cs
 80055a4:	462a      	movcs	r2, r5
 80055a6:	4620      	mov	r0, r4
 80055a8:	f7ff ff5e 	bl	8005468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80055ac:	b003      	add	sp, #12
 80055ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b0:	08006587 	.word	0x08006587

080055b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 80055b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055b6:	4605      	mov	r5, r0
 80055b8:	4610      	mov	r0, r2
 80055ba:	4614      	mov	r4, r2
 80055bc:	460e      	mov	r6, r1
 80055be:	f7fa fdc5 	bl	800014c <strlen>
 80055c2:	4623      	mov	r3, r4
 80055c4:	9000      	str	r0, [sp, #0]
 80055c6:	2200      	movs	r2, #0
 80055c8:	4631      	mov	r1, r6
 80055ca:	4628      	mov	r0, r5
 80055cc:	f7ff ffda 	bl	8005584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80055d0:	b002      	add	sp, #8
 80055d2:	bd70      	pop	{r4, r5, r6, pc}

080055d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80055d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055d6:	4604      	mov	r4, r0
 80055d8:	4626      	mov	r6, r4
 80055da:	f856 3b08 	ldr.w	r3, [r6], #8
 80055de:	6840      	ldr	r0, [r0, #4]
 80055e0:	42b3      	cmp	r3, r6
 80055e2:	bf0c      	ite	eq
 80055e4:	260f      	moveq	r6, #15
 80055e6:	68a6      	ldrne	r6, [r4, #8]
 80055e8:	1885      	adds	r5, r0, r2
 80055ea:	42b5      	cmp	r5, r6
 80055ec:	d80a      	bhi.n	8005604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 80055ee:	b112      	cbz	r2, 80055f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 80055f0:	4418      	add	r0, r3
 80055f2:	f7ff fe0b 	bl	800520c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80055f6:	2200      	movs	r2, #0
 80055f8:	4620      	mov	r0, r4
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	6065      	str	r5, [r4, #4]
 80055fe:	555a      	strb	r2, [r3, r5]
 8005600:	b002      	add	sp, #8
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	9200      	str	r2, [sp, #0]
 8005606:	460b      	mov	r3, r1
 8005608:	2200      	movs	r2, #0
 800560a:	4601      	mov	r1, r0
 800560c:	4620      	mov	r0, r4
 800560e:	f7ff fe44 	bl	800529a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8005612:	e7f0      	b.n	80055f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08005614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8005614:	b508      	push	{r3, lr}
 8005616:	e9d1 1200 	ldrd	r1, r2, [r1]
 800561a:	f7ff ffdb 	bl	80055d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800561e:	bd08      	pop	{r3, pc}

08005620 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4604      	mov	r4, r0
 8005624:	460d      	mov	r5, r1
 8005626:	4616      	mov	r6, r2
 8005628:	4b04      	ldr	r3, [pc, #16]	; (800563c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 800562a:	2100      	movs	r1, #0
 800562c:	f7ff fdd6 	bl	80051dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8005630:	4632      	mov	r2, r6
 8005632:	4629      	mov	r1, r5
 8005634:	4620      	mov	r0, r4
 8005636:	f7ff ffcd 	bl	80055d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	08006572 	.word	0x08006572

08005640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	4604      	mov	r4, r0
 8005644:	4608      	mov	r0, r1
 8005646:	460d      	mov	r5, r1
 8005648:	f7fa fd80 	bl	800014c <strlen>
 800564c:	4606      	mov	r6, r0
 800564e:	4602      	mov	r2, r0
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8005652:	4620      	mov	r0, r4
 8005654:	2100      	movs	r1, #0
 8005656:	f7ff fdc1 	bl	80051dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800565a:	4632      	mov	r2, r6
 800565c:	4629      	mov	r1, r5
 800565e:	4620      	mov	r0, r4
 8005660:	f7ff ffb8 	bl	80055d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8005664:	bd70      	pop	{r4, r5, r6, pc}
 8005666:	bf00      	nop
 8005668:	08006572 	.word	0x08006572

0800566c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800566c:	6800      	ldr	r0, [r0, #0]
 800566e:	4770      	bx	lr

08005670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8005670:	6001      	str	r1, [r0, #0]
 8005672:	4770      	bx	lr

08005674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8005674:	b510      	push	{r4, lr}
 8005676:	4604      	mov	r4, r0
 8005678:	f100 0208 	add.w	r2, r0, #8
 800567c:	6002      	str	r2, [r0, #0]
 800567e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	440a      	add	r2, r1
 8005688:	f7fa fe92 	bl	80003b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800568c:	4620      	mov	r0, r4
 800568e:	bd10      	pop	{r4, pc}

08005690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8005690:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005692:	4604      	mov	r4, r0
 8005694:	4616      	mov	r6, r2
 8005696:	460d      	mov	r5, r1
 8005698:	b919      	cbnz	r1, 80056a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800569a:	b112      	cbz	r2, 80056a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800569c:	480d      	ldr	r0, [pc, #52]	; (80056d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800569e:	f7ff fd3b 	bl	8005118 <_ZSt19__throw_logic_errorPKc>
 80056a2:	1b73      	subs	r3, r6, r5
 80056a4:	2b0f      	cmp	r3, #15
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	d907      	bls.n	80056ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80056aa:	2200      	movs	r2, #0
 80056ac:	a901      	add	r1, sp, #4
 80056ae:	4620      	mov	r0, r4
 80056b0:	f7ff fd64 	bl	800517c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80056b4:	9b01      	ldr	r3, [sp, #4]
 80056b6:	6020      	str	r0, [r4, #0]
 80056b8:	60a3      	str	r3, [r4, #8]
 80056ba:	4632      	mov	r2, r6
 80056bc:	4629      	mov	r1, r5
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	f7ff fdbe 	bl	8005240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80056c4:	2100      	movs	r1, #0
 80056c6:	9b01      	ldr	r3, [sp, #4]
 80056c8:	6822      	ldr	r2, [r4, #0]
 80056ca:	6063      	str	r3, [r4, #4]
 80056cc:	54d1      	strb	r1, [r2, r3]
 80056ce:	b002      	add	sp, #8
 80056d0:	bd70      	pop	{r4, r5, r6, pc}
 80056d2:	bf00      	nop
 80056d4:	08006548 	.word	0x08006548

080056d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	f100 0308 	add.w	r3, r0, #8
 80056de:	4604      	mov	r4, r0
 80056e0:	6003      	str	r3, [r0, #0]
 80056e2:	460d      	mov	r5, r1
 80056e4:	b159      	cbz	r1, 80056fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80056e6:	4608      	mov	r0, r1
 80056e8:	f7fa fd30 	bl	800014c <strlen>
 80056ec:	182a      	adds	r2, r5, r0
 80056ee:	4620      	mov	r0, r4
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	4629      	mov	r1, r5
 80056f6:	f7ff ffcb 	bl	8005690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80056fa:	4620      	mov	r0, r4
 80056fc:	bd38      	pop	{r3, r4, r5, pc}
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005702:	e7f4      	b.n	80056ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08005704 <_ZdlPv>:
 8005704:	f000 b8c8 	b.w	8005898 <free>

08005708 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8005708:	b580      	push	{r7, lr}
 800570a:	b09c      	sub	sp, #112	; 0x70
 800570c:	af00      	add	r7, sp, #0
 800570e:	1a0e      	subs	r6, r1, r0
 8005710:	4680      	mov	r8, r0
 8005712:	2269      	movs	r2, #105	; 0x69
 8005714:	490e      	ldr	r1, [pc, #56]	; (8005750 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8005716:	1d38      	adds	r0, r7, #4
 8005718:	f000 f8d4 	bl	80058c4 <memcpy>
 800571c:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8005720:	f023 0307 	bic.w	r3, r3, #7
 8005724:	ebad 0d03 	sub.w	sp, sp, r3
 8005728:	466c      	mov	r4, sp
 800572a:	2268      	movs	r2, #104	; 0x68
 800572c:	1d39      	adds	r1, r7, #4
 800572e:	4620      	mov	r0, r4
 8005730:	f000 f8c8 	bl	80058c4 <memcpy>
 8005734:	4632      	mov	r2, r6
 8005736:	4641      	mov	r1, r8
 8005738:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800573c:	f000 f8c2 	bl	80058c4 <memcpy>
 8005740:	2300      	movs	r3, #0
 8005742:	1c75      	adds	r5, r6, #1
 8005744:	4425      	add	r5, r4
 8005746:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 800574a:	4620      	mov	r0, r4
 800574c:	f7ff fce4 	bl	8005118 <_ZSt19__throw_logic_errorPKc>
 8005750:	080065c0 	.word	0x080065c0

08005754 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	af00      	add	r7, sp, #0
 8005758:	b086      	sub	sp, #24
 800575a:	466d      	mov	r5, sp
 800575c:	f105 040c 	add.w	r4, r5, #12
 8005760:	4623      	mov	r3, r4
 8005762:	f04f 0c0a 	mov.w	ip, #10
 8005766:	f8df e038 	ldr.w	lr, [pc, #56]	; 80057a0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800576a:	fbb2 f6fc 	udiv	r6, r2, ip
 800576e:	fb0c 2216 	mls	r2, ip, r6, r2
 8005772:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8005776:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800577a:	4632      	mov	r2, r6
 800577c:	2e00      	cmp	r6, #0
 800577e:	d1f4      	bne.n	800576a <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8005780:	1ae4      	subs	r4, r4, r3
 8005782:	428c      	cmp	r4, r1
 8005784:	d808      	bhi.n	8005798 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8005786:	f1c4 010c 	rsb	r1, r4, #12
 800578a:	4622      	mov	r2, r4
 800578c:	4429      	add	r1, r5
 800578e:	f000 f899 	bl	80058c4 <memcpy>
 8005792:	4620      	mov	r0, r4
 8005794:	46bd      	mov	sp, r7
 8005796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005798:	f04f 34ff 	mov.w	r4, #4294967295
 800579c:	e7f9      	b.n	8005792 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 800579e:	bf00      	nop
 80057a0:	080065b5 	.word	0x080065b5

080057a4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80057a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a8:	4606      	mov	r6, r0
 80057aa:	4615      	mov	r5, r2
 80057ac:	4604      	mov	r4, r0
 80057ae:	3901      	subs	r1, #1
 80057b0:	1847      	adds	r7, r0, r1
 80057b2:	782a      	ldrb	r2, [r5, #0]
 80057b4:	b39a      	cbz	r2, 800581e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80057b6:	42bc      	cmp	r4, r7
 80057b8:	d22d      	bcs.n	8005816 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80057ba:	2a25      	cmp	r2, #37	; 0x25
 80057bc:	d107      	bne.n	80057ce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80057be:	786a      	ldrb	r2, [r5, #1]
 80057c0:	2a73      	cmp	r2, #115	; 0x73
 80057c2:	d00a      	beq.n	80057da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80057c4:	2a7a      	cmp	r2, #122	; 0x7a
 80057c6:	d013      	beq.n	80057f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80057c8:	2a25      	cmp	r2, #37	; 0x25
 80057ca:	d100      	bne.n	80057ce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80057cc:	3501      	adds	r5, #1
 80057ce:	782a      	ldrb	r2, [r5, #0]
 80057d0:	3401      	adds	r4, #1
 80057d2:	f804 2c01 	strb.w	r2, [r4, #-1]
 80057d6:	3501      	adds	r5, #1
 80057d8:	e7eb      	b.n	80057b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80057da:	1d19      	adds	r1, r3, #4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3b01      	subs	r3, #1
 80057e0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80057e4:	b1a2      	cbz	r2, 8005810 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 80057e6:	42bc      	cmp	r4, r7
 80057e8:	d015      	beq.n	8005816 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80057ea:	f804 2b01 	strb.w	r2, [r4], #1
 80057ee:	e7f7      	b.n	80057e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80057f0:	78aa      	ldrb	r2, [r5, #2]
 80057f2:	2a75      	cmp	r2, #117	; 0x75
 80057f4:	d1eb      	bne.n	80057ce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	1b39      	subs	r1, r7, r4
 80057fa:	4620      	mov	r0, r4
 80057fc:	f103 0804 	add.w	r8, r3, #4
 8005800:	f7ff ffa8 	bl	8005754 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8005804:	2800      	cmp	r0, #0
 8005806:	dd06      	ble.n	8005816 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8005808:	4404      	add	r4, r0
 800580a:	3503      	adds	r5, #3
 800580c:	4643      	mov	r3, r8
 800580e:	e7d0      	b.n	80057b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005810:	3502      	adds	r5, #2
 8005812:	460b      	mov	r3, r1
 8005814:	e7cd      	b.n	80057b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8005816:	4621      	mov	r1, r4
 8005818:	4630      	mov	r0, r6
 800581a:	f7ff ff75 	bl	8005708 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800581e:	7022      	strb	r2, [r4, #0]
 8005820:	1ba0      	subs	r0, r4, r6
 8005822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005826 <abort>:
 8005826:	b508      	push	{r3, lr}
 8005828:	2006      	movs	r0, #6
 800582a:	f000 f955 	bl	8005ad8 <raise>
 800582e:	2001      	movs	r0, #1
 8005830:	f7fb fc47 	bl	80010c2 <_exit>

08005834 <__errno>:
 8005834:	4b01      	ldr	r3, [pc, #4]	; (800583c <__errno+0x8>)
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	2000000c 	.word	0x2000000c

08005840 <__libc_init_array>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	2500      	movs	r5, #0
 8005844:	4e0c      	ldr	r6, [pc, #48]	; (8005878 <__libc_init_array+0x38>)
 8005846:	4c0d      	ldr	r4, [pc, #52]	; (800587c <__libc_init_array+0x3c>)
 8005848:	1ba4      	subs	r4, r4, r6
 800584a:	10a4      	asrs	r4, r4, #2
 800584c:	42a5      	cmp	r5, r4
 800584e:	d109      	bne.n	8005864 <__libc_init_array+0x24>
 8005850:	f000 fca2 	bl	8006198 <_init>
 8005854:	2500      	movs	r5, #0
 8005856:	4e0a      	ldr	r6, [pc, #40]	; (8005880 <__libc_init_array+0x40>)
 8005858:	4c0a      	ldr	r4, [pc, #40]	; (8005884 <__libc_init_array+0x44>)
 800585a:	1ba4      	subs	r4, r4, r6
 800585c:	10a4      	asrs	r4, r4, #2
 800585e:	42a5      	cmp	r5, r4
 8005860:	d105      	bne.n	800586e <__libc_init_array+0x2e>
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005868:	4798      	blx	r3
 800586a:	3501      	adds	r5, #1
 800586c:	e7ee      	b.n	800584c <__libc_init_array+0xc>
 800586e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005872:	4798      	blx	r3
 8005874:	3501      	adds	r5, #1
 8005876:	e7f2      	b.n	800585e <__libc_init_array+0x1e>
 8005878:	080066c0 	.word	0x080066c0
 800587c:	080066c0 	.word	0x080066c0
 8005880:	080066c0 	.word	0x080066c0
 8005884:	080066c8 	.word	0x080066c8

08005888 <malloc>:
 8005888:	4b02      	ldr	r3, [pc, #8]	; (8005894 <malloc+0xc>)
 800588a:	4601      	mov	r1, r0
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	f000 b891 	b.w	80059b4 <_malloc_r>
 8005892:	bf00      	nop
 8005894:	2000000c 	.word	0x2000000c

08005898 <free>:
 8005898:	4b02      	ldr	r3, [pc, #8]	; (80058a4 <free+0xc>)
 800589a:	4601      	mov	r1, r0
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	f000 b83d 	b.w	800591c <_free_r>
 80058a2:	bf00      	nop
 80058a4:	2000000c 	.word	0x2000000c

080058a8 <memchr>:
 80058a8:	b510      	push	{r4, lr}
 80058aa:	b2c9      	uxtb	r1, r1
 80058ac:	4402      	add	r2, r0
 80058ae:	4290      	cmp	r0, r2
 80058b0:	4603      	mov	r3, r0
 80058b2:	d101      	bne.n	80058b8 <memchr+0x10>
 80058b4:	2300      	movs	r3, #0
 80058b6:	e003      	b.n	80058c0 <memchr+0x18>
 80058b8:	781c      	ldrb	r4, [r3, #0]
 80058ba:	3001      	adds	r0, #1
 80058bc:	428c      	cmp	r4, r1
 80058be:	d1f6      	bne.n	80058ae <memchr+0x6>
 80058c0:	4618      	mov	r0, r3
 80058c2:	bd10      	pop	{r4, pc}

080058c4 <memcpy>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	1e43      	subs	r3, r0, #1
 80058c8:	440a      	add	r2, r1
 80058ca:	4291      	cmp	r1, r2
 80058cc:	d100      	bne.n	80058d0 <memcpy+0xc>
 80058ce:	bd10      	pop	{r4, pc}
 80058d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d8:	e7f7      	b.n	80058ca <memcpy+0x6>

080058da <memmove>:
 80058da:	4288      	cmp	r0, r1
 80058dc:	b510      	push	{r4, lr}
 80058de:	eb01 0302 	add.w	r3, r1, r2
 80058e2:	d807      	bhi.n	80058f4 <memmove+0x1a>
 80058e4:	1e42      	subs	r2, r0, #1
 80058e6:	4299      	cmp	r1, r3
 80058e8:	d00a      	beq.n	8005900 <memmove+0x26>
 80058ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80058f2:	e7f8      	b.n	80058e6 <memmove+0xc>
 80058f4:	4283      	cmp	r3, r0
 80058f6:	d9f5      	bls.n	80058e4 <memmove+0xa>
 80058f8:	1881      	adds	r1, r0, r2
 80058fa:	1ad2      	subs	r2, r2, r3
 80058fc:	42d3      	cmn	r3, r2
 80058fe:	d100      	bne.n	8005902 <memmove+0x28>
 8005900:	bd10      	pop	{r4, pc}
 8005902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005906:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800590a:	e7f7      	b.n	80058fc <memmove+0x22>

0800590c <memset>:
 800590c:	4603      	mov	r3, r0
 800590e:	4402      	add	r2, r0
 8005910:	4293      	cmp	r3, r2
 8005912:	d100      	bne.n	8005916 <memset+0xa>
 8005914:	4770      	bx	lr
 8005916:	f803 1b01 	strb.w	r1, [r3], #1
 800591a:	e7f9      	b.n	8005910 <memset+0x4>

0800591c <_free_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4605      	mov	r5, r0
 8005920:	2900      	cmp	r1, #0
 8005922:	d043      	beq.n	80059ac <_free_r+0x90>
 8005924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005928:	1f0c      	subs	r4, r1, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	bfb8      	it	lt
 800592e:	18e4      	addlt	r4, r4, r3
 8005930:	f000 f928 	bl	8005b84 <__malloc_lock>
 8005934:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <_free_r+0x94>)
 8005936:	6813      	ldr	r3, [r2, #0]
 8005938:	4610      	mov	r0, r2
 800593a:	b933      	cbnz	r3, 800594a <_free_r+0x2e>
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	6014      	str	r4, [r2, #0]
 8005940:	4628      	mov	r0, r5
 8005942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005946:	f000 b91e 	b.w	8005b86 <__malloc_unlock>
 800594a:	42a3      	cmp	r3, r4
 800594c:	d90b      	bls.n	8005966 <_free_r+0x4a>
 800594e:	6821      	ldr	r1, [r4, #0]
 8005950:	1862      	adds	r2, r4, r1
 8005952:	4293      	cmp	r3, r2
 8005954:	bf01      	itttt	eq
 8005956:	681a      	ldreq	r2, [r3, #0]
 8005958:	685b      	ldreq	r3, [r3, #4]
 800595a:	1852      	addeq	r2, r2, r1
 800595c:	6022      	streq	r2, [r4, #0]
 800595e:	6063      	str	r3, [r4, #4]
 8005960:	6004      	str	r4, [r0, #0]
 8005962:	e7ed      	b.n	8005940 <_free_r+0x24>
 8005964:	4613      	mov	r3, r2
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	b10a      	cbz	r2, 800596e <_free_r+0x52>
 800596a:	42a2      	cmp	r2, r4
 800596c:	d9fa      	bls.n	8005964 <_free_r+0x48>
 800596e:	6819      	ldr	r1, [r3, #0]
 8005970:	1858      	adds	r0, r3, r1
 8005972:	42a0      	cmp	r0, r4
 8005974:	d10b      	bne.n	800598e <_free_r+0x72>
 8005976:	6820      	ldr	r0, [r4, #0]
 8005978:	4401      	add	r1, r0
 800597a:	1858      	adds	r0, r3, r1
 800597c:	4282      	cmp	r2, r0
 800597e:	6019      	str	r1, [r3, #0]
 8005980:	d1de      	bne.n	8005940 <_free_r+0x24>
 8005982:	6810      	ldr	r0, [r2, #0]
 8005984:	6852      	ldr	r2, [r2, #4]
 8005986:	4401      	add	r1, r0
 8005988:	6019      	str	r1, [r3, #0]
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	e7d8      	b.n	8005940 <_free_r+0x24>
 800598e:	d902      	bls.n	8005996 <_free_r+0x7a>
 8005990:	230c      	movs	r3, #12
 8005992:	602b      	str	r3, [r5, #0]
 8005994:	e7d4      	b.n	8005940 <_free_r+0x24>
 8005996:	6820      	ldr	r0, [r4, #0]
 8005998:	1821      	adds	r1, r4, r0
 800599a:	428a      	cmp	r2, r1
 800599c:	bf01      	itttt	eq
 800599e:	6811      	ldreq	r1, [r2, #0]
 80059a0:	6852      	ldreq	r2, [r2, #4]
 80059a2:	1809      	addeq	r1, r1, r0
 80059a4:	6021      	streq	r1, [r4, #0]
 80059a6:	6062      	str	r2, [r4, #4]
 80059a8:	605c      	str	r4, [r3, #4]
 80059aa:	e7c9      	b.n	8005940 <_free_r+0x24>
 80059ac:	bd38      	pop	{r3, r4, r5, pc}
 80059ae:	bf00      	nop
 80059b0:	20000124 	.word	0x20000124

080059b4 <_malloc_r>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	1ccd      	adds	r5, r1, #3
 80059b8:	f025 0503 	bic.w	r5, r5, #3
 80059bc:	3508      	adds	r5, #8
 80059be:	2d0c      	cmp	r5, #12
 80059c0:	bf38      	it	cc
 80059c2:	250c      	movcc	r5, #12
 80059c4:	2d00      	cmp	r5, #0
 80059c6:	4606      	mov	r6, r0
 80059c8:	db01      	blt.n	80059ce <_malloc_r+0x1a>
 80059ca:	42a9      	cmp	r1, r5
 80059cc:	d903      	bls.n	80059d6 <_malloc_r+0x22>
 80059ce:	230c      	movs	r3, #12
 80059d0:	6033      	str	r3, [r6, #0]
 80059d2:	2000      	movs	r0, #0
 80059d4:	bd70      	pop	{r4, r5, r6, pc}
 80059d6:	f000 f8d5 	bl	8005b84 <__malloc_lock>
 80059da:	4a21      	ldr	r2, [pc, #132]	; (8005a60 <_malloc_r+0xac>)
 80059dc:	6814      	ldr	r4, [r2, #0]
 80059de:	4621      	mov	r1, r4
 80059e0:	b991      	cbnz	r1, 8005a08 <_malloc_r+0x54>
 80059e2:	4c20      	ldr	r4, [pc, #128]	; (8005a64 <_malloc_r+0xb0>)
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	b91b      	cbnz	r3, 80059f0 <_malloc_r+0x3c>
 80059e8:	4630      	mov	r0, r6
 80059ea:	f000 f83d 	bl	8005a68 <_sbrk_r>
 80059ee:	6020      	str	r0, [r4, #0]
 80059f0:	4629      	mov	r1, r5
 80059f2:	4630      	mov	r0, r6
 80059f4:	f000 f838 	bl	8005a68 <_sbrk_r>
 80059f8:	1c43      	adds	r3, r0, #1
 80059fa:	d124      	bne.n	8005a46 <_malloc_r+0x92>
 80059fc:	230c      	movs	r3, #12
 80059fe:	4630      	mov	r0, r6
 8005a00:	6033      	str	r3, [r6, #0]
 8005a02:	f000 f8c0 	bl	8005b86 <__malloc_unlock>
 8005a06:	e7e4      	b.n	80059d2 <_malloc_r+0x1e>
 8005a08:	680b      	ldr	r3, [r1, #0]
 8005a0a:	1b5b      	subs	r3, r3, r5
 8005a0c:	d418      	bmi.n	8005a40 <_malloc_r+0x8c>
 8005a0e:	2b0b      	cmp	r3, #11
 8005a10:	d90f      	bls.n	8005a32 <_malloc_r+0x7e>
 8005a12:	600b      	str	r3, [r1, #0]
 8005a14:	18cc      	adds	r4, r1, r3
 8005a16:	50cd      	str	r5, [r1, r3]
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 f8b4 	bl	8005b86 <__malloc_unlock>
 8005a1e:	f104 000b 	add.w	r0, r4, #11
 8005a22:	1d23      	adds	r3, r4, #4
 8005a24:	f020 0007 	bic.w	r0, r0, #7
 8005a28:	1ac3      	subs	r3, r0, r3
 8005a2a:	d0d3      	beq.n	80059d4 <_malloc_r+0x20>
 8005a2c:	425a      	negs	r2, r3
 8005a2e:	50e2      	str	r2, [r4, r3]
 8005a30:	e7d0      	b.n	80059d4 <_malloc_r+0x20>
 8005a32:	684b      	ldr	r3, [r1, #4]
 8005a34:	428c      	cmp	r4, r1
 8005a36:	bf16      	itet	ne
 8005a38:	6063      	strne	r3, [r4, #4]
 8005a3a:	6013      	streq	r3, [r2, #0]
 8005a3c:	460c      	movne	r4, r1
 8005a3e:	e7eb      	b.n	8005a18 <_malloc_r+0x64>
 8005a40:	460c      	mov	r4, r1
 8005a42:	6849      	ldr	r1, [r1, #4]
 8005a44:	e7cc      	b.n	80059e0 <_malloc_r+0x2c>
 8005a46:	1cc4      	adds	r4, r0, #3
 8005a48:	f024 0403 	bic.w	r4, r4, #3
 8005a4c:	42a0      	cmp	r0, r4
 8005a4e:	d005      	beq.n	8005a5c <_malloc_r+0xa8>
 8005a50:	1a21      	subs	r1, r4, r0
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 f808 	bl	8005a68 <_sbrk_r>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d0cf      	beq.n	80059fc <_malloc_r+0x48>
 8005a5c:	6025      	str	r5, [r4, #0]
 8005a5e:	e7db      	b.n	8005a18 <_malloc_r+0x64>
 8005a60:	20000124 	.word	0x20000124
 8005a64:	20000128 	.word	0x20000128

08005a68 <_sbrk_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	4c05      	ldr	r4, [pc, #20]	; (8005a84 <_sbrk_r+0x1c>)
 8005a6e:	4605      	mov	r5, r0
 8005a70:	4608      	mov	r0, r1
 8005a72:	6023      	str	r3, [r4, #0]
 8005a74:	f7fb fb30 	bl	80010d8 <_sbrk>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d102      	bne.n	8005a82 <_sbrk_r+0x1a>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	b103      	cbz	r3, 8005a82 <_sbrk_r+0x1a>
 8005a80:	602b      	str	r3, [r5, #0]
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	2000028c 	.word	0x2000028c

08005a88 <_raise_r>:
 8005a88:	291f      	cmp	r1, #31
 8005a8a:	b538      	push	{r3, r4, r5, lr}
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	460d      	mov	r5, r1
 8005a90:	d904      	bls.n	8005a9c <_raise_r+0x14>
 8005a92:	2316      	movs	r3, #22
 8005a94:	6003      	str	r3, [r0, #0]
 8005a96:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005a9e:	b112      	cbz	r2, 8005aa6 <_raise_r+0x1e>
 8005aa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005aa4:	b94b      	cbnz	r3, 8005aba <_raise_r+0x32>
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 f830 	bl	8005b0c <_getpid_r>
 8005aac:	462a      	mov	r2, r5
 8005aae:	4601      	mov	r1, r0
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ab6:	f000 b817 	b.w	8005ae8 <_kill_r>
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d00a      	beq.n	8005ad4 <_raise_r+0x4c>
 8005abe:	1c59      	adds	r1, r3, #1
 8005ac0:	d103      	bne.n	8005aca <_raise_r+0x42>
 8005ac2:	2316      	movs	r3, #22
 8005ac4:	6003      	str	r3, [r0, #0]
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	e7e7      	b.n	8005a9a <_raise_r+0x12>
 8005aca:	2400      	movs	r4, #0
 8005acc:	4628      	mov	r0, r5
 8005ace:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ad2:	4798      	blx	r3
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	e7e0      	b.n	8005a9a <_raise_r+0x12>

08005ad8 <raise>:
 8005ad8:	4b02      	ldr	r3, [pc, #8]	; (8005ae4 <raise+0xc>)
 8005ada:	4601      	mov	r1, r0
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	f7ff bfd3 	b.w	8005a88 <_raise_r>
 8005ae2:	bf00      	nop
 8005ae4:	2000000c 	.word	0x2000000c

08005ae8 <_kill_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	2300      	movs	r3, #0
 8005aec:	4c06      	ldr	r4, [pc, #24]	; (8005b08 <_kill_r+0x20>)
 8005aee:	4605      	mov	r5, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	4611      	mov	r1, r2
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	f7fb fad4 	bl	80010a2 <_kill>
 8005afa:	1c43      	adds	r3, r0, #1
 8005afc:	d102      	bne.n	8005b04 <_kill_r+0x1c>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	b103      	cbz	r3, 8005b04 <_kill_r+0x1c>
 8005b02:	602b      	str	r3, [r5, #0]
 8005b04:	bd38      	pop	{r3, r4, r5, pc}
 8005b06:	bf00      	nop
 8005b08:	2000028c 	.word	0x2000028c

08005b0c <_getpid_r>:
 8005b0c:	f7fb bac2 	b.w	8001094 <_getpid>

08005b10 <_vsniprintf_r>:
 8005b10:	b530      	push	{r4, r5, lr}
 8005b12:	1e14      	subs	r4, r2, #0
 8005b14:	4605      	mov	r5, r0
 8005b16:	b09b      	sub	sp, #108	; 0x6c
 8005b18:	4618      	mov	r0, r3
 8005b1a:	da05      	bge.n	8005b28 <_vsniprintf_r+0x18>
 8005b1c:	238b      	movs	r3, #139	; 0x8b
 8005b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	b01b      	add	sp, #108	; 0x6c
 8005b26:	bd30      	pop	{r4, r5, pc}
 8005b28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b2c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005b30:	bf0c      	ite	eq
 8005b32:	4623      	moveq	r3, r4
 8005b34:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b38:	9302      	str	r3, [sp, #8]
 8005b3a:	9305      	str	r3, [sp, #20]
 8005b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b40:	9100      	str	r1, [sp, #0]
 8005b42:	9104      	str	r1, [sp, #16]
 8005b44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005b48:	4602      	mov	r2, r0
 8005b4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b4c:	4669      	mov	r1, sp
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f000 f874 	bl	8005c3c <_svfiprintf_r>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	bfbc      	itt	lt
 8005b58:	238b      	movlt	r3, #139	; 0x8b
 8005b5a:	602b      	strlt	r3, [r5, #0]
 8005b5c:	2c00      	cmp	r4, #0
 8005b5e:	d0e1      	beq.n	8005b24 <_vsniprintf_r+0x14>
 8005b60:	2200      	movs	r2, #0
 8005b62:	9b00      	ldr	r3, [sp, #0]
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	e7dd      	b.n	8005b24 <_vsniprintf_r+0x14>

08005b68 <vsniprintf>:
 8005b68:	b507      	push	{r0, r1, r2, lr}
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	460a      	mov	r2, r1
 8005b70:	4601      	mov	r1, r0
 8005b72:	4803      	ldr	r0, [pc, #12]	; (8005b80 <vsniprintf+0x18>)
 8005b74:	6800      	ldr	r0, [r0, #0]
 8005b76:	f7ff ffcb 	bl	8005b10 <_vsniprintf_r>
 8005b7a:	b003      	add	sp, #12
 8005b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b80:	2000000c 	.word	0x2000000c

08005b84 <__malloc_lock>:
 8005b84:	4770      	bx	lr

08005b86 <__malloc_unlock>:
 8005b86:	4770      	bx	lr

08005b88 <__ssputs_r>:
 8005b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8c:	688e      	ldr	r6, [r1, #8]
 8005b8e:	4682      	mov	sl, r0
 8005b90:	429e      	cmp	r6, r3
 8005b92:	460c      	mov	r4, r1
 8005b94:	4690      	mov	r8, r2
 8005b96:	4699      	mov	r9, r3
 8005b98:	d837      	bhi.n	8005c0a <__ssputs_r+0x82>
 8005b9a:	898a      	ldrh	r2, [r1, #12]
 8005b9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ba0:	d031      	beq.n	8005c06 <__ssputs_r+0x7e>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	6825      	ldr	r5, [r4, #0]
 8005ba6:	6909      	ldr	r1, [r1, #16]
 8005ba8:	1a6f      	subs	r7, r5, r1
 8005baa:	6965      	ldr	r5, [r4, #20]
 8005bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bb0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005bb4:	f109 0301 	add.w	r3, r9, #1
 8005bb8:	443b      	add	r3, r7
 8005bba:	429d      	cmp	r5, r3
 8005bbc:	bf38      	it	cc
 8005bbe:	461d      	movcc	r5, r3
 8005bc0:	0553      	lsls	r3, r2, #21
 8005bc2:	d530      	bpl.n	8005c26 <__ssputs_r+0x9e>
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	f7ff fef5 	bl	80059b4 <_malloc_r>
 8005bca:	4606      	mov	r6, r0
 8005bcc:	b950      	cbnz	r0, 8005be4 <__ssputs_r+0x5c>
 8005bce:	230c      	movs	r3, #12
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd4:	f8ca 3000 	str.w	r3, [sl]
 8005bd8:	89a3      	ldrh	r3, [r4, #12]
 8005bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bde:	81a3      	strh	r3, [r4, #12]
 8005be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be4:	463a      	mov	r2, r7
 8005be6:	6921      	ldr	r1, [r4, #16]
 8005be8:	f7ff fe6c 	bl	80058c4 <memcpy>
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf6:	81a3      	strh	r3, [r4, #12]
 8005bf8:	6126      	str	r6, [r4, #16]
 8005bfa:	443e      	add	r6, r7
 8005bfc:	6026      	str	r6, [r4, #0]
 8005bfe:	464e      	mov	r6, r9
 8005c00:	6165      	str	r5, [r4, #20]
 8005c02:	1bed      	subs	r5, r5, r7
 8005c04:	60a5      	str	r5, [r4, #8]
 8005c06:	454e      	cmp	r6, r9
 8005c08:	d900      	bls.n	8005c0c <__ssputs_r+0x84>
 8005c0a:	464e      	mov	r6, r9
 8005c0c:	4632      	mov	r2, r6
 8005c0e:	4641      	mov	r1, r8
 8005c10:	6820      	ldr	r0, [r4, #0]
 8005c12:	f7ff fe62 	bl	80058da <memmove>
 8005c16:	68a3      	ldr	r3, [r4, #8]
 8005c18:	2000      	movs	r0, #0
 8005c1a:	1b9b      	subs	r3, r3, r6
 8005c1c:	60a3      	str	r3, [r4, #8]
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	441e      	add	r6, r3
 8005c22:	6026      	str	r6, [r4, #0]
 8005c24:	e7dc      	b.n	8005be0 <__ssputs_r+0x58>
 8005c26:	462a      	mov	r2, r5
 8005c28:	f000 fa88 	bl	800613c <_realloc_r>
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d1e2      	bne.n	8005bf8 <__ssputs_r+0x70>
 8005c32:	6921      	ldr	r1, [r4, #16]
 8005c34:	4650      	mov	r0, sl
 8005c36:	f7ff fe71 	bl	800591c <_free_r>
 8005c3a:	e7c8      	b.n	8005bce <__ssputs_r+0x46>

08005c3c <_svfiprintf_r>:
 8005c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c40:	461d      	mov	r5, r3
 8005c42:	898b      	ldrh	r3, [r1, #12]
 8005c44:	b09d      	sub	sp, #116	; 0x74
 8005c46:	061f      	lsls	r7, r3, #24
 8005c48:	4680      	mov	r8, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	d50f      	bpl.n	8005c70 <_svfiprintf_r+0x34>
 8005c50:	690b      	ldr	r3, [r1, #16]
 8005c52:	b96b      	cbnz	r3, 8005c70 <_svfiprintf_r+0x34>
 8005c54:	2140      	movs	r1, #64	; 0x40
 8005c56:	f7ff fead 	bl	80059b4 <_malloc_r>
 8005c5a:	6020      	str	r0, [r4, #0]
 8005c5c:	6120      	str	r0, [r4, #16]
 8005c5e:	b928      	cbnz	r0, 8005c6c <_svfiprintf_r+0x30>
 8005c60:	230c      	movs	r3, #12
 8005c62:	f8c8 3000 	str.w	r3, [r8]
 8005c66:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6a:	e0c8      	b.n	8005dfe <_svfiprintf_r+0x1c2>
 8005c6c:	2340      	movs	r3, #64	; 0x40
 8005c6e:	6163      	str	r3, [r4, #20]
 8005c70:	2300      	movs	r3, #0
 8005c72:	9309      	str	r3, [sp, #36]	; 0x24
 8005c74:	2320      	movs	r3, #32
 8005c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c7a:	2330      	movs	r3, #48	; 0x30
 8005c7c:	f04f 0b01 	mov.w	fp, #1
 8005c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c84:	9503      	str	r5, [sp, #12]
 8005c86:	4637      	mov	r7, r6
 8005c88:	463d      	mov	r5, r7
 8005c8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c8e:	b10b      	cbz	r3, 8005c94 <_svfiprintf_r+0x58>
 8005c90:	2b25      	cmp	r3, #37	; 0x25
 8005c92:	d13e      	bne.n	8005d12 <_svfiprintf_r+0xd6>
 8005c94:	ebb7 0a06 	subs.w	sl, r7, r6
 8005c98:	d00b      	beq.n	8005cb2 <_svfiprintf_r+0x76>
 8005c9a:	4653      	mov	r3, sl
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	f7ff ff71 	bl	8005b88 <__ssputs_r>
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	f000 80a4 	beq.w	8005df4 <_svfiprintf_r+0x1b8>
 8005cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cae:	4453      	add	r3, sl
 8005cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb2:	783b      	ldrb	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 809d 	beq.w	8005df4 <_svfiprintf_r+0x1b8>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cc4:	9304      	str	r3, [sp, #16]
 8005cc6:	9307      	str	r3, [sp, #28]
 8005cc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8005cce:	462f      	mov	r7, r5
 8005cd0:	2205      	movs	r2, #5
 8005cd2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005cd6:	4850      	ldr	r0, [pc, #320]	; (8005e18 <_svfiprintf_r+0x1dc>)
 8005cd8:	f7ff fde6 	bl	80058a8 <memchr>
 8005cdc:	9b04      	ldr	r3, [sp, #16]
 8005cde:	b9d0      	cbnz	r0, 8005d16 <_svfiprintf_r+0xda>
 8005ce0:	06d9      	lsls	r1, r3, #27
 8005ce2:	bf44      	itt	mi
 8005ce4:	2220      	movmi	r2, #32
 8005ce6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005cea:	071a      	lsls	r2, r3, #28
 8005cec:	bf44      	itt	mi
 8005cee:	222b      	movmi	r2, #43	; 0x2b
 8005cf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005cf4:	782a      	ldrb	r2, [r5, #0]
 8005cf6:	2a2a      	cmp	r2, #42	; 0x2a
 8005cf8:	d015      	beq.n	8005d26 <_svfiprintf_r+0xea>
 8005cfa:	462f      	mov	r7, r5
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	250a      	movs	r5, #10
 8005d00:	9a07      	ldr	r2, [sp, #28]
 8005d02:	4639      	mov	r1, r7
 8005d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d08:	3b30      	subs	r3, #48	; 0x30
 8005d0a:	2b09      	cmp	r3, #9
 8005d0c:	d94d      	bls.n	8005daa <_svfiprintf_r+0x16e>
 8005d0e:	b1b8      	cbz	r0, 8005d40 <_svfiprintf_r+0x104>
 8005d10:	e00f      	b.n	8005d32 <_svfiprintf_r+0xf6>
 8005d12:	462f      	mov	r7, r5
 8005d14:	e7b8      	b.n	8005c88 <_svfiprintf_r+0x4c>
 8005d16:	4a40      	ldr	r2, [pc, #256]	; (8005e18 <_svfiprintf_r+0x1dc>)
 8005d18:	463d      	mov	r5, r7
 8005d1a:	1a80      	subs	r0, r0, r2
 8005d1c:	fa0b f000 	lsl.w	r0, fp, r0
 8005d20:	4318      	orrs	r0, r3
 8005d22:	9004      	str	r0, [sp, #16]
 8005d24:	e7d3      	b.n	8005cce <_svfiprintf_r+0x92>
 8005d26:	9a03      	ldr	r2, [sp, #12]
 8005d28:	1d11      	adds	r1, r2, #4
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	9103      	str	r1, [sp, #12]
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	db01      	blt.n	8005d36 <_svfiprintf_r+0xfa>
 8005d32:	9207      	str	r2, [sp, #28]
 8005d34:	e004      	b.n	8005d40 <_svfiprintf_r+0x104>
 8005d36:	4252      	negs	r2, r2
 8005d38:	f043 0302 	orr.w	r3, r3, #2
 8005d3c:	9207      	str	r2, [sp, #28]
 8005d3e:	9304      	str	r3, [sp, #16]
 8005d40:	783b      	ldrb	r3, [r7, #0]
 8005d42:	2b2e      	cmp	r3, #46	; 0x2e
 8005d44:	d10c      	bne.n	8005d60 <_svfiprintf_r+0x124>
 8005d46:	787b      	ldrb	r3, [r7, #1]
 8005d48:	2b2a      	cmp	r3, #42	; 0x2a
 8005d4a:	d133      	bne.n	8005db4 <_svfiprintf_r+0x178>
 8005d4c:	9b03      	ldr	r3, [sp, #12]
 8005d4e:	3702      	adds	r7, #2
 8005d50:	1d1a      	adds	r2, r3, #4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	9203      	str	r2, [sp, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bfb8      	it	lt
 8005d5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d5e:	9305      	str	r3, [sp, #20]
 8005d60:	4d2e      	ldr	r5, [pc, #184]	; (8005e1c <_svfiprintf_r+0x1e0>)
 8005d62:	2203      	movs	r2, #3
 8005d64:	7839      	ldrb	r1, [r7, #0]
 8005d66:	4628      	mov	r0, r5
 8005d68:	f7ff fd9e 	bl	80058a8 <memchr>
 8005d6c:	b138      	cbz	r0, 8005d7e <_svfiprintf_r+0x142>
 8005d6e:	2340      	movs	r3, #64	; 0x40
 8005d70:	1b40      	subs	r0, r0, r5
 8005d72:	fa03 f000 	lsl.w	r0, r3, r0
 8005d76:	9b04      	ldr	r3, [sp, #16]
 8005d78:	3701      	adds	r7, #1
 8005d7a:	4303      	orrs	r3, r0
 8005d7c:	9304      	str	r3, [sp, #16]
 8005d7e:	7839      	ldrb	r1, [r7, #0]
 8005d80:	2206      	movs	r2, #6
 8005d82:	4827      	ldr	r0, [pc, #156]	; (8005e20 <_svfiprintf_r+0x1e4>)
 8005d84:	1c7e      	adds	r6, r7, #1
 8005d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d8a:	f7ff fd8d 	bl	80058a8 <memchr>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d038      	beq.n	8005e04 <_svfiprintf_r+0x1c8>
 8005d92:	4b24      	ldr	r3, [pc, #144]	; (8005e24 <_svfiprintf_r+0x1e8>)
 8005d94:	bb13      	cbnz	r3, 8005ddc <_svfiprintf_r+0x1a0>
 8005d96:	9b03      	ldr	r3, [sp, #12]
 8005d98:	3307      	adds	r3, #7
 8005d9a:	f023 0307 	bic.w	r3, r3, #7
 8005d9e:	3308      	adds	r3, #8
 8005da0:	9303      	str	r3, [sp, #12]
 8005da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da4:	444b      	add	r3, r9
 8005da6:	9309      	str	r3, [sp, #36]	; 0x24
 8005da8:	e76d      	b.n	8005c86 <_svfiprintf_r+0x4a>
 8005daa:	fb05 3202 	mla	r2, r5, r2, r3
 8005dae:	2001      	movs	r0, #1
 8005db0:	460f      	mov	r7, r1
 8005db2:	e7a6      	b.n	8005d02 <_svfiprintf_r+0xc6>
 8005db4:	2300      	movs	r3, #0
 8005db6:	250a      	movs	r5, #10
 8005db8:	4619      	mov	r1, r3
 8005dba:	3701      	adds	r7, #1
 8005dbc:	9305      	str	r3, [sp, #20]
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dc4:	3a30      	subs	r2, #48	; 0x30
 8005dc6:	2a09      	cmp	r2, #9
 8005dc8:	d903      	bls.n	8005dd2 <_svfiprintf_r+0x196>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0c8      	beq.n	8005d60 <_svfiprintf_r+0x124>
 8005dce:	9105      	str	r1, [sp, #20]
 8005dd0:	e7c6      	b.n	8005d60 <_svfiprintf_r+0x124>
 8005dd2:	fb05 2101 	mla	r1, r5, r1, r2
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4607      	mov	r7, r0
 8005dda:	e7f0      	b.n	8005dbe <_svfiprintf_r+0x182>
 8005ddc:	ab03      	add	r3, sp, #12
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	4622      	mov	r2, r4
 8005de2:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <_svfiprintf_r+0x1ec>)
 8005de4:	a904      	add	r1, sp, #16
 8005de6:	4640      	mov	r0, r8
 8005de8:	f3af 8000 	nop.w
 8005dec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005df0:	4681      	mov	r9, r0
 8005df2:	d1d6      	bne.n	8005da2 <_svfiprintf_r+0x166>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	065b      	lsls	r3, r3, #25
 8005df8:	f53f af35 	bmi.w	8005c66 <_svfiprintf_r+0x2a>
 8005dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dfe:	b01d      	add	sp, #116	; 0x74
 8005e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e04:	ab03      	add	r3, sp, #12
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	4622      	mov	r2, r4
 8005e0a:	4b07      	ldr	r3, [pc, #28]	; (8005e28 <_svfiprintf_r+0x1ec>)
 8005e0c:	a904      	add	r1, sp, #16
 8005e0e:	4640      	mov	r0, r8
 8005e10:	f000 f882 	bl	8005f18 <_printf_i>
 8005e14:	e7ea      	b.n	8005dec <_svfiprintf_r+0x1b0>
 8005e16:	bf00      	nop
 8005e18:	0800668c 	.word	0x0800668c
 8005e1c:	08006692 	.word	0x08006692
 8005e20:	08006696 	.word	0x08006696
 8005e24:	00000000 	.word	0x00000000
 8005e28:	08005b89 	.word	0x08005b89

08005e2c <_printf_common>:
 8005e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e30:	4691      	mov	r9, r2
 8005e32:	461f      	mov	r7, r3
 8005e34:	688a      	ldr	r2, [r1, #8]
 8005e36:	690b      	ldr	r3, [r1, #16]
 8005e38:	4606      	mov	r6, r0
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	bfb8      	it	lt
 8005e3e:	4613      	movlt	r3, r2
 8005e40:	f8c9 3000 	str.w	r3, [r9]
 8005e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e48:	460c      	mov	r4, r1
 8005e4a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e4e:	b112      	cbz	r2, 8005e56 <_printf_common+0x2a>
 8005e50:	3301      	adds	r3, #1
 8005e52:	f8c9 3000 	str.w	r3, [r9]
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	0699      	lsls	r1, r3, #26
 8005e5a:	bf42      	ittt	mi
 8005e5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005e60:	3302      	addmi	r3, #2
 8005e62:	f8c9 3000 	strmi.w	r3, [r9]
 8005e66:	6825      	ldr	r5, [r4, #0]
 8005e68:	f015 0506 	ands.w	r5, r5, #6
 8005e6c:	d107      	bne.n	8005e7e <_printf_common+0x52>
 8005e6e:	f104 0a19 	add.w	sl, r4, #25
 8005e72:	68e3      	ldr	r3, [r4, #12]
 8005e74:	f8d9 2000 	ldr.w	r2, [r9]
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	42ab      	cmp	r3, r5
 8005e7c:	dc29      	bgt.n	8005ed2 <_printf_common+0xa6>
 8005e7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	3300      	adds	r3, #0
 8005e86:	bf18      	it	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	0692      	lsls	r2, r2, #26
 8005e8c:	d42e      	bmi.n	8005eec <_printf_common+0xc0>
 8005e8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e92:	4639      	mov	r1, r7
 8005e94:	4630      	mov	r0, r6
 8005e96:	47c0      	blx	r8
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d021      	beq.n	8005ee0 <_printf_common+0xb4>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	68e5      	ldr	r5, [r4, #12]
 8005ea0:	f003 0306 	and.w	r3, r3, #6
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	bf18      	it	ne
 8005ea8:	2500      	movne	r5, #0
 8005eaa:	f8d9 2000 	ldr.w	r2, [r9]
 8005eae:	f04f 0900 	mov.w	r9, #0
 8005eb2:	bf08      	it	eq
 8005eb4:	1aad      	subeq	r5, r5, r2
 8005eb6:	68a3      	ldr	r3, [r4, #8]
 8005eb8:	6922      	ldr	r2, [r4, #16]
 8005eba:	bf08      	it	eq
 8005ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	bfc4      	itt	gt
 8005ec4:	1a9b      	subgt	r3, r3, r2
 8005ec6:	18ed      	addgt	r5, r5, r3
 8005ec8:	341a      	adds	r4, #26
 8005eca:	454d      	cmp	r5, r9
 8005ecc:	d11a      	bne.n	8005f04 <_printf_common+0xd8>
 8005ece:	2000      	movs	r0, #0
 8005ed0:	e008      	b.n	8005ee4 <_printf_common+0xb8>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4652      	mov	r2, sl
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	4630      	mov	r0, r6
 8005eda:	47c0      	blx	r8
 8005edc:	3001      	adds	r0, #1
 8005ede:	d103      	bne.n	8005ee8 <_printf_common+0xbc>
 8005ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee8:	3501      	adds	r5, #1
 8005eea:	e7c2      	b.n	8005e72 <_printf_common+0x46>
 8005eec:	2030      	movs	r0, #48	; 0x30
 8005eee:	18e1      	adds	r1, r4, r3
 8005ef0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005efa:	4422      	add	r2, r4
 8005efc:	3302      	adds	r3, #2
 8005efe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f02:	e7c4      	b.n	8005e8e <_printf_common+0x62>
 8005f04:	2301      	movs	r3, #1
 8005f06:	4622      	mov	r2, r4
 8005f08:	4639      	mov	r1, r7
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	47c0      	blx	r8
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d0e6      	beq.n	8005ee0 <_printf_common+0xb4>
 8005f12:	f109 0901 	add.w	r9, r9, #1
 8005f16:	e7d8      	b.n	8005eca <_printf_common+0x9e>

08005f18 <_printf_i>:
 8005f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005f20:	460c      	mov	r4, r1
 8005f22:	7e09      	ldrb	r1, [r1, #24]
 8005f24:	b085      	sub	sp, #20
 8005f26:	296e      	cmp	r1, #110	; 0x6e
 8005f28:	4617      	mov	r7, r2
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	4698      	mov	r8, r3
 8005f2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f30:	f000 80b3 	beq.w	800609a <_printf_i+0x182>
 8005f34:	d822      	bhi.n	8005f7c <_printf_i+0x64>
 8005f36:	2963      	cmp	r1, #99	; 0x63
 8005f38:	d036      	beq.n	8005fa8 <_printf_i+0x90>
 8005f3a:	d80a      	bhi.n	8005f52 <_printf_i+0x3a>
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	f000 80b9 	beq.w	80060b4 <_printf_i+0x19c>
 8005f42:	2958      	cmp	r1, #88	; 0x58
 8005f44:	f000 8083 	beq.w	800604e <_printf_i+0x136>
 8005f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005f50:	e032      	b.n	8005fb8 <_printf_i+0xa0>
 8005f52:	2964      	cmp	r1, #100	; 0x64
 8005f54:	d001      	beq.n	8005f5a <_printf_i+0x42>
 8005f56:	2969      	cmp	r1, #105	; 0x69
 8005f58:	d1f6      	bne.n	8005f48 <_printf_i+0x30>
 8005f5a:	6820      	ldr	r0, [r4, #0]
 8005f5c:	6813      	ldr	r3, [r2, #0]
 8005f5e:	0605      	lsls	r5, r0, #24
 8005f60:	f103 0104 	add.w	r1, r3, #4
 8005f64:	d52a      	bpl.n	8005fbc <_printf_i+0xa4>
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6011      	str	r1, [r2, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	da03      	bge.n	8005f76 <_printf_i+0x5e>
 8005f6e:	222d      	movs	r2, #45	; 0x2d
 8005f70:	425b      	negs	r3, r3
 8005f72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005f76:	486f      	ldr	r0, [pc, #444]	; (8006134 <_printf_i+0x21c>)
 8005f78:	220a      	movs	r2, #10
 8005f7a:	e039      	b.n	8005ff0 <_printf_i+0xd8>
 8005f7c:	2973      	cmp	r1, #115	; 0x73
 8005f7e:	f000 809d 	beq.w	80060bc <_printf_i+0x1a4>
 8005f82:	d808      	bhi.n	8005f96 <_printf_i+0x7e>
 8005f84:	296f      	cmp	r1, #111	; 0x6f
 8005f86:	d020      	beq.n	8005fca <_printf_i+0xb2>
 8005f88:	2970      	cmp	r1, #112	; 0x70
 8005f8a:	d1dd      	bne.n	8005f48 <_printf_i+0x30>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	f043 0320 	orr.w	r3, r3, #32
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	e003      	b.n	8005f9e <_printf_i+0x86>
 8005f96:	2975      	cmp	r1, #117	; 0x75
 8005f98:	d017      	beq.n	8005fca <_printf_i+0xb2>
 8005f9a:	2978      	cmp	r1, #120	; 0x78
 8005f9c:	d1d4      	bne.n	8005f48 <_printf_i+0x30>
 8005f9e:	2378      	movs	r3, #120	; 0x78
 8005fa0:	4865      	ldr	r0, [pc, #404]	; (8006138 <_printf_i+0x220>)
 8005fa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fa6:	e055      	b.n	8006054 <_printf_i+0x13c>
 8005fa8:	6813      	ldr	r3, [r2, #0]
 8005faa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fae:	1d19      	adds	r1, r3, #4
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6011      	str	r1, [r2, #0]
 8005fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e08c      	b.n	80060d6 <_printf_i+0x1be>
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fc2:	6011      	str	r1, [r2, #0]
 8005fc4:	bf18      	it	ne
 8005fc6:	b21b      	sxthne	r3, r3
 8005fc8:	e7cf      	b.n	8005f6a <_printf_i+0x52>
 8005fca:	6813      	ldr	r3, [r2, #0]
 8005fcc:	6825      	ldr	r5, [r4, #0]
 8005fce:	1d18      	adds	r0, r3, #4
 8005fd0:	6010      	str	r0, [r2, #0]
 8005fd2:	0628      	lsls	r0, r5, #24
 8005fd4:	d501      	bpl.n	8005fda <_printf_i+0xc2>
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	e002      	b.n	8005fe0 <_printf_i+0xc8>
 8005fda:	0668      	lsls	r0, r5, #25
 8005fdc:	d5fb      	bpl.n	8005fd6 <_printf_i+0xbe>
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	296f      	cmp	r1, #111	; 0x6f
 8005fe2:	bf14      	ite	ne
 8005fe4:	220a      	movne	r2, #10
 8005fe6:	2208      	moveq	r2, #8
 8005fe8:	4852      	ldr	r0, [pc, #328]	; (8006134 <_printf_i+0x21c>)
 8005fea:	2100      	movs	r1, #0
 8005fec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ff0:	6865      	ldr	r5, [r4, #4]
 8005ff2:	2d00      	cmp	r5, #0
 8005ff4:	60a5      	str	r5, [r4, #8]
 8005ff6:	f2c0 8095 	blt.w	8006124 <_printf_i+0x20c>
 8005ffa:	6821      	ldr	r1, [r4, #0]
 8005ffc:	f021 0104 	bic.w	r1, r1, #4
 8006000:	6021      	str	r1, [r4, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d13d      	bne.n	8006082 <_printf_i+0x16a>
 8006006:	2d00      	cmp	r5, #0
 8006008:	f040 808e 	bne.w	8006128 <_printf_i+0x210>
 800600c:	4665      	mov	r5, ip
 800600e:	2a08      	cmp	r2, #8
 8006010:	d10b      	bne.n	800602a <_printf_i+0x112>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	07db      	lsls	r3, r3, #31
 8006016:	d508      	bpl.n	800602a <_printf_i+0x112>
 8006018:	6923      	ldr	r3, [r4, #16]
 800601a:	6862      	ldr	r2, [r4, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	bfde      	ittt	le
 8006020:	2330      	movle	r3, #48	; 0x30
 8006022:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006026:	f105 35ff 	addle.w	r5, r5, #4294967295
 800602a:	ebac 0305 	sub.w	r3, ip, r5
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	f8cd 8000 	str.w	r8, [sp]
 8006034:	463b      	mov	r3, r7
 8006036:	aa03      	add	r2, sp, #12
 8006038:	4621      	mov	r1, r4
 800603a:	4630      	mov	r0, r6
 800603c:	f7ff fef6 	bl	8005e2c <_printf_common>
 8006040:	3001      	adds	r0, #1
 8006042:	d14d      	bne.n	80060e0 <_printf_i+0x1c8>
 8006044:	f04f 30ff 	mov.w	r0, #4294967295
 8006048:	b005      	add	sp, #20
 800604a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800604e:	4839      	ldr	r0, [pc, #228]	; (8006134 <_printf_i+0x21c>)
 8006050:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006054:	6813      	ldr	r3, [r2, #0]
 8006056:	6821      	ldr	r1, [r4, #0]
 8006058:	1d1d      	adds	r5, r3, #4
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6015      	str	r5, [r2, #0]
 800605e:	060a      	lsls	r2, r1, #24
 8006060:	d50b      	bpl.n	800607a <_printf_i+0x162>
 8006062:	07ca      	lsls	r2, r1, #31
 8006064:	bf44      	itt	mi
 8006066:	f041 0120 	orrmi.w	r1, r1, #32
 800606a:	6021      	strmi	r1, [r4, #0]
 800606c:	b91b      	cbnz	r3, 8006076 <_printf_i+0x15e>
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	f022 0220 	bic.w	r2, r2, #32
 8006074:	6022      	str	r2, [r4, #0]
 8006076:	2210      	movs	r2, #16
 8006078:	e7b7      	b.n	8005fea <_printf_i+0xd2>
 800607a:	064d      	lsls	r5, r1, #25
 800607c:	bf48      	it	mi
 800607e:	b29b      	uxthmi	r3, r3
 8006080:	e7ef      	b.n	8006062 <_printf_i+0x14a>
 8006082:	4665      	mov	r5, ip
 8006084:	fbb3 f1f2 	udiv	r1, r3, r2
 8006088:	fb02 3311 	mls	r3, r2, r1, r3
 800608c:	5cc3      	ldrb	r3, [r0, r3]
 800608e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006092:	460b      	mov	r3, r1
 8006094:	2900      	cmp	r1, #0
 8006096:	d1f5      	bne.n	8006084 <_printf_i+0x16c>
 8006098:	e7b9      	b.n	800600e <_printf_i+0xf6>
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	6825      	ldr	r5, [r4, #0]
 800609e:	1d18      	adds	r0, r3, #4
 80060a0:	6961      	ldr	r1, [r4, #20]
 80060a2:	6010      	str	r0, [r2, #0]
 80060a4:	0628      	lsls	r0, r5, #24
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	d501      	bpl.n	80060ae <_printf_i+0x196>
 80060aa:	6019      	str	r1, [r3, #0]
 80060ac:	e002      	b.n	80060b4 <_printf_i+0x19c>
 80060ae:	066a      	lsls	r2, r5, #25
 80060b0:	d5fb      	bpl.n	80060aa <_printf_i+0x192>
 80060b2:	8019      	strh	r1, [r3, #0]
 80060b4:	2300      	movs	r3, #0
 80060b6:	4665      	mov	r5, ip
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	e7b9      	b.n	8006030 <_printf_i+0x118>
 80060bc:	6813      	ldr	r3, [r2, #0]
 80060be:	1d19      	adds	r1, r3, #4
 80060c0:	6011      	str	r1, [r2, #0]
 80060c2:	681d      	ldr	r5, [r3, #0]
 80060c4:	6862      	ldr	r2, [r4, #4]
 80060c6:	2100      	movs	r1, #0
 80060c8:	4628      	mov	r0, r5
 80060ca:	f7ff fbed 	bl	80058a8 <memchr>
 80060ce:	b108      	cbz	r0, 80060d4 <_printf_i+0x1bc>
 80060d0:	1b40      	subs	r0, r0, r5
 80060d2:	6060      	str	r0, [r4, #4]
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	6123      	str	r3, [r4, #16]
 80060d8:	2300      	movs	r3, #0
 80060da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060de:	e7a7      	b.n	8006030 <_printf_i+0x118>
 80060e0:	6923      	ldr	r3, [r4, #16]
 80060e2:	462a      	mov	r2, r5
 80060e4:	4639      	mov	r1, r7
 80060e6:	4630      	mov	r0, r6
 80060e8:	47c0      	blx	r8
 80060ea:	3001      	adds	r0, #1
 80060ec:	d0aa      	beq.n	8006044 <_printf_i+0x12c>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	079b      	lsls	r3, r3, #30
 80060f2:	d413      	bmi.n	800611c <_printf_i+0x204>
 80060f4:	68e0      	ldr	r0, [r4, #12]
 80060f6:	9b03      	ldr	r3, [sp, #12]
 80060f8:	4298      	cmp	r0, r3
 80060fa:	bfb8      	it	lt
 80060fc:	4618      	movlt	r0, r3
 80060fe:	e7a3      	b.n	8006048 <_printf_i+0x130>
 8006100:	2301      	movs	r3, #1
 8006102:	464a      	mov	r2, r9
 8006104:	4639      	mov	r1, r7
 8006106:	4630      	mov	r0, r6
 8006108:	47c0      	blx	r8
 800610a:	3001      	adds	r0, #1
 800610c:	d09a      	beq.n	8006044 <_printf_i+0x12c>
 800610e:	3501      	adds	r5, #1
 8006110:	68e3      	ldr	r3, [r4, #12]
 8006112:	9a03      	ldr	r2, [sp, #12]
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	42ab      	cmp	r3, r5
 8006118:	dcf2      	bgt.n	8006100 <_printf_i+0x1e8>
 800611a:	e7eb      	b.n	80060f4 <_printf_i+0x1dc>
 800611c:	2500      	movs	r5, #0
 800611e:	f104 0919 	add.w	r9, r4, #25
 8006122:	e7f5      	b.n	8006110 <_printf_i+0x1f8>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1ac      	bne.n	8006082 <_printf_i+0x16a>
 8006128:	7803      	ldrb	r3, [r0, #0]
 800612a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800612e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006132:	e76c      	b.n	800600e <_printf_i+0xf6>
 8006134:	0800669d 	.word	0x0800669d
 8006138:	080066ae 	.word	0x080066ae

0800613c <_realloc_r>:
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	4607      	mov	r7, r0
 8006140:	4614      	mov	r4, r2
 8006142:	460e      	mov	r6, r1
 8006144:	b921      	cbnz	r1, 8006150 <_realloc_r+0x14>
 8006146:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800614a:	4611      	mov	r1, r2
 800614c:	f7ff bc32 	b.w	80059b4 <_malloc_r>
 8006150:	b922      	cbnz	r2, 800615c <_realloc_r+0x20>
 8006152:	f7ff fbe3 	bl	800591c <_free_r>
 8006156:	4625      	mov	r5, r4
 8006158:	4628      	mov	r0, r5
 800615a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800615c:	f000 f814 	bl	8006188 <_malloc_usable_size_r>
 8006160:	42a0      	cmp	r0, r4
 8006162:	d20f      	bcs.n	8006184 <_realloc_r+0x48>
 8006164:	4621      	mov	r1, r4
 8006166:	4638      	mov	r0, r7
 8006168:	f7ff fc24 	bl	80059b4 <_malloc_r>
 800616c:	4605      	mov	r5, r0
 800616e:	2800      	cmp	r0, #0
 8006170:	d0f2      	beq.n	8006158 <_realloc_r+0x1c>
 8006172:	4631      	mov	r1, r6
 8006174:	4622      	mov	r2, r4
 8006176:	f7ff fba5 	bl	80058c4 <memcpy>
 800617a:	4631      	mov	r1, r6
 800617c:	4638      	mov	r0, r7
 800617e:	f7ff fbcd 	bl	800591c <_free_r>
 8006182:	e7e9      	b.n	8006158 <_realloc_r+0x1c>
 8006184:	4635      	mov	r5, r6
 8006186:	e7e7      	b.n	8006158 <_realloc_r+0x1c>

08006188 <_malloc_usable_size_r>:
 8006188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618c:	1f18      	subs	r0, r3, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	bfbc      	itt	lt
 8006192:	580b      	ldrlt	r3, [r1, r0]
 8006194:	18c0      	addlt	r0, r0, r3
 8006196:	4770      	bx	lr

08006198 <_init>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	bf00      	nop
 800619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619e:	bc08      	pop	{r3}
 80061a0:	469e      	mov	lr, r3
 80061a2:	4770      	bx	lr

080061a4 <_fini>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	bf00      	nop
 80061a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061aa:	bc08      	pop	{r3}
 80061ac:	469e      	mov	lr, r3
 80061ae:	4770      	bx	lr

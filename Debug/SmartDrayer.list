
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011fb4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003594  080120c4  080120c4  000220c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015658  08015658  00030278  2**0
                  CONTENTS
  4 .ARM          00000000  08015658  08015658  00030278  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015658  08015658  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015658  08015658  00025658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801565c  0801565c  0002565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08015660  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000278  080158d8  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  080158d8  0003082c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00115600  00000000  00000000  000302a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009290  00000000  00000000  001458a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003af0  00000000  00000000  0014eb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003800  00000000  00000000  00152628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e847  00000000  00000000  00155e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b681  00000000  00000000  0017466f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3e3d  00000000  00000000  0019fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00243b2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011bf4  00000000  00000000  00243ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	080120ac 	.word	0x080120ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	080120ac 	.word	0x080120ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	d1ed      	bne.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2uiz>:
 8000e58:	0042      	lsls	r2, r0, #1
 8000e5a:	d20e      	bcs.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e60:	d30b      	bcc.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d409      	bmi.n	8000e80 <__aeabi_f2uiz+0x28>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	fa23 f002 	lsr.w	r0, r3, r2
 8000e78:	4770      	bx	lr
 8000e7a:	f04f 0000 	mov.w	r0, #0
 8000e7e:	4770      	bx	lr
 8000e80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e84:	d101      	bne.n	8000e8a <__aeabi_f2uiz+0x32>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d102      	bne.n	8000e90 <__aeabi_f2uiz+0x38>
 8000e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8e:	4770      	bx	lr
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	70fb      	strb	r3, [r7, #3]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	70bb      	strb	r3, [r7, #2]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000eb2:	78fa      	ldrb	r2, [r7, #3]
 8000eb4:	787b      	ldrb	r3, [r7, #1]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b2d8      	uxtb	r0, r3
 8000eba:	78ba      	ldrb	r2, [r7, #2]
 8000ebc:	7c3b      	ldrb	r3, [r7, #16]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	78ba      	ldrb	r2, [r7, #2]
 8000ec4:	78f9      	ldrb	r1, [r7, #3]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4603      	mov	r3, r0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f001 fad9 	bl	8002482 <u8g2_IsIntersection>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d013      	beq.n	8000efe <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8000ed6:	e00e      	b.n	8000ef6 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000ed8:	7878      	ldrb	r0, [r7, #1]
 8000eda:	78ba      	ldrb	r2, [r7, #2]
 8000edc:	78f9      	ldrb	r1, [r7, #3]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 f999 	bl	800221c <u8g2_DrawHVLine>
    y++;    
 8000eea:	78bb      	ldrb	r3, [r7, #2]
 8000eec:	3301      	adds	r3, #1
 8000eee:	70bb      	strb	r3, [r7, #2]
    h--;
 8000ef0:	7c3b      	ldrb	r3, [r7, #16]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8000ef6:	7c3b      	ldrb	r3, [r7, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1ed      	bne.n	8000ed8 <u8g2_DrawBox+0x40>
 8000efc:	e000      	b.n	8000f00 <u8g2_DrawBox+0x68>
    return;
 8000efe:	bf00      	nop
  }
}
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af02      	add	r7, sp, #8
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	4608      	mov	r0, r1
 8000f10:	4611      	mov	r1, r2
 8000f12:	461a      	mov	r2, r3
 8000f14:	4603      	mov	r3, r0
 8000f16:	70fb      	strb	r3, [r7, #3]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70bb      	strb	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	787b      	ldrb	r3, [r7, #1]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2d8      	uxtb	r0, r3
 8000f2c:	78ba      	ldrb	r2, [r7, #2]
 8000f2e:	7e3b      	ldrb	r3, [r7, #24]
 8000f30:	4413      	add	r3, r2
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	78ba      	ldrb	r2, [r7, #2]
 8000f36:	78f9      	ldrb	r1, [r7, #3]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f001 faa0 	bl	8002482 <u8g2_IsIntersection>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d03b      	beq.n	8000fc0 <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000f48:	7878      	ldrb	r0, [r7, #1]
 8000f4a:	78ba      	ldrb	r2, [r7, #2]
 8000f4c:	78f9      	ldrb	r1, [r7, #3]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	4603      	mov	r3, r0
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f001 f961 	bl	800221c <u8g2_DrawHVLine>
  if (h >= 2) {
 8000f5a:	7e3b      	ldrb	r3, [r7, #24]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d930      	bls.n	8000fc2 <u8g2_DrawFrame+0xbc>
    h-=2;
 8000f60:	7e3b      	ldrb	r3, [r7, #24]
 8000f62:	3b02      	subs	r3, #2
 8000f64:	763b      	strb	r3, [r7, #24]
    y++;
 8000f66:	78bb      	ldrb	r3, [r7, #2]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 8000f6c:	7e3b      	ldrb	r3, [r7, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d01c      	beq.n	8000fac <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000f72:	7e38      	ldrb	r0, [r7, #24]
 8000f74:	78ba      	ldrb	r2, [r7, #2]
 8000f76:	78f9      	ldrb	r1, [r7, #3]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f001 f94c 	bl	800221c <u8g2_DrawHVLine>
      x+=w;
 8000f84:	78fa      	ldrb	r2, [r7, #3]
 8000f86:	787b      	ldrb	r3, [r7, #1]
 8000f88:	4413      	add	r3, r2
 8000f8a:	70fb      	strb	r3, [r7, #3]
      x--;
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000f92:	7e38      	ldrb	r0, [r7, #24]
 8000f94:	78ba      	ldrb	r2, [r7, #2]
 8000f96:	78f9      	ldrb	r1, [r7, #3]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f001 f93c 	bl	800221c <u8g2_DrawHVLine>
      y+=h;
 8000fa4:	78ba      	ldrb	r2, [r7, #2]
 8000fa6:	7e3b      	ldrb	r3, [r7, #24]
 8000fa8:	4413      	add	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8000fac:	7878      	ldrb	r0, [r7, #1]
 8000fae:	78ba      	ldrb	r2, [r7, #2]
 8000fb0:	7bf9      	ldrb	r1, [r7, #15]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f001 f92f 	bl	800221c <u8g2_DrawHVLine>
 8000fbe:	e000      	b.n	8000fc2 <u8g2_DrawFrame+0xbc>
    return;
 8000fc0:	bf00      	nop
  }
}
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	70fb      	strb	r3, [r7, #3]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70bb      	strb	r3, [r7, #2]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2d8      	uxtb	r0, r3
 8000fea:	78ba      	ldrb	r2, [r7, #2]
 8000fec:	7e3b      	ldrb	r3, [r7, #24]
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	78ba      	ldrb	r2, [r7, #2]
 8000ff4:	78f9      	ldrb	r1, [r7, #3]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 fa41 	bl	8002482 <u8g2_IsIntersection>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8095 	beq.w	8001132 <u8g2_DrawRFrame+0x16a>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	73fb      	strb	r3, [r7, #15]
  xl += r;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	7f3b      	ldrb	r3, [r7, #28]
 8001010:	4413      	add	r3, r2
 8001012:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8001014:	78bb      	ldrb	r3, [r7, #2]
 8001016:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8001018:	7bba      	ldrb	r2, [r7, #14]
 800101a:	7f3b      	ldrb	r3, [r7, #28]
 800101c:	4413      	add	r3, r2
 800101e:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	737b      	strb	r3, [r7, #13]
    xr += w;
 8001024:	7b7a      	ldrb	r2, [r7, #13]
 8001026:	787b      	ldrb	r3, [r7, #1]
 8001028:	4413      	add	r3, r2
 800102a:	737b      	strb	r3, [r7, #13]
    xr -= r;
 800102c:	7b7a      	ldrb	r2, [r7, #13]
 800102e:	7f3b      	ldrb	r3, [r7, #28]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	3b01      	subs	r3, #1
 8001038:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 800103a:	78bb      	ldrb	r3, [r7, #2]
 800103c:	733b      	strb	r3, [r7, #12]
    yl += h;
 800103e:	7b3a      	ldrb	r2, [r7, #12]
 8001040:	7e3b      	ldrb	r3, [r7, #24]
 8001042:	4413      	add	r3, r2
 8001044:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8001046:	7b3a      	ldrb	r2, [r7, #12]
 8001048:	7f3b      	ldrb	r3, [r7, #28]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 800104e:	7b3b      	ldrb	r3, [r7, #12]
 8001050:	3b01      	subs	r3, #1
 8001052:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001054:	7f38      	ldrb	r0, [r7, #28]
 8001056:	7bba      	ldrb	r2, [r7, #14]
 8001058:	7bf9      	ldrb	r1, [r7, #15]
 800105a:	2302      	movs	r3, #2
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4603      	mov	r3, r0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f9d0 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8001066:	7f38      	ldrb	r0, [r7, #28]
 8001068:	7bba      	ldrb	r2, [r7, #14]
 800106a:	7b79      	ldrb	r1, [r7, #13]
 800106c:	2301      	movs	r3, #1
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4603      	mov	r3, r0
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f9c7 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8001078:	7f38      	ldrb	r0, [r7, #28]
 800107a:	7b3a      	ldrb	r2, [r7, #12]
 800107c:	7bf9      	ldrb	r1, [r7, #15]
 800107e:	2304      	movs	r3, #4
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4603      	mov	r3, r0
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f9be 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 800108a:	7f38      	ldrb	r0, [r7, #28]
 800108c:	7b3a      	ldrb	r2, [r7, #12]
 800108e:	7b79      	ldrb	r1, [r7, #13]
 8001090:	2308      	movs	r3, #8
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	4603      	mov	r3, r0
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f9b5 	bl	8001406 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 80010a0:	7afa      	ldrb	r2, [r7, #11]
 80010a2:	7f3b      	ldrb	r3, [r7, #28]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 80010a8:	7afa      	ldrb	r2, [r7, #11]
 80010aa:	7f3b      	ldrb	r3, [r7, #28]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	72fb      	strb	r3, [r7, #11]
    hh = h;
 80010b0:	7e3b      	ldrb	r3, [r7, #24]
 80010b2:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 80010b4:	7aba      	ldrb	r2, [r7, #10]
 80010b6:	7f3b      	ldrb	r3, [r7, #28]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 80010bc:	7aba      	ldrb	r2, [r7, #10]
 80010be:	7f3b      	ldrb	r3, [r7, #28]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	3301      	adds	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
    yu++;
 80010ca:	7bbb      	ldrb	r3, [r7, #14]
 80010cc:	3301      	adds	r3, #1
 80010ce:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d914      	bls.n	8001100 <u8g2_DrawRFrame+0x138>
    {
      ww -= 2;
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	3b02      	subs	r3, #2
 80010da:	72fb      	strb	r3, [r7, #11]
      h--;
 80010dc:	7e3b      	ldrb	r3, [r7, #24]
 80010de:	3b01      	subs	r3, #1
 80010e0:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	78ba      	ldrb	r2, [r7, #2]
 80010e6:	7bf9      	ldrb	r1, [r7, #15]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f001 f91a 	bl	8002322 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 80010ee:	78ba      	ldrb	r2, [r7, #2]
 80010f0:	7e3b      	ldrb	r3, [r7, #24]
 80010f2:	4413      	add	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	7bf9      	ldrb	r1, [r7, #15]
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f001 f911 	bl	8002322 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8001100:	7abb      	ldrb	r3, [r7, #10]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d916      	bls.n	8001134 <u8g2_DrawRFrame+0x16c>
    {
      hh -= 2;
 8001106:	7abb      	ldrb	r3, [r7, #10]
 8001108:	3b02      	subs	r3, #2
 800110a:	72bb      	strb	r3, [r7, #10]
      w--;
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	3b01      	subs	r3, #1
 8001110:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8001112:	7abb      	ldrb	r3, [r7, #10]
 8001114:	7bba      	ldrb	r2, [r7, #14]
 8001116:	78f9      	ldrb	r1, [r7, #3]
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f001 f91c 	bl	8002356 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 800111e:	78fa      	ldrb	r2, [r7, #3]
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	4413      	add	r3, r2
 8001124:	b2d9      	uxtb	r1, r3
 8001126:	7abb      	ldrb	r3, [r7, #10]
 8001128:	7bba      	ldrb	r2, [r7, #14]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f001 f913 	bl	8002356 <u8g2_DrawVLine>
 8001130:	e000      	b.n	8001134 <u8g2_DrawRFrame+0x16c>
    return;
 8001132:	bf00      	nop
    }
  }
}
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	7c1b      	ldrb	r3, [r3, #16]
 8001148:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001150:	461a      	mov	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f010 fa70 	bl	801164e <memset>
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af02      	add	r7, sp, #8
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
 8001182:	4613      	mov	r3, r2
 8001184:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	7c1b      	ldrb	r3, [r3, #16]
 800118c:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001196:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	b29b      	uxth	r3, r3
 800119c:	89ba      	ldrh	r2, [r7, #12]
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80011a4:	89bb      	ldrh	r3, [r7, #12]
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80011aa:	89bb      	ldrh	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80011b2:	7bf9      	ldrb	r1, [r7, #15]
 80011b4:	78ba      	ldrb	r2, [r7, #2]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	2100      	movs	r1, #0
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f001 ff80 	bl	80030c4 <u8x8_DrawTile>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011de:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011e6:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	7c5b      	ldrb	r3, [r3, #17]
 80011ee:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80011f0:	7bba      	ldrb	r2, [r7, #14]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffbd 	bl	8001176 <u8g2_send_tile_row>
    src_row++;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	3301      	adds	r3, #1
 8001206:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	7b7b      	ldrb	r3, [r7, #13]
 800120c:	429a      	cmp	r2, r3
 800120e:	d203      	bcs.n	8001218 <u8g2_send_buffer+0x4c>
 8001210:	7bba      	ldrb	r2, [r7, #14]
 8001212:	7b3b      	ldrb	r3, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3eb      	bcc.n	80011f0 <u8g2_send_buffer+0x24>
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffcf 	bl	80011cc <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f001 ff99 	bl	8003166 <u8x8_RefreshDisplay>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4603      	mov	r3, r0
 800124c:	70fb      	strb	r3, [r7, #3]
 800124e:	460b      	mov	r3, r1
 8001250:	70bb      	strb	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001256:	7d3b      	ldrb	r3, [r7, #20]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d017      	beq.n	8001290 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8001260:	787a      	ldrb	r2, [r7, #1]
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	4413      	add	r3, r2
 8001266:	b2d9      	uxtb	r1, r3
 8001268:	7c3a      	ldrb	r2, [r7, #16]
 800126a:	78bb      	ldrb	r3, [r7, #2]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 f889 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8001278:	787a      	ldrb	r2, [r7, #1]
 800127a:	78bb      	ldrb	r3, [r7, #2]
 800127c:	4413      	add	r3, r2
 800127e:	b2d9      	uxtb	r1, r3
 8001280:	7c3a      	ldrb	r2, [r7, #16]
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f001 f87d 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8001290:	7d3b      	ldrb	r3, [r7, #20]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d017      	beq.n	80012ca <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 800129a:	787a      	ldrb	r2, [r7, #1]
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	b2d9      	uxtb	r1, r3
 80012a2:	7c3a      	ldrb	r2, [r7, #16]
 80012a4:	78bb      	ldrb	r3, [r7, #2]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f001 f86c 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 80012b2:	787a      	ldrb	r2, [r7, #1]
 80012b4:	78bb      	ldrb	r3, [r7, #2]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b2d9      	uxtb	r1, r3
 80012ba:	7c3a      	ldrb	r2, [r7, #16]
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f001 f860 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80012ca:	7d3b      	ldrb	r3, [r7, #20]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d017      	beq.n	8001304 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80012d4:	787a      	ldrb	r2, [r7, #1]
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	4413      	add	r3, r2
 80012da:	b2d9      	uxtb	r1, r3
 80012dc:	7c3a      	ldrb	r2, [r7, #16]
 80012de:	78bb      	ldrb	r3, [r7, #2]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f001 f84f 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80012ec:	787a      	ldrb	r2, [r7, #1]
 80012ee:	78bb      	ldrb	r3, [r7, #2]
 80012f0:	4413      	add	r3, r2
 80012f2:	b2d9      	uxtb	r1, r3
 80012f4:	7c3a      	ldrb	r2, [r7, #16]
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	4413      	add	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f001 f843 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001304:	7d3b      	ldrb	r3, [r7, #20]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d017      	beq.n	800133e <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 800130e:	787a      	ldrb	r2, [r7, #1]
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	b2d9      	uxtb	r1, r3
 8001316:	7c3a      	ldrb	r2, [r7, #16]
 8001318:	78bb      	ldrb	r3, [r7, #2]
 800131a:	4413      	add	r3, r2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f001 f832 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8001326:	787a      	ldrb	r2, [r7, #1]
 8001328:	78bb      	ldrb	r3, [r7, #2]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b2d9      	uxtb	r1, r3
 800132e:	7c3a      	ldrb	r2, [r7, #16]
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	4413      	add	r3, r2
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f001 f826 	bl	800238a <u8g2_DrawPixel>
    }
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af02      	add	r7, sp, #8
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	4608      	mov	r0, r1
 8001350:	4611      	mov	r1, r2
 8001352:	461a      	mov	r2, r3
 8001354:	4603      	mov	r3, r0
 8001356:	70fb      	strb	r3, [r7, #3]
 8001358:	460b      	mov	r3, r1
 800135a:	70bb      	strb	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	787b      	ldrb	r3, [r7, #1]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8001376:	7b7a      	ldrb	r2, [r7, #13]
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 8001380:	7b7b      	ldrb	r3, [r7, #13]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	737b      	strb	r3, [r7, #13]
    x = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	733b      	strb	r3, [r7, #12]
    y = rad;
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8001390:	78f8      	ldrb	r0, [r7, #3]
 8001392:	7afa      	ldrb	r2, [r7, #11]
 8001394:	7b39      	ldrb	r1, [r7, #12]
 8001396:	7e3b      	ldrb	r3, [r7, #24]
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	78bb      	ldrb	r3, [r7, #2]
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4603      	mov	r3, r0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff4b 	bl	800123c <u8g2_draw_circle_section>
    
    while ( x < y )
 80013a6:	e026      	b.n	80013f6 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 80013a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0b      	blt.n	80013c8 <u8g2_draw_circle+0x82>
      {
        y--;
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 80013b6:	7b7b      	ldrb	r3, [r7, #13]
 80013b8:	3302      	adds	r3, #2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	4413      	add	r3, r2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	3302      	adds	r3, #2
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	4413      	add	r3, r2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 80013e0:	78f8      	ldrb	r0, [r7, #3]
 80013e2:	7afa      	ldrb	r2, [r7, #11]
 80013e4:	7b39      	ldrb	r1, [r7, #12]
 80013e6:	7e3b      	ldrb	r3, [r7, #24]
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	78bb      	ldrb	r3, [r7, #2]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4603      	mov	r3, r0
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff23 	bl	800123c <u8g2_draw_circle_section>
    while ( x < y )
 80013f6:	7b3a      	ldrb	r2, [r7, #12]
 80013f8:	7afb      	ldrb	r3, [r7, #11]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3d4      	bcc.n	80013a8 <u8g2_draw_circle+0x62>
    }
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001406:	b590      	push	{r4, r7, lr}
 8001408:	b085      	sub	sp, #20
 800140a:	af02      	add	r7, sp, #8
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	4608      	mov	r0, r1
 8001410:	4611      	mov	r1, r2
 8001412:	461a      	mov	r2, r3
 8001414:	4603      	mov	r3, r0
 8001416:	70fb      	strb	r3, [r7, #3]
 8001418:	460b      	mov	r3, r1
 800141a:	70bb      	strb	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8001420:	78fa      	ldrb	r2, [r7, #3]
 8001422:	787b      	ldrb	r3, [r7, #1]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	b2d9      	uxtb	r1, r3
 8001428:	78ba      	ldrb	r2, [r7, #2]
 800142a:	787b      	ldrb	r3, [r7, #1]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	b2d8      	uxtb	r0, r3
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	787b      	ldrb	r3, [r7, #1]
 8001434:	4413      	add	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	b2dc      	uxtb	r4, r3
 800143c:	78ba      	ldrb	r2, [r7, #2]
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	4413      	add	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	3301      	adds	r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	4623      	mov	r3, r4
 800144c:	4602      	mov	r2, r0
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f001 f817 	bl	8002482 <u8g2_IsIntersection>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 800145a:	7878      	ldrb	r0, [r7, #1]
 800145c:	78ba      	ldrb	r2, [r7, #2]
 800145e:	78f9      	ldrb	r1, [r7, #3]
 8001460:	7e3b      	ldrb	r3, [r7, #24]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4603      	mov	r3, r0
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff6d 	bl	8001346 <u8g2_draw_circle>
 800146c:	e000      	b.n	8001470 <u8g2_DrawCircle+0x6a>
      return;
 800146e:	bf00      	nop
}
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
	...

08001478 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2208      	movs	r2, #8
 8001484:	701a      	strb	r2, [r3, #0]
  return buf;
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000294 	.word	0x20000294

08001498 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 80014ae:	490c      	ldr	r1, [pc, #48]	; (80014e0 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f001 feb7 	bl	8003224 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80014b6:	f107 0313 	add.w	r3, r7, #19
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffdc 	bl	8001478 <u8g2_m_16_8_f>
 80014c0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80014c2:	7cfa      	ldrb	r2, [r7, #19]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 80014ca:	6979      	ldr	r1, [r7, #20]
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f001 f8c0 	bl	8002652 <u8g2_SetupBuffer>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08002de9 	.word	0x08002de9
 80014e0:	08002f85 	.word	0x08002f85
 80014e4:	080024d9 	.word	0x080024d9

080014e8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	81fb      	strh	r3, [r7, #14]
    font++;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3301      	adds	r3, #1
 8001528:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b29a      	uxth	r2, r3
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	4413      	add	r3, r2
 800153a:	81fb      	strh	r3, [r7, #14]
    return pos;
 800153c:	89fb      	ldrh	r3, [r7, #14]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001552:	2100      	movs	r1, #0
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f7ff ffc7 	bl	80014e8 <u8g2_font_get_byte>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001562:	2101      	movs	r1, #1
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	f7ff ffbf 	bl	80014e8 <u8g2_font_get_byte>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001572:	2102      	movs	r1, #2
 8001574:	6838      	ldr	r0, [r7, #0]
 8001576:	f7ff ffb7 	bl	80014e8 <u8g2_font_get_byte>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001582:	2103      	movs	r1, #3
 8001584:	6838      	ldr	r0, [r7, #0]
 8001586:	f7ff ffaf 	bl	80014e8 <u8g2_font_get_byte>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001592:	2104      	movs	r1, #4
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7ff ffa7 	bl	80014e8 <u8g2_font_get_byte>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80015a2:	2105      	movs	r1, #5
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7ff ff9f 	bl	80014e8 <u8g2_font_get_byte>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80015b2:	2106      	movs	r1, #6
 80015b4:	6838      	ldr	r0, [r7, #0]
 80015b6:	f7ff ff97 	bl	80014e8 <u8g2_font_get_byte>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80015c2:	2107      	movs	r1, #7
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f7ff ff8f 	bl	80014e8 <u8g2_font_get_byte>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80015d2:	2108      	movs	r1, #8
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f7ff ff87 	bl	80014e8 <u8g2_font_get_byte>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80015e2:	2109      	movs	r1, #9
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f7ff ff7f 	bl	80014e8 <u8g2_font_get_byte>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80015f2:	210a      	movs	r1, #10
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7ff ff77 	bl	80014e8 <u8g2_font_get_byte>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001602:	210b      	movs	r1, #11
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f7ff ff6f 	bl	80014e8 <u8g2_font_get_byte>
 800160a:	4603      	mov	r3, r0
 800160c:	b25a      	sxtb	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001612:	210c      	movs	r1, #12
 8001614:	6838      	ldr	r0, [r7, #0]
 8001616:	f7ff ff67 	bl	80014e8 <u8g2_font_get_byte>
 800161a:	4603      	mov	r3, r0
 800161c:	b25a      	sxtb	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001622:	210d      	movs	r1, #13
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f7ff ff5f 	bl	80014e8 <u8g2_font_get_byte>
 800162a:	4603      	mov	r3, r0
 800162c:	b25a      	sxtb	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001632:	210e      	movs	r1, #14
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f7ff ff57 	bl	80014e8 <u8g2_font_get_byte>
 800163a:	4603      	mov	r3, r0
 800163c:	b25a      	sxtb	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001642:	210f      	movs	r1, #15
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f7ff ff4f 	bl	80014e8 <u8g2_font_get_byte>
 800164a:	4603      	mov	r3, r0
 800164c:	b25a      	sxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001652:	2110      	movs	r1, #16
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f7ff ff47 	bl	80014e8 <u8g2_font_get_byte>
 800165a:	4603      	mov	r3, r0
 800165c:	b25a      	sxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001662:	2111      	movs	r1, #17
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	f7ff ff50 	bl	800150a <u8g2_font_get_word>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001672:	2113      	movs	r1, #19
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7ff ff48 	bl	800150a <u8g2_font_get_word>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001682:	2115      	movs	r1, #21
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f7ff ff40 	bl	800150a <u8g2_font_get_word>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	82da      	strh	r2, [r3, #22]
#endif
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7a9b      	ldrb	r3, [r3, #10]
 80016aa:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	7b7b      	ldrb	r3, [r7, #13]
 80016b8:	fa42 f303 	asr.w	r3, r2, r3
 80016bc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80016be:	7b7b      	ldrb	r3, [r7, #13]
 80016c0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80016c2:	7bba      	ldrb	r2, [r7, #14]
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	4413      	add	r3, r2
 80016c8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	2b07      	cmp	r3, #7
 80016ce:	d91a      	bls.n	8001706 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80016d4:	7b3a      	ldrb	r2, [r7, #12]
 80016d6:	7b7b      	ldrb	r3, [r7, #13]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	7b3b      	ldrb	r3, [r7, #12]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	3b08      	subs	r3, #8
 8001704:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	4013      	ands	r3, r2
 800171a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7bba      	ldrb	r2, [r7, #14]
 8001720:	729a      	strb	r2, [r3, #10]
  return val;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	4619      	mov	r1, r3
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffab 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001748:	2301      	movs	r3, #1
 800174a:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	3b01      	subs	r3, #1
 8001750:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001752:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	73fb      	strb	r3, [r7, #15]
  return v;
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001774:	b490      	push	{r4, r7}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4623      	mov	r3, r4
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	4603      	mov	r3, r0
 8001788:	71bb      	strb	r3, [r7, #6]
 800178a:	460b      	mov	r3, r1
 800178c:	717b      	strb	r3, [r7, #5]
 800178e:	4613      	mov	r3, r2
 8001790:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001792:	793b      	ldrb	r3, [r7, #4]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d008      	beq.n	80017aa <u8g2_add_vector_y+0x36>
 8001798:	2b02      	cmp	r3, #2
 800179a:	d00b      	beq.n	80017b4 <u8g2_add_vector_y+0x40>
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10e      	bne.n	80017be <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 80017a0:	797a      	ldrb	r2, [r7, #5]
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	4413      	add	r3, r2
 80017a6:	71fb      	strb	r3, [r7, #7]
      break;
 80017a8:	e00e      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 80017aa:	79ba      	ldrb	r2, [r7, #6]
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4413      	add	r3, r2
 80017b0:	71fb      	strb	r3, [r7, #7]
      break;
 80017b2:	e009      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 80017b4:	797b      	ldrb	r3, [r7, #5]
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	71fb      	strb	r3, [r7, #7]
      break;
 80017bc:	e004      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	79fa      	ldrb	r2, [r7, #7]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	71fb      	strb	r3, [r7, #7]
      break;      
 80017c6:	bf00      	nop
  }
  return dy;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc90      	pop	{r4, r7}
 80017d2:	4770      	bx	lr

080017d4 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80017d4:	b490      	push	{r4, r7}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4604      	mov	r4, r0
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4623      	mov	r3, r4
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	4603      	mov	r3, r0
 80017e8:	71bb      	strb	r3, [r7, #6]
 80017ea:	460b      	mov	r3, r1
 80017ec:	717b      	strb	r3, [r7, #5]
 80017ee:	4613      	mov	r3, r2
 80017f0:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80017f2:	793b      	ldrb	r3, [r7, #4]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d008      	beq.n	800180a <u8g2_add_vector_x+0x36>
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d00b      	beq.n	8001814 <u8g2_add_vector_x+0x40>
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10e      	bne.n	800181e <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8001800:	79ba      	ldrb	r2, [r7, #6]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4413      	add	r3, r2
 8001806:	71fb      	strb	r3, [r7, #7]
      break;
 8001808:	e00e      	b.n	8001828 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 800180a:	797b      	ldrb	r3, [r7, #5]
 800180c:	79fa      	ldrb	r2, [r7, #7]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	71fb      	strb	r3, [r7, #7]
      break;
 8001812:	e009      	b.n	8001828 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	71fb      	strb	r3, [r7, #7]
      break;
 800181c:	e004      	b.n	8001828 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 800181e:	797a      	ldrb	r2, [r7, #5]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4413      	add	r3, r2
 8001824:	71fb      	strb	r3, [r7, #7]
      break;      
 8001826:	bf00      	nop
  }
  return dx;
 8001828:	79fb      	ldrb	r3, [r7, #7]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bc90      	pop	{r4, r7}
 8001832:	4770      	bx	lr

08001834 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af02      	add	r7, sp, #8
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
 8001840:	4613      	mov	r3, r2
 8001842:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3354      	adds	r3, #84	; 0x54
 8001848:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001854:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800185c:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001864:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	7d7b      	ldrb	r3, [r7, #21]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001872:	7dfa      	ldrb	r2, [r7, #23]
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	429a      	cmp	r2, r3
 8001878:	d201      	bcs.n	800187e <u8g2_font_decode_len+0x4a>
      current = cnt;
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	795b      	ldrb	r3, [r3, #5]
 8001888:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800188a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800188e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	7b9b      	ldrb	r3, [r3, #14]
 8001896:	7bb8      	ldrb	r0, [r7, #14]
 8001898:	f7ff ff9c 	bl	80017d4 <u8g2_add_vector_x>
 800189c:	4603      	mov	r3, r0
 800189e:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80018a0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80018a4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	7b9b      	ldrb	r3, [r3, #14]
 80018ac:	7b78      	ldrb	r0, [r7, #13]
 80018ae:	f7ff ff61 	bl	8001774 <u8g2_add_vector_y>
 80018b2:	4603      	mov	r3, r0
 80018b4:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00f      	beq.n	80018dc <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	7b1a      	ldrb	r2, [r3, #12]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	7b9b      	ldrb	r3, [r3, #14]
 80018ca:	7db8      	ldrb	r0, [r7, #22]
 80018cc:	7b7a      	ldrb	r2, [r7, #13]
 80018ce:	7bb9      	ldrb	r1, [r7, #14]
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	4603      	mov	r3, r0
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fca1 	bl	800221c <u8g2_DrawHVLine>
 80018da:	e012      	b.n	8001902 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	7adb      	ldrb	r3, [r3, #11]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10e      	bne.n	8001902 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	7b5a      	ldrb	r2, [r3, #13]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	7b9b      	ldrb	r3, [r3, #14]
 80018f2:	7db8      	ldrb	r0, [r7, #22]
 80018f4:	7b7a      	ldrb	r2, [r7, #13]
 80018f6:	7bb9      	ldrb	r1, [r7, #14]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	4603      	mov	r3, r0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fc8d 	bl	800221c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001902:	7dfa      	ldrb	r2, [r7, #23]
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	429a      	cmp	r2, r3
 8001908:	d309      	bcc.n	800191e <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 800190a:	7dfa      	ldrb	r2, [r7, #23]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	757b      	strb	r3, [r7, #21]
    ly++;
 8001916:	7d3b      	ldrb	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800191c:	e79f      	b.n	800185e <u8g2_font_decode_len+0x2a>
      break;
 800191e:	bf00      	nop
  }
  lx += cnt;
 8001920:	7d7a      	ldrb	r2, [r7, #21]
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	4413      	add	r3, r2
 8001926:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001928:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001930:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	71da      	strb	r2, [r3, #7]
  
}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3354      	adds	r3, #84	; 0x54
 800194e:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001962:	4619      	mov	r1, r3
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fe98 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 800196a:	4603      	mov	r3, r0
 800196c:	b25a      	sxtb	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001978:	4619      	mov	r1, r3
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fe8d 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001980:	4603      	mov	r3, r0
 8001982:	b25a      	sxtb	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	7b1b      	ldrb	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	735a      	strb	r2, [r3, #13]
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3354      	adds	r3, #84	; 0x54
 80019be:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80019c0:	6839      	ldr	r1, [r7, #0]
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffbc 	bl	8001940 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80019ce:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80019d6:	4619      	mov	r1, r3
 80019d8:	6938      	ldr	r0, [r7, #16]
 80019da:	f7ff fea8 	bl	800172e <u8g2_font_decode_get_signed_bits>
 80019de:	4603      	mov	r3, r0
 80019e0:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80019e8:	4619      	mov	r1, r3
 80019ea:	6938      	ldr	r0, [r7, #16]
 80019ec:	f7ff fe9f 	bl	800172e <u8g2_font_decode_get_signed_bits>
 80019f0:	4603      	mov	r3, r0
 80019f2:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80019fa:	4619      	mov	r1, r3
 80019fc:	6938      	ldr	r0, [r7, #16]
 80019fe:	f7ff fe96 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001a02:	4603      	mov	r3, r0
 8001a04:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f340 80cf 	ble.w	8001bb0 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	7918      	ldrb	r0, [r3, #4]
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	7b7b      	ldrb	r3, [r7, #13]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	425b      	negs	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	b25a      	sxtb	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	7b9b      	ldrb	r3, [r3, #14]
 8001a28:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001a2c:	f7ff fed2 	bl	80017d4 <u8g2_add_vector_x>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	7958      	ldrb	r0, [r3, #5]
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	7b7b      	ldrb	r3, [r7, #13]
 8001a40:	4413      	add	r3, r2
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	425b      	negs	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	b25a      	sxtb	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	7b9b      	ldrb	r3, [r3, #14]
 8001a4e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001a52:	f7ff fe8f 	bl	8001774 <u8g2_add_vector_y>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	795b      	ldrb	r3, [r3, #5]
 8001a68:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	7b9b      	ldrb	r3, [r3, #14]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d852      	bhi.n	8001b20 <u8g2_font_decode_glyph+0x170>
 8001a7a:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <u8g2_font_decode_glyph+0xd0>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001aa9 	.word	0x08001aa9
 8001a88:	08001acd 	.word	0x08001acd
 8001a8c:	08001afd 	.word	0x08001afd
      {
	case 0:
	    x1 += decode->glyph_width;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	7dbb      	ldrb	r3, [r7, #22]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	7d3b      	ldrb	r3, [r7, #20]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	753b      	strb	r3, [r7, #20]
	    break;
 8001aa6:	e03b      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	7dfa      	ldrb	r2, [r7, #23]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001ab6:	7dbb      	ldrb	r3, [r7, #22]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	7d3b      	ldrb	r3, [r7, #20]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	753b      	strb	r3, [r7, #20]
	    break;
 8001aca:	e029      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	7dfa      	ldrb	r2, [r7, #23]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	3301      	adds	r3, #1
 8001ade:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001ae0:	7dbb      	ldrb	r3, [r7, #22]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	7d7a      	ldrb	r2, [r7, #21]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001aee:	7d7b      	ldrb	r3, [r7, #21]
 8001af0:	3301      	adds	r3, #1
 8001af2:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001af4:	7d3b      	ldrb	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001afa:	e011      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	7dbb      	ldrb	r3, [r7, #22]
 8001b00:	4413      	add	r3, r2
 8001b02:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	7d7a      	ldrb	r2, [r7, #21]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b12:	7d7b      	ldrb	r3, [r7, #21]
 8001b14:	3301      	adds	r3, #1
 8001b16:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001b18:	7d3b      	ldrb	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001b1e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001b20:	7db8      	ldrb	r0, [r7, #22]
 8001b22:	7d7a      	ldrb	r2, [r7, #21]
 8001b24:	7df9      	ldrb	r1, [r7, #23]
 8001b26:	7d3b      	ldrb	r3, [r7, #20]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fca8 	bl	8002482 <u8g2_IsIntersection>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <u8g2_font_decode_glyph+0x18e>
	return d;
 8001b38:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001b3c:	e03a      	b.n	8001bb4 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2200      	movs	r2, #0
 8001b42:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2200      	movs	r2, #0
 8001b48:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001b50:	4619      	mov	r1, r3
 8001b52:	6938      	ldr	r0, [r7, #16]
 8001b54:	f7ff fda1 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001b62:	4619      	mov	r1, r3
 8001b64:	6938      	ldr	r0, [r7, #16]
 8001b66:	f7ff fd98 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	2200      	movs	r2, #0
 8001b72:	4619      	mov	r1, r3
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fe5d 	bl	8001834 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001b7a:	7abb      	ldrb	r3, [r7, #10]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fe57 	bl	8001834 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001b86:	2101      	movs	r1, #1
 8001b88:	6938      	ldr	r0, [r7, #16]
 8001b8a:	f7ff fd86 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ec      	bne.n	8001b6e <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001b9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dd00      	ble.n	8001ba4 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001ba2:	e7d2      	b.n	8001b4a <u8g2_font_decode_glyph+0x19a>
	break;
 8001ba4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	7b1a      	ldrb	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8001bb0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3317      	adds	r3, #23
 8001bd2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	2bff      	cmp	r3, #255	; 0xff
 8001bd8:	d82a      	bhi.n	8001c30 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	2b60      	cmp	r3, #96	; 0x60
 8001bde:	d907      	bls.n	8001bf0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001be6:	461a      	mov	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e009      	b.n	8001c04 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d906      	bls.n	8001c04 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d04e      	beq.n	8001cac <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	887a      	ldrh	r2, [r7, #2]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d102      	bne.n	8001c20 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	e049      	b.n	8001cb4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c2e:	e7e9      	b.n	8001c04 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001c36:	461a      	mov	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001c42:	2100      	movs	r1, #0
 8001c44:	6938      	ldr	r0, [r7, #16]
 8001c46:	f7ff fc60 	bl	800150a <u8g2_font_get_word>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001c54:	2102      	movs	r1, #2
 8001c56:	6938      	ldr	r0, [r7, #16]
 8001c58:	f7ff fc57 	bl	800150a <u8g2_font_get_word>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3304      	adds	r3, #4
 8001c64:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001c66:	89fa      	ldrh	r2, [r7, #14]
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3e9      	bcc.n	8001c42 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001c74:	89fb      	ldrh	r3, [r7, #14]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001c88:	89fb      	ldrh	r3, [r7, #14]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001c8e:	89fa      	ldrh	r2, [r7, #14]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d102      	bne.n	8001c9c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3303      	adds	r3, #3
 8001c9a:	e00b      	b.n	8001cb4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001caa:	e7e0      	b.n	8001c6e <u8g2_font_get_glyph_data+0xb2>
	break;
 8001cac:	bf00      	nop
 8001cae:	e000      	b.n	8001cb2 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001cb0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	4608      	mov	r0, r1
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4603      	mov	r3, r0
 8001ccc:	70fb      	strb	r3, [r7, #3]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70bb      	strb	r3, [r7, #2]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	78ba      	ldrb	r2, [r7, #2]
 8001ce6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001cea:	883b      	ldrh	r3, [r7, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff64 	bl	8001bbc <u8g2_font_get_glyph_data>
 8001cf4:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fe56 	bl	80019b0 <u8g2_font_decode_glyph>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff4a 	bl	8001bbc <u8g2_font_get_glyph_data>
 8001d28:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001d30:	2300      	movs	r3, #0
 8001d32:	e027      	b.n	8001d84 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fe02 	bl	8001940 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff fcef 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001d66:	4619      	mov	r1, r3
 8001d68:	4610      	mov	r0, r2
 8001d6a:	f7ff fce0 	bl	800172e <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f7ff fcd6 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001d82:	4603      	mov	r3, r0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
	...

08001dac <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	70fb      	strb	r3, [r7, #3]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70bb      	strb	r3, [r7, #2]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d833      	bhi.n	8001e38 <u8g2_DrawGlyph+0x8c>
 8001dd0:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <u8g2_DrawGlyph+0x2c>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	08001dfd 	.word	0x08001dfd
 8001de0:	08001e11 	.word	0x08001e11
 8001de4:	08001e25 	.word	0x08001e25
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	78bb      	ldrb	r3, [r7, #2]
 8001df6:	4413      	add	r3, r2
 8001df8:	70bb      	strb	r3, [r7, #2]
      break;
 8001dfa:	e01d      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	70fb      	strb	r3, [r7, #3]
      break;
 8001e0e:	e013      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	78bb      	ldrb	r3, [r7, #2]
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	70bb      	strb	r3, [r7, #2]
      break;
 8001e22:	e009      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	4413      	add	r3, r2
 8001e34:	70fb      	strb	r3, [r7, #3]
      break;
 8001e36:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001e38:	883b      	ldrh	r3, [r7, #0]
 8001e3a:	78ba      	ldrb	r2, [r7, #2]
 8001e3c:	78f9      	ldrb	r1, [r7, #3]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff3c 	bl	8001cbc <u8g2_font_draw_glyph>
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop

08001e50 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	72fb      	strb	r3, [r7, #11]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fec2 	bl	8002bec <u8x8_utf8_init>
  sum = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	4611      	mov	r1, r2
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	4798      	blx	r3
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001e7e:	8abb      	ldrh	r3, [r7, #20]
 8001e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d038      	beq.n	8001efa <u8g2_draw_string+0xaa>
      break;
    str++;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001e8e:	8abb      	ldrh	r3, [r7, #20]
 8001e90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d0e9      	beq.n	8001e6c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001e98:	8abb      	ldrh	r3, [r7, #20]
 8001e9a:	7aba      	ldrb	r2, [r7, #10]
 8001e9c:	7af9      	ldrb	r1, [r7, #11]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ff84 	bl	8001dac <u8g2_DrawGlyph>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d81e      	bhi.n	8001ef0 <u8g2_draw_string+0xa0>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <u8g2_draw_string+0x68>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001ed3 	.word	0x08001ed3
 8001ec0:	08001edd 	.word	0x08001edd
 8001ec4:	08001ee7 	.word	0x08001ee7
      {
	case 0:
	  x += delta;
 8001ec8:	7afa      	ldrb	r2, [r7, #11]
 8001eca:	7cfb      	ldrb	r3, [r7, #19]
 8001ecc:	4413      	add	r3, r2
 8001ece:	72fb      	strb	r3, [r7, #11]
	  break;
 8001ed0:	e00e      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001ed2:	7aba      	ldrb	r2, [r7, #10]
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	72bb      	strb	r3, [r7, #10]
	  break;
 8001eda:	e009      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001edc:	7afa      	ldrb	r2, [r7, #11]
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	72fb      	strb	r3, [r7, #11]
	  break;
 8001ee4:	e004      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001ee6:	7aba      	ldrb	r2, [r7, #10]
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	72bb      	strb	r3, [r7, #10]
	  break;
 8001eee:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001ef0:	7dfa      	ldrb	r2, [r7, #23]
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001ef8:	e7b8      	b.n	8001e6c <u8g2_draw_string+0x1c>
      break;
 8001efa:	bf00      	nop
    }
  }
  return sum;
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	72fb      	strb	r3, [r7, #11]
 8001f16:	4613      	mov	r3, r2
 8001f18:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <u8g2_DrawStr+0x30>)
 8001f1e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001f20:	7aba      	ldrb	r2, [r7, #10]
 8001f22:	7af9      	ldrb	r1, [r7, #11]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff ff92 	bl	8001e50 <u8g2_draw_string>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	08002c07 	.word	0x08002c07

08001f3c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05d      	beq.n	8002008 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d04d      	beq.n	800200a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d11c      	bne.n	8001fb2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8001f84:	429a      	cmp	r2, r3
 8001f86:	da05      	bge.n	8001f94 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dd32      	ble.n	800200a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001fb0:	e02b      	b.n	800200a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001fb8:	461a      	mov	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001fc8:	440b      	add	r3, r1
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	da0d      	bge.n	8001fea <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	b25a      	sxtb	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dd07      	ble.n	800200a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002006:	e000      	b.n	800200a <u8g2_UpdateRefHeight+0xce>
    return;
 8002008:	bf00      	nop
  }  
}
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
	...

08002028 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a03      	ldr	r2, [pc, #12]	; (8002040 <u8g2_SetFontPosBaseline+0x18>)
 8002034:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	08002013 	.word	0x08002013

08002044 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d00b      	beq.n	8002070 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3364      	adds	r3, #100	; 0x64
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fa6f 	bl	8001548 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff66 	bl	8001f3c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fdae 	bl	8002bec <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	4611      	mov	r1, r2
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 80020aa:	89bb      	ldrh	r3, [r7, #12]
 80020ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <u8g2_string_width+0x64>
      break;
    str++;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 80020ba:	89bb      	ldrh	r3, [r7, #12]
 80020bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d0e9      	beq.n	8002098 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 80020c4:	89bb      	ldrh	r3, [r7, #12]
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fe22 	bl	8001d12 <u8g2_GetGlyphWidth>
 80020ce:	4603      	mov	r3, r0
 80020d0:	73bb      	strb	r3, [r7, #14]
      w += dx;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	4413      	add	r3, r2
 80020d8:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80020da:	e7dd      	b.n	8002098 <u8g2_string_width+0x20>
      break;
 80020dc:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d011      	beq.n	800210c <u8g2_string_width+0x94>
  {
    w -= dx;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	4413      	add	r3, r2
 80020fc:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002104:	b2da      	uxtb	r2, r3
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	4413      	add	r3, r2
 800210a:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a05      	ldr	r2, [pc, #20]	; (800213c <u8g2_GetStrWidth+0x24>)
 8002126:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa4 	bl	8002078 <u8g2_string_width>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	08002c07 	.word	0x08002c07

08002140 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	4611      	mov	r1, r2
 800214c:	461a      	mov	r2, r3
 800214e:	460b      	mov	r3, r1
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	4613      	mov	r3, r2
 8002154:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	7dbb      	ldrb	r3, [r7, #22]
 8002166:	4413      	add	r3, r2
 8002168:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800216a:	7dfa      	ldrb	r2, [r7, #23]
 800216c:	7dbb      	ldrb	r3, [r7, #22]
 800216e:	429a      	cmp	r2, r3
 8002170:	d90b      	bls.n	800218a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002172:	7dfa      	ldrb	r2, [r7, #23]
 8002174:	79bb      	ldrb	r3, [r7, #6]
 8002176:	429a      	cmp	r2, r3
 8002178:	d205      	bcs.n	8002186 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	75bb      	strb	r3, [r7, #22]
      b--;
 800217e:	7dbb      	ldrb	r3, [r7, #22]
 8002180:	3b01      	subs	r3, #1
 8002182:	75bb      	strb	r3, [r7, #22]
 8002184:	e001      	b.n	800218a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800218a:	7dfa      	ldrb	r2, [r7, #23]
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	429a      	cmp	r2, r3
 8002190:	d301      	bcc.n	8002196 <u8g2_clip_intersection2+0x56>
    return 0;
 8002192:	2300      	movs	r3, #0
 8002194:	e01c      	b.n	80021d0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002196:	7dba      	ldrb	r2, [r7, #22]
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	429a      	cmp	r2, r3
 800219c:	d801      	bhi.n	80021a2 <u8g2_clip_intersection2+0x62>
    return 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	e016      	b.n	80021d0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80021a2:	7dfa      	ldrb	r2, [r7, #23]
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d201      	bcs.n	80021ae <u8g2_clip_intersection2+0x6e>
    a = c;
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80021ae:	7dba      	ldrb	r2, [r7, #22]
 80021b0:	79bb      	ldrb	r3, [r7, #6]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d901      	bls.n	80021ba <u8g2_clip_intersection2+0x7a>
    b = d;
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	7dfa      	ldrb	r2, [r7, #23]
 80021be:	701a      	strb	r2, [r3, #0]
  b -= a;
 80021c0:	7dba      	ldrb	r2, [r7, #22]
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	75bb      	strb	r3, [r7, #22]
  *len = b;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	7dba      	ldrb	r2, [r7, #22]
 80021cc:	701a      	strb	r2, [r3, #0]
  return 1;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80021da:	b590      	push	{r4, r7, lr}
 80021dc:	b085      	sub	sp, #20
 80021de:	af02      	add	r7, sp, #8
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	4608      	mov	r0, r1
 80021e4:	4611      	mov	r1, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	4603      	mov	r3, r0
 80021ea:	70fb      	strb	r3, [r7, #3]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70bb      	strb	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fa:	78ba      	ldrb	r2, [r7, #2]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002204:	7878      	ldrb	r0, [r7, #1]
 8002206:	78ba      	ldrb	r2, [r7, #2]
 8002208:	78f9      	ldrb	r1, [r7, #3]
 800220a:	7e3b      	ldrb	r3, [r7, #24]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4603      	mov	r3, r0
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	47a0      	blx	r4
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}

0800221c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b085      	sub	sp, #20
 8002220:	af02      	add	r7, sp, #8
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4603      	mov	r3, r0
 800222c:	70fb      	strb	r3, [r7, #3]
 800222e:	460b      	mov	r3, r1
 8002230:	70bb      	strb	r3, [r7, #2]
 8002232:	4613      	mov	r3, r2
 8002234:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d06d      	beq.n	800231c <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d06a      	beq.n	800231c <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002246:	787b      	ldrb	r3, [r7, #1]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d918      	bls.n	800227e <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800224c:	7e3b      	ldrb	r3, [r7, #24]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d109      	bne.n	8002266 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	70fb      	strb	r3, [r7, #3]
	  x++;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	3301      	adds	r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	70fb      	strb	r3, [r7, #3]
 8002264:	e00b      	b.n	800227e <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8002266:	7e3b      	ldrb	r3, [r7, #24]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d108      	bne.n	800227e <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800226c:	78ba      	ldrb	r2, [r7, #2]
 800226e:	787b      	ldrb	r3, [r7, #1]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	70bb      	strb	r3, [r7, #2]
	  y++;
 8002276:	78bb      	ldrb	r3, [r7, #2]
 8002278:	3301      	adds	r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800227e:	7e3b      	ldrb	r3, [r7, #24]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002286:	7e3b      	ldrb	r3, [r7, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d119      	bne.n	80022c0 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002292:	78bb      	ldrb	r3, [r7, #2]
 8002294:	429a      	cmp	r2, r3
 8002296:	d838      	bhi.n	800230a <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800229e:	78bb      	ldrb	r3, [r7, #2]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d934      	bls.n	800230e <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022b0:	1c79      	adds	r1, r7, #1
 80022b2:	1cf8      	adds	r0, r7, #3
 80022b4:	f7ff ff44 	bl	8002140 <u8g2_clip_intersection2>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d119      	bne.n	80022f2 <u8g2_DrawHVLine+0xd6>
	  return;
 80022be:	e02d      	b.n	800231c <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d822      	bhi.n	8002312 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d91e      	bls.n	8002316 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022e4:	1c79      	adds	r1, r7, #1
 80022e6:	1cb8      	adds	r0, r7, #2
 80022e8:	f7ff ff2a 	bl	8002140 <u8g2_clip_intersection2>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d013      	beq.n	800231a <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	689c      	ldr	r4, [r3, #8]
 80022f8:	78f9      	ldrb	r1, [r7, #3]
 80022fa:	78ba      	ldrb	r2, [r7, #2]
 80022fc:	7878      	ldrb	r0, [r7, #1]
 80022fe:	7e3b      	ldrb	r3, [r7, #24]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	4603      	mov	r3, r0
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	47a0      	blx	r4
 8002308:	e008      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800230a:	bf00      	nop
 800230c:	e006      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800230e:	bf00      	nop
 8002310:	e004      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 8002312:	bf00      	nop
 8002314:	e002      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800231a:	bf00      	nop
    }
}
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}

08002322 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af02      	add	r7, sp, #8
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	4608      	mov	r0, r1
 800232c:	4611      	mov	r1, r2
 800232e:	461a      	mov	r2, r3
 8002330:	4603      	mov	r3, r0
 8002332:	70fb      	strb	r3, [r7, #3]
 8002334:	460b      	mov	r3, r1
 8002336:	70bb      	strb	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800233c:	7878      	ldrb	r0, [r7, #1]
 800233e:	78ba      	ldrb	r2, [r7, #2]
 8002340:	78f9      	ldrb	r1, [r7, #3]
 8002342:	2300      	movs	r3, #0
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	4603      	mov	r3, r0
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff67 	bl	800221c <u8g2_DrawHVLine>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af02      	add	r7, sp, #8
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	4608      	mov	r0, r1
 8002360:	4611      	mov	r1, r2
 8002362:	461a      	mov	r2, r3
 8002364:	4603      	mov	r3, r0
 8002366:	70fb      	strb	r3, [r7, #3]
 8002368:	460b      	mov	r3, r1
 800236a:	70bb      	strb	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002370:	7878      	ldrb	r0, [r7, #1]
 8002372:	78ba      	ldrb	r2, [r7, #2]
 8002374:	78f9      	ldrb	r1, [r7, #3]
 8002376:	2301      	movs	r3, #1
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	4603      	mov	r3, r0
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff4d 	bl	800221c <u8g2_DrawHVLine>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af02      	add	r7, sp, #8
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	70fb      	strb	r3, [r7, #3]
 8002396:	4613      	mov	r3, r2
 8002398:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80023a0:	78ba      	ldrb	r2, [r7, #2]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d31a      	bcc.n	80023dc <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023ac:	78ba      	ldrb	r2, [r7, #2]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d216      	bcs.n	80023e0 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d312      	bcc.n	80023e4 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d20e      	bcs.n	80023e8 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80023ca:	78ba      	ldrb	r2, [r7, #2]
 80023cc:	78f9      	ldrb	r1, [r7, #3]
 80023ce:	2300      	movs	r3, #0
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff21 	bl	800221c <u8g2_DrawHVLine>
 80023da:	e006      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023dc:	bf00      	nop
 80023de:	e004      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e0:	bf00      	nop
 80023e2:	e002      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e4:	bf00      	nop
 80023e6:	e000      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e8:	bf00      	nop
}
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d903      	bls.n	8002412 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800241c:	b490      	push	{r4, r7}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4604      	mov	r4, r0
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4623      	mov	r3, r4
 800242c:	71fb      	strb	r3, [r7, #7]
 800242e:	4603      	mov	r3, r0
 8002430:	71bb      	strb	r3, [r7, #6]
 8002432:	460b      	mov	r3, r1
 8002434:	717b      	strb	r3, [r7, #5]
 8002436:	4613      	mov	r3, r2
 8002438:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800243a:	797a      	ldrb	r2, [r7, #5]
 800243c:	79bb      	ldrb	r3, [r7, #6]
 800243e:	429a      	cmp	r2, r3
 8002440:	d20d      	bcs.n	800245e <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002442:	793a      	ldrb	r2, [r7, #4]
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d901      	bls.n	800244e <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800244a:	2301      	movs	r3, #1
 800244c:	e014      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800244e:	797a      	ldrb	r2, [r7, #5]
 8002450:	793b      	ldrb	r3, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	d901      	bls.n	800245a <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002456:	2301      	movs	r3, #1
 8002458:	e00e      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800245a:	2300      	movs	r3, #0
 800245c:	e00c      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800245e:	793a      	ldrb	r2, [r7, #4]
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	429a      	cmp	r2, r3
 8002464:	d907      	bls.n	8002476 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002466:	797a      	ldrb	r2, [r7, #5]
 8002468:	793b      	ldrb	r3, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d901      	bls.n	8002472 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800246e:	2301      	movs	r3, #1
 8002470:	e002      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002476:	2300      	movs	r3, #0
    }
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bc90      	pop	{r4, r7}
 8002480:	4770      	bx	lr

08002482 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	4608      	mov	r0, r1
 800248c:	4611      	mov	r1, r2
 800248e:	461a      	mov	r2, r3
 8002490:	4603      	mov	r3, r0
 8002492:	70fb      	strb	r3, [r7, #3]
 8002494:	460b      	mov	r3, r1
 8002496:	70bb      	strb	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80024a8:	7c3b      	ldrb	r3, [r7, #16]
 80024aa:	78ba      	ldrb	r2, [r7, #2]
 80024ac:	f7ff ffb6 	bl	800241c <u8g2_is_intersection_decision_tree>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <u8g2_IsIntersection+0x38>
    return 0; 
 80024b6:	2300      	movs	r3, #0
 80024b8:	e00a      	b.n	80024d0 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 80024c6:	787b      	ldrb	r3, [r7, #1]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	f7ff ffa7 	bl	800241c <u8g2_is_intersection_decision_tree>
 80024ce:	4603      	mov	r3, r0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	4608      	mov	r0, r1
 80024e2:	4611      	mov	r1, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	70fb      	strb	r3, [r7, #3]
 80024ea:	460b      	mov	r3, r1
 80024ec:	70bb      	strb	r3, [r7, #2]
 80024ee:	4613      	mov	r3, r2
 80024f0:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80024f2:	78bb      	ldrb	r3, [r7, #2]
 80024f4:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8002502:	7c3a      	ldrb	r2, [r7, #16]
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800251a:	2b01      	cmp	r3, #1
 800251c:	d801      	bhi.n	8002522 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800251e:	7c3b      	ldrb	r3, [r7, #16]
 8002520:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800252c:	7c3b      	ldrb	r3, [r7, #16]
 800252e:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002530:	78bb      	ldrb	r3, [r7, #2]
 8002532:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8002534:	89fb      	ldrh	r3, [r7, #14]
 8002536:	f023 0307 	bic.w	r3, r3, #7
 800253a:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	7c1b      	ldrb	r3, [r3, #16]
 8002542:	b29b      	uxth	r3, r3
 8002544:	89fa      	ldrh	r2, [r7, #14]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4413      	add	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
  ptr += x;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4413      	add	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8002562:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d117      	bne.n	800259a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	7cbb      	ldrb	r3, [r7, #18]
 8002570:	4313      	orrs	r3, r2
 8002572:	b2da      	uxtb	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	7c7b      	ldrb	r3, [r7, #17]
 800257e:	4053      	eors	r3, r2
 8002580:	b2da      	uxtb	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
	len--;
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	3b01      	subs	r3, #1
 8002590:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8002592:	787b      	ldrb	r3, [r7, #1]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e8      	bne.n	800256a <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002598:	e039      	b.n	800260e <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	7cbb      	ldrb	r3, [r7, #18]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	7c7b      	ldrb	r3, [r7, #17]
 80025ae:	4053      	eors	r3, r2
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80025b6:	7cfb      	ldrb	r3, [r7, #19]
 80025b8:	3301      	adds	r3, #1
 80025ba:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	74fb      	strb	r3, [r7, #19]
      len--;
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d115      	bne.n	80025fc <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025d6:	461a      	mov	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4413      	add	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d801      	bhi.n	80025ec <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d008      	beq.n	8002608 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	747b      	strb	r3, [r7, #17]
 80025fa:	e005      	b.n	8002608 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80025fc:	7cbb      	ldrb	r3, [r7, #18]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8002602:	7c7b      	ldrb	r3, [r7, #17]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1c5      	bne.n	800259a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	22ff      	movs	r2, #255	; 0xff
 8002634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	22ff      	movs	r2, #255	; 0xff
 800263c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff ffaf 	bl	8002618 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff fcb4 	bl	8002028 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026e4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	7c1b      	ldrb	r3, [r3, #16]
 80026f8:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b1f      	cmp	r3, #31
 80026fe:	d901      	bls.n	8002704 <u8g2_update_dimension_common+0x34>
    t = 31;
 8002700:	231f      	movs	r3, #31
 8002702:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002718:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800272e:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002738:	4413      	add	r3, r2
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	7c52      	ldrb	r2, [r2, #17]
 800273e:	4293      	cmp	r3, r2
 8002740:	dd06      	ble.n	8002750 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	7c5a      	ldrb	r2, [r3, #17]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	4413      	add	r3, r2
 8002778:	b2da      	uxtb	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	22f0      	movs	r2, #240	; 0xf0
 8002784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	8a9b      	ldrh	r3, [r3, #20]
 800278c:	2bf0      	cmp	r3, #240	; 0xf0
 800278e:	d805      	bhi.n	800279c <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	8a9b      	ldrh	r3, [r3, #20]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	8adb      	ldrh	r3, [r3, #22]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af02      	add	r7, sp, #8
 80027b8:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4603      	mov	r3, r0
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fe53 	bl	8002482 <u8g2_IsIntersection>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80027ea:	e03b      	b.n	8002864 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002800:	429a      	cmp	r2, r3
 8002802:	d205      	bcs.n	8002810 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800281c:	429a      	cmp	r2, r3
 800281e:	d905      	bls.n	800282c <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002838:	429a      	cmp	r2, r3
 800283a:	d205      	bcs.n	8002848 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002854:	429a      	cmp	r2, r3
 8002856:	d905      	bls.n	8002864 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff2b 	bl	80026d0 <u8g2_update_dimension_common>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff7b 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff feff 	bl	80026d0 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	8a9b      	ldrh	r3, [r3, #20]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	8adb      	ldrh	r3, [r3, #22]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ff41 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fec5 	bl	80026d0 <u8g2_update_dimension_common>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297e:	429a      	cmp	r2, r3
 8002980:	d30a      	bcc.n	8002998 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff feff 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fe83 	bl	80026d0 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	8a9b      	ldrh	r3, [r3, #20]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	8adb      	ldrh	r3, [r3, #22]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d30a      	bcc.n	8002a24 <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff feaf 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	70fb      	strb	r3, [r7, #3]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	70bb      	strb	r3, [r7, #2]
 8002a72:	4613      	mov	r3, r2
 8002a74:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002a76:	7878      	ldrb	r0, [r7, #1]
 8002a78:	78ba      	ldrb	r2, [r7, #2]
 8002a7a:	78f9      	ldrb	r1, [r7, #3]
 8002a7c:	7c3b      	ldrb	r3, [r7, #16]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4603      	mov	r3, r0
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fba9 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	70fb      	strb	r3, [r7, #3]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70bb      	strb	r3, [r7, #2]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab4:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	78bb      	ldrb	r3, [r7, #2]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	73fb      	strb	r3, [r7, #15]
  xx--;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8002ac4:	7e3b      	ldrb	r3, [r7, #24]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8002aca:	7e3b      	ldrb	r3, [r7, #24]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d108      	bne.n	8002ae2 <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	787b      	ldrb	r3, [r7, #1]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	73fb      	strb	r3, [r7, #15]
    xx++;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	3301      	adds	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002ae2:	7878      	ldrb	r0, [r7, #1]
 8002ae4:	7bba      	ldrb	r2, [r7, #14]
 8002ae6:	7bf9      	ldrb	r1, [r7, #15]
 8002ae8:	7e3b      	ldrb	r3, [r7, #24]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4603      	mov	r3, r0
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fb73 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	70fb      	strb	r3, [r7, #3]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70bb      	strb	r3, [r7, #2]
 8002b12:	4613      	mov	r3, r2
 8002b14:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1c:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8002b1e:	7bba      	ldrb	r2, [r7, #14]
 8002b20:	78bb      	ldrb	r3, [r7, #2]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b2c:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002b36:	7e3b      	ldrb	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8002b3c:	7bbb      	ldrb	r3, [r7, #14]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	e009      	b.n	8002b60 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8002b4c:	7e3b      	ldrb	r3, [r7, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d106      	bne.n	8002b60 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002b58:	7bba      	ldrb	r2, [r7, #14]
 8002b5a:	787b      	ldrb	r3, [r7, #1]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002b60:	7878      	ldrb	r0, [r7, #1]
 8002b62:	7bba      	ldrb	r2, [r7, #14]
 8002b64:	7bf9      	ldrb	r1, [r7, #15]
 8002b66:	7e3b      	ldrb	r3, [r7, #24]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fb34 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af02      	add	r7, sp, #8
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	4608      	mov	r0, r1
 8002b84:	4611      	mov	r1, r2
 8002b86:	461a      	mov	r2, r3
 8002b88:	4603      	mov	r3, r0
 8002b8a:	70fb      	strb	r3, [r7, #3]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70bb      	strb	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8002b94:	78bb      	ldrb	r3, [r7, #2]
 8002b96:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b9e:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002ba8:	7e3b      	ldrb	r3, [r7, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	787b      	ldrb	r3, [r7, #1]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	73fb      	strb	r3, [r7, #15]
    yy++;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	763b      	strb	r3, [r7, #24]
 8002bc6:	e004      	b.n	8002bd2 <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002bd2:	7878      	ldrb	r0, [r7, #1]
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	7bb9      	ldrb	r1, [r7, #14]
 8002bd8:	7e3b      	ldrb	r3, [r7, #24]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	4603      	mov	r3, r0
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fafb 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <u8x8_ascii_next+0x18>
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	2b0a      	cmp	r3, #10
 8002c1c:	d102      	bne.n	8002c24 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c22:	e001      	b.n	8002c28 <u8x8_ascii_next+0x22>
  return b;
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	b29b      	uxth	r3, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002c32:	b590      	push	{r4, r7, lr}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691c      	ldr	r4, [r3, #16]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	2300      	movs	r3, #0
 8002c46:	2120      	movs	r1, #32
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	47a0      	blx	r4
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd90      	pop	{r4, r7, pc}

08002c56 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002c56:	b590      	push	{r4, r7, lr}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691c      	ldr	r4, [r3, #16]
 8002c68:	7afa      	ldrb	r2, [r7, #11]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2117      	movs	r1, #23
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	47a0      	blx	r4
 8002c72:	4603      	mov	r3, r0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd90      	pop	{r4, r7, pc}

08002c7c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002c88:	1cfb      	adds	r3, r7, #3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffe1 	bl	8002c56 <u8x8_byte_SendBytes>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002c9e:	b590      	push	{r4, r7, lr}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68dc      	ldr	r4, [r3, #12]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2115      	movs	r1, #21
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	47a0      	blx	r4
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd90      	pop	{r4, r7, pc}

08002cc2 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002cc2:	b590      	push	{r4, r7, lr}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68dc      	ldr	r4, [r3, #12]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2116      	movs	r1, #22
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	47a0      	blx	r4
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}

08002ce6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002ce6:	b590      	push	{r4, r7, lr}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68dc      	ldr	r4, [r3, #12]
 8002cf8:	7afa      	ldrb	r2, [r7, #11]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2117      	movs	r1, #23
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	47a0      	blx	r4
 8002d02:	4603      	mov	r3, r0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd90      	pop	{r4, r7, pc}

08002d0c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68dc      	ldr	r4, [r3, #12]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2118      	movs	r1, #24
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	47a0      	blx	r4
 8002d22:	4603      	mov	r3, r0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}

08002d2c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68dc      	ldr	r4, [r3, #12]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2119      	movs	r1, #25
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	47a0      	blx	r4
 8002d42:	4603      	mov	r3, r0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}

08002d4c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	73fb      	strb	r3, [r7, #15]
    data++;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b17      	cmp	r3, #23
 8002d66:	d017      	beq.n	8002d98 <u8x8_cad_SendSequence+0x4c>
 8002d68:	2b17      	cmp	r3, #23
 8002d6a:	dc02      	bgt.n	8002d72 <u8x8_cad_SendSequence+0x26>
 8002d6c:	2b15      	cmp	r3, #21
 8002d6e:	db37      	blt.n	8002de0 <u8x8_cad_SendSequence+0x94>
 8002d70:	e004      	b.n	8002d7c <u8x8_cad_SendSequence+0x30>
 8002d72:	2b19      	cmp	r3, #25
 8002d74:	dd1e      	ble.n	8002db4 <u8x8_cad_SendSequence+0x68>
 8002d76:	2bfe      	cmp	r3, #254	; 0xfe
 8002d78:	d024      	beq.n	8002dc4 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002d7a:	e031      	b.n	8002de0 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68dc      	ldr	r4, [r3, #12]
 8002d86:	7bba      	ldrb	r2, [r7, #14]
 8002d88:	7bf9      	ldrb	r1, [r7, #15]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	47a0      	blx	r4
	  data++;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	603b      	str	r3, [r7, #0]
	  break;
 8002d96:	e022      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002d9e:	f107 030e 	add.w	r3, r7, #14
 8002da2:	461a      	mov	r2, r3
 8002da4:	2101      	movs	r1, #1
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ff9d 	bl	8002ce6 <u8x8_cad_SendData>
	  data++;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	603b      	str	r3, [r7, #0]
	  break;
 8002db2:	e014      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68dc      	ldr	r4, [r3, #12]
 8002db8:	7bf9      	ldrb	r1, [r7, #15]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	47a0      	blx	r4
	  break;
 8002dc2:	e00c      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002dca:	7bbb      	ldrb	r3, [r7, #14]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2129      	movs	r1, #41	; 0x29
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f9d7 	bl	8003184 <u8x8_gpio_call>
	  data++;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	603b      	str	r3, [r7, #0]
	  break;
 8002ddc:	bf00      	nop
    cmd = *data;
 8002dde:	e7ba      	b.n	8002d56 <u8x8_cad_SendSequence+0xa>
	return;
 8002de0:	bf00      	nop
    }
  }
}
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	72fb      	strb	r3, [r7, #11]
 8002df6:	4613      	mov	r3, r2
 8002df8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002dfa:	7afb      	ldrb	r3, [r7, #11]
 8002dfc:	3b14      	subs	r3, #20
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d82f      	bhi.n	8002e62 <u8x8_cad_001+0x7a>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <u8x8_cad_001+0x20>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e51 	.word	0x08002e51
 8002e0c:	08002e21 	.word	0x08002e21
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08002e51 	.word	0x08002e51
 8002e1c:	08002e51 	.word	0x08002e51
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002e20:	2100      	movs	r1, #0
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff ff05 	bl	8002c32 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e28:	7abb      	ldrb	r3, [r7, #10]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff ff25 	bl	8002c7c <u8x8_byte_SendByte>
      break;
 8002e32:	e018      	b.n	8002e66 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002e34:	2100      	movs	r1, #0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff fefb 	bl	8002c32 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e3c:	7abb      	ldrb	r3, [r7, #10]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ff1b 	bl	8002c7c <u8x8_byte_SendByte>
      break;
 8002e46:	e00e      	b.n	8002e66 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002e48:	2101      	movs	r1, #1
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7ff fef1 	bl	8002c32 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691c      	ldr	r4, [r3, #16]
 8002e54:	7aba      	ldrb	r2, [r7, #10]
 8002e56:	7af9      	ldrb	r1, [r7, #11]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	47a0      	blx	r4
 8002e5e:	4603      	mov	r3, r0
 8002e60:	e002      	b.n	8002e68 <u8x8_cad_001+0x80>
    default:
      return 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <u8x8_cad_001+0x80>
  }
  return 1;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}

08002e70 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	72fb      	strb	r3, [r7, #11]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	2b0e      	cmp	r3, #14
 8002e86:	d05f      	beq.n	8002f48 <u8x8_d_st7565_common+0xd8>
 8002e88:	2b0f      	cmp	r3, #15
 8002e8a:	d002      	beq.n	8002e92 <u8x8_d_st7565_common+0x22>
 8002e8c:	2b0b      	cmp	r3, #11
 8002e8e:	d04e      	beq.n	8002f2e <u8x8_d_st7565_common+0xbe>
 8002e90:	e06c      	b.n	8002f6c <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff3a 	bl	8002d0c <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	795b      	ldrb	r3, [r3, #5]
 8002e9c:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8002e9e:	7dbb      	ldrb	r3, [r7, #22]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002eaa:	7dbb      	ldrb	r3, [r7, #22]
 8002eac:	4413      	add	r3, r2
 8002eae:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002eb0:	7dbb      	ldrb	r3, [r7, #22]
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f043 0310 	orr.w	r3, r3, #16
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff feed 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002ec4:	7dbb      	ldrb	r3, [r7, #22]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4619      	mov	r1, r3
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff fee5 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	799b      	ldrb	r3, [r3, #6]
 8002ed8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff fedc 	bl	8002c9e <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	791b      	ldrb	r3, [r3, #4]
 8002eea:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8002ef8:	7dfa      	ldrb	r2, [r7, #23]
 8002efa:	7dbb      	ldrb	r3, [r7, #22]
 8002efc:	4413      	add	r3, r2
 8002efe:	2b84      	cmp	r3, #132	; 0x84
 8002f00:	d905      	bls.n	8002f0e <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 8002f02:	2384      	movs	r3, #132	; 0x84
 8002f04:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8002f06:	7dfa      	ldrb	r2, [r7, #23]
 8002f08:	7dbb      	ldrb	r3, [r7, #22]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4619      	mov	r1, r3
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fee6 	bl	8002ce6 <u8x8_cad_SendData>
	arg_int--;
 8002f1a:	7abb      	ldrb	r3, [r7, #10]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002f20:	7abb      	ldrb	r3, [r7, #10]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f3      	bne.n	8002f0e <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff ff00 	bl	8002d2c <u8x8_cad_EndTransfer>
      break;
 8002f2c:	e020      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002f2e:	7abb      	ldrb	r3, [r7, #10]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d104      	bne.n	8002f3e <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8002f34:	4911      	ldr	r1, [pc, #68]	; (8002f7c <u8x8_d_st7565_common+0x10c>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff08 	bl	8002d4c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8002f3c:	e018      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8002f3e:	4910      	ldr	r1, [pc, #64]	; (8002f80 <u8x8_d_st7565_common+0x110>)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff ff03 	bl	8002d4c <u8x8_cad_SendSequence>
      break;
 8002f46:	e013      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff fedf 	bl	8002d0c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002f4e:	2181      	movs	r1, #129	; 0x81
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff fea4 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002f56:	7abb      	ldrb	r3, [r7, #10]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff feaf 	bl	8002cc2 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff fee1 	bl	8002d2c <u8x8_cad_EndTransfer>
      break;
 8002f6a:	e001      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <u8x8_d_st7565_common+0x102>
  }
  return 1;
 8002f70:	2301      	movs	r3, #1
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	08015304 	.word	0x08015304
 8002f80:	0801530c 	.word	0x0801530c

08002f84 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	72fb      	strb	r3, [r7, #11]
 8002f92:	4613      	mov	r3, r2
 8002f94:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8002f96:	7aba      	ldrb	r2, [r7, #10]
 8002f98:	7af9      	ldrb	r1, [r7, #11]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff ff67 	bl	8002e70 <u8x8_d_st7565_common>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d12e      	bne.n	8003006 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002fa8:	7afb      	ldrb	r3, [r7, #11]
 8002faa:	2b0a      	cmp	r3, #10
 8002fac:	d008      	beq.n	8002fc0 <u8x8_d_st7565_nhd_c12864+0x3c>
 8002fae:	2b0d      	cmp	r3, #13
 8002fb0:	d00e      	beq.n	8002fd0 <u8x8_d_st7565_nhd_c12864+0x4c>
 8002fb2:	2b09      	cmp	r3, #9
 8002fb4:	d125      	bne.n	8003002 <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8002fb6:	4917      	ldr	r1, [pc, #92]	; (8003014 <u8x8_d_st7565_nhd_c12864+0x90>)
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f833 	bl	8003024 <u8x8_d_helper_display_setup_memory>
	break;
 8002fbe:	e023      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f842 	bl	800304a <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8002fc6:	4914      	ldr	r1, [pc, #80]	; (8003018 <u8x8_d_st7565_nhd_c12864+0x94>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7ff febf 	bl	8002d4c <u8x8_cad_SendSequence>
	break;
 8002fce:	e01b      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8002fd0:	7abb      	ldrb	r3, [r7, #10]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8002fd6:	4911      	ldr	r1, [pc, #68]	; (800301c <u8x8_d_st7565_nhd_c12864+0x98>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7ff feb7 	bl	8002d4c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	7c9a      	ldrb	r2, [r3, #18]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8002fea:	e00d      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002fec:	490c      	ldr	r1, [pc, #48]	; (8003020 <u8x8_d_st7565_nhd_c12864+0x9c>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff feac 	bl	8002d4c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	7cda      	ldrb	r2, [r3, #19]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8003000:	e002      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 8003002:	2300      	movs	r3, #0
 8003004:	e001      	b.n	800300a <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 8003006:	bf00      	nop
  return 1;
 8003008:	2301      	movs	r3, #1
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	08015324 	.word	0x08015324
 8003018:	0801533c 	.word	0x0801533c
 800301c:	08015314 	.word	0x08015314
 8003020:	0801531c 	.word	0x0801531c

08003024 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	7c9a      	ldrb	r2, [r3, #18]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800304a:	b590      	push	{r4, r7, lr}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695c      	ldr	r4, [r3, #20]
 8003056:	2300      	movs	r3, #0
 8003058:	2200      	movs	r2, #0
 800305a:	2128      	movs	r1, #40	; 0x28
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68dc      	ldr	r4, [r3, #12]
 8003064:	2300      	movs	r3, #0
 8003066:	2200      	movs	r2, #0
 8003068:	2114      	movs	r1, #20
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800306e:	2201      	movs	r2, #1
 8003070:	214b      	movs	r1, #75	; 0x4b
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f886 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	461a      	mov	r2, r3
 8003080:	2129      	movs	r1, #41	; 0x29
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f87e 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003088:	2200      	movs	r2, #0
 800308a:	214b      	movs	r1, #75	; 0x4b
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f879 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	791b      	ldrb	r3, [r3, #4]
 8003098:	461a      	mov	r2, r3
 800309a:	2129      	movs	r1, #41	; 0x29
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f871 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80030a2:	2201      	movs	r2, #1
 80030a4:	214b      	movs	r1, #75	; 0x4b
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f86c 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	795b      	ldrb	r3, [r3, #5]
 80030b2:	461a      	mov	r2, r3
 80030b4:	2129      	movs	r1, #41	; 0x29
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f864 	bl	8003184 <u8x8_gpio_call>
}    
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}

080030c4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	4608      	mov	r0, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	70fb      	strb	r3, [r7, #3]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70bb      	strb	r3, [r7, #2]
 80030da:	4613      	mov	r3, r2
 80030dc:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80030e2:	78bb      	ldrb	r3, [r7, #2]
 80030e4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80030e6:	787b      	ldrb	r3, [r7, #1]
 80030e8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689c      	ldr	r4, [r3, #8]
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	2201      	movs	r2, #1
 80030f8:	210f      	movs	r1, #15
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	47a0      	blx	r4
 80030fe:	4603      	mov	r3, r0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	bd90      	pop	{r4, r7, pc}

08003108 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689c      	ldr	r4, [r3, #8]
 8003114:	2300      	movs	r3, #0
 8003116:	2200      	movs	r2, #0
 8003118:	2109      	movs	r1, #9
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	47a0      	blx	r4
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}

08003126 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003126:	b590      	push	{r4, r7, lr}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689c      	ldr	r4, [r3, #8]
 8003132:	2300      	movs	r3, #0
 8003134:	2200      	movs	r2, #0
 8003136:	210a      	movs	r1, #10
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	47a0      	blx	r4
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bd90      	pop	{r4, r7, pc}

08003144 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689c      	ldr	r4, [r3, #8]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	2300      	movs	r3, #0
 8003158:	210b      	movs	r1, #11
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	47a0      	blx	r4
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}

08003166 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003166:	b590      	push	{r4, r7, lr}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689c      	ldr	r4, [r3, #8]
 8003172:	2300      	movs	r3, #0
 8003174:	2200      	movs	r2, #0
 8003176:	2110      	movs	r1, #16
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	47a0      	blx	r4
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}

08003184 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
 8003190:	4613      	mov	r3, r2
 8003192:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695c      	ldr	r4, [r3, #20]
 8003198:	78ba      	ldrb	r2, [r7, #2]
 800319a:	78f9      	ldrb	r1, [r7, #3]
 800319c:	2300      	movs	r3, #0
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	47a0      	blx	r4
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}

080031aa <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	72fb      	strb	r3, [r7, #11]
 80031b8:	4613      	mov	r3, r2
 80031ba:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a11      	ldr	r2, [pc, #68]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031da:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031e0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031e6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031ec:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	22ff      	movs	r2, #255	; 0xff
 8003208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	22ff      	movs	r2, #255	; 0xff
 8003210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	080031ab 	.word	0x080031ab

08003224 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff ffc8 	bl	80031c8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff ff59 	bl	8003108 <u8x8_SetupMemory>
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	70fb      	strb	r3, [r7, #3]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	741a      	strb	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	745a      	strb	r2, [r3, #17]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d802      	bhi.n	80032a0 <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	701a      	strb	r2, [r3, #0]
}
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d031      	beq.n	8003324 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d826      	bhi.n	8003316 <_ZN11ChronoTimer8setTimerEm+0x6a>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <_ZN11ChronoTimer8setTimerEm+0x24>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032e1 	.word	0x080032e1
 80032d4:	080032e9 	.word	0x080032e9
 80032d8:	080032f9 	.word	0x080032f9
 80032dc:	08003309 	.word	0x08003309
		{
		case MILLIS:
			timeDelay = SetDelay;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	605a      	str	r2, [r3, #4]
			break;
 80032e6:	e017      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032ee:	fb02 f203 	mul.w	r2, r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	605a      	str	r2, [r3, #4]
			break;
 80032f6:	e00f      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f64e 2260 	movw	r2, #60000	; 0xea60
 80032fe:	fb02 f203 	mul.w	r2, r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	605a      	str	r2, [r3, #4]
			break;
 8003306:	e007      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <_ZN11ChronoTimer8setTimerEm+0x84>)
 800330c:	fb02 f203 	mul.w	r2, r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	605a      	str	r2, [r3, #4]
			break;
 8003314:	e000      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 8003316:	bf00      	nop
		}
		isSetted = true;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	609a      	str	r2, [r3, #8]
	}

}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	0036ee80 	.word	0x0036ee80

08003334 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7c9b      	ldrb	r3, [r3, #18]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00e      	beq.n	8003362 <_ZN11ChronoTimer10startTimerEv+0x2e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7c1b      	ldrb	r3, [r3, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 8003358:	f008 fe16 	bl	800bf88 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]
	}
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
	if(isStarted)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7c5b      	ldrb	r3, [r3, #17]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
	}
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
	stopTimer();
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffe3 	bl	800336a <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ffc5 	bl	8003334 <_ZN11ChronoTimer10startTimerEv>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	460b      	mov	r3, r1
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 80033c0:	2300      	movs	r3, #0
 80033c2:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff ff6d 	bl	80032ac <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff ffae 	bl	8003334 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 80033d8:	f008 fdd6 	bl	800bf88 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	1ad2      	subs	r2, r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	bf2c      	ite	cs
 80033ec:	2301      	movcs	r3, #1
 80033ee:	2300      	movcc	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 80033fa:	7afb      	ldrb	r3, [r7, #11]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff ffc5 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af02      	add	r7, sp, #8
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <_ZNSt7__cxx119to_stringEi+0x24>)
 800342a:	2210      	movs	r2, #16
 800342c:	4904      	ldr	r1, [pc, #16]	; (8003440 <_ZNSt7__cxx119to_stringEi+0x28>)
 800342e:	f000 fd45 	bl	8003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	080120c4 	.word	0x080120c4
 8003440:	08011a35 	.word	0x08011a35

08003444 <_ZL7bcd2binh>:
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	111b      	asrs	r3, r3, #4
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	b2da      	uxtb	r2, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	4413      	add	r3, r2
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
	...

08003470 <_ZL7bin2bcdh>:
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <_ZL7bin2bcdh+0x30>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	08db      	lsrs	r3, r3, #3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	0052      	lsls	r2, r2, #1
 800348a:	4413      	add	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	b2da      	uxtb	r2, r3
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4413      	add	r3, r2
 8003494:	b2db      	uxtb	r3, r3
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	cccccccd 	.word	0xcccccccd

080034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t; // @suppress("Return with parenthesis")
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 80034ac:	23d0      	movs	r3, #208	; 0xd0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00e f8c1 	bl	801164e <memset>
	i2cBufferIndex = 0;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2020 	strb.w	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ffd9 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffcc 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800350c:	4603      	mov	r3, r0
 800350e:	4619      	mov	r1, r3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	2301      	movs	r3, #1
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2300      	movs	r3, #0
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <_ZN10DS1307_RTC5setupEv+0x30>)
 800351a:	f00a f9dd 	bl	800d8d8 <HAL_I2C_Master_Transmit>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200006d8 	.word	0x200006d8

0800352c <_ZN10DS1307_RTC9isRunningEv>:



bool DS1307_RTC::isRunning()
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
 8003532:	6078      	str	r0, [r7, #4]
	bool Live = false;
 8003534:	2300      	movs	r3, #0
 8003536:	75fb      	strb	r3, [r7, #23]
	uint8_t RxData = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ffb1 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003542:	4603      	mov	r3, r0
 8003544:	4619      	mov	r1, r3
 8003546:	2301      	movs	r3, #1
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2301      	movs	r3, #1
 800354c:	2200      	movs	r2, #0
 800354e:	4823      	ldr	r0, [pc, #140]	; (80035dc <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 8003550:	f00a f9c2 	bl	800d8d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 1, 1);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ffa5 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800355a:	4603      	mov	r3, r0
 800355c:	4619      	mov	r1, r3
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	2301      	movs	r3, #1
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2301      	movs	r3, #1
 8003566:	481d      	ldr	r0, [pc, #116]	; (80035dc <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 8003568:	f00a fab4 	bl	800dad4 <HAL_I2C_Master_Receive>
	RxData = i2cBuffer[0];
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	75bb      	strb	r3, [r7, #22]
	clearI2CBuff();
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ffa0 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	if(RxData >> 7 == 0x00)
 8003578:	7dbb      	ldrb	r3, [r7, #22]
 800357a:	11db      	asrs	r3, r3, #7
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <_ZN10DS1307_RTC9isRunningEv+0x58>
	{
		Live = true;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
	}
	if(Live)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d022      	beq.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
	{
		TIME_DATE_T ReadTime;
		getTimeDate(ReadTime);
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f8cf 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		if(ReadTime.year == 0  && ReadTime.month == 0  && ReadTime.day == 0)
 8003596:	8a7b      	ldrh	r3, [r7, #18]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d119      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 800359c:	7c3b      	ldrb	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d113      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
		{
			ReadTime.hour = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73bb      	strb	r3, [r7, #14]
			ReadTime.minute = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	737b      	strb	r3, [r7, #13]
			ReadTime.second = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	733b      	strb	r3, [r7, #12]
			ReadTime.day = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
			ReadTime.month = 1;
 80035b8:	2301      	movs	r3, #1
 80035ba:	743b      	strb	r3, [r7, #16]
			ReadTime.year = 2020;
 80035bc:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80035c0:	827b      	strh	r3, [r7, #18]
			adjustTimeDate(ReadTime);
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f808 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
		}
	}
	return Live;
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	200006d8 	.word	0x200006d8

080035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>:



void DS1307_RTC::adjustTimeDate(TIME_DATE_T AdjustVar)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	e883 0006 	stmia.w	r3, {r1, r2}
	clearI2CBuff();
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff ff62 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	i2cBuffer[i2cBufferIndex++] = 0;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	b2d1      	uxtb	r1, r2
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	f882 1020 	strb.w	r1, [r2, #32]
 8003604:	461a      	mov	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.second);
 800360c:	7939      	ldrb	r1, [r7, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	b2d0      	uxtb	r0, r2
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	f882 0020 	strb.w	r0, [r2, #32]
 800361e:	461c      	mov	r4, r3
 8003620:	4608      	mov	r0, r1
 8003622:	f7ff ff25 	bl	8003470 <_ZL7bin2bcdh>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.minute);
 800362e:	7979      	ldrb	r1, [r7, #5]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	b2d0      	uxtb	r0, r2
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	f882 0020 	strb.w	r0, [r2, #32]
 8003640:	461c      	mov	r4, r3
 8003642:	4608      	mov	r0, r1
 8003644:	f7ff ff14 	bl	8003470 <_ZL7bin2bcdh>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.hour);
 8003650:	79b9      	ldrb	r1, [r7, #6]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	b2d0      	uxtb	r0, r2
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	f882 0020 	strb.w	r0, [r2, #32]
 8003662:	461c      	mov	r4, r3
 8003664:	4608      	mov	r0, r1
 8003666:	f7ff ff03 	bl	8003470 <_ZL7bin2bcdh>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(0);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	b2d1      	uxtb	r1, r2
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	f882 1020 	strb.w	r1, [r2, #32]
 8003682:	461c      	mov	r4, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f7ff fef3 	bl	8003470 <_ZL7bin2bcdh>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.day);
 8003692:	79f9      	ldrb	r1, [r7, #7]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	b2d0      	uxtb	r0, r2
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	f882 0020 	strb.w	r0, [r2, #32]
 80036a4:	461c      	mov	r4, r3
 80036a6:	4608      	mov	r0, r1
 80036a8:	f7ff fee2 	bl	8003470 <_ZL7bin2bcdh>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.month);
 80036b4:	7a39      	ldrb	r1, [r7, #8]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	b2d0      	uxtb	r0, r2
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	f882 0020 	strb.w	r0, [r2, #32]
 80036c6:	461c      	mov	r4, r3
 80036c8:	4608      	mov	r0, r1
 80036ca:	f7ff fed1 	bl	8003470 <_ZL7bin2bcdh>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.year - 2000);
 80036d6:	897b      	ldrh	r3, [r7, #10]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3330      	adds	r3, #48	; 0x30
 80036dc:	b2d9      	uxtb	r1, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	b2d0      	uxtb	r0, r2
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	f882 0020 	strb.w	r0, [r2, #32]
 80036ee:	461c      	mov	r4, r3
 80036f0:	4608      	mov	r0, r1
 80036f2:	f7ff febd 	bl	8003470 <_ZL7bin2bcdh>
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	551a      	strb	r2, [r3, r4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff fed0 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003704:	4603      	mov	r3, r0
 8003706:	4618      	mov	r0, r3
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003710:	b299      	uxth	r1, r3
 8003712:	2301      	movs	r3, #1
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	460b      	mov	r3, r1
 8003718:	4601      	mov	r1, r0
 800371a:	4805      	ldr	r0, [pc, #20]	; (8003730 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE+0x150>)
 800371c:	f00a f8dc 	bl	800d8d8 <HAL_I2C_Master_Transmit>
	clearI2CBuff();
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fec9 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}
 800372e:	bf00      	nop
 8003730:	200006d8 	.word	0x200006d8

08003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff feba 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff fead 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800374a:	4603      	mov	r3, r0
 800374c:	4619      	mov	r1, r3
 800374e:	2301      	movs	r3, #1
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2301      	movs	r3, #1
 8003754:	2200      	movs	r2, #0
 8003756:	4848      	ldr	r0, [pc, #288]	; (8003878 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8003758:	f00a f8be 	bl	800d8d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fea1 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003762:	4603      	mov	r3, r0
 8003764:	4619      	mov	r1, r3
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	2301      	movs	r3, #1
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2307      	movs	r3, #7
 800376e:	4842      	ldr	r0, [pc, #264]	; (8003878 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8003770:	f00a f9b0 	bl	800dad4 <HAL_I2C_Master_Receive>
	RetTimeDate.second = bcd2bin(i2cBuffer[i2cBufferIndex++] & 0x7F);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	b2d1      	uxtb	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	f882 1020 	strb.w	r1, [r2, #32]
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	5c9b      	ldrb	r3, [r3, r2]
 800378a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe57 	bl	8003444 <_ZL7bcd2binh>
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	b2d1      	uxtb	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	f882 1020 	strb.w	r1, [r2, #32]
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	5c9b      	ldrb	r3, [r3, r2]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fe45 	bl	8003444 <_ZL7bcd2binh>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	b2d1      	uxtb	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	f882 1020 	strb.w	r1, [r2, #32]
 80037d2:	461a      	mov	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	5c9b      	ldrb	r3, [r3, r2]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fe33 	bl	8003444 <_ZL7bcd2binh>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ec:	3301      	adds	r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	b2d1      	uxtb	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	f882 1020 	strb.w	r1, [r2, #32]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe19 	bl	8003444 <_ZL7bcd2binh>
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	b2d1      	uxtb	r1, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	f882 1020 	strb.w	r1, [r2, #32]
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	5c9b      	ldrb	r3, [r3, r2]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fe07 	bl	8003444 <_ZL7bcd2binh>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bcd2bin(i2cBuffer[i2cBufferIndex++]) + 2000;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	b2d1      	uxtb	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	f882 1020 	strb.w	r1, [r2, #32]
 800384e:	461a      	mov	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	5c9b      	ldrb	r3, [r3, r2]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fdf5 	bl	8003444 <_ZL7bcd2binh>
 800385a:	4603      	mov	r3, r0
 800385c:	b29b      	uxth	r3, r3
 800385e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003862:	b29a      	uxth	r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fe25 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200006d8 	.word	0x200006d8

0800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 8003882:	af00      	add	r7, sp, #0
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	6018      	str	r0, [r3, #0]
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	6019      	str	r1, [r3, #0]
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003894:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003898:	4618      	mov	r0, r3
 800389a:	f00d fbd3 	bl	8011044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800389e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038a2:	4618      	mov	r0, r3
 80038a4:	f00d fbce 	bl	8011044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80038ac:	4618      	mov	r0, r3
 80038ae:	f00d fbc9 	bl	8011044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038b6:	4618      	mov	r0, r3
 80038b8:	f00d fbc4 	bl	8011044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038c0:	4618      	mov	r0, r3
 80038c2:	f00d fbbf 	bl	8011044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038c6:	f107 031c 	add.w	r3, r7, #28
 80038ca:	4618      	mov	r0, r3
 80038cc:	f00d fbba 	bl	8011044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038d4:	4618      	mov	r0, r3
 80038d6:	f00d faa5 	bl	8010e24 <_ZNSaIcEC1Ev>
 80038da:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	49df      	ldr	r1, [pc, #892]	; (8003c60 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e4>)
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	f00d fd65 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80038ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00d fa99 	bl	8010e26 <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 80038f4:	f107 0214 	add.w	r2, r7, #20
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	4611      	mov	r1, r2
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	f7ff ff18 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = TimeDate.second > 9 ? std::to_string(TimeDate.second) : "0" + std::to_string(TimeDate.second);
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2400      	movs	r4, #0
 800390c:	2b09      	cmp	r3, #9
 800390e:	d90a      	bls.n	8003926 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xaa>
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fd7a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003924:	e012      	b.n	800394c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xd0>
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fd6f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800393a:	2401      	movs	r4, #1
 800393c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003940:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003944:	49c7      	ldr	r1, [pc, #796]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003946:	4618      	mov	r0, r3
 8003948:	f000 faf0 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800394c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003950:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f00d fba1 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800395c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003960:	4618      	mov	r0, r3
 8003962:	f00d fb90 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003966:	2c00      	cmp	r4, #0
 8003968:	d004      	beq.n	8003974 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xf8>
 800396a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800396e:	4618      	mov	r0, r3
 8003970:	f00d fb89 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = TimeDate.minute > 9 ? std::to_string(TimeDate.minute) : "0" + std::to_string(TimeDate.minute);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	2400      	movs	r4, #0
 800397c:	2b09      	cmp	r3, #9
 800397e:	d90a      	bls.n	8003996 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x11a>
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	461a      	mov	r2, r3
 8003988:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fd42 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003994:	e012      	b.n	80039bc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x140>
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	461a      	mov	r2, r3
 800399e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fd37 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80039aa:	2401      	movs	r4, #1
 80039ac:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039b0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80039b4:	49ab      	ldr	r1, [pc, #684]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fab8 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80039bc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80039c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f00d fb69 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80039cc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f00d fb58 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80039d6:	2c00      	cmp	r4, #0
 80039d8:	d004      	beq.n	80039e4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x168>
 80039da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039de:	4618      	mov	r0, r3
 80039e0:	f00d fb51 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = TimeDate.hour > 9 ? std::to_string(TimeDate.hour) : "0" + std::to_string(TimeDate.hour);
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	789b      	ldrb	r3, [r3, #2]
 80039ea:	2400      	movs	r4, #0
 80039ec:	2b09      	cmp	r3, #9
 80039ee:	d90a      	bls.n	8003a06 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x18a>
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	789b      	ldrb	r3, [r3, #2]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fd0a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a04:	e012      	b.n	8003a2c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1b0>
 8003a06:	f107 0314 	add.w	r3, r7, #20
 8003a0a:	789b      	ldrb	r3, [r3, #2]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fcff 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a1a:	2401      	movs	r4, #1
 8003a1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a20:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003a24:	498f      	ldr	r1, [pc, #572]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fa80 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003a2c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003a30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f00d fb31 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a40:	4618      	mov	r0, r3
 8003a42:	f00d fb20 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	d004      	beq.n	8003a54 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1d8>
 8003a4a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f00d fb19 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = TimeDate.day > 9 ? std::to_string(TimeDate.day) : "0" + std::to_string(TimeDate.day);
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	78db      	ldrb	r3, [r3, #3]
 8003a5a:	2400      	movs	r4, #0
 8003a5c:	2b09      	cmp	r3, #9
 8003a5e:	d90a      	bls.n	8003a76 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1fa>
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fcd2 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a74:	e012      	b.n	8003a9c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x220>
 8003a76:	f107 0314 	add.w	r3, r7, #20
 8003a7a:	78db      	ldrb	r3, [r3, #3]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fcc7 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a8a:	2401      	movs	r4, #1
 8003a8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003a90:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003a94:	4973      	ldr	r1, [pc, #460]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fa48 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003a9c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003aa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f00d faf9 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003aac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f00d fae8 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ab6:	2c00      	cmp	r4, #0
 8003ab8:	d004      	beq.n	8003ac4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x248>
 8003aba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f00d fae1 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = TimeDate.month > 9 ? std::to_string(TimeDate.month) : "0" + std::to_string(TimeDate.month);
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	791b      	ldrb	r3, [r3, #4]
 8003aca:	2400      	movs	r4, #0
 8003acc:	2b09      	cmp	r3, #9
 8003ace:	d90a      	bls.n	8003ae6 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x26a>
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fc9a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003ae4:	e012      	b.n	8003b0c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x290>
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	791b      	ldrb	r3, [r3, #4]
 8003aec:	461a      	mov	r2, r3
 8003aee:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fc8f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003afa:	2401      	movs	r4, #1
 8003afc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003b00:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003b04:	4957      	ldr	r1, [pc, #348]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fa10 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b0c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003b10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f00d fac1 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b1c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003b20:	4618      	mov	r0, r3
 8003b22:	f00d fab0 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b26:	2c00      	cmp	r4, #0
 8003b28:	d004      	beq.n	8003b34 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x2b8>
 8003b2a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f00d faa9 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year % 100);
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	88db      	ldrh	r3, [r3, #6]
 8003b3a:	4a4b      	ldr	r2, [pc, #300]	; (8003c68 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3ec>)
 8003b3c:	fba2 1203 	umull	r1, r2, r2, r3
 8003b40:	0952      	lsrs	r2, r2, #5
 8003b42:	2164      	movs	r1, #100	; 0x64
 8003b44:	fb01 f202 	mul.w	r2, r1, r2
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fc5f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003b5a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f00d fa9a 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f00d fa89 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 8003b74:	1dfb      	adds	r3, r7, #7
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	f200 816c 	bhi.w	8003e56 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5da>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x308>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003b99 	.word	0x08003b99
 8003b88:	08003c17 	.word	0x08003c17
 8003b8c:	08003c71 	.word	0x08003c71
 8003b90:	08003cef 	.word	0x08003cef
 8003b94:	08003d37 	.word	0x08003d37
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003ba0:	4a32      	ldr	r2, [pc, #200]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f9da 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003ba8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003bac:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003bb0:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f9e4 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003bba:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bbe:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f9f3 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003bca:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003bce:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003bd2:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f9d3 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003bdc:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	4611      	mov	r1, r2
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	f00d fa59 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003bec:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f00d fa48 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003bf6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f00d fa43 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c00:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003c04:	4618      	mov	r0, r3
 8003c06:	f00d fa3e 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f00d fa39 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003c14:	e120      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 8003c16:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003c1a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003c1e:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f99b 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003c26:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c2a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003c2e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f9a5 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003c38:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4611      	mov	r1, r2
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	f00d fa2b 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c48:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f00d fa1a 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c52:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003c56:	4618      	mov	r0, r3
 8003c58:	f00d fa15 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003c5c:	e0fc      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
 8003c5e:	bf00      	nop
 8003c60:	08012138 	.word	0x08012138
 8003c64:	08012144 	.word	0x08012144
 8003c68:	51eb851f 	.word	0x51eb851f
 8003c6c:	08012148 	.word	0x08012148
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 8003c70:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003c74:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003c78:	4a8d      	ldr	r2, [pc, #564]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f96e 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003c80:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003c84:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c88:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f978 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003c92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c96:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8003c9a:	4a85      	ldr	r2, [pc, #532]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 f987 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003ca2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003ca6:	f107 021c 	add.w	r2, r7, #28
 8003caa:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f967 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003cb4:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	f00d f9ed 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003cc4:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f00d f9dc 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f00d f9d7 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cd8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f00d f9d2 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ce2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f00d f9cd 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003cec:	e0b4      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 8003cee:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003cf2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003cf6:	4a6e      	ldr	r2, [pc, #440]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f92f 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003cfe:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003d02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003d06:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f939 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d10:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	4611      	mov	r1, r2
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	f00d f9bf 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003d20:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003d24:	4618      	mov	r0, r3
 8003d26:	f00d f9ae 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d2a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f00d f9a9 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003d34:	e090      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 8003d36:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003d3a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d3e:	4a5d      	ldr	r2, [pc, #372]	; (8003eb4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f90b 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d46:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003d4a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d4e:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f915 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d58:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003d5c:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8003d60:	4a54      	ldr	r2, [pc, #336]	; (8003eb4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f924 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d68:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003d6c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d70:	f507 7160 	add.w	r1, r7, #896	; 0x380
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f904 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d7a:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003d7e:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8003d82:	4a4d      	ldr	r2, [pc, #308]	; (8003eb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x63c>)
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f913 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d8a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003d8e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003d92:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f8f3 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d9c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003da0:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8003da4:	4a42      	ldr	r2, [pc, #264]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f902 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003dac:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003db0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003db4:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f8e2 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003dbe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003dc2:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8003dc6:	4a3a      	ldr	r2, [pc, #232]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f8f1 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003dce:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003dd2:	f107 021c 	add.w	r2, r7, #28
 8003dd6:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f8d1 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003de0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	4611      	mov	r1, r2
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	f00d f957 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003df0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003df4:	4618      	mov	r0, r3
 8003df6:	f00d f946 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dfa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f00d f941 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e04:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f00d f93c 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e0e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003e12:	4618      	mov	r0, r3
 8003e14:	f00d f937 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e18:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f00d f932 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e22:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003e26:	4618      	mov	r0, r3
 8003e28:	f00d f92d 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e2c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003e30:	4618      	mov	r0, r3
 8003e32:	f00d f928 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e36:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f00d f923 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e40:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003e44:	4618      	mov	r0, r3
 8003e46:	f00d f91e 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e4a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f00d f919 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e54:	e000      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	default:
		break;
 8003e56:	bf00      	nop
	}
	return RetStr;
 8003e58:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003e5a:	f107 031c 	add.w	r3, r7, #28
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00d f911 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f00d f90c 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e72:	4618      	mov	r0, r3
 8003e74:	f00d f907 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f00d f902 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e86:	4618      	mov	r0, r3
 8003e88:	f00d f8fd 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00d f8f8 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	f107 020c 	add.w	r2, r7, #12
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	f107 030c 	add.w	r3, r7, #12
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	0801214c 	.word	0x0801214c
 8003eb4:	08012148 	.word	0x08012148
 8003eb8:	08012150 	.word	0x08012150

08003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8003ebc:	b408      	push	{r3}
 8003ebe:	b590      	push	{r4, r7, lr}
 8003ec0:	b088      	sub	sp, #32
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3307      	adds	r3, #7
 8003ece:	3307      	adds	r3, #7
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	ebad 0d03 	sub.w	sp, sp, r3
 8003ed8:	466b      	mov	r3, sp
 8003eda:	3307      	adds	r3, #7
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8003ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ee6:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8003ee8:	68bc      	ldr	r4, [r7, #8]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	69f8      	ldr	r0, [r7, #28]
 8003ef2:	47a0      	blx	r4
 8003ef4:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	18d4      	adds	r4, r2, r3
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	4618      	mov	r0, r3
 8003f02:	f00c ff8f 	bl	8010e24 <_ZNSaIcEC1Ev>
 8003f06:	f107 0314 	add.w	r3, r7, #20
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	69f9      	ldr	r1, [r7, #28]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f865 	bl	8003fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f00c ff84 	bl	8010e26 <_ZNSaIcED1Ev>
    }
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003f28:	b001      	add	sp, #4
 8003f2a:	4770      	bx	lr

08003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f00d f9a3 	bl	8011288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f865 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f00d f87f 	bl	8011052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f00d f9ef 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f00d f9be 	bl	80112f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8003f78:	bf00      	nop
    }
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68b8      	ldr	r0, [r7, #8]
 8003f92:	f00d f9a9 	bl	80112e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f83b 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f00d f855 	bl	8011052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	68b8      	ldr	r0, [r7, #8]
 8003fc0:	f00d f998 	bl	80112f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f824 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f00d f83e 	bl	8011052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8003fde:	b590      	push	{r4, r7, lr}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8003fec:	68fc      	ldr	r4, [r7, #12]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f00c ff51 	bl	8010e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f00d f9a5 	bl	801134a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f80f 	bl	8004028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	bd90      	pop	{r4, r7, pc}

08004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f804 	bl	8004046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8004046:	b590      	push	{r4, r7, lr}
 8004048:	b087      	sub	sp, #28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8004054:	4623      	mov	r3, r4
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f804 	bl	8004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	bd90      	pop	{r4, r7, pc}

08004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8004076:	68b8      	ldr	r0, [r7, #8]
 8004078:	f000 f83e 	bl	80040f8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	429a      	cmp	r2, r3
 8004088:	d001      	beq.n	800408e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800408e:	2300      	movs	r3, #0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8004094:	4817      	ldr	r0, [pc, #92]	; (80040f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8004096:	f00c feca 	bl	8010e2e <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	68b8      	ldr	r0, [r7, #8]
 800409e:	f000 f843 	bl	8004128 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80040a2:	4603      	mov	r3, r0
 80040a4:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d910      	bls.n	80040ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	2200      	movs	r2, #0
 80040b2:	4619      	mov	r1, r3
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f00c fef7 	bl	8010ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4619      	mov	r1, r3
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f00c fee5 	bl	8010e8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4619      	mov	r1, r3
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f00c fee6 	bl	8010e9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f00c fedf 	bl	8010e92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80040d4:	4603      	mov	r3, r0
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f00c ff41 	bl	8010f62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	4619      	mov	r1, r3
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f00c feda 	bl	8010e9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80040ea:	bf00      	nop
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	08012154 	.word	0x08012154

080040f8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004128:	b5b0      	push	{r4, r5, r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004132:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ffed 	bl	8004116 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800413c:	462a      	mov	r2, r5
 800413e:	6839      	ldr	r1, [r7, #0]
 8004140:	4620      	mov	r0, r4
 8004142:	f000 f805 	bl	8004150 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8004146:	4603      	mov	r3, r0
    }
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bdb0      	pop	{r4, r5, r7, pc}

08004150 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
    }
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <_Z7DelayNsm>:
#include "Display.h"
#include "tim.h"


void DelayNs(uint32_t NsDelay)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	d801      	bhi.n	800417e <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 800417a:	2310      	movs	r3, #16
 800417c:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <_Z7DelayNsm+0x3c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <_Z7DelayNsm+0x3c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	429a      	cmp	r2, r3
 8004190:	bf8c      	ite	hi
 8004192:	2301      	movhi	r3, #1
 8004194:	2300      	movls	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d000      	beq.n	800419e <_Z7DelayNsm+0x32>
 800419c:	e7f3      	b.n	8004186 <_Z7DelayNsm+0x1a>
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	20000784 	.word	0x20000784

080041ac <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	72fb      	strb	r3, [r7, #11]
 80041ba:	4613      	mov	r3, r2
 80041bc:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	3b28      	subs	r3, #40	; 0x28
 80041c2:	2b23      	cmp	r3, #35	; 0x23
 80041c4:	d86b      	bhi.n	800429e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080042a9 	.word	0x080042a9
 80041d0:	0800426b 	.word	0x0800426b
 80041d4:	08004261 	.word	0x08004261
 80041d8:	0800425d 	.word	0x0800425d
 80041dc:	080042a9 	.word	0x080042a9
 80041e0:	0800429f 	.word	0x0800429f
 80041e4:	0800429f 	.word	0x0800429f
 80041e8:	0800429f 	.word	0x0800429f
 80041ec:	0800429f 	.word	0x0800429f
 80041f0:	0800429f 	.word	0x0800429f
 80041f4:	0800429f 	.word	0x0800429f
 80041f8:	0800429f 	.word	0x0800429f
 80041fc:	0800429f 	.word	0x0800429f
 8004200:	0800429f 	.word	0x0800429f
 8004204:	0800429f 	.word	0x0800429f
 8004208:	0800429f 	.word	0x0800429f
 800420c:	0800429f 	.word	0x0800429f
 8004210:	0800429f 	.word	0x0800429f
 8004214:	0800429f 	.word	0x0800429f
 8004218:	0800429f 	.word	0x0800429f
 800421c:	0800429f 	.word	0x0800429f
 8004220:	0800429f 	.word	0x0800429f
 8004224:	0800429f 	.word	0x0800429f
 8004228:	0800429f 	.word	0x0800429f
 800422c:	0800429f 	.word	0x0800429f
 8004230:	0800429f 	.word	0x0800429f
 8004234:	0800429f 	.word	0x0800429f
 8004238:	0800429f 	.word	0x0800429f
 800423c:	0800429f 	.word	0x0800429f
 8004240:	0800429f 	.word	0x0800429f
 8004244:	0800429f 	.word	0x0800429f
 8004248:	0800429f 	.word	0x0800429f
 800424c:	0800429f 	.word	0x0800429f
 8004250:	08004275 	.word	0x08004275
 8004254:	08004283 	.word	0x08004283
 8004258:	08004291 	.word	0x08004291
		case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
			//		DelayNs(arg_int);
			break;
		case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
			//		DelayNs(arg_int);
			__NOP();
 800425c:	bf00      	nop
			break;
 800425e:	e024      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
			DelayNs(10000);
 8004260:	f242 7010 	movw	r0, #10000	; 0x2710
 8004264:	f7ff ff82 	bl	800416c <_Z7DelayNsm>
			//		for (uint16_t n = 0; n < 320; n++)
			//		{
			//			__NOP();
			//		}
			break;
 8004268:	e01f      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
			HAL_Delay(arg_int);
 800426a:	7abb      	ldrb	r3, [r7, #10]
 800426c:	4618      	mov	r0, r3
 800426e:	f007 fe95 	bl	800bf9c <HAL_Delay>
			break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 8004272:	e01a      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
			//	case U8X8_MSG_GPIO_SPI_DATA:
			//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
			//		break;
		case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8004274:	7abb      	ldrb	r3, [r7, #10]
 8004276:	461a      	mov	r2, r3
 8004278:	2108      	movs	r1, #8
 800427a:	480e      	ldr	r0, [pc, #56]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800427c:	f009 f91a 	bl	800d4b4 <HAL_GPIO_WritePin>
			break;
 8004280:	e013      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 8004282:	7abb      	ldrb	r3, [r7, #10]
 8004284:	461a      	mov	r2, r3
 8004286:	2110      	movs	r1, #16
 8004288:	480a      	ldr	r0, [pc, #40]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800428a:	f009 f913 	bl	800d4b4 <HAL_GPIO_WritePin>
			break;
 800428e:	e00c      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 8004290:	7abb      	ldrb	r3, [r7, #10]
 8004292:	461a      	mov	r2, r3
 8004294:	2140      	movs	r1, #64	; 0x40
 8004296:	4807      	ldr	r0, [pc, #28]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004298:	f009 f90c 	bl	800d4b4 <HAL_GPIO_WritePin>
			break;
 800429c:	e005      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		default:
			u8x8_SetGPIOResult(u8x8, 1);			// default return value
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			break;
 80042a6:	e000      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			break;							// can be used to setup pins
 80042a8:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40010800 	.word	0x40010800

080042b8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	460b      	mov	r3, r1
 80042c4:	72fb      	strb	r3, [r7, #11]
 80042c6:	4613      	mov	r3, r2
 80042c8:	72bb      	strb	r3, [r7, #10]
	//	uint8_t byte;
	//	uint8_t *data;
	switch(msg)
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	3b14      	subs	r3, #20
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d848      	bhi.n	8004364 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	0800431d 	.word	0x0800431d
 80042dc:	08004365 	.word	0x08004365
 80042e0:	08004365 	.word	0x08004365
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	0800433d 	.word	0x0800433d
 80042ec:	08004351 	.word	0x08004351
 80042f0:	08004365 	.word	0x08004365
 80042f4:	08004365 	.word	0x08004365
 80042f8:	08004365 	.word	0x08004365
 80042fc:	08004365 	.word	0x08004365
 8004300:	08004365 	.word	0x08004365
 8004304:	08004365 	.word	0x08004365
 8004308:	0800432f 	.word	0x0800432f
			//			byte = *data;
			//			data++;
			//			arg_int--;
			//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
			//		}
			HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 800430c:	7abb      	ldrb	r3, [r7, #10]
 800430e:	b29a      	uxth	r2, r3
 8004310:	230a      	movs	r3, #10
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4817      	ldr	r0, [pc, #92]	; (8004374 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 8004316:	f00b f931 	bl	800f57c <HAL_SPI_Transmit>
			break;
 800431a:	e025      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_INIT:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	785b      	ldrb	r3, [r3, #1]
 8004322:	461a      	mov	r2, r3
 8004324:	2149      	movs	r1, #73	; 0x49
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7fe ff2c 	bl	8003184 <u8x8_gpio_call>
			break;
 800432c:	e01c      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_SET_DC:
			u8x8_gpio_SetDC(u8g2, arg_int);
 800432e:	7abb      	ldrb	r3, [r7, #10]
 8004330:	461a      	mov	r2, r3
 8004332:	214a      	movs	r1, #74	; 0x4a
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7fe ff25 	bl	8003184 <u8x8_gpio_call>
			break;
 800433a:	e015      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_START_TRANSFER:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	2149      	movs	r1, #73	; 0x49
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f7fe ff1c 	bl	8003184 <u8x8_gpio_call>
			__NOP();
 800434c:	bf00      	nop
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
			break;
 800434e:	e00b      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_END_TRANSFER:
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
			__NOP();
 8004350:	bf00      	nop
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	461a      	mov	r2, r3
 800435a:	2149      	movs	r1, #73	; 0x49
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7fe ff11 	bl	8003184 <u8x8_gpio_call>
			break;
 8004362:	e001      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		default:
			return 0;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 8004368:	2301      	movs	r3, #1
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	2000072c 	.word	0x2000072c

08004378 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4618      	mov	r0, r3
 8004384:	f00c fe5e 	bl	8011044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 8004394:	b5b0      	push	{r4, r5, r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ffe8 	bl	8004378 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2020 	strb.w	r2, [r3, #32]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <_ZN13NHDST7565_LCDC1Eh+0x48>)
 80043b4:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 80043b8:	4615      	mov	r5, r2
 80043ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f808 	bl	80043e0 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bdb0      	pop	{r4, r5, r7, pc}
 80043da:	bf00      	nop
 80043dc:	08012180 	.word	0x08012180

080043e0 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d004      	beq.n	8004408 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x28>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004404:	2b03      	cmp	r3, #3
 8004406:	d108      	bne.n	800441a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3a>
	{
		dispParams.width = 64;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2240      	movs	r2, #64	; 0x40
 800440c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 128;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8004418:	e007      	b.n	800442a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x4a>
	}
	else
	{
		dispParams.width = 128;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2280      	movs	r2, #128	; 0x80
 800441e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 64;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	}
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>:


void NHDST7565_LCD::assignTextParams(String Text, const uint8_t *Font)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
	textToWrite.textLen = 0;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	761a      	strb	r2, [r3, #24]
	textToWrite.textHigh = 0;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	765a      	strb	r2, [r3, #25]
	textToWrite.text = "";
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4930      	ldr	r1, [pc, #192]	; (8004510 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 8004450:	4618      	mov	r0, r3
 8004452:	f00c fefc 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textFont = Font;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	61da      	str	r2, [r3, #28]
	//	if(textToWrite.textFont != Font)
	//	{
	u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f7fd fdeb 	bl	8002044 <u8g2_SetFont>
	textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	765a      	strb	r2, [r3, #25]
	//	}
	if(Text != "")
 800447a:	4925      	ldr	r1, [pc, #148]	; (8004510 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 800447c:	68b8      	ldr	r0, [r7, #8]
 800447e:	f000 fd8b 	bl	8004f98 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x72>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800448e:	68b8      	ldr	r0, [r7, #8]
 8004490:	f00c ff46 	bl	8011320 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004494:	4603      	mov	r3, r0
 8004496:	4619      	mov	r1, r3
 8004498:	4620      	mov	r0, r4
 800449a:	f7fd fe3d 	bl	8002118 <u8g2_GetStrWidth>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	761a      	strb	r2, [r3, #24]

	if(textToWrite.textLen < dispParams.width)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	7e1a      	ldrb	r2, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d205      	bcs.n	80044c0 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x8c>
	{
		textToWrite.text = Text;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f00c fdea 	bl	8011092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		textToWrite.textFont = displayFonts[W_5_H_8];
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
	}
}
 80044be:	e022      	b.n	8004506 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xd2>
		textToWrite.textFont = displayFonts[W_5_H_8];
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	61da      	str	r2, [r3, #28]
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f7fd fdb4 	bl	8002044 <u8g2_SetFont>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80044e2:	68b8      	ldr	r0, [r7, #8]
 80044e4:	f00c ff1c 	bl	8011320 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80044e8:	4603      	mov	r3, r0
 80044ea:	4619      	mov	r1, r3
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7fd fe13 	bl	8002118 <u8g2_GetStrWidth>
 80044f2:	4603      	mov	r3, r0
 80044f4:	461a      	mov	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	761a      	strb	r2, [r3, #24]
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	765a      	strb	r2, [r3, #25]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bd90      	pop	{r4, r7, pc}
 800450e:	bf00      	nop
 8004510:	0801219c 	.word	0x0801219c

08004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>:

void NHDST7565_LCD::assignNewDrawCoord(uint8_t OldXPos, uint8_t OldYPos,
		uint8_t &NewXPos, uint8_t &NewYPos)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	72fb      	strb	r3, [r7, #11]
 8004522:	4613      	mov	r3, r2
 8004524:	72bb      	strb	r3, [r7, #10]
	if(OldXPos <= dispParams.width && OldYPos <= dispParams.high)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800452c:	7afa      	ldrb	r2, [r7, #11]
 800452e:	429a      	cmp	r2, r3
 8004530:	d80c      	bhi.n	800454c <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004538:	7aba      	ldrb	r2, [r7, #10]
 800453a:	429a      	cmp	r2, r3
 800453c:	d806      	bhi.n	800454c <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
	{
		NewXPos = OldXPos;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	7afa      	ldrb	r2, [r7, #11]
 8004542:	701a      	strb	r2, [r3, #0]
		NewYPos = OldYPos;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	7aba      	ldrb	r2, [r7, #10]
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	e0bb      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
	}
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004552:	7afa      	ldrb	r2, [r7, #11]
 8004554:	429a      	cmp	r2, r3
 8004556:	d930      	bls.n	80045ba <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800455e:	7aba      	ldrb	r2, [r7, #10]
 8004560:	429a      	cmp	r2, r3
 8004562:	d82a      	bhi.n	80045ba <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
	{
		NewYPos = OldYPos;
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	7aba      	ldrb	r2, [r7, #10]
 8004568:	701a      	strb	r2, [r3, #0]
		switch(OldXPos)
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	2b83      	cmp	r3, #131	; 0x83
 800456e:	d00b      	beq.n	8004588 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x74>
 8004570:	2b84      	cmp	r3, #132	; 0x84
 8004572:	d011      	beq.n	8004598 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x84>
 8004574:	2b82      	cmp	r3, #130	; 0x82
 8004576:	d117      	bne.n	80045a8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x94>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f901 	bl	8004780 <_ZN13NHDST7565_LCD11setTextLeftEv>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	701a      	strb	r2, [r3, #0]
				break;
 8004586:	e017      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f905 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	701a      	strb	r2, [r3, #0]
				break;
 8004596:	e00f      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f914 	bl	80047c6 <_ZN13NHDST7565_LCD12setTextRightEv>
 800459e:	4603      	mov	r3, r0
 80045a0:	461a      	mov	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	701a      	strb	r2, [r3, #0]
				break;
 80045a6:	e007      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			default:
				NewXPos = setTextCenter();
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f8f5 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	701a      	strb	r2, [r3, #0]
				break;
 80045b6:	bf00      	nop
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 80045b8:	e084      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80045c0:	7afa      	ldrb	r2, [r7, #11]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d830      	bhi.n	8004628 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80045cc:	7aba      	ldrb	r2, [r7, #10]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d92a      	bls.n	8004628 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
	{
		NewXPos = OldXPos;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7afa      	ldrb	r2, [r7, #11]
 80045d6:	701a      	strb	r2, [r3, #0]
		switch(OldYPos)
 80045d8:	7abb      	ldrb	r3, [r7, #10]
 80045da:	2b47      	cmp	r3, #71	; 0x47
 80045dc:	d00b      	beq.n	80045f6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xe2>
 80045de:	2b48      	cmp	r3, #72	; 0x48
 80045e0:	d011      	beq.n	8004606 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xf2>
 80045e2:	2b46      	cmp	r3, #70	; 0x46
 80045e4:	d117      	bne.n	8004616 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x102>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f900 	bl	80047ec <_ZN13NHDST7565_LCD10setTextTopEv>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	701a      	strb	r2, [r3, #0]
				break;
 80045f4:	e017      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f906 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	701a      	strb	r2, [r3, #0]
				break;
 8004604:	e00f      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f920 	bl	800484c <_ZN13NHDST7565_LCD13setTextBottomEv>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	701a      	strb	r2, [r3, #0]
				break;
 8004614:	e007      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			default:
				NewYPos = setTextMiddle();
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f8f6 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	701a      	strb	r2, [r3, #0]
				break;
 8004624:	bf00      	nop
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 8004626:	e04d      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else
	{
		switch(OldXPos)
 8004628:	7afb      	ldrb	r3, [r7, #11]
 800462a:	2b83      	cmp	r3, #131	; 0x83
 800462c:	d00b      	beq.n	8004646 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x132>
 800462e:	2b84      	cmp	r3, #132	; 0x84
 8004630:	d011      	beq.n	8004656 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x142>
 8004632:	2b82      	cmp	r3, #130	; 0x82
 8004634:	d117      	bne.n	8004666 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x152>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f8a2 	bl	8004780 <_ZN13NHDST7565_LCD11setTextLeftEv>
 800463c:	4603      	mov	r3, r0
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	701a      	strb	r2, [r3, #0]
				break;
 8004644:	e017      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8a6 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800464c:	4603      	mov	r3, r0
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	701a      	strb	r2, [r3, #0]
				break;
 8004654:	e00f      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f8b5 	bl	80047c6 <_ZN13NHDST7565_LCD12setTextRightEv>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	701a      	strb	r2, [r3, #0]
				break;
 8004664:	e007      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			default:
				NewXPos = setTextCenter();
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f896 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	701a      	strb	r2, [r3, #0]
				break;
 8004674:	bf00      	nop
		}
		switch(OldYPos)
 8004676:	7abb      	ldrb	r3, [r7, #10]
 8004678:	2b47      	cmp	r3, #71	; 0x47
 800467a:	d00b      	beq.n	8004694 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x180>
 800467c:	2b48      	cmp	r3, #72	; 0x48
 800467e:	d011      	beq.n	80046a4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x190>
 8004680:	2b46      	cmp	r3, #70	; 0x46
 8004682:	d117      	bne.n	80046b4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1a0>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f8b1 	bl	80047ec <_ZN13NHDST7565_LCD10setTextTopEv>
 800468a:	4603      	mov	r3, r0
 800468c:	461a      	mov	r2, r3
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	701a      	strb	r2, [r3, #0]
				break;
 8004692:	e017      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f8b7 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800469a:	4603      	mov	r3, r0
 800469c:	461a      	mov	r2, r3
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	701a      	strb	r2, [r3, #0]
				break;
 80046a2:	e00f      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f8d1 	bl	800484c <_ZN13NHDST7565_LCD13setTextBottomEv>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	701a      	strb	r2, [r3, #0]
				break;
 80046b2:	e007      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			default:
				NewYPos = setTextMiddle();
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f8a7 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	701a      	strb	r2, [r3, #0]
				break;
 80046c2:	bf00      	nop
		}
	}
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d816      	bhi.n	800470c <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	080046fb 	.word	0x080046fb
 80046ec:	08004701 	.word	0x08004701
 80046f0:	08004707 	.word	0x08004707
	{
		case LANDSCAPE_1:
			DisplayRotation = &u8g2_cb_r2;
 80046f4:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 80046f6:	60fb      	str	r3, [r7, #12]
			break;
 80046f8:	e00b      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case LANDSCAPE_2:
			DisplayRotation = &u8g2_cb_r0;
 80046fa:	4b1c      	ldr	r3, [pc, #112]	; (800476c <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 80046fc:	60fb      	str	r3, [r7, #12]
			break;
 80046fe:	e008      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_1:
			DisplayRotation = &u8g2_cb_r1;
 8004700:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <_ZN13NHDST7565_LCD8setupLcdEv+0xa4>)
 8004702:	60fb      	str	r3, [r7, #12]
			break;
 8004704:	e005      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_2:
			DisplayRotation = &u8g2_cb_r3;
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <_ZN13NHDST7565_LCD8setupLcdEv+0xa8>)
 8004708:	60fb      	str	r3, [r7, #12]
			break;
 800470a:	e002      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		default:
			DisplayRotation = &u8g2_cb_r0;
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 800470e:	60fb      	str	r3, [r7, #12]
			break;
 8004710:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <_ZN13NHDST7565_LCD8setupLcdEv+0xac>)
 800471a:	4a18      	ldr	r2, [pc, #96]	; (800477c <_ZN13NHDST7565_LCD8setupLcdEv+0xb0>)
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	f7fc febb 	bl	8001498 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3324      	adds	r3, #36	; 0x24
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fcfd 	bl	8003126 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3324      	adds	r3, #36	; 0x24
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fd06 	bl	8003144 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3324      	adds	r3, #36	; 0x24
 800473c:	2101      	movs	r1, #1
 800473e:	4618      	mov	r0, r3
 8004740:	f7fd fb24 	bl	8001d8c <u8g2_SetFontMode>
	u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f7fd fe4c 	bl	80023f0 <u8g2_SetDrawColor>
	clearScreen();
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f8a6 	bl	80048aa <_ZN13NHDST7565_LCD11clearScreenEv>
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	080152ec 	.word	0x080152ec
 800476c:	080152d4 	.word	0x080152d4
 8004770:	080152e0 	.word	0x080152e0
 8004774:	080152f8 	.word	0x080152f8
 8004778:	080041ad 	.word	0x080041ad
 800477c:	080042b9 	.word	0x080042b9

08004780 <_ZN13NHDST7565_LCD11setTextLeftEv>:


uint8_t NHDST7565_LCD::setTextLeft()
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]
	//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <_ZN13NHDST7565_LCD13setTextCenterEv>:

uint8_t NHDST7565_LCD::setTextCenter()
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen) / 2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80047aa:	461a      	mov	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	7e1b      	ldrb	r3, [r3, #24]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	0fda      	lsrs	r2, r3, #31
 80047b4:	4413      	add	r3, r2
 80047b6:	105b      	asrs	r3, r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <_ZN13NHDST7565_LCD12setTextRightEv>:

uint8_t NHDST7565_LCD::setTextRight()
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	7e1b      	ldrb	r3, [r3, #24]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <_ZN13NHDST7565_LCD10setTextTopEv>:

uint8_t NHDST7565_LCD::setTextTop()
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
	NewPos = 1;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>:

uint8_t NHDST7565_LCD::setTextMiddle()
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]
	NewPos = ((dispParams.high - textToWrite.textHigh + 1) / 2) + (textToWrite.textHigh / 2) - textToWrite.textHigh;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	7e5b      	ldrb	r3, [r3, #25]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	3301      	adds	r3, #1
 8004824:	0fda      	lsrs	r2, r3, #31
 8004826:	4413      	add	r3, r2
 8004828:	105b      	asrs	r3, r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7e5b      	ldrb	r3, [r3, #25]
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	b2db      	uxtb	r3, r3
 8004834:	4413      	add	r3, r2
 8004836:	b2da      	uxtb	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7e5b      	ldrb	r3, [r3, #25]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <_ZN13NHDST7565_LCD13setTextBottomEv>:

uint8_t NHDST7565_LCD::setTextBottom()
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
	//	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	NewPos = dispParams.high - 1 - textToWrite.textHigh;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7e5b      	ldrb	r3, [r3, #25]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>:



void NHDST7565_LCD::clearFrameBuffer()
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3324      	adds	r3, #36	; 0x24
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fc59 	bl	800113a <u8g2_ClearBuffer>
}
 8004888:	bf00      	nop
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3324      	adds	r3, #36	; 0x24
 800489c:	4618      	mov	r0, r3
 800489e:	f7fc fcbf 	bl	8001220 <u8g2_SendBuffer>
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ffdf 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ffe9 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>:
	if(Color != figureColorSetted)
		u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
}

void NHDST7565_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos, const uint8_t *u8g2Font)
{
 80048c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c8:	b08f      	sub	sp, #60	; 0x3c
 80048ca:	af02      	add	r7, sp, #8
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	4611      	mov	r1, r2
 80048d2:	461a      	mov	r2, r3
 80048d4:	460b      	mov	r3, r1
 80048d6:	71fb      	strb	r3, [r7, #7]
 80048d8:	4613      	mov	r3, r2
 80048da:	71bb      	strb	r3, [r7, #6]
	uint8_t NewXPos = 0, NewYPos = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]
 80048e0:	2300      	movs	r3, #0
 80048e2:	75bb      	strb	r3, [r7, #22]
	assignTextParams(Text, u8g2Font);
 80048e4:	f107 0318 	add.w	r3, r7, #24
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f00c fd2f 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80048f0:	f107 0318 	add.w	r3, r7, #24
 80048f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f6:	4619      	mov	r1, r3
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff fd9b 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 80048fe:	f107 0318 	add.w	r3, r7, #24
 8004902:	4618      	mov	r0, r3
 8004904:	f00c fbbf 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004908:	f107 0017 	add.w	r0, r7, #23
 800490c:	79ba      	ldrb	r2, [r7, #6]
 800490e:	79f9      	ldrb	r1, [r7, #7]
 8004910:	f107 0316 	add.w	r3, r7, #22
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4603      	mov	r3, r0
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7ff fdfb 	bl	8004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
//				NewYPos = setTextMiddle();
//				break;
//		}
//	}

	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos + textToWrite.textHigh, textToWrite.text.c_str());
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004924:	7dfd      	ldrb	r5, [r7, #23]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	7e5a      	ldrb	r2, [r3, #25]
 800492a:	7dbb      	ldrb	r3, [r7, #22]
 800492c:	4413      	add	r3, r2
 800492e:	b2de      	uxtb	r6, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4618      	mov	r0, r3
 8004934:	f00c fcf4 	bl	8011320 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004938:	4603      	mov	r3, r0
 800493a:	4632      	mov	r2, r6
 800493c:	4629      	mov	r1, r5
 800493e:	4620      	mov	r0, r4
 8004940:	f7fd fae2 	bl	8001f08 <u8g2_DrawStr>
}
 8004944:	bf00      	nop
 8004946:	3734      	adds	r7, #52	; 0x34
 8004948:	46bd      	mov	sp, r7
 800494a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800494c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>:
}


uint8_t NHDST7565_LCD::drawMenuList(uint8_t FirstItemXPos, uint8_t FirstItemYPos, uint8_t FirsListItem, uint8_t ItemSel, const char **MenuItems, uint8_t MaxItems,
		bool WithCheckBox, bool MenuSelected, bool *ItemsChecked, const uint8_t *u8g2Font)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b0a3      	sub	sp, #140	; 0x8c
 8004950:	af02      	add	r7, sp, #8
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	461a      	mov	r2, r3
 800495a:	4603      	mov	r3, r0
 800495c:	70fb      	strb	r3, [r7, #3]
 800495e:	460b      	mov	r3, r1
 8004960:	70bb      	strb	r3, [r7, #2]
 8004962:	4613      	mov	r3, r2
 8004964:	707b      	strb	r3, [r7, #1]
	assignTextParams("", u8g2Font);
 8004966:	f107 0320 	add.w	r3, r7, #32
 800496a:	4618      	mov	r0, r3
 800496c:	f00c fa5a 	bl	8010e24 <_ZNSaIcEC1Ev>
 8004970:	f107 0220 	add.w	r2, r7, #32
 8004974:	f107 0308 	add.w	r3, r7, #8
 8004978:	49a8      	ldr	r1, [pc, #672]	; (8004c1c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d0>)
 800497a:	4618      	mov	r0, r3
 800497c:	f00c fd1a 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004980:	f107 0308 	add.w	r3, r7, #8
 8004984:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fd52 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004990:	f107 0308 	add.w	r3, r7, #8
 8004994:	4618      	mov	r0, r3
 8004996:	f00c fb76 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800499a:	f107 0320 	add.w	r3, r7, #32
 800499e:	4618      	mov	r0, r3
 80049a0:	f00c fa41 	bl	8010e26 <_ZNSaIcED1Ev>
	uint8_t MaxLines = (dispParams.high - FirstItemYPos) / (textToWrite.textHigh + MENU_ITEM_INTERLINE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80049aa:	461a      	mov	r2, r3
 80049ac:	78bb      	ldrb	r3, [r7, #2]
 80049ae:	1ad2      	subs	r2, r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	7e5b      	ldrb	r3, [r3, #25]
 80049b4:	3303      	adds	r3, #3
 80049b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80049ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t NextItem = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t MaxTexLen = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t FrameHigh = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	for(int Item = 0; Item < MaxLines; Item++)
 80049d0:	2300      	movs	r3, #0
 80049d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80049d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80049d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049da:	429a      	cmp	r2, r3
 80049dc:	f280 81bd 	bge.w	8004d5a <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40e>
	{
		NextItem = FirsListItem + Item;
 80049e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	787b      	ldrb	r3, [r7, #1]
 80049e6:	4413      	add	r3, r2
 80049e8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if(NextItem >= MaxItems)
 80049ec:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80049f0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80049f4:	429a      	cmp	r2, r3
 80049f6:	f080 81af 	bcs.w	8004d58 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40c>
			break;
		if(NextItem == ItemSel && MenuSelected)
 80049fa:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80049fe:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f040 810c 	bne.w	8004c20 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
 8004a08:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8107 	beq.w	8004c20 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
		{
			assignTextParams(MenuItems[NextItem], u8g2Font);
 8004a12:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a1c:	4413      	add	r3, r2
 8004a1e:	681c      	ldr	r4, [r3, #0]
 8004a20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a24:	4618      	mov	r0, r3
 8004a26:	f00c f9fd 	bl	8010e24 <_ZNSaIcEC1Ev>
 8004a2a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a32:	4621      	mov	r1, r4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f00c fcbd 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fcf5 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f00c fb19 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004a54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f00c f9e4 	bl	8010e26 <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 0);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3324      	adds	r3, #36	; 0x24
 8004a62:	2100      	movs	r1, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fd f991 	bl	8001d8c <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 0);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3324      	adds	r3, #36	; 0x24
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fd fcbd 	bl	80023f0 <u8g2_SetDrawColor>
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004a76:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a80:	4413      	add	r3, r2
 8004a82:	681c      	ldr	r4, [r3, #0]
 8004a84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f00c f9cb 	bl	8010e24 <_ZNSaIcEC1Ev>
 8004a8e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004a92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a96:	4621      	mov	r1, r4
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f00c fc8b 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	7e5b      	ldrb	r3, [r3, #25]
 8004aa2:	3303      	adds	r3, #3
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	78bb      	ldrb	r3, [r7, #2]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	b2d8      	uxtb	r0, r3
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fefe 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004aca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f00c fad9 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004ad4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f00c f9a4 	bl	8010e26 <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3324      	adds	r3, #36	; 0x24
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fd f951 	bl	8001d8c <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3324      	adds	r3, #36	; 0x24
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fd fc7d 	bl	80023f0 <u8g2_SetDrawColor>
			if(!WithCheckBox)
 8004af6:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004afa:	f083 0301 	eor.w	r3, r3, #1
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d033      	beq.n	8004b6c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x220>
			{
				u8g2_SetFont(&U8G2_Display, displayFonts[W_8_H_8_ICON]);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4610      	mov	r0, r2
 8004b14:	f7fd fa96 	bl	8002044 <u8g2_SetFont>
				u8g2_DrawGlyph(&U8G2_Display, FirstItemXPos + textToWrite.textLen + 1, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 1, 0x006F);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	7e1a      	ldrb	r2, [r3, #24]
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	4413      	add	r3, r2
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	b2dc      	uxtb	r4, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7e5a      	ldrb	r2, [r3, #25]
 8004b30:	78bb      	ldrb	r3, [r7, #2]
 8004b32:	4413      	add	r3, r2
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	7e5b      	ldrb	r3, [r3, #25]
 8004b3a:	3303      	adds	r3, #3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004b40:	b2c9      	uxtb	r1, r1
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	236f      	movs	r3, #111	; 0x6f
 8004b52:	4621      	mov	r1, r4
 8004b54:	f7fd f92a 	bl	8001dac <u8g2_DrawGlyph>
				u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	4619      	mov	r1, r3
 8004b64:	4610      	mov	r0, r2
 8004b66:	f7fd fa6d 	bl	8002044 <u8g2_SetFont>
			if(!WithCheckBox)
 8004b6a:	e0e7      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			}
			else
			{
				if(ItemsChecked[NextItem])
 8004b6c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004b70:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004b74:	4413      	add	r3, r2
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d034      	beq.n	8004be6 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x29a>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004b88:	3b0b      	subs	r3, #11
 8004b8a:	b2d9      	uxtb	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	7e5b      	ldrb	r3, [r3, #25]
 8004b90:	3303      	adds	r3, #3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	78bb      	ldrb	r3, [r7, #2]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2308      	movs	r3, #8
 8004baa:	f7fc f9ac 	bl	8000f06 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004bba:	3b09      	subs	r3, #9
 8004bbc:	b2d9      	uxtb	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	7e5b      	ldrb	r3, [r3, #25]
 8004bc2:	3303      	adds	r3, #3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	78bb      	ldrb	r3, [r7, #2]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	2304      	movs	r3, #4
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	2304      	movs	r3, #4
 8004be0:	f7fc f95a 	bl	8000e98 <u8g2_DrawBox>
			if(!WithCheckBox)
 8004be4:	e0aa      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004bf2:	3b0b      	subs	r3, #11
 8004bf4:	b2d9      	uxtb	r1, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	7e5b      	ldrb	r3, [r3, #25]
 8004bfa:	3303      	adds	r3, #3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	78bb      	ldrb	r3, [r7, #2]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	2308      	movs	r3, #8
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	2308      	movs	r3, #8
 8004c14:	f7fc f977 	bl	8000f06 <u8g2_DrawFrame>
			if(!WithCheckBox)
 8004c18:	e090      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
 8004c1a:	bf00      	nop
 8004c1c:	0801219c 	.word	0x0801219c
				}
			}
		}
		else
		{
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004c20:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c2a:	4413      	add	r3, r2
 8004c2c:	681c      	ldr	r4, [r3, #0]
 8004c2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c32:	4618      	mov	r0, r3
 8004c34:	f00c f8f6 	bl	8010e24 <_ZNSaIcEC1Ev>
 8004c38:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8004c3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c40:	4621      	mov	r1, r4
 8004c42:	4618      	mov	r0, r3
 8004c44:	f00c fbb6 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	7e5b      	ldrb	r3, [r3, #25]
 8004c4c:	3303      	adds	r3, #3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	fb02 f303 	mul.w	r3, r2, r3
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	78bb      	ldrb	r3, [r7, #2]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	b2d8      	uxtb	r0, r3
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fe29 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004c74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f00c fa04 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004c7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c82:	4618      	mov	r0, r3
 8004c84:	f00c f8cf 	bl	8010e26 <_ZNSaIcED1Ev>
			if(WithCheckBox)
 8004c88:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d055      	beq.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			{
				if(ItemsChecked[NextItem])
 8004c90:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c94:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004c98:	4413      	add	r3, r2
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d034      	beq.n	8004d0a <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3be>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004cac:	3b0b      	subs	r3, #11
 8004cae:	b2d9      	uxtb	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7e5b      	ldrb	r3, [r3, #25]
 8004cb4:	3303      	adds	r3, #3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	78bb      	ldrb	r3, [r7, #2]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	2308      	movs	r3, #8
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f7fc f91a 	bl	8000f06 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004cde:	3b09      	subs	r3, #9
 8004ce0:	b2d9      	uxtb	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7e5b      	ldrb	r3, [r3, #25]
 8004ce6:	3303      	adds	r3, #3
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	78bb      	ldrb	r3, [r7, #2]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	2304      	movs	r3, #4
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2304      	movs	r3, #4
 8004d04:	f7fc f8c8 	bl	8000e98 <u8g2_DrawBox>
 8004d08:	e018      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d16:	3b0b      	subs	r3, #11
 8004d18:	b2d9      	uxtb	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7e5b      	ldrb	r3, [r3, #25]
 8004d1e:	3303      	adds	r3, #3
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	78bb      	ldrb	r3, [r7, #2]
 8004d2e:	4413      	add	r3, r2
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	2308      	movs	r3, #8
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	2308      	movs	r3, #8
 8004d38:	f7fc f8e5 	bl	8000f06 <u8g2_DrawFrame>
				}
			}
		}
		if(MaxTexLen < textToWrite.textLen)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7e1b      	ldrb	r3, [r3, #24]
 8004d40:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d203      	bcs.n	8004d50 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x404>
			MaxTexLen = textToWrite.textLen;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7e1b      	ldrb	r3, [r3, #24]
 8004d4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for(int Item = 0; Item < MaxLines; Item++)
 8004d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d52:	3301      	adds	r3, #1
 8004d54:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d56:	e63d      	b.n	80049d4 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x88>
			break;
 8004d58:	bf00      	nop
	}
	if((textToWrite.textHigh * (MaxItems + 1)) + 2 < dispParams.high - FirstItemYPos - 1 )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	7e5b      	ldrb	r3, [r3, #25]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004d64:	3301      	adds	r3, #1
 8004d66:	fb03 f302 	mul.w	r3, r3, r2
 8004d6a:	1c9a      	adds	r2, r3, #2
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004d72:	4619      	mov	r1, r3
 8004d74:	78bb      	ldrb	r3, [r7, #2]
 8004d76:	1acb      	subs	r3, r1, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	da0c      	bge.n	8004d98 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x44c>
		FrameHigh = (textToWrite.textHigh * (MaxItems + 1)) + 2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7e5b      	ldrb	r3, [r3, #25]
 8004d82:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8004d86:	3201      	adds	r2, #1
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3302      	adds	r3, #2
 8004d92:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004d96:	e008      	b.n	8004daa <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x45e>
	else
		FrameHigh = dispParams.high - FirstItemYPos - 1;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004d9e:	78bb      	ldrb	r3, [r7, #2]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	if(!WithCheckBox)
 8004daa:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004dae:	f083 0301 	eor.w	r3, r3, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d015      	beq.n	8004de4 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x498>
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, MaxTexLen + 10, FrameHigh, 3);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b2d9      	uxtb	r1, r3
 8004dc4:	78bb      	ldrb	r3, [r7, #2]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004dce:	330a      	adds	r3, #10
 8004dd0:	b2dc      	uxtb	r4, r3
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	4623      	mov	r3, r4
 8004dde:	f7fc f8f3 	bl	8000fc8 <u8g2_DrawRFrame>
 8004de2:	e019      	b.n	8004e18 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x4cc>
	}
	else
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, dispParams.width - FirstItemXPos - 1, FrameHigh, 3);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b2d9      	uxtb	r1, r3
 8004df0:	78bb      	ldrb	r3, [r7, #2]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b2dc      	uxtb	r4, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	2303      	movs	r3, #3
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	4622      	mov	r2, r4
 8004e14:	f7fc f8d8 	bl	8000fc8 <u8g2_DrawRFrame>
	}
	return MaxLines;
 8004e18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3784      	adds	r7, #132	; 0x84
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}

08004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>:

void NHDST7565_LCD::drawSymbol(uint8_t XPos, uint8_t YPos, const uint8_t *SymbolFont, uint16_t SymbolCode)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08e      	sub	sp, #56	; 0x38
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	72fb      	strb	r3, [r7, #11]
 8004e32:	4613      	mov	r3, r2
 8004e34:	72bb      	strb	r3, [r7, #10]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	74fb      	strb	r3, [r7, #19]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	74bb      	strb	r3, [r7, #18]
	assignTextParams("", SymbolFont);
 8004e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e42:	4618      	mov	r0, r3
 8004e44:	f00b ffee 	bl	8010e24 <_ZNSaIcEC1Ev>
 8004e48:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004e4c:	f107 0314 	add.w	r3, r7, #20
 8004e50:	4915      	ldr	r1, [pc, #84]	; (8004ea8 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht+0x84>)
 8004e52:	4618      	mov	r0, r3
 8004e54:	f00c faae 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff fae7 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004e66:	f107 0314 	add.w	r3, r7, #20
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f00c f90b 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e74:	4618      	mov	r0, r3
 8004e76:	f00b ffd6 	bl	8010e26 <_ZNSaIcED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004e7a:	f107 0013 	add.w	r0, r7, #19
 8004e7e:	7aba      	ldrb	r2, [r7, #10]
 8004e80:	7af9      	ldrb	r1, [r7, #11]
 8004e82:	f107 0312 	add.w	r3, r7, #18
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4603      	mov	r3, r0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff fb42 	bl	8004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
	u8g2_DrawGlyph(&U8G2_Display, NewXPos, NewYPos, SymbolCode);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e96:	7cf9      	ldrb	r1, [r7, #19]
 8004e98:	7cba      	ldrb	r2, [r7, #18]
 8004e9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e9c:	f7fc ff86 	bl	8001dac <u8g2_DrawGlyph>
}
 8004ea0:	bf00      	nop
 8004ea2:	3730      	adds	r7, #48	; 0x30
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	0801219c 	.word	0x0801219c

08004eac <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:


void NHDST7565_LCD::drawTimeDate(String Time, String Date)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b092      	sub	sp, #72	; 0x48
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
	drawString(Time, LEFT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8004eb8:	f107 0310 	add.w	r3, r7, #16
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f00c fa45 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004eca:	f107 0110 	add.w	r1, r7, #16
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	2346      	movs	r3, #70	; 0x46
 8004ed2:	2282      	movs	r2, #130	; 0x82
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff fcf6 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004eda:	f107 0310 	add.w	r3, r7, #16
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f00c f8d1 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	drawString(Date, RIGHT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8004ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f00c fa2f 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ef6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	2346      	movs	r3, #70	; 0x46
 8004efe:	2284      	movs	r2, #132	; 0x84
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fce0 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f00c f8bb 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004f10:	bf00      	nop
 8004f12:	3740      	adds	r7, #64	; 0x40
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

void NHDST7565_LCD::drawFullScreenPopUp(String Text, uint16_t Delay)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08c      	sub	sp, #48	; 0x30
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
	clearFrameBuffer();
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff fca5 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	u8g2_DrawRFrame(&U8G2_Display, 1, 1, dispParams.width - 1, dispParams.high - 1, 2);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b2d9      	uxtb	r1, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2202      	movs	r2, #2
 8004f48:	9201      	str	r2, [sp, #4]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2101      	movs	r1, #1
 8004f52:	f7fc f839 	bl	8000fc8 <u8g2_DrawRFrame>
	drawString(Text, CENTER_POS, MIDDLE_POS, displayFonts[W_6_H_13_B]);
 8004f56:	f107 0310 	add.w	r3, r7, #16
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f00c f9f6 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f68:	f107 0110 	add.w	r1, r7, #16
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	2347      	movs	r3, #71	; 0x47
 8004f70:	2283      	movs	r2, #131	; 0x83
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff fca7 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004f78:	f107 0310 	add.w	r3, r7, #16
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f00c f882 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	sendFrameBuffer();
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff fc84 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
	HAL_Delay(Delay);
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f007 f806 	bl	800bf9c <HAL_Delay>
}
 8004f90:	bf00      	nop
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 8004fa2:	6839      	ldr	r1, [r7, #0]
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f808 	bl	8004fba <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f083 0301 	eor.w	r3, r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f00c f9ac 	bl	8011324 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bf0c      	ite	eq
 8004fd2:	2301      	moveq	r3, #1
 8004fd4:	2300      	movne	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <_ZN12STM32_EEPROM6formatEv>:

// ERASE

//##########################################################################################################
bool STM32_EEPROM::format(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	bool RetVal = false;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	77fb      	strb	r3, [r7, #31]
	uint32_t	error;
	HAL_FLASH_Unlock();
 8004fec:	f007 fdda 	bl	800cba4 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	617b      	str	r3, [r7, #20]
	flashErase.Banks = FLASH_BANK_1;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 8004ff8:	4b12      	ldr	r3, [pc, #72]	; (8005044 <_ZN12STM32_EEPROM6formatEv+0x64>)
 8004ffa:	613b      	str	r3, [r7, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60bb      	str	r3, [r7, #8]
	if(HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8005000:	f107 0218 	add.w	r2, r7, #24
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f007 feb2 	bl	800cd74 <HAL_FLASHEx_Erase>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <_ZN12STM32_EEPROM6formatEv+0x56>
	{
		HAL_FLASH_Lock();
 8005020:	f007 fde6 	bl	800cbf0 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d002      	beq.n	8005032 <_ZN12STM32_EEPROM6formatEv+0x52>
			RetVal = false;
 800502c:	2300      	movs	r3, #0
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e001      	b.n	8005036 <_ZN12STM32_EEPROM6formatEv+0x56>
		else
			RetVal = true;
 8005032:	2301      	movs	r3, #1
 8005034:	77fb      	strb	r3, [r7, #31]
	}
	HAL_FLASH_Lock();
 8005036:	f007 fddb 	bl	800cbf0 <HAL_FLASH_Lock>
	return RetVal;
 800503a:	7ffb      	ldrb	r3, [r7, #31]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3720      	adds	r7, #32
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	0801f400 	.word	0x0801f400

08005048 <_ZN12STM32_EEPROM10singleReadEtPm>:
//##########################################################################################################



bool STM32_EEPROM::singleRead(uint16_t VirtualAddress, uint32_t* Data)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	460b      	mov	r3, r1
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	817b      	strh	r3, [r7, #10]
	if(VirtualAddress >= (_EEPROM_FLASH_PAGE_SIZE/4))
 8005056:	897b      	ldrh	r3, [r7, #10]
 8005058:	2bff      	cmp	r3, #255	; 0xff
 800505a:	d901      	bls.n	8005060 <_ZN12STM32_EEPROM10singleReadEtPm+0x18>
		return false;
 800505c:	2300      	movs	r3, #0
 800505e:	e009      	b.n	8005074 <_ZN12STM32_EEPROM10singleReadEtPm+0x2c>
	*Data =  (*(uint32_t*)((VirtualAddress*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 8005060:	897b      	ldrh	r3, [r7, #10]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005068:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	601a      	str	r2, [r3, #0]
	return true;
 8005072:	2301      	movs	r3, #1
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <_ZN12STM32_EEPROM9multiReadEttPm>:


bool STM32_EEPROM::multiRead(uint16_t StartVirtualAddress,uint16_t HowMuchToRead, uint32_t* Data)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	817b      	strh	r3, [r7, #10]
 800508c:	4613      	mov	r3, r2
 800508e:	813b      	strh	r3, [r7, #8]
	bool RetVal = false;
 8005090:	2300      	movs	r3, #0
 8005092:	75fb      	strb	r3, [r7, #23]
	if((StartVirtualAddress+HowMuchToRead) <= (_EEPROM_FLASH_PAGE_SIZE/4))
 8005094:	897a      	ldrh	r2, [r7, #10]
 8005096:	893b      	ldrh	r3, [r7, #8]
 8005098:	4413      	add	r3, r2
 800509a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509e:	dc19      	bgt.n	80050d4 <_ZN12STM32_EEPROM9multiReadEttPm+0x56>
	{
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 80050a0:	897b      	ldrh	r3, [r7, #10]
 80050a2:	82bb      	strh	r3, [r7, #20]
 80050a4:	8aba      	ldrh	r2, [r7, #20]
 80050a6:	8939      	ldrh	r1, [r7, #8]
 80050a8:	897b      	ldrh	r3, [r7, #10]
 80050aa:	440b      	add	r3, r1
 80050ac:	429a      	cmp	r2, r3
 80050ae:	da0f      	bge.n	80050d0 <_ZN12STM32_EEPROM9multiReadEttPm+0x52>
		{
			*Data =  (*(uint32_t*)((i*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 80050b0:	8abb      	ldrh	r3, [r7, #20]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80050b8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
			Data++;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	607b      	str	r3, [r7, #4]
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 80050c8:	8abb      	ldrh	r3, [r7, #20]
 80050ca:	3301      	adds	r3, #1
 80050cc:	82bb      	strh	r3, [r7, #20]
 80050ce:	e7e9      	b.n	80050a4 <_ZN12STM32_EEPROM9multiReadEttPm+0x26>
		}
		RetVal = true;
 80050d0:	2301      	movs	r3, #1
 80050d2:	75fb      	strb	r3, [r7, #23]
	}
	return RetVal;
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <_ZN12STM32_EEPROM5writeEPm>:
// SCRITTURA

//##########################################################################################################

bool STM32_EEPROM::write(uint32_t Data[])
{
 80050e0:	b590      	push	{r4, r7, lr}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
    uint32_t OldValue = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60bb      	str	r3, [r7, #8]
    bool RetVal = false;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
	if(format())
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff ff74 	bl	8004fe0 <_ZN12STM32_EEPROM6formatEv>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d03c      	beq.n	8005178 <_ZN12STM32_EEPROM5writeEPm+0x98>
	{
		HAL_FLASH_Unlock();
 80050fe:	f007 fd51 	bl	800cba4 <HAL_FLASH_Unlock>
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8005102:	2300      	movs	r3, #0
 8005104:	81bb      	strh	r3, [r7, #12]
 8005106:	89bb      	ldrh	r3, [r7, #12]
 8005108:	2bff      	cmp	r3, #255	; 0xff
 800510a:	d833      	bhi.n	8005174 <_ZN12STM32_EEPROM5writeEPm+0x94>
		{
			singleRead(i, &OldValue);
 800510c:	f107 0208 	add.w	r2, r7, #8
 8005110:	89bb      	ldrh	r3, [r7, #12]
 8005112:	4619      	mov	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ff97 	bl	8005048 <_ZN12STM32_EEPROM10singleReadEtPm>
			if(Data[i] != OldValue)
 800511a:	89bb      	ldrh	r3, [r7, #12]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	4413      	add	r3, r2
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	d020      	beq.n	800516c <_ZN12STM32_EEPROM5writeEPm+0x8c>
			{
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (i*4) + _EEPROM_FLASH_PAGE_ADDRESS, (uint64_t)Data[i]) != HAL_OK)
 800512a:	89bb      	ldrh	r3, [r7, #12]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8005132:	f501 31fa 	add.w	r1, r1, #128000	; 0x1f400
 8005136:	89bb      	ldrh	r3, [r7, #12]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	4413      	add	r3, r2
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f04f 0400 	mov.w	r4, #0
 8005144:	461a      	mov	r2, r3
 8005146:	4623      	mov	r3, r4
 8005148:	2002      	movs	r0, #2
 800514a:	f007 fc7b 	bl	800ca44 <HAL_FLASH_Program>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <_ZN12STM32_EEPROM5writeEPm+0x88>
				{
					HAL_FLASH_Lock();
 800515e:	f007 fd47 	bl	800cbf0 <HAL_FLASH_Lock>
					RetVal = false;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
					break;
 8005166:	e005      	b.n	8005174 <_ZN12STM32_EEPROM5writeEPm+0x94>
				}
				RetVal = true;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 800516c:	89bb      	ldrh	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	81bb      	strh	r3, [r7, #12]
 8005172:	e7c8      	b.n	8005106 <_ZN12STM32_EEPROM5writeEPm+0x26>
			}
		}
		HAL_FLASH_Lock();
 8005174:	f007 fd3c 	bl	800cbf0 <HAL_FLASH_Lock>
	}
	return RetVal;
 8005178:	7bfb      	ldrb	r3, [r7, #15]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bd90      	pop	{r4, r7, pc}

08005182 <_ZN12STM32_EEPROM16transferRamToMemEPm>:

//##########################################################################################################


void STM32_EEPROM::transferRamToMem(uint32_t *RamVector)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
    write(RamVector);
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff ffa6 	bl	80050e0 <_ZN12STM32_EEPROM5writeEPm>
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <_ZN12STM32_EEPROM15tranferMemToRamEPm>:

void STM32_EEPROM::tranferMemToRam(uint32_t *RamVector)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
    multiRead(EEPROM_VIRTUAL_ADDR_BEGIN, MAX_DIM_EEPROM_ARRAY, RamVector);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051ac:	2100      	movs	r1, #0
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff ff65 	bl	800507e <_ZN12STM32_EEPROM9multiReadEttPm>
}
 80051b4:	bf00      	nop
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <_ZN12STM32_EEPROM11eraseMemoryEv>:

void STM32_EEPROM::eraseMemory()
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	format();
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff ff0b 	bl	8004fe0 <_ZN12STM32_EEPROM6formatEv>
	tranferMemToRam(eepromArray);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4619      	mov	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff ffe3 	bl	800519c <_ZN12STM32_EEPROM15tranferMemToRamEPm>
    return;
 80051d6:	bf00      	nop
}
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <_ZN12STM32_EEPROM11memoryEmptyEv>:


bool STM32_EEPROM::memoryEmpty()
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	81fb      	strh	r3, [r7, #14]
 80051ea:	89fb      	ldrh	r3, [r7, #14]
 80051ec:	2bff      	cmp	r3, #255	; 0xff
 80051ee:	d80e      	bhi.n	800520e <_ZN12STM32_EEPROM11memoryEmptyEv+0x30>
    {
        if(eepromArray[i] != BLANK_VALUE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	89fb      	ldrh	r3, [r7, #14]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d001      	beq.n	8005206 <_ZN12STM32_EEPROM11memoryEmptyEv+0x28>
            return false;
 8005202:	2300      	movs	r3, #0
 8005204:	e004      	b.n	8005210 <_ZN12STM32_EEPROM11memoryEmptyEv+0x32>
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 8005206:	89fb      	ldrh	r3, [r7, #14]
 8005208:	3301      	adds	r3, #1
 800520a:	81fb      	strh	r3, [r7, #14]
 800520c:	e7ed      	b.n	80051ea <_ZN12STM32_EEPROM11memoryEmptyEv+0xc>
    }
    return true;
 800520e:	2301      	movs	r3, #1
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <_ZN12STM32_EEPROMC1Ev>:


STM32_EEPROM::STM32_EEPROM()
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 8005228:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800522c:	f00b fddc 	bl	8010de8 <_Znaj>
 8005230:	4603      	mov	r3, r0
 8005232:	461a      	mov	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
	tranferMemToRam(eepromArray);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff ffac 	bl	800519c <_ZN12STM32_EEPROM15tranferMemToRamEPm>
}
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>:

void STM32_EEPROM::writeToMemory(uint16_t Address, uint32_t Val, bool Transfer)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	461a      	mov	r2, r3
 800525a:	460b      	mov	r3, r1
 800525c:	817b      	strh	r3, [r7, #10]
 800525e:	4613      	mov	r3, r2
 8005260:	727b      	strb	r3, [r7, #9]
	eepromArray[Address] = Val;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	897b      	ldrh	r3, [r7, #10]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	601a      	str	r2, [r3, #0]
	if(Transfer)
 8005270:	7a7b      	ldrb	r3, [r7, #9]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <_ZN12STM32_EEPROM13writeToMemoryEtmb+0x34>
	{
		transferRamToMem(eepromArray);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4619      	mov	r1, r3
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7ff ff80 	bl	8005182 <_ZN12STM32_EEPROM16transferRamToMemEPm>
	}
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>:

void STM32_EEPROM::loadMemory(uint16_t Address, uint32_t *Val)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	460b      	mov	r3, r1
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	817b      	strh	r3, [r7, #10]
	tranferMemToRam(eepromArray);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4619      	mov	r1, r3
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff ff7c 	bl	800519c <_ZN12STM32_EEPROM15tranferMemToRamEPm>
	*Val = eepromArray[Address];
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	897b      	ldrh	r3, [r7, #10]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	bool State = false;
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	889b      	ldrh	r3, [r3, #4]
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f008 f8c8 	bl	800d468 <HAL_GPIO_ReadPin>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bf0c      	ite	eq
 80052de:	2301      	moveq	r3, #1
 80052e0:	2300      	movne	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	4611      	mov	r1, r2
 8005302:	461a      	mov	r2, r3
 8005304:	460b      	mov	r3, r1
 8005306:	80fb      	strh	r3, [r7, #6]
 8005308:	4613      	mov	r3, r2
 800530a:	80bb      	strh	r3, [r7, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	609a      	str	r2, [r3, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	819a      	strh	r2, [r3, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	88fa      	ldrh	r2, [r7, #6]
 8005328:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	88ba      	ldrh	r2, [r7, #4]
 800532e:	819a      	strh	r2, [r3, #12]
}
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 8005344:	2302      	movs	r3, #2
 8005346:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 8005348:	2300      	movs	r3, #0
 800534a:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ffb5 	bl	80052bc <_ZN6BUTTON7readPinEv>
 8005352:	4603      	mov	r3, r0
 8005354:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 8005356:	7b7b      	ldrb	r3, [r7, #13]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d03c      	beq.n	80053d6 <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 800535c:	f006 fe14 	bl	800bf88 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 8005366:	7b7b      	ldrb	r3, [r7, #13]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d015      	beq.n	8005398 <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff ffa5 	bl	80052bc <_ZN6BUTTON7readPinEv>
 8005372:	4603      	mov	r3, r0
 8005374:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 8005376:	f006 fe07 	bl	800bf88 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	8992      	ldrh	r2, [r2, #12]
 8005386:	4293      	cmp	r3, r2
 8005388:	bf8c      	ite	hi
 800538a:	2301      	movhi	r3, #1
 800538c:	2300      	movls	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0e8      	beq.n	8005366 <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 8005394:	2301      	movs	r3, #1
 8005396:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 8005398:	7bbb      	ldrb	r3, [r7, #14]
 800539a:	f083 0301 	eor.w	r3, r3, #1
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	7b9b      	ldrb	r3, [r3, #14]
 80053a8:	f083 0301 	eor.w	r3, r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	e008      	b.n	80053ca <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	739a      	strb	r2, [r3, #14]
 80053be:	e004      	b.n	80053ca <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 80053d0:	200a      	movs	r0, #10
 80053d2:	f006 fde3 	bl	800bf9c <HAL_Delay>
	}
	return Status;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 80053e0:	b590      	push	{r4, r7, lr}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 80053e8:	2010      	movs	r0, #16
 80053ea:	f00b fcff 	bl	8010dec <_Znwj>
 80053ee:	4603      	mov	r3, r0
 80053f0:	461c      	mov	r4, r3
 80053f2:	23fa      	movs	r3, #250	; 0xfa
 80053f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053f8:	491b      	ldr	r1, [pc, #108]	; (8005468 <_ZN8DryerKeyC1Ev+0x88>)
 80053fa:	4620      	mov	r0, r4
 80053fc:	f7ff ff7b 	bl	80052f6 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 8005404:	2010      	movs	r0, #16
 8005406:	f00b fcf1 	bl	8010dec <_Znwj>
 800540a:	4603      	mov	r3, r0
 800540c:	461c      	mov	r4, r3
 800540e:	23fa      	movs	r3, #250	; 0xfa
 8005410:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005414:	4914      	ldr	r1, [pc, #80]	; (8005468 <_ZN8DryerKeyC1Ev+0x88>)
 8005416:	4620      	mov	r0, r4
 8005418:	f7ff ff6d 	bl	80052f6 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 500);
 8005420:	2010      	movs	r0, #16
 8005422:	f00b fce3 	bl	8010dec <_Znwj>
 8005426:	4603      	mov	r3, r0
 8005428:	461c      	mov	r4, r3
 800542a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800542e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005432:	490d      	ldr	r1, [pc, #52]	; (8005468 <_ZN8DryerKeyC1Ev+0x88>)
 8005434:	4620      	mov	r0, r4
 8005436:	f7ff ff5e 	bl	80052f6 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 500);
 800543e:	2010      	movs	r0, #16
 8005440:	f00b fcd4 	bl	8010dec <_Znwj>
 8005444:	4603      	mov	r3, r0
 8005446:	461c      	mov	r4, r3
 8005448:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800544c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005450:	4905      	ldr	r1, [pc, #20]	; (8005468 <_ZN8DryerKeyC1Ev+0x88>)
 8005452:	4620      	mov	r0, r4
 8005454:	f7ff ff4f 	bl	80052f6 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60dc      	str	r4, [r3, #12]
}
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	bd90      	pop	{r4, r7, pc}
 8005466:	bf00      	nop
 8005468:	40010c00 	.word	0x40010c00

0800546c <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8005474:	2308      	movs	r3, #8
 8005476:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b03      	cmp	r3, #3
 8005480:	dc1d      	bgt.n	80054be <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff ff56 	bl	800533c <_ZN6BUTTON11checkButtonEv>
 8005490:	4603      	mov	r3, r0
 8005492:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	75fb      	strb	r3, [r7, #23]
 800549e:	e006      	b.n	80054ae <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d103      	bne.n	80054ae <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	3304      	adds	r3, #4
 80054ac:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d103      	bne.n	80054bc <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	3301      	adds	r3, #1
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e7df      	b.n	800547c <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 80054bc:	bf00      	nop
		}
	}
	return KeyPressed;
 80054be:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <_ZN4RELE6setPinE9PIN_STATE+0x20>
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d003      	beq.n	80054e8 <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	719a      	strb	r2, [r3, #6]
 80054e6:	e007      	b.n	80054f8 <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	799b      	ldrb	r3, [r3, #6]
 80054ec:	78fa      	ldrb	r2, [r7, #3]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d002      	beq.n	80054f8 <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	78fa      	ldrb	r2, [r7, #3]
 80054f6:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	8899      	ldrh	r1, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	799b      	ldrb	r3, [r3, #6]
 8005504:	461a      	mov	r2, r3
 8005506:	f007 ffd5 	bl	800d4b4 <HAL_GPIO_WritePin>
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	4611      	mov	r1, r2
 800551e:	461a      	mov	r2, r3
 8005520:	460b      	mov	r3, r1
 8005522:	80fb      	strh	r3, [r7, #6]
 8005524:	4613      	mov	r3, r2
 8005526:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	797a      	ldrb	r2, [r7, #5]
 8005538:	719a      	strb	r2, [r3, #6]

}
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	460b      	mov	r3, r1
 8005550:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ffb6 	bl	80054c8 <_ZN4RELE6setPinE9PIN_STATE>
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f00b fed5 	bl	8011320 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005576:	4602      	mov	r2, r0
			     __idx, __base); }
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4904      	ldr	r1, [pc, #16]	; (8005590 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8005580:	4804      	ldr	r0, [pc, #16]	; (8005594 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8005582:	f000 fbae 	bl	8005ce2 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8005586:	4603      	mov	r3, r0
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	080121a8 	.word	0x080121a8
 8005594:	080119b1 	.word	0x080119b1

08005598 <_ZN13SerialMessage11writeSerialEv>:
//{
//	RxReady = true;
//}

void SerialMessage::writeSerial()
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f00b fda0 	bl	80110e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80055a8:	4603      	mov	r3, r0
 80055aa:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f00b feb6 	bl	8011320 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80055b4:	4601      	mov	r1, r0
 80055b6:	89fa      	ldrh	r2, [r7, #14]
 80055b8:	2364      	movs	r3, #100	; 0x64
 80055ba:	4803      	ldr	r0, [pc, #12]	; (80055c8 <_ZN13SerialMessage11writeSerialEv+0x30>)
 80055bc:	f00a ff3c 	bl	8010438 <HAL_UART_Transmit>
}
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	200007c4 	.word	0x200007c4

080055cc <_ZN13SerialMessageC1Ev>:


SerialMessage::SerialMessage()
 80055cc:	b590      	push	{r4, r7, lr}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	687c      	ldr	r4, [r7, #4]
 80055d6:	f107 0308 	add.w	r3, r7, #8
 80055da:	4618      	mov	r0, r3
 80055dc:	f00b fc22 	bl	8010e24 <_ZNSaIcEC1Ev>
 80055e0:	f107 0308 	add.w	r3, r7, #8
 80055e4:	461a      	mov	r2, r3
 80055e6:	4918      	ldr	r1, [pc, #96]	; (8005648 <_ZN13SerialMessageC1Ev+0x7c>)
 80055e8:	4620      	mov	r0, r4
 80055ea:	f00b fee3 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80055ee:	f107 0308 	add.w	r3, r7, #8
 80055f2:	4618      	mov	r0, r3
 80055f4:	f00b fc17 	bl	8010e26 <_ZNSaIcED1Ev>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f103 0418 	add.w	r4, r3, #24
 80055fe:	f107 030c 	add.w	r3, r7, #12
 8005602:	4618      	mov	r0, r3
 8005604:	f00b fc0e 	bl	8010e24 <_ZNSaIcEC1Ev>
 8005608:	f107 030c 	add.w	r3, r7, #12
 800560c:	461a      	mov	r2, r3
 800560e:	490e      	ldr	r1, [pc, #56]	; (8005648 <_ZN13SerialMessageC1Ev+0x7c>)
 8005610:	4620      	mov	r0, r4
 8005612:	f00b fecf 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005616:	f107 030c 	add.w	r3, r7, #12
 800561a:	4618      	mov	r0, r3
 800561c:	f00b fc03 	bl	8010e26 <_ZNSaIcED1Ev>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f04f 32ff 	mov.w	r2, #4294967295
 800562e:	63da      	str	r2, [r3, #60]	; 0x3c
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
	rxBuffer = new uint8_t[RECEIVE_BUFFER_LEN];
 8005630:	2019      	movs	r0, #25
 8005632:	f00b fbd9 	bl	8010de8 <_Znaj>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	bd90      	pop	{r4, r7, pc}
 8005648:	080121b0 	.word	0x080121b0

0800564c <_ZN13SerialMessage11clearRxBuffEv>:

void SerialMessage::clearRxBuff()
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	memset(rxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	2219      	movs	r2, #25
 800565a:	2100      	movs	r1, #0
 800565c:	4618      	mov	r0, r3
 800565e:	f00b fff6 	bl	801164e <memset>
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void SerialMessage::sendMessage(String Message)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b089      	sub	sp, #36	; 0x24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
	if(!Message.empty())
 8005676:	6838      	ldr	r0, [r7, #0]
 8005678:	f00b fd3a 	bl	80110f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800567c:	4603      	mov	r3, r0
 800567e:	f083 0301 	eor.w	r3, r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d016      	beq.n	80056b6 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a>
	{
		serialBuffer = Message + "\n";
 8005688:	687c      	ldr	r4, [r7, #4]
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	4a0e      	ldr	r2, [pc, #56]	; (80056c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe fc62 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8005698:	f107 0308 	add.w	r3, r7, #8
 800569c:	4619      	mov	r1, r3
 800569e:	4620      	mov	r0, r4
 80056a0:	f00b fcfd 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80056a4:	f107 0308 	add.w	r3, r7, #8
 80056a8:	4618      	mov	r0, r3
 80056aa:	f00b fcec 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		writeSerial();
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff ff72 	bl	8005598 <_ZN13SerialMessage11writeSerialEv>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
	}
}
 80056b4:	e004      	b.n	80056c0 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
		serialBuffer = "Errore: messaggio mancante";
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4904      	ldr	r1, [pc, #16]	; (80056cc <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>)
 80056ba:	4618      	mov	r0, r3
 80056bc:	f00b fdc7 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 80056c0:	bf00      	nop
 80056c2:	3724      	adds	r7, #36	; 0x24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd90      	pop	{r4, r7, pc}
 80056c8:	080121b4 	.word	0x080121b4
 80056cc:	080121b8 	.word	0x080121b8

080056d0 <_ZN13SerialMessage17readSerialPollingEv>:

bool SerialMessage::readSerialPolling()
{
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b08d      	sub	sp, #52	; 0x34
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	bool Ready = false;
 80056d8:	2300      	movs	r3, #0
 80056da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	String CommandStr = "";
 80056de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056e2:	4618      	mov	r0, r3
 80056e4:	f00b fb9e 	bl	8010e24 <_ZNSaIcEC1Ev>
 80056e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80056ec:	f107 030c 	add.w	r3, r7, #12
 80056f0:	4929      	ldr	r1, [pc, #164]	; (8005798 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 80056f2:	4618      	mov	r0, r3
 80056f4:	f00b fe5e 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80056f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056fc:	4618      	mov	r0, r3
 80056fe:	f00b fb92 	bl	8010e26 <_ZNSaIcED1Ev>
	HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 100);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005706:	2364      	movs	r3, #100	; 0x64
 8005708:	2219      	movs	r2, #25
 800570a:	4824      	ldr	r0, [pc, #144]	; (800579c <_ZN13SerialMessage17readSerialPollingEv+0xcc>)
 800570c:	f00a ff2d 	bl	801056a <HAL_UART_Receive>
	if(rxBuffer[0] == '$' && (rxBuffer[3] == '=' || rxBuffer[3] == '$'))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b24      	cmp	r3, #36	; 0x24
 8005718:	d10f      	bne.n	800573a <_ZN13SerialMessage17readSerialPollingEv+0x6a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571e:	3303      	adds	r3, #3
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b3d      	cmp	r3, #61	; 0x3d
 8005724:	d005      	beq.n	8005732 <_ZN13SerialMessage17readSerialPollingEv+0x62>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572a:	3303      	adds	r3, #3
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b24      	cmp	r3, #36	; 0x24
 8005730:	d103      	bne.n	800573a <_ZN13SerialMessage17readSerialPollingEv+0x6a>
	{
		Ready = true;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005738:	e021      	b.n	800577e <_ZN13SerialMessage17readSerialPollingEv+0xae>
	}
	else
	{
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 800573a:	2300      	movs	r3, #0
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	2b18      	cmp	r3, #24
 8005742:	dc0e      	bgt.n	8005762 <_ZN13SerialMessage17readSerialPollingEv+0x92>
		{
			CommandStr.push_back(rxBuffer[i]);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	4413      	add	r3, r2
 800574c:	781a      	ldrb	r2, [r3, #0]
 800574e:	f107 030c 	add.w	r3, r7, #12
 8005752:	4611      	mov	r1, r2
 8005754:	4618      	mov	r0, r3
 8005756:	f00b fcd3 	bl	8011100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	3301      	adds	r3, #1
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005760:	e7ed      	b.n	800573e <_ZN13SerialMessage17readSerialPollingEv+0x6e>
		}
		commandReceived = CommandStr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3318      	adds	r3, #24
 8005766:	f107 020c 	add.w	r2, r7, #12
 800576a:	4611      	mov	r1, r2
 800576c:	4618      	mov	r0, r3
 800576e:	f00b fc90 	bl	8011092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		clearRxBuff();
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff ff6a 	bl	800564c <_ZN13SerialMessage11clearRxBuffEv>
		Ready = false;
 8005778:	2300      	movs	r3, #0
 800577a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	return Ready;
 800577e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
	String CommandStr = "";
 8005782:	f107 030c 	add.w	r3, r7, #12
 8005786:	4618      	mov	r0, r3
 8005788:	f00b fc7d 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Ready;
 800578c:	4623      	mov	r3, r4
}
 800578e:	4618      	mov	r0, r3
 8005790:	3734      	adds	r7, #52	; 0x34
 8005792:	46bd      	mov	sp, r7
 8005794:	bd90      	pop	{r4, r7, pc}
 8005796:	bf00      	nop
 8005798:	080121b0 	.word	0x080121b0
 800579c:	200007c4 	.word	0x200007c4

080057a0 <_ZN13SerialMessage15getStartStopReqEPc>:

int16_t SerialMessage::getStartStopReq(char *Req)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
	int16_t RetVal = INVALID_MESSAGE;
 80057aa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80057ae:	81fb      	strh	r3, [r7, #14]
	if(valueSetted == UINT32_MAX)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b8:	d13a      	bne.n	8005830 <_ZN13SerialMessage15getStartStopReqEPc+0x90>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b2f      	cmp	r3, #47	; 0x2f
 80057c0:	d92b      	bls.n	800581a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b39      	cmp	r3, #57	; 0x39
 80057c8:	d827      	bhi.n	800581a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b2f      	cmp	r3, #47	; 0x2f
 80057d2:	d922      	bls.n	800581a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	3301      	adds	r3, #1
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b39      	cmp	r3, #57	; 0x39
 80057dc:	d81d      	bhi.n	800581a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
		{
			if(Req[0] == '0')
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b30      	cmp	r3, #48	; 0x30
 80057e4:	d107      	bne.n	80057f6 <_ZN13SerialMessage15getStartStopReqEPc+0x56>
			{
				RetVal = START_STOP_COMMANDS_START + (Req[1] - '0');
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	3301      	adds	r3, #1
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3398      	adds	r3, #152	; 0x98
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	81fb      	strh	r3, [r7, #14]
 80057f4:	e011      	b.n	800581a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
			}
			else
			{
				RetVal = START_STOP_COMMANDS_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	3b30      	subs	r3, #48	; 0x30
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	461a      	mov	r2, r3
 8005800:	0092      	lsls	r2, r2, #2
 8005802:	4413      	add	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	3301      	adds	r3, #1
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	4413      	add	r3, r2
 8005812:	b29b      	uxth	r3, r3
 8005814:	3398      	adds	r3, #152	; 0x98
 8005816:	b29b      	uxth	r3, r3
 8005818:	81fb      	strh	r3, [r7, #14]
			}
		}
		if(RetVal >= MAX_START_STOP_COMMANDS && RetVal == START_STOP_COMMANDS_START)
 800581a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800581e:	2bd2      	cmp	r3, #210	; 0xd2
 8005820:	dd06      	ble.n	8005830 <_ZN13SerialMessage15getStartStopReqEPc+0x90>
 8005822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005826:	2bc8      	cmp	r3, #200	; 0xc8
 8005828:	d102      	bne.n	8005830 <_ZN13SerialMessage15getStartStopReqEPc+0x90>
		{
			RetVal = INVALID_MESSAGE;
 800582a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800582e:	81fb      	strh	r3, [r7, #14]
		}
	}
	return RetVal;
 8005830:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr
	...

08005840 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

int16_t SerialMessage::getSetReq(char *Req, String Command)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08e      	sub	sp, #56	; 0x38
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
	int16_t RetVal = INVALID_MESSAGE;
 800584c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005850:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(valueSetted == UINT32_MAX)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	f040 80b0 	bne.w	80059be <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17e>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b2f      	cmp	r3, #47	; 0x2f
 8005864:	d92b      	bls.n	80058be <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b39      	cmp	r3, #57	; 0x39
 800586c:	d827      	bhi.n	80058be <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	3301      	adds	r3, #1
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b2f      	cmp	r3, #47	; 0x2f
 8005876:	d922      	bls.n	80058be <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	3301      	adds	r3, #1
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b39      	cmp	r3, #57	; 0x39
 8005880:	d81d      	bhi.n	80058be <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
		{
			if(Req[0] == '0')
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b30      	cmp	r3, #48	; 0x30
 8005888:	d107      	bne.n	800589a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
			{
				RetVal = SET_COMMAND_START + (Req[1] - '0');
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	3301      	adds	r3, #1
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b26      	subs	r3, #38	; 0x26
 8005894:	b29b      	uxth	r3, r3
 8005896:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005898:	e011      	b.n	80058be <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
			}
			else
			{
				RetVal = SET_COMMAND_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	3b30      	subs	r3, #48	; 0x30
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	0092      	lsls	r2, r2, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	3301      	adds	r3, #1
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	4413      	add	r3, r2
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b26      	subs	r3, #38	; 0x26
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	86fb      	strh	r3, [r7, #54]	; 0x36
			}
		}
		if(RetVal >= MAX_SET_COMMANDS && RetVal == SET_COMMAND_START)
 80058be:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80058c2:	2b1a      	cmp	r3, #26
 80058c4:	dd06      	ble.n	80058d4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
 80058c6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80058ca:	2b0a      	cmp	r3, #10
 80058cc:	d102      	bne.n	80058d4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
		{
			RetVal = INVALID_MESSAGE;
 80058ce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80058d2:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		String ValStr = "";
 80058d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058d8:	4618      	mov	r0, r3
 80058da:	f00b faa3 	bl	8010e24 <_ZNSaIcEC1Ev>
 80058de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80058e2:	f107 0310 	add.w	r3, r7, #16
 80058e6:	4939      	ldr	r1, [pc, #228]	; (80059cc <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18c>)
 80058e8:	4618      	mov	r0, r3
 80058ea:	f00b fd63 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80058ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058f2:	4618      	mov	r0, r3
 80058f4:	f00b fa97 	bl	8010e26 <_ZNSaIcED1Ev>
		bool ZeroChecked = false;
 80058f8:	2300      	movs	r3, #0
 80058fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		for(int i = 4; i < Command.length() - 1; i++)
 80058fe:	2304      	movs	r3, #4
 8005900:	633b      	str	r3, [r7, #48]	; 0x30
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f00b fbf2 	bl	80110ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005908:	4603      	mov	r3, r0
 800590a:	1e5a      	subs	r2, r3, #1
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	429a      	cmp	r2, r3
 8005910:	bf8c      	ite	hi
 8005912:	2301      	movhi	r3, #1
 8005914:	2300      	movls	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d041      	beq.n	80059a0 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x160>
		{
			int ValLen = Command.length() - 5;
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f00b fbe5 	bl	80110ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005922:	4603      	mov	r3, r0
 8005924:	3b05      	subs	r3, #5
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(ValLen > 1)
 8005928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592a:	2b01      	cmp	r3, #1
 800592c:	dd27      	ble.n	800597e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13e>
			{
				while(i < Command.length() && !ZeroChecked)
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f00b fbdc 	bl	80110ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005934:	4602      	mov	r2, r0
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	429a      	cmp	r2, r3
 800593a:	d908      	bls.n	800594e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10e>
 800593c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005940:	f083 0301 	eor.w	r3, r3, #1
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10e>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x110>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d014      	beq.n	800597e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13e>
				{
					if(Command[i] == '0')
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	4619      	mov	r1, r3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f00b fbce 	bl	80110fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800595e:	4603      	mov	r3, r0
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b30      	cmp	r3, #48	; 0x30
 8005964:	bf0c      	ite	eq
 8005966:	2301      	moveq	r3, #1
 8005968:	2300      	movne	r3, #0
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x138>
						i++;
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	3301      	adds	r3, #1
 8005974:	633b      	str	r3, [r7, #48]	; 0x30
 8005976:	e7da      	b.n	800592e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xee>
					else
					{
						ZeroChecked = true;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
						break;
					}
				}
			}
			ValStr.push_back(Command[i]);
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f00b fbb9 	bl	80110fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005988:	4603      	mov	r3, r0
 800598a:	781a      	ldrb	r2, [r3, #0]
 800598c:	f107 0310 	add.w	r3, r7, #16
 8005990:	4611      	mov	r1, r2
 8005992:	4618      	mov	r0, r3
 8005994:	f00b fbb4 	bl	8011100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		for(int i = 4; i < Command.length() - 1; i++)
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	3301      	adds	r3, #1
 800599c:	633b      	str	r3, [r7, #48]	; 0x30
 800599e:	e7b0      	b.n	8005902 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc2>
		}
		valueSetted = std::stoul(ValStr);
 80059a0:	f107 0310 	add.w	r3, r7, #16
 80059a4:	220a      	movs	r2, #10
 80059a6:	2100      	movs	r1, #0
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff fddb 	bl	8005564 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80059ae:	4602      	mov	r2, r0
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	63da      	str	r2, [r3, #60]	; 0x3c
		String ValStr = "";
 80059b4:	f107 0310 	add.w	r3, r7, #16
 80059b8:	4618      	mov	r0, r3
 80059ba:	f00b fb64 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	return RetVal;
 80059be:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3738      	adds	r7, #56	; 0x38
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	080121b0 	.word	0x080121b0

080059d0 <_ZN13SerialMessage17isDeviceConnectedEv>:


bool SerialMessage::isDeviceConnected()
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	bool Connected = false, GetSomething = false;
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059de:	2300      	movs	r3, #0
 80059e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t Timeout = SEARCH_DEVICE_TIMEOUT_MS;
 80059e4:	2364      	movs	r3, #100	; 0x64
 80059e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	clearRxBuff();
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff fe2e 	bl	800564c <_ZN13SerialMessage11clearRxBuffEv>
	sendMessage("$?$");
 80059f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f4:	4618      	mov	r0, r3
 80059f6:	f00b fa15 	bl	8010e24 <_ZNSaIcEC1Ev>
 80059fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80059fe:	f107 030c 	add.w	r3, r7, #12
 8005a02:	4927      	ldr	r1, [pc, #156]	; (8005aa0 <_ZN13SerialMessage17isDeviceConnectedEv+0xd0>)
 8005a04:	4618      	mov	r0, r3
 8005a06:	f00b fcd5 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005a0a:	f107 030c 	add.w	r3, r7, #12
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff fe2b 	bl	800566c <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005a16:	f107 030c 	add.w	r3, r7, #12
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f00b fb33 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a24:	4618      	mov	r0, r3
 8005a26:	f00b f9fe 	bl	8010e26 <_ZNSaIcED1Ev>
	while(Timeout > 0)
 8005a2a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d018      	beq.n	8005a64 <_ZN13SerialMessage17isDeviceConnectedEv+0x94>
	{
		HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 10);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a36:	230a      	movs	r3, #10
 8005a38:	2219      	movs	r2, #25
 8005a3a:	481a      	ldr	r0, [pc, #104]	; (8005aa4 <_ZN13SerialMessage17isDeviceConnectedEv+0xd4>)
 8005a3c:	f00a fd95 	bl	801056a <HAL_UART_Receive>
		if(rxBuffer[0] != 0x00)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <_ZN13SerialMessage17isDeviceConnectedEv+0x82>
		{
			GetSomething = true;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 8005a50:	e008      	b.n	8005a64 <_ZN13SerialMessage17isDeviceConnectedEv+0x94>
		}
		Timeout--;
 8005a52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005a56:	3b01      	subs	r3, #1
 8005a58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		HAL_Delay(1);
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	f006 fa9d 	bl	800bf9c <HAL_Delay>
	while(Timeout > 0)
 8005a62:	e7e2      	b.n	8005a2a <_ZN13SerialMessage17isDeviceConnectedEv+0x5a>
	}
	if(GetSomething)
 8005a64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d013      	beq.n	8005a94 <_ZN13SerialMessage17isDeviceConnectedEv+0xc4>
	{
		if(rxBuffer[0] == '$' && rxBuffer[1] == '!' && rxBuffer[2] == '$')
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b24      	cmp	r3, #36	; 0x24
 8005a74:	d10e      	bne.n	8005a94 <_ZN13SerialMessage17isDeviceConnectedEv+0xc4>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b21      	cmp	r3, #33	; 0x21
 8005a80:	d108      	bne.n	8005a94 <_ZN13SerialMessage17isDeviceConnectedEv+0xc4>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	3302      	adds	r3, #2
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b24      	cmp	r3, #36	; 0x24
 8005a8c:	d102      	bne.n	8005a94 <_ZN13SerialMessage17isDeviceConnectedEv+0xc4>
		{
			Connected = true;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}
	return Connected;
 8005a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3728      	adds	r7, #40	; 0x28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	080121d4 	.word	0x080121d4
 8005aa4:	200007c4 	.word	0x200007c4

08005aa8 <_ZN13SerialMessage20receiveSerialCommandEv>:


int16_t SerialMessage::receiveSerialCommand()
{
 8005aa8:	b590      	push	{r4, r7, lr}
 8005aaa:	b095      	sub	sp, #84	; 0x54
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	String CommandStr = "";
 8005ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f00b f9b5 	bl	8010e24 <_ZNSaIcEC1Ev>
 8005aba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005abe:	f107 0310 	add.w	r3, r7, #16
 8005ac2:	4955      	ldr	r1, [pc, #340]	; (8005c18 <_ZN13SerialMessage20receiveSerialCommandEv+0x170>)
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f00b fc75 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f00b f9a9 	bl	8010e26 <_ZNSaIcED1Ev>
	int16_t Command = NO_COMMANDS;
 8005ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ad8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	bool InvalidMsg = false;
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	char Req[MAX_REQ_LEN];
	if(readSerialPolling())
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff fdf4 	bl	80056d0 <_ZN13SerialMessage17readSerialPollingEv>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 8088 	beq.w	8005c00 <_ZN13SerialMessage20receiveSerialCommandEv+0x158>
	{
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005af0:	2300      	movs	r3, #0
 8005af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af6:	2b18      	cmp	r3, #24
 8005af8:	dc27      	bgt.n	8005b4a <_ZN13SerialMessage20receiveSerialCommandEv+0xa2>
		{
			bool EndMsg = false;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if(rxBuffer[i] == '$' && i > 0)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b06:	4413      	add	r3, r2
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b24      	cmp	r3, #36	; 0x24
 8005b0c:	d106      	bne.n	8005b1c <_ZN13SerialMessage20receiveSerialCommandEv+0x74>
 8005b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	dd03      	ble.n	8005b1c <_ZN13SerialMessage20receiveSerialCommandEv+0x74>
			{
				EndMsg = true;
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b1a:	e002      	b.n	8005b22 <_ZN13SerialMessage20receiveSerialCommandEv+0x7a>
			}
			else
			{
				InvalidMsg = true;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			}
			CommandStr.push_back(rxBuffer[i]);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b28:	4413      	add	r3, r2
 8005b2a:	781a      	ldrb	r2, [r3, #0]
 8005b2c:	f107 0310 	add.w	r3, r7, #16
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f00b fae4 	bl	8011100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			if(EndMsg)
 8005b38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <_ZN13SerialMessage20receiveSerialCommandEv+0xa0>
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b42:	3301      	adds	r3, #1
 8005b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b46:	e7d5      	b.n	8005af4 <_ZN13SerialMessage20receiveSerialCommandEv+0x4c>
			{
				break;
 8005b48:	bf00      	nop
			}
		}
		commandReceived = CommandStr;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3318      	adds	r3, #24
 8005b4e:	f107 0210 	add.w	r2, r7, #16
 8005b52:	4611      	mov	r1, r2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f00b fa9c 	bl	8011092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		memset(rxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5e:	2219      	movs	r2, #25
 8005b60:	2100      	movs	r1, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f00b fd73 	bl	801164e <memset>
		if(InvalidMsg)
 8005b68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <_ZN13SerialMessage20receiveSerialCommandEv+0xd2>
		{
			Command = INVALID_MESSAGE;
 8005b70:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005b74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005b78:	e042      	b.n	8005c00 <_ZN13SerialMessage20receiveSerialCommandEv+0x158>
		}
		else
		{
			Req[0] = CommandStr[1];
 8005b7a:	f107 0310 	add.w	r3, r7, #16
 8005b7e:	2101      	movs	r1, #1
 8005b80:	4618      	mov	r0, r3
 8005b82:	f00b faba 	bl	80110fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005b86:	4603      	mov	r3, r0
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	733b      	strb	r3, [r7, #12]
			Req[1] = CommandStr[2];
 8005b8c:	f107 0310 	add.w	r3, r7, #16
 8005b90:	2102      	movs	r1, #2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f00b fab1 	bl	80110fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	737b      	strb	r3, [r7, #13]
			if(CommandStr[3] == '$')
 8005b9e:	f107 0310 	add.w	r3, r7, #16
 8005ba2:	2103      	movs	r1, #3
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f00b faa8 	bl	80110fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005baa:	4603      	mov	r3, r0
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b24      	cmp	r3, #36	; 0x24
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	2300      	movne	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <_ZN13SerialMessage20receiveSerialCommandEv+0x128>
			{
				Command = getStartStopReq(Req);
 8005bbc:	f107 030c 	add.w	r3, r7, #12
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff fdec 	bl	80057a0 <_ZN13SerialMessage15getStartStopReqEPc>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005bce:	e017      	b.n	8005c00 <_ZN13SerialMessage20receiveSerialCommandEv+0x158>
			}
			else
			{
				Command = getSetReq(Req, CommandStr);
 8005bd0:	f107 0210 	add.w	r2, r7, #16
 8005bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bd8:	4611      	mov	r1, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f00b fbb7 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005be0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005be4:	f107 030c 	add.w	r3, r7, #12
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff fe28 	bl	8005840 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f00b fa43 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}

		}
	}
	return Command;
 8005c00:	f9b7 404e 	ldrsh.w	r4, [r7, #78]	; 0x4e
	String CommandStr = "";
 8005c04:	f107 0310 	add.w	r3, r7, #16
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f00b fa3c 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Command;
 8005c0e:	4623      	mov	r3, r4
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3754      	adds	r7, #84	; 0x54
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd90      	pop	{r4, r7, pc}
 8005c18:	080121b0 	.word	0x080121b0

08005c1c <_ZN13SerialMessage14getValueSettedEv>:

uint32_t SerialMessage::getValueSetted()
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	uint32_t RetVal = valueSetted;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c28:	60fb      	str	r3, [r7, #12]
	valueSetted = UINT32_MAX;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c30:	63da      	str	r2, [r3, #60]	; 0x3c
	return RetVal;
 8005c32:	68fb      	ldr	r3, [r7, #12]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr
	...

08005c40 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>:



std::string SerialMessage::getCommandReceived()
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
	String RetCommand = commandReceived;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	3318      	adds	r3, #24
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f00b fb7c 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	commandReceived = "";
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	3318      	adds	r3, #24
 8005c5a:	4904      	ldr	r1, [pc, #16]	; (8005c6c <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev+0x2c>)
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f00b faf6 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	return RetCommand;
 8005c62:	bf00      	nop
}
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	080121b0 	.word	0x080121b0

08005c70 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	f00b fc6e 	bl	8011558 <__errno>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f00b fc68 	bl	8011558 <__errno>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	f00b fc5a 	bl	8011558 <__errno>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8005cb6:	f00b fc4f 	bl	8011558 <__errno>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	7039      	strb	r1, [r7, #0]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr

08005ce2 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8005ce2:	b590      	push	{r4, r7, lr}
 8005ce4:	b08b      	sub	sp, #44	; 0x2c
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8005cf0:	f107 0314 	add.w	r3, r7, #20
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff ffbb 	bl	8005c70 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8005cfa:	f107 0118 	add.w	r1, r7, #24
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	4798      	blx	r3
 8005d06:	6278      	str	r0, [r7, #36]	; 0x24
      if (__endptr == __str)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d102      	bne.n	8005d16 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8005d10:	68b8      	ldr	r0, [r7, #8]
 8005d12:	f00b f88f 	bl	8010e34 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8005d16:	f00b fc1f 	bl	8011558 <__errno>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8005d1e:	2b22      	cmp	r3, #34	; 0x22
 8005d20:	d006      	beq.n	8005d30 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8005d22:	4621      	mov	r1, r4
 8005d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d26:	f7ff ffd1 	bl	8005ccc <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8005d34:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8005d3a:	68b8      	ldr	r0, [r7, #8]
 8005d3c:	f00b f880 	bl	8010e40 <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	623b      	str	r3, [r7, #32]
      if (__idx)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d006      	beq.n	8005d58 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x76>
	*__idx = __endptr - __str;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	601a      	str	r2, [r3, #0]
      return __ret;
 8005d58:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8005d5a:	f107 0314 	add.w	r3, r7, #20
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff ff9a 	bl	8005c98 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8005d64:	4623      	mov	r3, r4
    }
 8005d66:	4618      	mov	r0, r3
 8005d68:	372c      	adds	r7, #44	; 0x2c
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd90      	pop	{r4, r7, pc}

08005d6e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr

08005d84 <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <_ZNSt7__cxx119to_stringEm+0x24>)
 8005d96:	2210      	movs	r2, #16
 8005d98:	4904      	ldr	r1, [pc, #16]	; (8005dac <_ZNSt7__cxx119to_stringEm+0x28>)
 8005d9a:	f7fe f88f 	bl	8003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	080121dc 	.word	0x080121dc
 8005dac:	08011a35 	.word	0x08011a35

08005db0 <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2020 	strb.w	r2, [r3, #32]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr

08005dcc <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>:
		bool withChebox;
		bool *itemsChecked;
		void *paramAssociated;
		uint8_t paramType;
		bool menuSelected;
	}MENU_STRUCTURE;
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f00b f934 	bl	8011044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>:
	}DRYER_PARAMS;
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	705a      	strb	r2, [r3, #1]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	709a      	strb	r2, [r3, #2]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <_ZN10SmartDryer12DRYER_PARAMSC1Ev+0x40>)
 8005e06:	605a      	str	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	721a      	strb	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	725a      	strb	r2, [r3, #9]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	729a      	strb	r2, [r3, #10]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	41f00000 	.word	0x41f00000

08005e2c <_ZN10SmartDryerC1Ev>:
		"Programma 3",
};



SmartDryer::SmartDryer()
 8005e2c:	b590      	push	{r4, r7, lr}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	334c      	adds	r3, #76	; 0x4c
 8005e40:	2248      	movs	r2, #72	; 0x48
 8005e42:	2100      	movs	r1, #0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f00b fc02 	bl	801164e <memset>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	33a4      	adds	r3, #164	; 0xa4
 8005e56:	4618      	mov	r0, r3
 8005e58:	f004 fe02 	bl	800aa60 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 8005e7c:	20c8      	movs	r0, #200	; 0xc8
 8005e7e:	f00a ffb5 	bl	8010dec <_Znwj>
 8005e82:	4603      	mov	r3, r0
 8005e84:	461c      	mov	r4, r3
 8005e86:	2101      	movs	r1, #1
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f7fe fa83 	bl	8004394 <_ZN13NHDST7565_LCDC1Eh>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	601c      	str	r4, [r3, #0]
	keyboard = new DryerKey();
 8005e92:	2010      	movs	r0, #16
 8005e94:	f00a ffaa 	bl	8010dec <_Znwj>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461c      	mov	r4, r3
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7ff fa9f 	bl	80053e0 <_ZN8DryerKeyC1Ev>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 8005ea6:	2021      	movs	r0, #33	; 0x21
 8005ea8:	f00a ffa0 	bl	8010dec <_Znwj>
 8005eac:	4603      	mov	r3, r0
 8005eae:	461c      	mov	r4, r3
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	2321      	movs	r3, #33	; 0x21
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	f00b fbc9 	bl	801164e <memset>
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff ff77 	bl	8005db0 <_ZN13THERMO_SENSORC1Ev>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 8005ec6:	2008      	movs	r0, #8
 8005ec8:	f00a ff90 	bl	8010dec <_Znwj>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461c      	mov	r4, r3
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ed6:	4992      	ldr	r1, [pc, #584]	; (8006120 <_ZN10SmartDryerC1Ev+0x2f4>)
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7ff fb1a 	bl	8005512 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 8005ee2:	2008      	movs	r0, #8
 8005ee4:	f00a ff82 	bl	8010dec <_Znwj>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461c      	mov	r4, r3
 8005eec:	2300      	movs	r3, #0
 8005eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef2:	498b      	ldr	r1, [pc, #556]	; (8006120 <_ZN10SmartDryerC1Ev+0x2f4>)
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f7ff fb0c 	bl	8005512 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 8005efe:	2008      	movs	r0, #8
 8005f00:	f00a ff74 	bl	8010dec <_Znwj>
 8005f04:	4603      	mov	r3, r0
 8005f06:	461c      	mov	r4, r3
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f7ff f986 	bl	800521a <_ZN12STM32_EEPROMC1Ev>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005f12:	2014      	movs	r0, #20
 8005f14:	f00a ff6a 	bl	8010dec <_Znwj>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	461c      	mov	r4, r3
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7fd f99d 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005f28:	2014      	movs	r0, #20
 8005f2a:	f00a ff5f 	bl	8010dec <_Znwj>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	461c      	mov	r4, r3
 8005f32:	2100      	movs	r1, #0
 8005f34:	4620      	mov	r0, r4
 8005f36:	f7fd f992 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005f3e:	2014      	movs	r0, #20
 8005f40:	f00a ff54 	bl	8010dec <_Znwj>
 8005f44:	4603      	mov	r3, r0
 8005f46:	461c      	mov	r4, r3
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f7fd f987 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	625c      	str	r4, [r3, #36]	; 0x24
	takeTimeTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005f54:	2014      	movs	r0, #20
 8005f56:	f00a ff49 	bl	8010dec <_Znwj>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	461c      	mov	r4, r3
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4620      	mov	r0, r4
 8005f62:	f7fd f97c 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	629c      	str	r4, [r3, #40]	; 0x28
	showHelpMessageTimer = new ChronoTimer(ChronoTimer::SECONDS);
 8005f6a:	2014      	movs	r0, #20
 8005f6c:	f00a ff3e 	bl	8010dec <_Znwj>
 8005f70:	4603      	mov	r3, r0
 8005f72:	461c      	mov	r4, r3
 8005f74:	2101      	movs	r1, #1
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7fd f971 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	62dc      	str	r4, [r3, #44]	; 0x2c
	programStartedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005f80:	2014      	movs	r0, #20
 8005f82:	f00a ff33 	bl	8010dec <_Znwj>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461c      	mov	r4, r3
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7fd f966 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	631c      	str	r4, [r3, #48]	; 0x30
	blinkSerialIconTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005f96:	2014      	movs	r0, #20
 8005f98:	f00a ff28 	bl	8010dec <_Znwj>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	461c      	mov	r4, r3
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f7fd f95b 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	635c      	str	r4, [r3, #52]	; 0x34
	checkSerialDeviceTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005fac:	2014      	movs	r0, #20
 8005fae:	f00a ff1d 	bl	8010dec <_Znwj>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461c      	mov	r4, r3
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7fd f950 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	639c      	str	r4, [r3, #56]	; 0x38

	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005fc2:	2014      	movs	r0, #20
 8005fc4:	f00a ff12 	bl	8010dec <_Znwj>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	461c      	mov	r4, r3
 8005fcc:	2100      	movs	r1, #0
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f7fd f945 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	63dc      	str	r4, [r3, #60]	; 0x3c

	externalCommand = new SerialMessage();
 8005fd8:	2040      	movs	r0, #64	; 0x40
 8005fda:	f00a ff07 	bl	8010dec <_Znwj>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	461c      	mov	r4, r3
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f7ff faf2 	bl	80055cc <_ZN13SerialMessageC1Ev>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	641c      	str	r4, [r3, #64]	; 0x40

	clock = new DS1307_RTC();
 8005fec:	2021      	movs	r0, #33	; 0x21
 8005fee:	f00a fefd 	bl	8010dec <_Znwj>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	461c      	mov	r4, r3
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f7fd fa70 	bl	80034dc <_ZN10DS1307_RTCC1Ev>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	605c      	str	r4, [r3, #4]

	mainMenu = new MENU_STRUCTURE();
 8006000:	2038      	movs	r0, #56	; 0x38
 8006002:	f00a fef3 	bl	8010dec <_Znwj>
 8006006:	4603      	mov	r3, r0
 8006008:	461c      	mov	r4, r3
 800600a:	4620      	mov	r0, r4
 800600c:	2338      	movs	r3, #56	; 0x38
 800600e:	461a      	mov	r2, r3
 8006010:	2100      	movs	r1, #0
 8006012:	f00b fb1c 	bl	801164e <memset>
 8006016:	4620      	mov	r0, r4
 8006018:	f7ff fed8 	bl	8005dcc <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
	thermoMenuCtrl = new MENU_STRUCTURE();
 8006022:	2038      	movs	r0, #56	; 0x38
 8006024:	f00a fee2 	bl	8010dec <_Znwj>
 8006028:	4603      	mov	r3, r0
 800602a:	461c      	mov	r4, r3
 800602c:	4620      	mov	r0, r4
 800602e:	2338      	movs	r3, #56	; 0x38
 8006030:	461a      	mov	r2, r3
 8006032:	2100      	movs	r1, #0
 8006034:	f00b fb0b 	bl	801164e <memset>
 8006038:	4620      	mov	r0, r4
 800603a:	f7ff fec7 	bl	8005dcc <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
	fanMenuCtrl = new MENU_STRUCTURE();
 8006044:	2038      	movs	r0, #56	; 0x38
 8006046:	f00a fed1 	bl	8010dec <_Znwj>
 800604a:	4603      	mov	r3, r0
 800604c:	461c      	mov	r4, r3
 800604e:	4620      	mov	r0, r4
 8006050:	2338      	movs	r3, #56	; 0x38
 8006052:	461a      	mov	r2, r3
 8006054:	2100      	movs	r1, #0
 8006056:	f00b fafa 	bl	801164e <memset>
 800605a:	4620      	mov	r0, r4
 800605c:	f7ff feb6 	bl	8005dcc <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
	tempMenuCtrl = new MENU_STRUCTURE();
 8006066:	2038      	movs	r0, #56	; 0x38
 8006068:	f00a fec0 	bl	8010dec <_Znwj>
 800606c:	4603      	mov	r3, r0
 800606e:	461c      	mov	r4, r3
 8006070:	4620      	mov	r0, r4
 8006072:	2338      	movs	r3, #56	; 0x38
 8006074:	461a      	mov	r2, r3
 8006076:	2100      	movs	r1, #0
 8006078:	f00b fae9 	bl	801164e <memset>
 800607c:	4620      	mov	r0, r4
 800607e:	f7ff fea5 	bl	8005dcc <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
	startDryerMenu = new MENU_STRUCTURE();
 8006088:	2038      	movs	r0, #56	; 0x38
 800608a:	f00a feaf 	bl	8010dec <_Znwj>
 800608e:	4603      	mov	r3, r0
 8006090:	461c      	mov	r4, r3
 8006092:	4620      	mov	r0, r4
 8006094:	2338      	movs	r3, #56	; 0x38
 8006096:	461a      	mov	r2, r3
 8006098:	2100      	movs	r1, #0
 800609a:	f00b fad8 	bl	801164e <memset>
 800609e:	4620      	mov	r0, r4
 80060a0:	f7ff fe94 	bl	8005dcc <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
	changeProgramsMenu = new MENU_STRUCTURE();
 80060aa:	2038      	movs	r0, #56	; 0x38
 80060ac:	f00a fe9e 	bl	8010dec <_Znwj>
 80060b0:	4603      	mov	r3, r0
 80060b2:	461c      	mov	r4, r3
 80060b4:	4620      	mov	r0, r4
 80060b6:	2338      	movs	r3, #56	; 0x38
 80060b8:	461a      	mov	r2, r3
 80060ba:	2100      	movs	r1, #0
 80060bc:	f00b fac7 	bl	801164e <memset>
 80060c0:	4620      	mov	r0, r4
 80060c2:	f7ff fe83 	bl	8005dcc <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
	startProgramsMenu = new MENU_STRUCTURE();
 80060cc:	2038      	movs	r0, #56	; 0x38
 80060ce:	f00a fe8d 	bl	8010dec <_Znwj>
 80060d2:	4603      	mov	r3, r0
 80060d4:	461c      	mov	r4, r3
 80060d6:	4620      	mov	r0, r4
 80060d8:	2338      	movs	r3, #56	; 0x38
 80060da:	461a      	mov	r2, r3
 80060dc:	2100      	movs	r1, #0
 80060de:	f00b fab6 	bl	801164e <memset>
 80060e2:	4620      	mov	r0, r4
 80060e4:	f7ff fe72 	bl	8005dcc <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8

	statusParam = new DRYER_PARAMS();
 80060ee:	200c      	movs	r0, #12
 80060f0:	f00a fe7c 	bl	8010dec <_Znwj>
 80060f4:	4603      	mov	r3, r0
 80060f6:	461c      	mov	r4, r3
 80060f8:	4622      	mov	r2, r4
 80060fa:	2300      	movs	r3, #0
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	6053      	str	r3, [r2, #4]
 8006100:	6093      	str	r3, [r2, #8]
 8006102:	4620      	mov	r0, r4
 8006104:	f7ff fe70 	bl	8005de8 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	649c      	str	r4, [r3, #72]	; 0x48

	chamberTemperature.readedValueInt = 0;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	bd90      	pop	{r4, r7, pc}
 800611e:	bf00      	nop
 8006120:	40010800 	.word	0x40010800

08006124 <_ZN10SmartDryer11floatStringB5cxx11Efh>:

String SmartDryer::floatString(float Number, uint8_t NDecimal)
{
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b08d      	sub	sp, #52	; 0x34
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	70fb      	strb	r3, [r7, #3]
	char CharArray[6];
	char Format[6];
	snprintf(Format, 6, "%%.%df", NDecimal);
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	f107 0014 	add.w	r0, r7, #20
 8006138:	4a13      	ldr	r2, [pc, #76]	; (8006188 <_ZN10SmartDryer11floatStringB5cxx11Efh+0x64>)
 800613a:	2106      	movs	r1, #6
 800613c:	f00b fb8a 	bl	8011854 <sniprintf>
	snprintf(CharArray, 6, Format, Number);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fa f971 	bl	8000428 <__aeabi_f2d>
 8006146:	4603      	mov	r3, r0
 8006148:	460c      	mov	r4, r1
 800614a:	f107 0214 	add.w	r2, r7, #20
 800614e:	f107 001c 	add.w	r0, r7, #28
 8006152:	e9cd 3400 	strd	r3, r4, [sp]
 8006156:	2106      	movs	r1, #6
 8006158:	f00b fb7c 	bl	8011854 <sniprintf>
	return String(CharArray);
 800615c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006160:	4618      	mov	r0, r3
 8006162:	f00a fe5f 	bl	8010e24 <_ZNSaIcEC1Ev>
 8006166:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800616a:	f107 031c 	add.w	r3, r7, #28
 800616e:	4619      	mov	r1, r3
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f00b f91f 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800617a:	4618      	mov	r0, r3
 800617c:	f00a fe53 	bl	8010e26 <_ZNSaIcED1Ev>
}
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	372c      	adds	r7, #44	; 0x2c
 8006184:	46bd      	mov	sp, r7
 8006186:	bd90      	pop	{r4, r7, pc}
 8006188:	080122b8 	.word	0x080122b8

0800618c <_ZN10SmartDryer8blinkLedEht>:

void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
 8006198:	4613      	mov	r3, r2
 800619a:	803b      	strh	r3, [r7, #0]
	//	GPIO_TypeDef *LedPort;
	//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 800619c:	883b      	ldrh	r3, [r7, #0]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d801      	bhi.n	80061a6 <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 80061a2:	2302      	movs	r3, #2
 80061a4:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <_ZN10SmartDryer8blinkLedEht+0x26>
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d010      	beq.n	80061d2 <_ZN10SmartDryer8blinkLedEht+0x46>
			}
			//		LedPort = GreenLed_GPIO_Port;
			//		LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80061b0:	e022      	b.n	80061f8 <_ZN10SmartDryer8blinkLedEht+0x6c>
			if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	883a      	ldrh	r2, [r7, #0]
 80061b8:	2101      	movs	r1, #1
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fd f8f9 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d015      	beq.n	80061f2 <_ZN10SmartDryer8blinkLedEht+0x66>
				toggleLed(WichLed);
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f818 	bl	8006200 <_ZN10SmartDryer9toggleLedEh>
			break;
 80061d0:	e00f      	b.n	80061f2 <_ZN10SmartDryer8blinkLedEht+0x66>
			if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	883a      	ldrh	r2, [r7, #0]
 80061d8:	2101      	movs	r1, #1
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fd f8e9 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <_ZN10SmartDryer8blinkLedEht+0x6a>
				toggleLed(WichLed);
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f808 	bl	8006200 <_ZN10SmartDryer9toggleLedEh>
			break;
 80061f0:	e001      	b.n	80061f6 <_ZN10SmartDryer8blinkLedEht+0x6a>
			break;
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <_ZN10SmartDryer8blinkLedEht+0x6c>
			break;
 80061f6:	bf00      	nop
	}

}
 80061f8:	bf00      	nop
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 800620c:	2300      	movs	r3, #0
 800620e:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <_ZN10SmartDryer9toggleLedEh+0x1c>
 8006216:	2b01      	cmp	r3, #1
 8006218:	d006      	beq.n	8006228 <_ZN10SmartDryer9toggleLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 800621a:	e00b      	b.n	8006234 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <_ZN10SmartDryer9toggleLedEh+0x48>)
 800621e:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8006220:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006224:	817b      	strh	r3, [r7, #10]
			break;
 8006226:	e005      	b.n	8006234 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8006228:	4b07      	ldr	r3, [pc, #28]	; (8006248 <_ZN10SmartDryer9toggleLedEh+0x48>)
 800622a:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 800622c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006230:	817b      	strh	r3, [r7, #10]
			break;
 8006232:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 8006234:	897b      	ldrh	r3, [r7, #10]
 8006236:	4619      	mov	r1, r3
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f007 f96d 	bl	800d518 <HAL_GPIO_TogglePin>
}
 800623e:	bf00      	nop
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40010800 	.word	0x40010800

0800624c <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <_ZN10SmartDryer9turnOnLedEh+0x1c>
 8006262:	2b01      	cmp	r3, #1
 8006264:	d006      	beq.n	8006274 <_ZN10SmartDryer9turnOnLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8006266:	e00b      	b.n	8006280 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 800626a:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 800626c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006270:	817b      	strh	r3, [r7, #10]
			break;
 8006272:	e005      	b.n	8006280 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8006274:	4b07      	ldr	r3, [pc, #28]	; (8006294 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8006276:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8006278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800627c:	817b      	strh	r3, [r7, #10]
			break;
 800627e:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 8006280:	897b      	ldrh	r3, [r7, #10]
 8006282:	2201      	movs	r2, #1
 8006284:	4619      	mov	r1, r3
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f007 f914 	bl	800d4b4 <HAL_GPIO_WritePin>
}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40010800 	.word	0x40010800

08006298 <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <_ZN10SmartDryer10turnOffLedEh+0x1c>
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d006      	beq.n	80062c0 <_ZN10SmartDryer10turnOffLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80062b2:	e00b      	b.n	80062cc <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 80062b6:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 80062b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062bc:	817b      	strh	r3, [r7, #10]
			break;
 80062be:	e005      	b.n	80062cc <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 80062c2:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 80062c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062c8:	817b      	strh	r3, [r7, #10]
			break;
 80062ca:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 80062cc:	897b      	ldrh	r3, [r7, #10]
 80062ce:	2200      	movs	r2, #0
 80062d0:	4619      	mov	r1, r3
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f007 f8ee 	bl	800d4b4 <HAL_GPIO_WritePin>
}
 80062d8:	bf00      	nop
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40010800 	.word	0x40010800

080062e4 <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d031      	beq.n	800635a <_ZN10SmartDryer10ledControlEv+0x76>
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	dc06      	bgt.n	8006308 <_ZN10SmartDryer10ledControlEv+0x24>
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d019      	beq.n	8006332 <_ZN10SmartDryer10ledControlEv+0x4e>
 80062fe:	2b01      	cmp	r3, #1
 8006300:	dc22      	bgt.n	8006348 <_ZN10SmartDryer10ledControlEv+0x64>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <_ZN10SmartDryer10ledControlEv+0x3a>
 8006306:	e07b      	b.n	8006400 <_ZN10SmartDryer10ledControlEv+0x11c>
 8006308:	f240 12f5 	movw	r2, #501	; 0x1f5
 800630c:	4293      	cmp	r3, r2
 800630e:	d03d      	beq.n	800638c <_ZN10SmartDryer10ledControlEv+0xa8>
 8006310:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8006314:	d057      	beq.n	80063c6 <_ZN10SmartDryer10ledControlEv+0xe2>
 8006316:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800631a:	d02a      	beq.n	8006372 <_ZN10SmartDryer10ledControlEv+0x8e>
 800631c:	e070      	b.n	8006400 <_ZN10SmartDryer10ledControlEv+0x11c>
	{
		case THERMO_ON_FAN_OFF:
			blinkLed(RED_LED, 10);
 800631e:	220a      	movs	r2, #10
 8006320:	2100      	movs	r1, #0
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff ff32 	bl	800618c <_ZN10SmartDryer8blinkLedEht>
			turnOffLed(GREEN_LED);
 8006328:	2101      	movs	r1, #1
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff ffb4 	bl	8006298 <_ZN10SmartDryer10turnOffLedEh>
			break;
 8006330:	e073      	b.n	800641a <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_ON:
			turnOffLed(RED_LED);
 8006332:	2100      	movs	r1, #0
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff ffaf 	bl	8006298 <_ZN10SmartDryer10turnOffLedEh>
			blinkLed(GREEN_LED, 500);
 800633a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800633e:	2101      	movs	r1, #1
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff ff23 	bl	800618c <_ZN10SmartDryer8blinkLedEht>
			break;
 8006346:	e068      	b.n	800641a <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_OFF:
			turnOffLed(GREEN_LED);
 8006348:	2101      	movs	r1, #1
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff ffa4 	bl	8006298 <_ZN10SmartDryer10turnOffLedEh>
			turnOffLed(RED_LED);
 8006350:	2100      	movs	r1, #0
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff ffa0 	bl	8006298 <_ZN10SmartDryer10turnOffLedEh>
			break;
 8006358:	e05f      	b.n	800641a <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_ON_FAN_ON:
			blinkLed(RED_LED, 10);
 800635a:	220a      	movs	r2, #10
 800635c:	2100      	movs	r1, #0
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff ff14 	bl	800618c <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 500);
 8006364:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006368:	2101      	movs	r1, #1
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff ff0e 	bl	800618c <_ZN10SmartDryer8blinkLedEht>
			break;
 8006370:	e053      	b.n	800641a <_ZN10SmartDryer10ledControlEv+0x136>
		case TEMP_REACHED:
			turnOnLed(RED_LED);
 8006372:	2100      	movs	r1, #0
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7ff ff69 	bl	800624c <_ZN10SmartDryer9turnOnLedEh>
			HAL_Delay(250);
 800637a:	20fa      	movs	r0, #250	; 0xfa
 800637c:	f005 fe0e 	bl	800bf9c <HAL_Delay>
			ledStatus = UNKNOWN_STATE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006386:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
			break;
 800638a:	e046      	b.n	800641a <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_INIT:
			for(int i = 0; i < 50*10; i++)
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006396:	da10      	bge.n	80063ba <_ZN10SmartDryer10ledControlEv+0xd6>
			{
				blinkLed(RED_LED, 50);
 8006398:	2232      	movs	r2, #50	; 0x32
 800639a:	2100      	movs	r1, #0
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff fef5 	bl	800618c <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 80063a2:	2232      	movs	r2, #50	; 0x32
 80063a4:	2101      	movs	r1, #1
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff fef0 	bl	800618c <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 80063ac:	2001      	movs	r0, #1
 80063ae:	f005 fdf5 	bl	800bf9c <HAL_Delay>
			for(int i = 0; i < 50*10; i++)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e7ea      	b.n	8006390 <_ZN10SmartDryer10ledControlEv+0xac>
			};
			ledStatus = UNKNOWN_STATE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f240 12f7 	movw	r2, #503	; 0x1f7
 80063c0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
			break;
 80063c4:	e029      	b.n	800641a <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_END:
			for(int i = 0; i < 50*20; i++)
 80063c6:	2300      	movs	r3, #0
 80063c8:	60bb      	str	r3, [r7, #8]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d0:	da10      	bge.n	80063f4 <_ZN10SmartDryer10ledControlEv+0x110>
			{
				blinkLed(RED_LED, 50);
 80063d2:	2232      	movs	r2, #50	; 0x32
 80063d4:	2100      	movs	r1, #0
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fed8 	bl	800618c <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 80063dc:	2232      	movs	r2, #50	; 0x32
 80063de:	2101      	movs	r1, #1
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff fed3 	bl	800618c <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 80063e6:	2001      	movs	r0, #1
 80063e8:	f005 fdd8 	bl	800bf9c <HAL_Delay>
			for(int i = 0; i < 50*20; i++)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	3301      	adds	r3, #1
 80063f0:	60bb      	str	r3, [r7, #8]
 80063f2:	e7ea      	b.n	80063ca <_ZN10SmartDryer10ledControlEv+0xe6>
			};
			ledStatus = UNKNOWN_STATE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f240 12f7 	movw	r2, #503	; 0x1f7
 80063fa:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
			break;
 80063fe:	e00c      	b.n	800641a <_ZN10SmartDryer10ledControlEv+0x136>
		case UNKNOWN_STATE:
		default:
			blinkLed(RED_LED, 1000);
 8006400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006404:	2100      	movs	r1, #0
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff fec0 	bl	800618c <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 1000);
 800640c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006410:	2101      	movs	r1, #1
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff feba 	bl	800618c <_ZN10SmartDryer8blinkLedEht>
			break;
 8006418:	bf00      	nop
	}
}
 800641a:	bf00      	nop
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <_ZN10SmartDryer16thermoRegulationEf>:

void SmartDryer::thermoRegulation(float WichTemp)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
	uint32_t ReadedTemp = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]
	uint32_t TempTarget = (uint32_t)roundf(WichTemp * 10);
 8006432:	497e      	ldr	r1, [pc, #504]	; (800662c <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 8006434:	6838      	ldr	r0, [r7, #0]
 8006436:	f7fa fbbf 	bl	8000bb8 <__aeabi_fmul>
 800643a:	4603      	mov	r3, r0
 800643c:	4618      	mov	r0, r3
 800643e:	f00b f85f 	bl	8011500 <roundf>
 8006442:	4603      	mov	r3, r0
 8006444:	4618      	mov	r0, r3
 8006446:	f7fa fd07 	bl	8000e58 <__aeabi_f2uiz>
 800644a:	4603      	mov	r3, r0
 800644c:	60fb      	str	r3, [r7, #12]
	bool Reading = false;
 800644e:	2300      	movs	r3, #0
 8006450:	74fb      	strb	r3, [r7, #19]
	if(statusParam->dryerOn)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 80a7 	beq.w	80065ac <_ZN10SmartDryer16thermoRegulationEf+0x188>
	{
		if(getTempTimer->isFinished(true, 750))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f240 22ee 	movw	r2, #750	; 0x2ee
 8006466:	2101      	movs	r1, #1
 8006468:	4618      	mov	r0, r3
 800646a:	f7fc ffa2 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d024      	beq.n	80064be <_ZN10SmartDryer16thermoRegulationEf+0x9a>
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4618      	mov	r0, r3
 800647a:	f005 fbe0 	bl	800bc3e <_ZN13THERMO_SENSOR14getTemperatureEv>
 800647e:	4602      	mov	r2, r0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			chamberHumity.readedValueFL = tempSens->getHumidity();
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	4618      	mov	r0, r3
 800648c:	f005 fbc3 	bl	800bc16 <_ZN13THERMO_SENSOR11getHumidityEv>
 8006490:	4602      	mov	r2, r0
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			ReadedTemp = (uint32_t)roundf(chamberTemperature.readedValueFL * 10);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800649e:	4963      	ldr	r1, [pc, #396]	; (800662c <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fa fb89 	bl	8000bb8 <__aeabi_fmul>
 80064a6:	4603      	mov	r3, r0
 80064a8:	4618      	mov	r0, r3
 80064aa:	f00b f829 	bl	8011500 <roundf>
 80064ae:	4603      	mov	r3, r0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fa fcd1 	bl	8000e58 <__aeabi_f2uiz>
 80064b6:	4603      	mov	r3, r0
 80064b8:	617b      	str	r3, [r7, #20]
			Reading = true;
 80064ba:	2301      	movs	r3, #1
 80064bc:	74fb      	strb	r3, [r7, #19]
		}
		if(ReadedTemp != 0 && Reading)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80af 	beq.w	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80064c6:	7cfb      	ldrb	r3, [r7, #19]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 80ab 	beq.w	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		{
			if(ReadedTemp >= TempTarget - TOLLERANCE_DEGREES)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3b37      	subs	r3, #55	; 0x37
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d31b      	bcc.n	8006510 <_ZN10SmartDryer16thermoRegulationEf+0xec>
			{
				statusParam->fanOn = true;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064dc:	2201      	movs	r2, #1
 80064de:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e4:	2201      	movs	r2, #1
 80064e6:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80064ee:	f240 12f5 	movw	r2, #501	; 0x1f5
 80064f2:	4293      	cmp	r3, r2
 80064f4:	f000 8096 	beq.w	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80064fe:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8006502:	f000 808f 	beq.w	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_ON;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2203      	movs	r2, #3
 800650a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
			chamberHumity.readedValueFL = tempSens->getHumidity();
		}
	}
}
 800650e:	e089      	b.n	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp >= TempTarget)
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	429a      	cmp	r2, r3
 8006516:	d324      	bcc.n	8006562 <_ZN10SmartDryer16thermoRegulationEf+0x13e>
				statusParam->fanOn = true;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651c:	2201      	movs	r2, #1
 800651e:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = false;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006524:	2200      	movs	r2, #0
 8006526:	705a      	strb	r2, [r3, #1]
				ledStatus = TEMP_REACHED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800652e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006538:	f240 12f5 	movw	r2, #501	; 0x1f5
 800653c:	4293      	cmp	r3, r2
 800653e:	d071      	beq.n	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006546:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800654a:	d06b      	beq.n	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006552:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006556:	d065      	beq.n	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_OFF_FAN_ON;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
}
 8006560:	e060      	b.n	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp < TempTarget - TOLLERANCE_DEGREES)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3b37      	subs	r3, #55	; 0x37
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	429a      	cmp	r2, r3
 800656a:	d25b      	bcs.n	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
				statusParam->fanOn = false;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006570:	2200      	movs	r2, #0
 8006572:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006578:	2201      	movs	r2, #1
 800657a:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006582:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006586:	4293      	cmp	r3, r2
 8006588:	d04c      	beq.n	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006590:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8006594:	d046      	beq.n	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800659c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80065a0:	d040      	beq.n	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_OFF;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
}
 80065aa:	e03b      	b.n	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		statusParam->fanOn = false;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b0:	2200      	movs	r2, #0
 80065b2:	709a      	strb	r2, [r3, #2]
		statusParam->thermoOn = false;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b8:	2200      	movs	r2, #0
 80065ba:	705a      	strb	r2, [r3, #1]
		if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80065c2:	f240 12f5 	movw	r2, #501	; 0x1f5
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00f      	beq.n	80065ea <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80065d0:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80065d4:	d009      	beq.n	80065ea <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80065dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80065e0:	d003      	beq.n	80065ea <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
			ledStatus = THERMO_OFF_FAN_OFF;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		if(getTempTimer->isFinished(true, 750))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f240 22ee 	movw	r2, #750	; 0x2ee
 80065f2:	2101      	movs	r1, #1
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fc fedc 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d011      	beq.n	8006624 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	4618      	mov	r0, r3
 8006606:	f005 fb1a 	bl	800bc3e <_ZN13THERMO_SENSOR14getTemperatureEv>
 800660a:	4602      	mov	r2, r0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			chamberHumity.readedValueFL = tempSens->getHumidity();
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	4618      	mov	r0, r3
 8006618:	f005 fafd 	bl	800bc16 <_ZN13THERMO_SENSOR11getHumidityEv>
 800661c:	4602      	mov	r2, r0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8006624:	bf00      	nop
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	41200000 	.word	0x41200000

08006630 <_ZN10SmartDryer16physicalReleCtrlEv>:

void SmartDryer::physicalReleCtrl()
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
	if(statusParam->dryerOn)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d024      	beq.n	800668c <_ZN10SmartDryer16physicalReleCtrlEv+0x5c>
	{
		if(statusParam->fanOn)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006646:	789b      	ldrb	r3, [r3, #2]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d006      	beq.n	800665a <_ZN10SmartDryer16physicalReleCtrlEv+0x2a>
		{
			fanCtrl->setState(HIGH);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2101      	movs	r1, #1
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe ff77 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
 8006658:	e005      	b.n	8006666 <_ZN10SmartDryer16physicalReleCtrlEv+0x36>
		}
		else
		{
			fanCtrl->setState(LOW);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2100      	movs	r1, #0
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe ff70 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
		}
		if(statusParam->thermoOn)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666a:	785b      	ldrb	r3, [r3, #1]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d006      	beq.n	800667e <_ZN10SmartDryer16physicalReleCtrlEv+0x4e>
		{
			thermoCtrl->setState(HIGH);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	2101      	movs	r1, #1
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe ff65 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
	else
	{
		fanCtrl->setState(LOW);
		thermoCtrl->setState(LOW);
	}
}
 800667c:	e012      	b.n	80066a4 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
			thermoCtrl->setState(LOW);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	2100      	movs	r1, #0
 8006684:	4618      	mov	r0, r3
 8006686:	f7fe ff5e 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
}
 800668a:	e00b      	b.n	80066a4 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
		fanCtrl->setState(LOW);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2100      	movs	r1, #0
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe ff57 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
		thermoCtrl->setState(LOW);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	2100      	movs	r1, #0
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe ff51 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
}
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <_ZN10SmartDryer18peripheralsControlEv>:

void SmartDryer::peripheralsControl()
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	thermoRegulation(statusParam->temperatureSetted);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff feb1 	bl	8006424 <_ZN10SmartDryer16thermoRegulationEf>
	physicalReleCtrl();
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff ffb4 	bl	8006630 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff fe0b 	bl	80062e4 <_ZN10SmartDryer10ledControlEv>
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:


void SmartDryer::showTimeDate(String &Time, String &Date)
{
 80066d6:	b590      	push	{r4, r7, lr}
 80066d8:	b09d      	sub	sp, #116	; 0x74
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
	if(takeTimeTimer->isFinished(true, 500))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80066ea:	2101      	movs	r1, #1
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fc fe60 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d025      	beq.n	8006744 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x6e>
	{
		Time = clock->getTimeDateStr(DS1307_RTC::ONLY_TIME_NO_SEC);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6859      	ldr	r1, [r3, #4]
 80066fc:	f107 0310 	add.w	r3, r7, #16
 8006700:	2201      	movs	r2, #1
 8006702:	4618      	mov	r0, r3
 8006704:	f7fd f8ba 	bl	800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8006708:	f107 0310 	add.w	r3, r7, #16
 800670c:	4619      	mov	r1, r3
 800670e:	68b8      	ldr	r0, [r7, #8]
 8006710:	f00a fcc5 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006714:	f107 0310 	add.w	r3, r7, #16
 8006718:	4618      	mov	r0, r3
 800671a:	f00a fcb4 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Date = clock->getTimeDateStr(DS1307_RTC::ONLY_DATE_NO_YEAR);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6859      	ldr	r1, [r3, #4]
 8006722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006726:	2203      	movs	r2, #3
 8006728:	4618      	mov	r0, r3
 800672a:	f7fd f8a7 	bl	800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 800672e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f00a fcb2 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800673a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800673e:	4618      	mov	r0, r3
 8006740:	f00a fca1 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	display->drawTimeDate(Time, Date);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681c      	ldr	r4, [r3, #0]
 8006748:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	4618      	mov	r0, r3
 8006750:	f00a fdfd 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006754:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4618      	mov	r0, r3
 800675c:	f00a fdf7 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006760:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006764:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006768:	4619      	mov	r1, r3
 800676a:	4620      	mov	r0, r4
 800676c:	f7fe fb9e 	bl	8004eac <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8006770:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006774:	4618      	mov	r0, r3
 8006776:	f00a fc86 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800677a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800677e:	4618      	mov	r0, r3
 8006780:	f00a fc81 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006784:	bf00      	nop
 8006786:	3774      	adds	r7, #116	; 0x74
 8006788:	46bd      	mov	sp, r7
 800678a:	bd90      	pop	{r4, r7, pc}

0800678c <_ZN10SmartDryer25writeDefaultsDryerProgramEh>:

void SmartDryer::writeDefaultsDryerProgram(uint8_t WichProgram)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
	dryerPrograms[WichProgram].programSetted = false;
 8006798:	78fa      	ldrb	r2, [r7, #3]
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4613      	mov	r3, r2
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	4413      	add	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	440b      	add	r3, r1
 80067a6:	334c      	adds	r3, #76	; 0x4c
 80067a8:	2200      	movs	r2, #0
 80067aa:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.second = 0;
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	4413      	add	r3, r2
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	440b      	add	r3, r1
 80067ba:	334e      	adds	r3, #78	; 0x4e
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.minute = 0;
 80067c0:	78fa      	ldrb	r2, [r7, #3]
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	4613      	mov	r3, r2
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	4413      	add	r3, r2
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	440b      	add	r3, r1
 80067ce:	334f      	adds	r3, #79	; 0x4f
 80067d0:	2200      	movs	r2, #0
 80067d2:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = 0;
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	4613      	mov	r3, r2
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	4413      	add	r3, r2
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	440b      	add	r3, r1
 80067e2:	3350      	adds	r3, #80	; 0x50
 80067e4:	2200      	movs	r2, #0
 80067e6:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.day = 1;
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	4413      	add	r3, r2
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	440b      	add	r3, r1
 80067f6:	3351      	adds	r3, #81	; 0x51
 80067f8:	2201      	movs	r2, #1
 80067fa:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.month = 1;
 80067fc:	78fa      	ldrb	r2, [r7, #3]
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4613      	mov	r3, r2
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	4413      	add	r3, r2
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	440b      	add	r3, r1
 800680a:	3352      	adds	r3, #82	; 0x52
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.year = 2020;
 8006810:	78fa      	ldrb	r2, [r7, #3]
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	4613      	mov	r3, r2
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	4413      	add	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	440b      	add	r3, r1
 800681e:	3354      	adds	r3, #84	; 0x54
 8006820:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006824:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.second = 0;
 8006826:	78fa      	ldrb	r2, [r7, #3]
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	4413      	add	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	440b      	add	r3, r1
 8006834:	3356      	adds	r3, #86	; 0x56
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = 10;
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	4613      	mov	r3, r2
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	4413      	add	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	440b      	add	r3, r1
 8006848:	3357      	adds	r3, #87	; 0x57
 800684a:	220a      	movs	r2, #10
 800684c:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = 0;
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	4413      	add	r3, r2
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	440b      	add	r3, r1
 800685c:	3358      	adds	r3, #88	; 0x58
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.day = 1;
 8006862:	78fa      	ldrb	r2, [r7, #3]
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	4613      	mov	r3, r2
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	4413      	add	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	440b      	add	r3, r1
 8006870:	3359      	adds	r3, #89	; 0x59
 8006872:	2201      	movs	r2, #1
 8006874:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.month = 1;
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	4613      	mov	r3, r2
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	4413      	add	r3, r2
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	440b      	add	r3, r1
 8006884:	335a      	adds	r3, #90	; 0x5a
 8006886:	2201      	movs	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.year = 2020;
 800688a:	78fa      	ldrb	r2, [r7, #3]
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	4413      	add	r3, r2
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	440b      	add	r3, r1
 8006898:	335c      	adds	r3, #92	; 0x5c
 800689a:	f240 72e4 	movw	r2, #2020	; 0x7e4
 800689e:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].tempSetted = 30.0;
 80068a0:	78fa      	ldrb	r2, [r7, #3]
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	4613      	mov	r3, r2
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	4413      	add	r3, r2
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	440b      	add	r3, r1
 80068ae:	3360      	adds	r3, #96	; 0x60
 80068b0:	4a03      	ldr	r2, [pc, #12]	; (80068c0 <_ZN10SmartDryer25writeDefaultsDryerProgramEh+0x134>)
 80068b2:	601a      	str	r2, [r3, #0]
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	41f00000 	.word	0x41f00000

080068c4 <_ZN10SmartDryer16saveDryerProgramEh>:

void SmartDryer::saveDryerProgram(uint8_t WichProgram)
{
 80068c4:	b590      	push	{r4, r7, lr}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 80068d0:	230e      	movs	r3, #14
 80068d2:	73fb      	strb	r3, [r7, #15]
	uint32_t TempToSave = 0;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60bb      	str	r3, [r7, #8]
	TempToSave = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 80068d8:	78fa      	ldrb	r2, [r7, #3]
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	4613      	mov	r3, r2
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	4413      	add	r3, r2
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	440b      	add	r3, r1
 80068e6:	3360      	adds	r3, #96	; 0x60
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fa fab4 	bl	8000e58 <__aeabi_f2uiz>
 80068f0:	4603      	mov	r3, r0
 80068f2:	60bb      	str	r3, [r7, #8]
	memory->writeToMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].programSetted, NO_MEM_TRANSFER);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6998      	ldr	r0, [r3, #24]
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	00d2      	lsls	r2, r2, #3
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	b29b      	uxth	r3, r3
 8006906:	3301      	adds	r3, #1
 8006908:	b29c      	uxth	r4, r3
 800690a:	78fa      	ldrb	r2, [r7, #3]
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	440b      	add	r3, r1
 8006918:	334c      	adds	r3, #76	; 0x4c
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	461a      	mov	r2, r3
 800691e:	2300      	movs	r3, #0
 8006920:	4621      	mov	r1, r4
 8006922:	f7fe fc94 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.second, NO_MEM_TRANSFER);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6998      	ldr	r0, [r3, #24]
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	b29b      	uxth	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	00d2      	lsls	r2, r2, #3
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	b29b      	uxth	r3, r3
 8006938:	3302      	adds	r3, #2
 800693a:	b29c      	uxth	r4, r3
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	4413      	add	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	440b      	add	r3, r1
 800694a:	334e      	adds	r3, #78	; 0x4e
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	2300      	movs	r3, #0
 8006952:	4621      	mov	r1, r4
 8006954:	f7fe fc7b 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.minute, NO_MEM_TRANSFER);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6998      	ldr	r0, [r3, #24]
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	b29b      	uxth	r3, r3
 8006960:	461a      	mov	r2, r3
 8006962:	00d2      	lsls	r2, r2, #3
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	b29b      	uxth	r3, r3
 800696a:	3303      	adds	r3, #3
 800696c:	b29c      	uxth	r4, r3
 800696e:	78fa      	ldrb	r2, [r7, #3]
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	4613      	mov	r3, r2
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4413      	add	r3, r2
 8006978:	00db      	lsls	r3, r3, #3
 800697a:	440b      	add	r3, r1
 800697c:	334f      	adds	r3, #79	; 0x4f
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	2300      	movs	r3, #0
 8006984:	4621      	mov	r1, r4
 8006986:	f7fe fc62 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.hour, NO_MEM_TRANSFER);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6998      	ldr	r0, [r3, #24]
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	b29b      	uxth	r3, r3
 8006992:	461a      	mov	r2, r3
 8006994:	00d2      	lsls	r2, r2, #3
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	b29b      	uxth	r3, r3
 800699c:	3304      	adds	r3, #4
 800699e:	b29c      	uxth	r4, r3
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	4413      	add	r3, r2
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	440b      	add	r3, r1
 80069ae:	3350      	adds	r3, #80	; 0x50
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	2300      	movs	r3, #0
 80069b6:	4621      	mov	r1, r4
 80069b8:	f7fe fc49 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.day, NO_MEM_TRANSFER);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6998      	ldr	r0, [r3, #24]
 80069c0:	78fb      	ldrb	r3, [r7, #3]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	00d2      	lsls	r2, r2, #3
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3305      	adds	r3, #5
 80069d0:	b29c      	uxth	r4, r3
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4413      	add	r3, r2
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	440b      	add	r3, r1
 80069e0:	3351      	adds	r3, #81	; 0x51
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	2300      	movs	r3, #0
 80069e8:	4621      	mov	r1, r4
 80069ea:	f7fe fc30 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.month, NO_MEM_TRANSFER);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6998      	ldr	r0, [r3, #24]
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	00d2      	lsls	r2, r2, #3
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3306      	adds	r3, #6
 8006a02:	b29c      	uxth	r4, r3
 8006a04:	78fa      	ldrb	r2, [r7, #3]
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4413      	add	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	440b      	add	r3, r1
 8006a12:	3352      	adds	r3, #82	; 0x52
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	f7fe fc17 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.year, NO_MEM_TRANSFER);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6998      	ldr	r0, [r3, #24]
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	00d2      	lsls	r2, r2, #3
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3307      	adds	r3, #7
 8006a34:	b29c      	uxth	r4, r3
 8006a36:	78fa      	ldrb	r2, [r7, #3]
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	4413      	add	r3, r2
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	440b      	add	r3, r1
 8006a44:	3354      	adds	r3, #84	; 0x54
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	f7fe fbfe 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.second, NO_MEM_TRANSFER);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6998      	ldr	r0, [r3, #24]
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	00d2      	lsls	r2, r2, #3
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3308      	adds	r3, #8
 8006a66:	b29c      	uxth	r4, r3
 8006a68:	78fa      	ldrb	r2, [r7, #3]
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4413      	add	r3, r2
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	440b      	add	r3, r1
 8006a76:	3356      	adds	r3, #86	; 0x56
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	4621      	mov	r1, r4
 8006a80:	f7fe fbe5 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.minute, NO_MEM_TRANSFER);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6998      	ldr	r0, [r3, #24]
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	00d2      	lsls	r2, r2, #3
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3309      	adds	r3, #9
 8006a98:	b29c      	uxth	r4, r3
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	4413      	add	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	440b      	add	r3, r1
 8006aa8:	3357      	adds	r3, #87	; 0x57
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	2300      	movs	r3, #0
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	f7fe fbcc 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.hour, NO_MEM_TRANSFER);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6998      	ldr	r0, [r3, #24]
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	00d2      	lsls	r2, r2, #3
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	330a      	adds	r3, #10
 8006aca:	b29c      	uxth	r4, r3
 8006acc:	78fa      	ldrb	r2, [r7, #3]
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	4413      	add	r3, r2
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	440b      	add	r3, r1
 8006ada:	3358      	adds	r3, #88	; 0x58
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	f7fe fbb3 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.day, NO_MEM_TRANSFER);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6998      	ldr	r0, [r3, #24]
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	00d2      	lsls	r2, r2, #3
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	330b      	adds	r3, #11
 8006afc:	b29c      	uxth	r4, r3
 8006afe:	78fa      	ldrb	r2, [r7, #3]
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	4613      	mov	r3, r2
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	4413      	add	r3, r2
 8006b08:	00db      	lsls	r3, r3, #3
 8006b0a:	440b      	add	r3, r1
 8006b0c:	3359      	adds	r3, #89	; 0x59
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	2300      	movs	r3, #0
 8006b14:	4621      	mov	r1, r4
 8006b16:	f7fe fb9a 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.month, NO_MEM_TRANSFER);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6998      	ldr	r0, [r3, #24]
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	00d2      	lsls	r2, r2, #3
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	b29c      	uxth	r4, r3
 8006b30:	78fa      	ldrb	r2, [r7, #3]
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	4613      	mov	r3, r2
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	4413      	add	r3, r2
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	440b      	add	r3, r1
 8006b3e:	335a      	adds	r3, #90	; 0x5a
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	2300      	movs	r3, #0
 8006b46:	4621      	mov	r1, r4
 8006b48:	f7fe fb81 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.year, NO_MEM_TRANSFER);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6998      	ldr	r0, [r3, #24]
 8006b50:	78fb      	ldrb	r3, [r7, #3]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	00d2      	lsls	r2, r2, #3
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	330d      	adds	r3, #13
 8006b60:	b29c      	uxth	r4, r3
 8006b62:	78fa      	ldrb	r2, [r7, #3]
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	4613      	mov	r3, r2
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	4413      	add	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	440b      	add	r3, r1
 8006b70:	335c      	adds	r3, #92	; 0x5c
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	2300      	movs	r3, #0
 8006b78:	4621      	mov	r1, r4
 8006b7a:	f7fe fb68 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), TempToSave, MEM_TRANSFER);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6998      	ldr	r0, [r3, #24]
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	3301      	adds	r3, #1
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	00d2      	lsls	r2, r2, #3
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	b299      	uxth	r1, r3
 8006b92:	2301      	movs	r3, #1
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	f7fe fb5a 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>

}
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd90      	pop	{r4, r7, pc}

08006ba2 <_ZN10SmartDryer16loadDryerProgramEh>:

void SmartDryer::loadDryerProgram(uint8_t WichProgram)
{
 8006ba2:	b590      	push	{r4, r7, lr}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	460b      	mov	r3, r1
 8006bac:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006bae:	230e      	movs	r3, #14
 8006bb0:	73fb      	strb	r3, [r7, #15]
	uint32_t TempSaved = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60bb      	str	r3, [r7, #8]
	memory->loadMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].programSetted);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6998      	ldr	r0, [r3, #24]
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	00d2      	lsls	r2, r2, #3
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3301      	adds	r3, #1
 8006bca:	b299      	uxth	r1, r3
 8006bcc:	78fa      	ldrb	r2, [r7, #3]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	3348      	adds	r3, #72	; 0x48
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4413      	add	r3, r2
 8006bdc:	3304      	adds	r3, #4
 8006bde:	461a      	mov	r2, r3
 8006be0:	f7fe fb53 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.second);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6998      	ldr	r0, [r3, #24]
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	00d2      	lsls	r2, r2, #3
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	b299      	uxth	r1, r3
 8006bfa:	78fa      	ldrb	r2, [r7, #3]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	4413      	add	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	3348      	adds	r3, #72	; 0x48
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4413      	add	r3, r2
 8006c0a:	3306      	adds	r3, #6
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f7fe fb3c 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.minute);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6998      	ldr	r0, [r3, #24]
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	00d2      	lsls	r2, r2, #3
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3303      	adds	r3, #3
 8006c26:	b299      	uxth	r1, r3
 8006c28:	78fa      	ldrb	r2, [r7, #3]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	4413      	add	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	3348      	adds	r3, #72	; 0x48
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	4413      	add	r3, r2
 8006c38:	3307      	adds	r3, #7
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f7fe fb25 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.hour);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6998      	ldr	r0, [r3, #24]
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	00d2      	lsls	r2, r2, #3
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3304      	adds	r3, #4
 8006c54:	b299      	uxth	r1, r3
 8006c56:	78fa      	ldrb	r2, [r7, #3]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4413      	add	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	3348      	adds	r3, #72	; 0x48
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	3308      	adds	r3, #8
 8006c68:	461a      	mov	r2, r3
 8006c6a:	f7fe fb0e 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.day);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6998      	ldr	r0, [r3, #24]
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	00d2      	lsls	r2, r2, #3
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3305      	adds	r3, #5
 8006c82:	b299      	uxth	r1, r3
 8006c84:	78fa      	ldrb	r2, [r7, #3]
 8006c86:	4613      	mov	r3, r2
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	4413      	add	r3, r2
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	3348      	adds	r3, #72	; 0x48
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4413      	add	r3, r2
 8006c94:	3309      	adds	r3, #9
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fe faf7 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.month);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6998      	ldr	r0, [r3, #24]
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	00d2      	lsls	r2, r2, #3
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3306      	adds	r3, #6
 8006cb0:	b299      	uxth	r1, r3
 8006cb2:	78fa      	ldrb	r2, [r7, #3]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	4413      	add	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	3348      	adds	r3, #72	; 0x48
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	330a      	adds	r3, #10
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f7fe fae0 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.year);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6998      	ldr	r0, [r3, #24]
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	00d2      	lsls	r2, r2, #3
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3307      	adds	r3, #7
 8006cde:	b299      	uxth	r1, r3
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	4413      	add	r3, r2
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	3348      	adds	r3, #72	; 0x48
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	4413      	add	r3, r2
 8006cf0:	330c      	adds	r3, #12
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f7fe fac9 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.second);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6998      	ldr	r0, [r3, #24]
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	00d2      	lsls	r2, r2, #3
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	b299      	uxth	r1, r3
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	4613      	mov	r3, r2
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	4413      	add	r3, r2
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	3350      	adds	r3, #80	; 0x50
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	3306      	adds	r3, #6
 8006d20:	461a      	mov	r2, r3
 8006d22:	f7fe fab2 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.minute);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6998      	ldr	r0, [r3, #24]
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	461a      	mov	r2, r3
 8006d30:	00d2      	lsls	r2, r2, #3
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3309      	adds	r3, #9
 8006d3a:	b299      	uxth	r1, r3
 8006d3c:	78fa      	ldrb	r2, [r7, #3]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	4413      	add	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	3350      	adds	r3, #80	; 0x50
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	3307      	adds	r3, #7
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f7fe fa9b 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.hour);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6998      	ldr	r0, [r3, #24]
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	00d2      	lsls	r2, r2, #3
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	330a      	adds	r3, #10
 8006d68:	b299      	uxth	r1, r3
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	4413      	add	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	3350      	adds	r3, #80	; 0x50
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	f7fe fa84 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.day);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6998      	ldr	r0, [r3, #24]
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	00d2      	lsls	r2, r2, #3
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	330b      	adds	r3, #11
 8006d96:	b299      	uxth	r1, r3
 8006d98:	78fa      	ldrb	r2, [r7, #3]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	4413      	add	r3, r2
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	3350      	adds	r3, #80	; 0x50
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4413      	add	r3, r2
 8006da8:	3309      	adds	r3, #9
 8006daa:	461a      	mov	r2, r3
 8006dac:	f7fe fa6d 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.month);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6998      	ldr	r0, [r3, #24]
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	00d2      	lsls	r2, r2, #3
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	330c      	adds	r3, #12
 8006dc4:	b299      	uxth	r1, r3
 8006dc6:	78fa      	ldrb	r2, [r7, #3]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	4413      	add	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	3350      	adds	r3, #80	; 0x50
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	330a      	adds	r3, #10
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f7fe fa56 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.year);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6998      	ldr	r0, [r3, #24]
 8006de2:	78fb      	ldrb	r3, [r7, #3]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	00d2      	lsls	r2, r2, #3
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	330d      	adds	r3, #13
 8006df2:	b299      	uxth	r1, r3
 8006df4:	78fa      	ldrb	r2, [r7, #3]
 8006df6:	4613      	mov	r3, r2
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4413      	add	r3, r2
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	3350      	adds	r3, #80	; 0x50
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	4413      	add	r3, r2
 8006e04:	330c      	adds	r3, #12
 8006e06:	461a      	mov	r2, r3
 8006e08:	f7fe fa3f 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&TempSaved);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6998      	ldr	r0, [r3, #24]
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	3301      	adds	r3, #1
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	00d2      	lsls	r2, r2, #3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f107 0208 	add.w	r2, r7, #8
 8006e24:	4619      	mov	r1, r3
 8006e26:	f7fe fa30 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	dryerPrograms[WichProgram].tempSetted = (float)TempSaved;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	78fc      	ldrb	r4, [r7, #3]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7f9 fe6a 	bl	8000b08 <__aeabi_ui2f>
 8006e34:	4601      	mov	r1, r0
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	4623      	mov	r3, r4
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	4423      	add	r3, r4
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4413      	add	r3, r2
 8006e42:	3360      	adds	r3, #96	; 0x60
 8006e44:	6019      	str	r1, [r3, #0]
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd90      	pop	{r4, r7, pc}
	...

08006e50 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>:


void SmartDryer::checkSettedProgramTime(uint8_t WichProgram, PROGRAM_STRUCURE ProgramToSet)
{
 8006e50:	b082      	sub	sp, #8
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	f107 0010 	add.w	r0, r7, #16
 8006e5e:	e880 000c 	stmia.w	r0, {r2, r3}
 8006e62:	460b      	mov	r3, r1
 8006e64:	70fb      	strb	r3, [r7, #3]
	clock->getTimeDate(dryerPrograms[WichProgram].startTime);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6858      	ldr	r0, [r3, #4]
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	4413      	add	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	3348      	adds	r3, #72	; 0x48
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	4413      	add	r3, r2
 8006e7a:	3306      	adds	r3, #6
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	f7fc fc59 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	HAL_Delay(250);
 8006e82:	20fa      	movs	r0, #250	; 0xfa
 8006e84:	f005 f88a 	bl	800bf9c <HAL_Delay>
	clock->getTimeDate(dryerPrograms[WichProgram].endTime);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6858      	ldr	r0, [r3, #4]
 8006e8c:	78fa      	ldrb	r2, [r7, #3]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	4413      	add	r3, r2
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	3350      	adds	r3, #80	; 0x50
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	3306      	adds	r3, #6
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	f7fc fc48 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	dryerPrograms[WichProgram].startTime.minute = ProgramToSet.startTime.minute;
 8006ea4:	78fa      	ldrb	r2, [r7, #3]
 8006ea6:	7cf8      	ldrb	r0, [r7, #19]
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	4413      	add	r3, r2
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	440b      	add	r3, r1
 8006eb4:	334f      	adds	r3, #79	; 0x4f
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 8006eba:	78fa      	ldrb	r2, [r7, #3]
 8006ebc:	7ef8      	ldrb	r0, [r7, #27]
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	4413      	add	r3, r2
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	440b      	add	r3, r1
 8006eca:	3357      	adds	r3, #87	; 0x57
 8006ecc:	4602      	mov	r2, r0
 8006ece:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = ProgramToSet.startTime.hour;
 8006ed0:	78fa      	ldrb	r2, [r7, #3]
 8006ed2:	7d38      	ldrb	r0, [r7, #20]
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	4413      	add	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	440b      	add	r3, r1
 8006ee0:	3350      	adds	r3, #80	; 0x50
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = ProgramToSet.endTime.hour;
 8006ee6:	78fa      	ldrb	r2, [r7, #3]
 8006ee8:	7f38      	ldrb	r0, [r7, #28]
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	4413      	add	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	440b      	add	r3, r1
 8006ef6:	3358      	adds	r3, #88	; 0x58
 8006ef8:	4602      	mov	r2, r0
 8006efa:	701a      	strb	r2, [r3, #0]
	if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 8006efc:	7d3a      	ldrb	r2, [r7, #20]
 8006efe:	7f3b      	ldrb	r3, [r7, #28]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d94d      	bls.n	8006fa0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x150>
	{
		if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 8006f04:	78fa      	ldrb	r2, [r7, #3]
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	4413      	add	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	440b      	add	r3, r1
 8006f12:	3359      	adds	r3, #89	; 0x59
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	1c59      	adds	r1, r3, #1
 8006f18:	78fa      	ldrb	r2, [r7, #3]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	4413      	add	r3, r2
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	4403      	add	r3, r0
 8006f26:	335a      	adds	r3, #90	; 0x5a
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	4a60      	ldr	r2, [pc, #384]	; (80070b0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 8006f2e:	5cd3      	ldrb	r3, [r2, r3]
 8006f30:	4299      	cmp	r1, r3
 8006f32:	da15      	bge.n	8006f60 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x110>
			dryerPrograms[WichProgram].endTime.day += 1;
 8006f34:	78fa      	ldrb	r2, [r7, #3]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	4413      	add	r3, r2
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	440b      	add	r3, r1
 8006f42:	3359      	adds	r3, #89	; 0x59
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	b2d8      	uxtb	r0, r3
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4413      	add	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	440b      	add	r3, r1
 8006f58:	3359      	adds	r3, #89	; 0x59
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	701a      	strb	r2, [r3, #0]
//	dryerPrograms[WichProgram].programSetted = true;
//	if(eepromEnabled)
//	{
//		saveDryerProgram(WichProgram);
//	}
}
 8006f5e:	e09f      	b.n	80070a0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			dryerPrograms[WichProgram].endTime.day = 1;
 8006f60:	78fa      	ldrb	r2, [r7, #3]
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	4613      	mov	r3, r2
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	4413      	add	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	440b      	add	r3, r1
 8006f6e:	3359      	adds	r3, #89	; 0x59
 8006f70:	2201      	movs	r2, #1
 8006f72:	701a      	strb	r2, [r3, #0]
			dryerPrograms[WichProgram].endTime.month += 1;
 8006f74:	78fa      	ldrb	r2, [r7, #3]
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	4413      	add	r3, r2
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	440b      	add	r3, r1
 8006f82:	335a      	adds	r3, #90	; 0x5a
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	b2d8      	uxtb	r0, r3
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	4413      	add	r3, r2
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	440b      	add	r3, r1
 8006f98:	335a      	adds	r3, #90	; 0x5a
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	701a      	strb	r2, [r3, #0]
}
 8006f9e:	e07f      	b.n	80070a0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
	else if(ProgramToSet.endTime.hour == ProgramToSet.startTime.hour)
 8006fa0:	7f3a      	ldrb	r2, [r7, #28]
 8006fa2:	7d3b      	ldrb	r3, [r7, #20]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d17b      	bne.n	80070a0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
		if(ProgramToSet.startTime.minute > ProgramToSet.endTime.minute)
 8006fa8:	7cfa      	ldrb	r2, [r7, #19]
 8006faa:	7efb      	ldrb	r3, [r7, #27]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d977      	bls.n	80070a0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			if(ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute) < 50)
 8006fb0:	7cfb      	ldrb	r3, [r7, #19]
 8006fb2:	2b31      	cmp	r3, #49	; 0x31
 8006fb4:	d80b      	bhi.n	8006fce <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x17e>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute);
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	7cf8      	ldrb	r0, [r7, #19]
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	4413      	add	r3, r2
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	440b      	add	r3, r1
 8006fc6:	3357      	adds	r3, #87	; 0x57
 8006fc8:	4602      	mov	r2, r0
 8006fca:	701a      	strb	r2, [r3, #0]
}
 8006fcc:	e068      	b.n	80070a0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 8006fce:	78fa      	ldrb	r2, [r7, #3]
 8006fd0:	7ef8      	ldrb	r0, [r7, #27]
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	4413      	add	r3, r2
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	440b      	add	r3, r1
 8006fde:	3357      	adds	r3, #87	; 0x57
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	701a      	strb	r2, [r3, #0]
				dryerPrograms[WichProgram].endTime.hour = ProgramToSet.startTime.hour + 1;
 8006fe4:	7d3b      	ldrb	r3, [r7, #20]
 8006fe6:	78fa      	ldrb	r2, [r7, #3]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	b2d8      	uxtb	r0, r3
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	4413      	add	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	440b      	add	r3, r1
 8006ff8:	3358      	adds	r3, #88	; 0x58
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	701a      	strb	r2, [r3, #0]
				if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 8006ffe:	7d3a      	ldrb	r2, [r7, #20]
 8007000:	7f3b      	ldrb	r3, [r7, #28]
 8007002:	429a      	cmp	r2, r3
 8007004:	d94c      	bls.n	80070a0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
					if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	4413      	add	r3, r2
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	440b      	add	r3, r1
 8007014:	3359      	adds	r3, #89	; 0x59
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	1c59      	adds	r1, r3, #1
 800701a:	78fa      	ldrb	r2, [r7, #3]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	4413      	add	r3, r2
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	4403      	add	r3, r0
 8007028:	335a      	adds	r3, #90	; 0x5a
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	3b01      	subs	r3, #1
 800702e:	4a20      	ldr	r2, [pc, #128]	; (80070b0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 8007030:	5cd3      	ldrb	r3, [r2, r3]
 8007032:	4299      	cmp	r1, r3
 8007034:	da15      	bge.n	8007062 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x212>
						dryerPrograms[WichProgram].endTime.day += 1;
 8007036:	78fa      	ldrb	r2, [r7, #3]
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	4413      	add	r3, r2
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	440b      	add	r3, r1
 8007044:	3359      	adds	r3, #89	; 0x59
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	78fa      	ldrb	r2, [r7, #3]
 800704a:	3301      	adds	r3, #1
 800704c:	b2d8      	uxtb	r0, r3
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4613      	mov	r3, r2
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	4413      	add	r3, r2
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	440b      	add	r3, r1
 800705a:	3359      	adds	r3, #89	; 0x59
 800705c:	4602      	mov	r2, r0
 800705e:	701a      	strb	r2, [r3, #0]
}
 8007060:	e01e      	b.n	80070a0 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
						dryerPrograms[WichProgram].endTime.day = 1;
 8007062:	78fa      	ldrb	r2, [r7, #3]
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	4413      	add	r3, r2
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	440b      	add	r3, r1
 8007070:	3359      	adds	r3, #89	; 0x59
 8007072:	2201      	movs	r2, #1
 8007074:	701a      	strb	r2, [r3, #0]
						dryerPrograms[WichProgram].endTime.month += 1;
 8007076:	78fa      	ldrb	r2, [r7, #3]
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4413      	add	r3, r2
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	440b      	add	r3, r1
 8007084:	335a      	adds	r3, #90	; 0x5a
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	78fa      	ldrb	r2, [r7, #3]
 800708a:	3301      	adds	r3, #1
 800708c:	b2d8      	uxtb	r0, r3
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	4613      	mov	r3, r2
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	4413      	add	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	440b      	add	r3, r1
 800709a:	335a      	adds	r3, #90	; 0x5a
 800709c:	4602      	mov	r2, r0
 800709e:	701a      	strb	r2, [r3, #0]
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070aa:	b002      	add	sp, #8
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	08015360 	.word	0x08015360

080070b4 <_ZN10SmartDryer22serialComunicationCtrlEv>:

void SmartDryer::serialComunicationCtrl()
{
 80070b4:	b5b0      	push	{r4, r5, r7, lr}
 80070b6:	b0a0      	sub	sp, #128	; 0x80
 80070b8:	af04      	add	r7, sp, #16
 80070ba:	6078      	str	r0, [r7, #4]
	int16_t Command = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	bool TempFound = false;
 80070c2:	2300      	movs	r3, #0
 80070c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	bool SetProgramTime = false;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	float OldTemp = 0.0;
 80070ce:	f04f 0300 	mov.w	r3, #0
 80070d2:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t WichProgram = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	PROGRAM_STRUCURE ProgramToSet;
 80070da:	f107 030c 	add.w	r3, r7, #12
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	605a      	str	r2, [r3, #4]
 80070e4:	609a      	str	r2, [r3, #8]
 80070e6:	60da      	str	r2, [r3, #12]
 80070e8:	611a      	str	r2, [r3, #16]
 80070ea:	615a      	str	r2, [r3, #20]
	Command = externalCommand->receiveSerialCommand();
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fe fcd9 	bl	8005aa8 <_ZN13SerialMessage20receiveSerialCommandEv>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	if(Command != SerialMessage::NO_COMMANDS && Command != SerialMessage::INVALID_MESSAGE)
 80070fc:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007104:	f000 83c9 	beq.w	800789a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
 8007108:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800710c:	f113 0f02 	cmn.w	r3, #2
 8007110:	f000 83c3 	beq.w	800789a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
	{
		statusParam->serialCommandReceived = true;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007118:	2201      	movs	r2, #1
 800711a:	729a      	strb	r2, [r3, #10]
		switch(Command)
 800711c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007120:	3b0b      	subs	r3, #11
 8007122:	2bc7      	cmp	r3, #199	; 0xc7
 8007124:	f200 83af 	bhi.w	8007886 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d2>
 8007128:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7c>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007451 	.word	0x08007451
 8007134:	080074c7 	.word	0x080074c7
 8007138:	080074f7 	.word	0x080074f7
 800713c:	08007527 	.word	0x08007527
 8007140:	08007557 	.word	0x08007557
 8007144:	08007587 	.word	0x08007587
 8007148:	080075f9 	.word	0x080075f9
 800714c:	08007629 	.word	0x08007629
 8007150:	08007659 	.word	0x08007659
 8007154:	08007689 	.word	0x08007689
 8007158:	080076b9 	.word	0x080076b9
 800715c:	0800772b 	.word	0x0800772b
 8007160:	0800775b 	.word	0x0800775b
 8007164:	0800778b 	.word	0x0800778b
 8007168:	080077bb 	.word	0x080077bb
 800716c:	080077eb 	.word	0x080077eb
 8007170:	08007887 	.word	0x08007887
 8007174:	08007887 	.word	0x08007887
 8007178:	08007887 	.word	0x08007887
 800717c:	08007887 	.word	0x08007887
 8007180:	08007887 	.word	0x08007887
 8007184:	08007887 	.word	0x08007887
 8007188:	08007887 	.word	0x08007887
 800718c:	08007887 	.word	0x08007887
 8007190:	08007887 	.word	0x08007887
 8007194:	08007887 	.word	0x08007887
 8007198:	08007887 	.word	0x08007887
 800719c:	08007887 	.word	0x08007887
 80071a0:	08007887 	.word	0x08007887
 80071a4:	08007887 	.word	0x08007887
 80071a8:	08007887 	.word	0x08007887
 80071ac:	08007887 	.word	0x08007887
 80071b0:	08007887 	.word	0x08007887
 80071b4:	08007887 	.word	0x08007887
 80071b8:	08007887 	.word	0x08007887
 80071bc:	08007887 	.word	0x08007887
 80071c0:	08007887 	.word	0x08007887
 80071c4:	08007887 	.word	0x08007887
 80071c8:	08007887 	.word	0x08007887
 80071cc:	08007887 	.word	0x08007887
 80071d0:	08007887 	.word	0x08007887
 80071d4:	08007887 	.word	0x08007887
 80071d8:	08007887 	.word	0x08007887
 80071dc:	08007887 	.word	0x08007887
 80071e0:	08007887 	.word	0x08007887
 80071e4:	08007887 	.word	0x08007887
 80071e8:	08007887 	.word	0x08007887
 80071ec:	08007887 	.word	0x08007887
 80071f0:	08007887 	.word	0x08007887
 80071f4:	08007887 	.word	0x08007887
 80071f8:	08007887 	.word	0x08007887
 80071fc:	08007887 	.word	0x08007887
 8007200:	08007887 	.word	0x08007887
 8007204:	08007887 	.word	0x08007887
 8007208:	08007887 	.word	0x08007887
 800720c:	08007887 	.word	0x08007887
 8007210:	08007887 	.word	0x08007887
 8007214:	08007887 	.word	0x08007887
 8007218:	08007887 	.word	0x08007887
 800721c:	08007887 	.word	0x08007887
 8007220:	08007887 	.word	0x08007887
 8007224:	08007887 	.word	0x08007887
 8007228:	08007887 	.word	0x08007887
 800722c:	08007887 	.word	0x08007887
 8007230:	08007887 	.word	0x08007887
 8007234:	08007887 	.word	0x08007887
 8007238:	08007887 	.word	0x08007887
 800723c:	08007887 	.word	0x08007887
 8007240:	08007887 	.word	0x08007887
 8007244:	08007887 	.word	0x08007887
 8007248:	08007887 	.word	0x08007887
 800724c:	08007887 	.word	0x08007887
 8007250:	08007887 	.word	0x08007887
 8007254:	08007887 	.word	0x08007887
 8007258:	08007887 	.word	0x08007887
 800725c:	08007887 	.word	0x08007887
 8007260:	08007887 	.word	0x08007887
 8007264:	08007887 	.word	0x08007887
 8007268:	08007887 	.word	0x08007887
 800726c:	08007887 	.word	0x08007887
 8007270:	08007887 	.word	0x08007887
 8007274:	08007887 	.word	0x08007887
 8007278:	08007887 	.word	0x08007887
 800727c:	08007887 	.word	0x08007887
 8007280:	08007887 	.word	0x08007887
 8007284:	08007887 	.word	0x08007887
 8007288:	08007887 	.word	0x08007887
 800728c:	08007887 	.word	0x08007887
 8007290:	08007887 	.word	0x08007887
 8007294:	08007887 	.word	0x08007887
 8007298:	08007887 	.word	0x08007887
 800729c:	08007887 	.word	0x08007887
 80072a0:	08007887 	.word	0x08007887
 80072a4:	08007887 	.word	0x08007887
 80072a8:	08007887 	.word	0x08007887
 80072ac:	08007887 	.word	0x08007887
 80072b0:	08007887 	.word	0x08007887
 80072b4:	08007887 	.word	0x08007887
 80072b8:	08007887 	.word	0x08007887
 80072bc:	08007887 	.word	0x08007887
 80072c0:	08007887 	.word	0x08007887
 80072c4:	08007887 	.word	0x08007887
 80072c8:	08007887 	.word	0x08007887
 80072cc:	08007887 	.word	0x08007887
 80072d0:	08007887 	.word	0x08007887
 80072d4:	08007887 	.word	0x08007887
 80072d8:	08007887 	.word	0x08007887
 80072dc:	08007887 	.word	0x08007887
 80072e0:	08007887 	.word	0x08007887
 80072e4:	08007887 	.word	0x08007887
 80072e8:	08007887 	.word	0x08007887
 80072ec:	08007887 	.word	0x08007887
 80072f0:	08007887 	.word	0x08007887
 80072f4:	08007887 	.word	0x08007887
 80072f8:	08007887 	.word	0x08007887
 80072fc:	08007887 	.word	0x08007887
 8007300:	08007887 	.word	0x08007887
 8007304:	08007887 	.word	0x08007887
 8007308:	08007887 	.word	0x08007887
 800730c:	08007887 	.word	0x08007887
 8007310:	08007887 	.word	0x08007887
 8007314:	08007887 	.word	0x08007887
 8007318:	08007887 	.word	0x08007887
 800731c:	08007887 	.word	0x08007887
 8007320:	08007887 	.word	0x08007887
 8007324:	08007887 	.word	0x08007887
 8007328:	08007887 	.word	0x08007887
 800732c:	08007887 	.word	0x08007887
 8007330:	08007887 	.word	0x08007887
 8007334:	08007887 	.word	0x08007887
 8007338:	08007887 	.word	0x08007887
 800733c:	08007887 	.word	0x08007887
 8007340:	08007887 	.word	0x08007887
 8007344:	08007887 	.word	0x08007887
 8007348:	08007887 	.word	0x08007887
 800734c:	08007887 	.word	0x08007887
 8007350:	08007887 	.word	0x08007887
 8007354:	08007887 	.word	0x08007887
 8007358:	08007887 	.word	0x08007887
 800735c:	08007887 	.word	0x08007887
 8007360:	08007887 	.word	0x08007887
 8007364:	08007887 	.word	0x08007887
 8007368:	08007887 	.word	0x08007887
 800736c:	08007887 	.word	0x08007887
 8007370:	08007887 	.word	0x08007887
 8007374:	08007887 	.word	0x08007887
 8007378:	08007887 	.word	0x08007887
 800737c:	08007887 	.word	0x08007887
 8007380:	08007887 	.word	0x08007887
 8007384:	08007887 	.word	0x08007887
 8007388:	08007887 	.word	0x08007887
 800738c:	08007887 	.word	0x08007887
 8007390:	08007887 	.word	0x08007887
 8007394:	08007887 	.word	0x08007887
 8007398:	08007887 	.word	0x08007887
 800739c:	08007887 	.word	0x08007887
 80073a0:	08007887 	.word	0x08007887
 80073a4:	08007887 	.word	0x08007887
 80073a8:	08007887 	.word	0x08007887
 80073ac:	08007887 	.word	0x08007887
 80073b0:	08007887 	.word	0x08007887
 80073b4:	08007887 	.word	0x08007887
 80073b8:	08007887 	.word	0x08007887
 80073bc:	08007887 	.word	0x08007887
 80073c0:	08007887 	.word	0x08007887
 80073c4:	08007887 	.word	0x08007887
 80073c8:	08007887 	.word	0x08007887
 80073cc:	08007887 	.word	0x08007887
 80073d0:	08007887 	.word	0x08007887
 80073d4:	08007887 	.word	0x08007887
 80073d8:	08007887 	.word	0x08007887
 80073dc:	08007887 	.word	0x08007887
 80073e0:	08007887 	.word	0x08007887
 80073e4:	08007887 	.word	0x08007887
 80073e8:	08007887 	.word	0x08007887
 80073ec:	08007887 	.word	0x08007887
 80073f0:	08007887 	.word	0x08007887
 80073f4:	08007887 	.word	0x08007887
 80073f8:	08007887 	.word	0x08007887
 80073fc:	08007887 	.word	0x08007887
 8007400:	08007887 	.word	0x08007887
 8007404:	08007887 	.word	0x08007887
 8007408:	08007887 	.word	0x08007887
 800740c:	08007887 	.word	0x08007887
 8007410:	08007887 	.word	0x08007887
 8007414:	08007887 	.word	0x08007887
 8007418:	08007887 	.word	0x08007887
 800741c:	08007887 	.word	0x08007887
 8007420:	08007887 	.word	0x08007887
 8007424:	08007887 	.word	0x08007887
 8007428:	0800785f 	.word	0x0800785f
 800742c:	08007869 	.word	0x08007869
 8007430:	08007873 	.word	0x08007873
 8007434:	0800787d 	.word	0x0800787d
 8007438:	08007887 	.word	0x08007887
 800743c:	08007887 	.word	0x08007887
 8007440:	08007887 	.word	0x08007887
 8007444:	08007887 	.word	0x08007887
 8007448:	08007887 	.word	0x08007887
 800744c:	08007887 	.word	0x08007887
		{
			case SerialMessage::SET_TEMP:
				OldTemp = statusParam->temperatureSetted;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	4618      	mov	r0, r3
 800745e:	f7fe fbdd 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 8007462:	4602      	mov	r2, r0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007468:	4610      	mov	r0, r2
 800746a:	f7f9 fb4d 	bl	8000b08 <__aeabi_ui2f>
 800746e:	4603      	mov	r3, r0
 8007470:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007472:	2300      	movs	r3, #0
 8007474:	66bb      	str	r3, [r7, #104]	; 0x68
 8007476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007478:	2b0c      	cmp	r3, #12
 800747a:	dc17      	bgt.n	80074ac <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	4618      	mov	r0, r3
 8007484:	f7f9 fce8 	bl	8000e58 <__aeabi_f2uiz>
 8007488:	4603      	mov	r3, r0
 800748a:	b2da      	uxtb	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8007492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007494:	440b      	add	r3, r1
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	429a      	cmp	r2, r3
 800749a:	d103      	bne.n	80074a4 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f0>
					{
						TempFound = true;
 800749c:	2301      	movs	r3, #1
 800749e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 80074a2:	e003      	b.n	80074ac <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				for(int i = 0; i < NTemps; i++)
 80074a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074a6:	3301      	adds	r3, #1
 80074a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80074aa:	e7e4      	b.n	8007476 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3c2>
					}
				}
				if(!TempFound)
 80074ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80074b0:	f083 0301 	eor.w	r3, r3, #1
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 81e7 	beq.w	800788a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
				{
					statusParam->temperatureSetted = OldTemp;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074c2:	605a      	str	r2, [r3, #4]
				}
				break;
 80074c4:	e1e1      	b.n	800788a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
			case SerialMessage::SET_START_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	f107 030c 	add.w	r3, r7, #12
 80074ce:	3302      	adds	r3, #2
 80074d0:	4619      	mov	r1, r3
 80074d2:	4610      	mov	r0, r2
 80074d4:	f7fc f92e 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fe fb9d 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 80074e2:	4603      	mov	r3, r0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_1;
 80074e8:	2300      	movs	r3, #0
 80074ea:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80074ee:	2301      	movs	r3, #1
 80074f0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80074f4:	e1d0      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	f107 030c 	add.w	r3, r7, #12
 80074fe:	3302      	adds	r3, #2
 8007500:	4619      	mov	r1, r3
 8007502:	4610      	mov	r0, r2
 8007504:	f7fc f916 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fb85 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 8007512:	4603      	mov	r3, r0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_1;
 8007518:	2300      	movs	r3, #0
 800751a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007524:	e1b8      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	f107 030c 	add.w	r3, r7, #12
 800752e:	330a      	adds	r3, #10
 8007530:	4619      	mov	r1, r3
 8007532:	4610      	mov	r0, r2
 8007534:	f7fc f8fe 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	4618      	mov	r0, r3
 800753e:	f7fe fb6d 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 8007542:	4603      	mov	r3, r0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_1;
 8007548:	2300      	movs	r3, #0
 800754a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 800754e:	2301      	movs	r3, #1
 8007550:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007554:	e1a0      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	f107 030c 	add.w	r3, r7, #12
 800755e:	330a      	adds	r3, #10
 8007560:	4619      	mov	r1, r3
 8007562:	4610      	mov	r0, r2
 8007564:	f7fc f8e6 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fb55 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 8007572:	4603      	mov	r3, r0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_1;
 8007578:	2300      	movs	r3, #0
 800757a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 800757e:	2301      	movs	r3, #1
 8007580:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007584:	e188      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_1:
				OldTemp = dryerPrograms[DRYER_PROGRAM_1].tempSetted;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758a:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	4618      	mov	r0, r3
 8007592:	f7fe fb43 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 8007596:	4602      	mov	r2, r0
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800759c:	4610      	mov	r0, r2
 800759e:	f7f9 fab3 	bl	8000b08 <__aeabi_ui2f>
 80075a2:	4603      	mov	r3, r0
 80075a4:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 80075a6:	2300      	movs	r3, #0
 80075a8:	667b      	str	r3, [r7, #100]	; 0x64
 80075aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ac:	2b0c      	cmp	r3, #12
 80075ae:	dc17      	bgt.n	80075e0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7f9 fc4e 	bl	8000e58 <__aeabi_f2uiz>
 80075bc:	4603      	mov	r3, r0
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80075c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075c8:	440b      	add	r3, r1
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d103      	bne.n	80075d8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x524>
					{
						TempFound = true;
 80075d0:	2301      	movs	r3, #1
 80075d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 80075d6:	e003      	b.n	80075e0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				for(int i = 0; i < NTemps; i++)
 80075d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075da:	3301      	adds	r3, #1
 80075dc:	667b      	str	r3, [r7, #100]	; 0x64
 80075de:	e7e4      	b.n	80075aa <_ZN10SmartDryer22serialComunicationCtrlEv+0x4f6>
					}
				}
				if(!TempFound)
 80075e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80075e4:	f083 0301 	eor.w	r3, r3, #1
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 814f 	beq.w	800788e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
				{
					dryerPrograms[DRYER_PROGRAM_1].tempSetted = OldTemp;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075f4:	661a      	str	r2, [r3, #96]	; 0x60
				}
				break;
 80075f6:	e14a      	b.n	800788e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
			case SerialMessage::SET_START_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	f107 030c 	add.w	r3, r7, #12
 8007600:	3302      	adds	r3, #2
 8007602:	4619      	mov	r1, r3
 8007604:	4610      	mov	r0, r2
 8007606:	f7fc f895 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe fb04 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 8007614:	4603      	mov	r3, r0
 8007616:	b2db      	uxtb	r3, r3
 8007618:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_2;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007620:	2301      	movs	r3, #1
 8007622:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007626:	e137      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	f107 030c 	add.w	r3, r7, #12
 8007630:	3302      	adds	r3, #2
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f7fc f87d 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe faec 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 8007644:	4603      	mov	r3, r0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_2;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007650:	2301      	movs	r3, #1
 8007652:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007656:	e11f      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	f107 030c 	add.w	r3, r7, #12
 8007660:	330a      	adds	r3, #10
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f7fc f865 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe fad4 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 8007674:	4603      	mov	r3, r0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_2;
 800767a:	2301      	movs	r3, #1
 800767c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007680:	2301      	movs	r3, #1
 8007682:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007686:	e107      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	f107 030c 	add.w	r3, r7, #12
 8007690:	330a      	adds	r3, #10
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f7fc f84d 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fabc 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 80076a4:	4603      	mov	r3, r0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_2;
 80076aa:	2301      	movs	r3, #1
 80076ac:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80076b0:	2301      	movs	r3, #1
 80076b2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80076b6:	e0ef      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_2:
				OldTemp = dryerPrograms[DRYER_PROGRAM_2].tempSetted;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076bc:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe faaa 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 80076c8:	4602      	mov	r2, r0
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80076ce:	4610      	mov	r0, r2
 80076d0:	f7f9 fa1a 	bl	8000b08 <__aeabi_ui2f>
 80076d4:	4603      	mov	r3, r0
 80076d6:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 80076d8:	2300      	movs	r3, #0
 80076da:	663b      	str	r3, [r7, #96]	; 0x60
 80076dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076de:	2b0c      	cmp	r3, #12
 80076e0:	dc17      	bgt.n	8007712 <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7f9 fbb5 	bl	8000e58 <__aeabi_f2uiz>
 80076ee:	4603      	mov	r3, r0
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80076f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076fa:	440b      	add	r3, r1
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d103      	bne.n	800770a <_ZN10SmartDryer22serialComunicationCtrlEv+0x656>
					{
						TempFound = true;
 8007702:	2301      	movs	r3, #1
 8007704:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007708:	e003      	b.n	8007712 <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				for(int i = 0; i < NTemps; i++)
 800770a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800770c:	3301      	adds	r3, #1
 800770e:	663b      	str	r3, [r7, #96]	; 0x60
 8007710:	e7e4      	b.n	80076dc <_ZN10SmartDryer22serialComunicationCtrlEv+0x628>
					}
				}
				if(!TempFound)
 8007712:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007716:	f083 0301 	eor.w	r3, r3, #1
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80b8 	beq.w	8007892 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
				{
					dryerPrograms[DRYER_PROGRAM_2].tempSetted = OldTemp;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007726:	679a      	str	r2, [r3, #120]	; 0x78
				}
				break;
 8007728:	e0b3      	b.n	8007892 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
			case SerialMessage::SET_START_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	f107 030c 	add.w	r3, r7, #12
 8007732:	3302      	adds	r3, #2
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f7fb fffc 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe fa6b 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 8007746:	4603      	mov	r3, r0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_3;
 800774c:	2302      	movs	r3, #2
 800774e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007752:	2301      	movs	r3, #1
 8007754:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007758:	e09e      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	f107 030c 	add.w	r3, r7, #12
 8007762:	3302      	adds	r3, #2
 8007764:	4619      	mov	r1, r3
 8007766:	4610      	mov	r0, r2
 8007768:	f7fb ffe4 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	4618      	mov	r0, r3
 8007772:	f7fe fa53 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 8007776:	4603      	mov	r3, r0
 8007778:	b2db      	uxtb	r3, r3
 800777a:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_3;
 800777c:	2302      	movs	r3, #2
 800777e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007782:	2301      	movs	r3, #1
 8007784:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007788:	e086      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	f107 030c 	add.w	r3, r7, #12
 8007792:	330a      	adds	r3, #10
 8007794:	4619      	mov	r1, r3
 8007796:	4610      	mov	r0, r2
 8007798:	f7fb ffcc 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe fa3b 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 80077a6:	4603      	mov	r3, r0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_3;
 80077ac:	2302      	movs	r3, #2
 80077ae:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80077b2:	2301      	movs	r3, #1
 80077b4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80077b8:	e06e      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	f107 030c 	add.w	r3, r7, #12
 80077c2:	330a      	adds	r3, #10
 80077c4:	4619      	mov	r1, r3
 80077c6:	4610      	mov	r0, r2
 80077c8:	f7fb ffb4 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe fa23 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 80077d6:	4603      	mov	r3, r0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_3;
 80077dc:	2302      	movs	r3, #2
 80077de:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80077e8:	e056      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_3:
				OldTemp = dryerPrograms[DRYER_PROGRAM_3].tempSetted;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f0:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fa10 	bl	8005c1c <_ZN13SerialMessage14getValueSettedEv>
 80077fc:	4602      	mov	r2, r0
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007802:	4610      	mov	r0, r2
 8007804:	f7f9 f980 	bl	8000b08 <__aeabi_ui2f>
 8007808:	4603      	mov	r3, r0
 800780a:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 800780c:	2300      	movs	r3, #0
 800780e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007812:	2b0c      	cmp	r3, #12
 8007814:	dc17      	bgt.n	8007846 <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	4618      	mov	r0, r3
 800781e:	f7f9 fb1b 	bl	8000e58 <__aeabi_f2uiz>
 8007822:	4603      	mov	r3, r0
 8007824:	b2da      	uxtb	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800782c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800782e:	440b      	add	r3, r1
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d103      	bne.n	800783e <_ZN10SmartDryer22serialComunicationCtrlEv+0x78a>
					{
						TempFound = true;
 8007836:	2301      	movs	r3, #1
 8007838:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 800783c:	e003      	b.n	8007846 <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				for(int i = 0; i < NTemps; i++)
 800783e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007840:	3301      	adds	r3, #1
 8007842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007844:	e7e4      	b.n	8007810 <_ZN10SmartDryer22serialComunicationCtrlEv+0x75c>
					}
				}
				if(!TempFound)
 8007846:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800784a:	f083 0301 	eor.w	r3, r3, #1
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d020      	beq.n	8007896 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>
				{
					dryerPrograms[DRYER_PROGRAM_3].tempSetted = OldTemp;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007858:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				}
				break;
 800785c:	e01b      	b.n	8007896 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>


			case SerialMessage::DRYER_ON:
				statusParam->dryerOn = true;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007862:	2201      	movs	r2, #1
 8007864:	701a      	strb	r2, [r3, #0]
				break;
 8007866:	e017      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::DRYER_OFF:
				statusParam->dryerOn = false;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800786c:	2200      	movs	r2, #0
 800786e:	701a      	strb	r2, [r3, #0]
				break;
 8007870:	e012      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_ON:
				statusParam->fanOn = true;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007876:	2201      	movs	r2, #1
 8007878:	709a      	strb	r2, [r3, #2]
				break;
 800787a:	e00d      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_OFF:
				statusParam->fanOn = false;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007880:	2200      	movs	r2, #0
 8007882:	709a      	strb	r2, [r3, #2]
				break;
 8007884:	e008      	b.n	8007898 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
				break;
			case SerialMessage::STOP_PROG_3:
				break;

			default:
				break;
 8007886:	bf00      	nop
 8007888:	e037      	b.n	80078fa <_ZN10SmartDryer22serialComunicationCtrlEv+0x846>
				break;
 800788a:	bf00      	nop
 800788c:	e035      	b.n	80078fa <_ZN10SmartDryer22serialComunicationCtrlEv+0x846>
				break;
 800788e:	bf00      	nop
 8007890:	e033      	b.n	80078fa <_ZN10SmartDryer22serialComunicationCtrlEv+0x846>
				break;
 8007892:	bf00      	nop
 8007894:	e031      	b.n	80078fa <_ZN10SmartDryer22serialComunicationCtrlEv+0x846>
				break;
 8007896:	bf00      	nop
		}
 8007898:	e02f      	b.n	80078fa <_ZN10SmartDryer22serialComunicationCtrlEv+0x846>
	}
	else if(Command == SerialMessage::INVALID_MESSAGE)
 800789a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800789e:	f113 0f02 	cmn.w	r3, #2
 80078a2:	d126      	bne.n	80078f2 <_ZN10SmartDryer22serialComunicationCtrlEv+0x83e>
	{
		externalCommand->sendMessage("Comando invalido, ricevuto: " + externalCommand->getCommandReceived());
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe f9c4 	bl	8005c40 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>
 80078b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80078c0:	4924      	ldr	r1, [pc, #144]	; (8007954 <_ZN10SmartDryer22serialComunicationCtrlEv+0x8a0>)
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fc fb32 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80078c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078cc:	4619      	mov	r1, r3
 80078ce:	4620      	mov	r0, r4
 80078d0:	f7fd fecc 	bl	800566c <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80078d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078d8:	4618      	mov	r0, r3
 80078da:	f009 fbd4 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80078de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078e2:	4618      	mov	r0, r3
 80078e4:	f009 fbcf 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		statusParam->serialCommandReceived = true;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ec:	2201      	movs	r2, #1
 80078ee:	729a      	strb	r2, [r3, #10]
 80078f0:	e003      	b.n	80078fa <_ZN10SmartDryer22serialComunicationCtrlEv+0x846>
	}
	else
	{
		statusParam->serialCommandReceived = false;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f6:	2200      	movs	r2, #0
 80078f8:	729a      	strb	r2, [r3, #10]
	}
	if(SetProgramTime)
 80078fa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d024      	beq.n	800794c <_ZN10SmartDryer22serialComunicationCtrlEv+0x898>
	{
		checkSettedProgramTime(WichProgram, ProgramToSet);
 8007902:	f897 506d 	ldrb.w	r5, [r7, #109]	; 0x6d
 8007906:	466c      	mov	r4, sp
 8007908:	f107 0314 	add.w	r3, r7, #20
 800790c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800790e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007912:	f107 030c 	add.w	r3, r7, #12
 8007916:	cb0c      	ldmia	r3, {r2, r3}
 8007918:	4629      	mov	r1, r5
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7ff fa98 	bl	8006e50 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
		dryerPrograms[WichProgram].programSetted = true;
 8007920:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	4613      	mov	r3, r2
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	4413      	add	r3, r2
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	440b      	add	r3, r1
 8007930:	334c      	adds	r3, #76	; 0x4c
 8007932:	2201      	movs	r2, #1
 8007934:	701a      	strb	r2, [r3, #0]
		if(eepromEnabled)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <_ZN10SmartDryer22serialComunicationCtrlEv+0x898>
		{
			saveDryerProgram(WichProgram);
 8007940:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fe ffbc 	bl	80068c4 <_ZN10SmartDryer16saveDryerProgramEh>
		}
	}
}
 800794c:	bf00      	nop
 800794e:	3770      	adds	r7, #112	; 0x70
 8007950:	46bd      	mov	sp, r7
 8007952:	bdb0      	pop	{r4, r5, r7, pc}
 8007954:	080122c0 	.word	0x080122c0

08007958 <_ZN10SmartDryer7navMenuEv>:



void SmartDryer::navMenu()
{
 8007958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800795c:	b0a6      	sub	sp, #152	; 0x98
 800795e:	af08      	add	r7, sp, #32
 8007960:	6078      	str	r0, [r7, #4]
	bool ExitNavMenu = false;
 8007962:	2300      	movs	r3, #0
 8007964:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	MENU_STRUCTURE *ActualMenu = mainMenu;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800796e:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t MenuSel = MAIN_MENU;
 8007970:	2300      	movs	r3, #0
 8007972:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	showHelpMessageTimer->restart();
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	4618      	mov	r0, r3
 800797c:	f7fb fd0b 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	String Time = "", Date = "";
 8007980:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007984:	4618      	mov	r0, r3
 8007986:	f009 fa4d 	bl	8010e24 <_ZNSaIcEC1Ev>
 800798a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800798e:	f107 0320 	add.w	r3, r7, #32
 8007992:	49bf      	ldr	r1, [pc, #764]	; (8007c90 <_ZN10SmartDryer7navMenuEv+0x338>)
 8007994:	4618      	mov	r0, r3
 8007996:	f009 fd0d 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800799a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800799e:	4618      	mov	r0, r3
 80079a0:	f009 fa41 	bl	8010e26 <_ZNSaIcED1Ev>
 80079a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079a8:	4618      	mov	r0, r3
 80079aa:	f009 fa3b 	bl	8010e24 <_ZNSaIcEC1Ev>
 80079ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80079b2:	f107 0308 	add.w	r3, r7, #8
 80079b6:	49b6      	ldr	r1, [pc, #728]	; (8007c90 <_ZN10SmartDryer7navMenuEv+0x338>)
 80079b8:	4618      	mov	r0, r3
 80079ba:	f009 fcfb 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80079be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079c2:	4618      	mov	r0, r3
 80079c4:	f009 fa2f 	bl	8010e26 <_ZNSaIcED1Ev>
	checkSerialDeviceTimer->restart();
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fb fce2 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	while(!ExitNavMenu)
 80079d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f040 82b3 	bne.w	8007f42 <_ZN10SmartDryer7navMenuEv+0x5ea>
	{
		uint8_t WichKey = DryerKey::NO_KEY;
 80079dc:	2308      	movs	r3, #8
 80079de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		display->clearFrameBuffer();
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fc ff45 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80079ec:	f107 0208 	add.w	r2, r7, #8
 80079f0:	f107 0320 	add.w	r3, r7, #32
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fe fe6d 	bl	80066d6 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(ActualMenu->menuTitle, NHDST7565_LCD::CENTER_POS, MENU_TITLE_YPOS, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681c      	ldr	r4, [r3, #0]
 8007a00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a06:	4611      	mov	r1, r2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f009 fca0 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a16:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	2307      	movs	r3, #7
 8007a1e:	2283      	movs	r2, #131	; 0x83
 8007a20:	4620      	mov	r0, r4
 8007a22:	f7fc ff50 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007a26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f009 fb2b 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ActualMenu->maxMenuLines = display->drawMenuList(ActualMenu->XPos, ActualMenu->YPos, ActualMenu->topItemPos,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	603b      	str	r3, [r7, #0]
 8007a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a38:	f893 c01c 	ldrb.w	ip, [r3, #28]
 8007a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a3e:	f893 e01d 	ldrb.w	lr, [r3, #29]
 8007a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a44:	f893 8024 	ldrb.w	r8, [r3, #36]	; 0x24
 8007a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a50:	6992      	ldr	r2, [r2, #24]
 8007a52:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007a54:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8007a58:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007a5a:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 8007a5e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8007a60:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 8007a64:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8007a66:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8007a68:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8007a6a:	6a36      	ldr	r6, [r6, #32]
 8007a6c:	9606      	str	r6, [sp, #24]
 8007a6e:	9505      	str	r5, [sp, #20]
 8007a70:	9404      	str	r4, [sp, #16]
 8007a72:	9003      	str	r0, [sp, #12]
 8007a74:	9102      	str	r1, [sp, #8]
 8007a76:	9201      	str	r2, [sp, #4]
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	4643      	mov	r3, r8
 8007a7c:	4672      	mov	r2, lr
 8007a7e:	4661      	mov	r1, ip
 8007a80:	6838      	ldr	r0, [r7, #0]
 8007a82:	f7fc ff63 	bl	800494c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>
 8007a86:	4603      	mov	r3, r0
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
//			{
//				showHelpMessageTimer->restart();
//			}
//		}

		display->sendFrameBuffer();
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fc fefb 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		WichKey = keyboard->checkKey();
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd fce4 	bl	800546c <_ZN8DryerKey8checkKeyEv>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		switch(WichKey)
 8007aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aae:	2b07      	cmp	r3, #7
 8007ab0:	f200 81c6 	bhi.w	8007e40 <_ZN10SmartDryer7navMenuEv+0x4e8>
 8007ab4:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <_ZN10SmartDryer7navMenuEv+0x164>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007add 	.word	0x08007add
 8007ac0:	08007b0b 	.word	0x08007b0b
 8007ac4:	08007b3b 	.word	0x08007b3b
 8007ac8:	08007d51 	.word	0x08007d51
 8007acc:	08007add 	.word	0x08007add
 8007ad0:	08007b0b 	.word	0x08007b0b
 8007ad4:	08007dfb 	.word	0x08007dfb
 8007ad8:	08007e41 	.word	0x08007e41
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(ActualMenu->itemSelected > 0)
 8007adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d008      	beq.n	8007af8 <_ZN10SmartDryer7navMenuEv+0x1a0>
					ActualMenu->itemSelected--;
 8007ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ae8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007af2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
				break;
 8007af6:	e1a6      	b.n	8007e46 <_ZN10SmartDryer7navMenuEv+0x4ee>
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
 8007af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007afa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8007b08:	e19d      	b.n	8007e46 <_ZN10SmartDryer7navMenuEv+0x4ee>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(ActualMenu->itemSelected < ActualMenu->maxMenuItems - 1)
 8007b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b10:	461a      	mov	r2, r3
 8007b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b14:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	da08      	bge.n	8007b30 <_ZN10SmartDryer7navMenuEv+0x1d8>
					ActualMenu->itemSelected++;
 8007b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b24:	3301      	adds	r3, #1
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = 0;
				break;
 8007b2e:	e18a      	b.n	8007e46 <_ZN10SmartDryer7navMenuEv+0x4ee>
					ActualMenu->itemSelected = 0;
 8007b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8007b38:	e185      	b.n	8007e46 <_ZN10SmartDryer7navMenuEv+0x4ee>
			case DryerKey::LEFT_KEY:
				switch(MenuSel)
 8007b3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007b3e:	2b07      	cmp	r3, #7
 8007b40:	f000 80dc 	beq.w	8007cfc <_ZN10SmartDryer7navMenuEv+0x3a4>
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	f000 80e5 	beq.w	8007d14 <_ZN10SmartDryer7navMenuEv+0x3bc>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d000      	beq.n	8007b50 <_ZN10SmartDryer7navMenuEv+0x1f8>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
							ExitNavMenu = true;
						}
						break;
					default:
						break;
 8007b4e:	e0fe      	b.n	8007d4e <_ZN10SmartDryer7navMenuEv+0x3f6>
						switch(ActualMenu->itemSelected + 1)
 8007b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b56:	3301      	adds	r3, #1
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	2b08      	cmp	r3, #8
 8007b5c:	d85c      	bhi.n	8007c18 <_ZN10SmartDryer7navMenuEv+0x2c0>
 8007b5e:	a201      	add	r2, pc, #4	; (adr r2, 8007b64 <_ZN10SmartDryer7navMenuEv+0x20c>)
 8007b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b64:	08007b89 	.word	0x08007b89
 8007b68:	08007b99 	.word	0x08007b99
 8007b6c:	08007ba9 	.word	0x08007ba9
 8007b70:	08007bb9 	.word	0x08007bb9
 8007b74:	08007bc9 	.word	0x08007bc9
 8007b78:	08007bd9 	.word	0x08007bd9
 8007b7c:	08007be9 	.word	0x08007be9
 8007b80:	08007bf9 	.word	0x08007bf9
 8007b84:	08007c09 	.word	0x08007c09
								MenuSel = THERMO_CTRL;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = thermoMenuCtrl;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b94:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007b96:	e040      	b.n	8007c1a <_ZN10SmartDryer7navMenuEv+0x2c2>
								MenuSel = FAN_CTRL;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = fanMenuCtrl;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007ba4:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007ba6:	e038      	b.n	8007c1a <_ZN10SmartDryer7navMenuEv+0x2c2>
								MenuSel = TEMP_CTRL;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = tempMenuCtrl;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007bb4:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007bb6:	e030      	b.n	8007c1a <_ZN10SmartDryer7navMenuEv+0x2c2>
								MenuSel = START_DRYER_CTRL;
 8007bb8:	2304      	movs	r3, #4
 8007bba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startDryerMenu;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007bc4:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007bc6:	e028      	b.n	8007c1a <_ZN10SmartDryer7navMenuEv+0x2c2>
								screen = CHANGE_TIME;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
								ExitNavMenu = true;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8007bd6:	e020      	b.n	8007c1a <_ZN10SmartDryer7navMenuEv+0x2c2>
								screen = CHANGE_DATE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
								ExitNavMenu = true;
 8007be0:	2301      	movs	r3, #1
 8007be2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8007be6:	e018      	b.n	8007c1a <_ZN10SmartDryer7navMenuEv+0x2c2>
								MenuSel = CHANGE_PROGRAMS_LIST;
 8007be8:	2307      	movs	r3, #7
 8007bea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = changeProgramsMenu;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007bf4:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007bf6:	e010      	b.n	8007c1a <_ZN10SmartDryer7navMenuEv+0x2c2>
								MenuSel = START_PROGRAMS_LIST;
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startProgramsMenu;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007c04:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007c06:	e008      	b.n	8007c1a <_ZN10SmartDryer7navMenuEv+0x2c2>
								screen = SHOW_INFO;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
								ExitNavMenu = true;
 8007c10:	2301      	movs	r3, #1
 8007c12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8007c16:	e000      	b.n	8007c1a <_ZN10SmartDryer7navMenuEv+0x2c2>
								break;
 8007c18:	bf00      	nop
						if(ActualMenu->withChebox)
 8007c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 8091 	beq.w	8007d48 <_ZN10SmartDryer7navMenuEv+0x3f0>
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007c26:	2300      	movs	r3, #0
 8007c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c2c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007c30:	461a      	mov	r2, r3
 8007c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c34:	4293      	cmp	r3, r2
 8007c36:	da09      	bge.n	8007c4c <_ZN10SmartDryer7navMenuEv+0x2f4>
								ActualMenu->itemsChecked[i] = false;
 8007c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c3e:	4413      	add	r3, r2
 8007c40:	2200      	movs	r2, #0
 8007c42:	701a      	strb	r2, [r3, #0]
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c46:	3301      	adds	r3, #1
 8007c48:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c4a:	e7ee      	b.n	8007c2a <_ZN10SmartDryer7navMenuEv+0x2d2>
							switch(ActualMenu->paramType)
 8007c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d002      	beq.n	8007c5c <_ZN10SmartDryer7navMenuEv+0x304>
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d01c      	beq.n	8007c94 <_ZN10SmartDryer7navMenuEv+0x33c>
									break;
 8007c5a:	e04e      	b.n	8007cfa <_ZN10SmartDryer7navMenuEv+0x3a2>
									if(*(bool *)ActualMenu->paramAssociated)
 8007c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <_ZN10SmartDryer7navMenuEv+0x322>
										ActualMenu->itemsChecked[0] = false;
 8007c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = true;
 8007c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	3301      	adds	r3, #1
 8007c74:	2201      	movs	r2, #1
 8007c76:	701a      	strb	r2, [r3, #0]
									break;
 8007c78:	e03f      	b.n	8007cfa <_ZN10SmartDryer7navMenuEv+0x3a2>
										ActualMenu->itemsChecked[0] = true;
 8007c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	2201      	movs	r2, #1
 8007c80:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = false;
 8007c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	3301      	adds	r3, #1
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
									break;
 8007c8c:	e035      	b.n	8007cfa <_ZN10SmartDryer7navMenuEv+0x3a2>
 8007c8e:	bf00      	nop
 8007c90:	080122e0 	.word	0x080122e0
									switch(MenuSel)
 8007c94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d000      	beq.n	8007c9e <_ZN10SmartDryer7navMenuEv+0x346>
											break;
 8007c9c:	e02c      	b.n	8007cf8 <_ZN10SmartDryer7navMenuEv+0x3a0>
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	667b      	str	r3, [r7, #100]	; 0x64
 8007ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ca4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007ca8:	461a      	mov	r2, r3
 8007caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cac:	4293      	cmp	r3, r2
 8007cae:	da22      	bge.n	8007cf6 <_ZN10SmartDryer7navMenuEv+0x39e>
												uint32_t TempSetted = (uint32_t)*(float *)ActualMenu->paramAssociated;
 8007cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7f9 f8ce 	bl	8000e58 <__aeabi_f2uiz>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	65bb      	str	r3, [r7, #88]	; 0x58
												if(TempSetted == (uint32_t)paramTemperatures[i])
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cc8:	4413      	add	r3, r2
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d106      	bne.n	8007ce2 <_ZN10SmartDryer7navMenuEv+0x38a>
													ActualMenu->itemsChecked[i] = true;
 8007cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cda:	4413      	add	r3, r2
 8007cdc:	2201      	movs	r2, #1
 8007cde:	701a      	strb	r2, [r3, #0]
 8007ce0:	e005      	b.n	8007cee <_ZN10SmartDryer7navMenuEv+0x396>
													ActualMenu->itemsChecked[i] = false;
 8007ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ce8:	4413      	add	r3, r2
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	667b      	str	r3, [r7, #100]	; 0x64
 8007cf4:	e7d5      	b.n	8007ca2 <_ZN10SmartDryer7navMenuEv+0x34a>
											break;
 8007cf6:	bf00      	nop
									break;
 8007cf8:	bf00      	nop
						break; // case MAIN_MENU
 8007cfa:	e025      	b.n	8007d48 <_ZN10SmartDryer7navMenuEv+0x3f0>
						screen = ActualMenu->itemSelected + CHANGE_PROGRAM_1;
 8007cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d02:	3304      	adds	r3, #4
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
						ExitNavMenu = true;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8007d12:	e01c      	b.n	8007d4e <_ZN10SmartDryer7navMenuEv+0x3f6>
						if(dryerPrograms[ ActualMenu->itemSelected].programSetted)
 8007d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	440b      	add	r3, r1
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	4413      	add	r3, r2
 8007d28:	334c      	adds	r3, #76	; 0x4c
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00d      	beq.n	8007d4c <_ZN10SmartDryer7navMenuEv+0x3f4>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
 8007d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d36:	3307      	adds	r3, #7
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
							ExitNavMenu = true;
 8007d40:	2301      	movs	r3, #1
 8007d42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8007d46:	e001      	b.n	8007d4c <_ZN10SmartDryer7navMenuEv+0x3f4>
						break; // case MAIN_MENU
 8007d48:	bf00      	nop
 8007d4a:	e07c      	b.n	8007e46 <_ZN10SmartDryer7navMenuEv+0x4ee>
						break;
 8007d4c:	bf00      	nop
				}
			break;// case LEFT_KEY
 8007d4e:	e07a      	b.n	8007e46 <_ZN10SmartDryer7navMenuEv+0x4ee>
			case DryerKey::OK_KEY:
				if(ActualMenu->withChebox)
 8007d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d074      	beq.n	8007e44 <_ZN10SmartDryer7navMenuEv+0x4ec>
				{
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d60:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007d64:	461a      	mov	r2, r3
 8007d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	da09      	bge.n	8007d80 <_ZN10SmartDryer7navMenuEv+0x428>
						ActualMenu->itemsChecked[i] = false;
 8007d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d72:	4413      	add	r3, r2
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d7e:	e7ee      	b.n	8007d5e <_ZN10SmartDryer7navMenuEv+0x406>
					ActualMenu->itemsChecked[ActualMenu->itemSelected] = true;
 8007d80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007d86:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007d8a:	4413      	add	r3, r2
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	701a      	strb	r2, [r3, #0]
					switch(ActualMenu->paramType)
 8007d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d002      	beq.n	8007da0 <_ZN10SmartDryer7navMenuEv+0x448>
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d00f      	beq.n	8007dbe <_ZN10SmartDryer7navMenuEv+0x466>
								default:
									break;
							}
							break;
						default:
							break;
 8007d9e:	e024      	b.n	8007dea <_ZN10SmartDryer7navMenuEv+0x492>
							if(ActualMenu->itemSelected == 0)
 8007da0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007da2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <_ZN10SmartDryer7navMenuEv+0x45c>
								*(bool *)ActualMenu->paramAssociated = false;
 8007daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]
							break;
 8007db2:	e01a      	b.n	8007dea <_ZN10SmartDryer7navMenuEv+0x492>
								*(bool *)ActualMenu->paramAssociated = true;
 8007db4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db8:	2201      	movs	r2, #1
 8007dba:	701a      	strb	r2, [r3, #0]
							break;
 8007dbc:	e015      	b.n	8007dea <_ZN10SmartDryer7navMenuEv+0x492>
							switch(MenuSel)
 8007dbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d000      	beq.n	8007dc8 <_ZN10SmartDryer7navMenuEv+0x470>
									break;
 8007dc6:	e00f      	b.n	8007de8 <_ZN10SmartDryer7navMenuEv+0x490>
									*(float *)ActualMenu->paramAssociated = (float)paramTemperatures[ActualMenu->itemSelected];
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007dce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007dd0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007dd4:	4413      	add	r3, r2
 8007dd6:	781a      	ldrb	r2, [r3, #0]
 8007dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dda:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f7f8 fe93 	bl	8000b08 <__aeabi_ui2f>
 8007de2:	4603      	mov	r3, r0
 8007de4:	6023      	str	r3, [r4, #0]
									break;
 8007de6:	bf00      	nop
							break;
 8007de8:	bf00      	nop
					}
					MenuSel = MAIN_MENU;
 8007dea:	2300      	movs	r3, #0
 8007dec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					ActualMenu = mainMenu;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007df6:	673b      	str	r3, [r7, #112]	; 0x70
				}
				break;
 8007df8:	e024      	b.n	8007e44 <_ZN10SmartDryer7navMenuEv+0x4ec>
			case DryerKey::LONG_LEFT_KEY:
				switch(MenuSel)
 8007dfa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	2b07      	cmp	r3, #7
 8007e02:	d81b      	bhi.n	8007e3c <_ZN10SmartDryer7navMenuEv+0x4e4>
 8007e04:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <_ZN10SmartDryer7navMenuEv+0x4b4>)
 8007e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0a:	bf00      	nop
 8007e0c:	08007e2d 	.word	0x08007e2d
 8007e10:	08007e2d 	.word	0x08007e2d
 8007e14:	08007e2d 	.word	0x08007e2d
 8007e18:	08007e2d 	.word	0x08007e2d
 8007e1c:	08007e3d 	.word	0x08007e3d
 8007e20:	08007e3d 	.word	0x08007e3d
 8007e24:	08007e2d 	.word	0x08007e2d
 8007e28:	08007e2d 	.word	0x08007e2d
					case FAN_CTRL:
					case TEMP_CTRL:
					case START_DRYER_CTRL:
					case CHANGE_PROGRAMS_LIST:
					case START_PROGRAMS_LIST:
						MenuSel = MAIN_MENU;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						ActualMenu = mainMenu;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e38:	673b      	str	r3, [r7, #112]	; 0x70
						break;
 8007e3a:	e000      	b.n	8007e3e <_ZN10SmartDryer7navMenuEv+0x4e6>
					default:
						break;
 8007e3c:	bf00      	nop
				}
				break;
 8007e3e:	e002      	b.n	8007e46 <_ZN10SmartDryer7navMenuEv+0x4ee>
			case DryerKey::LONG_OK_KEY:
				break;
			default:
				break;
 8007e40:	bf00      	nop
 8007e42:	e000      	b.n	8007e46 <_ZN10SmartDryer7navMenuEv+0x4ee>
				break;
 8007e44:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 8007e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d04d      	beq.n	8007eea <_ZN10SmartDryer7navMenuEv+0x592>
 8007e4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d049      	beq.n	8007eea <_ZN10SmartDryer7navMenuEv+0x592>
		{
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8007e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e60:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007e64:	3b02      	subs	r3, #2
 8007e66:	429a      	cmp	r2, r3
 8007e68:	dd3a      	ble.n	8007ee0 <_ZN10SmartDryer7navMenuEv+0x588>
			{
				if(ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2) < ActualMenu->maxMenuItems - 1)
 8007e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e70:	461a      	mov	r2, r3
 8007e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e74:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007e78:	3b02      	subs	r3, #2
 8007e7a:	1ad2      	subs	r2, r2, r3
 8007e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e7e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007e82:	3b01      	subs	r3, #1
 8007e84:	429a      	cmp	r2, r3
 8007e86:	da0d      	bge.n	8007ea4 <_ZN10SmartDryer7navMenuEv+0x54c>
					ActualMenu->topItemPos = ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2);
 8007e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e8a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8007e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e90:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	3302      	adds	r3, #2
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007ea2:	e003      	b.n	8007eac <_ZN10SmartDryer7navMenuEv+0x554>
				else
					ActualMenu->topItemPos = 0;
 8007ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if(ActualMenu->itemSelected >= ActualMenu->maxMenuItems - ActualMenu->maxMenuLines)
 8007eac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eb6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ebe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007ec2:	1acb      	subs	r3, r1, r3
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	db1a      	blt.n	8007efe <_ZN10SmartDryer7navMenuEv+0x5a6>
				{
					ActualMenu->topItemPos = ActualMenu->maxMenuItems - ActualMenu->maxMenuLines;
 8007ec8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eca:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8007ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ed0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8007ede:	e00e      	b.n	8007efe <_ZN10SmartDryer7navMenuEv+0x5a6>
				}
			}
			else
				ActualMenu->topItemPos = 0;
 8007ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8007ee8:	e009      	b.n	8007efe <_ZN10SmartDryer7navMenuEv+0x5a6>

		}
		else if(WichKey != DryerKey::NO_KEY)
 8007eea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007eee:	2b08      	cmp	r3, #8
 8007ef0:	d006      	beq.n	8007f00 <_ZN10SmartDryer7navMenuEv+0x5a8>
		{
			showHelpMessageTimer->restart();
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fb fa4d 	bl	8003396 <_ZN11ChronoTimer7restartEv>
 8007efc:	e000      	b.n	8007f00 <_ZN10SmartDryer7navMenuEv+0x5a8>
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8007efe:	bf00      	nop
		}
		peripheralsControl();
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7fe fbd3 	bl	80066ac <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, 500))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007f0e:	2101      	movs	r1, #1
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fb fa4e 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d008      	beq.n	8007f2e <_ZN10SmartDryer7navMenuEv+0x5d6>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007f24:	4610      	mov	r0, r2
 8007f26:	f7fd fd53 	bl	80059d0 <_ZN13SerialMessage17isDeviceConnectedEv>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f32:	7a5b      	ldrb	r3, [r3, #9]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f43f ad4c 	beq.w	80079d2 <_ZN10SmartDryer7navMenuEv+0x7a>
		{
			serialComunicationCtrl();
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff f8ba 	bl	80070b4 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitNavMenu)
 8007f40:	e547      	b.n	80079d2 <_ZN10SmartDryer7navMenuEv+0x7a>
	String Time = "", Date = "";
 8007f42:	f107 0308 	add.w	r3, r7, #8
 8007f46:	4618      	mov	r0, r3
 8007f48:	f009 f89d 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007f4c:	f107 0320 	add.w	r3, r7, #32
 8007f50:	4618      	mov	r0, r3
 8007f52:	f009 f898 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}

}
 8007f56:	bf00      	nop
 8007f58:	3778      	adds	r7, #120	; 0x78
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f60 <_ZN10SmartDryer4testEv>:


void SmartDryer::test()
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]

}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr
	...

08007f74 <_ZN10SmartDryer5setupEv>:

void SmartDryer::setup()
{
 8007f74:	b590      	push	{r4, r7, lr}
 8007f76:	b0d1      	sub	sp, #324	; 0x144
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	1d3b      	adds	r3, r7, #4
 8007f7c:	6018      	str	r0, [r3, #0]
	uint32_t FirstBootVal = 0;
 8007f7e:	f107 0308 	add.w	r3, r7, #8
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
	display->setupLcd();
 8007f86:	1d3b      	adds	r3, r7, #4
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fc fb9d 	bl	80046cc <_ZN13NHDST7565_LCD8setupLcdEv>
	clock->setup();
 8007f92:	1d3b      	adds	r3, r7, #4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fb faad 	bl	80034f8 <_ZN10DS1307_RTC5setupEv>
	rtcRunning = clock->isRunning();
 8007f9e:	1d3b      	adds	r3, r7, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fb fac1 	bl	800352c <_ZN10DS1307_RTC9isRunningEv>
 8007faa:	4603      	mov	r3, r0
 8007fac:	461a      	mov	r2, r3
 8007fae:	1d3b      	adds	r3, r7, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44


	paramTemperatures = new uint8_t[NTemps];
 8007fb6:	200d      	movs	r0, #13
 8007fb8:	f008 ff16 	bl	8010de8 <_Znaj>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	1d3b      	adds	r3, r7, #4
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	for(int i = 0; i < NTemps; i++)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8007fce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007fd2:	2b0c      	cmp	r3, #12
 8007fd4:	dc16      	bgt.n	8008004 <_ZN10SmartDryer5setupEv+0x90>
	{
		paramTemperatures[i] = 30 + (i * 5);
 8007fd6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	0092      	lsls	r2, r2, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	1d3b      	adds	r3, r7, #4
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8007fec:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007ff0:	440b      	add	r3, r1
 8007ff2:	321e      	adds	r2, #30
 8007ff4:	b2d2      	uxtb	r2, r2
 8007ff6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NTemps; i++)
 8007ff8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8008002:	e7e4      	b.n	8007fce <_ZN10SmartDryer5setupEv+0x5a>
	}

	physicalReleCtrl();
 8008004:	1d3b      	adds	r3, r7, #4
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	f7fe fb12 	bl	8006630 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 800800c:	1d3b      	adds	r3, r7, #4
 800800e:	6818      	ldr	r0, [r3, #0]
 8008010:	f7fe f968 	bl	80062e4 <_ZN10SmartDryer10ledControlEv>


	mainMenuHelpMsgs.push_back("Accende o spegne la resistenza");
 8008014:	1d3b      	adds	r3, r7, #4
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800801c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008020:	4618      	mov	r0, r3
 8008022:	f008 feff 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008026:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800802a:	f107 030c 	add.w	r3, r7, #12
 800802e:	49af      	ldr	r1, [pc, #700]	; (80082ec <_ZN10SmartDryer5setupEv+0x378>)
 8008030:	4618      	mov	r0, r3
 8008032:	f009 f9bf 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008036:	f107 030c 	add.w	r3, r7, #12
 800803a:	4619      	mov	r1, r3
 800803c:	4620      	mov	r0, r4
 800803e:	f002 fd1c 	bl	800aa7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008042:	f107 030c 	add.w	r3, r7, #12
 8008046:	4618      	mov	r0, r3
 8008048:	f009 f81d 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800804c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008050:	4618      	mov	r0, r3
 8008052:	f008 fee8 	bl	8010e26 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Accende o spegne la ventola");
 8008056:	1d3b      	adds	r3, r7, #4
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800805e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008062:	4618      	mov	r0, r3
 8008064:	f008 fede 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008068:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800806c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008070:	499f      	ldr	r1, [pc, #636]	; (80082f0 <_ZN10SmartDryer5setupEv+0x37c>)
 8008072:	4618      	mov	r0, r3
 8008074:	f009 f99e 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800807c:	4619      	mov	r1, r3
 800807e:	4620      	mov	r0, r4
 8008080:	f002 fcfb 	bl	800aa7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008088:	4618      	mov	r0, r3
 800808a:	f008 fffc 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800808e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008092:	4618      	mov	r0, r3
 8008094:	f008 fec7 	bl	8010e26 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta la temperatura di servizio");
 8008098:	1d3b      	adds	r3, r7, #4
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80080a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80080a4:	4618      	mov	r0, r3
 80080a6:	f008 febd 	bl	8010e24 <_ZNSaIcEC1Ev>
 80080aa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80080ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080b2:	4990      	ldr	r1, [pc, #576]	; (80082f4 <_ZN10SmartDryer5setupEv+0x380>)
 80080b4:	4618      	mov	r0, r3
 80080b6:	f009 f97d 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80080ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080be:	4619      	mov	r1, r3
 80080c0:	4620      	mov	r0, r4
 80080c2:	f002 fcda 	bl	800aa7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80080c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080ca:	4618      	mov	r0, r3
 80080cc:	f008 ffdb 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80080d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80080d4:	4618      	mov	r0, r3
 80080d6:	f008 fea6 	bl	8010e26 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Avvia il dryer manualmente");
 80080da:	1d3b      	adds	r3, r7, #4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80080e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80080e6:	4618      	mov	r0, r3
 80080e8:	f008 fe9c 	bl	8010e24 <_ZNSaIcEC1Ev>
 80080ec:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80080f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80080f4:	4980      	ldr	r1, [pc, #512]	; (80082f8 <_ZN10SmartDryer5setupEv+0x384>)
 80080f6:	4618      	mov	r0, r3
 80080f8:	f009 f95c 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80080fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008100:	4619      	mov	r1, r3
 8008102:	4620      	mov	r0, r4
 8008104:	f002 fcb9 	bl	800aa7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008108:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800810c:	4618      	mov	r0, r3
 800810e:	f008 ffba 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008112:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008116:	4618      	mov	r0, r3
 8008118:	f008 fe85 	bl	8010e26 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica l'ora di sistema");
 800811c:	1d3b      	adds	r3, r7, #4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8008124:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008128:	4618      	mov	r0, r3
 800812a:	f008 fe7b 	bl	8010e24 <_ZNSaIcEC1Ev>
 800812e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8008132:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008136:	4971      	ldr	r1, [pc, #452]	; (80082fc <_ZN10SmartDryer5setupEv+0x388>)
 8008138:	4618      	mov	r0, r3
 800813a:	f009 f93b 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800813e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008142:	4619      	mov	r1, r3
 8008144:	4620      	mov	r0, r4
 8008146:	f002 fc98 	bl	800aa7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800814a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800814e:	4618      	mov	r0, r3
 8008150:	f008 ff99 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008154:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008158:	4618      	mov	r0, r3
 800815a:	f008 fe64 	bl	8010e26 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica la data di sistema");
 800815e:	1d3b      	adds	r3, r7, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8008166:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800816a:	4618      	mov	r0, r3
 800816c:	f008 fe5a 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008170:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008174:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008178:	4961      	ldr	r1, [pc, #388]	; (8008300 <_ZN10SmartDryer5setupEv+0x38c>)
 800817a:	4618      	mov	r0, r3
 800817c:	f009 f91a 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008180:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008184:	4619      	mov	r1, r3
 8008186:	4620      	mov	r0, r4
 8008188:	f002 fc77 	bl	800aa7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800818c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008190:	4618      	mov	r0, r3
 8008192:	f008 ff78 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008196:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800819a:	4618      	mov	r0, r3
 800819c:	f008 fe43 	bl	8010e26 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta i programmi");
 80081a0:	1d3b      	adds	r3, r7, #4
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80081a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80081ac:	4618      	mov	r0, r3
 80081ae:	f008 fe39 	bl	8010e24 <_ZNSaIcEC1Ev>
 80081b2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80081b6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80081ba:	4952      	ldr	r1, [pc, #328]	; (8008304 <_ZN10SmartDryer5setupEv+0x390>)
 80081bc:	4618      	mov	r0, r3
 80081be:	f009 f8f9 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80081c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80081c6:	4619      	mov	r1, r3
 80081c8:	4620      	mov	r0, r4
 80081ca:	f002 fc56 	bl	800aa7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80081ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80081d2:	4618      	mov	r0, r3
 80081d4:	f008 ff57 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80081d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80081dc:	4618      	mov	r0, r3
 80081de:	f008 fe22 	bl	8010e26 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Seleziona il programma da avviare");
 80081e2:	1d3b      	adds	r3, r7, #4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80081ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80081ee:	4618      	mov	r0, r3
 80081f0:	f008 fe18 	bl	8010e24 <_ZNSaIcEC1Ev>
 80081f4:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80081f8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80081fc:	4942      	ldr	r1, [pc, #264]	; (8008308 <_ZN10SmartDryer5setupEv+0x394>)
 80081fe:	4618      	mov	r0, r3
 8008200:	f009 f8d8 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008204:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008208:	4619      	mov	r1, r3
 800820a:	4620      	mov	r0, r4
 800820c:	f002 fc35 	bl	800aa7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008210:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008214:	4618      	mov	r0, r3
 8008216:	f008 ff36 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800821a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800821e:	4618      	mov	r0, r3
 8008220:	f008 fe01 	bl	8010e26 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Mostra info sistema");
 8008224:	1d3b      	adds	r3, r7, #4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800822c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008230:	4618      	mov	r0, r3
 8008232:	f008 fdf7 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008236:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800823a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800823e:	4933      	ldr	r1, [pc, #204]	; (800830c <_ZN10SmartDryer5setupEv+0x398>)
 8008240:	4618      	mov	r0, r3
 8008242:	f009 f8b7 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008246:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800824a:	4619      	mov	r1, r3
 800824c:	4620      	mov	r0, r4
 800824e:	f002 fc14 	bl	800aa7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008252:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008256:	4618      	mov	r0, r3
 8008258:	f008 ff15 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800825c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008260:	4618      	mov	r0, r3
 8008262:	f008 fde0 	bl	8010e26 <_ZNSaIcED1Ev>
	if(mainMenuHelpMsgs.size() < MAX_MENU_ITEMS)
 8008266:	1d3b      	adds	r3, r7, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	33a4      	adds	r3, #164	; 0xa4
 800826c:	4618      	mov	r0, r3
 800826e:	f002 fc15 	bl	800aa9c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008272:	4603      	mov	r3, r0
 8008274:	2b09      	cmp	r3, #9
 8008276:	bf94      	ite	ls
 8008278:	2301      	movls	r3, #1
 800827a:	2300      	movhi	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d048      	beq.n	8008314 <_ZN10SmartDryer5setupEv+0x3a0>
	{
		mainMenuHelpMsgs.clear();
 8008282:	1d3b      	adds	r3, r7, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	33a4      	adds	r3, #164	; 0xa4
 8008288:	4618      	mov	r0, r3
 800828a:	f002 fc1d 	bl	800aac8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 800828e:	2300      	movs	r3, #0
 8008290:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8008294:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008298:	2b09      	cmp	r3, #9
 800829a:	dc3b      	bgt.n	8008314 <_ZN10SmartDryer5setupEv+0x3a0>
		{
			mainMenuHelpMsgs.push_back("");
 800829c:	1d3b      	adds	r3, r7, #4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80082a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80082a8:	4618      	mov	r0, r3
 80082aa:	f008 fdbb 	bl	8010e24 <_ZNSaIcEC1Ev>
 80082ae:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80082b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b6:	4916      	ldr	r1, [pc, #88]	; (8008310 <_ZN10SmartDryer5setupEv+0x39c>)
 80082b8:	4618      	mov	r0, r3
 80082ba:	f009 f87b 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80082be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c2:	4619      	mov	r1, r3
 80082c4:	4620      	mov	r0, r4
 80082c6:	f002 fbd8 	bl	800aa7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80082ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ce:	4618      	mov	r0, r3
 80082d0:	f008 fed9 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80082d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80082d8:	4618      	mov	r0, r3
 80082da:	f008 fda4 	bl	8010e26 <_ZNSaIcED1Ev>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 80082de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082e2:	3301      	adds	r3, #1
 80082e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80082e8:	e7d4      	b.n	8008294 <_ZN10SmartDryer5setupEv+0x320>
 80082ea:	bf00      	nop
 80082ec:	080122e4 	.word	0x080122e4
 80082f0:	08012304 	.word	0x08012304
 80082f4:	08012320 	.word	0x08012320
 80082f8:	08012344 	.word	0x08012344
 80082fc:	08012360 	.word	0x08012360
 8008300:	0801237c 	.word	0x0801237c
 8008304:	08012398 	.word	0x08012398
 8008308:	080123ac 	.word	0x080123ac
 800830c:	080123d0 	.word	0x080123d0
 8008310:	080122e0 	.word	0x080122e0
		}
	}


	mainMenu->menuTitle = "Menu principale";
 8008314:	1d3b      	adds	r3, r7, #4
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800831c:	49cc      	ldr	r1, [pc, #816]	; (8008650 <_ZN10SmartDryer5setupEv+0x6dc>)
 800831e:	4618      	mov	r0, r3
 8008320:	f008 ff95 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	mainMenu->menuVoices = mainMenuVoices;
 8008324:	1d3b      	adds	r3, r7, #4
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800832c:	4ac9      	ldr	r2, [pc, #804]	; (8008654 <_ZN10SmartDryer5setupEv+0x6e0>)
 800832e:	619a      	str	r2, [r3, #24]
	mainMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008330:	1d3b      	adds	r3, r7, #4
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008338:	2205      	movs	r2, #5
 800833a:	771a      	strb	r2, [r3, #28]
	mainMenu->YPos = MENU_LIST_YPOS;
 800833c:	1d3b      	adds	r3, r7, #4
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008344:	2214      	movs	r2, #20
 8008346:	775a      	strb	r2, [r3, #29]
	mainMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008348:	1d3b      	adds	r3, r7, #4
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	1d3b      	adds	r3, r7, #4
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008356:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800835a:	621a      	str	r2, [r3, #32]
	mainMenu->topItemPos = 0;
 800835c:	1d3b      	adds	r3, r7, #4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainMenu->itemSelected = 0;
 800836a:	1d3b      	adds	r3, r7, #4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	mainMenu->maxMenuLines = 0;
 8008378:	1d3b      	adds	r3, r7, #4
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	mainMenu->maxMenuItems = sizeof(mainMenuVoices)/sizeof(mainMenuVoices[0]);
 8008386:	1d3b      	adds	r3, r7, #4
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800838e:	2209      	movs	r2, #9
 8008390:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	mainMenu->withChebox = false;
 8008394:	1d3b      	adds	r3, r7, #4
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	mainMenu->itemsChecked = NULL;
 80083a2:	1d3b      	adds	r3, r7, #4
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083aa:	2200      	movs	r2, #0
 80083ac:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu->paramAssociated = NULL;
 80083ae:	1d3b      	adds	r3, r7, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083b6:	2200      	movs	r2, #0
 80083b8:	631a      	str	r2, [r3, #48]	; 0x30
	mainMenu->paramType = NO_TYPE;
 80083ba:	1d3b      	adds	r3, r7, #4
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mainMenu->menuSelected = true;
 80083c8:	1d3b      	adds	r3, r7, #4
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	thermoMenuCtrl->menuTitle = "Ctrl. thermo";
 80083d6:	1d3b      	adds	r3, r7, #4
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80083de:	499e      	ldr	r1, [pc, #632]	; (8008658 <_ZN10SmartDryer5setupEv+0x6e4>)
 80083e0:	4618      	mov	r0, r3
 80083e2:	f008 ff34 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	thermoMenuCtrl->menuVoices = OnOff;
 80083e6:	1d3b      	adds	r3, r7, #4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80083ee:	4a9b      	ldr	r2, [pc, #620]	; (800865c <_ZN10SmartDryer5setupEv+0x6e8>)
 80083f0:	619a      	str	r2, [r3, #24]
	thermoMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 80083f2:	1d3b      	adds	r3, r7, #4
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80083fa:	223c      	movs	r2, #60	; 0x3c
 80083fc:	771a      	strb	r2, [r3, #28]
	thermoMenuCtrl->YPos = MENU_LIST_YPOS;
 80083fe:	1d3b      	adds	r3, r7, #4
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008406:	2214      	movs	r2, #20
 8008408:	775a      	strb	r2, [r3, #29]
	thermoMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800840a:	1d3b      	adds	r3, r7, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	1d3b      	adds	r3, r7, #4
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008418:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800841c:	621a      	str	r2, [r3, #32]
	thermoMenuCtrl->topItemPos = 0;
 800841e:	1d3b      	adds	r3, r7, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	thermoMenuCtrl->itemSelected = 0;
 800842c:	1d3b      	adds	r3, r7, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	thermoMenuCtrl->maxMenuLines = 0;
 800843a:	1d3b      	adds	r3, r7, #4
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	thermoMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8008448:	1d3b      	adds	r3, r7, #4
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008450:	2202      	movs	r2, #2
 8008452:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	thermoMenuCtrl->withChebox = true;
 8008456:	1d3b      	adds	r3, r7, #4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	thermoMenuCtrl->itemsChecked = new bool(thermoMenuCtrl->maxMenuItems);
 8008464:	2001      	movs	r0, #1
 8008466:	f008 fcc1 	bl	8010dec <_Znwj>
 800846a:	4603      	mov	r3, r0
 800846c:	1d3a      	adds	r2, r7, #4
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8008474:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008478:	2a00      	cmp	r2, #0
 800847a:	bf14      	ite	ne
 800847c:	2201      	movne	r2, #1
 800847e:	2200      	moveq	r2, #0
 8008480:	b2d2      	uxtb	r2, r2
 8008482:	701a      	strb	r2, [r3, #0]
 8008484:	1d3a      	adds	r2, r7, #4
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 800848c:	62d3      	str	r3, [r2, #44]	; 0x2c
	thermoMenuCtrl->paramAssociated = (bool *)&statusParam->thermoOn;
 800848e:	1d3b      	adds	r3, r7, #4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008494:	1d3b      	adds	r3, r7, #4
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800849c:	3201      	adds	r2, #1
 800849e:	631a      	str	r2, [r3, #48]	; 0x30
	thermoMenuCtrl->paramType = PARAM_BOOL_TYPE;
 80084a0:	1d3b      	adds	r3, r7, #4
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	thermoMenuCtrl->menuSelected = true;
 80084ae:	1d3b      	adds	r3, r7, #4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	fanMenuCtrl->menuTitle = "Ctrl. ventola";
 80084bc:	1d3b      	adds	r3, r7, #4
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084c4:	4966      	ldr	r1, [pc, #408]	; (8008660 <_ZN10SmartDryer5setupEv+0x6ec>)
 80084c6:	4618      	mov	r0, r3
 80084c8:	f008 fec1 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	fanMenuCtrl->menuVoices = OnOff;
 80084cc:	1d3b      	adds	r3, r7, #4
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084d4:	4a61      	ldr	r2, [pc, #388]	; (800865c <_ZN10SmartDryer5setupEv+0x6e8>)
 80084d6:	619a      	str	r2, [r3, #24]
	fanMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 80084d8:	1d3b      	adds	r3, r7, #4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084e0:	223c      	movs	r2, #60	; 0x3c
 80084e2:	771a      	strb	r2, [r3, #28]
	fanMenuCtrl->YPos = MENU_LIST_YPOS;
 80084e4:	1d3b      	adds	r3, r7, #4
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084ec:	2214      	movs	r2, #20
 80084ee:	775a      	strb	r2, [r3, #29]
	fanMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80084f0:	1d3b      	adds	r3, r7, #4
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	1d3b      	adds	r3, r7, #4
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084fe:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008502:	621a      	str	r2, [r3, #32]
	fanMenuCtrl->topItemPos = 0;
 8008504:	1d3b      	adds	r3, r7, #4
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	fanMenuCtrl->itemSelected = 0;
 8008512:	1d3b      	adds	r3, r7, #4
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	fanMenuCtrl->maxMenuLines = 0;
 8008520:	1d3b      	adds	r3, r7, #4
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	fanMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 800852e:	1d3b      	adds	r3, r7, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008536:	2202      	movs	r2, #2
 8008538:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	fanMenuCtrl->withChebox = true;
 800853c:	1d3b      	adds	r3, r7, #4
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	fanMenuCtrl->itemsChecked = new bool(fanMenuCtrl->maxMenuItems);
 800854a:	2001      	movs	r0, #1
 800854c:	f008 fc4e 	bl	8010dec <_Znwj>
 8008550:	4603      	mov	r3, r0
 8008552:	1d3a      	adds	r2, r7, #4
 8008554:	6812      	ldr	r2, [r2, #0]
 8008556:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 800855a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800855e:	2a00      	cmp	r2, #0
 8008560:	bf14      	ite	ne
 8008562:	2201      	movne	r2, #1
 8008564:	2200      	moveq	r2, #0
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]
 800856a:	1d3a      	adds	r2, r7, #4
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8008572:	62d3      	str	r3, [r2, #44]	; 0x2c
	fanMenuCtrl->paramAssociated = (bool *)&statusParam->fanOn;
 8008574:	1d3b      	adds	r3, r7, #4
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800857a:	1d3b      	adds	r3, r7, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008582:	3202      	adds	r2, #2
 8008584:	631a      	str	r2, [r3, #48]	; 0x30
	fanMenuCtrl->paramType = PARAM_BOOL_TYPE;
 8008586:	1d3b      	adds	r3, r7, #4
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fanMenuCtrl->menuSelected = true;
 8008594:	1d3b      	adds	r3, r7, #4
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startDryerMenu->menuTitle = "Avvia dryer";
 80085a2:	1d3b      	adds	r3, r7, #4
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80085aa:	492e      	ldr	r1, [pc, #184]	; (8008664 <_ZN10SmartDryer5setupEv+0x6f0>)
 80085ac:	4618      	mov	r0, r3
 80085ae:	f008 fe4e 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startDryerMenu->menuVoices = OnOff;
 80085b2:	1d3b      	adds	r3, r7, #4
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80085ba:	4a28      	ldr	r2, [pc, #160]	; (800865c <_ZN10SmartDryer5setupEv+0x6e8>)
 80085bc:	619a      	str	r2, [r3, #24]
	startDryerMenu->XPos = MENU_RIGHT_LIST_XPOS;
 80085be:	1d3b      	adds	r3, r7, #4
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80085c6:	223c      	movs	r2, #60	; 0x3c
 80085c8:	771a      	strb	r2, [r3, #28]
	startDryerMenu->YPos = MENU_LIST_YPOS;
 80085ca:	1d3b      	adds	r3, r7, #4
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80085d2:	2214      	movs	r2, #20
 80085d4:	775a      	strb	r2, [r3, #29]
	startDryerMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80085d6:	1d3b      	adds	r3, r7, #4
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	1d3b      	adds	r3, r7, #4
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80085e4:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80085e8:	621a      	str	r2, [r3, #32]
	startDryerMenu->topItemPos = 0;
 80085ea:	1d3b      	adds	r3, r7, #4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startDryerMenu->itemSelected = 0;
 80085f8:	1d3b      	adds	r3, r7, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startDryerMenu->maxMenuLines = 0;
 8008606:	1d3b      	adds	r3, r7, #4
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startDryerMenu->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8008614:	1d3b      	adds	r3, r7, #4
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800861c:	2202      	movs	r2, #2
 800861e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startDryerMenu->withChebox = true;
 8008622:	1d3b      	adds	r3, r7, #4
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startDryerMenu->itemsChecked = new bool(startDryerMenu->maxMenuItems);
 8008630:	2001      	movs	r0, #1
 8008632:	f008 fbdb 	bl	8010dec <_Znwj>
 8008636:	4603      	mov	r3, r0
 8008638:	1d3a      	adds	r2, r7, #4
 800863a:	6812      	ldr	r2, [r2, #0]
 800863c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8008640:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008644:	2a00      	cmp	r2, #0
 8008646:	bf14      	ite	ne
 8008648:	2201      	movne	r2, #1
 800864a:	2200      	moveq	r2, #0
 800864c:	e00c      	b.n	8008668 <_ZN10SmartDryer5setupEv+0x6f4>
 800864e:	bf00      	nop
 8008650:	080123e4 	.word	0x080123e4
 8008654:	20000030 	.word	0x20000030
 8008658:	080123f4 	.word	0x080123f4
 800865c:	20000054 	.word	0x20000054
 8008660:	08012404 	.word	0x08012404
 8008664:	08012200 	.word	0x08012200
 8008668:	b2d2      	uxtb	r2, r2
 800866a:	701a      	strb	r2, [r3, #0]
 800866c:	1d3a      	adds	r2, r7, #4
 800866e:	6812      	ldr	r2, [r2, #0]
 8008670:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8008674:	62d3      	str	r3, [r2, #44]	; 0x2c
	startDryerMenu->paramAssociated = (bool *)&statusParam->dryerOn;
 8008676:	1d3b      	adds	r3, r7, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800867c:	1d3b      	adds	r3, r7, #4
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008684:	631a      	str	r2, [r3, #48]	; 0x30
	startDryerMenu->paramType = PARAM_BOOL_TYPE;
 8008686:	1d3b      	adds	r3, r7, #4
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startDryerMenu->menuSelected = true;
 8008694:	1d3b      	adds	r3, r7, #4
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	tempMenuCtrl->menuTitle = "Imposta temp.";
 80086a2:	1d3b      	adds	r3, r7, #4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80086aa:	49cc      	ldr	r1, [pc, #816]	; (80089dc <_ZN10SmartDryer5setupEv+0xa68>)
 80086ac:	4618      	mov	r0, r3
 80086ae:	f008 fdce 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	tempMenuCtrl->menuVoices = Temps;
 80086b2:	1d3b      	adds	r3, r7, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80086ba:	4ac9      	ldr	r2, [pc, #804]	; (80089e0 <_ZN10SmartDryer5setupEv+0xa6c>)
 80086bc:	619a      	str	r2, [r3, #24]
	tempMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 80086be:	1d3b      	adds	r3, r7, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80086c6:	223c      	movs	r2, #60	; 0x3c
 80086c8:	771a      	strb	r2, [r3, #28]
	tempMenuCtrl->YPos = MENU_LIST_YPOS;
 80086ca:	1d3b      	adds	r3, r7, #4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80086d2:	2214      	movs	r2, #20
 80086d4:	775a      	strb	r2, [r3, #29]
	tempMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80086d6:	1d3b      	adds	r3, r7, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	1d3b      	adds	r3, r7, #4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80086e4:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80086e8:	621a      	str	r2, [r3, #32]
	tempMenuCtrl->topItemPos = 0;
 80086ea:	1d3b      	adds	r3, r7, #4
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	tempMenuCtrl->itemSelected = 0;
 80086f8:	1d3b      	adds	r3, r7, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	tempMenuCtrl->maxMenuLines = 0;
 8008706:	1d3b      	adds	r3, r7, #4
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	tempMenuCtrl->maxMenuItems = sizeof(Temps)/sizeof(Temps[0]);;
 8008714:	1d3b      	adds	r3, r7, #4
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800871c:	220d      	movs	r2, #13
 800871e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	tempMenuCtrl->withChebox = true;
 8008722:	1d3b      	adds	r3, r7, #4
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tempMenuCtrl->itemsChecked = new bool(tempMenuCtrl->maxMenuItems);
 8008730:	2001      	movs	r0, #1
 8008732:	f008 fb5b 	bl	8010dec <_Znwj>
 8008736:	4603      	mov	r3, r0
 8008738:	1d3a      	adds	r2, r7, #4
 800873a:	6812      	ldr	r2, [r2, #0]
 800873c:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8008740:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008744:	2a00      	cmp	r2, #0
 8008746:	bf14      	ite	ne
 8008748:	2201      	movne	r2, #1
 800874a:	2200      	moveq	r2, #0
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	1d3a      	adds	r2, r7, #4
 8008752:	6812      	ldr	r2, [r2, #0]
 8008754:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8008758:	62d3      	str	r3, [r2, #44]	; 0x2c
	tempMenuCtrl->paramAssociated = (float *)&statusParam->temperatureSetted;
 800875a:	1d3b      	adds	r3, r7, #4
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008760:	1d3b      	adds	r3, r7, #4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008768:	3204      	adds	r2, #4
 800876a:	631a      	str	r2, [r3, #48]	; 0x30
	tempMenuCtrl->paramType = PARAM_FLOAT_TYPE;
 800876c:	1d3b      	adds	r3, r7, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008774:	2204      	movs	r2, #4
 8008776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tempMenuCtrl->menuSelected = true;
 800877a:	1d3b      	adds	r3, r7, #4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	changeProgramsMenu->menuTitle = "Modifica programma";
 8008788:	1d3b      	adds	r3, r7, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008790:	4994      	ldr	r1, [pc, #592]	; (80089e4 <_ZN10SmartDryer5setupEv+0xa70>)
 8008792:	4618      	mov	r0, r3
 8008794:	f008 fd5b 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	changeProgramsMenu->menuVoices = programsMenuVoices;
 8008798:	1d3b      	adds	r3, r7, #4
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80087a0:	4a91      	ldr	r2, [pc, #580]	; (80089e8 <_ZN10SmartDryer5setupEv+0xa74>)
 80087a2:	619a      	str	r2, [r3, #24]
	changeProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 80087a4:	1d3b      	adds	r3, r7, #4
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80087ac:	2205      	movs	r2, #5
 80087ae:	771a      	strb	r2, [r3, #28]
	changeProgramsMenu->YPos = MENU_LIST_YPOS;
 80087b0:	1d3b      	adds	r3, r7, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80087b8:	2214      	movs	r2, #20
 80087ba:	775a      	strb	r2, [r3, #29]
	changeProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80087bc:	1d3b      	adds	r3, r7, #4
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	1d3b      	adds	r3, r7, #4
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80087ca:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80087ce:	621a      	str	r2, [r3, #32]
	changeProgramsMenu->topItemPos = 0;
 80087d0:	1d3b      	adds	r3, r7, #4
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	changeProgramsMenu->itemSelected = 0;
 80087de:	1d3b      	adds	r3, r7, #4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	changeProgramsMenu->maxMenuLines = 0;
 80087ec:	1d3b      	adds	r3, r7, #4
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	changeProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 80087fa:	1d3b      	adds	r3, r7, #4
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008802:	2203      	movs	r2, #3
 8008804:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	changeProgramsMenu->withChebox = false;
 8008808:	1d3b      	adds	r3, r7, #4
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	changeProgramsMenu->itemsChecked = NULL;
 8008816:	1d3b      	adds	r3, r7, #4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800881e:	2200      	movs	r2, #0
 8008820:	62da      	str	r2, [r3, #44]	; 0x2c
	changeProgramsMenu->paramAssociated = NULL;
 8008822:	1d3b      	adds	r3, r7, #4
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800882a:	2200      	movs	r2, #0
 800882c:	631a      	str	r2, [r3, #48]	; 0x30
	changeProgramsMenu->paramType = NO_TYPE;
 800882e:	1d3b      	adds	r3, r7, #4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	changeProgramsMenu->menuSelected = true;
 800883c:	1d3b      	adds	r3, r7, #4
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startProgramsMenu->menuTitle = "Avvia programma";
 800884a:	1d3b      	adds	r3, r7, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008852:	4966      	ldr	r1, [pc, #408]	; (80089ec <_ZN10SmartDryer5setupEv+0xa78>)
 8008854:	4618      	mov	r0, r3
 8008856:	f008 fcfa 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startProgramsMenu->menuVoices = programsMenuVoices;
 800885a:	1d3b      	adds	r3, r7, #4
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008862:	4a61      	ldr	r2, [pc, #388]	; (80089e8 <_ZN10SmartDryer5setupEv+0xa74>)
 8008864:	619a      	str	r2, [r3, #24]
	startProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008866:	1d3b      	adds	r3, r7, #4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800886e:	2205      	movs	r2, #5
 8008870:	771a      	strb	r2, [r3, #28]
	startProgramsMenu->YPos = MENU_LIST_YPOS;
 8008872:	1d3b      	adds	r3, r7, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800887a:	2214      	movs	r2, #20
 800887c:	775a      	strb	r2, [r3, #29]
	startProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800887e:	1d3b      	adds	r3, r7, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	1d3b      	adds	r3, r7, #4
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800888c:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008890:	621a      	str	r2, [r3, #32]
	startProgramsMenu->topItemPos = 0;
 8008892:	1d3b      	adds	r3, r7, #4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startProgramsMenu->itemSelected = 0;
 80088a0:	1d3b      	adds	r3, r7, #4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startProgramsMenu->maxMenuLines = 0;
 80088ae:	1d3b      	adds	r3, r7, #4
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 80088bc:	1d3b      	adds	r3, r7, #4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80088c4:	2203      	movs	r2, #3
 80088c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startProgramsMenu->withChebox = false;
 80088ca:	1d3b      	adds	r3, r7, #4
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startProgramsMenu->itemsChecked = NULL;
 80088d8:	1d3b      	adds	r3, r7, #4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80088e0:	2200      	movs	r2, #0
 80088e2:	62da      	str	r2, [r3, #44]	; 0x2c
	startProgramsMenu->paramAssociated = NULL;
 80088e4:	1d3b      	adds	r3, r7, #4
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80088ec:	2200      	movs	r2, #0
 80088ee:	631a      	str	r2, [r3, #48]	; 0x30
	startProgramsMenu->paramType = NO_TYPE;
 80088f0:	1d3b      	adds	r3, r7, #4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startProgramsMenu->menuSelected = true;
 80088fe:	1d3b      	adds	r3, r7, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	if(eepromEnabled)
 800890c:	1d3b      	adds	r3, r7, #4
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 80d5 	beq.w	8008ac4 <_ZN10SmartDryer5setupEv+0xb50>
	{
		if(resetMemory)
 800891a:	1d3b      	adds	r3, r7, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8008922:	2b00      	cmp	r3, #0
 8008924:	d010      	beq.n	8008948 <_ZN10SmartDryer5setupEv+0x9d4>
		{
			FirstBootVal = 500;
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800892e:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, MEM_TRANSFER);
 8008930:	1d3b      	adds	r3, r7, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6998      	ldr	r0, [r3, #24]
 8008936:	f107 0308 	add.w	r3, r7, #8
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	2301      	movs	r3, #1
 800893e:	2100      	movs	r1, #0
 8008940:	f7fc fc85 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			ResetSystem;
 8008944:	f003 fff8 	bl	800c938 <HAL_NVIC_SystemReset>
		}
		if(!memory->memoryEmpty())
 8008948:	1d3b      	adds	r3, r7, #4
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	4618      	mov	r0, r3
 8008950:	f7fc fc45 	bl	80051de <_ZN12STM32_EEPROM11memoryEmptyEv>
 8008954:	4603      	mov	r3, r0
 8008956:	f083 0301 	eor.w	r3, r3, #1
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d073      	beq.n	8008a48 <_ZN10SmartDryer5setupEv+0xad4>
		{
			memory->loadMemory(FIRST_BOOT, &FirstBootVal);
 8008960:	1d3b      	adds	r3, r7, #4
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	f107 0208 	add.w	r2, r7, #8
 800896a:	2100      	movs	r1, #0
 800896c:	4618      	mov	r0, r3
 800896e:	f7fc fc8c 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
			if(FirstBootVal == 200)
 8008972:	f107 0308 	add.w	r3, r7, #8
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2bc8      	cmp	r3, #200	; 0xc8
 800897a:	d115      	bne.n	80089a8 <_ZN10SmartDryer5setupEv+0xa34>
			{
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 800897c:	2300      	movs	r3, #0
 800897e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008982:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008986:	2b02      	cmp	r3, #2
 8008988:	f300 809c 	bgt.w	8008ac4 <_ZN10SmartDryer5setupEv+0xb50>
				{
					loadDryerProgram(i);
 800898c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008990:	b2da      	uxtb	r2, r3
 8008992:	1d3b      	adds	r3, r7, #4
 8008994:	4611      	mov	r1, r2
 8008996:	6818      	ldr	r0, [r3, #0]
 8008998:	f7fe f903 	bl	8006ba2 <_ZN10SmartDryer16loadDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 800899c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089a0:	3301      	adds	r3, #1
 80089a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80089a6:	e7ec      	b.n	8008982 <_ZN10SmartDryer5setupEv+0xa0e>
				}
			}
			else
			{
				FirstBootVal = 200;
 80089a8:	f107 0308 	add.w	r3, r7, #8
 80089ac:	22c8      	movs	r2, #200	; 0xc8
 80089ae:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80089b0:	2300      	movs	r3, #0
 80089b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80089b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	dc18      	bgt.n	80089f0 <_ZN10SmartDryer5setupEv+0xa7c>
				{
					writeDefaultsDryerProgram(i);
 80089be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	1d3b      	adds	r3, r7, #4
 80089c6:	4611      	mov	r1, r2
 80089c8:	6818      	ldr	r0, [r3, #0]
 80089ca:	f7fd fedf 	bl	800678c <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80089ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80089d2:	3301      	adds	r3, #1
 80089d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80089d8:	e7ed      	b.n	80089b6 <_ZN10SmartDryer5setupEv+0xa42>
 80089da:	bf00      	nop
 80089dc:	080121f0 	.word	0x080121f0
 80089e0:	2000005c 	.word	0x2000005c
 80089e4:	08012414 	.word	0x08012414
 80089e8:	20000090 	.word	0x20000090
 80089ec:	0801223c 	.word	0x0801223c
				}
				memory->eraseMemory();
 80089f0:	1d3b      	adds	r3, r7, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fc fbe0 	bl	80051bc <_ZN12STM32_EEPROM11eraseMemoryEv>
				memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 80089fc:	1d3b      	adds	r3, r7, #4
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6998      	ldr	r0, [r3, #24]
 8008a02:	f107 0308 	add.w	r3, r7, #8
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	f7fc fc1f 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008a10:	2300      	movs	r3, #0
 8008a12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	dc11      	bgt.n	8008a42 <_ZN10SmartDryer5setupEv+0xace>
				{
					saveDryerProgram(i);
 8008a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	1d3b      	adds	r3, r7, #4
 8008a26:	4611      	mov	r1, r2
 8008a28:	6818      	ldr	r0, [r3, #0]
 8008a2a:	f7fd ff4b 	bl	80068c4 <_ZN10SmartDryer16saveDryerProgramEh>
					HAL_Delay(500);
 8008a2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a32:	f003 fab3 	bl	800bf9c <HAL_Delay>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008a40:	e7e9      	b.n	8008a16 <_ZN10SmartDryer5setupEv+0xaa2>
				}
				ResetSystem;
 8008a42:	f003 ff79 	bl	800c938 <HAL_NVIC_SystemReset>
			}
			ResetSystem;
		}
	}

}
 8008a46:	e03d      	b.n	8008ac4 <_ZN10SmartDryer5setupEv+0xb50>
			FirstBootVal = 200;
 8008a48:	f107 0308 	add.w	r3, r7, #8
 8008a4c:	22c8      	movs	r2, #200	; 0xc8
 8008a4e:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8008a50:	1d3b      	adds	r3, r7, #4
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6998      	ldr	r0, [r3, #24]
 8008a56:	f107 0308 	add.w	r3, r7, #8
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f7fc fbf5 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008a64:	2300      	movs	r3, #0
 8008a66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	dc0d      	bgt.n	8008a8e <_ZN10SmartDryer5setupEv+0xb1a>
				writeDefaultsDryerProgram(i);
 8008a72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	1d3b      	adds	r3, r7, #4
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	f7fd fe85 	bl	800678c <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008a82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a86:	3301      	adds	r3, #1
 8008a88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008a8c:	e7ed      	b.n	8008a6a <_ZN10SmartDryer5setupEv+0xaf6>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008a94:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	dc11      	bgt.n	8008ac0 <_ZN10SmartDryer5setupEv+0xb4c>
				saveDryerProgram(i);
 8008a9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	1d3b      	adds	r3, r7, #4
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	f7fd ff0c 	bl	80068c4 <_ZN10SmartDryer16saveDryerProgramEh>
				HAL_Delay(500);
 8008aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ab0:	f003 fa74 	bl	800bf9c <HAL_Delay>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008ab4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ab8:	3301      	adds	r3, #1
 8008aba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008abe:	e7e9      	b.n	8008a94 <_ZN10SmartDryer5setupEv+0xb20>
			ResetSystem;
 8008ac0:	f003 ff3a 	bl	800c938 <HAL_NVIC_SystemReset>
}
 8008ac4:	bf00      	nop
 8008ac6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd90      	pop	{r4, r7, pc}
 8008ace:	bf00      	nop

08008ad0 <_ZN10SmartDryer10changeTimeEv>:


void SmartDryer::changeTime()
{
 8008ad0:	b590      	push	{r4, r7, lr}
 8008ad2:	b0bd      	sub	sp, #244	; 0xf4
 8008ad4:	af02      	add	r7, sp, #8
 8008ad6:	6078      	str	r0, [r7, #4]
	bool ExitChangeTime = false;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t Hour = 0, Minute = 0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	bool IsHours = true;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	String Title = "", Number = "";
 8008af0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008af4:	4618      	mov	r0, r3
 8008af6:	f008 f995 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008afa:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008afe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008b02:	49d0      	ldr	r1, [pc, #832]	; (8008e44 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008b04:	4618      	mov	r0, r3
 8008b06:	f008 fc55 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f008 f989 	bl	8010e26 <_ZNSaIcED1Ev>
 8008b14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f008 f983 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008b1e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8008b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008b26:	49c7      	ldr	r1, [pc, #796]	; (8008e44 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f008 fc43 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008b32:	4618      	mov	r0, r3
 8008b34:	f008 f977 	bl	8010e26 <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8008b38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f008 f971 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008b42:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b4a:	49be      	ldr	r1, [pc, #760]	; (8008e44 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f008 fc31 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008b56:	4618      	mov	r0, r3
 8008b58:	f008 f965 	bl	8010e26 <_ZNSaIcED1Ev>
 8008b5c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008b60:	4618      	mov	r0, r3
 8008b62:	f008 f95f 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008b66:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008b6a:	f107 0310 	add.w	r3, r7, #16
 8008b6e:	49b5      	ldr	r1, [pc, #724]	; (8008e44 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008b70:	4618      	mov	r0, r3
 8008b72:	f008 fc1f 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b76:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f008 f953 	bl	8010e26 <_ZNSaIcED1Ev>
	checkSerialDeviceTimer->restart();
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fa fc06 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	while(!ExitChangeTime)
 8008b8a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f040 815e 	bne.w	8008e50 <_ZN10SmartDryer10changeTimeEv+0x380>
	{
		display->clearFrameBuffer();
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fb fe6c 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8008b9e:	f107 0210 	add.w	r2, r7, #16
 8008ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7fd fd94 	bl	80066d6 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(IsHours)
 8008bae:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d01b      	beq.n	8008bee <_ZN10SmartDryer10changeTimeEv+0x11e>
		{
			Title = "Imposta ora";
 8008bb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008bba:	49a3      	ldr	r1, [pc, #652]	; (8008e48 <_ZN10SmartDryer10changeTimeEv+0x378>)
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f008 fb46 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Hour);
 8008bc2:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 8008bc6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fa fc23 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008bd2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008bd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008bda:	4611      	mov	r1, r2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f008 fa5e 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008be2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008be6:	4618      	mov	r0, r3
 8008be8:	f008 fa4d 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008bec:	e01a      	b.n	8008c24 <_ZN10SmartDryer10changeTimeEv+0x154>
		}
		else
		{
			Title = "Imposta minuto";
 8008bee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008bf2:	4996      	ldr	r1, [pc, #600]	; (8008e4c <_ZN10SmartDryer10changeTimeEv+0x37c>)
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f008 fb2a 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Minute);
 8008bfa:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8008bfe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008c02:	4611      	mov	r1, r2
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fa fc07 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008c0a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c12:	4611      	mov	r1, r2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f008 fa42 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008c1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f008 fa31 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681c      	ldr	r4, [r3, #0]
 8008c28:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008c2c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008c30:	4611      	mov	r1, r2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f008 fb8b 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008c40:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	2305      	movs	r3, #5
 8008c48:	2283      	movs	r2, #131	; 0x83
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f7fb fe3b 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008c50:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008c54:	4618      	mov	r0, r3
 8008c56:	f008 fa16 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681c      	ldr	r4, [r3, #0]
 8008c5e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008c62:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f008 fb70 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008c76:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	231e      	movs	r3, #30
 8008c7e:	2283      	movs	r2, #131	; 0x83
 8008c80:	4620      	mov	r0, r4
 8008c82:	f7fb fe20 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008c86:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f008 f9fb 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008c9c:	2370      	movs	r3, #112	; 0x70
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	221e      	movs	r2, #30
 8008ca4:	213c      	movs	r1, #60	; 0x3c
 8008ca6:	f7fc f8bd 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6818      	ldr	r0, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008cb6:	236d      	movs	r3, #109	; 0x6d
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	2237      	movs	r2, #55	; 0x37
 8008cbe:	213c      	movs	r1, #60	; 0x3c
 8008cc0:	f7fc f8b0 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fb fde1 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8008cce:	2308      	movs	r3, #8
 8008cd0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		WichKey = keyboard->checkKey();
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fc fbc7 	bl	800546c <_ZN8DryerKey8checkKeyEv>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		switch(WichKey)
 8008ce4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008ce8:	2b07      	cmp	r3, #7
 8008cea:	f200 8086 	bhi.w	8008dfa <_ZN10SmartDryer10changeTimeEv+0x32a>
 8008cee:	a201      	add	r2, pc, #4	; (adr r2, 8008cf4 <_ZN10SmartDryer10changeTimeEv+0x224>)
 8008cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf4:	08008d15 	.word	0x08008d15
 8008cf8:	08008d55 	.word	0x08008d55
 8008cfc:	08008dfb 	.word	0x08008dfb
 8008d00:	08008d95 	.word	0x08008d95
 8008d04:	08008d15 	.word	0x08008d15
 8008d08:	08008d55 	.word	0x08008d55
 8008d0c:	08008df3 	.word	0x08008df3
 8008d10:	08008ddd 	.word	0x08008ddd
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(IsHours)
 8008d14:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00d      	beq.n	8008d38 <_ZN10SmartDryer10changeTimeEv+0x268>
				{
					if(Hour > 0)
 8008d1c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d005      	beq.n	8008d30 <_ZN10SmartDryer10changeTimeEv+0x260>
						Hour--;
 8008d24:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute > 0)
						Minute--;
					else
						Minute = 59;
				}
				break;
 8008d2e:	e067      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
						Hour = 23;
 8008d30:	2317      	movs	r3, #23
 8008d32:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 8008d36:	e063      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
					if(Minute > 0)
 8008d38:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <_ZN10SmartDryer10changeTimeEv+0x27c>
						Minute--;
 8008d40:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8008d44:	3b01      	subs	r3, #1
 8008d46:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8008d4a:	e059      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
						Minute = 59;
 8008d4c:	233b      	movs	r3, #59	; 0x3b
 8008d4e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8008d52:	e055      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(IsHours)
 8008d54:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00d      	beq.n	8008d78 <_ZN10SmartDryer10changeTimeEv+0x2a8>
				{
					if(Hour < 23)
 8008d5c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008d60:	2b16      	cmp	r3, #22
 8008d62:	d805      	bhi.n	8008d70 <_ZN10SmartDryer10changeTimeEv+0x2a0>
						Hour++;
 8008d64:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008d68:	3301      	adds	r3, #1
 8008d6a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute < 59)
						Minute++;
					else
						Minute = 0;
				}
				break;
 8008d6e:	e047      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
						Hour = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 8008d76:	e043      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
					if(Minute < 59)
 8008d78:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8008d7c:	2b3a      	cmp	r3, #58	; 0x3a
 8008d7e:	d805      	bhi.n	8008d8c <_ZN10SmartDryer10changeTimeEv+0x2bc>
						Minute++;
 8008d80:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8008d84:	3301      	adds	r3, #1
 8008d86:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8008d8a:	e039      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
						Minute = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8008d92:	e035      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
			case DryerKey::OK_KEY:
				if(IsHours)
 8008d94:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <_ZN10SmartDryer10changeTimeEv+0x2d4>
				{
					IsHours = false;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
					NewTime.minute = Minute;
					NewTime.second = 0;
					clock->adjustTimeDate(NewTime);
					ExitChangeTime = true;
				}
				break;
 8008da2:	e02d      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
					clock->getTimeDate(NewTime);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f107 0208 	add.w	r2, r7, #8
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fa fcc0 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewTime.hour = Hour;
 8008db4:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008db8:	72bb      	strb	r3, [r7, #10]
					NewTime.minute = Minute;
 8008dba:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8008dbe:	727b      	strb	r3, [r7, #9]
					NewTime.second = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	723b      	strb	r3, [r7, #8]
					clock->adjustTimeDate(NewTime);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6858      	ldr	r0, [r3, #4]
 8008dc8:	f107 0308 	add.w	r3, r7, #8
 8008dcc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008dd0:	f7fa fc06 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeTime = true;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8008dda:	e011      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
			case DryerKey::LONG_OK_KEY:
				if(!IsHours)
 8008ddc:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008de0:	f083 0301 	eor.w	r3, r3, #1
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d009      	beq.n	8008dfe <_ZN10SmartDryer10changeTimeEv+0x32e>
				{
					IsHours = true;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
				}
				break;
 8008df0:	e005      	b.n	8008dfe <_ZN10SmartDryer10changeTimeEv+0x32e>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeTime = true;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8008df8:	e002      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
			default:
				break;
 8008dfa:	bf00      	nop
 8008dfc:	e000      	b.n	8008e00 <_ZN10SmartDryer10changeTimeEv+0x330>
				break;
 8008dfe:	bf00      	nop
		}
		peripheralsControl();
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7fd fc53 	bl	80066ac <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, 500))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008e0e:	2101      	movs	r1, #1
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fa face 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d008      	beq.n	8008e2e <_ZN10SmartDryer10changeTimeEv+0x35e>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8008e24:	4610      	mov	r0, r2
 8008e26:	f7fc fdd3 	bl	80059d0 <_ZN13SerialMessage17isDeviceConnectedEv>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e32:	7a5b      	ldrb	r3, [r3, #9]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f43f aea8 	beq.w	8008b8a <_ZN10SmartDryer10changeTimeEv+0xba>
		{
			serialComunicationCtrl();
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7fe f93a 	bl	80070b4 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeTime)
 8008e40:	e6a3      	b.n	8008b8a <_ZN10SmartDryer10changeTimeEv+0xba>
 8008e42:	bf00      	nop
 8008e44:	080122e0 	.word	0x080122e0
 8008e48:	0801220c 	.word	0x0801220c
 8008e4c:	08012428 	.word	0x08012428
	String Time = "", Date = "";
 8008e50:	f107 0310 	add.w	r3, r7, #16
 8008e54:	4618      	mov	r0, r3
 8008e56:	f008 f916 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f008 f911 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 8008e64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f008 f90c 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008e6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e72:	4618      	mov	r0, r3
 8008e74:	f008 f907 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8008e78:	bf00      	nop
 8008e7a:	37ec      	adds	r7, #236	; 0xec
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd90      	pop	{r4, r7, pc}

08008e80 <_ZN10SmartDryer10changeDateEv>:

void SmartDryer::changeDate()
{
 8008e80:	b590      	push	{r4, r7, lr}
 8008e82:	b0c5      	sub	sp, #276	; 0x114
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	1d3b      	adds	r3, r7, #4
 8008e88:	6018      	str	r0, [r3, #0]
	bool ExitChangeDate = false;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t Day = 1, Month = 1, Year = 20;
 8008e90:	2301      	movs	r3, #1
 8008e92:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8008e96:	2301      	movs	r3, #1
 8008e98:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8008e9c:	2314      	movs	r3, #20
 8008e9e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t WichDateVar = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	String Title = "", Number = "";
 8008ea8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008eac:	4618      	mov	r0, r3
 8008eae:	f007 ffb9 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008eb2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8008eb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008eba:	49d9      	ldr	r1, [pc, #868]	; (8009220 <_ZN10SmartDryer10changeDateEv+0x3a0>)
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f008 fa79 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008ec2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f007 ffad 	bl	8010e26 <_ZNSaIcED1Ev>
 8008ecc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f007 ffa7 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008ed6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008eda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008ede:	49d0      	ldr	r1, [pc, #832]	; (8009220 <_ZN10SmartDryer10changeDateEv+0x3a0>)
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f008 fa67 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008ee6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008eea:	4618      	mov	r0, r3
 8008eec:	f007 ff9b 	bl	8010e26 <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8008ef0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f007 ff95 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008efa:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f02:	49c7      	ldr	r1, [pc, #796]	; (8009220 <_ZN10SmartDryer10changeDateEv+0x3a0>)
 8008f04:	4618      	mov	r0, r3
 8008f06:	f008 fa55 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f007 ff89 	bl	8010e26 <_ZNSaIcED1Ev>
 8008f14:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f007 ff83 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008f1e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008f22:	f107 0314 	add.w	r3, r7, #20
 8008f26:	49be      	ldr	r1, [pc, #760]	; (8009220 <_ZN10SmartDryer10changeDateEv+0x3a0>)
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f008 fa43 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008f32:	4618      	mov	r0, r3
 8008f34:	f007 ff77 	bl	8010e26 <_ZNSaIcED1Ev>
	checkSerialDeviceTimer->restart();
 8008f38:	1d3b      	adds	r3, r7, #4
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fa fa29 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	while(!ExitChangeDate)
 8008f44:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f040 81da 	bne.w	8009302 <_ZN10SmartDryer10changeDateEv+0x482>
	{
		display->clearFrameBuffer();
 8008f4e:	1d3b      	adds	r3, r7, #4
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fb fc8e 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8008f5a:	f107 0214 	add.w	r2, r7, #20
 8008f5e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008f62:	1d3b      	adds	r3, r7, #4
 8008f64:	6818      	ldr	r0, [r3, #0]
 8008f66:	f7fd fbb6 	bl	80066d6 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(WichDateVar == 0)
 8008f6a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d12b      	bne.n	8008fca <_ZN10SmartDryer10changeDateEv+0x14a>
		{
			Title = "Imposta mese";
 8008f72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008f76:	49ab      	ldr	r1, [pc, #684]	; (8009224 <_ZN10SmartDryer10changeDateEv+0x3a4>)
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f008 f968 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = String(monthNames[Month - 1]);
 8008f7e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8008f82:	3b01      	subs	r3, #1
 8008f84:	4aa8      	ldr	r2, [pc, #672]	; (8009228 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8008f86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f007 ff48 	bl	8010e24 <_ZNSaIcEC1Ev>
 8008f94:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8008f98:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f008 fa08 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008fa4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8008fa8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008fac:	4611      	mov	r1, r2
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f008 f875 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008fb4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f008 f864 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008fbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f007 ff2f 	bl	8010e26 <_ZNSaIcED1Ev>
 8008fc8:	e03a      	b.n	8009040 <_ZN10SmartDryer10changeDateEv+0x1c0>
		}
		else if(WichDateVar == 1)
 8008fca:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d11b      	bne.n	800900a <_ZN10SmartDryer10changeDateEv+0x18a>
		{
			Title = "Imposta giorno";
 8008fd2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008fd6:	4995      	ldr	r1, [pc, #596]	; (800922c <_ZN10SmartDryer10changeDateEv+0x3ac>)
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f008 f938 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Day);
 8008fde:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8008fe2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fa fa15 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008fee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8008ff2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f008 f850 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008ffe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009002:	4618      	mov	r0, r3
 8009004:	f008 f83f 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009008:	e01a      	b.n	8009040 <_ZN10SmartDryer10changeDateEv+0x1c0>
		}
		else
		{
			Title = "Imposta anno";
 800900a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800900e:	4988      	ldr	r1, [pc, #544]	; (8009230 <_ZN10SmartDryer10changeDateEv+0x3b0>)
 8009010:	4618      	mov	r0, r3
 8009012:	f008 f91c 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Year);
 8009016:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 800901a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800901e:	4611      	mov	r1, r2
 8009020:	4618      	mov	r0, r3
 8009022:	f7fa f9f9 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009026:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800902a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800902e:	4611      	mov	r1, r2
 8009030:	4618      	mov	r0, r3
 8009032:	f008 f834 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009036:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800903a:	4618      	mov	r0, r3
 800903c:	f008 f823 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009040:	1d3b      	adds	r3, r7, #4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681c      	ldr	r4, [r3, #0]
 8009046:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800904a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f008 f97c 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009056:	1d3b      	adds	r3, r7, #4
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009060:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	2305      	movs	r3, #5
 8009068:	2283      	movs	r2, #131	; 0x83
 800906a:	4620      	mov	r0, r4
 800906c:	f7fb fc2b 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009070:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009074:	4618      	mov	r0, r3
 8009076:	f008 f806 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 800907a:	1d3b      	adds	r3, r7, #4
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681c      	ldr	r4, [r3, #0]
 8009080:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8009084:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009088:	4611      	mov	r1, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f008 f95f 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009090:	1d3b      	adds	r3, r7, #4
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800909a:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	231e      	movs	r3, #30
 80090a2:	2283      	movs	r2, #131	; 0x83
 80090a4:	4620      	mov	r0, r4
 80090a6:	f7fb fc0e 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80090aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80090ae:	4618      	mov	r0, r3
 80090b0:	f007 ffe9 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 80090b4:	1d3b      	adds	r3, r7, #4
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	1d3b      	adds	r3, r7, #4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80090c4:	2370      	movs	r3, #112	; 0x70
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	4613      	mov	r3, r2
 80090ca:	221e      	movs	r2, #30
 80090cc:	213c      	movs	r1, #60	; 0x3c
 80090ce:	f7fb fea9 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 80090d2:	1d3b      	adds	r3, r7, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	1d3b      	adds	r3, r7, #4
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80090e2:	236d      	movs	r3, #109	; 0x6d
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	4613      	mov	r3, r2
 80090e8:	2237      	movs	r2, #55	; 0x37
 80090ea:	213c      	movs	r1, #60	; 0x3c
 80090ec:	f7fb fe9a 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 80090f0:	1d3b      	adds	r3, r7, #4
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fb fbca 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 80090fc:	2308      	movs	r3, #8
 80090fe:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		WichKey = keyboard->checkKey();
 8009102:	1d3b      	adds	r3, r7, #4
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	4618      	mov	r0, r3
 800910a:	f7fc f9af 	bl	800546c <_ZN8DryerKey8checkKeyEv>
 800910e:	4603      	mov	r3, r0
 8009110:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		switch(WichKey)
 8009114:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8009118:	2b07      	cmp	r3, #7
 800911a:	f200 80c8 	bhi.w	80092ae <_ZN10SmartDryer10changeDateEv+0x42e>
 800911e:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <_ZN10SmartDryer10changeDateEv+0x2a4>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	08009145 	.word	0x08009145
 8009128:	080091b1 	.word	0x080091b1
 800912c:	080092af 	.word	0x080092af
 8009130:	08009239 	.word	0x08009239
 8009134:	08009145 	.word	0x08009145
 8009138:	080091b1 	.word	0x080091b1
 800913c:	080092a7 	.word	0x080092a7
 8009140:	08009293 	.word	0x08009293
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(WichDateVar == 1)
 8009144:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009148:	2b01      	cmp	r3, #1
 800914a:	d111      	bne.n	8009170 <_ZN10SmartDryer10changeDateEv+0x2f0>
				{
					if(Day > 1)
 800914c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8009150:	2b01      	cmp	r3, #1
 8009152:	d905      	bls.n	8009160 <_ZN10SmartDryer10changeDateEv+0x2e0>
						Day--;
 8009154:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8009158:	3b01      	subs	r3, #1
 800915a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year > 20)
						Year--;
					else
						Year = 99;
				}
				break;
 800915e:	e0a9      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
						Day = daysInMonth[Month - 1];
 8009160:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009164:	3b01      	subs	r3, #1
 8009166:	4a33      	ldr	r2, [pc, #204]	; (8009234 <_ZN10SmartDryer10changeDateEv+0x3b4>)
 8009168:	5cd3      	ldrb	r3, [r2, r3]
 800916a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 800916e:	e0a1      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
				else if(WichDateVar == 0)
 8009170:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10d      	bne.n	8009194 <_ZN10SmartDryer10changeDateEv+0x314>
					if(Month > 1)
 8009178:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800917c:	2b01      	cmp	r3, #1
 800917e:	d905      	bls.n	800918c <_ZN10SmartDryer10changeDateEv+0x30c>
						Month--;
 8009180:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009184:	3b01      	subs	r3, #1
 8009186:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 800918a:	e093      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
						Month = 12;
 800918c:	230c      	movs	r3, #12
 800918e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009192:	e08f      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
					if(Year > 20)
 8009194:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009198:	2b14      	cmp	r3, #20
 800919a:	d905      	bls.n	80091a8 <_ZN10SmartDryer10changeDateEv+0x328>
						Year--;
 800919c:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80091a0:	3b01      	subs	r3, #1
 80091a2:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 80091a6:	e085      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
						Year = 99;
 80091a8:	2363      	movs	r3, #99	; 0x63
 80091aa:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 80091ae:	e081      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(WichDateVar == 1)
 80091b0:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d112      	bne.n	80091de <_ZN10SmartDryer10changeDateEv+0x35e>
				{
					if(Day < daysInMonth[Month - 1])
 80091b8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80091bc:	3b01      	subs	r3, #1
 80091be:	4a1d      	ldr	r2, [pc, #116]	; (8009234 <_ZN10SmartDryer10changeDateEv+0x3b4>)
 80091c0:	5cd3      	ldrb	r3, [r2, r3]
 80091c2:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d205      	bcs.n	80091d6 <_ZN10SmartDryer10changeDateEv+0x356>
						Day++;
 80091ca:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80091ce:	3301      	adds	r3, #1
 80091d0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year < 99)
						Year++;
					else
						Year = 20;
				}
				break;
 80091d4:	e06e      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
						Day = 1;
 80091d6:	2301      	movs	r3, #1
 80091d8:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 80091dc:	e06a      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
				else if(WichDateVar == 0)
 80091de:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10d      	bne.n	8009202 <_ZN10SmartDryer10changeDateEv+0x382>
					if(Month < 12)
 80091e6:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80091ea:	2b0b      	cmp	r3, #11
 80091ec:	d805      	bhi.n	80091fa <_ZN10SmartDryer10changeDateEv+0x37a>
						Month++;
 80091ee:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80091f2:	3301      	adds	r3, #1
 80091f4:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 80091f8:	e05c      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
						Month = 1;
 80091fa:	2301      	movs	r3, #1
 80091fc:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009200:	e058      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
					if(Year < 99)
 8009202:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009206:	2b62      	cmp	r3, #98	; 0x62
 8009208:	d805      	bhi.n	8009216 <_ZN10SmartDryer10changeDateEv+0x396>
						Year++;
 800920a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800920e:	3301      	adds	r3, #1
 8009210:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8009214:	e04e      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
						Year = 20;
 8009216:	2314      	movs	r3, #20
 8009218:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 800921c:	e04a      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
 800921e:	bf00      	nop
 8009220:	080122e0 	.word	0x080122e0
 8009224:	08012438 	.word	0x08012438
 8009228:	20000000 	.word	0x20000000
 800922c:	08012448 	.word	0x08012448
 8009230:	08012458 	.word	0x08012458
 8009234:	08015360 	.word	0x08015360
			case DryerKey::OK_KEY:
				if(WichDateVar < 2)
 8009238:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800923c:	2b01      	cmp	r3, #1
 800923e:	d805      	bhi.n	800924c <_ZN10SmartDryer10changeDateEv+0x3cc>
				{
					WichDateVar++;
 8009240:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009244:	3301      	adds	r3, #1
 8009246:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
					NewDate.month = Month;
					NewDate.year = Year + 2000;
					clock->adjustTimeDate(NewDate);
					ExitChangeDate = true;
				}
				break;
 800924a:	e033      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
					clock->getTimeDate(NewDate);
 800924c:	1d3b      	adds	r3, r7, #4
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f107 020c 	add.w	r2, r7, #12
 8009256:	4611      	mov	r1, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f7fa fa6b 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewDate.day = Day;
 800925e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8009262:	73fb      	strb	r3, [r7, #15]
					NewDate.month = Month;
 8009264:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009268:	743b      	strb	r3, [r7, #16]
					NewDate.year = Year + 2000;
 800926a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800926e:	b29b      	uxth	r3, r3
 8009270:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8009274:	b29b      	uxth	r3, r3
 8009276:	827b      	strh	r3, [r7, #18]
					clock->adjustTimeDate(NewDate);
 8009278:	1d3b      	adds	r3, r7, #4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6858      	ldr	r0, [r3, #4]
 800927e:	f107 030c 	add.w	r3, r7, #12
 8009282:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009286:	f7fa f9ab 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeDate = true;
 800928a:	2301      	movs	r3, #1
 800928c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8009290:	e010      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
			case DryerKey::LONG_OK_KEY:
				if(WichDateVar > 0)
 8009292:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00b      	beq.n	80092b2 <_ZN10SmartDryer10changeDateEv+0x432>
				{
					WichDateVar--;
 800929a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800929e:	3b01      	subs	r3, #1
 80092a0:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				}
				break;
 80092a4:	e005      	b.n	80092b2 <_ZN10SmartDryer10changeDateEv+0x432>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeDate = true;
 80092a6:	2301      	movs	r3, #1
 80092a8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 80092ac:	e002      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
			default:
				break;
 80092ae:	bf00      	nop
 80092b0:	e000      	b.n	80092b4 <_ZN10SmartDryer10changeDateEv+0x434>
				break;
 80092b2:	bf00      	nop
		}
		peripheralsControl();
 80092b4:	1d3b      	adds	r3, r7, #4
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	f7fd f9f8 	bl	80066ac <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, 500))
 80092bc:	1d3b      	adds	r3, r7, #4
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80092c6:	2101      	movs	r1, #1
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fa f872 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00a      	beq.n	80092ea <_ZN10SmartDryer10changeDateEv+0x46a>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80092d4:	1d3b      	adds	r3, r7, #4
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092da:	1d3b      	adds	r3, r7, #4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80092e0:	4610      	mov	r0, r2
 80092e2:	f7fc fb75 	bl	80059d0 <_ZN13SerialMessage17isDeviceConnectedEv>
 80092e6:	4603      	mov	r3, r0
 80092e8:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 80092ea:	1d3b      	adds	r3, r7, #4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f0:	7a5b      	ldrb	r3, [r3, #9]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f43f ae26 	beq.w	8008f44 <_ZN10SmartDryer10changeDateEv+0xc4>
		{
			serialComunicationCtrl();
 80092f8:	1d3b      	adds	r3, r7, #4
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	f7fd feda 	bl	80070b4 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeDate)
 8009300:	e620      	b.n	8008f44 <_ZN10SmartDryer10changeDateEv+0xc4>
	String Time = "", Date = "";
 8009302:	f107 0314 	add.w	r3, r7, #20
 8009306:	4618      	mov	r0, r3
 8009308:	f007 febd 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800930c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009310:	4618      	mov	r0, r3
 8009312:	f007 feb8 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 8009316:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800931a:	4618      	mov	r0, r3
 800931c:	f007 feb3 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009320:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009324:	4618      	mov	r0, r3
 8009326:	f007 feae 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800932a:	bf00      	nop
 800932c:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8009330:	46bd      	mov	sp, r7
 8009332:	bd90      	pop	{r4, r7, pc}

08009334 <_ZN10SmartDryer8showInfoEv>:

void SmartDryer::showInfo()
{
 8009334:	b590      	push	{r4, r7, lr}
 8009336:	b0cd      	sub	sp, #308	; 0x134
 8009338:	af02      	add	r7, sp, #8
 800933a:	1d3b      	adds	r3, r7, #4
 800933c:	6018      	str	r0, [r3, #0]
	bool ExitShowInfo = false;
 800933e:	2300      	movs	r3, #0
 8009340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	String Time = "", Date = "";
 8009344:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009348:	4618      	mov	r0, r3
 800934a:	f007 fd6b 	bl	8010e24 <_ZNSaIcEC1Ev>
 800934e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8009352:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009356:	49af      	ldr	r1, [pc, #700]	; (8009614 <_ZN10SmartDryer8showInfoEv+0x2e0>)
 8009358:	4618      	mov	r0, r3
 800935a:	f008 f82b 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800935e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009362:	4618      	mov	r0, r3
 8009364:	f007 fd5f 	bl	8010e26 <_ZNSaIcED1Ev>
 8009368:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800936c:	4618      	mov	r0, r3
 800936e:	f007 fd59 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009372:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009376:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800937a:	49a6      	ldr	r1, [pc, #664]	; (8009614 <_ZN10SmartDryer8showInfoEv+0x2e0>)
 800937c:	4618      	mov	r0, r3
 800937e:	f008 f819 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009382:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009386:	4618      	mov	r0, r3
 8009388:	f007 fd4d 	bl	8010e26 <_ZNSaIcED1Ev>
	checkSerialDeviceTimer->restart();
 800938c:	1d3b      	adds	r3, r7, #4
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009392:	4618      	mov	r0, r3
 8009394:	f7f9 ffff 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	while(!ExitShowInfo)
 8009398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800939c:	2b00      	cmp	r3, #0
 800939e:	f040 8129 	bne.w	80095f4 <_ZN10SmartDryer8showInfoEv+0x2c0>
	{
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 80093a2:	1d3b      	adds	r3, r7, #4
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80093aa:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80093ae:	1d39      	adds	r1, r7, #4
 80093b0:	2301      	movs	r3, #1
 80093b2:	6809      	ldr	r1, [r1, #0]
 80093b4:	f7fc feb6 	bl	8006124 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 80093b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093bc:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80093c0:	4a95      	ldr	r2, [pc, #596]	; (8009618 <_ZN10SmartDryer8showInfoEv+0x2e4>)
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fa fdf4 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80093c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80093cc:	4618      	mov	r0, r3
 80093ce:	f007 fe5a 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 80093d2:	1d3b      	adds	r3, r7, #4
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80093da:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80093de:	1d39      	adds	r1, r7, #4
 80093e0:	2301      	movs	r3, #1
 80093e2:	6809      	ldr	r1, [r1, #0]
 80093e4:	f7fc fe9e 	bl	8006124 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 80093e8:	f107 030c 	add.w	r3, r7, #12
 80093ec:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80093f0:	4a8a      	ldr	r2, [pc, #552]	; (800961c <_ZN10SmartDryer8showInfoEv+0x2e8>)
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fa fddc 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80093f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80093fc:	4618      	mov	r0, r3
 80093fe:	f007 fe42 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 8009402:	1d3b      	adds	r3, r7, #4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4618      	mov	r0, r3
 800940a:	f7fb fa34 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800940e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009412:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8009416:	1d3b      	adds	r3, r7, #4
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	f7fd f95c 	bl	80066d6 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Condizioni camera", NHDST7565_LCD::CENTER_POS, 8, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 800941e:	1d3b      	adds	r3, r7, #4
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681c      	ldr	r4, [r3, #0]
 8009424:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009428:	4618      	mov	r0, r3
 800942a:	f007 fcfb 	bl	8010e24 <_ZNSaIcEC1Ev>
 800942e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8009432:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009436:	497a      	ldr	r1, [pc, #488]	; (8009620 <_ZN10SmartDryer8showInfoEv+0x2ec>)
 8009438:	4618      	mov	r0, r3
 800943a:	f007 ffbb 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800943e:	1d3b      	adds	r3, r7, #4
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009448:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	2308      	movs	r3, #8
 8009450:	2283      	movs	r2, #131	; 0x83
 8009452:	4620      	mov	r0, r4
 8009454:	f7fb fa37 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009458:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800945c:	4618      	mov	r0, r3
 800945e:	f007 fe12 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009462:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009466:	4618      	mov	r0, r3
 8009468:	f007 fcdd 	bl	8010e26 <_ZNSaIcED1Ev>
		display->drawString(TempReaded + "    " + HumidityReaded, NHDST7565_LCD::CENTER_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800946c:	1d3b      	adds	r3, r7, #4
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681c      	ldr	r4, [r3, #0]
 8009472:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009476:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800947a:	4a6a      	ldr	r2, [pc, #424]	; (8009624 <_ZN10SmartDryer8showInfoEv+0x2f0>)
 800947c:	4618      	mov	r0, r3
 800947e:	f7fa fd6d 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8009482:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009486:	f107 020c 	add.w	r2, r7, #12
 800948a:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800948e:	4618      	mov	r0, r3
 8009490:	f7fa fd77 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8009494:	1d3b      	adds	r3, r7, #4
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800949e:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	2314      	movs	r3, #20
 80094a6:	2283      	movs	r2, #131	; 0x83
 80094a8:	4620      	mov	r0, r4
 80094aa:	f7fb fa0c 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80094ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80094b2:	4618      	mov	r0, r3
 80094b4:	f007 fde7 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80094b8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80094bc:	4618      	mov	r0, r3
 80094be:	f007 fde2 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Versione SW", NHDST7565_LCD::CENTER_POS, 40, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 80094c2:	1d3b      	adds	r3, r7, #4
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681c      	ldr	r4, [r3, #0]
 80094c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094cc:	4618      	mov	r0, r3
 80094ce:	f007 fca9 	bl	8010e24 <_ZNSaIcEC1Ev>
 80094d2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80094d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80094da:	4953      	ldr	r1, [pc, #332]	; (8009628 <_ZN10SmartDryer8showInfoEv+0x2f4>)
 80094dc:	4618      	mov	r0, r3
 80094de:	f007 ff69 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80094e2:	1d3b      	adds	r3, r7, #4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094ec:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	2328      	movs	r3, #40	; 0x28
 80094f4:	2283      	movs	r2, #131	; 0x83
 80094f6:	4620      	mov	r0, r4
 80094f8:	f7fb f9e5 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80094fc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009500:	4618      	mov	r0, r3
 8009502:	f007 fdc0 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950a:	4618      	mov	r0, r3
 800950c:	f007 fc8b 	bl	8010e26 <_ZNSaIcED1Ev>
		display->drawString(String(SW_VERSION), NHDST7565_LCD::CENTER_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009510:	1d3b      	adds	r3, r7, #4
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681c      	ldr	r4, [r3, #0]
 8009516:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800951a:	4618      	mov	r0, r3
 800951c:	f007 fc82 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009520:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8009524:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009528:	4940      	ldr	r1, [pc, #256]	; (800962c <_ZN10SmartDryer8showInfoEv+0x2f8>)
 800952a:	4618      	mov	r0, r3
 800952c:	f007 ff42 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009530:	1d3b      	adds	r3, r7, #4
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800953a:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	2332      	movs	r3, #50	; 0x32
 8009542:	2283      	movs	r2, #131	; 0x83
 8009544:	4620      	mov	r0, r4
 8009546:	f7fb f9be 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800954a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800954e:	4618      	mov	r0, r3
 8009550:	f007 fd99 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009554:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009558:	4618      	mov	r0, r3
 800955a:	f007 fc64 	bl	8010e26 <_ZNSaIcED1Ev>
		display->sendFrameBuffer();
 800955e:	1d3b      	adds	r3, r7, #4
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4618      	mov	r0, r3
 8009566:	f7fb f993 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800956a:	2308      	movs	r3, #8
 800956c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		WichKey = keyboard->checkKey();
 8009570:	1d3b      	adds	r3, r7, #4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	4618      	mov	r0, r3
 8009578:	f7fb ff78 	bl	800546c <_ZN8DryerKey8checkKeyEv>
 800957c:	4603      	mov	r3, r0
 800957e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		switch(WichKey)
 8009582:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009586:	2b06      	cmp	r3, #6
 8009588:	d000      	beq.n	800958c <_ZN10SmartDryer8showInfoEv+0x258>
		{
			case DryerKey::LONG_LEFT_KEY:
				ExitShowInfo = true;
				break;
			default:
				break;
 800958a:	e003      	b.n	8009594 <_ZN10SmartDryer8showInfoEv+0x260>
				ExitShowInfo = true;
 800958c:	2301      	movs	r3, #1
 800958e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				break;
 8009592:	bf00      	nop
		}
		peripheralsControl();
 8009594:	1d3b      	adds	r3, r7, #4
 8009596:	6818      	ldr	r0, [r3, #0]
 8009598:	f7fd f888 	bl	80066ac <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, 500))
 800959c:	1d3b      	adds	r3, r7, #4
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80095a6:	2101      	movs	r1, #1
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7f9 ff02 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00a      	beq.n	80095ca <_ZN10SmartDryer8showInfoEv+0x296>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80095b4:	1d3b      	adds	r3, r7, #4
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095ba:	1d3b      	adds	r3, r7, #4
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80095c0:	4610      	mov	r0, r2
 80095c2:	f7fc fa05 	bl	80059d0 <_ZN13SerialMessage17isDeviceConnectedEv>
 80095c6:	4603      	mov	r3, r0
 80095c8:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 80095ca:	1d3b      	adds	r3, r7, #4
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095d0:	7a5b      	ldrb	r3, [r3, #9]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <_ZN10SmartDryer8showInfoEv+0x2aa>
		{
			serialComunicationCtrl();
 80095d6:	1d3b      	adds	r3, r7, #4
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	f7fd fd6b 	bl	80070b4 <_ZN10SmartDryer22serialComunicationCtrlEv>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 80095de:	f107 030c 	add.w	r3, r7, #12
 80095e2:	4618      	mov	r0, r3
 80095e4:	f007 fd4f 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 80095e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095ec:	4618      	mov	r0, r3
 80095ee:	f007 fd4a 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitShowInfo)
 80095f2:	e6d1      	b.n	8009398 <_ZN10SmartDryer8showInfoEv+0x64>
	String Time = "", Date = "";
 80095f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095f8:	4618      	mov	r0, r3
 80095fa:	f007 fd44 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80095fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009602:	4618      	mov	r0, r3
 8009604:	f007 fd3f 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8009608:	bf00      	nop
 800960a:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800960e:	46bd      	mov	sp, r7
 8009610:	bd90      	pop	{r4, r7, pc}
 8009612:	bf00      	nop
 8009614:	080122e0 	.word	0x080122e0
 8009618:	08012468 	.word	0x08012468
 800961c:	0801246c 	.word	0x0801246c
 8009620:	08012470 	.word	0x08012470
 8009624:	08012484 	.word	0x08012484
 8009628:	0801248c 	.word	0x0801248c
 800962c:	08012498 	.word	0x08012498

08009630 <_ZN10SmartDryer13changeProgramEh>:

void SmartDryer::changeProgram(uint8_t WichProgram)
{
 8009630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009632:	b0ef      	sub	sp, #444	; 0x1bc
 8009634:	af04      	add	r7, sp, #16
 8009636:	1d3b      	adds	r3, r7, #4
 8009638:	6018      	str	r0, [r3, #0]
 800963a:	460a      	mov	r2, r1
 800963c:	1cfb      	adds	r3, r7, #3
 800963e:	701a      	strb	r2, [r3, #0]
	bool ExitChangeProgram = false;
 8009640:	2300      	movs	r3, #0
 8009642:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
	uint8_t WichSetting = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
	const uint8_t MAX_SETTINGS = 5;
 800964c:	2305      	movs	r3, #5
 800964e:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	PROGRAM_STRUCURE NewProgram = dryerPrograms[WichProgram];
 8009652:	1cfb      	adds	r3, r7, #3
 8009654:	781a      	ldrb	r2, [r3, #0]
 8009656:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800965a:	1d3b      	adds	r3, r7, #4
 800965c:	6819      	ldr	r1, [r3, #0]
 800965e:	4613      	mov	r3, r2
 8009660:	005b      	lsls	r3, r3, #1
 8009662:	4413      	add	r3, r2
 8009664:	00db      	lsls	r3, r3, #3
 8009666:	440b      	add	r3, r1
 8009668:	3348      	adds	r3, #72	; 0x48
 800966a:	4605      	mov	r5, r0
 800966c:	1d1c      	adds	r4, r3, #4
 800966e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009672:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009676:	e885 0003 	stmia.w	r5, {r0, r1}
//	uint8_t StartHour = dryerPrograms[WichProgram].startTime.hour, StartMinute = dryerPrograms[WichProgram].startTime.minute;
//	uint8_t EndHour = dryerPrograms[WichProgram].endTime.hour, EndMinute = dryerPrograms[WichProgram].endTime.minute;
	uint32_t TemperatureSetted = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 800967a:	1cfb      	adds	r3, r7, #3
 800967c:	781a      	ldrb	r2, [r3, #0]
 800967e:	1d3b      	adds	r3, r7, #4
 8009680:	6819      	ldr	r1, [r3, #0]
 8009682:	4613      	mov	r3, r2
 8009684:	005b      	lsls	r3, r3, #1
 8009686:	4413      	add	r3, r2
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	440b      	add	r3, r1
 800968c:	3360      	adds	r3, #96	; 0x60
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4618      	mov	r0, r3
 8009692:	f7f7 fbe1 	bl	8000e58 <__aeabi_f2uiz>
 8009696:	4603      	mov	r3, r0
 8009698:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	String Time = "", Date = "";
 800969c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80096a0:	4618      	mov	r0, r3
 80096a2:	f007 fbbf 	bl	8010e24 <_ZNSaIcEC1Ev>
 80096a6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80096aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80096ae:	4992      	ldr	r1, [pc, #584]	; (80098f8 <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 80096b0:	4618      	mov	r0, r3
 80096b2:	f007 fe7f 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80096b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80096ba:	4618      	mov	r0, r3
 80096bc:	f007 fbb3 	bl	8010e26 <_ZNSaIcED1Ev>
 80096c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80096c4:	4618      	mov	r0, r3
 80096c6:	f007 fbad 	bl	8010e24 <_ZNSaIcEC1Ev>
 80096ca:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80096ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80096d2:	4989      	ldr	r1, [pc, #548]	; (80098f8 <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 80096d4:	4618      	mov	r0, r3
 80096d6:	f007 fe6d 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80096da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80096de:	4618      	mov	r0, r3
 80096e0:	f007 fba1 	bl	8010e26 <_ZNSaIcED1Ev>
	String Title = "", SubTitle = "", Number = "";
 80096e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80096e8:	4618      	mov	r0, r3
 80096ea:	f007 fb9b 	bl	8010e24 <_ZNSaIcEC1Ev>
 80096ee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80096f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80096f6:	4980      	ldr	r1, [pc, #512]	; (80098f8 <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 80096f8:	4618      	mov	r0, r3
 80096fa:	f007 fe5b 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80096fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009702:	4618      	mov	r0, r3
 8009704:	f007 fb8f 	bl	8010e26 <_ZNSaIcED1Ev>
 8009708:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800970c:	4618      	mov	r0, r3
 800970e:	f007 fb89 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009712:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009716:	f107 0320 	add.w	r3, r7, #32
 800971a:	4977      	ldr	r1, [pc, #476]	; (80098f8 <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 800971c:	4618      	mov	r0, r3
 800971e:	f007 fe49 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009722:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009726:	4618      	mov	r0, r3
 8009728:	f007 fb7d 	bl	8010e26 <_ZNSaIcED1Ev>
 800972c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009730:	4618      	mov	r0, r3
 8009732:	f007 fb77 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009736:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800973a:	f107 0308 	add.w	r3, r7, #8
 800973e:	496e      	ldr	r1, [pc, #440]	; (80098f8 <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 8009740:	4618      	mov	r0, r3
 8009742:	f007 fe37 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009746:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800974a:	4618      	mov	r0, r3
 800974c:	f007 fb6b 	bl	8010e26 <_ZNSaIcED1Ev>
	checkSerialDeviceTimer->restart();
 8009750:	1d3b      	adds	r3, r7, #4
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009756:	4618      	mov	r0, r3
 8009758:	f7f9 fe1d 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	while(!ExitChangeProgram)
 800975c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8009760:	2b00      	cmp	r3, #0
 8009762:	f040 82e2 	bne.w	8009d2a <_ZN10SmartDryer13changeProgramEh+0x6fa>
	{
		Title = "Programma " + std::to_string(WichProgram + 1);
 8009766:	1cfb      	adds	r3, r7, #3
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009770:	4611      	mov	r1, r2
 8009772:	4618      	mov	r0, r3
 8009774:	f7f9 fe50 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009778:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800977c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8009780:	495e      	ldr	r1, [pc, #376]	; (80098fc <_ZN10SmartDryer13changeProgramEh+0x2cc>)
 8009782:	4618      	mov	r0, r3
 8009784:	f7fa fbd2 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8009788:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800978c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009790:	4611      	mov	r1, r2
 8009792:	4618      	mov	r0, r3
 8009794:	f007 fc83 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009798:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800979c:	4618      	mov	r0, r3
 800979e:	f007 fc72 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80097a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80097a6:	4618      	mov	r0, r3
 80097a8:	f007 fc6d 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		switch(WichSetting)
 80097ac:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	f200 80af 	bhi.w	8009914 <_ZN10SmartDryer13changeProgramEh+0x2e4>
 80097b6:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <_ZN10SmartDryer13changeProgramEh+0x18c>)
 80097b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097bc:	080097d1 	.word	0x080097d1
 80097c0:	0800980d 	.word	0x0800980d
 80097c4:	08009849 	.word	0x08009849
 80097c8:	08009885 	.word	0x08009885
 80097cc:	080098c1 	.word	0x080098c1
		{
			case 0:
				SubTitle = "Ora di inizio";
 80097d0:	f107 0320 	add.w	r3, r7, #32
 80097d4:	494a      	ldr	r1, [pc, #296]	; (8009900 <_ZN10SmartDryer13changeProgramEh+0x2d0>)
 80097d6:	4618      	mov	r0, r3
 80097d8:	f007 fd39 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.hour);
 80097dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80097e0:	791b      	ldrb	r3, [r3, #4]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80097e8:	4611      	mov	r1, r2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7f9 fe14 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80097f0:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80097f4:	f107 0308 	add.w	r3, r7, #8
 80097f8:	4611      	mov	r1, r2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f007 fc4f 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009800:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009804:	4618      	mov	r0, r3
 8009806:	f007 fc3e 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 800980a:	e084      	b.n	8009916 <_ZN10SmartDryer13changeProgramEh+0x2e6>
			case 1:
				SubTitle = "Minuto di inizio";
 800980c:	f107 0320 	add.w	r3, r7, #32
 8009810:	493c      	ldr	r1, [pc, #240]	; (8009904 <_ZN10SmartDryer13changeProgramEh+0x2d4>)
 8009812:	4618      	mov	r0, r3
 8009814:	f007 fd1b 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.minute);
 8009818:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800981c:	78db      	ldrb	r3, [r3, #3]
 800981e:	461a      	mov	r2, r3
 8009820:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f7f9 fdf6 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800982c:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8009830:	f107 0308 	add.w	r3, r7, #8
 8009834:	4611      	mov	r1, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f007 fc31 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800983c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009840:	4618      	mov	r0, r3
 8009842:	f007 fc20 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009846:	e066      	b.n	8009916 <_ZN10SmartDryer13changeProgramEh+0x2e6>
			case 2:
				SubTitle = "Ora di fine";
 8009848:	f107 0320 	add.w	r3, r7, #32
 800984c:	492e      	ldr	r1, [pc, #184]	; (8009908 <_ZN10SmartDryer13changeProgramEh+0x2d8>)
 800984e:	4618      	mov	r0, r3
 8009850:	f007 fcfd 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.hour);
 8009854:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009858:	7b1b      	ldrb	r3, [r3, #12]
 800985a:	461a      	mov	r2, r3
 800985c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009860:	4611      	mov	r1, r2
 8009862:	4618      	mov	r0, r3
 8009864:	f7f9 fdd8 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009868:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800986c:	f107 0308 	add.w	r3, r7, #8
 8009870:	4611      	mov	r1, r2
 8009872:	4618      	mov	r0, r3
 8009874:	f007 fc13 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009878:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800987c:	4618      	mov	r0, r3
 800987e:	f007 fc02 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009882:	e048      	b.n	8009916 <_ZN10SmartDryer13changeProgramEh+0x2e6>
			case 3:
				SubTitle = "Minuto di fine";
 8009884:	f107 0320 	add.w	r3, r7, #32
 8009888:	4920      	ldr	r1, [pc, #128]	; (800990c <_ZN10SmartDryer13changeProgramEh+0x2dc>)
 800988a:	4618      	mov	r0, r3
 800988c:	f007 fcdf 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.minute);
 8009890:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009894:	7adb      	ldrb	r3, [r3, #11]
 8009896:	461a      	mov	r2, r3
 8009898:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800989c:	4611      	mov	r1, r2
 800989e:	4618      	mov	r0, r3
 80098a0:	f7f9 fdba 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80098a4:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80098a8:	f107 0308 	add.w	r3, r7, #8
 80098ac:	4611      	mov	r1, r2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f007 fbf5 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80098b4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80098b8:	4618      	mov	r0, r3
 80098ba:	f007 fbe4 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 80098be:	e02a      	b.n	8009916 <_ZN10SmartDryer13changeProgramEh+0x2e6>
			case 4:
				SubTitle = "Temperatura";
 80098c0:	f107 0320 	add.w	r3, r7, #32
 80098c4:	4912      	ldr	r1, [pc, #72]	; (8009910 <_ZN10SmartDryer13changeProgramEh+0x2e0>)
 80098c6:	4618      	mov	r0, r3
 80098c8:	f007 fcc1 	bl	801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(TemperatureSetted);
 80098cc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80098d0:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fc fa55 	bl	8005d84 <_ZNSt7__cxx119to_stringEm>
 80098da:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80098de:	f107 0308 	add.w	r3, r7, #8
 80098e2:	4611      	mov	r1, r2
 80098e4:	4618      	mov	r0, r3
 80098e6:	f007 fbda 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80098ea:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80098ee:	4618      	mov	r0, r3
 80098f0:	f007 fbc9 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 80098f4:	e00f      	b.n	8009916 <_ZN10SmartDryer13changeProgramEh+0x2e6>
 80098f6:	bf00      	nop
 80098f8:	080122e0 	.word	0x080122e0
 80098fc:	080124a0 	.word	0x080124a0
 8009900:	080124ac 	.word	0x080124ac
 8009904:	080124bc 	.word	0x080124bc
 8009908:	080124d0 	.word	0x080124d0
 800990c:	080124dc 	.word	0x080124dc
 8009910:	080124ec 	.word	0x080124ec
			default:
				break;
 8009914:	bf00      	nop
		}
		display->clearFrameBuffer();
 8009916:	1d3b      	adds	r3, r7, #4
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	f7fa ffaa 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8009922:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009926:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800992a:	1d3b      	adds	r3, r7, #4
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	f7fc fed2 	bl	80066d6 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 7, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009932:	1d3b      	adds	r3, r7, #4
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681c      	ldr	r4, [r3, #0]
 8009938:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800993c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009940:	4611      	mov	r1, r2
 8009942:	4618      	mov	r0, r3
 8009944:	f007 fd03 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009948:	1d3b      	adds	r3, r7, #4
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009952:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	2307      	movs	r3, #7
 800995a:	2283      	movs	r2, #131	; 0x83
 800995c:	4620      	mov	r0, r4
 800995e:	f7fa ffb2 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009962:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009966:	4618      	mov	r0, r3
 8009968:	f007 fb8d 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(SubTitle, NHDST7565_LCD::CENTER_POS, 22, display->displayFonts[NHDST7565_LCD::W_6_H_10]);
 800996c:	1d3b      	adds	r3, r7, #4
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681c      	ldr	r4, [r3, #0]
 8009972:	f107 0220 	add.w	r2, r7, #32
 8009976:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800997a:	4611      	mov	r1, r2
 800997c:	4618      	mov	r0, r3
 800997e:	f007 fce6 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009982:	1d3b      	adds	r3, r7, #4
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800998c:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	2316      	movs	r3, #22
 8009994:	2283      	movs	r2, #131	; 0x83
 8009996:	4620      	mov	r0, r4
 8009998:	f7fa ff95 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800999c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80099a0:	4618      	mov	r0, r3
 80099a2:	f007 fb70 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 41, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80099a6:	1d3b      	adds	r3, r7, #4
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681c      	ldr	r4, [r3, #0]
 80099ac:	f107 0208 	add.w	r2, r7, #8
 80099b0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80099b4:	4611      	mov	r1, r2
 80099b6:	4618      	mov	r0, r3
 80099b8:	f007 fcc9 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80099bc:	1d3b      	adds	r3, r7, #4
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80099c6:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	2329      	movs	r3, #41	; 0x29
 80099ce:	2283      	movs	r2, #131	; 0x83
 80099d0:	4620      	mov	r0, r4
 80099d2:	f7fa ff78 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80099d6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80099da:	4618      	mov	r0, r3
 80099dc:	f007 fb53 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 40, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 80099e0:	1d3b      	adds	r3, r7, #4
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6818      	ldr	r0, [r3, #0]
 80099e6:	1d3b      	adds	r3, r7, #4
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80099f0:	2370      	movs	r3, #112	; 0x70
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	4613      	mov	r3, r2
 80099f6:	2228      	movs	r2, #40	; 0x28
 80099f8:	213c      	movs	r1, #60	; 0x3c
 80099fa:	f7fb fa13 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 60, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 80099fe:	1d3b      	adds	r3, r7, #4
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6818      	ldr	r0, [r3, #0]
 8009a04:	1d3b      	adds	r3, r7, #4
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009a0e:	236d      	movs	r3, #109	; 0x6d
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	4613      	mov	r3, r2
 8009a14:	223c      	movs	r2, #60	; 0x3c
 8009a16:	213c      	movs	r1, #60	; 0x3c
 8009a18:	f7fb fa04 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8009a1c:	1d3b      	adds	r3, r7, #4
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fa ff34 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009a28:	2308      	movs	r3, #8
 8009a2a:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		WichKey = keyboard->checkKey();
 8009a2e:	1d3b      	adds	r3, r7, #4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fb fd19 	bl	800546c <_ZN8DryerKey8checkKeyEv>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		switch(WichKey)
 8009a40:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8009a44:	2b07      	cmp	r3, #7
 8009a46:	f200 8146 	bhi.w	8009cd6 <_ZN10SmartDryer13changeProgramEh+0x6a6>
 8009a4a:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <_ZN10SmartDryer13changeProgramEh+0x420>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009a71 	.word	0x08009a71
 8009a54:	08009b4d 	.word	0x08009b4d
 8009a58:	08009cbb 	.word	0x08009cbb
 8009a5c:	08009c29 	.word	0x08009c29
 8009a60:	08009a71 	.word	0x08009a71
 8009a64:	08009b4d 	.word	0x08009b4d
 8009a68:	08009ccf 	.word	0x08009ccf
 8009a6c:	08009cd7 	.word	0x08009cd7
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				switch(WichSetting)
 8009a70:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d867      	bhi.n	8009b48 <_ZN10SmartDryer13changeProgramEh+0x518>
 8009a78:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <_ZN10SmartDryer13changeProgramEh+0x450>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009a95 	.word	0x08009a95
 8009a84:	08009abb 	.word	0x08009abb
 8009a88:	08009ae1 	.word	0x08009ae1
 8009a8c:	08009b07 	.word	0x08009b07
 8009a90:	08009b2d 	.word	0x08009b2d
				{
					case 0:
						if(NewProgram.startTime.hour > 0)
 8009a94:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009a98:	791b      	ldrb	r3, [r3, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d008      	beq.n	8009ab0 <_ZN10SmartDryer13changeProgramEh+0x480>
							NewProgram.startTime.hour--;
 8009a9e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009aa2:	791b      	ldrb	r3, [r3, #4]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009aac:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 23;
						break;
 8009aae:	e04c      	b.n	8009b4a <_ZN10SmartDryer13changeProgramEh+0x51a>
							NewProgram.startTime.hour = 23;
 8009ab0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ab4:	2217      	movs	r2, #23
 8009ab6:	711a      	strb	r2, [r3, #4]
						break;
 8009ab8:	e047      	b.n	8009b4a <_ZN10SmartDryer13changeProgramEh+0x51a>
					case 1:
						if(NewProgram.startTime.minute > 0)
 8009aba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009abe:	78db      	ldrb	r3, [r3, #3]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d008      	beq.n	8009ad6 <_ZN10SmartDryer13changeProgramEh+0x4a6>
							NewProgram.startTime.minute -= 10;
 8009ac4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ac8:	78db      	ldrb	r3, [r3, #3]
 8009aca:	3b0a      	subs	r3, #10
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ad2:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 50;
						break;
 8009ad4:	e039      	b.n	8009b4a <_ZN10SmartDryer13changeProgramEh+0x51a>
							NewProgram.startTime.minute = 50;
 8009ad6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ada:	2232      	movs	r2, #50	; 0x32
 8009adc:	70da      	strb	r2, [r3, #3]
						break;
 8009ade:	e034      	b.n	8009b4a <_ZN10SmartDryer13changeProgramEh+0x51a>
					case 2:
						if(NewProgram.endTime.hour > 0)
 8009ae0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ae4:	7b1b      	ldrb	r3, [r3, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d008      	beq.n	8009afc <_ZN10SmartDryer13changeProgramEh+0x4cc>
							NewProgram.endTime.hour--;
 8009aea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009aee:	7b1b      	ldrb	r3, [r3, #12]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009af8:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 23;
						break;
 8009afa:	e026      	b.n	8009b4a <_ZN10SmartDryer13changeProgramEh+0x51a>
							NewProgram.endTime.hour = 23;
 8009afc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b00:	2217      	movs	r2, #23
 8009b02:	731a      	strb	r2, [r3, #12]
						break;
 8009b04:	e021      	b.n	8009b4a <_ZN10SmartDryer13changeProgramEh+0x51a>
					case 3:
						if(NewProgram.endTime.minute > 0)
 8009b06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b0a:	7adb      	ldrb	r3, [r3, #11]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d008      	beq.n	8009b22 <_ZN10SmartDryer13changeProgramEh+0x4f2>
							NewProgram.endTime.minute -= 10;
 8009b10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b14:	7adb      	ldrb	r3, [r3, #11]
 8009b16:	3b0a      	subs	r3, #10
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b1e:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 50;
						break;
 8009b20:	e013      	b.n	8009b4a <_ZN10SmartDryer13changeProgramEh+0x51a>
							NewProgram.endTime.minute = 50;
 8009b22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b26:	2232      	movs	r2, #50	; 0x32
 8009b28:	72da      	strb	r2, [r3, #11]
						break;
 8009b2a:	e00e      	b.n	8009b4a <_ZN10SmartDryer13changeProgramEh+0x51a>
					case 4:
						if(TemperatureSetted > 30)
 8009b2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009b30:	2b1e      	cmp	r3, #30
 8009b32:	d905      	bls.n	8009b40 <_ZN10SmartDryer13changeProgramEh+0x510>
							TemperatureSetted -= 5;
 8009b34:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009b38:	3b05      	subs	r3, #5
 8009b3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 90;
						break;
 8009b3e:	e004      	b.n	8009b4a <_ZN10SmartDryer13changeProgramEh+0x51a>
							TemperatureSetted = 90;
 8009b40:	235a      	movs	r3, #90	; 0x5a
 8009b42:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 8009b46:	e000      	b.n	8009b4a <_ZN10SmartDryer13changeProgramEh+0x51a>
					default:
						break;
 8009b48:	bf00      	nop
				}
				break;
 8009b4a:	e0c7      	b.n	8009cdc <_ZN10SmartDryer13changeProgramEh+0x6ac>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				switch(WichSetting)
 8009b4c:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009b50:	2b04      	cmp	r3, #4
 8009b52:	d867      	bhi.n	8009c24 <_ZN10SmartDryer13changeProgramEh+0x5f4>
 8009b54:	a201      	add	r2, pc, #4	; (adr r2, 8009b5c <_ZN10SmartDryer13changeProgramEh+0x52c>)
 8009b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5a:	bf00      	nop
 8009b5c:	08009b71 	.word	0x08009b71
 8009b60:	08009b97 	.word	0x08009b97
 8009b64:	08009bbd 	.word	0x08009bbd
 8009b68:	08009be3 	.word	0x08009be3
 8009b6c:	08009c09 	.word	0x08009c09
				{
					case 0:
						if(NewProgram.startTime.hour < 23)
 8009b70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b74:	791b      	ldrb	r3, [r3, #4]
 8009b76:	2b16      	cmp	r3, #22
 8009b78:	d808      	bhi.n	8009b8c <_ZN10SmartDryer13changeProgramEh+0x55c>
							NewProgram.startTime.hour++;
 8009b7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b7e:	791b      	ldrb	r3, [r3, #4]
 8009b80:	3301      	adds	r3, #1
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b88:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 0;
						break;
 8009b8a:	e04c      	b.n	8009c26 <_ZN10SmartDryer13changeProgramEh+0x5f6>
							NewProgram.startTime.hour = 0;
 8009b8c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b90:	2200      	movs	r2, #0
 8009b92:	711a      	strb	r2, [r3, #4]
						break;
 8009b94:	e047      	b.n	8009c26 <_ZN10SmartDryer13changeProgramEh+0x5f6>
					case 1:
						if(NewProgram.startTime.minute < 50)
 8009b96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b9a:	78db      	ldrb	r3, [r3, #3]
 8009b9c:	2b31      	cmp	r3, #49	; 0x31
 8009b9e:	d808      	bhi.n	8009bb2 <_ZN10SmartDryer13changeProgramEh+0x582>
							NewProgram.startTime.minute += 10;
 8009ba0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ba4:	78db      	ldrb	r3, [r3, #3]
 8009ba6:	330a      	adds	r3, #10
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009bae:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 0;
						break;
 8009bb0:	e039      	b.n	8009c26 <_ZN10SmartDryer13changeProgramEh+0x5f6>
							NewProgram.startTime.minute = 0;
 8009bb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	70da      	strb	r2, [r3, #3]
						break;
 8009bba:	e034      	b.n	8009c26 <_ZN10SmartDryer13changeProgramEh+0x5f6>
					case 2:
						if(NewProgram.endTime.hour < 23)
 8009bbc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009bc0:	7b1b      	ldrb	r3, [r3, #12]
 8009bc2:	2b16      	cmp	r3, #22
 8009bc4:	d808      	bhi.n	8009bd8 <_ZN10SmartDryer13changeProgramEh+0x5a8>
							NewProgram.endTime.hour++;
 8009bc6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009bca:	7b1b      	ldrb	r3, [r3, #12]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009bd4:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 0;
						break;
 8009bd6:	e026      	b.n	8009c26 <_ZN10SmartDryer13changeProgramEh+0x5f6>
							NewProgram.endTime.hour = 0;
 8009bd8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009bdc:	2200      	movs	r2, #0
 8009bde:	731a      	strb	r2, [r3, #12]
						break;
 8009be0:	e021      	b.n	8009c26 <_ZN10SmartDryer13changeProgramEh+0x5f6>
					case 3:
						if(NewProgram.endTime.minute < 50)
 8009be2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009be6:	7adb      	ldrb	r3, [r3, #11]
 8009be8:	2b31      	cmp	r3, #49	; 0x31
 8009bea:	d808      	bhi.n	8009bfe <_ZN10SmartDryer13changeProgramEh+0x5ce>
							NewProgram.endTime.minute += 10;
 8009bec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009bf0:	7adb      	ldrb	r3, [r3, #11]
 8009bf2:	330a      	adds	r3, #10
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009bfa:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 0;
						break;
 8009bfc:	e013      	b.n	8009c26 <_ZN10SmartDryer13changeProgramEh+0x5f6>
							NewProgram.endTime.minute = 0;
 8009bfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009c02:	2200      	movs	r2, #0
 8009c04:	72da      	strb	r2, [r3, #11]
						break;
 8009c06:	e00e      	b.n	8009c26 <_ZN10SmartDryer13changeProgramEh+0x5f6>
					case 4:
						if(TemperatureSetted < 90)
 8009c08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009c0c:	2b59      	cmp	r3, #89	; 0x59
 8009c0e:	d805      	bhi.n	8009c1c <_ZN10SmartDryer13changeProgramEh+0x5ec>
							TemperatureSetted += 5;
 8009c10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009c14:	3305      	adds	r3, #5
 8009c16:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 30;
						break;
 8009c1a:	e004      	b.n	8009c26 <_ZN10SmartDryer13changeProgramEh+0x5f6>
							TemperatureSetted = 30;
 8009c1c:	231e      	movs	r3, #30
 8009c1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 8009c22:	e000      	b.n	8009c26 <_ZN10SmartDryer13changeProgramEh+0x5f6>
					default:
						break;
 8009c24:	bf00      	nop
				}
				break;
 8009c26:	e059      	b.n	8009cdc <_ZN10SmartDryer13changeProgramEh+0x6ac>
			case DryerKey::OK_KEY:
				if(WichSetting < MAX_SETTINGS - 1)
 8009c28:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d805      	bhi.n	8009c3c <_ZN10SmartDryer13changeProgramEh+0x60c>
					WichSetting++;
 8009c30:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009c34:	3301      	adds	r3, #1
 8009c36:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
					{
						saveDryerProgram(WichProgram);
					}
					ExitChangeProgram = true;
				}
				break;
 8009c3a:	e04f      	b.n	8009cdc <_ZN10SmartDryer13changeProgramEh+0x6ac>
					checkSettedProgramTime(WichProgram, NewProgram);
 8009c3c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8009c40:	1cfb      	adds	r3, r7, #3
 8009c42:	f893 c000 	ldrb.w	ip, [r3]
 8009c46:	1d3d      	adds	r5, r7, #4
 8009c48:	466e      	mov	r6, sp
 8009c4a:	f104 0308 	add.w	r3, r4, #8
 8009c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009c50:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8009c54:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009c58:	4661      	mov	r1, ip
 8009c5a:	6828      	ldr	r0, [r5, #0]
 8009c5c:	f7fd f8f8 	bl	8006e50 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
					dryerPrograms[WichProgram].tempSetted = (float)TemperatureSetted;
 8009c60:	1cfb      	adds	r3, r7, #3
 8009c62:	781c      	ldrb	r4, [r3, #0]
 8009c64:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8009c68:	f7f6 ff4e 	bl	8000b08 <__aeabi_ui2f>
 8009c6c:	4601      	mov	r1, r0
 8009c6e:	1d3b      	adds	r3, r7, #4
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	4623      	mov	r3, r4
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	4423      	add	r3, r4
 8009c78:	00db      	lsls	r3, r3, #3
 8009c7a:	4413      	add	r3, r2
 8009c7c:	3360      	adds	r3, #96	; 0x60
 8009c7e:	6019      	str	r1, [r3, #0]
					dryerPrograms[WichProgram].programSetted = true;
 8009c80:	1cfb      	adds	r3, r7, #3
 8009c82:	781a      	ldrb	r2, [r3, #0]
 8009c84:	1d3b      	adds	r3, r7, #4
 8009c86:	6819      	ldr	r1, [r3, #0]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	005b      	lsls	r3, r3, #1
 8009c8c:	4413      	add	r3, r2
 8009c8e:	00db      	lsls	r3, r3, #3
 8009c90:	440b      	add	r3, r1
 8009c92:	334c      	adds	r3, #76	; 0x4c
 8009c94:	2201      	movs	r2, #1
 8009c96:	701a      	strb	r2, [r3, #0]
					if(eepromEnabled)
 8009c98:	1d3b      	adds	r3, r7, #4
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d006      	beq.n	8009cb2 <_ZN10SmartDryer13changeProgramEh+0x682>
						saveDryerProgram(WichProgram);
 8009ca4:	1cfb      	adds	r3, r7, #3
 8009ca6:	781a      	ldrb	r2, [r3, #0]
 8009ca8:	1d3b      	adds	r3, r7, #4
 8009caa:	4611      	mov	r1, r2
 8009cac:	6818      	ldr	r0, [r3, #0]
 8009cae:	f7fc fe09 	bl	80068c4 <_ZN10SmartDryer16saveDryerProgramEh>
					ExitChangeProgram = true;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 8009cb8:	e010      	b.n	8009cdc <_ZN10SmartDryer13changeProgramEh+0x6ac>
			case DryerKey::LEFT_KEY:
				if(WichSetting > 0)
 8009cba:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00b      	beq.n	8009cda <_ZN10SmartDryer13changeProgramEh+0x6aa>
					WichSetting--;
 8009cc2:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
				break;
 8009ccc:	e005      	b.n	8009cda <_ZN10SmartDryer13changeProgramEh+0x6aa>
			case DryerKey::LONG_OK_KEY:

				break;
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeProgram = true;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 8009cd4:	e002      	b.n	8009cdc <_ZN10SmartDryer13changeProgramEh+0x6ac>
			default:
				break;
 8009cd6:	bf00      	nop
 8009cd8:	e000      	b.n	8009cdc <_ZN10SmartDryer13changeProgramEh+0x6ac>
				break;
 8009cda:	bf00      	nop
		}
		peripheralsControl();
 8009cdc:	1d3b      	adds	r3, r7, #4
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	f7fc fce4 	bl	80066ac <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, 500))
 8009ce4:	1d3b      	adds	r3, r7, #4
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009cee:	2101      	movs	r1, #1
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7f9 fb5e 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00a      	beq.n	8009d12 <_ZN10SmartDryer13changeProgramEh+0x6e2>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 8009cfc:	1d3b      	adds	r3, r7, #4
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d02:	1d3b      	adds	r3, r7, #4
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f7fb fe61 	bl	80059d0 <_ZN13SerialMessage17isDeviceConnectedEv>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 8009d12:	1d3b      	adds	r3, r7, #4
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d18:	7a5b      	ldrb	r3, [r3, #9]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f43f ad1e 	beq.w	800975c <_ZN10SmartDryer13changeProgramEh+0x12c>
		{
			serialComunicationCtrl();
 8009d20:	1d3b      	adds	r3, r7, #4
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	f7fd f9c6 	bl	80070b4 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeProgram)
 8009d28:	e518      	b.n	800975c <_ZN10SmartDryer13changeProgramEh+0x12c>
	String Title = "", SubTitle = "", Number = "";
 8009d2a:	f107 0308 	add.w	r3, r7, #8
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f007 f9a9 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009d34:	f107 0320 	add.w	r3, r7, #32
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f007 f9a4 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009d3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009d42:	4618      	mov	r0, r3
 8009d44:	f007 f99f 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 8009d48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f007 f99a 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009d52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009d56:	4618      	mov	r0, r3
 8009d58:	f007 f995 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8009d5c:	bf00      	nop
 8009d5e:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d66:	bf00      	nop

08009d68 <_ZN10SmartDryer12startProgramEh>:

void SmartDryer::startProgram(uint8_t WichProgram)
{
 8009d68:	b590      	push	{r4, r7, lr}
 8009d6a:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 8009d6e:	af02      	add	r7, sp, #8
 8009d70:	1d3b      	adds	r3, r7, #4
 8009d72:	6018      	str	r0, [r3, #0]
 8009d74:	460a      	mov	r2, r1
 8009d76:	1cfb      	adds	r3, r7, #3
 8009d78:	701a      	strb	r2, [r3, #0]
	bool ExitStartProgram = false;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
	bool ProgramEnd = false;
 8009d80:	2300      	movs	r3, #0
 8009d82:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
	String Time = "", Date = "";
 8009d86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f007 f84a 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009d90:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8009d94:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009d98:	49ce      	ldr	r1, [pc, #824]	; (800a0d4 <_ZN10SmartDryer12startProgramEh+0x36c>)
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f007 fb0a 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009da0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009da4:	4618      	mov	r0, r3
 8009da6:	f007 f83e 	bl	8010e26 <_ZNSaIcED1Ev>
 8009daa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009dae:	4618      	mov	r0, r3
 8009db0:	f007 f838 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009db4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8009db8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009dbc:	49c5      	ldr	r1, [pc, #788]	; (800a0d4 <_ZN10SmartDryer12startProgramEh+0x36c>)
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f007 faf8 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009dc4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f007 f82c 	bl	8010e26 <_ZNSaIcED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 8009dce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f007 f826 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009dd8:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8009ddc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009de0:	49bc      	ldr	r1, [pc, #752]	; (800a0d4 <_ZN10SmartDryer12startProgramEh+0x36c>)
 8009de2:	4618      	mov	r0, r3
 8009de4:	f007 fae6 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009de8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009dec:	4618      	mov	r0, r3
 8009dee:	f007 f81a 	bl	8010e26 <_ZNSaIcED1Ev>
 8009df2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8009df6:	4618      	mov	r0, r3
 8009df8:	f007 f814 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009dfc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8009e00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009e04:	49b3      	ldr	r1, [pc, #716]	; (800a0d4 <_ZN10SmartDryer12startProgramEh+0x36c>)
 8009e06:	4618      	mov	r0, r3
 8009e08:	f007 fad4 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009e0c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8009e10:	4618      	mov	r0, r3
 8009e12:	f007 f808 	bl	8010e26 <_ZNSaIcED1Ev>
 8009e16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f007 f802 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009e20:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8009e24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009e28:	49aa      	ldr	r1, [pc, #680]	; (800a0d4 <_ZN10SmartDryer12startProgramEh+0x36c>)
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f007 fac2 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009e30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009e34:	4618      	mov	r0, r3
 8009e36:	f006 fff6 	bl	8010e26 <_ZNSaIcED1Ev>
 8009e3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f006 fff0 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009e44:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8009e48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e4c:	49a1      	ldr	r1, [pc, #644]	; (800a0d4 <_ZN10SmartDryer12startProgramEh+0x36c>)
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f007 fab0 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009e54:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f006 ffe4 	bl	8010e26 <_ZNSaIcED1Ev>
	String TempRead = "0C", TempSet = "0";
 8009e5e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009e62:	4618      	mov	r0, r3
 8009e64:	f006 ffde 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009e68:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8009e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e70:	4999      	ldr	r1, [pc, #612]	; (800a0d8 <_ZN10SmartDryer12startProgramEh+0x370>)
 8009e72:	4618      	mov	r0, r3
 8009e74:	f007 fa9e 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009e78:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f006 ffd2 	bl	8010e26 <_ZNSaIcED1Ev>
 8009e82:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009e86:	4618      	mov	r0, r3
 8009e88:	f006 ffcc 	bl	8010e24 <_ZNSaIcEC1Ev>
 8009e8c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009e90:	f107 0314 	add.w	r3, r7, #20
 8009e94:	4991      	ldr	r1, [pc, #580]	; (800a0dc <_ZN10SmartDryer12startProgramEh+0x374>)
 8009e96:	4618      	mov	r0, r3
 8009e98:	f007 fa8c 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009e9c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f006 ffc0 	bl	8010e26 <_ZNSaIcED1Ev>
	DS1307_RTC::TIME_DATE_T ActualTime;
	checkSerialDeviceTimer->restart();
 8009ea6:	1d3b      	adds	r3, r7, #4
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7f9 fa72 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	StartHour = dryerPrograms[WichProgram].startTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.hour);
 8009eb2:	1cfb      	adds	r3, r7, #3
 8009eb4:	781a      	ldrb	r2, [r3, #0]
 8009eb6:	1d3b      	adds	r3, r7, #4
 8009eb8:	6819      	ldr	r1, [r3, #0]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	005b      	lsls	r3, r3, #1
 8009ebe:	4413      	add	r3, r2
 8009ec0:	00db      	lsls	r3, r3, #3
 8009ec2:	440b      	add	r3, r1
 8009ec4:	3350      	adds	r3, #80	; 0x50
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2400      	movs	r4, #0
 8009eca:	2b09      	cmp	r3, #9
 8009ecc:	d912      	bls.n	8009ef4 <_ZN10SmartDryer12startProgramEh+0x18c>
 8009ece:	1cfb      	adds	r3, r7, #3
 8009ed0:	781a      	ldrb	r2, [r3, #0]
 8009ed2:	1d3b      	adds	r3, r7, #4
 8009ed4:	6819      	ldr	r1, [r3, #0]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	4413      	add	r3, r2
 8009edc:	00db      	lsls	r3, r3, #3
 8009ede:	440b      	add	r3, r1
 8009ee0:	3350      	adds	r3, #80	; 0x50
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009eea:	4611      	mov	r1, r2
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7f9 fa93 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009ef2:	e01a      	b.n	8009f2a <_ZN10SmartDryer12startProgramEh+0x1c2>
 8009ef4:	1cfb      	adds	r3, r7, #3
 8009ef6:	781a      	ldrb	r2, [r3, #0]
 8009ef8:	1d3b      	adds	r3, r7, #4
 8009efa:	6819      	ldr	r1, [r3, #0]
 8009efc:	4613      	mov	r3, r2
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	4413      	add	r3, r2
 8009f02:	00db      	lsls	r3, r3, #3
 8009f04:	440b      	add	r3, r1
 8009f06:	3350      	adds	r3, #80	; 0x50
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009f10:	4611      	mov	r1, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7f9 fa80 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009f18:	2401      	movs	r4, #1
 8009f1a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009f1e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8009f22:	496e      	ldr	r1, [pc, #440]	; (800a0dc <_ZN10SmartDryer12startProgramEh+0x374>)
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fa f801 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8009f2a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8009f2e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009f32:	4611      	mov	r1, r2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f007 f8b2 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009f3a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f007 f8a1 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009f44:	2c00      	cmp	r4, #0
 8009f46:	d004      	beq.n	8009f52 <_ZN10SmartDryer12startProgramEh+0x1ea>
 8009f48:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f007 f89a 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	StartMinute = dryerPrograms[WichProgram].startTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.minute);
 8009f52:	1cfb      	adds	r3, r7, #3
 8009f54:	781a      	ldrb	r2, [r3, #0]
 8009f56:	1d3b      	adds	r3, r7, #4
 8009f58:	6819      	ldr	r1, [r3, #0]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	4413      	add	r3, r2
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	440b      	add	r3, r1
 8009f64:	334f      	adds	r3, #79	; 0x4f
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	2400      	movs	r4, #0
 8009f6a:	2b09      	cmp	r3, #9
 8009f6c:	d912      	bls.n	8009f94 <_ZN10SmartDryer12startProgramEh+0x22c>
 8009f6e:	1cfb      	adds	r3, r7, #3
 8009f70:	781a      	ldrb	r2, [r3, #0]
 8009f72:	1d3b      	adds	r3, r7, #4
 8009f74:	6819      	ldr	r1, [r3, #0]
 8009f76:	4613      	mov	r3, r2
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	4413      	add	r3, r2
 8009f7c:	00db      	lsls	r3, r3, #3
 8009f7e:	440b      	add	r3, r1
 8009f80:	334f      	adds	r3, #79	; 0x4f
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7f9 fa43 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009f92:	e01a      	b.n	8009fca <_ZN10SmartDryer12startProgramEh+0x262>
 8009f94:	1cfb      	adds	r3, r7, #3
 8009f96:	781a      	ldrb	r2, [r3, #0]
 8009f98:	1d3b      	adds	r3, r7, #4
 8009f9a:	6819      	ldr	r1, [r3, #0]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	005b      	lsls	r3, r3, #1
 8009fa0:	4413      	add	r3, r2
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	440b      	add	r3, r1
 8009fa6:	334f      	adds	r3, #79	; 0x4f
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7f9 fa30 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009fb8:	2401      	movs	r4, #1
 8009fba:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009fbe:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009fc2:	4946      	ldr	r1, [pc, #280]	; (800a0dc <_ZN10SmartDryer12startProgramEh+0x374>)
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7f9 ffb1 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8009fca:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8009fce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f007 f862 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009fda:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f007 f851 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009fe4:	2c00      	cmp	r4, #0
 8009fe6:	d004      	beq.n	8009ff2 <_ZN10SmartDryer12startProgramEh+0x28a>
 8009fe8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009fec:	4618      	mov	r0, r3
 8009fee:	f007 f84a 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndHour = dryerPrograms[WichProgram].endTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.hour);
 8009ff2:	1cfb      	adds	r3, r7, #3
 8009ff4:	781a      	ldrb	r2, [r3, #0]
 8009ff6:	1d3b      	adds	r3, r7, #4
 8009ff8:	6819      	ldr	r1, [r3, #0]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	4413      	add	r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	440b      	add	r3, r1
 800a004:	3358      	adds	r3, #88	; 0x58
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2400      	movs	r4, #0
 800a00a:	2b09      	cmp	r3, #9
 800a00c:	d912      	bls.n	800a034 <_ZN10SmartDryer12startProgramEh+0x2cc>
 800a00e:	1cfb      	adds	r3, r7, #3
 800a010:	781a      	ldrb	r2, [r3, #0]
 800a012:	1d3b      	adds	r3, r7, #4
 800a014:	6819      	ldr	r1, [r3, #0]
 800a016:	4613      	mov	r3, r2
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	4413      	add	r3, r2
 800a01c:	00db      	lsls	r3, r3, #3
 800a01e:	440b      	add	r3, r1
 800a020:	3358      	adds	r3, #88	; 0x58
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a02a:	4611      	mov	r1, r2
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7f9 f9f3 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a032:	e01a      	b.n	800a06a <_ZN10SmartDryer12startProgramEh+0x302>
 800a034:	1cfb      	adds	r3, r7, #3
 800a036:	781a      	ldrb	r2, [r3, #0]
 800a038:	1d3b      	adds	r3, r7, #4
 800a03a:	6819      	ldr	r1, [r3, #0]
 800a03c:	4613      	mov	r3, r2
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	4413      	add	r3, r2
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	440b      	add	r3, r1
 800a046:	3358      	adds	r3, #88	; 0x58
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a050:	4611      	mov	r1, r2
 800a052:	4618      	mov	r0, r3
 800a054:	f7f9 f9e0 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a058:	2401      	movs	r4, #1
 800a05a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a05e:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800a062:	491e      	ldr	r1, [pc, #120]	; (800a0dc <_ZN10SmartDryer12startProgramEh+0x374>)
 800a064:	4618      	mov	r0, r3
 800a066:	f7f9 ff61 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a06a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800a06e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a072:	4611      	mov	r1, r2
 800a074:	4618      	mov	r0, r3
 800a076:	f007 f812 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a07a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a07e:	4618      	mov	r0, r3
 800a080:	f007 f801 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a084:	2c00      	cmp	r4, #0
 800a086:	d004      	beq.n	800a092 <_ZN10SmartDryer12startProgramEh+0x32a>
 800a088:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a08c:	4618      	mov	r0, r3
 800a08e:	f006 fffa 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndMinute = dryerPrograms[WichProgram].endTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.minute);
 800a092:	1cfb      	adds	r3, r7, #3
 800a094:	781a      	ldrb	r2, [r3, #0]
 800a096:	1d3b      	adds	r3, r7, #4
 800a098:	6819      	ldr	r1, [r3, #0]
 800a09a:	4613      	mov	r3, r2
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	4413      	add	r3, r2
 800a0a0:	00db      	lsls	r3, r3, #3
 800a0a2:	440b      	add	r3, r1
 800a0a4:	3357      	adds	r3, #87	; 0x57
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	2400      	movs	r4, #0
 800a0aa:	2b09      	cmp	r3, #9
 800a0ac:	d918      	bls.n	800a0e0 <_ZN10SmartDryer12startProgramEh+0x378>
 800a0ae:	1cfb      	adds	r3, r7, #3
 800a0b0:	781a      	ldrb	r2, [r3, #0]
 800a0b2:	1d3b      	adds	r3, r7, #4
 800a0b4:	6819      	ldr	r1, [r3, #0]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	005b      	lsls	r3, r3, #1
 800a0ba:	4413      	add	r3, r2
 800a0bc:	00db      	lsls	r3, r3, #3
 800a0be:	440b      	add	r3, r1
 800a0c0:	3357      	adds	r3, #87	; 0x57
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7f9 f9a3 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a0d2:	e020      	b.n	800a116 <_ZN10SmartDryer12startProgramEh+0x3ae>
 800a0d4:	080122e0 	.word	0x080122e0
 800a0d8:	080124f8 	.word	0x080124f8
 800a0dc:	080124fc 	.word	0x080124fc
 800a0e0:	1cfb      	adds	r3, r7, #3
 800a0e2:	781a      	ldrb	r2, [r3, #0]
 800a0e4:	1d3b      	adds	r3, r7, #4
 800a0e6:	6819      	ldr	r1, [r3, #0]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	005b      	lsls	r3, r3, #1
 800a0ec:	4413      	add	r3, r2
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	440b      	add	r3, r1
 800a0f2:	3357      	adds	r3, #87	; 0x57
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7f9 f98a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a104:	2401      	movs	r4, #1
 800a106:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a10a:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800a10e:	49de      	ldr	r1, [pc, #888]	; (800a488 <_ZN10SmartDryer12startProgramEh+0x720>)
 800a110:	4618      	mov	r0, r3
 800a112:	f7f9 ff0b 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a116:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800a11a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a11e:	4611      	mov	r1, r2
 800a120:	4618      	mov	r0, r3
 800a122:	f006 ffbc 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a126:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a12a:	4618      	mov	r0, r3
 800a12c:	f006 ffab 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a130:	2c00      	cmp	r4, #0
 800a132:	d004      	beq.n	800a13e <_ZN10SmartDryer12startProgramEh+0x3d6>
 800a134:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a138:	4618      	mov	r0, r3
 800a13a:	f006 ffa4 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	TempSet = floatString(dryerPrograms[WichProgram].tempSetted, 1) + "C";
 800a13e:	1cfb      	adds	r3, r7, #3
 800a140:	781a      	ldrb	r2, [r3, #0]
 800a142:	1d3b      	adds	r3, r7, #4
 800a144:	6819      	ldr	r1, [r3, #0]
 800a146:	4613      	mov	r3, r2
 800a148:	005b      	lsls	r3, r3, #1
 800a14a:	4413      	add	r3, r2
 800a14c:	00db      	lsls	r3, r3, #3
 800a14e:	440b      	add	r3, r1
 800a150:	3360      	adds	r3, #96	; 0x60
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 800a158:	1d39      	adds	r1, r7, #4
 800a15a:	2301      	movs	r3, #1
 800a15c:	6809      	ldr	r1, [r1, #0]
 800a15e:	f7fb ffe1 	bl	8006124 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a162:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a166:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 800a16a:	4ac8      	ldr	r2, [pc, #800]	; (800a48c <_ZN10SmartDryer12startProgramEh+0x724>)
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7f9 ff1f 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a172:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800a176:	f107 0314 	add.w	r3, r7, #20
 800a17a:	4611      	mov	r1, r2
 800a17c:	4618      	mov	r0, r3
 800a17e:	f006 ff8e 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a182:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a186:	4618      	mov	r0, r3
 800a188:	f006 ff7d 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a18c:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800a190:	4618      	mov	r0, r3
 800a192:	f006 ff78 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitStartProgram)
 800a196:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f040 83b2 	bne.w	800a904 <_ZN10SmartDryer12startProgramEh+0xb9c>
	{
		if(programStartedTimer->isFinished(true, 500))
 800a1a0:	1d3b      	adds	r3, r7, #4
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7f9 f900 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d008      	beq.n	800a1ca <_ZN10SmartDryer12startProgramEh+0x462>
		{
			clock->getTimeDate(ActualTime);
 800a1b8:	1d3b      	adds	r3, r7, #4
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f107 020c 	add.w	r2, r7, #12
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7f9 fab5 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		}
		TempRead = floatString(chamberTemperature.readedValueFL, 1) + "C";
 800a1ca:	1d3b      	adds	r3, r7, #4
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a1d2:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 800a1d6:	1d39      	adds	r1, r7, #4
 800a1d8:	2301      	movs	r3, #1
 800a1da:	6809      	ldr	r1, [r1, #0]
 800a1dc:	f7fb ffa2 	bl	8006124 <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a1e0:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a1e4:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 800a1e8:	4aa8      	ldr	r2, [pc, #672]	; (800a48c <_ZN10SmartDryer12startProgramEh+0x724>)
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7f9 fee0 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a1f0:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 800a1f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f006 ff4f 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a200:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a204:	4618      	mov	r0, r3
 800a206:	f006 ff3e 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a20a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800a20e:	4618      	mov	r0, r3
 800a210:	f006 ff39 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 800a214:	1d3b      	adds	r3, r7, #4
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fa fb2b 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800a220:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800a224:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800a228:	1d3b      	adds	r3, r7, #4
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	f7fc fa53 	bl	80066d6 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Temp. letta", NHDST7565_LCD::LEFT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a230:	1d3b      	adds	r3, r7, #4
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681c      	ldr	r4, [r3, #0]
 800a236:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a23a:	4618      	mov	r0, r3
 800a23c:	f006 fdf2 	bl	8010e24 <_ZNSaIcEC1Ev>
 800a240:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 800a244:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a248:	4991      	ldr	r1, [pc, #580]	; (800a490 <_ZN10SmartDryer12startProgramEh+0x728>)
 800a24a:	4618      	mov	r0, r3
 800a24c:	f007 f8b2 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a250:	1d3b      	adds	r3, r7, #4
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a25a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	230a      	movs	r3, #10
 800a262:	2282      	movs	r2, #130	; 0x82
 800a264:	4620      	mov	r0, r4
 800a266:	f7fa fb2e 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a26a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a26e:	4618      	mov	r0, r3
 800a270:	f006 ff09 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a274:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a278:	4618      	mov	r0, r3
 800a27a:	f006 fdd4 	bl	8010e26 <_ZNSaIcED1Ev>
		display->drawString("Temp. target", NHDST7565_LCD::RIGHT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a27e:	1d3b      	adds	r3, r7, #4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681c      	ldr	r4, [r3, #0]
 800a284:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a288:	4618      	mov	r0, r3
 800a28a:	f006 fdcb 	bl	8010e24 <_ZNSaIcEC1Ev>
 800a28e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a292:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a296:	497f      	ldr	r1, [pc, #508]	; (800a494 <_ZN10SmartDryer12startProgramEh+0x72c>)
 800a298:	4618      	mov	r0, r3
 800a29a:	f007 f88b 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a29e:	1d3b      	adds	r3, r7, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2a8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	230a      	movs	r3, #10
 800a2b0:	2284      	movs	r2, #132	; 0x84
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f7fa fb07 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a2b8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f006 fee2 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a2c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f006 fdad 	bl	8010e26 <_ZNSaIcED1Ev>
		display->drawString(TempRead, NHDST7565_LCD::LEFT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a2cc:	1d3b      	adds	r3, r7, #4
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681c      	ldr	r4, [r3, #0]
 800a2d2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a2d6:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f007 f836 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a2e2:	1d3b      	adds	r3, r7, #4
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a2ec:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	2314      	movs	r3, #20
 800a2f4:	2282      	movs	r2, #130	; 0x82
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f7fa fae5 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a2fc:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a300:	4618      	mov	r0, r3
 800a302:	f006 fec0 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(TempSet, NHDST7565_LCD::RIGHT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a306:	1d3b      	adds	r3, r7, #4
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681c      	ldr	r4, [r3, #0]
 800a30c:	f107 0214 	add.w	r2, r7, #20
 800a310:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f007 f819 	bl	801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a31c:	1d3b      	adds	r3, r7, #4
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a326:	f507 7119 	add.w	r1, r7, #612	; 0x264
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	2314      	movs	r3, #20
 800a32e:	2284      	movs	r2, #132	; 0x84
 800a330:	4620      	mov	r0, r4
 800a332:	f7fa fac8 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a336:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a33a:	4618      	mov	r0, r3
 800a33c:	f006 fea3 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Inizio programma", NHDST7565_LCD::LEFT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a340:	1d3b      	adds	r3, r7, #4
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681c      	ldr	r4, [r3, #0]
 800a346:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800a34a:	4618      	mov	r0, r3
 800a34c:	f006 fd6a 	bl	8010e24 <_ZNSaIcEC1Ev>
 800a350:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800a354:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800a358:	494f      	ldr	r1, [pc, #316]	; (800a498 <_ZN10SmartDryer12startProgramEh+0x730>)
 800a35a:	4618      	mov	r0, r3
 800a35c:	f007 f82a 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a360:	1d3b      	adds	r3, r7, #4
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a36a:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	2328      	movs	r3, #40	; 0x28
 800a372:	2282      	movs	r2, #130	; 0x82
 800a374:	4620      	mov	r0, r4
 800a376:	f7fa faa6 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a37a:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800a37e:	4618      	mov	r0, r3
 800a380:	f006 fe81 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a384:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800a388:	4618      	mov	r0, r3
 800a38a:	f006 fd4c 	bl	8010e26 <_ZNSaIcED1Ev>
		display->drawString("Fine programma", NHDST7565_LCD::RIGHT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a38e:	1d3b      	adds	r3, r7, #4
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681c      	ldr	r4, [r3, #0]
 800a394:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800a398:	4618      	mov	r0, r3
 800a39a:	f006 fd43 	bl	8010e24 <_ZNSaIcEC1Ev>
 800a39e:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 800a3a2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800a3a6:	493d      	ldr	r1, [pc, #244]	; (800a49c <_ZN10SmartDryer12startProgramEh+0x734>)
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f007 f803 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a3ae:	1d3b      	adds	r3, r7, #4
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a3b8:	f507 7126 	add.w	r1, r7, #664	; 0x298
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	2328      	movs	r3, #40	; 0x28
 800a3c0:	2284      	movs	r2, #132	; 0x84
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f7fa fa7f 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a3c8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f006 fe5a 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a3d2:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f006 fd25 	bl	8010e26 <_ZNSaIcED1Ev>
		display->drawString(StartHour + ":" + StartMinute, NHDST7565_LCD::LEFT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a3dc:	1d3b      	adds	r3, r7, #4
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681c      	ldr	r4, [r3, #0]
 800a3e2:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800a3e6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800a3ea:	4a2d      	ldr	r2, [pc, #180]	; (800a4a0 <_ZN10SmartDryer12startProgramEh+0x738>)
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7f9 fdb5 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800a3f2:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800a3f6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800a3fa:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7f9 fdbf 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800a404:	1d3b      	adds	r3, r7, #4
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a40e:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	2332      	movs	r3, #50	; 0x32
 800a416:	2282      	movs	r2, #130	; 0x82
 800a418:	4620      	mov	r0, r4
 800a41a:	f7fa fa54 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a41e:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800a422:	4618      	mov	r0, r3
 800a424:	f006 fe2f 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a428:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800a42c:	4618      	mov	r0, r3
 800a42e:	f006 fe2a 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(EndHour + ":" + EndMinute, NHDST7565_LCD::RIGHT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a432:	1d3b      	adds	r3, r7, #4
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681c      	ldr	r4, [r3, #0]
 800a438:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a43c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800a440:	4a17      	ldr	r2, [pc, #92]	; (800a4a0 <_ZN10SmartDryer12startProgramEh+0x738>)
 800a442:	4618      	mov	r0, r3
 800a444:	f7f9 fd8a 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800a448:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800a44c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a450:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 800a454:	4618      	mov	r0, r3
 800a456:	f7f9 fd94 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800a45a:	1d3b      	adds	r3, r7, #4
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a464:	f507 7139 	add.w	r1, r7, #740	; 0x2e4
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	2332      	movs	r3, #50	; 0x32
 800a46c:	2284      	movs	r2, #132	; 0x84
 800a46e:	4620      	mov	r0, r4
 800a470:	f7fa fa29 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a474:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800a478:	4618      	mov	r0, r3
 800a47a:	f006 fe04 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a47e:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a482:	4618      	mov	r0, r3
 800a484:	e00e      	b.n	800a4a4 <_ZN10SmartDryer12startProgramEh+0x73c>
 800a486:	bf00      	nop
 800a488:	080124fc 	.word	0x080124fc
 800a48c:	08012468 	.word	0x08012468
 800a490:	08012500 	.word	0x08012500
 800a494:	0801250c 	.word	0x0801250c
 800a498:	0801251c 	.word	0x0801251c
 800a49c:	08012530 	.word	0x08012530
 800a4a0:	08012540 	.word	0x08012540
 800a4a4:	f006 fdef 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->sendFrameBuffer();
 800a4a8:	1d3b      	adds	r3, r7, #4
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fa f9ee 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800a4b4:	2308      	movs	r3, #8
 800a4b6:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		WichKey = keyboard->checkKey();
 800a4ba:	1d3b      	adds	r3, r7, #4
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fa ffd3 	bl	800546c <_ZN8DryerKey8checkKeyEv>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		switch(WichKey)
 800a4cc:	f897 3365 	ldrb.w	r3, [r7, #869]	; 0x365
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d055      	beq.n	800a580 <_ZN10SmartDryer12startProgramEh+0x818>
 800a4d4:	2b06      	cmp	r3, #6
 800a4d6:	d000      	beq.n	800a4da <_ZN10SmartDryer12startProgramEh+0x772>
					saveDryerProgram(WichProgram);
				}
				ExitStartProgram = true;
				break;
			default:
				break;
 800a4d8:	e053      	b.n	800a582 <_ZN10SmartDryer12startProgramEh+0x81a>
				statusParam->dryerOn = false;
 800a4da:	1d3b      	adds	r3, r7, #4
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	701a      	strb	r2, [r3, #0]
				statusParam->programStarted = false;
 800a4e4:	1d3b      	adds	r3, r7, #4
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	721a      	strb	r2, [r3, #8]
				ledStatus = PROGRAM_END;
 800a4ee:	1d3b      	adds	r3, r7, #4
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800a4f6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				display->drawFullScreenPopUp("Programma terminato", 2000);
 800a4fa:	1d3b      	adds	r3, r7, #4
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681c      	ldr	r4, [r3, #0]
 800a500:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a504:	4618      	mov	r0, r3
 800a506:	f006 fc8d 	bl	8010e24 <_ZNSaIcEC1Ev>
 800a50a:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 800a50e:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a512:	4993      	ldr	r1, [pc, #588]	; (800a760 <_ZN10SmartDryer12startProgramEh+0x9f8>)
 800a514:	4618      	mov	r0, r3
 800a516:	f006 ff4d 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a51a:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a51e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a522:	4619      	mov	r1, r3
 800a524:	4620      	mov	r0, r4
 800a526:	f7fa fcf7 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800a52a:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a52e:	4618      	mov	r0, r3
 800a530:	f006 fda9 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a534:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a538:	4618      	mov	r0, r3
 800a53a:	f006 fc74 	bl	8010e26 <_ZNSaIcED1Ev>
				programStartedTimer->stopTimer();
 800a53e:	1d3b      	adds	r3, r7, #4
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a544:	4618      	mov	r0, r3
 800a546:	f7f8 ff10 	bl	800336a <_ZN11ChronoTimer9stopTimerEv>
				ProgramEnd = true;
 800a54a:	2301      	movs	r3, #1
 800a54c:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
				if(eepromEnabled)
 800a550:	1d3b      	adds	r3, r7, #4
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00d      	beq.n	800a578 <_ZN10SmartDryer12startProgramEh+0x810>
					writeDefaultsDryerProgram(WichProgram);
 800a55c:	1cfb      	adds	r3, r7, #3
 800a55e:	781a      	ldrb	r2, [r3, #0]
 800a560:	1d3b      	adds	r3, r7, #4
 800a562:	4611      	mov	r1, r2
 800a564:	6818      	ldr	r0, [r3, #0]
 800a566:	f7fc f911 	bl	800678c <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
					saveDryerProgram(WichProgram);
 800a56a:	1cfb      	adds	r3, r7, #3
 800a56c:	781a      	ldrb	r2, [r3, #0]
 800a56e:	1d3b      	adds	r3, r7, #4
 800a570:	4611      	mov	r1, r2
 800a572:	6818      	ldr	r0, [r3, #0]
 800a574:	f7fc f9a6 	bl	80068c4 <_ZN10SmartDryer16saveDryerProgramEh>
				ExitStartProgram = true;
 800a578:	2301      	movs	r3, #1
 800a57a:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
				break;
 800a57e:	e000      	b.n	800a582 <_ZN10SmartDryer12startProgramEh+0x81a>
				break;
 800a580:	bf00      	nop
		}

		if(!statusParam->programStarted && !ProgramEnd)
 800a582:	1d3b      	adds	r3, r7, #4
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a588:	7a1b      	ldrb	r3, [r3, #8]
 800a58a:	f083 0301 	eor.w	r3, r3, #1
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 80e9 	beq.w	800a768 <_ZN10SmartDryer12startProgramEh+0xa00>
 800a596:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800a59a:	f083 0301 	eor.w	r3, r3, #1
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 80e1 	beq.w	800a768 <_ZN10SmartDryer12startProgramEh+0xa00>
		{
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a5a6:	f107 030c 	add.w	r3, r7, #12
 800a5aa:	7899      	ldrb	r1, [r3, #2]
 800a5ac:	1cfb      	adds	r3, r7, #3
 800a5ae:	781a      	ldrb	r2, [r3, #0]
 800a5b0:	1d3b      	adds	r3, r7, #4
 800a5b2:	6818      	ldr	r0, [r3, #0]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	4413      	add	r3, r2
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	4403      	add	r3, r0
 800a5be:	3350      	adds	r3, #80	; 0x50
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	4299      	cmp	r1, r3
 800a5c4:	f0c0 8176 	bcc.w	800a8b4 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800a5c8:	f107 030c 	add.w	r3, r7, #12
 800a5cc:	7859      	ldrb	r1, [r3, #1]
 800a5ce:	1cfb      	adds	r3, r7, #3
 800a5d0:	781a      	ldrb	r2, [r3, #0]
 800a5d2:	1d3b      	adds	r3, r7, #4
 800a5d4:	6818      	ldr	r0, [r3, #0]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	005b      	lsls	r3, r3, #1
 800a5da:	4413      	add	r3, r2
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	4403      	add	r3, r0
 800a5e0:	334f      	adds	r3, #79	; 0x4f
 800a5e2:	781b      	ldrb	r3, [r3, #0]
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a5e4:	4299      	cmp	r1, r3
 800a5e6:	f0c0 8165 	bcc.w	800a8b4 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800a5ea:	f107 030c 	add.w	r3, r7, #12
 800a5ee:	78d9      	ldrb	r1, [r3, #3]
 800a5f0:	1cfb      	adds	r3, r7, #3
 800a5f2:	781a      	ldrb	r2, [r3, #0]
 800a5f4:	1d3b      	adds	r3, r7, #4
 800a5f6:	6818      	ldr	r0, [r3, #0]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	4413      	add	r3, r2
 800a5fe:	00db      	lsls	r3, r3, #3
 800a600:	4403      	add	r3, r0
 800a602:	3351      	adds	r3, #81	; 0x51
 800a604:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800a606:	4299      	cmp	r1, r3
 800a608:	f0c0 8154 	bcc.w	800a8b4 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800a60c:	f107 030c 	add.w	r3, r7, #12
 800a610:	7919      	ldrb	r1, [r3, #4]
 800a612:	1cfb      	adds	r3, r7, #3
 800a614:	781a      	ldrb	r2, [r3, #0]
 800a616:	1d3b      	adds	r3, r7, #4
 800a618:	6818      	ldr	r0, [r3, #0]
 800a61a:	4613      	mov	r3, r2
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	4413      	add	r3, r2
 800a620:	00db      	lsls	r3, r3, #3
 800a622:	4403      	add	r3, r0
 800a624:	3352      	adds	r3, #82	; 0x52
 800a626:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800a628:	4299      	cmp	r1, r3
 800a62a:	f0c0 8143 	bcc.w	800a8b4 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800a62e:	f107 030c 	add.w	r3, r7, #12
 800a632:	88d9      	ldrh	r1, [r3, #6]
 800a634:	1cfb      	adds	r3, r7, #3
 800a636:	781a      	ldrb	r2, [r3, #0]
 800a638:	1d3b      	adds	r3, r7, #4
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	4613      	mov	r3, r2
 800a63e:	005b      	lsls	r3, r3, #1
 800a640:	4413      	add	r3, r2
 800a642:	00db      	lsls	r3, r3, #3
 800a644:	4403      	add	r3, r0
 800a646:	3354      	adds	r3, #84	; 0x54
 800a648:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800a64a:	4299      	cmp	r1, r3
 800a64c:	f0c0 8132 	bcc.w	800a8b4 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800a650:	f107 030c 	add.w	r3, r7, #12
 800a654:	78d9      	ldrb	r1, [r3, #3]
 800a656:	1cfb      	adds	r3, r7, #3
 800a658:	781a      	ldrb	r2, [r3, #0]
 800a65a:	1d3b      	adds	r3, r7, #4
 800a65c:	6818      	ldr	r0, [r3, #0]
 800a65e:	4613      	mov	r3, r2
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	4413      	add	r3, r2
 800a664:	00db      	lsls	r3, r3, #3
 800a666:	4403      	add	r3, r0
 800a668:	3359      	adds	r3, #89	; 0x59
 800a66a:	781b      	ldrb	r3, [r3, #0]
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800a66c:	4299      	cmp	r1, r3
 800a66e:	f200 8121 	bhi.w	800a8b4 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800a672:	f107 030c 	add.w	r3, r7, #12
 800a676:	7899      	ldrb	r1, [r3, #2]
 800a678:	1cfb      	adds	r3, r7, #3
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	1d3b      	adds	r3, r7, #4
 800a67e:	6818      	ldr	r0, [r3, #0]
 800a680:	4613      	mov	r3, r2
 800a682:	005b      	lsls	r3, r3, #1
 800a684:	4413      	add	r3, r2
 800a686:	00db      	lsls	r3, r3, #3
 800a688:	4403      	add	r3, r0
 800a68a:	3358      	adds	r3, #88	; 0x58
 800a68c:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800a68e:	4299      	cmp	r1, r3
 800a690:	f200 8110 	bhi.w	800a8b4 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800a694:	f107 030c 	add.w	r3, r7, #12
 800a698:	7859      	ldrb	r1, [r3, #1]
 800a69a:	1cfb      	adds	r3, r7, #3
 800a69c:	781a      	ldrb	r2, [r3, #0]
 800a69e:	1d3b      	adds	r3, r7, #4
 800a6a0:	6818      	ldr	r0, [r3, #0]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	005b      	lsls	r3, r3, #1
 800a6a6:	4413      	add	r3, r2
 800a6a8:	00db      	lsls	r3, r3, #3
 800a6aa:	4403      	add	r3, r0
 800a6ac:	3357      	adds	r3, #87	; 0x57
 800a6ae:	781b      	ldrb	r3, [r3, #0]
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800a6b0:	4299      	cmp	r1, r3
 800a6b2:	f200 80ff 	bhi.w	800a8b4 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800a6b6:	f107 030c 	add.w	r3, r7, #12
 800a6ba:	7919      	ldrb	r1, [r3, #4]
 800a6bc:	1cfb      	adds	r3, r7, #3
 800a6be:	781a      	ldrb	r2, [r3, #0]
 800a6c0:	1d3b      	adds	r3, r7, #4
 800a6c2:	6818      	ldr	r0, [r3, #0]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	4413      	add	r3, r2
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	4403      	add	r3, r0
 800a6ce:	335a      	adds	r3, #90	; 0x5a
 800a6d0:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800a6d2:	4299      	cmp	r1, r3
 800a6d4:	f200 80ee 	bhi.w	800a8b4 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.year <= dryerPrograms[WichProgram].endTime.year)
 800a6d8:	f107 030c 	add.w	r3, r7, #12
 800a6dc:	88d9      	ldrh	r1, [r3, #6]
 800a6de:	1cfb      	adds	r3, r7, #3
 800a6e0:	781a      	ldrb	r2, [r3, #0]
 800a6e2:	1d3b      	adds	r3, r7, #4
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	4413      	add	r3, r2
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	4403      	add	r3, r0
 800a6f0:	335c      	adds	r3, #92	; 0x5c
 800a6f2:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800a6f4:	4299      	cmp	r1, r3
 800a6f6:	f200 80dd 	bhi.w	800a8b4 <_ZN10SmartDryer12startProgramEh+0xb4c>
			{
				statusParam->programStarted = true;
 800a6fa:	1d3b      	adds	r3, r7, #4
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a700:	2201      	movs	r2, #1
 800a702:	721a      	strb	r2, [r3, #8]
				statusParam->dryerOn = true;
 800a704:	1d3b      	adds	r3, r7, #4
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a70a:	2201      	movs	r2, #1
 800a70c:	701a      	strb	r2, [r3, #0]
				ledStatus = PROGRAM_INIT;
 800a70e:	1d3b      	adds	r3, r7, #4
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f240 12f5 	movw	r2, #501	; 0x1f5
 800a716:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				display->drawFullScreenPopUp("Programma iniziato", 2000);
 800a71a:	1d3b      	adds	r3, r7, #4
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681c      	ldr	r4, [r3, #0]
 800a720:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800a724:	4618      	mov	r0, r3
 800a726:	f006 fb7d 	bl	8010e24 <_ZNSaIcEC1Ev>
 800a72a:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800a72e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800a732:	490c      	ldr	r1, [pc, #48]	; (800a764 <_ZN10SmartDryer12startProgramEh+0x9fc>)
 800a734:	4618      	mov	r0, r3
 800a736:	f006 fe3d 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a73a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800a73e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a742:	4619      	mov	r1, r3
 800a744:	4620      	mov	r0, r4
 800a746:	f7fa fbe7 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800a74a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800a74e:	4618      	mov	r0, r3
 800a750:	f006 fc99 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a754:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800a758:	4618      	mov	r0, r3
 800a75a:	f006 fb64 	bl	8010e26 <_ZNSaIcED1Ev>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a75e:	e0a9      	b.n	800a8b4 <_ZN10SmartDryer12startProgramEh+0xb4c>
 800a760:	08012544 	.word	0x08012544
 800a764:	08012558 	.word	0x08012558
//				ExitStartProgram = true;
//			}
		}
		else
		{
			if(!ProgramEnd)
 800a768:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800a76c:	f083 0301 	eor.w	r3, r3, #1
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 809f 	beq.w	800a8b6 <_ZN10SmartDryer12startProgramEh+0xb4e>
			{
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800a778:	f107 030c 	add.w	r3, r7, #12
 800a77c:	7899      	ldrb	r1, [r3, #2]
 800a77e:	1cfb      	adds	r3, r7, #3
 800a780:	781a      	ldrb	r2, [r3, #0]
 800a782:	1d3b      	adds	r3, r7, #4
 800a784:	6818      	ldr	r0, [r3, #0]
 800a786:	4613      	mov	r3, r2
 800a788:	005b      	lsls	r3, r3, #1
 800a78a:	4413      	add	r3, r2
 800a78c:	00db      	lsls	r3, r3, #3
 800a78e:	4403      	add	r3, r0
 800a790:	3358      	adds	r3, #88	; 0x58
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	4299      	cmp	r1, r3
 800a796:	f040 808e 	bne.w	800a8b6 <_ZN10SmartDryer12startProgramEh+0xb4e>
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800a79a:	f107 030c 	add.w	r3, r7, #12
 800a79e:	7859      	ldrb	r1, [r3, #1]
 800a7a0:	1cfb      	adds	r3, r7, #3
 800a7a2:	781a      	ldrb	r2, [r3, #0]
 800a7a4:	1d3b      	adds	r3, r7, #4
 800a7a6:	6818      	ldr	r0, [r3, #0]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	005b      	lsls	r3, r3, #1
 800a7ac:	4413      	add	r3, r2
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	4403      	add	r3, r0
 800a7b2:	3357      	adds	r3, #87	; 0x57
 800a7b4:	781b      	ldrb	r3, [r3, #0]
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800a7b6:	4299      	cmp	r1, r3
 800a7b8:	d17d      	bne.n	800a8b6 <_ZN10SmartDryer12startProgramEh+0xb4e>
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800a7ba:	f107 030c 	add.w	r3, r7, #12
 800a7be:	78d9      	ldrb	r1, [r3, #3]
 800a7c0:	1cfb      	adds	r3, r7, #3
 800a7c2:	781a      	ldrb	r2, [r3, #0]
 800a7c4:	1d3b      	adds	r3, r7, #4
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	005b      	lsls	r3, r3, #1
 800a7cc:	4413      	add	r3, r2
 800a7ce:	00db      	lsls	r3, r3, #3
 800a7d0:	4403      	add	r3, r0
 800a7d2:	3359      	adds	r3, #89	; 0x59
 800a7d4:	781b      	ldrb	r3, [r3, #0]
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800a7d6:	4299      	cmp	r1, r3
 800a7d8:	d16d      	bne.n	800a8b6 <_ZN10SmartDryer12startProgramEh+0xb4e>
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800a7da:	f107 030c 	add.w	r3, r7, #12
 800a7de:	7919      	ldrb	r1, [r3, #4]
 800a7e0:	1cfb      	adds	r3, r7, #3
 800a7e2:	781a      	ldrb	r2, [r3, #0]
 800a7e4:	1d3b      	adds	r3, r7, #4
 800a7e6:	6818      	ldr	r0, [r3, #0]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	005b      	lsls	r3, r3, #1
 800a7ec:	4413      	add	r3, r2
 800a7ee:	00db      	lsls	r3, r3, #3
 800a7f0:	4403      	add	r3, r0
 800a7f2:	335a      	adds	r3, #90	; 0x5a
 800a7f4:	781b      	ldrb	r3, [r3, #0]
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800a7f6:	4299      	cmp	r1, r3
 800a7f8:	d15d      	bne.n	800a8b6 <_ZN10SmartDryer12startProgramEh+0xb4e>
						ActualTime.year == dryerPrograms[WichProgram].endTime.year)
 800a7fa:	f107 030c 	add.w	r3, r7, #12
 800a7fe:	88d9      	ldrh	r1, [r3, #6]
 800a800:	1cfb      	adds	r3, r7, #3
 800a802:	781a      	ldrb	r2, [r3, #0]
 800a804:	1d3b      	adds	r3, r7, #4
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	4613      	mov	r3, r2
 800a80a:	005b      	lsls	r3, r3, #1
 800a80c:	4413      	add	r3, r2
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	4403      	add	r3, r0
 800a812:	335c      	adds	r3, #92	; 0x5c
 800a814:	881b      	ldrh	r3, [r3, #0]
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800a816:	4299      	cmp	r1, r3
 800a818:	d14d      	bne.n	800a8b6 <_ZN10SmartDryer12startProgramEh+0xb4e>
				{
					statusParam->programStarted = false;
 800a81a:	1d3b      	adds	r3, r7, #4
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a820:	2200      	movs	r2, #0
 800a822:	721a      	strb	r2, [r3, #8]
					statusParam->dryerOn = false;
 800a824:	1d3b      	adds	r3, r7, #4
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a82a:	2200      	movs	r2, #0
 800a82c:	701a      	strb	r2, [r3, #0]
					ledStatus = PROGRAM_END;
 800a82e:	1d3b      	adds	r3, r7, #4
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800a836:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
					ProgramEnd = true;
 800a83a:	2301      	movs	r3, #1
 800a83c:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
					display->drawFullScreenPopUp("Programma terminato", 2000);
 800a840:	1d3b      	adds	r3, r7, #4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681c      	ldr	r4, [r3, #0]
 800a846:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800a84a:	4618      	mov	r0, r3
 800a84c:	f006 faea 	bl	8010e24 <_ZNSaIcEC1Ev>
 800a850:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800a854:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800a858:	4941      	ldr	r1, [pc, #260]	; (800a960 <_ZN10SmartDryer12startProgramEh+0xbf8>)
 800a85a:	4618      	mov	r0, r3
 800a85c:	f006 fdaa 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a860:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800a864:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a868:	4619      	mov	r1, r3
 800a86a:	4620      	mov	r0, r4
 800a86c:	f7fa fb54 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800a870:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800a874:	4618      	mov	r0, r3
 800a876:	f006 fc06 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a87a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800a87e:	4618      	mov	r0, r3
 800a880:	f006 fad1 	bl	8010e26 <_ZNSaIcED1Ev>
					if(eepromEnabled)
 800a884:	1d3b      	adds	r3, r7, #4
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00d      	beq.n	800a8ac <_ZN10SmartDryer12startProgramEh+0xb44>
					{
						writeDefaultsDryerProgram(WichProgram);
 800a890:	1cfb      	adds	r3, r7, #3
 800a892:	781a      	ldrb	r2, [r3, #0]
 800a894:	1d3b      	adds	r3, r7, #4
 800a896:	4611      	mov	r1, r2
 800a898:	6818      	ldr	r0, [r3, #0]
 800a89a:	f7fb ff77 	bl	800678c <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
						saveDryerProgram(WichProgram);
 800a89e:	1cfb      	adds	r3, r7, #3
 800a8a0:	781a      	ldrb	r2, [r3, #0]
 800a8a2:	1d3b      	adds	r3, r7, #4
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	6818      	ldr	r0, [r3, #0]
 800a8a8:	f7fc f80c 	bl	80068c4 <_ZN10SmartDryer16saveDryerProgramEh>
					}
					ExitStartProgram = true;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
 800a8b2:	e000      	b.n	800a8b6 <_ZN10SmartDryer12startProgramEh+0xb4e>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a8b4:	bf00      	nop
				}
			}
		}
		peripheralsControl();
 800a8b6:	1d3b      	adds	r3, r7, #4
 800a8b8:	6818      	ldr	r0, [r3, #0]
 800a8ba:	f7fb fef7 	bl	80066ac <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, 500))
 800a8be:	1d3b      	adds	r3, r7, #4
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a8c8:	2101      	movs	r1, #1
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7f8 fd71 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00a      	beq.n	800a8ec <_ZN10SmartDryer12startProgramEh+0xb84>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800a8d6:	1d3b      	adds	r3, r7, #4
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8dc:	1d3b      	adds	r3, r7, #4
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	f7fb f874 	bl	80059d0 <_ZN13SerialMessage17isDeviceConnectedEv>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 800a8ec:	1d3b      	adds	r3, r7, #4
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8f2:	7a5b      	ldrb	r3, [r3, #9]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f43f ac4e 	beq.w	800a196 <_ZN10SmartDryer12startProgramEh+0x42e>
		{
			serialComunicationCtrl();
 800a8fa:	1d3b      	adds	r3, r7, #4
 800a8fc:	6818      	ldr	r0, [r3, #0]
 800a8fe:	f7fc fbd9 	bl	80070b4 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitStartProgram)
 800a902:	e448      	b.n	800a196 <_ZN10SmartDryer12startProgramEh+0x42e>
	String TempRead = "0C", TempSet = "0";
 800a904:	f107 0314 	add.w	r3, r7, #20
 800a908:	4618      	mov	r0, r3
 800a90a:	f006 fbbc 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a90e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a912:	4618      	mov	r0, r3
 800a914:	f006 fbb7 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 800a918:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a91c:	4618      	mov	r0, r3
 800a91e:	f006 fbb2 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a922:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a926:	4618      	mov	r0, r3
 800a928:	f006 fbad 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a92c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a930:	4618      	mov	r0, r3
 800a932:	f006 fba8 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a936:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a93a:	4618      	mov	r0, r3
 800a93c:	f006 fba3 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 800a940:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a944:	4618      	mov	r0, r3
 800a946:	f006 fb9e 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a94a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a94e:	4618      	mov	r0, r3
 800a950:	f006 fb99 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800a954:	bf00      	nop
 800a956:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd90      	pop	{r4, r7, pc}
 800a95e:	bf00      	nop
 800a960:	08012544 	.word	0x08012544

0800a964 <_ZN10SmartDryer3runEv>:

void SmartDryer::run()
{
 800a964:	b590      	push	{r4, r7, lr}
 800a966:	b08b      	sub	sp, #44	; 0x2c
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
	display->drawFullScreenPopUp("Smart Dryer", 1000);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681c      	ldr	r4, [r3, #0]
 800a970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a974:	4618      	mov	r0, r3
 800a976:	f006 fa55 	bl	8010e24 <_ZNSaIcEC1Ev>
 800a97a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a97e:	f107 030c 	add.w	r3, r7, #12
 800a982:	4936      	ldr	r1, [pc, #216]	; (800aa5c <_ZN10SmartDryer3runEv+0xf8>)
 800a984:	4618      	mov	r0, r3
 800a986:	f006 fd15 	bl	80113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a98a:	f107 030c 	add.w	r3, r7, #12
 800a98e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a992:	4619      	mov	r1, r3
 800a994:	4620      	mov	r0, r4
 800a996:	f7fa fabf 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800a99a:	f107 030c 	add.w	r3, r7, #12
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f006 fb71 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a9a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f006 fa3c 	bl	8010e26 <_ZNSaIcED1Ev>
	while(1)
	{
		switch(screen)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800a9b4:	2b09      	cmp	r3, #9
 800a9b6:	d84f      	bhi.n	800aa58 <_ZN10SmartDryer3runEv+0xf4>
 800a9b8:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <_ZN10SmartDryer3runEv+0x5c>)
 800a9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9be:	bf00      	nop
 800a9c0:	0800a9e9 	.word	0x0800a9e9
 800a9c4:	0800a9f1 	.word	0x0800a9f1
 800a9c8:	0800aa01 	.word	0x0800aa01
 800a9cc:	0800aa11 	.word	0x0800aa11
 800a9d0:	0800aa21 	.word	0x0800aa21
 800a9d4:	0800aa21 	.word	0x0800aa21
 800a9d8:	0800aa21 	.word	0x0800aa21
 800a9dc:	0800aa3d 	.word	0x0800aa3d
 800a9e0:	0800aa3d 	.word	0x0800aa3d
 800a9e4:	0800aa3d 	.word	0x0800aa3d
		{
			case NAV_MENU:
				navMenu();
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7fc ffb5 	bl	8007958 <_ZN10SmartDryer7navMenuEv>
				break;
 800a9ee:	e034      	b.n	800aa5a <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_TIME:
				changeTime();
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7fe f86d 	bl	8008ad0 <_ZN10SmartDryer10changeTimeEv>
				screen = NAV_MENU;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
				break;
 800a9fe:	e02c      	b.n	800aa5a <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_DATE:
				changeDate();
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7fe fa3d 	bl	8008e80 <_ZN10SmartDryer10changeDateEv>
				screen = NAV_MENU;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
				break;
 800aa0e:	e024      	b.n	800aa5a <_ZN10SmartDryer3runEv+0xf6>
			case SHOW_INFO:
				showInfo();
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f7fe fc8f 	bl	8009334 <_ZN10SmartDryer8showInfoEv>
				screen = NAV_MENU;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
				break;
 800aa1e:	e01c      	b.n	800aa5a <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_PROGRAM_1:
			case CHANGE_PROGRAM_2:
			case CHANGE_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				changeProgram(screen - CHANGE_PROGRAM_1);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800aa26:	3b04      	subs	r3, #4
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7fe fdff 	bl	8009630 <_ZN10SmartDryer13changeProgramEh>
				screen = NAV_MENU;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
				break;
 800aa3a:	e00e      	b.n	800aa5a <_ZN10SmartDryer3runEv+0xf6>
			case START_PROGRAM_1:
			case START_PROGRAM_2:
			case START_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				startProgram(screen - START_PROGRAM_1);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800aa42:	3b07      	subs	r3, #7
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff f98d 	bl	8009d68 <_ZN10SmartDryer12startProgramEh>
				screen = NAV_MENU;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
				break;
 800aa56:	e000      	b.n	800aa5a <_ZN10SmartDryer3runEv+0xf6>
			default:
				break;
 800aa58:	bf00      	nop
		switch(screen)
 800aa5a:	e7a8      	b.n	800a9ae <_ZN10SmartDryer3runEv+0x4a>
 800aa5c:	0801256c 	.word	0x0801256c

0800aa60 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f000 f83a 	bl	800aae4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800aa84:	6838      	ldr	r0, [r7, #0]
 800aa86:	f7f9 fac5 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f857 	bl	800ab42 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 800aa94:	bf00      	nop
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	10db      	asrs	r3, r3, #3
 800aab2:	4a04      	ldr	r2, [pc, #16]	; (800aac4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800aab4:	fb02 f303 	mul.w	r3, r2, r3
 800aab8:	4618      	mov	r0, r3
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bc80      	pop	{r7}
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	aaaaaaab 	.word	0xaaaaaaab

0800aac8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f862 	bl	800aba0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 800aadc:	bf00      	nop
 800aade:	3708      	adds	r7, #8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 f86e 	bl	800abd0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800aafe:	b480      	push	{r7}
 800ab00:	b083      	sub	sp, #12
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bc80      	pop	{r7}
 800ab10:	4770      	bx	lr

0800ab12 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	60f8      	str	r0, [r7, #12]
 800ab1a:	60b9      	str	r1, [r7, #8]
 800ab1c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800ab1e:	68b9      	ldr	r1, [r7, #8]
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 f87d 	bl	800ac20 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800ab26:	bf00      	nop
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bc80      	pop	{r7}
 800ab40:	4770      	bx	lr

0800ab42 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800ab42:	b5b0      	push	{r4, r5, r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d012      	beq.n	800ab7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800ab58:	687c      	ldr	r4, [r7, #4]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685d      	ldr	r5, [r3, #4]
 800ab5e:	6838      	ldr	r0, [r7, #0]
 800ab60:	f7ff ffe5 	bl	800ab2e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ab64:	4603      	mov	r3, r0
 800ab66:	461a      	mov	r2, r3
 800ab68:	4629      	mov	r1, r5
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 f865 	bl	800ac3a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	f103 0218 	add.w	r2, r3, #24
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800ab7c:	e00c      	b.n	800ab98 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f86e 	bl	800ac60 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800ab84:	4604      	mov	r4, r0
 800ab86:	6838      	ldr	r0, [r7, #0]
 800ab88:	f7ff ffd1 	bl	800ab2e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	461a      	mov	r2, r3
 800ab90:	4621      	mov	r1, r4
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f876 	bl	800ac84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 800ab98:	bf00      	nop
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bdb0      	pop	{r4, r5, r7, pc}

0800aba0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800aba0:	b590      	push	{r4, r7, lr}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685c      	ldr	r4, [r3, #4]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7ff ffa4 	bl	800aafe <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800abb6:	4603      	mov	r3, r0
 800abb8:	461a      	mov	r2, r3
 800abba:	4621      	mov	r1, r4
 800abbc:	6838      	ldr	r0, [r7, #0]
 800abbe:	f7ff ffa8 	bl	800ab12 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	605a      	str	r2, [r3, #4]
      }
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd90      	pop	{r4, r7, pc}

0800abd0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f8eb 	bl	800adb4 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	605a      	str	r2, [r3, #4]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	609a      	str	r2, [r3, #8]
	{ }
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b084      	sub	sp, #16
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	60f8      	str	r0, [r7, #12]
 800ac02:	60b9      	str	r1, [r7, #8]
 800ac04:	607a      	str	r2, [r7, #4]
	if (__p)
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d005      	beq.n	800ac18 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	68b9      	ldr	r1, [r7, #8]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 f8da 	bl	800adcc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 800ac18:	bf00      	nop
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f8e6 	bl	800adfe <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff ff71 	bl	800ab2e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	461a      	mov	r2, r3
 800ac50:	68b9      	ldr	r1, [r7, #8]
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f000 f8eb 	bl	800ae2e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 800ac58:	bf00      	nop
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	1d1a      	adds	r2, r3, #4
 800ac6c:	f107 030c 	add.w	r3, r7, #12
 800ac70:	4611      	mov	r1, r2
 800ac72:	4618      	mov	r0, r3
 800ac74:	f000 f8f5 	bl	800ae62 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
	...

0800ac84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800ac84:	b5b0      	push	{r4, r5, r7, lr}
 800ac86:	b08a      	sub	sp, #40	; 0x28
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800ac90:	4a46      	ldr	r2, [pc, #280]	; (800adac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 800ac92:	2101      	movs	r1, #1
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f000 f8f3 	bl	800ae80 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 800ac9a:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f000 f937 	bl	800af10 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800aca2:	4603      	mov	r3, r0
 800aca4:	617b      	str	r3, [r7, #20]
 800aca6:	f107 0214 	add.w	r2, r7, #20
 800acaa:	f107 0308 	add.w	r3, r7, #8
 800acae:	4611      	mov	r1, r2
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 f93d 	bl	800af30 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 800acb6:	4603      	mov	r3, r0
 800acb8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 f952 	bl	800af68 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800acc4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800acca:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800accc:	6a3a      	ldr	r2, [r7, #32]
 800acce:	4613      	mov	r3, r2
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	4413      	add	r3, r2
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	189d      	adds	r5, r3, r2
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff ff26 	bl	800ab2e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ace2:	4603      	mov	r3, r0
 800ace4:	461a      	mov	r2, r3
 800ace6:	4629      	mov	r1, r5
 800ace8:	4620      	mov	r0, r4
 800acea:	f7ff ffa6 	bl	800ac3a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800acee:	2300      	movs	r3, #0
 800acf0:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681c      	ldr	r4, [r3, #0]
 800acf6:	f107 0308 	add.w	r3, r7, #8
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 f948 	bl	800af90 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800ad00:	4603      	mov	r3, r0
 800ad02:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff fef9 	bl	800aafe <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800ad0c:	4603      	mov	r3, r0
	  __new_finish
 800ad0e:	69fa      	ldr	r2, [r7, #28]
 800ad10:	4629      	mov	r1, r5
 800ad12:	4620      	mov	r0, r4
 800ad14:	f000 f946 	bl	800afa4 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800ad18:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	3318      	adds	r3, #24
 800ad1e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800ad20:	f107 0308 	add.w	r3, r7, #8
 800ad24:	4618      	mov	r0, r3
 800ad26:	f000 f933 	bl	800af90 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	681c      	ldr	r4, [r3, #0]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff fee2 	bl	800aafe <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800ad3a:	4603      	mov	r3, r0
	  __new_finish
 800ad3c:	69ba      	ldr	r2, [r7, #24]
 800ad3e:	4629      	mov	r1, r5
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 f92f 	bl	800afa4 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800ad46:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681c      	ldr	r4, [r3, #0]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7ff fed3 	bl	800aafe <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800ad58:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f7ff fed7 	bl	800ab12 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800ad6e:	461a      	mov	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	10db      	asrs	r3, r3, #3
 800ad78:	4a0d      	ldr	r2, [pc, #52]	; (800adb0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 800ad7a:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f7ff ff3b 	bl	800abfa <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	69fa      	ldr	r2, [r7, #28]
 800ad88:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ad90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad92:	4613      	mov	r3, r2
 800ad94:	005b      	lsls	r3, r3, #1
 800ad96:	4413      	add	r3, r2
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	441a      	add	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	609a      	str	r2, [r3, #8]
    }
 800ada4:	bf00      	nop
 800ada6:	3728      	adds	r7, #40	; 0x28
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bdb0      	pop	{r4, r5, r7, pc}
 800adac:	08012578 	.word	0x08012578
 800adb0:	aaaaaaab 	.word	0xaaaaaaab

0800adb4 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f90a 	bl	800afd6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4618      	mov	r0, r3
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	68b9      	ldr	r1, [r7, #8]
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f000 f904 	bl	800afea <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 800ade2:	bf00      	nop
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800adea:	b480      	push	{r7}
 800adec:	b083      	sub	sp, #12
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4618      	mov	r0, r3
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bc80      	pop	{r7}
 800adfc:	4770      	bx	lr

0800adfe <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b082      	sub	sp, #8
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d00a      	beq.n	800ae26 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff ffea 	bl	800adea <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800ae16:	4603      	mov	r3, r0
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 f8f3 	bl	800b004 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3318      	adds	r3, #24
 800ae22:	607b      	str	r3, [r7, #4]
 800ae24:	e7f0      	b.n	800ae08 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 800ae26:	bf00      	nop
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800ae2e:	b590      	push	{r4, r7, lr}
 800ae30:	b085      	sub	sp, #20
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	60f8      	str	r0, [r7, #12]
 800ae36:	60b9      	str	r1, [r7, #8]
 800ae38:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7ff fe77 	bl	800ab2e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ae40:	4604      	mov	r4, r0
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	4619      	mov	r1, r3
 800ae46:	2018      	movs	r0, #24
 800ae48:	f7fa ff91 	bl	8005d6e <_ZnwjPv>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x2c>
 800ae52:	4621      	mov	r1, r4
 800ae54:	4618      	mov	r0, r3
 800ae56:	f006 f8fc 	bl	8011052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800ae5a:	bf00      	nop
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd90      	pop	{r4, r7, pc}

0800ae62 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4618      	mov	r0, r3
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bc80      	pop	{r7}
 800ae7e:	4770      	bx	lr

0800ae80 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ae80:	b590      	push	{r4, r7, lr}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f000 f8c4 	bl	800b01a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800ae92:	4604      	mov	r4, r0
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f7ff fe01 	bl	800aa9c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	1ae2      	subs	r2, r4, r3
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	bf34      	ite	cc
 800aea4:	2301      	movcc	r3, #1
 800aea6:	2300      	movcs	r3, #0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f005 ffc2 	bl	8010e3a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f7ff fdf0 	bl	800aa9c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800aebc:	4604      	mov	r4, r0
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7ff fdec 	bl	800aa9c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800aec4:	4603      	mov	r3, r0
 800aec6:	613b      	str	r3, [r7, #16]
 800aec8:	f107 0208 	add.w	r2, r7, #8
 800aecc:	f107 0310 	add.w	r3, r7, #16
 800aed0:	4611      	mov	r1, r2
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f8b2 	bl	800b03c <_ZSt3maxIjERKT_S2_S2_>
 800aed8:	4603      	mov	r3, r0
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4423      	add	r3, r4
 800aede:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f7ff fddb 	bl	800aa9c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800aee6:	4602      	mov	r2, r0
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d306      	bcc.n	800aefc <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f000 f893 	bl	800b01a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800aef4:	4602      	mov	r2, r0
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d904      	bls.n	800af06 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 f88c 	bl	800b01a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800af02:	4603      	mov	r3, r0
 800af04:	e000      	b.n	800af08 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 800af06:	697b      	ldr	r3, [r7, #20]
      }
 800af08:	4618      	mov	r0, r3
 800af0a:	371c      	adds	r7, #28
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd90      	pop	{r4, r7, pc}

0800af10 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	f107 030c 	add.w	r3, r7, #12
 800af1e:	4611      	mov	r1, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff ff9e 	bl	800ae62 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800af30:	b590      	push	{r4, r7, lr}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f828 	bl	800af90 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800af40:	4603      	mov	r3, r0
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	461c      	mov	r4, r3
 800af46:	6838      	ldr	r0, [r7, #0]
 800af48:	f000 f822 	bl	800af90 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800af4c:	4603      	mov	r3, r0
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	1ae3      	subs	r3, r4, r3
 800af52:	10db      	asrs	r3, r3, #3
 800af54:	4a03      	ldr	r2, [pc, #12]	; (800af64 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 800af56:	fb02 f303 	mul.w	r3, r2, r3
 800af5a:	4618      	mov	r0, r3
 800af5c:	370c      	adds	r7, #12
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd90      	pop	{r4, r7, pc}
 800af62:	bf00      	nop
 800af64:	aaaaaaab 	.word	0xaaaaaaab

0800af68 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d006      	beq.n	800af86 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f000 f870 	bl	800b062 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 800af82:	4603      	mov	r3, r0
 800af84:	e000      	b.n	800af88 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 800af86:	2300      	movs	r3, #0
      }
 800af88:	4618      	mov	r0, r3
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4618      	mov	r0, r3
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bc80      	pop	{r7}
 800afa2:	4770      	bx	lr

0800afa4 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800afa4:	b590      	push	{r4, r7, lr}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
 800afb0:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f000 f864 	bl	800b080 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800afb8:	4604      	mov	r4, r0
 800afba:	68b8      	ldr	r0, [r7, #8]
 800afbc:	f000 f860 	bl	800b080 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800afc0:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 f869 	bl	800b09e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800afcc:	4603      	mov	r3, r0
    }
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd90      	pop	{r4, r7, pc}

0800afd6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800afd6:	b480      	push	{r7}
 800afd8:	b083      	sub	sp, #12
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4618      	mov	r0, r3
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr

0800afea <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800afea:	b580      	push	{r7, lr}
 800afec:	b084      	sub	sp, #16
 800afee:	af00      	add	r7, sp, #0
 800aff0:	60f8      	str	r0, [r7, #12]
 800aff2:	60b9      	str	r1, [r7, #8]
 800aff4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800aff6:	68b8      	ldr	r0, [r7, #8]
 800aff8:	f005 ff12 	bl	8010e20 <_ZdlPv>
      }
 800affc:	bf00      	nop
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f006 f83a 	bl	8011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b082      	sub	sp, #8
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4618      	mov	r0, r3
 800b026:	f000 f857 	bl	800b0d8 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b02a:	4603      	mov	r3, r0
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 f847 	bl	800b0c0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800b032:	4603      	mov	r3, r0
 800b034:	4618      	mov	r0, r3
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d201      	bcs.n	800b056 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	e000      	b.n	800b058 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800b056:	687b      	ldr	r3, [r7, #4]
    }
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bc80      	pop	{r7}
 800b060:	4770      	bx	lr

0800b062 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800b062:	b580      	push	{r7, lr}
 800b064:	b082      	sub	sp, #8
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b06c:	2200      	movs	r2, #0
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f83b 	bl	800b0ec <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800b076:	4603      	mov	r3, r0
 800b078:	4618      	mov	r0, r3
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800b088:	f107 030c 	add.w	r3, r7, #12
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 f84d 	bl	800b12e <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	60f8      	str	r0, [r7, #12]
 800b0a6:	60b9      	str	r1, [r7, #8]
 800b0a8:	607a      	str	r2, [r7, #4]
 800b0aa:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	68b9      	ldr	r1, [r7, #8]
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 f84a 	bl	800b14a <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f851 	bl	800b170 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bc80      	pop	{r7}
 800b0ea:	4770      	bx	lr

0800b0ec <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f000 f839 	bl	800b170 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b0fe:	4602      	mov	r2, r0
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	4293      	cmp	r3, r2
 800b104:	bf8c      	ite	hi
 800b106:	2301      	movhi	r3, #1
 800b108:	2300      	movls	r3, #0
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800b110:	f005 fe8a 	bl	8010e28 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	4613      	mov	r3, r2
 800b118:	005b      	lsls	r3, r3, #1
 800b11a:	4413      	add	r3, r2
 800b11c:	00db      	lsls	r3, r3, #3
 800b11e:	4618      	mov	r0, r3
 800b120:	f005 fe64 	bl	8010dec <_Znwj>
 800b124:	4603      	mov	r3, r0
      }
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800b12e:	b480      	push	{r7}
 800b130:	b083      	sub	sp, #12
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4618      	mov	r0, r3
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	bc80      	pop	{r7}
 800b148:	4770      	bx	lr

0800b14a <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b086      	sub	sp, #24
 800b14e:	af00      	add	r7, sp, #0
 800b150:	60f8      	str	r0, [r7, #12]
 800b152:	60b9      	str	r1, [r7, #8]
 800b154:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b156:	2301      	movs	r3, #1
 800b158:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	68b9      	ldr	r1, [r7, #8]
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f000 f812 	bl	800b188 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800b164:	4603      	mov	r3, r0
    }
 800b166:	4618      	mov	r0, r3
 800b168:	3718      	adds	r7, #24
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
	...

0800b170 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800b178:	4b02      	ldr	r3, [pc, #8]	; (800b184 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800b17a:	4618      	mov	r0, r3
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	bc80      	pop	{r7}
 800b182:	4770      	bx	lr
 800b184:	0aaaaaaa 	.word	0x0aaaaaaa

0800b188 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b188:	b590      	push	{r4, r7, lr}
 800b18a:	b087      	sub	sp, #28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800b198:	f107 0208 	add.w	r2, r7, #8
 800b19c:	f107 030c 	add.w	r3, r7, #12
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f81f 	bl	800b1e6 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d016      	beq.n	800b1dc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800b1ae:	6978      	ldr	r0, [r7, #20]
 800b1b0:	f7ff fe1b 	bl	800adea <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	f107 030c 	add.w	r3, r7, #12
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 f834 	bl	800b228 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 f83a 	bl	800b23e <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800b1ca:	f107 030c 	add.w	r3, r7, #12
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 f81a 	bl	800b208 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	3318      	adds	r3, #24
 800b1d8:	617b      	str	r3, [r7, #20]
 800b1da:	e7dd      	b.n	800b198 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800b1dc:	697b      	ldr	r3, [r7, #20]
	}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	371c      	adds	r7, #28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd90      	pop	{r4, r7, pc}

0800b1e6 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b082      	sub	sp, #8
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f83c 	bl	800b270 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	f083 0301 	eor.w	r3, r3, #1
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	4618      	mov	r0, r3
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f103 0218 	add.w	r2, r3, #24
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	601a      	str	r2, [r3, #0]
	return *this;
 800b21c:	687b      	ldr	r3, [r7, #4]
      }
 800b21e:	4618      	mov	r0, r3
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	bc80      	pop	{r7}
 800b226:	4770      	bx	lr

0800b228 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4618      	mov	r0, r3
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	bc80      	pop	{r7}
 800b23c:	4770      	bx	lr

0800b23e <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800b23e:	b590      	push	{r4, r7, lr}
 800b240:	b083      	sub	sp, #12
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800b248:	6838      	ldr	r0, [r7, #0]
 800b24a:	f7ff fc70 	bl	800ab2e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b24e:	4604      	mov	r4, r0
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4619      	mov	r1, r3
 800b254:	2018      	movs	r0, #24
 800b256:	f7fa fd8a 	bl	8005d6e <_ZnwjPv>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d003      	beq.n	800b268 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800b260:	4621      	mov	r1, r4
 800b262:	4618      	mov	r0, r3
 800b264:	f005 fef5 	bl	8011052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd90      	pop	{r4, r7, pc}

0800b270 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800b270:	b590      	push	{r4, r7, lr}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f80e 	bl	800b29c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b280:	4604      	mov	r4, r0
 800b282:	6838      	ldr	r0, [r7, #0]
 800b284:	f000 f80a 	bl	800b29c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b288:	4603      	mov	r3, r0
 800b28a:	429c      	cmp	r4, r3
 800b28c:	bf0c      	ite	eq
 800b28e:	2301      	moveq	r3, #1
 800b290:	2300      	movne	r3, #0
 800b292:	b2db      	uxtb	r3, r3
 800b294:	4618      	mov	r0, r3
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd90      	pop	{r4, r7, pc}

0800b29c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bc80      	pop	{r7}
 800b2b0:	4770      	bx	lr
	...

0800b2b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800b2ba:	1d3b      	adds	r3, r7, #4
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	605a      	str	r2, [r3, #4]
 800b2c2:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800b2c4:	4b18      	ldr	r3, [pc, #96]	; (800b328 <MX_ADC1_Init+0x74>)
 800b2c6:	4a19      	ldr	r2, [pc, #100]	; (800b32c <MX_ADC1_Init+0x78>)
 800b2c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b2ca:	4b17      	ldr	r3, [pc, #92]	; (800b328 <MX_ADC1_Init+0x74>)
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b2d0:	4b15      	ldr	r3, [pc, #84]	; (800b328 <MX_ADC1_Init+0x74>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b2d6:	4b14      	ldr	r3, [pc, #80]	; (800b328 <MX_ADC1_Init+0x74>)
 800b2d8:	2200      	movs	r2, #0
 800b2da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b2dc:	4b12      	ldr	r3, [pc, #72]	; (800b328 <MX_ADC1_Init+0x74>)
 800b2de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800b2e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b2e4:	4b10      	ldr	r3, [pc, #64]	; (800b328 <MX_ADC1_Init+0x74>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800b2ea:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <MX_ADC1_Init+0x74>)
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b2f0:	480d      	ldr	r0, [pc, #52]	; (800b328 <MX_ADC1_Init+0x74>)
 800b2f2:	f000 fe75 	bl	800bfe0 <HAL_ADC_Init>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800b2fc:	f000 f9d4 	bl	800b6a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800b300:	2300      	movs	r3, #0
 800b302:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b304:	2301      	movs	r3, #1
 800b306:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b308:	2300      	movs	r3, #0
 800b30a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b30c:	1d3b      	adds	r3, r7, #4
 800b30e:	4619      	mov	r1, r3
 800b310:	4805      	ldr	r0, [pc, #20]	; (800b328 <MX_ADC1_Init+0x74>)
 800b312:	f000 ffcf 	bl	800c2b4 <HAL_ADC_ConfigChannel>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800b31c:	f000 f9c4 	bl	800b6a8 <Error_Handler>
  }

}
 800b320:	bf00      	nop
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	200006a8 	.word	0x200006a8
 800b32c:	40012400 	.word	0x40012400

0800b330 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b088      	sub	sp, #32
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b338:	f107 0310 	add.w	r3, r7, #16
 800b33c:	2200      	movs	r2, #0
 800b33e:	601a      	str	r2, [r3, #0]
 800b340:	605a      	str	r2, [r3, #4]
 800b342:	609a      	str	r2, [r3, #8]
 800b344:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a14      	ldr	r2, [pc, #80]	; (800b39c <HAL_ADC_MspInit+0x6c>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d121      	bne.n	800b394 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b350:	4b13      	ldr	r3, [pc, #76]	; (800b3a0 <HAL_ADC_MspInit+0x70>)
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	4a12      	ldr	r2, [pc, #72]	; (800b3a0 <HAL_ADC_MspInit+0x70>)
 800b356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b35a:	6193      	str	r3, [r2, #24]
 800b35c:	4b10      	ldr	r3, [pc, #64]	; (800b3a0 <HAL_ADC_MspInit+0x70>)
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b364:	60fb      	str	r3, [r7, #12]
 800b366:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b368:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <HAL_ADC_MspInit+0x70>)
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	4a0c      	ldr	r2, [pc, #48]	; (800b3a0 <HAL_ADC_MspInit+0x70>)
 800b36e:	f043 0304 	orr.w	r3, r3, #4
 800b372:	6193      	str	r3, [r2, #24]
 800b374:	4b0a      	ldr	r3, [pc, #40]	; (800b3a0 <HAL_ADC_MspInit+0x70>)
 800b376:	699b      	ldr	r3, [r3, #24]
 800b378:	f003 0304 	and.w	r3, r3, #4
 800b37c:	60bb      	str	r3, [r7, #8]
 800b37e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 800b380:	2301      	movs	r3, #1
 800b382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b384:	2303      	movs	r3, #3
 800b386:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 800b388:	f107 0310 	add.w	r3, r7, #16
 800b38c:	4619      	mov	r1, r3
 800b38e:	4805      	ldr	r0, [pc, #20]	; (800b3a4 <HAL_ADC_MspInit+0x74>)
 800b390:	f001 fe30 	bl	800cff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800b394:	bf00      	nop
 800b396:	3720      	adds	r7, #32
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	40012400 	.word	0x40012400
 800b3a0:	40021000 	.word	0x40021000
 800b3a4:	40010800 	.word	0x40010800

0800b3a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3ae:	f107 0308 	add.w	r3, r7, #8
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	605a      	str	r2, [r3, #4]
 800b3b8:	609a      	str	r2, [r3, #8]
 800b3ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3bc:	4b28      	ldr	r3, [pc, #160]	; (800b460 <MX_GPIO_Init+0xb8>)
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	4a27      	ldr	r2, [pc, #156]	; (800b460 <MX_GPIO_Init+0xb8>)
 800b3c2:	f043 0304 	orr.w	r3, r3, #4
 800b3c6:	6193      	str	r3, [r2, #24]
 800b3c8:	4b25      	ldr	r3, [pc, #148]	; (800b460 <MX_GPIO_Init+0xb8>)
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	607b      	str	r3, [r7, #4]
 800b3d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3d4:	4b22      	ldr	r3, [pc, #136]	; (800b460 <MX_GPIO_Init+0xb8>)
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	4a21      	ldr	r2, [pc, #132]	; (800b460 <MX_GPIO_Init+0xb8>)
 800b3da:	f043 0308 	orr.w	r3, r3, #8
 800b3de:	6193      	str	r3, [r2, #24]
 800b3e0:	4b1f      	ldr	r3, [pc, #124]	; (800b460 <MX_GPIO_Init+0xb8>)
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	f003 0308 	and.w	r3, r3, #8
 800b3e8:	603b      	str	r3, [r7, #0]
 800b3ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	210c      	movs	r1, #12
 800b3f0:	481c      	ldr	r0, [pc, #112]	; (800b464 <MX_GPIO_Init+0xbc>)
 800b3f2:	f002 f85f 	bl	800d4b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f641 6150 	movw	r1, #7760	; 0x1e50
 800b3fc:	4819      	ldr	r0, [pc, #100]	; (800b464 <MX_GPIO_Init+0xbc>)
 800b3fe:	f002 f859 	bl	800d4b4 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 800b402:	f240 435c 	movw	r3, #1116	; 0x45c
 800b406:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b408:	2301      	movs	r3, #1
 800b40a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b40c:	2300      	movs	r3, #0
 800b40e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b410:	2303      	movs	r3, #3
 800b412:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b414:	f107 0308 	add.w	r3, r7, #8
 800b418:	4619      	mov	r1, r3
 800b41a:	4812      	ldr	r0, [pc, #72]	; (800b464 <MX_GPIO_Init+0xbc>)
 800b41c:	f001 fdea 	bl	800cff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 800b420:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b426:	2300      	movs	r3, #0
 800b428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b42a:	2301      	movs	r3, #1
 800b42c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b42e:	f107 0308 	add.w	r3, r7, #8
 800b432:	4619      	mov	r1, r3
 800b434:	480c      	ldr	r0, [pc, #48]	; (800b468 <MX_GPIO_Init+0xc0>)
 800b436:	f001 fddd 	bl	800cff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 800b43a:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800b43e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b440:	2301      	movs	r3, #1
 800b442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b444:	2300      	movs	r3, #0
 800b446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b448:	2302      	movs	r3, #2
 800b44a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b44c:	f107 0308 	add.w	r3, r7, #8
 800b450:	4619      	mov	r1, r3
 800b452:	4804      	ldr	r0, [pc, #16]	; (800b464 <MX_GPIO_Init+0xbc>)
 800b454:	f001 fdce 	bl	800cff4 <HAL_GPIO_Init>

}
 800b458:	bf00      	nop
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	40021000 	.word	0x40021000
 800b464:	40010800 	.word	0x40010800
 800b468:	40010c00 	.word	0x40010c00

0800b46c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800b470:	4b12      	ldr	r3, [pc, #72]	; (800b4bc <MX_I2C1_Init+0x50>)
 800b472:	4a13      	ldr	r2, [pc, #76]	; (800b4c0 <MX_I2C1_Init+0x54>)
 800b474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800b476:	4b11      	ldr	r3, [pc, #68]	; (800b4bc <MX_I2C1_Init+0x50>)
 800b478:	4a12      	ldr	r2, [pc, #72]	; (800b4c4 <MX_I2C1_Init+0x58>)
 800b47a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b47c:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <MX_I2C1_Init+0x50>)
 800b47e:	2200      	movs	r2, #0
 800b480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b482:	4b0e      	ldr	r3, [pc, #56]	; (800b4bc <MX_I2C1_Init+0x50>)
 800b484:	2200      	movs	r2, #0
 800b486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b488:	4b0c      	ldr	r3, [pc, #48]	; (800b4bc <MX_I2C1_Init+0x50>)
 800b48a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b48e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b490:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <MX_I2C1_Init+0x50>)
 800b492:	2200      	movs	r2, #0
 800b494:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b496:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <MX_I2C1_Init+0x50>)
 800b498:	2200      	movs	r2, #0
 800b49a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b49c:	4b07      	ldr	r3, [pc, #28]	; (800b4bc <MX_I2C1_Init+0x50>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b4a2:	4b06      	ldr	r3, [pc, #24]	; (800b4bc <MX_I2C1_Init+0x50>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b4a8:	4804      	ldr	r0, [pc, #16]	; (800b4bc <MX_I2C1_Init+0x50>)
 800b4aa:	f002 f85b 	bl	800d564 <HAL_I2C_Init>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800b4b4:	f000 f8f8 	bl	800b6a8 <Error_Handler>
  }

}
 800b4b8:	bf00      	nop
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	200006d8 	.word	0x200006d8
 800b4c0:	40005400 	.word	0x40005400
 800b4c4:	000186a0 	.word	0x000186a0

0800b4c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08a      	sub	sp, #40	; 0x28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4d0:	f107 0314 	add.w	r3, r7, #20
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	605a      	str	r2, [r3, #4]
 800b4da:	609a      	str	r2, [r3, #8]
 800b4dc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a1d      	ldr	r2, [pc, #116]	; (800b558 <HAL_I2C_MspInit+0x90>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d132      	bne.n	800b54e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4e8:	4b1c      	ldr	r3, [pc, #112]	; (800b55c <HAL_I2C_MspInit+0x94>)
 800b4ea:	699b      	ldr	r3, [r3, #24]
 800b4ec:	4a1b      	ldr	r2, [pc, #108]	; (800b55c <HAL_I2C_MspInit+0x94>)
 800b4ee:	f043 0308 	orr.w	r3, r3, #8
 800b4f2:	6193      	str	r3, [r2, #24]
 800b4f4:	4b19      	ldr	r3, [pc, #100]	; (800b55c <HAL_I2C_MspInit+0x94>)
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	f003 0308 	and.w	r3, r3, #8
 800b4fc:	613b      	str	r3, [r7, #16]
 800b4fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800b500:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b506:	2312      	movs	r3, #18
 800b508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b50a:	2303      	movs	r3, #3
 800b50c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b50e:	f107 0314 	add.w	r3, r7, #20
 800b512:	4619      	mov	r1, r3
 800b514:	4812      	ldr	r0, [pc, #72]	; (800b560 <HAL_I2C_MspInit+0x98>)
 800b516:	f001 fd6d 	bl	800cff4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800b51a:	4b12      	ldr	r3, [pc, #72]	; (800b564 <HAL_I2C_MspInit+0x9c>)
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	627b      	str	r3, [r7, #36]	; 0x24
 800b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b522:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800b526:	627b      	str	r3, [r7, #36]	; 0x24
 800b528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52a:	f043 0302 	orr.w	r3, r3, #2
 800b52e:	627b      	str	r3, [r7, #36]	; 0x24
 800b530:	4a0c      	ldr	r2, [pc, #48]	; (800b564 <HAL_I2C_MspInit+0x9c>)
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b536:	4b09      	ldr	r3, [pc, #36]	; (800b55c <HAL_I2C_MspInit+0x94>)
 800b538:	69db      	ldr	r3, [r3, #28]
 800b53a:	4a08      	ldr	r2, [pc, #32]	; (800b55c <HAL_I2C_MspInit+0x94>)
 800b53c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b540:	61d3      	str	r3, [r2, #28]
 800b542:	4b06      	ldr	r3, [pc, #24]	; (800b55c <HAL_I2C_MspInit+0x94>)
 800b544:	69db      	ldr	r3, [r3, #28]
 800b546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b54a:	60fb      	str	r3, [r7, #12]
 800b54c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800b54e:	bf00      	nop
 800b550:	3728      	adds	r7, #40	; 0x28
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	40005400 	.word	0x40005400
 800b55c:	40021000 	.word	0x40021000
 800b560:	40010c00 	.word	0x40010c00
 800b564:	40010000 	.word	0x40010000

0800b568 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800b568:	b598      	push	{r3, r4, r7, lr}
 800b56a:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800b56c:	f000 fcb4 	bl	800bed8 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 800b570:	f000 f836 	bl	800b5e0 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800b574:	f7ff ff18 	bl	800b3a8 <MX_GPIO_Init>
	MX_ADC1_Init();
 800b578:	f7ff fe9c 	bl	800b2b4 <MX_ADC1_Init>
	MX_I2C1_Init();
 800b57c:	f7ff ff76 	bl	800b46c <MX_I2C1_Init>
	MX_SPI1_Init();
 800b580:	f000 f8a2 	bl	800b6c8 <MX_SPI1_Init>
	MX_TIM2_Init();
 800b584:	f000 fb8e 	bl	800bca4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800b588:	f000 fbf4 	bl	800bd74 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 800b58c:	4812      	ldr	r0, [pc, #72]	; (800b5d8 <main+0x70>)
 800b58e:	f004 fa47 	bl	800fa20 <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 800b592:	20d0      	movs	r0, #208	; 0xd0
 800b594:	f005 fc2a 	bl	8010dec <_Znwj>
 800b598:	4603      	mov	r3, r0
 800b59a:	461c      	mov	r4, r3
 800b59c:	4620      	mov	r0, r4
 800b59e:	f7fa fc45 	bl	8005e2c <_ZN10SmartDryerC1Ev>
 800b5a2:	4b0e      	ldr	r3, [pc, #56]	; (800b5dc <main+0x74>)
 800b5a4:	601c      	str	r4, [r3, #0]

	DryerApplication->setup();
 800b5a6:	4b0d      	ldr	r3, [pc, #52]	; (800b5dc <main+0x74>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fc fce2 	bl	8007f74 <_ZN10SmartDryer5setupEv>

	if(DryerApplication->enableTest)
 800b5b0:	4b0a      	ldr	r3, [pc, #40]	; (800b5dc <main+0x74>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d005      	beq.n	800b5c8 <main+0x60>
	{
		DryerApplication->test();
 800b5bc:	4b07      	ldr	r3, [pc, #28]	; (800b5dc <main+0x74>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fc fccd 	bl	8007f60 <_ZN10SmartDryer4testEv>
 800b5c6:	e004      	b.n	800b5d2 <main+0x6a>
	}
	else
	{
		DryerApplication->run();
 800b5c8:	4b04      	ldr	r3, [pc, #16]	; (800b5dc <main+0x74>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7ff f9c9 	bl	800a964 <_ZN10SmartDryer3runEv>
	}
}
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	bd98      	pop	{r3, r4, r7, pc}
 800b5d8:	20000784 	.word	0x20000784
 800b5dc:	20000694 	.word	0x20000694

0800b5e0 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b094      	sub	sp, #80	; 0x50
 800b5e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b5e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b5ea:	2228      	movs	r2, #40	; 0x28
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f006 f82d 	bl	801164e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b5f4:	f107 0314 	add.w	r3, r7, #20
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	605a      	str	r2, [r3, #4]
 800b5fe:	609a      	str	r2, [r3, #8]
 800b600:	60da      	str	r2, [r3, #12]
 800b602:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b604:	1d3b      	adds	r3, r7, #4
 800b606:	2200      	movs	r2, #0
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	605a      	str	r2, [r3, #4]
 800b60c:	609a      	str	r2, [r3, #8]
 800b60e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b610:	2302      	movs	r3, #2
 800b612:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b614:	2301      	movs	r3, #1
 800b616:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b618:	2310      	movs	r3, #16
 800b61a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b61c:	2302      	movs	r3, #2
 800b61e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800b620:	2300      	movs	r3, #0
 800b622:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b624:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b628:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b62a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b62e:	4618      	mov	r0, r3
 800b630:	f002 ffd6 	bl	800e5e0 <HAL_RCC_OscConfig>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	bf14      	ite	ne
 800b63a:	2301      	movne	r3, #1
 800b63c:	2300      	moveq	r3, #0
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 800b644:	f000 f830 	bl	800b6a8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b648:	230f      	movs	r3, #15
 800b64a:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b64c:	2302      	movs	r3, #2
 800b64e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b650:	2300      	movs	r3, #0
 800b652:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b654:	2300      	movs	r3, #0
 800b656:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b658:	2300      	movs	r3, #0
 800b65a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800b65c:	f107 0314 	add.w	r3, r7, #20
 800b660:	2100      	movs	r1, #0
 800b662:	4618      	mov	r0, r3
 800b664:	f003 fb2c 	bl	800ecc0 <HAL_RCC_ClockConfig>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	bf14      	ite	ne
 800b66e:	2301      	movne	r3, #1
 800b670:	2300      	moveq	r3, #0
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 800b678:	f000 f816 	bl	800b6a8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800b67c:	2302      	movs	r3, #2
 800b67e:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800b680:	2300      	movs	r3, #0
 800b682:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b684:	1d3b      	adds	r3, r7, #4
 800b686:	4618      	mov	r0, r3
 800b688:	f003 fd5c 	bl	800f144 <HAL_RCCEx_PeriphCLKConfig>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	bf14      	ite	ne
 800b692:	2301      	movne	r3, #1
 800b694:	2300      	moveq	r3, #0
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 800b69c:	f000 f804 	bl	800b6a8 <Error_Handler>
	}
}
 800b6a0:	bf00      	nop
 800b6a2:	3750      	adds	r7, #80	; 0x50
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800b6ac:	bf00      	nop
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bc80      	pop	{r7}
 800b6b2:	4770      	bx	lr

0800b6b4 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800b6be:	bf00      	nop
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bc80      	pop	{r7}
 800b6c6:	4770      	bx	lr

0800b6c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800b6cc:	4b18      	ldr	r3, [pc, #96]	; (800b730 <MX_SPI1_Init+0x68>)
 800b6ce:	4a19      	ldr	r2, [pc, #100]	; (800b734 <MX_SPI1_Init+0x6c>)
 800b6d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b6d2:	4b17      	ldr	r3, [pc, #92]	; (800b730 <MX_SPI1_Init+0x68>)
 800b6d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b6d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800b6da:	4b15      	ldr	r3, [pc, #84]	; (800b730 <MX_SPI1_Init+0x68>)
 800b6dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b6e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800b6e2:	4b13      	ldr	r3, [pc, #76]	; (800b730 <MX_SPI1_Init+0x68>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b6e8:	4b11      	ldr	r3, [pc, #68]	; (800b730 <MX_SPI1_Init+0x68>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b6ee:	4b10      	ldr	r3, [pc, #64]	; (800b730 <MX_SPI1_Init+0x68>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800b6f4:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <MX_SPI1_Init+0x68>)
 800b6f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800b6fc:	4b0c      	ldr	r3, [pc, #48]	; (800b730 <MX_SPI1_Init+0x68>)
 800b6fe:	2228      	movs	r2, #40	; 0x28
 800b700:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b702:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <MX_SPI1_Init+0x68>)
 800b704:	2200      	movs	r2, #0
 800b706:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b708:	4b09      	ldr	r3, [pc, #36]	; (800b730 <MX_SPI1_Init+0x68>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b70e:	4b08      	ldr	r3, [pc, #32]	; (800b730 <MX_SPI1_Init+0x68>)
 800b710:	2200      	movs	r2, #0
 800b712:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800b714:	4b06      	ldr	r3, [pc, #24]	; (800b730 <MX_SPI1_Init+0x68>)
 800b716:	220a      	movs	r2, #10
 800b718:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b71a:	4805      	ldr	r0, [pc, #20]	; (800b730 <MX_SPI1_Init+0x68>)
 800b71c:	f003 fe1c 	bl	800f358 <HAL_SPI_Init>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d001      	beq.n	800b72a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800b726:	f7ff ffbf 	bl	800b6a8 <Error_Handler>
  }

}
 800b72a:	bf00      	nop
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	2000072c 	.word	0x2000072c
 800b734:	40013000 	.word	0x40013000

0800b738 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b088      	sub	sp, #32
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b740:	f107 0310 	add.w	r3, r7, #16
 800b744:	2200      	movs	r2, #0
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	605a      	str	r2, [r3, #4]
 800b74a:	609a      	str	r2, [r3, #8]
 800b74c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a15      	ldr	r2, [pc, #84]	; (800b7a8 <HAL_SPI_MspInit+0x70>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d123      	bne.n	800b7a0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b758:	4b14      	ldr	r3, [pc, #80]	; (800b7ac <HAL_SPI_MspInit+0x74>)
 800b75a:	699b      	ldr	r3, [r3, #24]
 800b75c:	4a13      	ldr	r2, [pc, #76]	; (800b7ac <HAL_SPI_MspInit+0x74>)
 800b75e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b762:	6193      	str	r3, [r2, #24]
 800b764:	4b11      	ldr	r3, [pc, #68]	; (800b7ac <HAL_SPI_MspInit+0x74>)
 800b766:	699b      	ldr	r3, [r3, #24]
 800b768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b770:	4b0e      	ldr	r3, [pc, #56]	; (800b7ac <HAL_SPI_MspInit+0x74>)
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	4a0d      	ldr	r2, [pc, #52]	; (800b7ac <HAL_SPI_MspInit+0x74>)
 800b776:	f043 0304 	orr.w	r3, r3, #4
 800b77a:	6193      	str	r3, [r2, #24]
 800b77c:	4b0b      	ldr	r3, [pc, #44]	; (800b7ac <HAL_SPI_MspInit+0x74>)
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	f003 0304 	and.w	r3, r3, #4
 800b784:	60bb      	str	r3, [r7, #8]
 800b786:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 800b788:	23a0      	movs	r3, #160	; 0xa0
 800b78a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b78c:	2302      	movs	r3, #2
 800b78e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b790:	2303      	movs	r3, #3
 800b792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b794:	f107 0310 	add.w	r3, r7, #16
 800b798:	4619      	mov	r1, r3
 800b79a:	4805      	ldr	r0, [pc, #20]	; (800b7b0 <HAL_SPI_MspInit+0x78>)
 800b79c:	f001 fc2a 	bl	800cff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800b7a0:	bf00      	nop
 800b7a2:	3720      	adds	r7, #32
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	40013000 	.word	0x40013000
 800b7ac:	40021000 	.word	0x40021000
 800b7b0:	40010800 	.word	0x40010800

0800b7b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800b7ba:	4b15      	ldr	r3, [pc, #84]	; (800b810 <HAL_MspInit+0x5c>)
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	4a14      	ldr	r2, [pc, #80]	; (800b810 <HAL_MspInit+0x5c>)
 800b7c0:	f043 0301 	orr.w	r3, r3, #1
 800b7c4:	6193      	str	r3, [r2, #24]
 800b7c6:	4b12      	ldr	r3, [pc, #72]	; (800b810 <HAL_MspInit+0x5c>)
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	60bb      	str	r3, [r7, #8]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b7d2:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <HAL_MspInit+0x5c>)
 800b7d4:	69db      	ldr	r3, [r3, #28]
 800b7d6:	4a0e      	ldr	r2, [pc, #56]	; (800b810 <HAL_MspInit+0x5c>)
 800b7d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7dc:	61d3      	str	r3, [r2, #28]
 800b7de:	4b0c      	ldr	r3, [pc, #48]	; (800b810 <HAL_MspInit+0x5c>)
 800b7e0:	69db      	ldr	r3, [r3, #28]
 800b7e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7e6:	607b      	str	r3, [r7, #4]
 800b7e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800b7ea:	4b0a      	ldr	r3, [pc, #40]	; (800b814 <HAL_MspInit+0x60>)
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	4a04      	ldr	r2, [pc, #16]	; (800b814 <HAL_MspInit+0x60>)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b806:	bf00      	nop
 800b808:	3714      	adds	r7, #20
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bc80      	pop	{r7}
 800b80e:	4770      	bx	lr
 800b810:	40021000 	.word	0x40021000
 800b814:	40010000 	.word	0x40010000

0800b818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b818:	b480      	push	{r7}
 800b81a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b81c:	bf00      	nop
 800b81e:	46bd      	mov	sp, r7
 800b820:	bc80      	pop	{r7}
 800b822:	4770      	bx	lr

0800b824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800b828:	f001 f886 	bl	800c938 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b82c:	e7fe      	b.n	800b82c <HardFault_Handler+0x8>

0800b82e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b82e:	b480      	push	{r7}
 800b830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b832:	e7fe      	b.n	800b832 <MemManage_Handler+0x4>

0800b834 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b834:	b480      	push	{r7}
 800b836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b838:	e7fe      	b.n	800b838 <BusFault_Handler+0x4>

0800b83a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b83a:	b480      	push	{r7}
 800b83c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b83e:	e7fe      	b.n	800b83e <UsageFault_Handler+0x4>

0800b840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b840:	b480      	push	{r7}
 800b842:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b844:	bf00      	nop
 800b846:	46bd      	mov	sp, r7
 800b848:	bc80      	pop	{r7}
 800b84a:	4770      	bx	lr

0800b84c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b850:	bf00      	nop
 800b852:	46bd      	mov	sp, r7
 800b854:	bc80      	pop	{r7}
 800b856:	4770      	bx	lr

0800b858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b858:	b480      	push	{r7}
 800b85a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b85c:	bf00      	nop
 800b85e:	46bd      	mov	sp, r7
 800b860:	bc80      	pop	{r7}
 800b862:	4770      	bx	lr

0800b864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b868:	f000 fb7c 	bl	800bf64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b86c:	bf00      	nop
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b874:	4802      	ldr	r0, [pc, #8]	; (800b880 <USART1_IRQHandler+0x10>)
 800b876:	f004 ff1f 	bl	80106b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b87a:	bf00      	nop
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	200007c4 	.word	0x200007c4

0800b884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b884:	b480      	push	{r7}
 800b886:	af00      	add	r7, sp, #0
	return 1;
 800b888:	2301      	movs	r3, #1
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bc80      	pop	{r7}
 800b890:	4770      	bx	lr

0800b892 <_kill>:

int _kill(int pid, int sig)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b082      	sub	sp, #8
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
 800b89a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b89c:	f005 fe5c 	bl	8011558 <__errno>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	2316      	movs	r3, #22
 800b8a4:	6013      	str	r3, [r2, #0]
	return -1;
 800b8a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <_exit>:

void _exit (int status)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b082      	sub	sp, #8
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b8ba:	f04f 31ff 	mov.w	r1, #4294967295
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f7ff ffe7 	bl	800b892 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b8c4:	e7fe      	b.n	800b8c4 <_exit+0x12>
	...

0800b8c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b8d0:	4a14      	ldr	r2, [pc, #80]	; (800b924 <_sbrk+0x5c>)
 800b8d2:	4b15      	ldr	r3, [pc, #84]	; (800b928 <_sbrk+0x60>)
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b8dc:	4b13      	ldr	r3, [pc, #76]	; (800b92c <_sbrk+0x64>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d102      	bne.n	800b8ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b8e4:	4b11      	ldr	r3, [pc, #68]	; (800b92c <_sbrk+0x64>)
 800b8e6:	4a12      	ldr	r2, [pc, #72]	; (800b930 <_sbrk+0x68>)
 800b8e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b8ea:	4b10      	ldr	r3, [pc, #64]	; (800b92c <_sbrk+0x64>)
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d207      	bcs.n	800b908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b8f8:	f005 fe2e 	bl	8011558 <__errno>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	230c      	movs	r3, #12
 800b900:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800b902:	f04f 33ff 	mov.w	r3, #4294967295
 800b906:	e009      	b.n	800b91c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b908:	4b08      	ldr	r3, [pc, #32]	; (800b92c <_sbrk+0x64>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b90e:	4b07      	ldr	r3, [pc, #28]	; (800b92c <_sbrk+0x64>)
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4413      	add	r3, r2
 800b916:	4a05      	ldr	r2, [pc, #20]	; (800b92c <_sbrk+0x64>)
 800b918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b91a:	68fb      	ldr	r3, [r7, #12]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3718      	adds	r7, #24
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	20005000 	.word	0x20005000
 800b928:	00000400 	.word	0x00000400
 800b92c:	20000698 	.word	0x20000698
 800b930:	20000830 	.word	0x20000830

0800b934 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b934:	b480      	push	{r7}
 800b936:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800b938:	4b15      	ldr	r3, [pc, #84]	; (800b990 <SystemInit+0x5c>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a14      	ldr	r2, [pc, #80]	; (800b990 <SystemInit+0x5c>)
 800b93e:	f043 0301 	orr.w	r3, r3, #1
 800b942:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800b944:	4b12      	ldr	r3, [pc, #72]	; (800b990 <SystemInit+0x5c>)
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	4911      	ldr	r1, [pc, #68]	; (800b990 <SystemInit+0x5c>)
 800b94a:	4b12      	ldr	r3, [pc, #72]	; (800b994 <SystemInit+0x60>)
 800b94c:	4013      	ands	r3, r2
 800b94e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800b950:	4b0f      	ldr	r3, [pc, #60]	; (800b990 <SystemInit+0x5c>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a0e      	ldr	r2, [pc, #56]	; (800b990 <SystemInit+0x5c>)
 800b956:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b95a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b95e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b960:	4b0b      	ldr	r3, [pc, #44]	; (800b990 <SystemInit+0x5c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a0a      	ldr	r2, [pc, #40]	; (800b990 <SystemInit+0x5c>)
 800b966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b96a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800b96c:	4b08      	ldr	r3, [pc, #32]	; (800b990 <SystemInit+0x5c>)
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	4a07      	ldr	r2, [pc, #28]	; (800b990 <SystemInit+0x5c>)
 800b972:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800b976:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800b978:	4b05      	ldr	r3, [pc, #20]	; (800b990 <SystemInit+0x5c>)
 800b97a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800b97e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800b980:	4b05      	ldr	r3, [pc, #20]	; (800b998 <SystemInit+0x64>)
 800b982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b986:	609a      	str	r2, [r3, #8]
#endif 
}
 800b988:	bf00      	nop
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bc80      	pop	{r7}
 800b98e:	4770      	bx	lr
 800b990:	40021000 	.word	0x40021000
 800b994:	f8ff0000 	.word	0xf8ff0000
 800b998:	e000ed00 	.word	0xe000ed00

0800b99c <_ZN13THERMO_SENSOR12clearI2CBuffEv>:
// HOLD MASTER - SCL line is blocked (controlled by sensor) during measurement
// NO HOLD MASTER - allows other I2C communication tasks while sensor performing
// measurements.

void THERMO_SENSOR::clearI2CBuff()
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f005 fe4f 	bl	801164e <memset>
	i2cBufferIndex = 0;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 2020 	strb.w	r2, [r3, #32]
}
 800b9b8:	bf00      	nop
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <_ZN13THERMO_SENSOR13readSensor_hmEh>:

uint16_t THERMO_SENSOR::readSensor_hm(uint8_t command)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af02      	add	r7, sp, #8
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	uint16_t result;
//	uint8_t n = 0;
	uint8_t d;

	if(command == TRIGGER_RH_MEASUREMENT_HM || command == TRIGGER_RH_MEASUREMENT_NHM)
 800b9cc:	78fb      	ldrb	r3, [r7, #3]
 800b9ce:	2be5      	cmp	r3, #229	; 0xe5
 800b9d0:	d002      	beq.n	800b9d8 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x18>
 800b9d2:	78fb      	ldrb	r3, [r7, #3]
 800b9d4:	2bf5      	cmp	r3, #245	; 0xf5
 800b9d6:	d101      	bne.n	800b9dc <_ZN13THERMO_SENSOR13readSensor_hmEh+0x1c>
		d = 30;
 800b9d8:	231e      	movs	r3, #30
 800b9da:	737b      	strb	r3, [r7, #13]
	if(command == TRIGGER_T_MEASUREMENT_HM || command == TRIGGER_T_MEASUREMENT_NHM)
 800b9dc:	78fb      	ldrb	r3, [r7, #3]
 800b9de:	2be3      	cmp	r3, #227	; 0xe3
 800b9e0:	d002      	beq.n	800b9e8 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x28>
 800b9e2:	78fb      	ldrb	r3, [r7, #3]
 800b9e4:	2bf3      	cmp	r3, #243	; 0xf3
 800b9e6:	d101      	bne.n	800b9ec <_ZN13THERMO_SENSOR13readSensor_hmEh+0x2c>
		d = 85;
 800b9e8:	2355      	movs	r3, #85	; 0x55
 800b9ea:	737b      	strb	r3, [r7, #13]

	clearI2CBuff();
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff ffd5 	bl	800b99c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = command;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	78fa      	ldrb	r2, [r7, #3]
 800b9f6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	230a      	movs	r3, #10
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	2301      	movs	r3, #1
 800ba00:	2180      	movs	r1, #128	; 0x80
 800ba02:	482d      	ldr	r0, [pc, #180]	; (800bab8 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800ba04:	f001 ff68 	bl	800d8d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(d);
 800ba08:	7b7b      	ldrb	r3, [r7, #13]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 fac6 	bl	800bf9c <HAL_Delay>
	clearI2CBuff();
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f7ff ffc3 	bl	800b99c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	HAL_I2C_Master_Receive(&hi2c1, I2CTEMPADDR, i2cBuffer, 3, 10);
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	230a      	movs	r3, #10
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	2180      	movs	r1, #128	; 0x80
 800ba20:	4825      	ldr	r0, [pc, #148]	; (800bab8 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800ba22:	f002 f857 	bl	800dad4 <HAL_I2C_Master_Receive>
	data[0] = i2cBuffer[i2cBufferIndex++]; 	// read data (MSB)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ba2c:	1c5a      	adds	r2, r3, #1
 800ba2e:	b2d1      	uxtb	r1, r2
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	f882 1020 	strb.w	r1, [r2, #32]
 800ba36:	461a      	mov	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	5c9b      	ldrb	r3, [r3, r2]
 800ba3c:	723b      	strb	r3, [r7, #8]
	data[1] = i2cBuffer[i2cBufferIndex++]; 	// read data (LSB)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ba44:	1c5a      	adds	r2, r3, #1
 800ba46:	b2d1      	uxtb	r1, r2
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	f882 1020 	strb.w	r1, [r2, #32]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	5c9b      	ldrb	r3, [r3, r2]
 800ba54:	727b      	strb	r3, [r7, #9]
	checksum = i2cBuffer[i2cBufferIndex++];	// read checksum
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ba5c:	1c5a      	adds	r2, r3, #1
 800ba5e:	b2d1      	uxtb	r1, r2
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	f882 1020 	strb.w	r1, [r2, #32]
 800ba66:	461a      	mov	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	5c9b      	ldrb	r3, [r3, r2]
 800ba6c:	733b      	strb	r3, [r7, #12]
	result = (data[0] << 8);
 800ba6e:	7a3b      	ldrb	r3, [r7, #8]
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	021b      	lsls	r3, r3, #8
 800ba74:	81fb      	strh	r3, [r7, #14]
	result += data[1];
 800ba76:	7a7b      	ldrb	r3, [r7, #9]
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	89fb      	ldrh	r3, [r7, #14]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	81fb      	strh	r3, [r7, #14]
	if(CRC_Checksum (data, 2, checksum))
 800ba80:	7b3b      	ldrb	r3, [r7, #12]
 800ba82:	f107 0108 	add.w	r1, r7, #8
 800ba86:	2202      	movs	r2, #2
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 f87d 	bl	800bb88 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	bf14      	ite	ne
 800ba94:	2301      	movne	r3, #1
 800ba96:	2300      	moveq	r3, #0
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xe8>
	{
		reset();
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f8e2 	bl	800bc68 <_ZN13THERMO_SENSOR5resetEv>
		result = 1;
 800baa4:	2301      	movs	r3, #1
 800baa6:	81fb      	strh	r3, [r7, #14]
	}
	clearI2CBuff();
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f7ff ff77 	bl	800b99c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	return result; // @suppress("Return with parenthesis")
 800baae:	89fb      	ldrh	r3, [r7, #14]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	200006d8 	.word	0x200006d8

0800babc <_ZN13THERMO_SENSOR6CalcRHEt>:

float THERMO_SENSOR::CalcRH(uint16_t rh)
{
 800babc:	b590      	push	{r4, r7, lr}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	460b      	mov	r3, r1
 800bac6:	807b      	strh	r3, [r7, #2]
	rh &= ~0x0003;	// clean last two bits
 800bac8:	887b      	ldrh	r3, [r7, #2]
 800baca:	f023 0303 	bic.w	r3, r3, #3
 800bace:	807b      	strh	r3, [r7, #2]
  	return (-6.0 + 125.0/65536 * (float)rh); // return relative humidity
 800bad0:	887b      	ldrh	r3, [r7, #2]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7f5 f818 	bl	8000b08 <__aeabi_ui2f>
 800bad8:	4603      	mov	r3, r0
 800bada:	4618      	mov	r0, r3
 800badc:	f7f4 fca4 	bl	8000428 <__aeabi_f2d>
 800bae0:	f04f 0200 	mov.w	r2, #0
 800bae4:	4b0b      	ldr	r3, [pc, #44]	; (800bb14 <_ZN13THERMO_SENSOR6CalcRHEt+0x58>)
 800bae6:	f7f4 fcf7 	bl	80004d8 <__aeabi_dmul>
 800baea:	4603      	mov	r3, r0
 800baec:	460c      	mov	r4, r1
 800baee:	4618      	mov	r0, r3
 800baf0:	4621      	mov	r1, r4
 800baf2:	f04f 0200 	mov.w	r2, #0
 800baf6:	4b08      	ldr	r3, [pc, #32]	; (800bb18 <_ZN13THERMO_SENSOR6CalcRHEt+0x5c>)
 800baf8:	f7f4 fb36 	bl	8000168 <__aeabi_dsub>
 800bafc:	4603      	mov	r3, r0
 800bafe:	460c      	mov	r4, r1
 800bb00:	4618      	mov	r0, r3
 800bb02:	4621      	mov	r1, r4
 800bb04:	f7f4 fefa 	bl	80008fc <__aeabi_d2f>
 800bb08:	4603      	mov	r3, r0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd90      	pop	{r4, r7, pc}
 800bb12:	bf00      	nop
 800bb14:	3f5f4000 	.word	0x3f5f4000
 800bb18:	40180000 	.word	0x40180000
 800bb1c:	00000000 	.word	0x00000000

0800bb20 <_ZN13THERMO_SENSOR5CalcTEt>:

float THERMO_SENSOR::CalcT(uint16_t t)
{
 800bb20:	b590      	push	{r4, r7, lr}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	807b      	strh	r3, [r7, #2]
	t &= ~0x0003;	// clean last two bits
 800bb2c:	887b      	ldrh	r3, [r7, #2]
 800bb2e:	f023 0303 	bic.w	r3, r3, #3
 800bb32:	807b      	strh	r3, [r7, #2]
	return (-46.85 + 175.72/65536 * (float)t);
 800bb34:	887b      	ldrh	r3, [r7, #2]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7f4 ffe6 	bl	8000b08 <__aeabi_ui2f>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7f4 fc72 	bl	8000428 <__aeabi_f2d>
 800bb44:	a30c      	add	r3, pc, #48	; (adr r3, 800bb78 <_ZN13THERMO_SENSOR5CalcTEt+0x58>)
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f7f4 fcc5 	bl	80004d8 <__aeabi_dmul>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	460c      	mov	r4, r1
 800bb52:	4618      	mov	r0, r3
 800bb54:	4621      	mov	r1, r4
 800bb56:	a30a      	add	r3, pc, #40	; (adr r3, 800bb80 <_ZN13THERMO_SENSOR5CalcTEt+0x60>)
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	f7f4 fb04 	bl	8000168 <__aeabi_dsub>
 800bb60:	4603      	mov	r3, r0
 800bb62:	460c      	mov	r4, r1
 800bb64:	4618      	mov	r0, r3
 800bb66:	4621      	mov	r1, r4
 800bb68:	f7f4 fec8 	bl	80008fc <__aeabi_d2f>
 800bb6c:	4603      	mov	r3, r0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	370c      	adds	r7, #12
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd90      	pop	{r4, r7, pc}
 800bb76:	bf00      	nop
 800bb78:	3d70a3d7 	.word	0x3d70a3d7
 800bb7c:	3f65f70a 	.word	0x3f65f70a
 800bb80:	cccccccd 	.word	0xcccccccd
 800bb84:	40476ccc 	.word	0x40476ccc

0800bb88 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>:

uint8_t THERMO_SENSOR::CRC_Checksum(uint8_t data[], uint8_t no_of_bytes, uint8_t checksum)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b087      	sub	sp, #28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	4611      	mov	r1, r2
 800bb94:	461a      	mov	r2, r3
 800bb96:	460b      	mov	r3, r1
 800bb98:	71fb      	strb	r3, [r7, #7]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	75fb      	strb	r3, [r7, #23]
  	uint8_t byteCtr;
  	uint8_t ret = 0;
 800bba2:	2300      	movs	r3, #0
 800bba4:	757b      	strb	r3, [r7, #21]

 	 //calculates 8-Bit checksum with given polynomial
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800bba6:	2300      	movs	r3, #0
 800bba8:	75bb      	strb	r3, [r7, #22]
 800bbaa:	7dba      	ldrb	r2, [r7, #22]
 800bbac:	79fb      	ldrb	r3, [r7, #7]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d222      	bcs.n	800bbf8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x70>
 	 {
		crc ^= (data[byteCtr]);
 800bbb2:	7dbb      	ldrb	r3, [r7, #22]
 800bbb4:	68ba      	ldr	r2, [r7, #8]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	781a      	ldrb	r2, [r3, #0]
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	4053      	eors	r3, r2
 800bbbe:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800bbc0:	2308      	movs	r3, #8
 800bbc2:	753b      	strb	r3, [r7, #20]
 800bbc4:	7d3b      	ldrb	r3, [r7, #20]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d012      	beq.n	800bbf0 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x68>
		{
		   if (crc & 0x80)
 800bbca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	da07      	bge.n	800bbe2 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x5a>
			   crc = (crc << 1) ^ POLYNOMIAL;
 800bbd2:	7dfb      	ldrb	r3, [r7, #23]
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	b25b      	sxtb	r3, r3
 800bbd8:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800bbdc:	b25b      	sxtb	r3, r3
 800bbde:	75fb      	strb	r3, [r7, #23]
 800bbe0:	e002      	b.n	800bbe8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x60>
		   else
			   crc = (crc << 1);
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
 800bbe4:	005b      	lsls	r3, r3, #1
 800bbe6:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800bbe8:	7d3b      	ldrb	r3, [r7, #20]
 800bbea:	3b01      	subs	r3, #1
 800bbec:	753b      	strb	r3, [r7, #20]
 800bbee:	e7e9      	b.n	800bbc4 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x3c>
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800bbf0:	7dbb      	ldrb	r3, [r7, #22]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	75bb      	strb	r3, [r7, #22]
 800bbf6:	e7d8      	b.n	800bbaa <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x22>
		}
 	 }
 	 if (crc != checksum)
 800bbf8:	7dfa      	ldrb	r2, [r7, #23]
 800bbfa:	79bb      	ldrb	r3, [r7, #6]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d002      	beq.n	800bc06 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x7e>
 		 ret = 1;
 800bc00:	2301      	movs	r3, #1
 800bc02:	757b      	strb	r3, [r7, #21]
 800bc04:	e001      	b.n	800bc0a <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x82>
 	 else
 		 ret = 0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	757b      	strb	r3, [r7, #21]
 	 return ret;
 800bc0a:	7d7b      	ldrb	r3, [r7, #21]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	371c      	adds	r7, #28
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bc80      	pop	{r7}
 800bc14:	4770      	bx	lr

0800bc16 <_ZN13THERMO_SENSOR11getHumidityEv>:
	return SN; // @suppress("Return with parenthesis")

}

float THERMO_SENSOR::getHumidity(void)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b084      	sub	sp, #16
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_RH_MEASUREMENT_NHM);
 800bc1e:	21f5      	movs	r1, #245	; 0xf5
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff fecd 	bl	800b9c0 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800bc26:	4603      	mov	r3, r0
 800bc28:	81fb      	strh	r3, [r7, #14]

	return CalcRH(result);
 800bc2a:	89fb      	ldrh	r3, [r7, #14]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7ff ff44 	bl	800babc <_ZN13THERMO_SENSOR6CalcRHEt>
 800bc34:	4603      	mov	r3, r0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <_ZN13THERMO_SENSOR14getTemperatureEv>:

float THERMO_SENSOR::getTemperature(void)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_T_MEASUREMENT_NHM);
 800bc46:	21f3      	movs	r1, #243	; 0xf3
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7ff feb9 	bl	800b9c0 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	81fb      	strh	r3, [r7, #14]

	return CalcT(result);
 800bc52:	89fb      	ldrh	r3, [r7, #14]
 800bc54:	4619      	mov	r1, r3
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f7ff ff62 	bl	800bb20 <_ZN13THERMO_SENSOR5CalcTEt>
 800bc5c:	4603      	mov	r3, r0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
	...

0800bc68 <_ZN13THERMO_SENSOR5resetEv>:

void THERMO_SENSOR::reset()
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af02      	add	r7, sp, #8
 800bc6e:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7ff fe93 	bl	800b99c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = SOFT_RESET;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	22fe      	movs	r2, #254	; 0xfe
 800bc7a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	230a      	movs	r3, #10
 800bc80:	9300      	str	r3, [sp, #0]
 800bc82:	2301      	movs	r3, #1
 800bc84:	2180      	movs	r1, #128	; 0x80
 800bc86:	4806      	ldr	r0, [pc, #24]	; (800bca0 <_ZN13THERMO_SENSOR5resetEv+0x38>)
 800bc88:	f001 fe26 	bl	800d8d8 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 800bc8c:	200f      	movs	r0, #15
 800bc8e:	f000 f985 	bl	800bf9c <HAL_Delay>
	clearI2CBuff();
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f7ff fe82 	bl	800b99c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
}
 800bc98:	bf00      	nop
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	200006d8 	.word	0x200006d8

0800bca4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b086      	sub	sp, #24
 800bca8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bcaa:	f107 0308 	add.w	r3, r7, #8
 800bcae:	2200      	movs	r2, #0
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	605a      	str	r2, [r3, #4]
 800bcb4:	609a      	str	r2, [r3, #8]
 800bcb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bcb8:	463b      	mov	r3, r7
 800bcba:	2200      	movs	r2, #0
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800bcc0:	4b1d      	ldr	r3, [pc, #116]	; (800bd38 <MX_TIM2_Init+0x94>)
 800bcc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bcc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800bcc8:	4b1b      	ldr	r3, [pc, #108]	; (800bd38 <MX_TIM2_Init+0x94>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bcce:	4b1a      	ldr	r3, [pc, #104]	; (800bd38 <MX_TIM2_Init+0x94>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 800bcd4:	4b18      	ldr	r3, [pc, #96]	; (800bd38 <MX_TIM2_Init+0x94>)
 800bcd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bcda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bcdc:	4b16      	ldr	r3, [pc, #88]	; (800bd38 <MX_TIM2_Init+0x94>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bce2:	4b15      	ldr	r3, [pc, #84]	; (800bd38 <MX_TIM2_Init+0x94>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800bce8:	4813      	ldr	r0, [pc, #76]	; (800bd38 <MX_TIM2_Init+0x94>)
 800bcea:	f003 fe13 	bl	800f914 <HAL_TIM_Base_Init>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800bcf4:	f7ff fcd8 	bl	800b6a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bcf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800bcfe:	f107 0308 	add.w	r3, r7, #8
 800bd02:	4619      	mov	r1, r3
 800bd04:	480c      	ldr	r0, [pc, #48]	; (800bd38 <MX_TIM2_Init+0x94>)
 800bd06:	f003 fecf 	bl	800faa8 <HAL_TIM_ConfigClockSource>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800bd10:	f7ff fcca 	bl	800b6a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bd14:	2300      	movs	r3, #0
 800bd16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800bd1c:	463b      	mov	r3, r7
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4805      	ldr	r0, [pc, #20]	; (800bd38 <MX_TIM2_Init+0x94>)
 800bd22:	f004 fa4b 	bl	80101bc <HAL_TIMEx_MasterConfigSynchronization>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800bd2c:	f7ff fcbc 	bl	800b6a8 <Error_Handler>
  }

}
 800bd30:	bf00      	nop
 800bd32:	3718      	adds	r7, #24
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20000784 	.word	0x20000784

0800bd3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd4c:	d10b      	bne.n	800bd66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bd4e:	4b08      	ldr	r3, [pc, #32]	; (800bd70 <HAL_TIM_Base_MspInit+0x34>)
 800bd50:	69db      	ldr	r3, [r3, #28]
 800bd52:	4a07      	ldr	r2, [pc, #28]	; (800bd70 <HAL_TIM_Base_MspInit+0x34>)
 800bd54:	f043 0301 	orr.w	r3, r3, #1
 800bd58:	61d3      	str	r3, [r2, #28]
 800bd5a:	4b05      	ldr	r3, [pc, #20]	; (800bd70 <HAL_TIM_Base_MspInit+0x34>)
 800bd5c:	69db      	ldr	r3, [r3, #28]
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	60fb      	str	r3, [r7, #12]
 800bd64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800bd66:	bf00      	nop
 800bd68:	3714      	adds	r7, #20
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bc80      	pop	{r7}
 800bd6e:	4770      	bx	lr
 800bd70:	40021000 	.word	0x40021000

0800bd74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800bd78:	4b11      	ldr	r3, [pc, #68]	; (800bdc0 <MX_USART1_UART_Init+0x4c>)
 800bd7a:	4a12      	ldr	r2, [pc, #72]	; (800bdc4 <MX_USART1_UART_Init+0x50>)
 800bd7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800bd7e:	4b10      	ldr	r3, [pc, #64]	; (800bdc0 <MX_USART1_UART_Init+0x4c>)
 800bd80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800bd84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bd86:	4b0e      	ldr	r3, [pc, #56]	; (800bdc0 <MX_USART1_UART_Init+0x4c>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800bd8c:	4b0c      	ldr	r3, [pc, #48]	; (800bdc0 <MX_USART1_UART_Init+0x4c>)
 800bd8e:	2200      	movs	r2, #0
 800bd90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bd92:	4b0b      	ldr	r3, [pc, #44]	; (800bdc0 <MX_USART1_UART_Init+0x4c>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bd98:	4b09      	ldr	r3, [pc, #36]	; (800bdc0 <MX_USART1_UART_Init+0x4c>)
 800bd9a:	220c      	movs	r2, #12
 800bd9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bd9e:	4b08      	ldr	r3, [pc, #32]	; (800bdc0 <MX_USART1_UART_Init+0x4c>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bda4:	4b06      	ldr	r3, [pc, #24]	; (800bdc0 <MX_USART1_UART_Init+0x4c>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800bdaa:	4805      	ldr	r0, [pc, #20]	; (800bdc0 <MX_USART1_UART_Init+0x4c>)
 800bdac:	f004 fa9c 	bl	80102e8 <HAL_UART_Init>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800bdb6:	f7ff fc77 	bl	800b6a8 <Error_Handler>
  }

}
 800bdba:	bf00      	nop
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	200007c4 	.word	0x200007c4
 800bdc4:	40013800 	.word	0x40013800

0800bdc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b08a      	sub	sp, #40	; 0x28
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdd0:	f107 0314 	add.w	r3, r7, #20
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	601a      	str	r2, [r3, #0]
 800bdd8:	605a      	str	r2, [r3, #4]
 800bdda:	609a      	str	r2, [r3, #8]
 800bddc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a26      	ldr	r2, [pc, #152]	; (800be7c <HAL_UART_MspInit+0xb4>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d145      	bne.n	800be74 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800bde8:	4b25      	ldr	r3, [pc, #148]	; (800be80 <HAL_UART_MspInit+0xb8>)
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	4a24      	ldr	r2, [pc, #144]	; (800be80 <HAL_UART_MspInit+0xb8>)
 800bdee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bdf2:	6193      	str	r3, [r2, #24]
 800bdf4:	4b22      	ldr	r3, [pc, #136]	; (800be80 <HAL_UART_MspInit+0xb8>)
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdfc:	613b      	str	r3, [r7, #16]
 800bdfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be00:	4b1f      	ldr	r3, [pc, #124]	; (800be80 <HAL_UART_MspInit+0xb8>)
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	4a1e      	ldr	r2, [pc, #120]	; (800be80 <HAL_UART_MspInit+0xb8>)
 800be06:	f043 0308 	orr.w	r3, r3, #8
 800be0a:	6193      	str	r3, [r2, #24]
 800be0c:	4b1c      	ldr	r3, [pc, #112]	; (800be80 <HAL_UART_MspInit+0xb8>)
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	f003 0308 	and.w	r3, r3, #8
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 800be18:	2340      	movs	r3, #64	; 0x40
 800be1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be1c:	2302      	movs	r3, #2
 800be1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800be20:	2303      	movs	r3, #3
 800be22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800be24:	f107 0314 	add.w	r3, r7, #20
 800be28:	4619      	mov	r1, r3
 800be2a:	4816      	ldr	r0, [pc, #88]	; (800be84 <HAL_UART_MspInit+0xbc>)
 800be2c:	f001 f8e2 	bl	800cff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800be30:	2380      	movs	r3, #128	; 0x80
 800be32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800be34:	2300      	movs	r3, #0
 800be36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be38:	2300      	movs	r3, #0
 800be3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800be3c:	f107 0314 	add.w	r3, r7, #20
 800be40:	4619      	mov	r1, r3
 800be42:	4810      	ldr	r0, [pc, #64]	; (800be84 <HAL_UART_MspInit+0xbc>)
 800be44:	f001 f8d6 	bl	800cff4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800be48:	4b0f      	ldr	r3, [pc, #60]	; (800be88 <HAL_UART_MspInit+0xc0>)
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800be54:	627b      	str	r3, [r7, #36]	; 0x24
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	f043 0304 	orr.w	r3, r3, #4
 800be5c:	627b      	str	r3, [r7, #36]	; 0x24
 800be5e:	4a0a      	ldr	r2, [pc, #40]	; (800be88 <HAL_UART_MspInit+0xc0>)
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800be64:	2200      	movs	r2, #0
 800be66:	2100      	movs	r1, #0
 800be68:	2025      	movs	r0, #37	; 0x25
 800be6a:	f000 fd21 	bl	800c8b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800be6e:	2025      	movs	r0, #37	; 0x25
 800be70:	f000 fd4a 	bl	800c908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800be74:	bf00      	nop
 800be76:	3728      	adds	r7, #40	; 0x28
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	40013800 	.word	0x40013800
 800be80:	40021000 	.word	0x40021000
 800be84:	40010c00 	.word	0x40010c00
 800be88:	40010000 	.word	0x40010000

0800be8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800be8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800be8e:	e003      	b.n	800be98 <LoopCopyDataInit>

0800be90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800be90:	4b0b      	ldr	r3, [pc, #44]	; (800bec0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800be92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800be94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800be96:	3104      	adds	r1, #4

0800be98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800be98:	480a      	ldr	r0, [pc, #40]	; (800bec4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800be9a:	4b0b      	ldr	r3, [pc, #44]	; (800bec8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800be9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800be9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800bea0:	d3f6      	bcc.n	800be90 <CopyDataInit>
  ldr r2, =_sbss
 800bea2:	4a0a      	ldr	r2, [pc, #40]	; (800becc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800bea4:	e002      	b.n	800beac <LoopFillZerobss>

0800bea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800bea6:	2300      	movs	r3, #0
  str r3, [r2], #4
 800bea8:	f842 3b04 	str.w	r3, [r2], #4

0800beac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800beac:	4b08      	ldr	r3, [pc, #32]	; (800bed0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800beae:	429a      	cmp	r2, r3
  bcc FillZerobss
 800beb0:	d3f9      	bcc.n	800bea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800beb2:	f7ff fd3f 	bl	800b934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800beb6:	f005 fb55 	bl	8011564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800beba:	f7ff fb55 	bl	800b568 <main>
  bx lr
 800bebe:	4770      	bx	lr
  ldr r3, =_sidata
 800bec0:	08015660 	.word	0x08015660
  ldr r0, =_sdata
 800bec4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800bec8:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 800becc:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 800bed0:	2000082c 	.word	0x2000082c

0800bed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800bed4:	e7fe      	b.n	800bed4 <ADC1_2_IRQHandler>
	...

0800bed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bedc:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <HAL_Init+0x28>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a07      	ldr	r2, [pc, #28]	; (800bf00 <HAL_Init+0x28>)
 800bee2:	f043 0310 	orr.w	r3, r3, #16
 800bee6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bee8:	2003      	movs	r0, #3
 800beea:	f000 fcc1 	bl	800c870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800beee:	2000      	movs	r0, #0
 800bef0:	f000 f808 	bl	800bf04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bef4:	f7ff fc5e 	bl	800b7b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	40022000 	.word	0x40022000

0800bf04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bf0c:	4b12      	ldr	r3, [pc, #72]	; (800bf58 <HAL_InitTick+0x54>)
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	4b12      	ldr	r3, [pc, #72]	; (800bf5c <HAL_InitTick+0x58>)
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	4619      	mov	r1, r3
 800bf16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 fd0c 	bl	800c940 <HAL_SYSTICK_Config>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e00e      	b.n	800bf50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b0f      	cmp	r3, #15
 800bf36:	d80a      	bhi.n	800bf4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bf38:	2200      	movs	r2, #0
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf40:	f000 fcb6 	bl	800c8b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bf44:	4a06      	ldr	r2, [pc, #24]	; (800bf60 <HAL_InitTick+0x5c>)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	e000      	b.n	800bf50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	2000009c 	.word	0x2000009c
 800bf5c:	200000a4 	.word	0x200000a4
 800bf60:	200000a0 	.word	0x200000a0

0800bf64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bf64:	b480      	push	{r7}
 800bf66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bf68:	4b05      	ldr	r3, [pc, #20]	; (800bf80 <HAL_IncTick+0x1c>)
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <HAL_IncTick+0x20>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4413      	add	r3, r2
 800bf74:	4a03      	ldr	r2, [pc, #12]	; (800bf84 <HAL_IncTick+0x20>)
 800bf76:	6013      	str	r3, [r2, #0]
}
 800bf78:	bf00      	nop
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bc80      	pop	{r7}
 800bf7e:	4770      	bx	lr
 800bf80:	200000a4 	.word	0x200000a4
 800bf84:	20000804 	.word	0x20000804

0800bf88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	af00      	add	r7, sp, #0
  return uwTick;
 800bf8c:	4b02      	ldr	r3, [pc, #8]	; (800bf98 <HAL_GetTick+0x10>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bc80      	pop	{r7}
 800bf96:	4770      	bx	lr
 800bf98:	20000804 	.word	0x20000804

0800bf9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bfa4:	f7ff fff0 	bl	800bf88 <HAL_GetTick>
 800bfa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb4:	d005      	beq.n	800bfc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bfb6:	4b09      	ldr	r3, [pc, #36]	; (800bfdc <HAL_Delay+0x40>)
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bfc2:	bf00      	nop
 800bfc4:	f7ff ffe0 	bl	800bf88 <HAL_GetTick>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d8f7      	bhi.n	800bfc4 <HAL_Delay+0x28>
  {
  }
}
 800bfd4:	bf00      	nop
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	200000a4 	.word	0x200000a4

0800bfe0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800bfec:	2300      	movs	r3, #0
 800bfee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800bff0:	2300      	movs	r3, #0
 800bff2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800bff4:	2300      	movs	r3, #0
 800bff6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d101      	bne.n	800c002 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800bffe:	2301      	movs	r3, #1
 800c000:	e153      	b.n	800c2aa <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a9f      	ldr	r2, [pc, #636]	; (800c284 <HAL_ADC_Init+0x2a4>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d009      	beq.n	800c020 <HAL_ADC_Init+0x40>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a9d      	ldr	r2, [pc, #628]	; (800c288 <HAL_ADC_Init+0x2a8>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d004      	beq.n	800c020 <HAL_ADC_Init+0x40>
 800c016:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c01a:	489c      	ldr	r0, [pc, #624]	; (800c28c <HAL_ADC_Init+0x2ac>)
 800c01c:	f7ff fb4a 	bl	800b6b4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d009      	beq.n	800c03c <HAL_ADC_Init+0x5c>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c030:	d004      	beq.n	800c03c <HAL_ADC_Init+0x5c>
 800c032:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800c036:	4895      	ldr	r0, [pc, #596]	; (800c28c <HAL_ADC_Init+0x2ac>)
 800c038:	f7ff fb3c 	bl	800b6b4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d009      	beq.n	800c058 <HAL_ADC_Init+0x78>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c04c:	d004      	beq.n	800c058 <HAL_ADC_Init+0x78>
 800c04e:	f240 11b5 	movw	r1, #437	; 0x1b5
 800c052:	488e      	ldr	r0, [pc, #568]	; (800c28c <HAL_ADC_Init+0x2ac>)
 800c054:	f7ff fb2e 	bl	800b6b4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	7b1b      	ldrb	r3, [r3, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d008      	beq.n	800c072 <HAL_ADC_Init+0x92>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	7b1b      	ldrb	r3, [r3, #12]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d004      	beq.n	800c072 <HAL_ADC_Init+0x92>
 800c068:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800c06c:	4887      	ldr	r0, [pc, #540]	; (800c28c <HAL_ADC_Init+0x2ac>)
 800c06e:	f7ff fb21 	bl	800b6b4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	69db      	ldr	r3, [r3, #28]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d022      	beq.n	800c0c0 <HAL_ADC_Init+0xe0>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c082:	d01d      	beq.n	800c0c0 <HAL_ADC_Init+0xe0>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c08c:	d018      	beq.n	800c0c0 <HAL_ADC_Init+0xe0>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	69db      	ldr	r3, [r3, #28]
 800c092:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c096:	d013      	beq.n	800c0c0 <HAL_ADC_Init+0xe0>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	69db      	ldr	r3, [r3, #28]
 800c09c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800c0a0:	d00e      	beq.n	800c0c0 <HAL_ADC_Init+0xe0>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	69db      	ldr	r3, [r3, #28]
 800c0a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c0aa:	d009      	beq.n	800c0c0 <HAL_ADC_Init+0xe0>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	69db      	ldr	r3, [r3, #28]
 800c0b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800c0b4:	d004      	beq.n	800c0c0 <HAL_ADC_Init+0xe0>
 800c0b6:	f240 11b7 	movw	r1, #439	; 0x1b7
 800c0ba:	4874      	ldr	r0, [pc, #464]	; (800c28c <HAL_ADC_Init+0x2ac>)
 800c0bc:	f7ff fafa 	bl	800b6b4 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d02a      	beq.n	800c11e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d003      	beq.n	800c0d8 <HAL_ADC_Init+0xf8>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	2b10      	cmp	r3, #16
 800c0d6:	d904      	bls.n	800c0e2 <HAL_ADC_Init+0x102>
 800c0d8:	f240 11bb 	movw	r1, #443	; 0x1bb
 800c0dc:	486b      	ldr	r0, [pc, #428]	; (800c28c <HAL_ADC_Init+0x2ac>)
 800c0de:	f7ff fae9 	bl	800b6b4 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	7d1b      	ldrb	r3, [r3, #20]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d008      	beq.n	800c0fc <HAL_ADC_Init+0x11c>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	7d1b      	ldrb	r3, [r3, #20]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d004      	beq.n	800c0fc <HAL_ADC_Init+0x11c>
 800c0f2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800c0f6:	4865      	ldr	r0, [pc, #404]	; (800c28c <HAL_ADC_Init+0x2ac>)
 800c0f8:	f7ff fadc 	bl	800b6b4 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	7d1b      	ldrb	r3, [r3, #20]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00c      	beq.n	800c11e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	699b      	ldr	r3, [r3, #24]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d003      	beq.n	800c114 <HAL_ADC_Init+0x134>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	2b08      	cmp	r3, #8
 800c112:	d904      	bls.n	800c11e <HAL_ADC_Init+0x13e>
 800c114:	f240 11bf 	movw	r1, #447	; 0x1bf
 800c118:	485c      	ldr	r0, [pc, #368]	; (800c28c <HAL_ADC_Init+0x2ac>)
 800c11a:	f7ff facb 	bl	800b6b4 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c122:	2b00      	cmp	r3, #0
 800c124:	d109      	bne.n	800c13a <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7ff f8fb 	bl	800b330 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 fa7e 	bl	800c63c <ADC_ConversionStop_Disable>
 800c140:	4603      	mov	r3, r0
 800c142:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c148:	f003 0310 	and.w	r3, r3, #16
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f040 80a3 	bne.w	800c298 <HAL_ADC_Init+0x2b8>
 800c152:	7dfb      	ldrb	r3, [r7, #23]
 800c154:	2b00      	cmp	r3, #0
 800c156:	f040 809f 	bne.w	800c298 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c162:	f023 0302 	bic.w	r3, r3, #2
 800c166:	f043 0202 	orr.w	r2, r3, #2
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c176:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	7b1b      	ldrb	r3, [r3, #12]
 800c17c:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c17e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	4313      	orrs	r3, r2
 800c184:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c18e:	d003      	beq.n	800c198 <HAL_ADC_Init+0x1b8>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d102      	bne.n	800c19e <HAL_ADC_Init+0x1be>
 800c198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c19c:	e000      	b.n	800c1a0 <HAL_ADC_Init+0x1c0>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	693a      	ldr	r2, [r7, #16]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	7d1b      	ldrb	r3, [r3, #20]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d119      	bne.n	800c1e2 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	7b1b      	ldrb	r3, [r3, #12]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d109      	bne.n	800c1ca <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	035a      	lsls	r2, r3, #13
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c1c6:	613b      	str	r3, [r7, #16]
 800c1c8:	e00b      	b.n	800c1e2 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ce:	f043 0220 	orr.w	r2, r3, #32
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1da:	f043 0201 	orr.w	r2, r3, #1
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	430a      	orrs	r2, r1
 800c1f4:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	689a      	ldr	r2, [r3, #8]
 800c1fc:	4b24      	ldr	r3, [pc, #144]	; (800c290 <HAL_ADC_Init+0x2b0>)
 800c1fe:	4013      	ands	r3, r2
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	6812      	ldr	r2, [r2, #0]
 800c204:	68b9      	ldr	r1, [r7, #8]
 800c206:	430b      	orrs	r3, r1
 800c208:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c212:	d003      	beq.n	800c21c <HAL_ADC_Init+0x23c>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d104      	bne.n	800c226 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	3b01      	subs	r3, #1
 800c222:	051b      	lsls	r3, r3, #20
 800c224:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	430a      	orrs	r2, r1
 800c238:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	689a      	ldr	r2, [r3, #8]
 800c240:	4b14      	ldr	r3, [pc, #80]	; (800c294 <HAL_ADC_Init+0x2b4>)
 800c242:	4013      	ands	r3, r2
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	429a      	cmp	r2, r3
 800c248:	d10b      	bne.n	800c262 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c254:	f023 0303 	bic.w	r3, r3, #3
 800c258:	f043 0201 	orr.w	r2, r3, #1
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c260:	e022      	b.n	800c2a8 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c266:	f023 0312 	bic.w	r3, r3, #18
 800c26a:	f043 0210 	orr.w	r2, r3, #16
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c276:	f043 0201 	orr.w	r2, r3, #1
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800c27e:	2301      	movs	r3, #1
 800c280:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c282:	e011      	b.n	800c2a8 <HAL_ADC_Init+0x2c8>
 800c284:	40012400 	.word	0x40012400
 800c288:	40012800 	.word	0x40012800
 800c28c:	080125c0 	.word	0x080125c0
 800c290:	ffe1f7fd 	.word	0xffe1f7fd
 800c294:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c29c:	f043 0210 	orr.w	r2, r3, #16
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3718      	adds	r7, #24
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop

0800c2b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a88      	ldr	r2, [pc, #544]	; (800c4ec <HAL_ADC_ConfigChannel+0x238>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d009      	beq.n	800c2e4 <HAL_ADC_ConfigChannel+0x30>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a86      	ldr	r2, [pc, #536]	; (800c4f0 <HAL_ADC_ConfigChannel+0x23c>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d004      	beq.n	800c2e4 <HAL_ADC_ConfigChannel+0x30>
 800c2da:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800c2de:	4885      	ldr	r0, [pc, #532]	; (800c4f4 <HAL_ADC_ConfigChannel+0x240>)
 800c2e0:	f7ff f9e8 	bl	800b6b4 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d048      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d044      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d040      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b03      	cmp	r3, #3
 800c302:	d03c      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b04      	cmp	r3, #4
 800c30a:	d038      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b05      	cmp	r3, #5
 800c312:	d034      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2b06      	cmp	r3, #6
 800c31a:	d030      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b07      	cmp	r3, #7
 800c322:	d02c      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b08      	cmp	r3, #8
 800c32a:	d028      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b09      	cmp	r3, #9
 800c332:	d024      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b0a      	cmp	r3, #10
 800c33a:	d020      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b0b      	cmp	r3, #11
 800c342:	d01c      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b0c      	cmp	r3, #12
 800c34a:	d018      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b0d      	cmp	r3, #13
 800c352:	d014      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b0e      	cmp	r3, #14
 800c35a:	d010      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b0f      	cmp	r3, #15
 800c362:	d00c      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b10      	cmp	r3, #16
 800c36a:	d008      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2b11      	cmp	r3, #17
 800c372:	d004      	beq.n	800c37e <HAL_ADC_ConfigChannel+0xca>
 800c374:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800c378:	485e      	ldr	r0, [pc, #376]	; (800c4f4 <HAL_ADC_ConfigChannel+0x240>)
 800c37a:	f7ff f99b 	bl	800b6b4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d040      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	2b02      	cmp	r3, #2
 800c38c:	d03c      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	2b03      	cmp	r3, #3
 800c394:	d038      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	2b04      	cmp	r3, #4
 800c39c:	d034      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	2b05      	cmp	r3, #5
 800c3a4:	d030      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	2b06      	cmp	r3, #6
 800c3ac:	d02c      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	2b07      	cmp	r3, #7
 800c3b4:	d028      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	2b08      	cmp	r3, #8
 800c3bc:	d024      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	2b09      	cmp	r3, #9
 800c3c4:	d020      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	2b0a      	cmp	r3, #10
 800c3cc:	d01c      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	2b0b      	cmp	r3, #11
 800c3d4:	d018      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	2b0c      	cmp	r3, #12
 800c3dc:	d014      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	2b0d      	cmp	r3, #13
 800c3e4:	d010      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	2b0e      	cmp	r3, #14
 800c3ec:	d00c      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	2b0f      	cmp	r3, #15
 800c3f4:	d008      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	2b10      	cmp	r3, #16
 800c3fc:	d004      	beq.n	800c408 <HAL_ADC_ConfigChannel+0x154>
 800c3fe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c402:	483c      	ldr	r0, [pc, #240]	; (800c4f4 <HAL_ADC_ConfigChannel+0x240>)
 800c404:	f7ff f956 	bl	800b6b4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d020      	beq.n	800c452 <HAL_ADC_ConfigChannel+0x19e>
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d01c      	beq.n	800c452 <HAL_ADC_ConfigChannel+0x19e>
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d018      	beq.n	800c452 <HAL_ADC_ConfigChannel+0x19e>
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	2b03      	cmp	r3, #3
 800c426:	d014      	beq.n	800c452 <HAL_ADC_ConfigChannel+0x19e>
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	2b04      	cmp	r3, #4
 800c42e:	d010      	beq.n	800c452 <HAL_ADC_ConfigChannel+0x19e>
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	2b05      	cmp	r3, #5
 800c436:	d00c      	beq.n	800c452 <HAL_ADC_ConfigChannel+0x19e>
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	2b06      	cmp	r3, #6
 800c43e:	d008      	beq.n	800c452 <HAL_ADC_ConfigChannel+0x19e>
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	2b07      	cmp	r3, #7
 800c446:	d004      	beq.n	800c452 <HAL_ADC_ConfigChannel+0x19e>
 800c448:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800c44c:	4829      	ldr	r0, [pc, #164]	; (800c4f4 <HAL_ADC_ConfigChannel+0x240>)
 800c44e:	f7ff f931 	bl	800b6b4 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d101      	bne.n	800c460 <HAL_ADC_ConfigChannel+0x1ac>
 800c45c:	2302      	movs	r3, #2
 800c45e:	e0e2      	b.n	800c626 <HAL_ADC_ConfigChannel+0x372>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	2b06      	cmp	r3, #6
 800c46e:	d81c      	bhi.n	800c4aa <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	685a      	ldr	r2, [r3, #4]
 800c47a:	4613      	mov	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4413      	add	r3, r2
 800c480:	3b05      	subs	r3, #5
 800c482:	221f      	movs	r2, #31
 800c484:	fa02 f303 	lsl.w	r3, r2, r3
 800c488:	43db      	mvns	r3, r3
 800c48a:	4019      	ands	r1, r3
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	6818      	ldr	r0, [r3, #0]
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	685a      	ldr	r2, [r3, #4]
 800c494:	4613      	mov	r3, r2
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	3b05      	subs	r3, #5
 800c49c:	fa00 f203 	lsl.w	r2, r0, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	430a      	orrs	r2, r1
 800c4a6:	635a      	str	r2, [r3, #52]	; 0x34
 800c4a8:	e042      	b.n	800c530 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	2b0c      	cmp	r3, #12
 800c4b0:	d822      	bhi.n	800c4f8 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	4413      	add	r3, r2
 800c4c2:	3b23      	subs	r3, #35	; 0x23
 800c4c4:	221f      	movs	r2, #31
 800c4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ca:	43db      	mvns	r3, r3
 800c4cc:	4019      	ands	r1, r3
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	6818      	ldr	r0, [r3, #0]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	685a      	ldr	r2, [r3, #4]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	4413      	add	r3, r2
 800c4dc:	3b23      	subs	r3, #35	; 0x23
 800c4de:	fa00 f203 	lsl.w	r2, r0, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	631a      	str	r2, [r3, #48]	; 0x30
 800c4ea:	e021      	b.n	800c530 <HAL_ADC_ConfigChannel+0x27c>
 800c4ec:	40012400 	.word	0x40012400
 800c4f0:	40012800 	.word	0x40012800
 800c4f4:	080125c0 	.word	0x080125c0
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	3b41      	subs	r3, #65	; 0x41
 800c50a:	221f      	movs	r2, #31
 800c50c:	fa02 f303 	lsl.w	r3, r2, r3
 800c510:	43db      	mvns	r3, r3
 800c512:	4019      	ands	r1, r3
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	6818      	ldr	r0, [r3, #0]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	4613      	mov	r3, r2
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	4413      	add	r3, r2
 800c522:	3b41      	subs	r3, #65	; 0x41
 800c524:	fa00 f203 	lsl.w	r2, r0, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	430a      	orrs	r2, r1
 800c52e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b09      	cmp	r3, #9
 800c536:	d91c      	bls.n	800c572 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	68d9      	ldr	r1, [r3, #12]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	4613      	mov	r3, r2
 800c544:	005b      	lsls	r3, r3, #1
 800c546:	4413      	add	r3, r2
 800c548:	3b1e      	subs	r3, #30
 800c54a:	2207      	movs	r2, #7
 800c54c:	fa02 f303 	lsl.w	r3, r2, r3
 800c550:	43db      	mvns	r3, r3
 800c552:	4019      	ands	r1, r3
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	6898      	ldr	r0, [r3, #8]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	4613      	mov	r3, r2
 800c55e:	005b      	lsls	r3, r3, #1
 800c560:	4413      	add	r3, r2
 800c562:	3b1e      	subs	r3, #30
 800c564:	fa00 f203 	lsl.w	r2, r0, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	430a      	orrs	r2, r1
 800c56e:	60da      	str	r2, [r3, #12]
 800c570:	e019      	b.n	800c5a6 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6919      	ldr	r1, [r3, #16]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	4613      	mov	r3, r2
 800c57e:	005b      	lsls	r3, r3, #1
 800c580:	4413      	add	r3, r2
 800c582:	2207      	movs	r2, #7
 800c584:	fa02 f303 	lsl.w	r3, r2, r3
 800c588:	43db      	mvns	r3, r3
 800c58a:	4019      	ands	r1, r3
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	6898      	ldr	r0, [r3, #8]
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	4613      	mov	r3, r2
 800c596:	005b      	lsls	r3, r3, #1
 800c598:	4413      	add	r3, r2
 800c59a:	fa00 f203 	lsl.w	r2, r0, r3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	430a      	orrs	r2, r1
 800c5a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b10      	cmp	r3, #16
 800c5ac:	d003      	beq.n	800c5b6 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c5b2:	2b11      	cmp	r3, #17
 800c5b4:	d132      	bne.n	800c61c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a1d      	ldr	r2, [pc, #116]	; (800c630 <HAL_ADC_ConfigChannel+0x37c>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d125      	bne.n	800c60c <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d126      	bne.n	800c61c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	689a      	ldr	r2, [r3, #8]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c5dc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b10      	cmp	r3, #16
 800c5e4:	d11a      	bne.n	800c61c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c5e6:	4b13      	ldr	r3, [pc, #76]	; (800c634 <HAL_ADC_ConfigChannel+0x380>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a13      	ldr	r2, [pc, #76]	; (800c638 <HAL_ADC_ConfigChannel+0x384>)
 800c5ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f0:	0c9a      	lsrs	r2, r3, #18
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800c5fc:	e002      	b.n	800c604 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	3b01      	subs	r3, #1
 800c602:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1f9      	bne.n	800c5fe <HAL_ADC_ConfigChannel+0x34a>
 800c60a:	e007      	b.n	800c61c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c610:	f043 0220 	orr.w	r2, r3, #32
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800c618:	2301      	movs	r3, #1
 800c61a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800c624:	7bfb      	ldrb	r3, [r7, #15]
}
 800c626:	4618      	mov	r0, r3
 800c628:	3710      	adds	r7, #16
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	40012400 	.word	0x40012400
 800c634:	2000009c 	.word	0x2000009c
 800c638:	431bde83 	.word	0x431bde83

0800c63c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c644:	2300      	movs	r3, #0
 800c646:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	2b01      	cmp	r3, #1
 800c654:	d127      	bne.n	800c6a6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	689a      	ldr	r2, [r3, #8]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f022 0201 	bic.w	r2, r2, #1
 800c664:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c666:	f7ff fc8f 	bl	800bf88 <HAL_GetTick>
 800c66a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c66c:	e014      	b.n	800c698 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c66e:	f7ff fc8b 	bl	800bf88 <HAL_GetTick>
 800c672:	4602      	mov	r2, r0
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d90d      	bls.n	800c698 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c680:	f043 0210 	orr.w	r2, r3, #16
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68c:	f043 0201 	orr.w	r2, r3, #1
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	e007      	b.n	800c6a8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f003 0301 	and.w	r3, r3, #1
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d0e3      	beq.n	800c66e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f003 0307 	and.w	r3, r3, #7
 800c6be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c6c0:	4b0c      	ldr	r3, [pc, #48]	; (800c6f4 <__NVIC_SetPriorityGrouping+0x44>)
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c6d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c6dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c6e2:	4a04      	ldr	r2, [pc, #16]	; (800c6f4 <__NVIC_SetPriorityGrouping+0x44>)
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	60d3      	str	r3, [r2, #12]
}
 800c6e8:	bf00      	nop
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bc80      	pop	{r7}
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	e000ed00 	.word	0xe000ed00

0800c6f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c6fc:	4b04      	ldr	r3, [pc, #16]	; (800c710 <__NVIC_GetPriorityGrouping+0x18>)
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	0a1b      	lsrs	r3, r3, #8
 800c702:	f003 0307 	and.w	r3, r3, #7
}
 800c706:	4618      	mov	r0, r3
 800c708:	46bd      	mov	sp, r7
 800c70a:	bc80      	pop	{r7}
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	e000ed00 	.word	0xe000ed00

0800c714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	4603      	mov	r3, r0
 800c71c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c71e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c722:	2b00      	cmp	r3, #0
 800c724:	db0b      	blt.n	800c73e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c726:	79fb      	ldrb	r3, [r7, #7]
 800c728:	f003 021f 	and.w	r2, r3, #31
 800c72c:	4906      	ldr	r1, [pc, #24]	; (800c748 <__NVIC_EnableIRQ+0x34>)
 800c72e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c732:	095b      	lsrs	r3, r3, #5
 800c734:	2001      	movs	r0, #1
 800c736:	fa00 f202 	lsl.w	r2, r0, r2
 800c73a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c73e:	bf00      	nop
 800c740:	370c      	adds	r7, #12
 800c742:	46bd      	mov	sp, r7
 800c744:	bc80      	pop	{r7}
 800c746:	4770      	bx	lr
 800c748:	e000e100 	.word	0xe000e100

0800c74c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	4603      	mov	r3, r0
 800c754:	6039      	str	r1, [r7, #0]
 800c756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	db0a      	blt.n	800c776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	b2da      	uxtb	r2, r3
 800c764:	490c      	ldr	r1, [pc, #48]	; (800c798 <__NVIC_SetPriority+0x4c>)
 800c766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c76a:	0112      	lsls	r2, r2, #4
 800c76c:	b2d2      	uxtb	r2, r2
 800c76e:	440b      	add	r3, r1
 800c770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c774:	e00a      	b.n	800c78c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	b2da      	uxtb	r2, r3
 800c77a:	4908      	ldr	r1, [pc, #32]	; (800c79c <__NVIC_SetPriority+0x50>)
 800c77c:	79fb      	ldrb	r3, [r7, #7]
 800c77e:	f003 030f 	and.w	r3, r3, #15
 800c782:	3b04      	subs	r3, #4
 800c784:	0112      	lsls	r2, r2, #4
 800c786:	b2d2      	uxtb	r2, r2
 800c788:	440b      	add	r3, r1
 800c78a:	761a      	strb	r2, [r3, #24]
}
 800c78c:	bf00      	nop
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	bc80      	pop	{r7}
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	e000e100 	.word	0xe000e100
 800c79c:	e000ed00 	.word	0xe000ed00

0800c7a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b089      	sub	sp, #36	; 0x24
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f003 0307 	and.w	r3, r3, #7
 800c7b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	f1c3 0307 	rsb	r3, r3, #7
 800c7ba:	2b04      	cmp	r3, #4
 800c7bc:	bf28      	it	cs
 800c7be:	2304      	movcs	r3, #4
 800c7c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	2b06      	cmp	r3, #6
 800c7c8:	d902      	bls.n	800c7d0 <NVIC_EncodePriority+0x30>
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	3b03      	subs	r3, #3
 800c7ce:	e000      	b.n	800c7d2 <NVIC_EncodePriority+0x32>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	fa02 f303 	lsl.w	r3, r2, r3
 800c7de:	43da      	mvns	r2, r3
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	401a      	ands	r2, r3
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c7e8:	f04f 31ff 	mov.w	r1, #4294967295
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	fa01 f303 	lsl.w	r3, r1, r3
 800c7f2:	43d9      	mvns	r1, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c7f8:	4313      	orrs	r3, r2
         );
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3724      	adds	r7, #36	; 0x24
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bc80      	pop	{r7}
 800c802:	4770      	bx	lr

0800c804 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800c804:	b480      	push	{r7}
 800c806:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c808:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c80c:	4b05      	ldr	r3, [pc, #20]	; (800c824 <__NVIC_SystemReset+0x20>)
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c814:	4903      	ldr	r1, [pc, #12]	; (800c824 <__NVIC_SystemReset+0x20>)
 800c816:	4b04      	ldr	r3, [pc, #16]	; (800c828 <__NVIC_SystemReset+0x24>)
 800c818:	4313      	orrs	r3, r2
 800c81a:	60cb      	str	r3, [r1, #12]
 800c81c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800c820:	bf00      	nop
 800c822:	e7fd      	b.n	800c820 <__NVIC_SystemReset+0x1c>
 800c824:	e000ed00 	.word	0xe000ed00
 800c828:	05fa0004 	.word	0x05fa0004

0800c82c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	3b01      	subs	r3, #1
 800c838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c83c:	d301      	bcc.n	800c842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c83e:	2301      	movs	r3, #1
 800c840:	e00f      	b.n	800c862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c842:	4a0a      	ldr	r2, [pc, #40]	; (800c86c <SysTick_Config+0x40>)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	3b01      	subs	r3, #1
 800c848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c84a:	210f      	movs	r1, #15
 800c84c:	f04f 30ff 	mov.w	r0, #4294967295
 800c850:	f7ff ff7c 	bl	800c74c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c854:	4b05      	ldr	r3, [pc, #20]	; (800c86c <SysTick_Config+0x40>)
 800c856:	2200      	movs	r2, #0
 800c858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c85a:	4b04      	ldr	r3, [pc, #16]	; (800c86c <SysTick_Config+0x40>)
 800c85c:	2207      	movs	r2, #7
 800c85e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	e000e010 	.word	0xe000e010

0800c870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b07      	cmp	r3, #7
 800c87c:	d00f      	beq.n	800c89e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2b06      	cmp	r3, #6
 800c882:	d00c      	beq.n	800c89e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b05      	cmp	r3, #5
 800c888:	d009      	beq.n	800c89e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b04      	cmp	r3, #4
 800c88e:	d006      	beq.n	800c89e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2b03      	cmp	r3, #3
 800c894:	d003      	beq.n	800c89e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800c896:	2192      	movs	r1, #146	; 0x92
 800c898:	4804      	ldr	r0, [pc, #16]	; (800c8ac <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800c89a:	f7fe ff0b 	bl	800b6b4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f7ff ff06 	bl	800c6b0 <__NVIC_SetPriorityGrouping>
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	080125f8 	.word	0x080125f8

0800c8b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
 800c8bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b0f      	cmp	r3, #15
 800c8c6:	d903      	bls.n	800c8d0 <HAL_NVIC_SetPriority+0x20>
 800c8c8:	21aa      	movs	r1, #170	; 0xaa
 800c8ca:	480e      	ldr	r0, [pc, #56]	; (800c904 <HAL_NVIC_SetPriority+0x54>)
 800c8cc:	f7fe fef2 	bl	800b6b4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2b0f      	cmp	r3, #15
 800c8d4:	d903      	bls.n	800c8de <HAL_NVIC_SetPriority+0x2e>
 800c8d6:	21ab      	movs	r1, #171	; 0xab
 800c8d8:	480a      	ldr	r0, [pc, #40]	; (800c904 <HAL_NVIC_SetPriority+0x54>)
 800c8da:	f7fe feeb 	bl	800b6b4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c8de:	f7ff ff0b 	bl	800c6f8 <__NVIC_GetPriorityGrouping>
 800c8e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	68b9      	ldr	r1, [r7, #8]
 800c8e8:	6978      	ldr	r0, [r7, #20]
 800c8ea:	f7ff ff59 	bl	800c7a0 <NVIC_EncodePriority>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7ff ff28 	bl	800c74c <__NVIC_SetPriority>
}
 800c8fc:	bf00      	nop
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	080125f8 	.word	0x080125f8

0800c908 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	4603      	mov	r3, r0
 800c910:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800c912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c916:	2b00      	cmp	r3, #0
 800c918:	da03      	bge.n	800c922 <HAL_NVIC_EnableIRQ+0x1a>
 800c91a:	21be      	movs	r1, #190	; 0xbe
 800c91c:	4805      	ldr	r0, [pc, #20]	; (800c934 <HAL_NVIC_EnableIRQ+0x2c>)
 800c91e:	f7fe fec9 	bl	800b6b4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff fef4 	bl	800c714 <__NVIC_EnableIRQ>
}
 800c92c:	bf00      	nop
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	080125f8 	.word	0x080125f8

0800c938 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800c93c:	f7ff ff62 	bl	800c804 <__NVIC_SystemReset>

0800c940 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7ff ff6f 	bl	800c82c <SysTick_Config>
 800c94e:	4603      	mov	r3, r0
}
 800c950:	4618      	mov	r0, r3
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c960:	2300      	movs	r3, #0
 800c962:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d005      	beq.n	800c97a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2204      	movs	r2, #4
 800c972:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	73fb      	strb	r3, [r7, #15]
 800c978:	e051      	b.n	800ca1e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f022 020e 	bic.w	r2, r2, #14
 800c988:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f022 0201 	bic.w	r2, r2, #1
 800c998:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a22      	ldr	r2, [pc, #136]	; (800ca28 <HAL_DMA_Abort_IT+0xd0>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d029      	beq.n	800c9f8 <HAL_DMA_Abort_IT+0xa0>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a20      	ldr	r2, [pc, #128]	; (800ca2c <HAL_DMA_Abort_IT+0xd4>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d022      	beq.n	800c9f4 <HAL_DMA_Abort_IT+0x9c>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a1f      	ldr	r2, [pc, #124]	; (800ca30 <HAL_DMA_Abort_IT+0xd8>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d01a      	beq.n	800c9ee <HAL_DMA_Abort_IT+0x96>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a1d      	ldr	r2, [pc, #116]	; (800ca34 <HAL_DMA_Abort_IT+0xdc>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d012      	beq.n	800c9e8 <HAL_DMA_Abort_IT+0x90>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a1c      	ldr	r2, [pc, #112]	; (800ca38 <HAL_DMA_Abort_IT+0xe0>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d00a      	beq.n	800c9e2 <HAL_DMA_Abort_IT+0x8a>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a1a      	ldr	r2, [pc, #104]	; (800ca3c <HAL_DMA_Abort_IT+0xe4>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d102      	bne.n	800c9dc <HAL_DMA_Abort_IT+0x84>
 800c9d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c9da:	e00e      	b.n	800c9fa <HAL_DMA_Abort_IT+0xa2>
 800c9dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c9e0:	e00b      	b.n	800c9fa <HAL_DMA_Abort_IT+0xa2>
 800c9e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c9e6:	e008      	b.n	800c9fa <HAL_DMA_Abort_IT+0xa2>
 800c9e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9ec:	e005      	b.n	800c9fa <HAL_DMA_Abort_IT+0xa2>
 800c9ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9f2:	e002      	b.n	800c9fa <HAL_DMA_Abort_IT+0xa2>
 800c9f4:	2310      	movs	r3, #16
 800c9f6:	e000      	b.n	800c9fa <HAL_DMA_Abort_IT+0xa2>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	4a11      	ldr	r2, [pc, #68]	; (800ca40 <HAL_DMA_Abort_IT+0xe8>)
 800c9fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2201      	movs	r2, #1
 800ca02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d003      	beq.n	800ca1e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	4798      	blx	r3
    } 
  }
  return status;
 800ca1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	40020008 	.word	0x40020008
 800ca2c:	4002001c 	.word	0x4002001c
 800ca30:	40020030 	.word	0x40020030
 800ca34:	40020044 	.word	0x40020044
 800ca38:	40020058 	.word	0x40020058
 800ca3c:	4002006c 	.word	0x4002006c
 800ca40:	40020000 	.word	0x40020000

0800ca44 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ca44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca46:	b087      	sub	sp, #28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800ca56:	2300      	movs	r3, #0
 800ca58:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ca5e:	4b49      	ldr	r3, [pc, #292]	; (800cb84 <HAL_FLASH_Program+0x140>)
 800ca60:	7e1b      	ldrb	r3, [r3, #24]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d101      	bne.n	800ca6a <HAL_FLASH_Program+0x26>
 800ca66:	2302      	movs	r3, #2
 800ca68:	e088      	b.n	800cb7c <HAL_FLASH_Program+0x138>
 800ca6a:	4b46      	ldr	r3, [pc, #280]	; (800cb84 <HAL_FLASH_Program+0x140>)
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d009      	beq.n	800ca8a <HAL_FLASH_Program+0x46>
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d006      	beq.n	800ca8a <HAL_FLASH_Program+0x46>
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2b03      	cmp	r3, #3
 800ca80:	d003      	beq.n	800ca8a <HAL_FLASH_Program+0x46>
 800ca82:	21b2      	movs	r1, #178	; 0xb2
 800ca84:	4840      	ldr	r0, [pc, #256]	; (800cb88 <HAL_FLASH_Program+0x144>)
 800ca86:	f7fe fe15 	bl	800b6b4 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca90:	d31e      	bcc.n	800cad0 <HAL_FLASH_Program+0x8c>
 800ca92:	4b3e      	ldr	r3, [pc, #248]	; (800cb8c <HAL_FLASH_Program+0x148>)
 800ca94:	881b      	ldrh	r3, [r3, #0]
 800ca96:	2b80      	cmp	r3, #128	; 0x80
 800ca98:	d104      	bne.n	800caa4 <HAL_FLASH_Program+0x60>
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	4a3c      	ldr	r2, [pc, #240]	; (800cb90 <HAL_FLASH_Program+0x14c>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d816      	bhi.n	800cad0 <HAL_FLASH_Program+0x8c>
 800caa2:	e019      	b.n	800cad8 <HAL_FLASH_Program+0x94>
 800caa4:	4b39      	ldr	r3, [pc, #228]	; (800cb8c <HAL_FLASH_Program+0x148>)
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	2b40      	cmp	r3, #64	; 0x40
 800caaa:	d104      	bne.n	800cab6 <HAL_FLASH_Program+0x72>
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	4a39      	ldr	r2, [pc, #228]	; (800cb94 <HAL_FLASH_Program+0x150>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d80d      	bhi.n	800cad0 <HAL_FLASH_Program+0x8c>
 800cab4:	e010      	b.n	800cad8 <HAL_FLASH_Program+0x94>
 800cab6:	4b35      	ldr	r3, [pc, #212]	; (800cb8c <HAL_FLASH_Program+0x148>)
 800cab8:	881b      	ldrh	r3, [r3, #0]
 800caba:	2b20      	cmp	r3, #32
 800cabc:	d104      	bne.n	800cac8 <HAL_FLASH_Program+0x84>
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	4a35      	ldr	r2, [pc, #212]	; (800cb98 <HAL_FLASH_Program+0x154>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d804      	bhi.n	800cad0 <HAL_FLASH_Program+0x8c>
 800cac6:	e007      	b.n	800cad8 <HAL_FLASH_Program+0x94>
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	4a34      	ldr	r2, [pc, #208]	; (800cb9c <HAL_FLASH_Program+0x158>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d903      	bls.n	800cad8 <HAL_FLASH_Program+0x94>
 800cad0:	21b3      	movs	r1, #179	; 0xb3
 800cad2:	482d      	ldr	r0, [pc, #180]	; (800cb88 <HAL_FLASH_Program+0x144>)
 800cad4:	f7fe fdee 	bl	800b6b4 <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cad8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cadc:	f000 f8b4 	bl	800cc48 <FLASH_WaitForLastOperation>
 800cae0:	4603      	mov	r3, r0
 800cae2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d144      	bne.n	800cb74 <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d102      	bne.n	800caf6 <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800caf0:	2301      	movs	r3, #1
 800caf2:	757b      	strb	r3, [r7, #21]
 800caf4:	e007      	b.n	800cb06 <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d102      	bne.n	800cb02 <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800cafc:	2302      	movs	r3, #2
 800cafe:	757b      	strb	r3, [r7, #21]
 800cb00:	e001      	b.n	800cb06 <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800cb02:	2304      	movs	r3, #4
 800cb04:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800cb06:	2300      	movs	r3, #0
 800cb08:	75bb      	strb	r3, [r7, #22]
 800cb0a:	e02d      	b.n	800cb68 <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800cb0c:	7dbb      	ldrb	r3, [r7, #22]
 800cb0e:	005a      	lsls	r2, r3, #1
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	eb02 0c03 	add.w	ip, r2, r3
 800cb16:	7dbb      	ldrb	r3, [r7, #22]
 800cb18:	0119      	lsls	r1, r3, #4
 800cb1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb1e:	f1c1 0620 	rsb	r6, r1, #32
 800cb22:	f1a1 0020 	sub.w	r0, r1, #32
 800cb26:	fa22 f401 	lsr.w	r4, r2, r1
 800cb2a:	fa03 f606 	lsl.w	r6, r3, r6
 800cb2e:	4334      	orrs	r4, r6
 800cb30:	fa23 f000 	lsr.w	r0, r3, r0
 800cb34:	4304      	orrs	r4, r0
 800cb36:	fa23 f501 	lsr.w	r5, r3, r1
 800cb3a:	b2a3      	uxth	r3, r4
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	4660      	mov	r0, ip
 800cb40:	f000 f866 	bl	800cc10 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cb44:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cb48:	f000 f87e 	bl	800cc48 <FLASH_WaitForLastOperation>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800cb50:	4b13      	ldr	r3, [pc, #76]	; (800cba0 <HAL_FLASH_Program+0x15c>)
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	4a12      	ldr	r2, [pc, #72]	; (800cba0 <HAL_FLASH_Program+0x15c>)
 800cb56:	f023 0301 	bic.w	r3, r3, #1
 800cb5a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800cb5c:	7dfb      	ldrb	r3, [r7, #23]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d107      	bne.n	800cb72 <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 800cb62:	7dbb      	ldrb	r3, [r7, #22]
 800cb64:	3301      	adds	r3, #1
 800cb66:	75bb      	strb	r3, [r7, #22]
 800cb68:	7dba      	ldrb	r2, [r7, #22]
 800cb6a:	7d7b      	ldrb	r3, [r7, #21]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d3cd      	bcc.n	800cb0c <HAL_FLASH_Program+0xc8>
 800cb70:	e000      	b.n	800cb74 <HAL_FLASH_Program+0x130>
      {
        break;
 800cb72:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cb74:	4b03      	ldr	r3, [pc, #12]	; (800cb84 <HAL_FLASH_Program+0x140>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	761a      	strb	r2, [r3, #24]

  return status;
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	371c      	adds	r7, #28
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb84:	20000808 	.word	0x20000808
 800cb88:	08012634 	.word	0x08012634
 800cb8c:	1ffff7e0 	.word	0x1ffff7e0
 800cb90:	0801ffff 	.word	0x0801ffff
 800cb94:	0800ffff 	.word	0x0800ffff
 800cb98:	08007fff 	.word	0x08007fff
 800cb9c:	08003fff 	.word	0x08003fff
 800cba0:	40022000 	.word	0x40022000

0800cba4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cbae:	4b0d      	ldr	r3, [pc, #52]	; (800cbe4 <HAL_FLASH_Unlock+0x40>)
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00d      	beq.n	800cbd6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800cbba:	4b0a      	ldr	r3, [pc, #40]	; (800cbe4 <HAL_FLASH_Unlock+0x40>)
 800cbbc:	4a0a      	ldr	r2, [pc, #40]	; (800cbe8 <HAL_FLASH_Unlock+0x44>)
 800cbbe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800cbc0:	4b08      	ldr	r3, [pc, #32]	; (800cbe4 <HAL_FLASH_Unlock+0x40>)
 800cbc2:	4a0a      	ldr	r2, [pc, #40]	; (800cbec <HAL_FLASH_Unlock+0x48>)
 800cbc4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cbc6:	4b07      	ldr	r3, [pc, #28]	; (800cbe4 <HAL_FLASH_Unlock+0x40>)
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d001      	beq.n	800cbd6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800cbd6:	79fb      	ldrb	r3, [r7, #7]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bc80      	pop	{r7}
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	40022000 	.word	0x40022000
 800cbe8:	45670123 	.word	0x45670123
 800cbec:	cdef89ab 	.word	0xcdef89ab

0800cbf0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800cbf4:	4b05      	ldr	r3, [pc, #20]	; (800cc0c <HAL_FLASH_Lock+0x1c>)
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	4a04      	ldr	r2, [pc, #16]	; (800cc0c <HAL_FLASH_Lock+0x1c>)
 800cbfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbfe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800cc00:	2300      	movs	r3, #0
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bc80      	pop	{r7}
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	40022000 	.word	0x40022000

0800cc10 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cc1c:	4b08      	ldr	r3, [pc, #32]	; (800cc40 <FLASH_Program_HalfWord+0x30>)
 800cc1e:	2200      	movs	r2, #0
 800cc20:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800cc22:	4b08      	ldr	r3, [pc, #32]	; (800cc44 <FLASH_Program_HalfWord+0x34>)
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	4a07      	ldr	r2, [pc, #28]	; (800cc44 <FLASH_Program_HalfWord+0x34>)
 800cc28:	f043 0301 	orr.w	r3, r3, #1
 800cc2c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	887a      	ldrh	r2, [r7, #2]
 800cc32:	801a      	strh	r2, [r3, #0]
}
 800cc34:	bf00      	nop
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bc80      	pop	{r7}
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	20000808 	.word	0x20000808
 800cc44:	40022000 	.word	0x40022000

0800cc48 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800cc50:	f7ff f99a 	bl	800bf88 <HAL_GetTick>
 800cc54:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cc56:	e010      	b.n	800cc7a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc5e:	d00c      	beq.n	800cc7a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d007      	beq.n	800cc76 <FLASH_WaitForLastOperation+0x2e>
 800cc66:	f7ff f98f 	bl	800bf88 <HAL_GetTick>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d201      	bcs.n	800cc7a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800cc76:	2303      	movs	r3, #3
 800cc78:	e025      	b.n	800ccc6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cc7a:	4b15      	ldr	r3, [pc, #84]	; (800ccd0 <FLASH_WaitForLastOperation+0x88>)
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	f003 0301 	and.w	r3, r3, #1
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1e8      	bne.n	800cc58 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800cc86:	4b12      	ldr	r3, [pc, #72]	; (800ccd0 <FLASH_WaitForLastOperation+0x88>)
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	f003 0320 	and.w	r3, r3, #32
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d002      	beq.n	800cc98 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cc92:	4b0f      	ldr	r3, [pc, #60]	; (800ccd0 <FLASH_WaitForLastOperation+0x88>)
 800cc94:	2220      	movs	r2, #32
 800cc96:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800cc98:	4b0d      	ldr	r3, [pc, #52]	; (800ccd0 <FLASH_WaitForLastOperation+0x88>)
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	f003 0310 	and.w	r3, r3, #16
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10b      	bne.n	800ccbc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800cca4:	4b0a      	ldr	r3, [pc, #40]	; (800ccd0 <FLASH_WaitForLastOperation+0x88>)
 800cca6:	69db      	ldr	r3, [r3, #28]
 800cca8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d105      	bne.n	800ccbc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ccb0:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <FLASH_WaitForLastOperation+0x88>)
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d003      	beq.n	800ccc4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800ccbc:	f000 f80a 	bl	800ccd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e000      	b.n	800ccc6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3710      	adds	r7, #16
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	40022000 	.word	0x40022000

0800ccd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800ccde:	4b23      	ldr	r3, [pc, #140]	; (800cd6c <FLASH_SetErrorCode+0x98>)
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	f003 0310 	and.w	r3, r3, #16
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d009      	beq.n	800ccfe <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ccea:	4b21      	ldr	r3, [pc, #132]	; (800cd70 <FLASH_SetErrorCode+0x9c>)
 800ccec:	69db      	ldr	r3, [r3, #28]
 800ccee:	f043 0302 	orr.w	r3, r3, #2
 800ccf2:	4a1f      	ldr	r2, [pc, #124]	; (800cd70 <FLASH_SetErrorCode+0x9c>)
 800ccf4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f043 0310 	orr.w	r3, r3, #16
 800ccfc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ccfe:	4b1b      	ldr	r3, [pc, #108]	; (800cd6c <FLASH_SetErrorCode+0x98>)
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	f003 0304 	and.w	r3, r3, #4
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d009      	beq.n	800cd1e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800cd0a:	4b19      	ldr	r3, [pc, #100]	; (800cd70 <FLASH_SetErrorCode+0x9c>)
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	f043 0301 	orr.w	r3, r3, #1
 800cd12:	4a17      	ldr	r2, [pc, #92]	; (800cd70 <FLASH_SetErrorCode+0x9c>)
 800cd14:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f043 0304 	orr.w	r3, r3, #4
 800cd1c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800cd1e:	4b13      	ldr	r3, [pc, #76]	; (800cd6c <FLASH_SetErrorCode+0x98>)
 800cd20:	69db      	ldr	r3, [r3, #28]
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00b      	beq.n	800cd42 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800cd2a:	4b11      	ldr	r3, [pc, #68]	; (800cd70 <FLASH_SetErrorCode+0x9c>)
 800cd2c:	69db      	ldr	r3, [r3, #28]
 800cd2e:	f043 0304 	orr.w	r3, r3, #4
 800cd32:	4a0f      	ldr	r2, [pc, #60]	; (800cd70 <FLASH_SetErrorCode+0x9c>)
 800cd34:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800cd36:	4b0d      	ldr	r3, [pc, #52]	; (800cd6c <FLASH_SetErrorCode+0x98>)
 800cd38:	69db      	ldr	r3, [r3, #28]
 800cd3a:	4a0c      	ldr	r2, [pc, #48]	; (800cd6c <FLASH_SetErrorCode+0x98>)
 800cd3c:	f023 0301 	bic.w	r3, r3, #1
 800cd40:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f240 1201 	movw	r2, #257	; 0x101
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d106      	bne.n	800cd5a <FLASH_SetErrorCode+0x86>
 800cd4c:	4b07      	ldr	r3, [pc, #28]	; (800cd6c <FLASH_SetErrorCode+0x98>)
 800cd4e:	69db      	ldr	r3, [r3, #28]
 800cd50:	4a06      	ldr	r2, [pc, #24]	; (800cd6c <FLASH_SetErrorCode+0x98>)
 800cd52:	f023 0301 	bic.w	r3, r3, #1
 800cd56:	61d3      	str	r3, [r2, #28]
}  
 800cd58:	e002      	b.n	800cd60 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800cd5a:	4a04      	ldr	r2, [pc, #16]	; (800cd6c <FLASH_SetErrorCode+0x98>)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	60d3      	str	r3, [r2, #12]
}  
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bc80      	pop	{r7}
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	40022000 	.word	0x40022000
 800cd70:	20000808 	.word	0x20000808

0800cd74 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800cd82:	2300      	movs	r3, #0
 800cd84:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cd86:	4b70      	ldr	r3, [pc, #448]	; (800cf48 <HAL_FLASHEx_Erase+0x1d4>)
 800cd88:	7e1b      	ldrb	r3, [r3, #24]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d101      	bne.n	800cd92 <HAL_FLASHEx_Erase+0x1e>
 800cd8e:	2302      	movs	r3, #2
 800cd90:	e0d5      	b.n	800cf3e <HAL_FLASHEx_Erase+0x1ca>
 800cd92:	4b6d      	ldr	r3, [pc, #436]	; (800cf48 <HAL_FLASHEx_Erase+0x1d4>)
 800cd94:	2201      	movs	r2, #1
 800cd96:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d007      	beq.n	800cdb0 <HAL_FLASHEx_Erase+0x3c>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d003      	beq.n	800cdb0 <HAL_FLASHEx_Erase+0x3c>
 800cda8:	21a8      	movs	r1, #168	; 0xa8
 800cdaa:	4868      	ldr	r0, [pc, #416]	; (800cf4c <HAL_FLASHEx_Erase+0x1d8>)
 800cdac:	f7fe fc82 	bl	800b6b4 <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2b02      	cmp	r3, #2
 800cdb6:	d117      	bne.n	800cde8 <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800cdb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cdbc:	f7ff ff44 	bl	800cc48 <FLASH_WaitForLastOperation>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f040 80b7 	bne.w	800cf36 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800cdc8:	2001      	movs	r0, #1
 800cdca:	f000 f8cd 	bl	800cf68 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cdce:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cdd2:	f7ff ff39 	bl	800cc48 <FLASH_WaitForLastOperation>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800cdda:	4b5d      	ldr	r3, [pc, #372]	; (800cf50 <HAL_FLASHEx_Erase+0x1dc>)
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	4a5c      	ldr	r2, [pc, #368]	; (800cf50 <HAL_FLASHEx_Erase+0x1dc>)
 800cde0:	f023 0304 	bic.w	r3, r3, #4
 800cde4:	6113      	str	r3, [r2, #16]
 800cde6:	e0a6      	b.n	800cf36 <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdf0:	d322      	bcc.n	800ce38 <HAL_FLASHEx_Erase+0xc4>
 800cdf2:	4b58      	ldr	r3, [pc, #352]	; (800cf54 <HAL_FLASHEx_Erase+0x1e0>)
 800cdf4:	881b      	ldrh	r3, [r3, #0]
 800cdf6:	2b80      	cmp	r3, #128	; 0x80
 800cdf8:	d105      	bne.n	800ce06 <HAL_FLASHEx_Erase+0x92>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	4a56      	ldr	r2, [pc, #344]	; (800cf58 <HAL_FLASHEx_Erase+0x1e4>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d819      	bhi.n	800ce38 <HAL_FLASHEx_Erase+0xc4>
 800ce04:	e01c      	b.n	800ce40 <HAL_FLASHEx_Erase+0xcc>
 800ce06:	4b53      	ldr	r3, [pc, #332]	; (800cf54 <HAL_FLASHEx_Erase+0x1e0>)
 800ce08:	881b      	ldrh	r3, [r3, #0]
 800ce0a:	2b40      	cmp	r3, #64	; 0x40
 800ce0c:	d105      	bne.n	800ce1a <HAL_FLASHEx_Erase+0xa6>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	4a52      	ldr	r2, [pc, #328]	; (800cf5c <HAL_FLASHEx_Erase+0x1e8>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d80f      	bhi.n	800ce38 <HAL_FLASHEx_Erase+0xc4>
 800ce18:	e012      	b.n	800ce40 <HAL_FLASHEx_Erase+0xcc>
 800ce1a:	4b4e      	ldr	r3, [pc, #312]	; (800cf54 <HAL_FLASHEx_Erase+0x1e0>)
 800ce1c:	881b      	ldrh	r3, [r3, #0]
 800ce1e:	2b20      	cmp	r3, #32
 800ce20:	d105      	bne.n	800ce2e <HAL_FLASHEx_Erase+0xba>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	4a4e      	ldr	r2, [pc, #312]	; (800cf60 <HAL_FLASHEx_Erase+0x1ec>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d805      	bhi.n	800ce38 <HAL_FLASHEx_Erase+0xc4>
 800ce2c:	e008      	b.n	800ce40 <HAL_FLASHEx_Erase+0xcc>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	4a4c      	ldr	r2, [pc, #304]	; (800cf64 <HAL_FLASHEx_Erase+0x1f0>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d903      	bls.n	800ce40 <HAL_FLASHEx_Erase+0xcc>
 800ce38:	21e9      	movs	r1, #233	; 0xe9
 800ce3a:	4844      	ldr	r0, [pc, #272]	; (800cf4c <HAL_FLASHEx_Erase+0x1d8>)
 800ce3c:	f7fe fc3a 	bl	800b6b4 <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 800ce40:	4b44      	ldr	r3, [pc, #272]	; (800cf54 <HAL_FLASHEx_Erase+0x1e0>)
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	2b80      	cmp	r3, #128	; 0x80
 800ce46:	d10d      	bne.n	800ce64 <HAL_FLASHEx_Erase+0xf0>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	689a      	ldr	r2, [r3, #8]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	029b      	lsls	r3, r3, #10
 800ce52:	4413      	add	r3, r2
 800ce54:	3b01      	subs	r3, #1
 800ce56:	4a40      	ldr	r2, [pc, #256]	; (800cf58 <HAL_FLASHEx_Erase+0x1e4>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	bf94      	ite	ls
 800ce5c:	2301      	movls	r3, #1
 800ce5e:	2300      	movhi	r3, #0
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	e030      	b.n	800cec6 <HAL_FLASHEx_Erase+0x152>
 800ce64:	4b3b      	ldr	r3, [pc, #236]	; (800cf54 <HAL_FLASHEx_Erase+0x1e0>)
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	2b40      	cmp	r3, #64	; 0x40
 800ce6a:	d10d      	bne.n	800ce88 <HAL_FLASHEx_Erase+0x114>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	689a      	ldr	r2, [r3, #8]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	029b      	lsls	r3, r3, #10
 800ce76:	4413      	add	r3, r2
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	4a38      	ldr	r2, [pc, #224]	; (800cf5c <HAL_FLASHEx_Erase+0x1e8>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	bf94      	ite	ls
 800ce80:	2301      	movls	r3, #1
 800ce82:	2300      	movhi	r3, #0
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	e01e      	b.n	800cec6 <HAL_FLASHEx_Erase+0x152>
 800ce88:	4b32      	ldr	r3, [pc, #200]	; (800cf54 <HAL_FLASHEx_Erase+0x1e0>)
 800ce8a:	881b      	ldrh	r3, [r3, #0]
 800ce8c:	2b20      	cmp	r3, #32
 800ce8e:	d10d      	bne.n	800ceac <HAL_FLASHEx_Erase+0x138>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	689a      	ldr	r2, [r3, #8]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	029b      	lsls	r3, r3, #10
 800ce9a:	4413      	add	r3, r2
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	4a30      	ldr	r2, [pc, #192]	; (800cf60 <HAL_FLASHEx_Erase+0x1ec>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	bf94      	ite	ls
 800cea4:	2301      	movls	r3, #1
 800cea6:	2300      	movhi	r3, #0
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	e00c      	b.n	800cec6 <HAL_FLASHEx_Erase+0x152>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	689a      	ldr	r2, [r3, #8]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	029b      	lsls	r3, r3, #10
 800ceb6:	4413      	add	r3, r2
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	4a2a      	ldr	r2, [pc, #168]	; (800cf64 <HAL_FLASHEx_Erase+0x1f0>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	bf94      	ite	ls
 800cec0:	2301      	movls	r3, #1
 800cec2:	2300      	movhi	r3, #0
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d103      	bne.n	800ced2 <HAL_FLASHEx_Erase+0x15e>
 800ceca:	21ea      	movs	r1, #234	; 0xea
 800cecc:	481f      	ldr	r0, [pc, #124]	; (800cf4c <HAL_FLASHEx_Erase+0x1d8>)
 800cece:	f7fe fbf1 	bl	800b6b4 <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800ced2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ced6:	f7ff feb7 	bl	800cc48 <FLASH_WaitForLastOperation>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d12a      	bne.n	800cf36 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	f04f 32ff 	mov.w	r2, #4294967295
 800cee6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	60bb      	str	r3, [r7, #8]
 800ceee:	e019      	b.n	800cf24 <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800cef0:	68b8      	ldr	r0, [r7, #8]
 800cef2:	f000 f85f 	bl	800cfb4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cef6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cefa:	f7ff fea5 	bl	800cc48 <FLASH_WaitForLastOperation>
 800cefe:	4603      	mov	r3, r0
 800cf00:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800cf02:	4b13      	ldr	r3, [pc, #76]	; (800cf50 <HAL_FLASHEx_Erase+0x1dc>)
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	4a12      	ldr	r2, [pc, #72]	; (800cf50 <HAL_FLASHEx_Erase+0x1dc>)
 800cf08:	f023 0302 	bic.w	r3, r3, #2
 800cf0c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d003      	beq.n	800cf1c <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	601a      	str	r2, [r3, #0]
            break;
 800cf1a:	e00c      	b.n	800cf36 <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf22:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	029a      	lsls	r2, r3, #10
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800cf30:	68ba      	ldr	r2, [r7, #8]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d3dc      	bcc.n	800cef0 <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cf36:	4b04      	ldr	r3, [pc, #16]	; (800cf48 <HAL_FLASHEx_Erase+0x1d4>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	761a      	strb	r2, [r3, #24]

  return status;
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	20000808 	.word	0x20000808
 800cf4c:	08012670 	.word	0x08012670
 800cf50:	40022000 	.word	0x40022000
 800cf54:	1ffff7e0 	.word	0x1ffff7e0
 800cf58:	0801ffff 	.word	0x0801ffff
 800cf5c:	0800ffff 	.word	0x0800ffff
 800cf60:	08007fff 	.word	0x08007fff
 800cf64:	08003fff 	.word	0x08003fff

0800cf68 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d004      	beq.n	800cf80 <FLASH_MassErase+0x18>
 800cf76:	f240 2156 	movw	r1, #598	; 0x256
 800cf7a:	480b      	ldr	r0, [pc, #44]	; (800cfa8 <FLASH_MassErase+0x40>)
 800cf7c:	f7fe fb9a 	bl	800b6b4 <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cf80:	4b0a      	ldr	r3, [pc, #40]	; (800cfac <FLASH_MassErase+0x44>)
 800cf82:	2200      	movs	r2, #0
 800cf84:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800cf86:	4b0a      	ldr	r3, [pc, #40]	; (800cfb0 <FLASH_MassErase+0x48>)
 800cf88:	691b      	ldr	r3, [r3, #16]
 800cf8a:	4a09      	ldr	r2, [pc, #36]	; (800cfb0 <FLASH_MassErase+0x48>)
 800cf8c:	f043 0304 	orr.w	r3, r3, #4
 800cf90:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800cf92:	4b07      	ldr	r3, [pc, #28]	; (800cfb0 <FLASH_MassErase+0x48>)
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	4a06      	ldr	r2, [pc, #24]	; (800cfb0 <FLASH_MassErase+0x48>)
 800cf98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf9c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800cf9e:	bf00      	nop
 800cfa0:	3708      	adds	r7, #8
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	08012670 	.word	0x08012670
 800cfac:	20000808 	.word	0x20000808
 800cfb0:	40022000 	.word	0x40022000

0800cfb4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cfbc:	4b0b      	ldr	r3, [pc, #44]	; (800cfec <FLASH_PageErase+0x38>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800cfc2:	4b0b      	ldr	r3, [pc, #44]	; (800cff0 <FLASH_PageErase+0x3c>)
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	4a0a      	ldr	r2, [pc, #40]	; (800cff0 <FLASH_PageErase+0x3c>)
 800cfc8:	f043 0302 	orr.w	r3, r3, #2
 800cfcc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800cfce:	4a08      	ldr	r2, [pc, #32]	; (800cff0 <FLASH_PageErase+0x3c>)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800cfd4:	4b06      	ldr	r3, [pc, #24]	; (800cff0 <FLASH_PageErase+0x3c>)
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	4a05      	ldr	r2, [pc, #20]	; (800cff0 <FLASH_PageErase+0x3c>)
 800cfda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfde:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bc80      	pop	{r7}
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	20000808 	.word	0x20000808
 800cff0:	40022000 	.word	0x40022000

0800cff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08a      	sub	sp, #40	; 0x28
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800cffe:	2300      	movs	r3, #0
 800d000:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800d002:	2300      	movs	r3, #0
 800d004:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	4a9c      	ldr	r2, [pc, #624]	; (800d27c <HAL_GPIO_Init+0x288>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d013      	beq.n	800d036 <HAL_GPIO_Init+0x42>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4a9b      	ldr	r2, [pc, #620]	; (800d280 <HAL_GPIO_Init+0x28c>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d00f      	beq.n	800d036 <HAL_GPIO_Init+0x42>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4a9a      	ldr	r2, [pc, #616]	; (800d284 <HAL_GPIO_Init+0x290>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d00b      	beq.n	800d036 <HAL_GPIO_Init+0x42>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4a99      	ldr	r2, [pc, #612]	; (800d288 <HAL_GPIO_Init+0x294>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d007      	beq.n	800d036 <HAL_GPIO_Init+0x42>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	4a98      	ldr	r2, [pc, #608]	; (800d28c <HAL_GPIO_Init+0x298>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d003      	beq.n	800d036 <HAL_GPIO_Init+0x42>
 800d02e:	21bd      	movs	r1, #189	; 0xbd
 800d030:	4897      	ldr	r0, [pc, #604]	; (800d290 <HAL_GPIO_Init+0x29c>)
 800d032:	f7fe fb3f 	bl	800b6b4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d005      	beq.n	800d04c <HAL_GPIO_Init+0x58>
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	0c1b      	lsrs	r3, r3, #16
 800d046:	041b      	lsls	r3, r3, #16
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d003      	beq.n	800d054 <HAL_GPIO_Init+0x60>
 800d04c:	21be      	movs	r1, #190	; 0xbe
 800d04e:	4890      	ldr	r0, [pc, #576]	; (800d290 <HAL_GPIO_Init+0x29c>)
 800d050:	f7fe fb30 	bl	800b6b4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f000 81eb 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	2b01      	cmp	r3, #1
 800d064:	f000 81e6 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	2b11      	cmp	r3, #17
 800d06e:	f000 81e1 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	2b02      	cmp	r3, #2
 800d078:	f000 81dc 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	2b12      	cmp	r3, #18
 800d082:	f000 81d7 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	4a82      	ldr	r2, [pc, #520]	; (800d294 <HAL_GPIO_Init+0x2a0>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	f000 81d1 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	4a80      	ldr	r2, [pc, #512]	; (800d298 <HAL_GPIO_Init+0x2a4>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	f000 81cb 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	4a7e      	ldr	r2, [pc, #504]	; (800d29c <HAL_GPIO_Init+0x2a8>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	f000 81c5 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	4a7c      	ldr	r2, [pc, #496]	; (800d2a0 <HAL_GPIO_Init+0x2ac>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	f000 81bf 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	4a7a      	ldr	r2, [pc, #488]	; (800d2a4 <HAL_GPIO_Init+0x2b0>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	f000 81b9 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	4a78      	ldr	r2, [pc, #480]	; (800d2a8 <HAL_GPIO_Init+0x2b4>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	f000 81b3 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	f000 81ae 	beq.w	800d434 <HAL_GPIO_Init+0x440>
 800d0d8:	21bf      	movs	r1, #191	; 0xbf
 800d0da:	486d      	ldr	r0, [pc, #436]	; (800d290 <HAL_GPIO_Init+0x29c>)
 800d0dc:	f7fe faea 	bl	800b6b4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d0e0:	e1a8      	b.n	800d434 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ea:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	69fa      	ldr	r2, [r7, #28]
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800d0f6:	69ba      	ldr	r2, [r7, #24]
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	f040 8197 	bne.w	800d42e <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4a5e      	ldr	r2, [pc, #376]	; (800d27c <HAL_GPIO_Init+0x288>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d013      	beq.n	800d130 <HAL_GPIO_Init+0x13c>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	4a5d      	ldr	r2, [pc, #372]	; (800d280 <HAL_GPIO_Init+0x28c>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d00f      	beq.n	800d130 <HAL_GPIO_Init+0x13c>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	4a5c      	ldr	r2, [pc, #368]	; (800d284 <HAL_GPIO_Init+0x290>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d00b      	beq.n	800d130 <HAL_GPIO_Init+0x13c>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	4a5b      	ldr	r2, [pc, #364]	; (800d288 <HAL_GPIO_Init+0x294>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d007      	beq.n	800d130 <HAL_GPIO_Init+0x13c>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	4a5a      	ldr	r2, [pc, #360]	; (800d28c <HAL_GPIO_Init+0x298>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d003      	beq.n	800d130 <HAL_GPIO_Init+0x13c>
 800d128:	21cd      	movs	r1, #205	; 0xcd
 800d12a:	4859      	ldr	r0, [pc, #356]	; (800d290 <HAL_GPIO_Init+0x29c>)
 800d12c:	f7fe fac2 	bl	800b6b4 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	2b12      	cmp	r3, #18
 800d136:	d065      	beq.n	800d204 <HAL_GPIO_Init+0x210>
 800d138:	2b12      	cmp	r3, #18
 800d13a:	d80e      	bhi.n	800d15a <HAL_GPIO_Init+0x166>
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d04c      	beq.n	800d1da <HAL_GPIO_Init+0x1e6>
 800d140:	2b02      	cmp	r3, #2
 800d142:	d804      	bhi.n	800d14e <HAL_GPIO_Init+0x15a>
 800d144:	2b00      	cmp	r3, #0
 800d146:	d072      	beq.n	800d22e <HAL_GPIO_Init+0x23a>
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d01d      	beq.n	800d188 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800d14c:	e0b1      	b.n	800d2b2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d14e:	2b03      	cmp	r3, #3
 800d150:	f000 80ac 	beq.w	800d2ac <HAL_GPIO_Init+0x2b8>
 800d154:	2b11      	cmp	r3, #17
 800d156:	d02b      	beq.n	800d1b0 <HAL_GPIO_Init+0x1bc>
          break;
 800d158:	e0ab      	b.n	800d2b2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d15a:	4a4f      	ldr	r2, [pc, #316]	; (800d298 <HAL_GPIO_Init+0x2a4>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d066      	beq.n	800d22e <HAL_GPIO_Init+0x23a>
 800d160:	4a4d      	ldr	r2, [pc, #308]	; (800d298 <HAL_GPIO_Init+0x2a4>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d806      	bhi.n	800d174 <HAL_GPIO_Init+0x180>
 800d166:	4a4b      	ldr	r2, [pc, #300]	; (800d294 <HAL_GPIO_Init+0x2a0>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d060      	beq.n	800d22e <HAL_GPIO_Init+0x23a>
 800d16c:	4a4c      	ldr	r2, [pc, #304]	; (800d2a0 <HAL_GPIO_Init+0x2ac>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d05d      	beq.n	800d22e <HAL_GPIO_Init+0x23a>
          break;
 800d172:	e09e      	b.n	800d2b2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d174:	4a49      	ldr	r2, [pc, #292]	; (800d29c <HAL_GPIO_Init+0x2a8>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d059      	beq.n	800d22e <HAL_GPIO_Init+0x23a>
 800d17a:	4a4b      	ldr	r2, [pc, #300]	; (800d2a8 <HAL_GPIO_Init+0x2b4>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d056      	beq.n	800d22e <HAL_GPIO_Init+0x23a>
 800d180:	4a48      	ldr	r2, [pc, #288]	; (800d2a4 <HAL_GPIO_Init+0x2b0>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d053      	beq.n	800d22e <HAL_GPIO_Init+0x23a>
          break;
 800d186:	e094      	b.n	800d2b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	2b02      	cmp	r3, #2
 800d18e:	d00b      	beq.n	800d1a8 <HAL_GPIO_Init+0x1b4>
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d007      	beq.n	800d1a8 <HAL_GPIO_Init+0x1b4>
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	d003      	beq.n	800d1a8 <HAL_GPIO_Init+0x1b4>
 800d1a0:	21d5      	movs	r1, #213	; 0xd5
 800d1a2:	483b      	ldr	r0, [pc, #236]	; (800d290 <HAL_GPIO_Init+0x29c>)
 800d1a4:	f7fe fa86 	bl	800b6b4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	623b      	str	r3, [r7, #32]
          break;
 800d1ae:	e080      	b.n	800d2b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d00b      	beq.n	800d1d0 <HAL_GPIO_Init+0x1dc>
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d007      	beq.n	800d1d0 <HAL_GPIO_Init+0x1dc>
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	2b03      	cmp	r3, #3
 800d1c6:	d003      	beq.n	800d1d0 <HAL_GPIO_Init+0x1dc>
 800d1c8:	21dc      	movs	r1, #220	; 0xdc
 800d1ca:	4831      	ldr	r0, [pc, #196]	; (800d290 <HAL_GPIO_Init+0x29c>)
 800d1cc:	f7fe fa72 	bl	800b6b4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	3304      	adds	r3, #4
 800d1d6:	623b      	str	r3, [r7, #32]
          break;
 800d1d8:	e06b      	b.n	800d2b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	2b02      	cmp	r3, #2
 800d1e0:	d00b      	beq.n	800d1fa <HAL_GPIO_Init+0x206>
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d007      	beq.n	800d1fa <HAL_GPIO_Init+0x206>
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	2b03      	cmp	r3, #3
 800d1f0:	d003      	beq.n	800d1fa <HAL_GPIO_Init+0x206>
 800d1f2:	21e3      	movs	r1, #227	; 0xe3
 800d1f4:	4826      	ldr	r0, [pc, #152]	; (800d290 <HAL_GPIO_Init+0x29c>)
 800d1f6:	f7fe fa5d 	bl	800b6b4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	3308      	adds	r3, #8
 800d200:	623b      	str	r3, [r7, #32]
          break;
 800d202:	e056      	b.n	800d2b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d00b      	beq.n	800d224 <HAL_GPIO_Init+0x230>
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d007      	beq.n	800d224 <HAL_GPIO_Init+0x230>
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	2b03      	cmp	r3, #3
 800d21a:	d003      	beq.n	800d224 <HAL_GPIO_Init+0x230>
 800d21c:	21ea      	movs	r1, #234	; 0xea
 800d21e:	481c      	ldr	r0, [pc, #112]	; (800d290 <HAL_GPIO_Init+0x29c>)
 800d220:	f7fe fa48 	bl	800b6b4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	330c      	adds	r3, #12
 800d22a:	623b      	str	r3, [r7, #32]
          break;
 800d22c:	e041      	b.n	800d2b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00b      	beq.n	800d24e <HAL_GPIO_Init+0x25a>
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d007      	beq.n	800d24e <HAL_GPIO_Init+0x25a>
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	2b02      	cmp	r3, #2
 800d244:	d003      	beq.n	800d24e <HAL_GPIO_Init+0x25a>
 800d246:	21f7      	movs	r1, #247	; 0xf7
 800d248:	4811      	ldr	r0, [pc, #68]	; (800d290 <HAL_GPIO_Init+0x29c>)
 800d24a:	f7fe fa33 	bl	800b6b4 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d102      	bne.n	800d25c <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800d256:	2304      	movs	r3, #4
 800d258:	623b      	str	r3, [r7, #32]
          break;
 800d25a:	e02a      	b.n	800d2b2 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d105      	bne.n	800d270 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d264:	2308      	movs	r3, #8
 800d266:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	69fa      	ldr	r2, [r7, #28]
 800d26c:	611a      	str	r2, [r3, #16]
          break;
 800d26e:	e020      	b.n	800d2b2 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d270:	2308      	movs	r3, #8
 800d272:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	69fa      	ldr	r2, [r7, #28]
 800d278:	615a      	str	r2, [r3, #20]
          break;
 800d27a:	e01a      	b.n	800d2b2 <HAL_GPIO_Init+0x2be>
 800d27c:	40010800 	.word	0x40010800
 800d280:	40010c00 	.word	0x40010c00
 800d284:	40011000 	.word	0x40011000
 800d288:	40011400 	.word	0x40011400
 800d28c:	40011800 	.word	0x40011800
 800d290:	080126b0 	.word	0x080126b0
 800d294:	10110000 	.word	0x10110000
 800d298:	10210000 	.word	0x10210000
 800d29c:	10310000 	.word	0x10310000
 800d2a0:	10120000 	.word	0x10120000
 800d2a4:	10220000 	.word	0x10220000
 800d2a8:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	623b      	str	r3, [r7, #32]
          break;
 800d2b0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	2bff      	cmp	r3, #255	; 0xff
 800d2b6:	d801      	bhi.n	800d2bc <HAL_GPIO_Init+0x2c8>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	e001      	b.n	800d2c0 <HAL_GPIO_Init+0x2cc>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	3304      	adds	r3, #4
 800d2c0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	2bff      	cmp	r3, #255	; 0xff
 800d2c6:	d802      	bhi.n	800d2ce <HAL_GPIO_Init+0x2da>
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	e002      	b.n	800d2d4 <HAL_GPIO_Init+0x2e0>
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	3b08      	subs	r3, #8
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	210f      	movs	r1, #15
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	fa01 f303 	lsl.w	r3, r1, r3
 800d2e2:	43db      	mvns	r3, r3
 800d2e4:	401a      	ands	r2, r3
 800d2e6:	6a39      	ldr	r1, [r7, #32]
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d2ee:	431a      	orrs	r2, r3
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f000 8096 	beq.w	800d42e <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800d302:	4b52      	ldr	r3, [pc, #328]	; (800d44c <HAL_GPIO_Init+0x458>)
 800d304:	699b      	ldr	r3, [r3, #24]
 800d306:	4a51      	ldr	r2, [pc, #324]	; (800d44c <HAL_GPIO_Init+0x458>)
 800d308:	f043 0301 	orr.w	r3, r3, #1
 800d30c:	6193      	str	r3, [r2, #24]
 800d30e:	4b4f      	ldr	r3, [pc, #316]	; (800d44c <HAL_GPIO_Init+0x458>)
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	f003 0301 	and.w	r3, r3, #1
 800d316:	60bb      	str	r3, [r7, #8]
 800d318:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800d31a:	4a4d      	ldr	r2, [pc, #308]	; (800d450 <HAL_GPIO_Init+0x45c>)
 800d31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31e:	089b      	lsrs	r3, r3, #2
 800d320:	3302      	adds	r3, #2
 800d322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d326:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32a:	f003 0303 	and.w	r3, r3, #3
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	220f      	movs	r2, #15
 800d332:	fa02 f303 	lsl.w	r3, r2, r3
 800d336:	43db      	mvns	r3, r3
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	4013      	ands	r3, r2
 800d33c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4a44      	ldr	r2, [pc, #272]	; (800d454 <HAL_GPIO_Init+0x460>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d013      	beq.n	800d36e <HAL_GPIO_Init+0x37a>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4a43      	ldr	r2, [pc, #268]	; (800d458 <HAL_GPIO_Init+0x464>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d00d      	beq.n	800d36a <HAL_GPIO_Init+0x376>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4a42      	ldr	r2, [pc, #264]	; (800d45c <HAL_GPIO_Init+0x468>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d007      	beq.n	800d366 <HAL_GPIO_Init+0x372>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4a41      	ldr	r2, [pc, #260]	; (800d460 <HAL_GPIO_Init+0x46c>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d101      	bne.n	800d362 <HAL_GPIO_Init+0x36e>
 800d35e:	2303      	movs	r3, #3
 800d360:	e006      	b.n	800d370 <HAL_GPIO_Init+0x37c>
 800d362:	2304      	movs	r3, #4
 800d364:	e004      	b.n	800d370 <HAL_GPIO_Init+0x37c>
 800d366:	2302      	movs	r3, #2
 800d368:	e002      	b.n	800d370 <HAL_GPIO_Init+0x37c>
 800d36a:	2301      	movs	r3, #1
 800d36c:	e000      	b.n	800d370 <HAL_GPIO_Init+0x37c>
 800d36e:	2300      	movs	r3, #0
 800d370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d372:	f002 0203 	and.w	r2, r2, #3
 800d376:	0092      	lsls	r2, r2, #2
 800d378:	4093      	lsls	r3, r2
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800d380:	4933      	ldr	r1, [pc, #204]	; (800d450 <HAL_GPIO_Init+0x45c>)
 800d382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d384:	089b      	lsrs	r3, r3, #2
 800d386:	3302      	adds	r3, #2
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d396:	2b00      	cmp	r3, #0
 800d398:	d006      	beq.n	800d3a8 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800d39a:	4b32      	ldr	r3, [pc, #200]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	4931      	ldr	r1, [pc, #196]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	600b      	str	r3, [r1, #0]
 800d3a6:	e006      	b.n	800d3b6 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800d3a8:	4b2e      	ldr	r3, [pc, #184]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	43db      	mvns	r3, r3
 800d3b0:	492c      	ldr	r1, [pc, #176]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d3b2:	4013      	ands	r3, r2
 800d3b4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d006      	beq.n	800d3d0 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800d3c2:	4b28      	ldr	r3, [pc, #160]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d3c4:	685a      	ldr	r2, [r3, #4]
 800d3c6:	4927      	ldr	r1, [pc, #156]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d3c8:	69bb      	ldr	r3, [r7, #24]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	604b      	str	r3, [r1, #4]
 800d3ce:	e006      	b.n	800d3de <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800d3d0:	4b24      	ldr	r3, [pc, #144]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	43db      	mvns	r3, r3
 800d3d8:	4922      	ldr	r1, [pc, #136]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d3da:	4013      	ands	r3, r2
 800d3dc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d006      	beq.n	800d3f8 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800d3ea:	4b1e      	ldr	r3, [pc, #120]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d3ec:	689a      	ldr	r2, [r3, #8]
 800d3ee:	491d      	ldr	r1, [pc, #116]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	608b      	str	r3, [r1, #8]
 800d3f6:	e006      	b.n	800d406 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800d3f8:	4b1a      	ldr	r3, [pc, #104]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d3fa:	689a      	ldr	r2, [r3, #8]
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	43db      	mvns	r3, r3
 800d400:	4918      	ldr	r1, [pc, #96]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d402:	4013      	ands	r3, r2
 800d404:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d006      	beq.n	800d420 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800d412:	4b14      	ldr	r3, [pc, #80]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d414:	68da      	ldr	r2, [r3, #12]
 800d416:	4913      	ldr	r1, [pc, #76]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	4313      	orrs	r3, r2
 800d41c:	60cb      	str	r3, [r1, #12]
 800d41e:	e006      	b.n	800d42e <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800d420:	4b10      	ldr	r3, [pc, #64]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d422:	68da      	ldr	r2, [r3, #12]
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	43db      	mvns	r3, r3
 800d428:	490e      	ldr	r1, [pc, #56]	; (800d464 <HAL_GPIO_Init+0x470>)
 800d42a:	4013      	ands	r3, r2
 800d42c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800d42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d430:	3301      	adds	r3, #1
 800d432:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43a:	fa22 f303 	lsr.w	r3, r2, r3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	f47f ae4f 	bne.w	800d0e2 <HAL_GPIO_Init+0xee>
  }
}
 800d444:	bf00      	nop
 800d446:	3728      	adds	r7, #40	; 0x28
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	40021000 	.word	0x40021000
 800d450:	40010000 	.word	0x40010000
 800d454:	40010800 	.word	0x40010800
 800d458:	40010c00 	.word	0x40010c00
 800d45c:	40011000 	.word	0x40011000
 800d460:	40011400 	.word	0x40011400
 800d464:	40010400 	.word	0x40010400

0800d468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	460b      	mov	r3, r1
 800d472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d474:	887b      	ldrh	r3, [r7, #2]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d004      	beq.n	800d484 <HAL_GPIO_ReadPin+0x1c>
 800d47a:	887b      	ldrh	r3, [r7, #2]
 800d47c:	0c1b      	lsrs	r3, r3, #16
 800d47e:	041b      	lsls	r3, r3, #16
 800d480:	2b00      	cmp	r3, #0
 800d482:	d004      	beq.n	800d48e <HAL_GPIO_ReadPin+0x26>
 800d484:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800d488:	4809      	ldr	r0, [pc, #36]	; (800d4b0 <HAL_GPIO_ReadPin+0x48>)
 800d48a:	f7fe f913 	bl	800b6b4 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	689a      	ldr	r2, [r3, #8]
 800d492:	887b      	ldrh	r3, [r7, #2]
 800d494:	4013      	ands	r3, r2
 800d496:	2b00      	cmp	r3, #0
 800d498:	d002      	beq.n	800d4a0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800d49a:	2301      	movs	r3, #1
 800d49c:	73fb      	strb	r3, [r7, #15]
 800d49e:	e001      	b.n	800d4a4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	080126b0 	.word	0x080126b0

0800d4b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	460b      	mov	r3, r1
 800d4be:	807b      	strh	r3, [r7, #2]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d4c4:	887b      	ldrh	r3, [r7, #2]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d004      	beq.n	800d4d4 <HAL_GPIO_WritePin+0x20>
 800d4ca:	887b      	ldrh	r3, [r7, #2]
 800d4cc:	0c1b      	lsrs	r3, r3, #16
 800d4ce:	041b      	lsls	r3, r3, #16
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d004      	beq.n	800d4de <HAL_GPIO_WritePin+0x2a>
 800d4d4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d4d8:	480e      	ldr	r0, [pc, #56]	; (800d514 <HAL_GPIO_WritePin+0x60>)
 800d4da:	f7fe f8eb 	bl	800b6b4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800d4de:	787b      	ldrb	r3, [r7, #1]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d007      	beq.n	800d4f4 <HAL_GPIO_WritePin+0x40>
 800d4e4:	787b      	ldrb	r3, [r7, #1]
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d004      	beq.n	800d4f4 <HAL_GPIO_WritePin+0x40>
 800d4ea:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d4ee:	4809      	ldr	r0, [pc, #36]	; (800d514 <HAL_GPIO_WritePin+0x60>)
 800d4f0:	f7fe f8e0 	bl	800b6b4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800d4f4:	787b      	ldrb	r3, [r7, #1]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d003      	beq.n	800d502 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d4fa:	887a      	ldrh	r2, [r7, #2]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800d500:	e003      	b.n	800d50a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800d502:	887b      	ldrh	r3, [r7, #2]
 800d504:	041a      	lsls	r2, r3, #16
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	611a      	str	r2, [r3, #16]
}
 800d50a:	bf00      	nop
 800d50c:	3708      	adds	r7, #8
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	080126b0 	.word	0x080126b0

0800d518 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	460b      	mov	r3, r1
 800d522:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d524:	887b      	ldrh	r3, [r7, #2]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d004      	beq.n	800d534 <HAL_GPIO_TogglePin+0x1c>
 800d52a:	887b      	ldrh	r3, [r7, #2]
 800d52c:	0c1b      	lsrs	r3, r3, #16
 800d52e:	041b      	lsls	r3, r3, #16
 800d530:	2b00      	cmp	r3, #0
 800d532:	d004      	beq.n	800d53e <HAL_GPIO_TogglePin+0x26>
 800d534:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800d538:	4809      	ldr	r0, [pc, #36]	; (800d560 <HAL_GPIO_TogglePin+0x48>)
 800d53a:	f7fe f8bb 	bl	800b6b4 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	68da      	ldr	r2, [r3, #12]
 800d542:	887b      	ldrh	r3, [r7, #2]
 800d544:	4013      	ands	r3, r2
 800d546:	2b00      	cmp	r3, #0
 800d548:	d003      	beq.n	800d552 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d54a:	887a      	ldrh	r2, [r7, #2]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800d550:	e002      	b.n	800d558 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d552:	887a      	ldrh	r2, [r7, #2]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	611a      	str	r2, [r3, #16]
}
 800d558:	bf00      	nop
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	080126b0 	.word	0x080126b0

0800d564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d101      	bne.n	800d576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	e1ab      	b.n	800d8ce <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4aa0      	ldr	r2, [pc, #640]	; (800d7fc <HAL_I2C_Init+0x298>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d009      	beq.n	800d594 <HAL_I2C_Init+0x30>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a9e      	ldr	r2, [pc, #632]	; (800d800 <HAL_I2C_Init+0x29c>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d004      	beq.n	800d594 <HAL_I2C_Init+0x30>
 800d58a:	f240 11d1 	movw	r1, #465	; 0x1d1
 800d58e:	489d      	ldr	r0, [pc, #628]	; (800d804 <HAL_I2C_Init+0x2a0>)
 800d590:	f7fe f890 	bl	800b6b4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d004      	beq.n	800d5a6 <HAL_I2C_Init+0x42>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	4a99      	ldr	r2, [pc, #612]	; (800d808 <HAL_I2C_Init+0x2a4>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d904      	bls.n	800d5b0 <HAL_I2C_Init+0x4c>
 800d5a6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800d5aa:	4896      	ldr	r0, [pc, #600]	; (800d804 <HAL_I2C_Init+0x2a0>)
 800d5ac:	f7fe f882 	bl	800b6b4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d009      	beq.n	800d5cc <HAL_I2C_Init+0x68>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5c0:	d004      	beq.n	800d5cc <HAL_I2C_Init+0x68>
 800d5c2:	f240 11d3 	movw	r1, #467	; 0x1d3
 800d5c6:	488f      	ldr	r0, [pc, #572]	; (800d804 <HAL_I2C_Init+0x2a0>)
 800d5c8:	f7fe f874 	bl	800b6b4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d5d4:	f023 0303 	bic.w	r3, r3, #3
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d004      	beq.n	800d5e6 <HAL_I2C_Init+0x82>
 800d5dc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d5e0:	4888      	ldr	r0, [pc, #544]	; (800d804 <HAL_I2C_Init+0x2a0>)
 800d5e2:	f7fe f867 	bl	800b6b4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	691b      	ldr	r3, [r3, #16]
 800d5ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5ee:	d009      	beq.n	800d604 <HAL_I2C_Init+0xa0>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d5f8:	d004      	beq.n	800d604 <HAL_I2C_Init+0xa0>
 800d5fa:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d5fe:	4881      	ldr	r0, [pc, #516]	; (800d804 <HAL_I2C_Init+0x2a0>)
 800d600:	f7fe f858 	bl	800b6b4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	695b      	ldr	r3, [r3, #20]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d008      	beq.n	800d61e <HAL_I2C_Init+0xba>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	695b      	ldr	r3, [r3, #20]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d004      	beq.n	800d61e <HAL_I2C_Init+0xba>
 800d614:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800d618:	487a      	ldr	r0, [pc, #488]	; (800d804 <HAL_I2C_Init+0x2a0>)
 800d61a:	f7fe f84b 	bl	800b6b4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	699b      	ldr	r3, [r3, #24]
 800d622:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800d626:	2b00      	cmp	r3, #0
 800d628:	d004      	beq.n	800d634 <HAL_I2C_Init+0xd0>
 800d62a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800d62e:	4875      	ldr	r0, [pc, #468]	; (800d804 <HAL_I2C_Init+0x2a0>)
 800d630:	f7fe f840 	bl	800b6b4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	69db      	ldr	r3, [r3, #28]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d008      	beq.n	800d64e <HAL_I2C_Init+0xea>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	69db      	ldr	r3, [r3, #28]
 800d640:	2b40      	cmp	r3, #64	; 0x40
 800d642:	d004      	beq.n	800d64e <HAL_I2C_Init+0xea>
 800d644:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800d648:	486e      	ldr	r0, [pc, #440]	; (800d804 <HAL_I2C_Init+0x2a0>)
 800d64a:	f7fe f833 	bl	800b6b4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6a1b      	ldr	r3, [r3, #32]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d008      	beq.n	800d668 <HAL_I2C_Init+0x104>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6a1b      	ldr	r3, [r3, #32]
 800d65a:	2b80      	cmp	r3, #128	; 0x80
 800d65c:	d004      	beq.n	800d668 <HAL_I2C_Init+0x104>
 800d65e:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d662:	4868      	ldr	r0, [pc, #416]	; (800d804 <HAL_I2C_Init+0x2a0>)
 800d664:	f7fe f826 	bl	800b6b4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	d106      	bne.n	800d682 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7fd ff23 	bl	800b4c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2224      	movs	r2, #36	; 0x24
 800d686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f022 0201 	bic.w	r2, r2, #1
 800d698:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d6a8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d6b8:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d6ba:	f001 fcfd 	bl	800f0b8 <HAL_RCC_GetPCLK1Freq>
 800d6be:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	4a51      	ldr	r2, [pc, #324]	; (800d80c <HAL_I2C_Init+0x2a8>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d807      	bhi.n	800d6da <HAL_I2C_Init+0x176>
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	4a50      	ldr	r2, [pc, #320]	; (800d810 <HAL_I2C_Init+0x2ac>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	bf94      	ite	ls
 800d6d2:	2301      	movls	r3, #1
 800d6d4:	2300      	movhi	r3, #0
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	e006      	b.n	800d6e8 <HAL_I2C_Init+0x184>
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	4a4d      	ldr	r2, [pc, #308]	; (800d814 <HAL_I2C_Init+0x2b0>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	bf94      	ite	ls
 800d6e2:	2301      	movls	r3, #1
 800d6e4:	2300      	movhi	r3, #0
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d001      	beq.n	800d6f0 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e0ee      	b.n	800d8ce <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	4a49      	ldr	r2, [pc, #292]	; (800d818 <HAL_I2C_Init+0x2b4>)
 800d6f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d6f8:	0c9b      	lsrs	r3, r3, #18
 800d6fa:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	68ba      	ldr	r2, [r7, #8]
 800d70c:	430a      	orrs	r2, r1
 800d70e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	6a1b      	ldr	r3, [r3, #32]
 800d716:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	4a3b      	ldr	r2, [pc, #236]	; (800d80c <HAL_I2C_Init+0x2a8>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d802      	bhi.n	800d72a <HAL_I2C_Init+0x1c6>
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	3301      	adds	r3, #1
 800d728:	e009      	b.n	800d73e <HAL_I2C_Init+0x1da>
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d730:	fb02 f303 	mul.w	r3, r2, r3
 800d734:	4a39      	ldr	r2, [pc, #228]	; (800d81c <HAL_I2C_Init+0x2b8>)
 800d736:	fba2 2303 	umull	r2, r3, r2, r3
 800d73a:	099b      	lsrs	r3, r3, #6
 800d73c:	3301      	adds	r3, #1
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	6812      	ldr	r2, [r2, #0]
 800d742:	430b      	orrs	r3, r1
 800d744:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	69db      	ldr	r3, [r3, #28]
 800d74c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d750:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	492c      	ldr	r1, [pc, #176]	; (800d80c <HAL_I2C_Init+0x2a8>)
 800d75a:	428b      	cmp	r3, r1
 800d75c:	d80d      	bhi.n	800d77a <HAL_I2C_Init+0x216>
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	1e59      	subs	r1, r3, #1
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	005b      	lsls	r3, r3, #1
 800d768:	fbb1 f3f3 	udiv	r3, r1, r3
 800d76c:	3301      	adds	r3, #1
 800d76e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d772:	2b04      	cmp	r3, #4
 800d774:	bf38      	it	cc
 800d776:	2304      	movcc	r3, #4
 800d778:	e062      	b.n	800d840 <HAL_I2C_Init+0x2dc>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d111      	bne.n	800d7a6 <HAL_I2C_Init+0x242>
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	1e58      	subs	r0, r3, #1
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6859      	ldr	r1, [r3, #4]
 800d78a:	460b      	mov	r3, r1
 800d78c:	005b      	lsls	r3, r3, #1
 800d78e:	440b      	add	r3, r1
 800d790:	fbb0 f3f3 	udiv	r3, r0, r3
 800d794:	3301      	adds	r3, #1
 800d796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	bf0c      	ite	eq
 800d79e:	2301      	moveq	r3, #1
 800d7a0:	2300      	movne	r3, #0
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	e012      	b.n	800d7cc <HAL_I2C_Init+0x268>
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	1e58      	subs	r0, r3, #1
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6859      	ldr	r1, [r3, #4]
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	440b      	add	r3, r1
 800d7b4:	0099      	lsls	r1, r3, #2
 800d7b6:	440b      	add	r3, r1
 800d7b8:	fbb0 f3f3 	udiv	r3, r0, r3
 800d7bc:	3301      	adds	r3, #1
 800d7be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	bf0c      	ite	eq
 800d7c6:	2301      	moveq	r3, #1
 800d7c8:	2300      	movne	r3, #0
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d001      	beq.n	800d7d4 <HAL_I2C_Init+0x270>
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e035      	b.n	800d840 <HAL_I2C_Init+0x2dc>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d121      	bne.n	800d820 <HAL_I2C_Init+0x2bc>
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	1e58      	subs	r0, r3, #1
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6859      	ldr	r1, [r3, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	440b      	add	r3, r1
 800d7ea:	fbb0 f3f3 	udiv	r3, r0, r3
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d7f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7f8:	e022      	b.n	800d840 <HAL_I2C_Init+0x2dc>
 800d7fa:	bf00      	nop
 800d7fc:	40005400 	.word	0x40005400
 800d800:	40005800 	.word	0x40005800
 800d804:	080126ec 	.word	0x080126ec
 800d808:	00061a80 	.word	0x00061a80
 800d80c:	000186a0 	.word	0x000186a0
 800d810:	001e847f 	.word	0x001e847f
 800d814:	003d08ff 	.word	0x003d08ff
 800d818:	431bde83 	.word	0x431bde83
 800d81c:	10624dd3 	.word	0x10624dd3
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	1e58      	subs	r0, r3, #1
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6859      	ldr	r1, [r3, #4]
 800d828:	460b      	mov	r3, r1
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	440b      	add	r3, r1
 800d82e:	0099      	lsls	r1, r3, #2
 800d830:	440b      	add	r3, r1
 800d832:	fbb0 f3f3 	udiv	r3, r0, r3
 800d836:	3301      	adds	r3, #1
 800d838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d83c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d840:	6879      	ldr	r1, [r7, #4]
 800d842:	6809      	ldr	r1, [r1, #0]
 800d844:	4313      	orrs	r3, r2
 800d846:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	69da      	ldr	r2, [r3, #28]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6a1b      	ldr	r3, [r3, #32]
 800d85a:	431a      	orrs	r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	430a      	orrs	r2, r1
 800d862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d86e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	6911      	ldr	r1, [r2, #16]
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	68d2      	ldr	r2, [r2, #12]
 800d87a:	4311      	orrs	r1, r2
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	6812      	ldr	r2, [r2, #0]
 800d880:	430b      	orrs	r3, r1
 800d882:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	695a      	ldr	r2, [r3, #20]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	431a      	orrs	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	430a      	orrs	r2, r1
 800d89e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f042 0201 	orr.w	r2, r2, #1
 800d8ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2220      	movs	r2, #32
 800d8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3710      	adds	r7, #16
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop

0800d8d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b088      	sub	sp, #32
 800d8dc:	af02      	add	r7, sp, #8
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	607a      	str	r2, [r7, #4]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	817b      	strh	r3, [r7, #10]
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d8ec:	f7fe fb4c 	bl	800bf88 <HAL_GetTick>
 800d8f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	2b20      	cmp	r3, #32
 800d8fc:	f040 80e0 	bne.w	800dac0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	9300      	str	r3, [sp, #0]
 800d904:	2319      	movs	r3, #25
 800d906:	2201      	movs	r2, #1
 800d908:	4970      	ldr	r1, [pc, #448]	; (800dacc <HAL_I2C_Master_Transmit+0x1f4>)
 800d90a:	68f8      	ldr	r0, [r7, #12]
 800d90c:	f000 fc8c 	bl	800e228 <I2C_WaitOnFlagUntilTimeout>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	d001      	beq.n	800d91a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d916:	2302      	movs	r3, #2
 800d918:	e0d3      	b.n	800dac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d920:	2b01      	cmp	r3, #1
 800d922:	d101      	bne.n	800d928 <HAL_I2C_Master_Transmit+0x50>
 800d924:	2302      	movs	r3, #2
 800d926:	e0cc      	b.n	800dac2 <HAL_I2C_Master_Transmit+0x1ea>
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2201      	movs	r2, #1
 800d92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d007      	beq.n	800d94e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f042 0201 	orr.w	r2, r2, #1
 800d94c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d95c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2221      	movs	r2, #33	; 0x21
 800d962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2210      	movs	r2, #16
 800d96a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2200      	movs	r2, #0
 800d972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	893a      	ldrh	r2, [r7, #8]
 800d97e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d984:	b29a      	uxth	r2, r3
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	4a50      	ldr	r2, [pc, #320]	; (800dad0 <HAL_I2C_Master_Transmit+0x1f8>)
 800d98e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d990:	8979      	ldrh	r1, [r7, #10]
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	6a3a      	ldr	r2, [r7, #32]
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f000 faf6 	bl	800df88 <I2C_MasterRequestWrite>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d001      	beq.n	800d9a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e08d      	b.n	800dac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	613b      	str	r3, [r7, #16]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	695b      	ldr	r3, [r3, #20]
 800d9b0:	613b      	str	r3, [r7, #16]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	613b      	str	r3, [r7, #16]
 800d9ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d9bc:	e066      	b.n	800da8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d9be:	697a      	ldr	r2, [r7, #20]
 800d9c0:	6a39      	ldr	r1, [r7, #32]
 800d9c2:	68f8      	ldr	r0, [r7, #12]
 800d9c4:	f000 fd06 	bl	800e3d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00d      	beq.n	800d9ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d2:	2b04      	cmp	r3, #4
 800d9d4:	d107      	bne.n	800d9e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e06b      	b.n	800dac2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ee:	781a      	ldrb	r2, [r3, #0]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fa:	1c5a      	adds	r2, r3, #1
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da04:	b29b      	uxth	r3, r3
 800da06:	3b01      	subs	r3, #1
 800da08:	b29a      	uxth	r2, r3
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da12:	3b01      	subs	r3, #1
 800da14:	b29a      	uxth	r2, r3
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	f003 0304 	and.w	r3, r3, #4
 800da24:	2b04      	cmp	r3, #4
 800da26:	d11b      	bne.n	800da60 <HAL_I2C_Master_Transmit+0x188>
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d017      	beq.n	800da60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da34:	781a      	ldrb	r2, [r3, #0]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da40:	1c5a      	adds	r2, r3, #1
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	3b01      	subs	r3, #1
 800da4e:	b29a      	uxth	r2, r3
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da58:	3b01      	subs	r3, #1
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da60:	697a      	ldr	r2, [r7, #20]
 800da62:	6a39      	ldr	r1, [r7, #32]
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f000 fcf6 	bl	800e456 <I2C_WaitOnBTFFlagUntilTimeout>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d00d      	beq.n	800da8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da74:	2b04      	cmp	r3, #4
 800da76:	d107      	bne.n	800da88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800da88:	2301      	movs	r3, #1
 800da8a:	e01a      	b.n	800dac2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da90:	2b00      	cmp	r3, #0
 800da92:	d194      	bne.n	800d9be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800daa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2220      	movs	r2, #32
 800daa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2200      	movs	r2, #0
 800dab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dabc:	2300      	movs	r3, #0
 800dabe:	e000      	b.n	800dac2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800dac0:	2302      	movs	r3, #2
  }
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3718      	adds	r7, #24
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	00100002 	.word	0x00100002
 800dad0:	ffff0000 	.word	0xffff0000

0800dad4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b08c      	sub	sp, #48	; 0x30
 800dad8:	af02      	add	r7, sp, #8
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	607a      	str	r2, [r7, #4]
 800dade:	461a      	mov	r2, r3
 800dae0:	460b      	mov	r3, r1
 800dae2:	817b      	strh	r3, [r7, #10]
 800dae4:	4613      	mov	r3, r2
 800dae6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800dae8:	2300      	movs	r3, #0
 800daea:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800daec:	f7fe fa4c 	bl	800bf88 <HAL_GetTick>
 800daf0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	2b20      	cmp	r3, #32
 800dafc:	f040 8238 	bne.w	800df70 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800db00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	2319      	movs	r3, #25
 800db06:	2201      	movs	r2, #1
 800db08:	497e      	ldr	r1, [pc, #504]	; (800dd04 <HAL_I2C_Master_Receive+0x230>)
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f000 fb8c 	bl	800e228 <I2C_WaitOnFlagUntilTimeout>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d001      	beq.n	800db1a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800db16:	2302      	movs	r3, #2
 800db18:	e22b      	b.n	800df72 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db20:	2b01      	cmp	r3, #1
 800db22:	d101      	bne.n	800db28 <HAL_I2C_Master_Receive+0x54>
 800db24:	2302      	movs	r3, #2
 800db26:	e224      	b.n	800df72 <HAL_I2C_Master_Receive+0x49e>
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f003 0301 	and.w	r3, r3, #1
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d007      	beq.n	800db4e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f042 0201 	orr.w	r2, r2, #1
 800db4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2222      	movs	r2, #34	; 0x22
 800db62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2210      	movs	r2, #16
 800db6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2200      	movs	r2, #0
 800db72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	893a      	ldrh	r2, [r7, #8]
 800db7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db84:	b29a      	uxth	r2, r3
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	4a5e      	ldr	r2, [pc, #376]	; (800dd08 <HAL_I2C_Master_Receive+0x234>)
 800db8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800db90:	8979      	ldrh	r1, [r7, #10]
 800db92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f000 fa78 	bl	800e08c <I2C_MasterRequestRead>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d001      	beq.n	800dba6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
 800dba4:	e1e5      	b.n	800df72 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d113      	bne.n	800dbd6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbae:	2300      	movs	r3, #0
 800dbb0:	61fb      	str	r3, [r7, #28]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	695b      	ldr	r3, [r3, #20]
 800dbb8:	61fb      	str	r3, [r7, #28]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	699b      	ldr	r3, [r3, #24]
 800dbc0:	61fb      	str	r3, [r7, #28]
 800dbc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbd2:	601a      	str	r2, [r3, #0]
 800dbd4:	e1b9      	b.n	800df4a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d11d      	bne.n	800dc1a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbee:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	61bb      	str	r3, [r7, #24]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	695b      	ldr	r3, [r3, #20]
 800dbfa:	61bb      	str	r3, [r7, #24]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	699b      	ldr	r3, [r3, #24]
 800dc02:	61bb      	str	r3, [r7, #24]
 800dc04:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800dc16:	b662      	cpsie	i
 800dc18:	e197      	b.n	800df4a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc1e:	2b02      	cmp	r3, #2
 800dc20:	d11d      	bne.n	800dc5e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc32:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc34:	2300      	movs	r3, #0
 800dc36:	617b      	str	r3, [r7, #20]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	695b      	ldr	r3, [r3, #20]
 800dc3e:	617b      	str	r3, [r7, #20]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	617b      	str	r3, [r7, #20]
 800dc48:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800dc5a:	b662      	cpsie	i
 800dc5c:	e175      	b.n	800df4a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc6e:	2300      	movs	r3, #0
 800dc70:	613b      	str	r3, [r7, #16]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	695b      	ldr	r3, [r3, #20]
 800dc78:	613b      	str	r3, [r7, #16]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	613b      	str	r3, [r7, #16]
 800dc82:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800dc84:	e161      	b.n	800df4a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc8a:	2b03      	cmp	r3, #3
 800dc8c:	f200 811a 	bhi.w	800dec4 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d123      	bne.n	800dce0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc9c:	68f8      	ldr	r0, [r7, #12]
 800dc9e:	f000 fc1b 	bl	800e4d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d001      	beq.n	800dcac <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e162      	b.n	800df72 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	691a      	ldr	r2, [r3, #16]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb6:	b2d2      	uxtb	r2, r2
 800dcb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbe:	1c5a      	adds	r2, r3, #1
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dcde:	e134      	b.n	800df4a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dce4:	2b02      	cmp	r3, #2
 800dce6:	d150      	bne.n	800dd8a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcee:	2200      	movs	r2, #0
 800dcf0:	4906      	ldr	r1, [pc, #24]	; (800dd0c <HAL_I2C_Master_Receive+0x238>)
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f000 fa98 	bl	800e228 <I2C_WaitOnFlagUntilTimeout>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d008      	beq.n	800dd10 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e137      	b.n	800df72 <HAL_I2C_Master_Receive+0x49e>
 800dd02:	bf00      	nop
 800dd04:	00100002 	.word	0x00100002
 800dd08:	ffff0000 	.word	0xffff0000
 800dd0c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800dd10:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd20:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	691a      	ldr	r2, [r3, #16]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2c:	b2d2      	uxtb	r2, r2
 800dd2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd34:	1c5a      	adds	r2, r3, #1
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd3e:	3b01      	subs	r3, #1
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800dd54:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	691a      	ldr	r2, [r3, #16]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd60:	b2d2      	uxtb	r2, r2
 800dd62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd68:	1c5a      	adds	r2, r3, #1
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd72:	3b01      	subs	r3, #1
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	3b01      	subs	r3, #1
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dd88:	e0df      	b.n	800df4a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd90:	2200      	movs	r2, #0
 800dd92:	497a      	ldr	r1, [pc, #488]	; (800df7c <HAL_I2C_Master_Receive+0x4a8>)
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f000 fa47 	bl	800e228 <I2C_WaitOnFlagUntilTimeout>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800dda0:	2301      	movs	r3, #1
 800dda2:	e0e6      	b.n	800df72 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ddb4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	691a      	ldr	r2, [r3, #16]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc0:	b2d2      	uxtb	r2, r2
 800ddc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc8:	1c5a      	adds	r2, r3, #1
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddd2:	3b01      	subs	r3, #1
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	3b01      	subs	r3, #1
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800dde8:	4b65      	ldr	r3, [pc, #404]	; (800df80 <HAL_I2C_Master_Receive+0x4ac>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	08db      	lsrs	r3, r3, #3
 800ddee:	4a65      	ldr	r2, [pc, #404]	; (800df84 <HAL_I2C_Master_Receive+0x4b0>)
 800ddf0:	fba2 2303 	umull	r2, r3, r2, r3
 800ddf4:	0a1a      	lsrs	r2, r3, #8
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	4413      	add	r3, r2
 800ddfc:	00da      	lsls	r2, r3, #3
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800de02:	6a3b      	ldr	r3, [r7, #32]
 800de04:	3b01      	subs	r3, #1
 800de06:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800de08:	6a3b      	ldr	r3, [r7, #32]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d117      	bne.n	800de3e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2200      	movs	r2, #0
 800de12:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2220      	movs	r2, #32
 800de18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2200      	movs	r2, #0
 800de20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de28:	f043 0220 	orr.w	r2, r3, #32
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800de30:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800de3a:	2301      	movs	r3, #1
 800de3c:	e099      	b.n	800df72 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	695b      	ldr	r3, [r3, #20]
 800de44:	f003 0304 	and.w	r3, r3, #4
 800de48:	2b04      	cmp	r3, #4
 800de4a:	d1da      	bne.n	800de02 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	691a      	ldr	r2, [r3, #16]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de66:	b2d2      	uxtb	r2, r2
 800de68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6e:	1c5a      	adds	r2, r3, #1
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de78:	3b01      	subs	r3, #1
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de84:	b29b      	uxth	r3, r3
 800de86:	3b01      	subs	r3, #1
 800de88:	b29a      	uxth	r2, r3
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800de8e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	691a      	ldr	r2, [r3, #16]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9a:	b2d2      	uxtb	r2, r2
 800de9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea2:	1c5a      	adds	r2, r3, #1
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800deac:	3b01      	subs	r3, #1
 800deae:	b29a      	uxth	r2, r3
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800deb8:	b29b      	uxth	r3, r3
 800deba:	3b01      	subs	r3, #1
 800debc:	b29a      	uxth	r2, r3
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dec2:	e042      	b.n	800df4a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dec6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f000 fb05 	bl	800e4d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d001      	beq.n	800ded8 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	e04c      	b.n	800df72 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	691a      	ldr	r2, [r3, #16]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee2:	b2d2      	uxtb	r2, r2
 800dee4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deea:	1c5a      	adds	r2, r3, #1
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800def4:	3b01      	subs	r3, #1
 800def6:	b29a      	uxth	r2, r3
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df00:	b29b      	uxth	r3, r3
 800df02:	3b01      	subs	r3, #1
 800df04:	b29a      	uxth	r2, r3
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	f003 0304 	and.w	r3, r3, #4
 800df14:	2b04      	cmp	r3, #4
 800df16:	d118      	bne.n	800df4a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	691a      	ldr	r2, [r3, #16]
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df22:	b2d2      	uxtb	r2, r2
 800df24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df34:	3b01      	subs	r3, #1
 800df36:	b29a      	uxth	r2, r3
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df40:	b29b      	uxth	r3, r3
 800df42:	3b01      	subs	r3, #1
 800df44:	b29a      	uxth	r2, r3
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f47f ae99 	bne.w	800dc86 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2220      	movs	r2, #32
 800df58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2200      	movs	r2, #0
 800df60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2200      	movs	r2, #0
 800df68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800df6c:	2300      	movs	r3, #0
 800df6e:	e000      	b.n	800df72 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800df70:	2302      	movs	r3, #2
  }
}
 800df72:	4618      	mov	r0, r3
 800df74:	3728      	adds	r7, #40	; 0x28
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	00010004 	.word	0x00010004
 800df80:	2000009c 	.word	0x2000009c
 800df84:	14f8b589 	.word	0x14f8b589

0800df88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b088      	sub	sp, #32
 800df8c:	af02      	add	r7, sp, #8
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	607a      	str	r2, [r7, #4]
 800df92:	603b      	str	r3, [r7, #0]
 800df94:	460b      	mov	r3, r1
 800df96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	2b08      	cmp	r3, #8
 800dfa2:	d006      	beq.n	800dfb2 <I2C_MasterRequestWrite+0x2a>
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d003      	beq.n	800dfb2 <I2C_MasterRequestWrite+0x2a>
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dfb0:	d108      	bne.n	800dfc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dfc0:	601a      	str	r2, [r3, #0]
 800dfc2:	e00b      	b.n	800dfdc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfc8:	2b12      	cmp	r3, #18
 800dfca:	d107      	bne.n	800dfdc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dfda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f000 f91d 	bl	800e228 <I2C_WaitOnFlagUntilTimeout>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d00d      	beq.n	800e010 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e002:	d103      	bne.n	800e00c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e00a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e00c:	2303      	movs	r3, #3
 800e00e:	e035      	b.n	800e07c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e018:	d108      	bne.n	800e02c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e01a:	897b      	ldrh	r3, [r7, #10]
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	461a      	mov	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e028:	611a      	str	r2, [r3, #16]
 800e02a:	e01b      	b.n	800e064 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e02c:	897b      	ldrh	r3, [r7, #10]
 800e02e:	11db      	asrs	r3, r3, #7
 800e030:	b2db      	uxtb	r3, r3
 800e032:	f003 0306 	and.w	r3, r3, #6
 800e036:	b2db      	uxtb	r3, r3
 800e038:	f063 030f 	orn	r3, r3, #15
 800e03c:	b2da      	uxtb	r2, r3
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	490e      	ldr	r1, [pc, #56]	; (800e084 <I2C_MasterRequestWrite+0xfc>)
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f000 f943 	bl	800e2d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d001      	beq.n	800e05a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e010      	b.n	800e07c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e05a:	897b      	ldrh	r3, [r7, #10]
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	4907      	ldr	r1, [pc, #28]	; (800e088 <I2C_MasterRequestWrite+0x100>)
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f000 f933 	bl	800e2d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d001      	beq.n	800e07a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	e000      	b.n	800e07c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3718      	adds	r7, #24
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	00010008 	.word	0x00010008
 800e088:	00010002 	.word	0x00010002

0800e08c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af02      	add	r7, sp, #8
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	607a      	str	r2, [r7, #4]
 800e096:	603b      	str	r3, [r7, #0]
 800e098:	460b      	mov	r3, r1
 800e09a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e0b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b08      	cmp	r3, #8
 800e0b6:	d006      	beq.n	800e0c6 <I2C_MasterRequestRead+0x3a>
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d003      	beq.n	800e0c6 <I2C_MasterRequestRead+0x3a>
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e0c4:	d108      	bne.n	800e0d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0d4:	601a      	str	r2, [r3, #0]
 800e0d6:	e00b      	b.n	800e0f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0dc:	2b11      	cmp	r3, #17
 800e0de:	d107      	bne.n	800e0f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	9300      	str	r3, [sp, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e0fc:	68f8      	ldr	r0, [r7, #12]
 800e0fe:	f000 f893 	bl	800e228 <I2C_WaitOnFlagUntilTimeout>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00d      	beq.n	800e124 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e116:	d103      	bne.n	800e120 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e11e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e120:	2303      	movs	r3, #3
 800e122:	e079      	b.n	800e218 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	691b      	ldr	r3, [r3, #16]
 800e128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e12c:	d108      	bne.n	800e140 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e12e:	897b      	ldrh	r3, [r7, #10]
 800e130:	b2db      	uxtb	r3, r3
 800e132:	f043 0301 	orr.w	r3, r3, #1
 800e136:	b2da      	uxtb	r2, r3
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	611a      	str	r2, [r3, #16]
 800e13e:	e05f      	b.n	800e200 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e140:	897b      	ldrh	r3, [r7, #10]
 800e142:	11db      	asrs	r3, r3, #7
 800e144:	b2db      	uxtb	r3, r3
 800e146:	f003 0306 	and.w	r3, r3, #6
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	f063 030f 	orn	r3, r3, #15
 800e150:	b2da      	uxtb	r2, r3
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	4930      	ldr	r1, [pc, #192]	; (800e220 <I2C_MasterRequestRead+0x194>)
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f000 f8b9 	bl	800e2d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d001      	beq.n	800e16e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	e054      	b.n	800e218 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e16e:	897b      	ldrh	r3, [r7, #10]
 800e170:	b2da      	uxtb	r2, r3
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	4929      	ldr	r1, [pc, #164]	; (800e224 <I2C_MasterRequestRead+0x198>)
 800e17e:	68f8      	ldr	r0, [r7, #12]
 800e180:	f000 f8a9 	bl	800e2d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	d001      	beq.n	800e18e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e18a:	2301      	movs	r3, #1
 800e18c:	e044      	b.n	800e218 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e18e:	2300      	movs	r3, #0
 800e190:	613b      	str	r3, [r7, #16]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	695b      	ldr	r3, [r3, #20]
 800e198:	613b      	str	r3, [r7, #16]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	699b      	ldr	r3, [r3, #24]
 800e1a0:	613b      	str	r3, [r7, #16]
 800e1a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	9300      	str	r3, [sp, #0]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f000 f831 	bl	800e228 <I2C_WaitOnFlagUntilTimeout>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00d      	beq.n	800e1e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1da:	d103      	bne.n	800e1e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e1e4:	2303      	movs	r3, #3
 800e1e6:	e017      	b.n	800e218 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e1e8:	897b      	ldrh	r3, [r7, #10]
 800e1ea:	11db      	asrs	r3, r3, #7
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	f003 0306 	and.w	r3, r3, #6
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	f063 030e 	orn	r3, r3, #14
 800e1f8:	b2da      	uxtb	r2, r3
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	4907      	ldr	r1, [pc, #28]	; (800e224 <I2C_MasterRequestRead+0x198>)
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f000 f865 	bl	800e2d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e212:	2301      	movs	r3, #1
 800e214:	e000      	b.n	800e218 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e216:	2300      	movs	r3, #0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3718      	adds	r7, #24
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	00010008 	.word	0x00010008
 800e224:	00010002 	.word	0x00010002

0800e228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	603b      	str	r3, [r7, #0]
 800e234:	4613      	mov	r3, r2
 800e236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e238:	e025      	b.n	800e286 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e240:	d021      	beq.n	800e286 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e242:	f7fd fea1 	bl	800bf88 <HAL_GetTick>
 800e246:	4602      	mov	r2, r0
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	1ad3      	subs	r3, r2, r3
 800e24c:	683a      	ldr	r2, [r7, #0]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d302      	bcc.n	800e258 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d116      	bne.n	800e286 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2200      	movs	r2, #0
 800e25c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2220      	movs	r2, #32
 800e262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2200      	movs	r2, #0
 800e26a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e272:	f043 0220 	orr.w	r2, r3, #32
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	e023      	b.n	800e2ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	0c1b      	lsrs	r3, r3, #16
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d10d      	bne.n	800e2ac <I2C_WaitOnFlagUntilTimeout+0x84>
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	695b      	ldr	r3, [r3, #20]
 800e296:	43da      	mvns	r2, r3
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	4013      	ands	r3, r2
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	bf0c      	ite	eq
 800e2a2:	2301      	moveq	r3, #1
 800e2a4:	2300      	movne	r3, #0
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	e00c      	b.n	800e2c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	699b      	ldr	r3, [r3, #24]
 800e2b2:	43da      	mvns	r2, r3
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	4013      	ands	r3, r2
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	bf0c      	ite	eq
 800e2be:	2301      	moveq	r3, #1
 800e2c0:	2300      	movne	r3, #0
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	79fb      	ldrb	r3, [r7, #7]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d0b6      	beq.n	800e23a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e2cc:	2300      	movs	r3, #0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b084      	sub	sp, #16
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	60f8      	str	r0, [r7, #12]
 800e2de:	60b9      	str	r1, [r7, #8]
 800e2e0:	607a      	str	r2, [r7, #4]
 800e2e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e2e4:	e051      	b.n	800e38a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e2f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2f4:	d123      	bne.n	800e33e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e304:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e30e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2200      	movs	r2, #0
 800e314:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2220      	movs	r2, #32
 800e31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e32a:	f043 0204 	orr.w	r2, r3, #4
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2200      	movs	r2, #0
 800e336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	e046      	b.n	800e3cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e344:	d021      	beq.n	800e38a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e346:	f7fd fe1f 	bl	800bf88 <HAL_GetTick>
 800e34a:	4602      	mov	r2, r0
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	429a      	cmp	r2, r3
 800e354:	d302      	bcc.n	800e35c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d116      	bne.n	800e38a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2200      	movs	r2, #0
 800e360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2220      	movs	r2, #32
 800e366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e376:	f043 0220 	orr.w	r2, r3, #32
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2200      	movs	r2, #0
 800e382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e386:	2301      	movs	r3, #1
 800e388:	e020      	b.n	800e3cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	0c1b      	lsrs	r3, r3, #16
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	2b01      	cmp	r3, #1
 800e392:	d10c      	bne.n	800e3ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	695b      	ldr	r3, [r3, #20]
 800e39a:	43da      	mvns	r2, r3
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	4013      	ands	r3, r2
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	bf14      	ite	ne
 800e3a6:	2301      	movne	r3, #1
 800e3a8:	2300      	moveq	r3, #0
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	e00b      	b.n	800e3c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	699b      	ldr	r3, [r3, #24]
 800e3b4:	43da      	mvns	r2, r3
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	4013      	ands	r3, r2
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	bf14      	ite	ne
 800e3c0:	2301      	movne	r3, #1
 800e3c2:	2300      	moveq	r3, #0
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d18d      	bne.n	800e2e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e3ca:	2300      	movs	r3, #0
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3710      	adds	r7, #16
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e3e0:	e02d      	b.n	800e43e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	f000 f8ce 	bl	800e584 <I2C_IsAcknowledgeFailed>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d001      	beq.n	800e3f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e02d      	b.n	800e44e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f8:	d021      	beq.n	800e43e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3fa:	f7fd fdc5 	bl	800bf88 <HAL_GetTick>
 800e3fe:	4602      	mov	r2, r0
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	429a      	cmp	r2, r3
 800e408:	d302      	bcc.n	800e410 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d116      	bne.n	800e43e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2220      	movs	r2, #32
 800e41a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e42a:	f043 0220 	orr.w	r2, r3, #32
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2200      	movs	r2, #0
 800e436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	e007      	b.n	800e44e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	695b      	ldr	r3, [r3, #20]
 800e444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e448:	2b80      	cmp	r3, #128	; 0x80
 800e44a:	d1ca      	bne.n	800e3e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b084      	sub	sp, #16
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	60f8      	str	r0, [r7, #12]
 800e45e:	60b9      	str	r1, [r7, #8]
 800e460:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e462:	e02d      	b.n	800e4c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f000 f88d 	bl	800e584 <I2C_IsAcknowledgeFailed>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e470:	2301      	movs	r3, #1
 800e472:	e02d      	b.n	800e4d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e47a:	d021      	beq.n	800e4c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e47c:	f7fd fd84 	bl	800bf88 <HAL_GetTick>
 800e480:	4602      	mov	r2, r0
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	1ad3      	subs	r3, r2, r3
 800e486:	68ba      	ldr	r2, [r7, #8]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d302      	bcc.n	800e492 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d116      	bne.n	800e4c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2200      	movs	r2, #0
 800e496:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2220      	movs	r2, #32
 800e49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ac:	f043 0220 	orr.w	r2, r3, #32
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e007      	b.n	800e4d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	695b      	ldr	r3, [r3, #20]
 800e4c6:	f003 0304 	and.w	r3, r3, #4
 800e4ca:	2b04      	cmp	r3, #4
 800e4cc:	d1ca      	bne.n	800e464 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e4ce:	2300      	movs	r3, #0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3710      	adds	r7, #16
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e4e4:	e042      	b.n	800e56c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	695b      	ldr	r3, [r3, #20]
 800e4ec:	f003 0310 	and.w	r3, r3, #16
 800e4f0:	2b10      	cmp	r3, #16
 800e4f2:	d119      	bne.n	800e528 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f06f 0210 	mvn.w	r2, #16
 800e4fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2200      	movs	r2, #0
 800e502:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2220      	movs	r2, #32
 800e508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2200      	movs	r2, #0
 800e520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e524:	2301      	movs	r3, #1
 800e526:	e029      	b.n	800e57c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e528:	f7fd fd2e 	bl	800bf88 <HAL_GetTick>
 800e52c:	4602      	mov	r2, r0
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	1ad3      	subs	r3, r2, r3
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	429a      	cmp	r2, r3
 800e536:	d302      	bcc.n	800e53e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d116      	bne.n	800e56c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2200      	movs	r2, #0
 800e542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2220      	movs	r2, #32
 800e548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2200      	movs	r2, #0
 800e550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e558:	f043 0220 	orr.w	r2, r3, #32
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e568:	2301      	movs	r3, #1
 800e56a:	e007      	b.n	800e57c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	695b      	ldr	r3, [r3, #20]
 800e572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e576:	2b40      	cmp	r3, #64	; 0x40
 800e578:	d1b5      	bne.n	800e4e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e57a:	2300      	movs	r3, #0
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	695b      	ldr	r3, [r3, #20]
 800e592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e59a:	d11b      	bne.n	800e5d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e5a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2220      	movs	r2, #32
 800e5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c0:	f043 0204 	orr.w	r2, r3, #4
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e000      	b.n	800e5d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e5d4:	2300      	movs	r3, #0
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	370c      	adds	r7, #12
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bc80      	pop	{r7}
 800e5de:	4770      	bx	lr

0800e5e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b086      	sub	sp, #24
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d101      	bne.n	800e5f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	e35c      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d01c      	beq.n	800e634 <HAL_RCC_OscConfig+0x54>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f003 0301 	and.w	r3, r3, #1
 800e602:	2b00      	cmp	r3, #0
 800e604:	d116      	bne.n	800e634 <HAL_RCC_OscConfig+0x54>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f003 0302 	and.w	r3, r3, #2
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d110      	bne.n	800e634 <HAL_RCC_OscConfig+0x54>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f003 0308 	and.w	r3, r3, #8
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10a      	bne.n	800e634 <HAL_RCC_OscConfig+0x54>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f003 0304 	and.w	r3, r3, #4
 800e626:	2b00      	cmp	r3, #0
 800e628:	d104      	bne.n	800e634 <HAL_RCC_OscConfig+0x54>
 800e62a:	f240 1167 	movw	r1, #359	; 0x167
 800e62e:	48a5      	ldr	r0, [pc, #660]	; (800e8c4 <HAL_RCC_OscConfig+0x2e4>)
 800e630:	f7fd f840 	bl	800b6b4 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f003 0301 	and.w	r3, r3, #1
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f000 809a 	beq.w	800e776 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00e      	beq.n	800e668 <HAL_RCC_OscConfig+0x88>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e652:	d009      	beq.n	800e668 <HAL_RCC_OscConfig+0x88>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e65c:	d004      	beq.n	800e668 <HAL_RCC_OscConfig+0x88>
 800e65e:	f240 116d 	movw	r1, #365	; 0x16d
 800e662:	4898      	ldr	r0, [pc, #608]	; (800e8c4 <HAL_RCC_OscConfig+0x2e4>)
 800e664:	f7fd f826 	bl	800b6b4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e668:	4b97      	ldr	r3, [pc, #604]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	f003 030c 	and.w	r3, r3, #12
 800e670:	2b04      	cmp	r3, #4
 800e672:	d00c      	beq.n	800e68e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800e674:	4b94      	ldr	r3, [pc, #592]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	f003 030c 	and.w	r3, r3, #12
 800e67c:	2b08      	cmp	r3, #8
 800e67e:	d112      	bne.n	800e6a6 <HAL_RCC_OscConfig+0xc6>
 800e680:	4b91      	ldr	r3, [pc, #580]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e68c:	d10b      	bne.n	800e6a6 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e68e:	4b8e      	ldr	r3, [pc, #568]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e696:	2b00      	cmp	r3, #0
 800e698:	d06c      	beq.n	800e774 <HAL_RCC_OscConfig+0x194>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d168      	bne.n	800e774 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e302      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6ae:	d106      	bne.n	800e6be <HAL_RCC_OscConfig+0xde>
 800e6b0:	4b85      	ldr	r3, [pc, #532]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a84      	ldr	r2, [pc, #528]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e6b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6ba:	6013      	str	r3, [r2, #0]
 800e6bc:	e02e      	b.n	800e71c <HAL_RCC_OscConfig+0x13c>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d10c      	bne.n	800e6e0 <HAL_RCC_OscConfig+0x100>
 800e6c6:	4b80      	ldr	r3, [pc, #512]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4a7f      	ldr	r2, [pc, #508]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e6cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e6d0:	6013      	str	r3, [r2, #0]
 800e6d2:	4b7d      	ldr	r3, [pc, #500]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4a7c      	ldr	r2, [pc, #496]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e6d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e6dc:	6013      	str	r3, [r2, #0]
 800e6de:	e01d      	b.n	800e71c <HAL_RCC_OscConfig+0x13c>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e6e8:	d10c      	bne.n	800e704 <HAL_RCC_OscConfig+0x124>
 800e6ea:	4b77      	ldr	r3, [pc, #476]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	4a76      	ldr	r2, [pc, #472]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e6f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e6f4:	6013      	str	r3, [r2, #0]
 800e6f6:	4b74      	ldr	r3, [pc, #464]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4a73      	ldr	r2, [pc, #460]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e6fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e700:	6013      	str	r3, [r2, #0]
 800e702:	e00b      	b.n	800e71c <HAL_RCC_OscConfig+0x13c>
 800e704:	4b70      	ldr	r3, [pc, #448]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a6f      	ldr	r2, [pc, #444]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e70a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	4b6d      	ldr	r3, [pc, #436]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a6c      	ldr	r2, [pc, #432]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e71a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d013      	beq.n	800e74c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e724:	f7fd fc30 	bl	800bf88 <HAL_GetTick>
 800e728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e72a:	e008      	b.n	800e73e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e72c:	f7fd fc2c 	bl	800bf88 <HAL_GetTick>
 800e730:	4602      	mov	r2, r0
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	2b64      	cmp	r3, #100	; 0x64
 800e738:	d901      	bls.n	800e73e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800e73a:	2303      	movs	r3, #3
 800e73c:	e2b6      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e73e:	4b62      	ldr	r3, [pc, #392]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e746:	2b00      	cmp	r3, #0
 800e748:	d0f0      	beq.n	800e72c <HAL_RCC_OscConfig+0x14c>
 800e74a:	e014      	b.n	800e776 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e74c:	f7fd fc1c 	bl	800bf88 <HAL_GetTick>
 800e750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e752:	e008      	b.n	800e766 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e754:	f7fd fc18 	bl	800bf88 <HAL_GetTick>
 800e758:	4602      	mov	r2, r0
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	2b64      	cmp	r3, #100	; 0x64
 800e760:	d901      	bls.n	800e766 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800e762:	2303      	movs	r3, #3
 800e764:	e2a2      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e766:	4b58      	ldr	r3, [pc, #352]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1f0      	bne.n	800e754 <HAL_RCC_OscConfig+0x174>
 800e772:	e000      	b.n	800e776 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f003 0302 	and.w	r3, r3, #2
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d079      	beq.n	800e876 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	691b      	ldr	r3, [r3, #16]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d008      	beq.n	800e79c <HAL_RCC_OscConfig+0x1bc>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	691b      	ldr	r3, [r3, #16]
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d004      	beq.n	800e79c <HAL_RCC_OscConfig+0x1bc>
 800e792:	f240 11a1 	movw	r1, #417	; 0x1a1
 800e796:	484b      	ldr	r0, [pc, #300]	; (800e8c4 <HAL_RCC_OscConfig+0x2e4>)
 800e798:	f7fc ff8c 	bl	800b6b4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	695b      	ldr	r3, [r3, #20]
 800e7a0:	2b1f      	cmp	r3, #31
 800e7a2:	d904      	bls.n	800e7ae <HAL_RCC_OscConfig+0x1ce>
 800e7a4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800e7a8:	4846      	ldr	r0, [pc, #280]	; (800e8c4 <HAL_RCC_OscConfig+0x2e4>)
 800e7aa:	f7fc ff83 	bl	800b6b4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e7ae:	4b46      	ldr	r3, [pc, #280]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	f003 030c 	and.w	r3, r3, #12
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d00b      	beq.n	800e7d2 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800e7ba:	4b43      	ldr	r3, [pc, #268]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	f003 030c 	and.w	r3, r3, #12
 800e7c2:	2b08      	cmp	r3, #8
 800e7c4:	d11c      	bne.n	800e800 <HAL_RCC_OscConfig+0x220>
 800e7c6:	4b40      	ldr	r3, [pc, #256]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d116      	bne.n	800e800 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e7d2:	4b3d      	ldr	r3, [pc, #244]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f003 0302 	and.w	r3, r3, #2
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d005      	beq.n	800e7ea <HAL_RCC_OscConfig+0x20a>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	691b      	ldr	r3, [r3, #16]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d001      	beq.n	800e7ea <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e260      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e7ea:	4b37      	ldr	r3, [pc, #220]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	695b      	ldr	r3, [r3, #20]
 800e7f6:	00db      	lsls	r3, r3, #3
 800e7f8:	4933      	ldr	r1, [pc, #204]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e7fe:	e03a      	b.n	800e876 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	691b      	ldr	r3, [r3, #16]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d020      	beq.n	800e84a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e808:	4b30      	ldr	r3, [pc, #192]	; (800e8cc <HAL_RCC_OscConfig+0x2ec>)
 800e80a:	2201      	movs	r2, #1
 800e80c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e80e:	f7fd fbbb 	bl	800bf88 <HAL_GetTick>
 800e812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e814:	e008      	b.n	800e828 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e816:	f7fd fbb7 	bl	800bf88 <HAL_GetTick>
 800e81a:	4602      	mov	r2, r0
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	2b02      	cmp	r3, #2
 800e822:	d901      	bls.n	800e828 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800e824:	2303      	movs	r3, #3
 800e826:	e241      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e828:	4b27      	ldr	r3, [pc, #156]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f003 0302 	and.w	r3, r3, #2
 800e830:	2b00      	cmp	r3, #0
 800e832:	d0f0      	beq.n	800e816 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e834:	4b24      	ldr	r3, [pc, #144]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	00db      	lsls	r3, r3, #3
 800e842:	4921      	ldr	r1, [pc, #132]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e844:	4313      	orrs	r3, r2
 800e846:	600b      	str	r3, [r1, #0]
 800e848:	e015      	b.n	800e876 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e84a:	4b20      	ldr	r3, [pc, #128]	; (800e8cc <HAL_RCC_OscConfig+0x2ec>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e850:	f7fd fb9a 	bl	800bf88 <HAL_GetTick>
 800e854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e856:	e008      	b.n	800e86a <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e858:	f7fd fb96 	bl	800bf88 <HAL_GetTick>
 800e85c:	4602      	mov	r2, r0
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	1ad3      	subs	r3, r2, r3
 800e862:	2b02      	cmp	r3, #2
 800e864:	d901      	bls.n	800e86a <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800e866:	2303      	movs	r3, #3
 800e868:	e220      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e86a:	4b17      	ldr	r3, [pc, #92]	; (800e8c8 <HAL_RCC_OscConfig+0x2e8>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f003 0302 	and.w	r3, r3, #2
 800e872:	2b00      	cmp	r3, #0
 800e874:	d1f0      	bne.n	800e858 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f003 0308 	and.w	r3, r3, #8
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d048      	beq.n	800e914 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	699b      	ldr	r3, [r3, #24]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d008      	beq.n	800e89c <HAL_RCC_OscConfig+0x2bc>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	699b      	ldr	r3, [r3, #24]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d004      	beq.n	800e89c <HAL_RCC_OscConfig+0x2bc>
 800e892:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800e896:	480b      	ldr	r0, [pc, #44]	; (800e8c4 <HAL_RCC_OscConfig+0x2e4>)
 800e898:	f7fc ff0c 	bl	800b6b4 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	699b      	ldr	r3, [r3, #24]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d021      	beq.n	800e8e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e8a4:	4b0a      	ldr	r3, [pc, #40]	; (800e8d0 <HAL_RCC_OscConfig+0x2f0>)
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e8aa:	f7fd fb6d 	bl	800bf88 <HAL_GetTick>
 800e8ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e8b0:	e010      	b.n	800e8d4 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e8b2:	f7fd fb69 	bl	800bf88 <HAL_GetTick>
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	1ad3      	subs	r3, r2, r3
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d909      	bls.n	800e8d4 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800e8c0:	2303      	movs	r3, #3
 800e8c2:	e1f3      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
 800e8c4:	08012724 	.word	0x08012724
 800e8c8:	40021000 	.word	0x40021000
 800e8cc:	42420000 	.word	0x42420000
 800e8d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e8d4:	4b67      	ldr	r3, [pc, #412]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d8:	f003 0302 	and.w	r3, r3, #2
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d0e8      	beq.n	800e8b2 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800e8e0:	2001      	movs	r0, #1
 800e8e2:	f000 fc11 	bl	800f108 <RCC_Delay>
 800e8e6:	e015      	b.n	800e914 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e8e8:	4b63      	ldr	r3, [pc, #396]	; (800ea78 <HAL_RCC_OscConfig+0x498>)
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e8ee:	f7fd fb4b 	bl	800bf88 <HAL_GetTick>
 800e8f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e8f4:	e008      	b.n	800e908 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e8f6:	f7fd fb47 	bl	800bf88 <HAL_GetTick>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	2b02      	cmp	r3, #2
 800e902:	d901      	bls.n	800e908 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800e904:	2303      	movs	r3, #3
 800e906:	e1d1      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e908:	4b5a      	ldr	r3, [pc, #360]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90c:	f003 0302 	and.w	r3, r3, #2
 800e910:	2b00      	cmp	r3, #0
 800e912:	d1f0      	bne.n	800e8f6 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f003 0304 	and.w	r3, r3, #4
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f000 80c0 	beq.w	800eaa2 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e922:	2300      	movs	r3, #0
 800e924:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	68db      	ldr	r3, [r3, #12]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00c      	beq.n	800e948 <HAL_RCC_OscConfig+0x368>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	2b01      	cmp	r3, #1
 800e934:	d008      	beq.n	800e948 <HAL_RCC_OscConfig+0x368>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	2b05      	cmp	r3, #5
 800e93c:	d004      	beq.n	800e948 <HAL_RCC_OscConfig+0x368>
 800e93e:	f240 2111 	movw	r1, #529	; 0x211
 800e942:	484e      	ldr	r0, [pc, #312]	; (800ea7c <HAL_RCC_OscConfig+0x49c>)
 800e944:	f7fc feb6 	bl	800b6b4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e948:	4b4a      	ldr	r3, [pc, #296]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e94a:	69db      	ldr	r3, [r3, #28]
 800e94c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e950:	2b00      	cmp	r3, #0
 800e952:	d10d      	bne.n	800e970 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e954:	4b47      	ldr	r3, [pc, #284]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e956:	69db      	ldr	r3, [r3, #28]
 800e958:	4a46      	ldr	r2, [pc, #280]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e95a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e95e:	61d3      	str	r3, [r2, #28]
 800e960:	4b44      	ldr	r3, [pc, #272]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e968:	60bb      	str	r3, [r7, #8]
 800e96a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e96c:	2301      	movs	r3, #1
 800e96e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e970:	4b43      	ldr	r3, [pc, #268]	; (800ea80 <HAL_RCC_OscConfig+0x4a0>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d118      	bne.n	800e9ae <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e97c:	4b40      	ldr	r3, [pc, #256]	; (800ea80 <HAL_RCC_OscConfig+0x4a0>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a3f      	ldr	r2, [pc, #252]	; (800ea80 <HAL_RCC_OscConfig+0x4a0>)
 800e982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e986:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e988:	f7fd fafe 	bl	800bf88 <HAL_GetTick>
 800e98c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e98e:	e008      	b.n	800e9a2 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e990:	f7fd fafa 	bl	800bf88 <HAL_GetTick>
 800e994:	4602      	mov	r2, r0
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	2b64      	cmp	r3, #100	; 0x64
 800e99c:	d901      	bls.n	800e9a2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800e99e:	2303      	movs	r3, #3
 800e9a0:	e184      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e9a2:	4b37      	ldr	r3, [pc, #220]	; (800ea80 <HAL_RCC_OscConfig+0x4a0>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d0f0      	beq.n	800e990 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	68db      	ldr	r3, [r3, #12]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d106      	bne.n	800e9c4 <HAL_RCC_OscConfig+0x3e4>
 800e9b6:	4b2f      	ldr	r3, [pc, #188]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e9b8:	6a1b      	ldr	r3, [r3, #32]
 800e9ba:	4a2e      	ldr	r2, [pc, #184]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e9bc:	f043 0301 	orr.w	r3, r3, #1
 800e9c0:	6213      	str	r3, [r2, #32]
 800e9c2:	e02d      	b.n	800ea20 <HAL_RCC_OscConfig+0x440>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d10c      	bne.n	800e9e6 <HAL_RCC_OscConfig+0x406>
 800e9cc:	4b29      	ldr	r3, [pc, #164]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e9ce:	6a1b      	ldr	r3, [r3, #32]
 800e9d0:	4a28      	ldr	r2, [pc, #160]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e9d2:	f023 0301 	bic.w	r3, r3, #1
 800e9d6:	6213      	str	r3, [r2, #32]
 800e9d8:	4b26      	ldr	r3, [pc, #152]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e9da:	6a1b      	ldr	r3, [r3, #32]
 800e9dc:	4a25      	ldr	r2, [pc, #148]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e9de:	f023 0304 	bic.w	r3, r3, #4
 800e9e2:	6213      	str	r3, [r2, #32]
 800e9e4:	e01c      	b.n	800ea20 <HAL_RCC_OscConfig+0x440>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	2b05      	cmp	r3, #5
 800e9ec:	d10c      	bne.n	800ea08 <HAL_RCC_OscConfig+0x428>
 800e9ee:	4b21      	ldr	r3, [pc, #132]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e9f0:	6a1b      	ldr	r3, [r3, #32]
 800e9f2:	4a20      	ldr	r2, [pc, #128]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e9f4:	f043 0304 	orr.w	r3, r3, #4
 800e9f8:	6213      	str	r3, [r2, #32]
 800e9fa:	4b1e      	ldr	r3, [pc, #120]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800e9fc:	6a1b      	ldr	r3, [r3, #32]
 800e9fe:	4a1d      	ldr	r2, [pc, #116]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800ea00:	f043 0301 	orr.w	r3, r3, #1
 800ea04:	6213      	str	r3, [r2, #32]
 800ea06:	e00b      	b.n	800ea20 <HAL_RCC_OscConfig+0x440>
 800ea08:	4b1a      	ldr	r3, [pc, #104]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800ea0a:	6a1b      	ldr	r3, [r3, #32]
 800ea0c:	4a19      	ldr	r2, [pc, #100]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800ea0e:	f023 0301 	bic.w	r3, r3, #1
 800ea12:	6213      	str	r3, [r2, #32]
 800ea14:	4b17      	ldr	r3, [pc, #92]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800ea16:	6a1b      	ldr	r3, [r3, #32]
 800ea18:	4a16      	ldr	r2, [pc, #88]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800ea1a:	f023 0304 	bic.w	r3, r3, #4
 800ea1e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d015      	beq.n	800ea54 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ea28:	f7fd faae 	bl	800bf88 <HAL_GetTick>
 800ea2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ea2e:	e00a      	b.n	800ea46 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea30:	f7fd faaa 	bl	800bf88 <HAL_GetTick>
 800ea34:	4602      	mov	r2, r0
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d901      	bls.n	800ea46 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800ea42:	2303      	movs	r3, #3
 800ea44:	e132      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ea46:	4b0b      	ldr	r3, [pc, #44]	; (800ea74 <HAL_RCC_OscConfig+0x494>)
 800ea48:	6a1b      	ldr	r3, [r3, #32]
 800ea4a:	f003 0302 	and.w	r3, r3, #2
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d0ee      	beq.n	800ea30 <HAL_RCC_OscConfig+0x450>
 800ea52:	e01d      	b.n	800ea90 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ea54:	f7fd fa98 	bl	800bf88 <HAL_GetTick>
 800ea58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ea5a:	e013      	b.n	800ea84 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea5c:	f7fd fa94 	bl	800bf88 <HAL_GetTick>
 800ea60:	4602      	mov	r2, r0
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d90a      	bls.n	800ea84 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800ea6e:	2303      	movs	r3, #3
 800ea70:	e11c      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
 800ea72:	bf00      	nop
 800ea74:	40021000 	.word	0x40021000
 800ea78:	42420480 	.word	0x42420480
 800ea7c:	08012724 	.word	0x08012724
 800ea80:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ea84:	4b8b      	ldr	r3, [pc, #556]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ea86:	6a1b      	ldr	r3, [r3, #32]
 800ea88:	f003 0302 	and.w	r3, r3, #2
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1e5      	bne.n	800ea5c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ea90:	7dfb      	ldrb	r3, [r7, #23]
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d105      	bne.n	800eaa2 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ea96:	4b87      	ldr	r3, [pc, #540]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ea98:	69db      	ldr	r3, [r3, #28]
 800ea9a:	4a86      	ldr	r2, [pc, #536]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ea9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eaa0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	69db      	ldr	r3, [r3, #28]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00c      	beq.n	800eac4 <HAL_RCC_OscConfig+0x4e4>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	69db      	ldr	r3, [r3, #28]
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d008      	beq.n	800eac4 <HAL_RCC_OscConfig+0x4e4>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	69db      	ldr	r3, [r3, #28]
 800eab6:	2b02      	cmp	r3, #2
 800eab8:	d004      	beq.n	800eac4 <HAL_RCC_OscConfig+0x4e4>
 800eaba:	f240 21af 	movw	r1, #687	; 0x2af
 800eabe:	487e      	ldr	r0, [pc, #504]	; (800ecb8 <HAL_RCC_OscConfig+0x6d8>)
 800eac0:	f7fc fdf8 	bl	800b6b4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	69db      	ldr	r3, [r3, #28]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	f000 80ee 	beq.w	800ecaa <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800eace:	4b79      	ldr	r3, [pc, #484]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	f003 030c 	and.w	r3, r3, #12
 800ead6:	2b08      	cmp	r3, #8
 800ead8:	f000 80ce 	beq.w	800ec78 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	69db      	ldr	r3, [r3, #28]
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	f040 80b2 	bne.w	800ec4a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6a1b      	ldr	r3, [r3, #32]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d009      	beq.n	800eb02 <HAL_RCC_OscConfig+0x522>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6a1b      	ldr	r3, [r3, #32]
 800eaf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaf6:	d004      	beq.n	800eb02 <HAL_RCC_OscConfig+0x522>
 800eaf8:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800eafc:	486e      	ldr	r0, [pc, #440]	; (800ecb8 <HAL_RCC_OscConfig+0x6d8>)
 800eafe:	f7fc fdd9 	bl	800b6b4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d04a      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800eb12:	d045      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800eb1c:	d040      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800eb26:	d03b      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb30:	d036      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb36:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800eb3a:	d031      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb40:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800eb44:	d02c      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb4a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800eb4e:	d027      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb58:	d022      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb5e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800eb62:	d01d      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb68:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800eb6c:	d018      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb72:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800eb76:	d013      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eb80:	d00e      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb86:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800eb8a:	d009      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb90:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800eb94:	d004      	beq.n	800eba0 <HAL_RCC_OscConfig+0x5c0>
 800eb96:	f240 21b9 	movw	r1, #697	; 0x2b9
 800eb9a:	4847      	ldr	r0, [pc, #284]	; (800ecb8 <HAL_RCC_OscConfig+0x6d8>)
 800eb9c:	f7fc fd8a 	bl	800b6b4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eba0:	4b46      	ldr	r3, [pc, #280]	; (800ecbc <HAL_RCC_OscConfig+0x6dc>)
 800eba2:	2200      	movs	r2, #0
 800eba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eba6:	f7fd f9ef 	bl	800bf88 <HAL_GetTick>
 800ebaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ebac:	e008      	b.n	800ebc0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ebae:	f7fd f9eb 	bl	800bf88 <HAL_GetTick>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	1ad3      	subs	r3, r2, r3
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	d901      	bls.n	800ebc0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800ebbc:	2303      	movs	r3, #3
 800ebbe:	e075      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ebc0:	4b3c      	ldr	r3, [pc, #240]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d1f0      	bne.n	800ebae <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6a1b      	ldr	r3, [r3, #32]
 800ebd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebd4:	d116      	bne.n	800ec04 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	689b      	ldr	r3, [r3, #8]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d009      	beq.n	800ebf2 <HAL_RCC_OscConfig+0x612>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ebe6:	d004      	beq.n	800ebf2 <HAL_RCC_OscConfig+0x612>
 800ebe8:	f240 21cf 	movw	r1, #719	; 0x2cf
 800ebec:	4832      	ldr	r0, [pc, #200]	; (800ecb8 <HAL_RCC_OscConfig+0x6d8>)
 800ebee:	f7fc fd61 	bl	800b6b4 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ebf2:	4b30      	ldr	r3, [pc, #192]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	492d      	ldr	r1, [pc, #180]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ec00:	4313      	orrs	r3, r2
 800ec02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ec04:	4b2b      	ldr	r3, [pc, #172]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a19      	ldr	r1, [r3, #32]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec14:	430b      	orrs	r3, r1
 800ec16:	4927      	ldr	r1, [pc, #156]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ec1c:	4b27      	ldr	r3, [pc, #156]	; (800ecbc <HAL_RCC_OscConfig+0x6dc>)
 800ec1e:	2201      	movs	r2, #1
 800ec20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec22:	f7fd f9b1 	bl	800bf88 <HAL_GetTick>
 800ec26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ec28:	e008      	b.n	800ec3c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec2a:	f7fd f9ad 	bl	800bf88 <HAL_GetTick>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	2b02      	cmp	r3, #2
 800ec36:	d901      	bls.n	800ec3c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800ec38:	2303      	movs	r3, #3
 800ec3a:	e037      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ec3c:	4b1d      	ldr	r3, [pc, #116]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d0f0      	beq.n	800ec2a <HAL_RCC_OscConfig+0x64a>
 800ec48:	e02f      	b.n	800ecaa <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec4a:	4b1c      	ldr	r3, [pc, #112]	; (800ecbc <HAL_RCC_OscConfig+0x6dc>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec50:	f7fd f99a 	bl	800bf88 <HAL_GetTick>
 800ec54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ec56:	e008      	b.n	800ec6a <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec58:	f7fd f996 	bl	800bf88 <HAL_GetTick>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	1ad3      	subs	r3, r2, r3
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	d901      	bls.n	800ec6a <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800ec66:	2303      	movs	r3, #3
 800ec68:	e020      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ec6a:	4b12      	ldr	r3, [pc, #72]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d1f0      	bne.n	800ec58 <HAL_RCC_OscConfig+0x678>
 800ec76:	e018      	b.n	800ecaa <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	69db      	ldr	r3, [r3, #28]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d101      	bne.n	800ec84 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	e013      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ec84:	4b0b      	ldr	r3, [pc, #44]	; (800ecb4 <HAL_RCC_OscConfig+0x6d4>)
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6a1b      	ldr	r3, [r3, #32]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d106      	bne.n	800eca6 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d001      	beq.n	800ecaa <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800eca6:	2301      	movs	r3, #1
 800eca8:	e000      	b.n	800ecac <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3718      	adds	r7, #24
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	40021000 	.word	0x40021000
 800ecb8:	08012724 	.word	0x08012724
 800ecbc:	42420060 	.word	0x42420060

0800ecc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b084      	sub	sp, #16
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d101      	bne.n	800ecd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e176      	b.n	800efc2 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f003 0301 	and.w	r3, r3, #1
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d116      	bne.n	800ed0e <HAL_RCC_ClockConfig+0x4e>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f003 0302 	and.w	r3, r3, #2
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d110      	bne.n	800ed0e <HAL_RCC_ClockConfig+0x4e>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f003 0304 	and.w	r3, r3, #4
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d10a      	bne.n	800ed0e <HAL_RCC_ClockConfig+0x4e>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f003 0308 	and.w	r3, r3, #8
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d104      	bne.n	800ed0e <HAL_RCC_ClockConfig+0x4e>
 800ed04:	f44f 714e 	mov.w	r1, #824	; 0x338
 800ed08:	4874      	ldr	r0, [pc, #464]	; (800eedc <HAL_RCC_ClockConfig+0x21c>)
 800ed0a:	f7fc fcd3 	bl	800b6b4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00a      	beq.n	800ed2a <HAL_RCC_ClockConfig+0x6a>
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d007      	beq.n	800ed2a <HAL_RCC_ClockConfig+0x6a>
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	2b02      	cmp	r3, #2
 800ed1e:	d004      	beq.n	800ed2a <HAL_RCC_ClockConfig+0x6a>
 800ed20:	f240 3139 	movw	r1, #825	; 0x339
 800ed24:	486d      	ldr	r0, [pc, #436]	; (800eedc <HAL_RCC_ClockConfig+0x21c>)
 800ed26:	f7fc fcc5 	bl	800b6b4 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ed2a:	4b6d      	ldr	r3, [pc, #436]	; (800eee0 <HAL_RCC_ClockConfig+0x220>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f003 0307 	and.w	r3, r3, #7
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d910      	bls.n	800ed5a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed38:	4b69      	ldr	r3, [pc, #420]	; (800eee0 <HAL_RCC_ClockConfig+0x220>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f023 0207 	bic.w	r2, r3, #7
 800ed40:	4967      	ldr	r1, [pc, #412]	; (800eee0 <HAL_RCC_ClockConfig+0x220>)
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	4313      	orrs	r3, r2
 800ed46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed48:	4b65      	ldr	r3, [pc, #404]	; (800eee0 <HAL_RCC_ClockConfig+0x220>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f003 0307 	and.w	r3, r3, #7
 800ed50:	683a      	ldr	r2, [r7, #0]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d001      	beq.n	800ed5a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800ed56:	2301      	movs	r3, #1
 800ed58:	e133      	b.n	800efc2 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f003 0302 	and.w	r3, r3, #2
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d049      	beq.n	800edfa <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f003 0304 	and.w	r3, r3, #4
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d005      	beq.n	800ed7e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ed72:	4b5c      	ldr	r3, [pc, #368]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	4a5b      	ldr	r2, [pc, #364]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800ed78:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ed7c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f003 0308 	and.w	r3, r3, #8
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d005      	beq.n	800ed96 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ed8a:	4b56      	ldr	r3, [pc, #344]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	4a55      	ldr	r2, [pc, #340]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800ed90:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ed94:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	689b      	ldr	r3, [r3, #8]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d024      	beq.n	800ede8 <HAL_RCC_ClockConfig+0x128>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	689b      	ldr	r3, [r3, #8]
 800eda2:	2b80      	cmp	r3, #128	; 0x80
 800eda4:	d020      	beq.n	800ede8 <HAL_RCC_ClockConfig+0x128>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	2b90      	cmp	r3, #144	; 0x90
 800edac:	d01c      	beq.n	800ede8 <HAL_RCC_ClockConfig+0x128>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	2ba0      	cmp	r3, #160	; 0xa0
 800edb4:	d018      	beq.n	800ede8 <HAL_RCC_ClockConfig+0x128>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	2bb0      	cmp	r3, #176	; 0xb0
 800edbc:	d014      	beq.n	800ede8 <HAL_RCC_ClockConfig+0x128>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	2bc0      	cmp	r3, #192	; 0xc0
 800edc4:	d010      	beq.n	800ede8 <HAL_RCC_ClockConfig+0x128>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	2bd0      	cmp	r3, #208	; 0xd0
 800edcc:	d00c      	beq.n	800ede8 <HAL_RCC_ClockConfig+0x128>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	2be0      	cmp	r3, #224	; 0xe0
 800edd4:	d008      	beq.n	800ede8 <HAL_RCC_ClockConfig+0x128>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	2bf0      	cmp	r3, #240	; 0xf0
 800eddc:	d004      	beq.n	800ede8 <HAL_RCC_ClockConfig+0x128>
 800edde:	f240 315f 	movw	r1, #863	; 0x35f
 800ede2:	483e      	ldr	r0, [pc, #248]	; (800eedc <HAL_RCC_ClockConfig+0x21c>)
 800ede4:	f7fc fc66 	bl	800b6b4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ede8:	4b3e      	ldr	r3, [pc, #248]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	493b      	ldr	r1, [pc, #236]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800edf6:	4313      	orrs	r3, r2
 800edf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f003 0301 	and.w	r3, r3, #1
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d051      	beq.n	800eeaa <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00c      	beq.n	800ee28 <HAL_RCC_ClockConfig+0x168>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d008      	beq.n	800ee28 <HAL_RCC_ClockConfig+0x168>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	2b02      	cmp	r3, #2
 800ee1c:	d004      	beq.n	800ee28 <HAL_RCC_ClockConfig+0x168>
 800ee1e:	f240 3166 	movw	r1, #870	; 0x366
 800ee22:	482e      	ldr	r0, [pc, #184]	; (800eedc <HAL_RCC_ClockConfig+0x21c>)
 800ee24:	f7fc fc46 	bl	800b6b4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d107      	bne.n	800ee40 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee30:	4b2c      	ldr	r3, [pc, #176]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d115      	bne.n	800ee68 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	e0c0      	b.n	800efc2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	2b02      	cmp	r3, #2
 800ee46:	d107      	bne.n	800ee58 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ee48:	4b26      	ldr	r3, [pc, #152]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d109      	bne.n	800ee68 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800ee54:	2301      	movs	r3, #1
 800ee56:	e0b4      	b.n	800efc2 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ee58:	4b22      	ldr	r3, [pc, #136]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f003 0302 	and.w	r3, r3, #2
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d101      	bne.n	800ee68 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800ee64:	2301      	movs	r3, #1
 800ee66:	e0ac      	b.n	800efc2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ee68:	4b1e      	ldr	r3, [pc, #120]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	f023 0203 	bic.w	r2, r3, #3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	491b      	ldr	r1, [pc, #108]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800ee76:	4313      	orrs	r3, r2
 800ee78:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ee7a:	f7fd f885 	bl	800bf88 <HAL_GetTick>
 800ee7e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ee80:	e00a      	b.n	800ee98 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ee82:	f7fd f881 	bl	800bf88 <HAL_GetTick>
 800ee86:	4602      	mov	r2, r0
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	1ad3      	subs	r3, r2, r3
 800ee8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d901      	bls.n	800ee98 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800ee94:	2303      	movs	r3, #3
 800ee96:	e094      	b.n	800efc2 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ee98:	4b12      	ldr	r3, [pc, #72]	; (800eee4 <HAL_RCC_ClockConfig+0x224>)
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	f003 020c 	and.w	r2, r3, #12
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d1eb      	bne.n	800ee82 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eeaa:	4b0d      	ldr	r3, [pc, #52]	; (800eee0 <HAL_RCC_ClockConfig+0x220>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f003 0307 	and.w	r3, r3, #7
 800eeb2:	683a      	ldr	r2, [r7, #0]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d217      	bcs.n	800eee8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eeb8:	4b09      	ldr	r3, [pc, #36]	; (800eee0 <HAL_RCC_ClockConfig+0x220>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f023 0207 	bic.w	r2, r3, #7
 800eec0:	4907      	ldr	r1, [pc, #28]	; (800eee0 <HAL_RCC_ClockConfig+0x220>)
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	4313      	orrs	r3, r2
 800eec6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eec8:	4b05      	ldr	r3, [pc, #20]	; (800eee0 <HAL_RCC_ClockConfig+0x220>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f003 0307 	and.w	r3, r3, #7
 800eed0:	683a      	ldr	r2, [r7, #0]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d008      	beq.n	800eee8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800eed6:	2301      	movs	r3, #1
 800eed8:	e073      	b.n	800efc2 <HAL_RCC_ClockConfig+0x302>
 800eeda:	bf00      	nop
 800eedc:	08012724 	.word	0x08012724
 800eee0:	40022000 	.word	0x40022000
 800eee4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f003 0304 	and.w	r3, r3, #4
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d025      	beq.n	800ef40 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d018      	beq.n	800ef2e <HAL_RCC_ClockConfig+0x26e>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef04:	d013      	beq.n	800ef2e <HAL_RCC_ClockConfig+0x26e>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	68db      	ldr	r3, [r3, #12]
 800ef0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800ef0e:	d00e      	beq.n	800ef2e <HAL_RCC_ClockConfig+0x26e>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ef18:	d009      	beq.n	800ef2e <HAL_RCC_ClockConfig+0x26e>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ef22:	d004      	beq.n	800ef2e <HAL_RCC_ClockConfig+0x26e>
 800ef24:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800ef28:	4828      	ldr	r0, [pc, #160]	; (800efcc <HAL_RCC_ClockConfig+0x30c>)
 800ef2a:	f7fc fbc3 	bl	800b6b4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ef2e:	4b28      	ldr	r3, [pc, #160]	; (800efd0 <HAL_RCC_ClockConfig+0x310>)
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	4925      	ldr	r1, [pc, #148]	; (800efd0 <HAL_RCC_ClockConfig+0x310>)
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f003 0308 	and.w	r3, r3, #8
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d026      	beq.n	800ef9a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	691b      	ldr	r3, [r3, #16]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d018      	beq.n	800ef86 <HAL_RCC_ClockConfig+0x2c6>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef5c:	d013      	beq.n	800ef86 <HAL_RCC_ClockConfig+0x2c6>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	691b      	ldr	r3, [r3, #16]
 800ef62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800ef66:	d00e      	beq.n	800ef86 <HAL_RCC_ClockConfig+0x2c6>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ef70:	d009      	beq.n	800ef86 <HAL_RCC_ClockConfig+0x2c6>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	691b      	ldr	r3, [r3, #16]
 800ef76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ef7a:	d004      	beq.n	800ef86 <HAL_RCC_ClockConfig+0x2c6>
 800ef7c:	f240 31ab 	movw	r1, #939	; 0x3ab
 800ef80:	4812      	ldr	r0, [pc, #72]	; (800efcc <HAL_RCC_ClockConfig+0x30c>)
 800ef82:	f7fc fb97 	bl	800b6b4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ef86:	4b12      	ldr	r3, [pc, #72]	; (800efd0 <HAL_RCC_ClockConfig+0x310>)
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	691b      	ldr	r3, [r3, #16]
 800ef92:	00db      	lsls	r3, r3, #3
 800ef94:	490e      	ldr	r1, [pc, #56]	; (800efd0 <HAL_RCC_ClockConfig+0x310>)
 800ef96:	4313      	orrs	r3, r2
 800ef98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ef9a:	f000 f821 	bl	800efe0 <HAL_RCC_GetSysClockFreq>
 800ef9e:	4601      	mov	r1, r0
 800efa0:	4b0b      	ldr	r3, [pc, #44]	; (800efd0 <HAL_RCC_ClockConfig+0x310>)
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	091b      	lsrs	r3, r3, #4
 800efa6:	f003 030f 	and.w	r3, r3, #15
 800efaa:	4a0a      	ldr	r2, [pc, #40]	; (800efd4 <HAL_RCC_ClockConfig+0x314>)
 800efac:	5cd3      	ldrb	r3, [r2, r3]
 800efae:	fa21 f303 	lsr.w	r3, r1, r3
 800efb2:	4a09      	ldr	r2, [pc, #36]	; (800efd8 <HAL_RCC_ClockConfig+0x318>)
 800efb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800efb6:	4b09      	ldr	r3, [pc, #36]	; (800efdc <HAL_RCC_ClockConfig+0x31c>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fc ffa2 	bl	800bf04 <HAL_InitTick>

  return HAL_OK;
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	08012724 	.word	0x08012724
 800efd0:	40021000 	.word	0x40021000
 800efd4:	0801536c 	.word	0x0801536c
 800efd8:	2000009c 	.word	0x2000009c
 800efdc:	200000a0 	.word	0x200000a0

0800efe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800efe0:	b490      	push	{r4, r7}
 800efe2:	b08a      	sub	sp, #40	; 0x28
 800efe4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800efe6:	4b2a      	ldr	r3, [pc, #168]	; (800f090 <HAL_RCC_GetSysClockFreq+0xb0>)
 800efe8:	1d3c      	adds	r4, r7, #4
 800efea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800efec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800eff0:	4b28      	ldr	r3, [pc, #160]	; (800f094 <HAL_RCC_GetSysClockFreq+0xb4>)
 800eff2:	881b      	ldrh	r3, [r3, #0]
 800eff4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800eff6:	2300      	movs	r3, #0
 800eff8:	61fb      	str	r3, [r7, #28]
 800effa:	2300      	movs	r3, #0
 800effc:	61bb      	str	r3, [r7, #24]
 800effe:	2300      	movs	r3, #0
 800f000:	627b      	str	r3, [r7, #36]	; 0x24
 800f002:	2300      	movs	r3, #0
 800f004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800f006:	2300      	movs	r3, #0
 800f008:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800f00a:	4b23      	ldr	r3, [pc, #140]	; (800f098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	f003 030c 	and.w	r3, r3, #12
 800f016:	2b04      	cmp	r3, #4
 800f018:	d002      	beq.n	800f020 <HAL_RCC_GetSysClockFreq+0x40>
 800f01a:	2b08      	cmp	r3, #8
 800f01c:	d003      	beq.n	800f026 <HAL_RCC_GetSysClockFreq+0x46>
 800f01e:	e02d      	b.n	800f07c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f020:	4b1e      	ldr	r3, [pc, #120]	; (800f09c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f022:	623b      	str	r3, [r7, #32]
      break;
 800f024:	e02d      	b.n	800f082 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800f026:	69fb      	ldr	r3, [r7, #28]
 800f028:	0c9b      	lsrs	r3, r3, #18
 800f02a:	f003 030f 	and.w	r3, r3, #15
 800f02e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f032:	4413      	add	r3, r2
 800f034:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800f038:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f040:	2b00      	cmp	r3, #0
 800f042:	d013      	beq.n	800f06c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800f044:	4b14      	ldr	r3, [pc, #80]	; (800f098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	0c5b      	lsrs	r3, r3, #17
 800f04a:	f003 0301 	and.w	r3, r3, #1
 800f04e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f052:	4413      	add	r3, r2
 800f054:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800f058:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	4a0f      	ldr	r2, [pc, #60]	; (800f09c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f05e:	fb02 f203 	mul.w	r2, r2, r3
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	fbb2 f3f3 	udiv	r3, r2, r3
 800f068:	627b      	str	r3, [r7, #36]	; 0x24
 800f06a:	e004      	b.n	800f076 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	4a0c      	ldr	r2, [pc, #48]	; (800f0a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800f070:	fb02 f303 	mul.w	r3, r2, r3
 800f074:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800f076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f078:	623b      	str	r3, [r7, #32]
      break;
 800f07a:	e002      	b.n	800f082 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800f07c:	4b07      	ldr	r3, [pc, #28]	; (800f09c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f07e:	623b      	str	r3, [r7, #32]
      break;
 800f080:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f082:	6a3b      	ldr	r3, [r7, #32]
}
 800f084:	4618      	mov	r0, r3
 800f086:	3728      	adds	r7, #40	; 0x28
 800f088:	46bd      	mov	sp, r7
 800f08a:	bc90      	pop	{r4, r7}
 800f08c:	4770      	bx	lr
 800f08e:	bf00      	nop
 800f090:	0801275c 	.word	0x0801275c
 800f094:	0801276c 	.word	0x0801276c
 800f098:	40021000 	.word	0x40021000
 800f09c:	007a1200 	.word	0x007a1200
 800f0a0:	003d0900 	.word	0x003d0900

0800f0a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f0a8:	4b02      	ldr	r3, [pc, #8]	; (800f0b4 <HAL_RCC_GetHCLKFreq+0x10>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bc80      	pop	{r7}
 800f0b2:	4770      	bx	lr
 800f0b4:	2000009c 	.word	0x2000009c

0800f0b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f0bc:	f7ff fff2 	bl	800f0a4 <HAL_RCC_GetHCLKFreq>
 800f0c0:	4601      	mov	r1, r0
 800f0c2:	4b05      	ldr	r3, [pc, #20]	; (800f0d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	0a1b      	lsrs	r3, r3, #8
 800f0c8:	f003 0307 	and.w	r3, r3, #7
 800f0cc:	4a03      	ldr	r2, [pc, #12]	; (800f0dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f0ce:	5cd3      	ldrb	r3, [r2, r3]
 800f0d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	40021000 	.word	0x40021000
 800f0dc:	0801537c 	.word	0x0801537c

0800f0e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f0e4:	f7ff ffde 	bl	800f0a4 <HAL_RCC_GetHCLKFreq>
 800f0e8:	4601      	mov	r1, r0
 800f0ea:	4b05      	ldr	r3, [pc, #20]	; (800f100 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	0adb      	lsrs	r3, r3, #11
 800f0f0:	f003 0307 	and.w	r3, r3, #7
 800f0f4:	4a03      	ldr	r2, [pc, #12]	; (800f104 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f0f6:	5cd3      	ldrb	r3, [r2, r3]
 800f0f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	40021000 	.word	0x40021000
 800f104:	0801537c 	.word	0x0801537c

0800f108 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800f108:	b480      	push	{r7}
 800f10a:	b085      	sub	sp, #20
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800f110:	4b0a      	ldr	r3, [pc, #40]	; (800f13c <RCC_Delay+0x34>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4a0a      	ldr	r2, [pc, #40]	; (800f140 <RCC_Delay+0x38>)
 800f116:	fba2 2303 	umull	r2, r3, r2, r3
 800f11a:	0a5b      	lsrs	r3, r3, #9
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	fb02 f303 	mul.w	r3, r2, r3
 800f122:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800f124:	bf00      	nop
  }
  while (Delay --);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	1e5a      	subs	r2, r3, #1
 800f12a:	60fa      	str	r2, [r7, #12]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d1f9      	bne.n	800f124 <RCC_Delay+0x1c>
}
 800f130:	bf00      	nop
 800f132:	3714      	adds	r7, #20
 800f134:	46bd      	mov	sp, r7
 800f136:	bc80      	pop	{r7}
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	2000009c 	.word	0x2000009c
 800f140:	10624dd3 	.word	0x10624dd3

0800f144 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b086      	sub	sp, #24
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800f14c:	2300      	movs	r3, #0
 800f14e:	613b      	str	r3, [r7, #16]
 800f150:	2300      	movs	r3, #0
 800f152:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f003 0301 	and.w	r3, r3, #1
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10f      	bne.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f003 0302 	and.w	r3, r3, #2
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d109      	bne.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	f003 0310 	and.w	r3, r3, #16
 800f174:	2b00      	cmp	r3, #0
 800f176:	d103      	bne.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f178:	216c      	movs	r1, #108	; 0x6c
 800f17a:	4873      	ldr	r0, [pc, #460]	; (800f348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f17c:	f7fc fa9a 	bl	800b6b4 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f000 8095 	beq.w	800f2b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d012      	beq.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f19e:	d00d      	beq.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1a8:	d008      	beq.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f1b2:	d003      	beq.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f1b4:	2172      	movs	r1, #114	; 0x72
 800f1b6:	4864      	ldr	r0, [pc, #400]	; (800f348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f1b8:	f7fc fa7c 	bl	800b6b4 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f1c0:	4b62      	ldr	r3, [pc, #392]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f1c2:	69db      	ldr	r3, [r3, #28]
 800f1c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d10d      	bne.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f1cc:	4b5f      	ldr	r3, [pc, #380]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f1ce:	69db      	ldr	r3, [r3, #28]
 800f1d0:	4a5e      	ldr	r2, [pc, #376]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f1d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1d6:	61d3      	str	r3, [r2, #28]
 800f1d8:	4b5c      	ldr	r3, [pc, #368]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f1da:	69db      	ldr	r3, [r3, #28]
 800f1dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1e0:	60bb      	str	r3, [r7, #8]
 800f1e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f1e8:	4b59      	ldr	r3, [pc, #356]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d118      	bne.n	800f226 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f1f4:	4b56      	ldr	r3, [pc, #344]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4a55      	ldr	r2, [pc, #340]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f1fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f1fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f200:	f7fc fec2 	bl	800bf88 <HAL_GetTick>
 800f204:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f206:	e008      	b.n	800f21a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f208:	f7fc febe 	bl	800bf88 <HAL_GetTick>
 800f20c:	4602      	mov	r2, r0
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	1ad3      	subs	r3, r2, r3
 800f212:	2b64      	cmp	r3, #100	; 0x64
 800f214:	d901      	bls.n	800f21a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800f216:	2303      	movs	r3, #3
 800f218:	e092      	b.n	800f340 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f21a:	4b4d      	ldr	r3, [pc, #308]	; (800f350 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f222:	2b00      	cmp	r3, #0
 800f224:	d0f0      	beq.n	800f208 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f226:	4b49      	ldr	r3, [pc, #292]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f22e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d02e      	beq.n	800f294 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f23e:	68fa      	ldr	r2, [r7, #12]
 800f240:	429a      	cmp	r2, r3
 800f242:	d027      	beq.n	800f294 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f244:	4b41      	ldr	r3, [pc, #260]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f246:	6a1b      	ldr	r3, [r3, #32]
 800f248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f24c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f24e:	4b41      	ldr	r3, [pc, #260]	; (800f354 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f250:	2201      	movs	r2, #1
 800f252:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f254:	4b3f      	ldr	r3, [pc, #252]	; (800f354 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f256:	2200      	movs	r2, #0
 800f258:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800f25a:	4a3c      	ldr	r2, [pc, #240]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f003 0301 	and.w	r3, r3, #1
 800f266:	2b00      	cmp	r3, #0
 800f268:	d014      	beq.n	800f294 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f26a:	f7fc fe8d 	bl	800bf88 <HAL_GetTick>
 800f26e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f270:	e00a      	b.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f272:	f7fc fe89 	bl	800bf88 <HAL_GetTick>
 800f276:	4602      	mov	r2, r0
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	1ad3      	subs	r3, r2, r3
 800f27c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f280:	4293      	cmp	r3, r2
 800f282:	d901      	bls.n	800f288 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800f284:	2303      	movs	r3, #3
 800f286:	e05b      	b.n	800f340 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f288:	4b30      	ldr	r3, [pc, #192]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f28a:	6a1b      	ldr	r3, [r3, #32]
 800f28c:	f003 0302 	and.w	r3, r3, #2
 800f290:	2b00      	cmp	r3, #0
 800f292:	d0ee      	beq.n	800f272 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f294:	4b2d      	ldr	r3, [pc, #180]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f296:	6a1b      	ldr	r3, [r3, #32]
 800f298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	492a      	ldr	r1, [pc, #168]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800f2a6:	7dfb      	ldrb	r3, [r7, #23]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d105      	bne.n	800f2b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f2ac:	4b27      	ldr	r3, [pc, #156]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f2ae:	69db      	ldr	r3, [r3, #28]
 800f2b0:	4a26      	ldr	r2, [pc, #152]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f2b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f2b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f003 0302 	and.w	r3, r3, #2
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d01f      	beq.n	800f304 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d012      	beq.n	800f2f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f2d4:	d00d      	beq.n	800f2f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2de:	d008      	beq.n	800f2f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f2e8:	d003      	beq.n	800f2f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f2ea:	21b9      	movs	r1, #185	; 0xb9
 800f2ec:	4816      	ldr	r0, [pc, #88]	; (800f348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f2ee:	f7fc f9e1 	bl	800b6b4 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f2f2:	4b16      	ldr	r3, [pc, #88]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	689b      	ldr	r3, [r3, #8]
 800f2fe:	4913      	ldr	r1, [pc, #76]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f300:	4313      	orrs	r3, r2
 800f302:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f003 0310 	and.w	r3, r3, #16
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d016      	beq.n	800f33e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f318:	d008      	beq.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d004      	beq.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f322:	f240 1115 	movw	r1, #277	; 0x115
 800f326:	4808      	ldr	r0, [pc, #32]	; (800f348 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f328:	f7fc f9c4 	bl	800b6b4 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f32c:	4b07      	ldr	r3, [pc, #28]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	4904      	ldr	r1, [pc, #16]	; (800f34c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f33a:	4313      	orrs	r3, r2
 800f33c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800f33e:	2300      	movs	r3, #0
}
 800f340:	4618      	mov	r0, r3
 800f342:	3718      	adds	r7, #24
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	08012770 	.word	0x08012770
 800f34c:	40021000 	.word	0x40021000
 800f350:	40007000 	.word	0x40007000
 800f354:	42420440 	.word	0x42420440

0800f358 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d101      	bne.n	800f36a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f366:	2301      	movs	r3, #1
 800f368:	e0fd      	b.n	800f566 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	4a80      	ldr	r2, [pc, #512]	; (800f570 <HAL_SPI_Init+0x218>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d009      	beq.n	800f388 <HAL_SPI_Init+0x30>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4a7e      	ldr	r2, [pc, #504]	; (800f574 <HAL_SPI_Init+0x21c>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d004      	beq.n	800f388 <HAL_SPI_Init+0x30>
 800f37e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f382:	487d      	ldr	r0, [pc, #500]	; (800f578 <HAL_SPI_Init+0x220>)
 800f384:	f7fc f996 	bl	800b6b4 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d009      	beq.n	800f3a4 <HAL_SPI_Init+0x4c>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f398:	d004      	beq.n	800f3a4 <HAL_SPI_Init+0x4c>
 800f39a:	f240 1159 	movw	r1, #345	; 0x159
 800f39e:	4876      	ldr	r0, [pc, #472]	; (800f578 <HAL_SPI_Init+0x220>)
 800f3a0:	f7fc f988 	bl	800b6b4 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	689b      	ldr	r3, [r3, #8]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d00e      	beq.n	800f3ca <HAL_SPI_Init+0x72>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3b4:	d009      	beq.n	800f3ca <HAL_SPI_Init+0x72>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3be:	d004      	beq.n	800f3ca <HAL_SPI_Init+0x72>
 800f3c0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800f3c4:	486c      	ldr	r0, [pc, #432]	; (800f578 <HAL_SPI_Init+0x220>)
 800f3c6:	f7fc f975 	bl	800b6b4 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f3d2:	d008      	beq.n	800f3e6 <HAL_SPI_Init+0x8e>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d004      	beq.n	800f3e6 <HAL_SPI_Init+0x8e>
 800f3dc:	f240 115b 	movw	r1, #347	; 0x15b
 800f3e0:	4865      	ldr	r0, [pc, #404]	; (800f578 <HAL_SPI_Init+0x220>)
 800f3e2:	f7fc f967 	bl	800b6b4 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	699b      	ldr	r3, [r3, #24]
 800f3ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3ee:	d00d      	beq.n	800f40c <HAL_SPI_Init+0xb4>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	699b      	ldr	r3, [r3, #24]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d009      	beq.n	800f40c <HAL_SPI_Init+0xb4>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	699b      	ldr	r3, [r3, #24]
 800f3fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f400:	d004      	beq.n	800f40c <HAL_SPI_Init+0xb4>
 800f402:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800f406:	485c      	ldr	r0, [pc, #368]	; (800f578 <HAL_SPI_Init+0x220>)
 800f408:	f7fc f954 	bl	800b6b4 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	69db      	ldr	r3, [r3, #28]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d020      	beq.n	800f456 <HAL_SPI_Init+0xfe>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	69db      	ldr	r3, [r3, #28]
 800f418:	2b08      	cmp	r3, #8
 800f41a:	d01c      	beq.n	800f456 <HAL_SPI_Init+0xfe>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	69db      	ldr	r3, [r3, #28]
 800f420:	2b10      	cmp	r3, #16
 800f422:	d018      	beq.n	800f456 <HAL_SPI_Init+0xfe>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	69db      	ldr	r3, [r3, #28]
 800f428:	2b18      	cmp	r3, #24
 800f42a:	d014      	beq.n	800f456 <HAL_SPI_Init+0xfe>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	69db      	ldr	r3, [r3, #28]
 800f430:	2b20      	cmp	r3, #32
 800f432:	d010      	beq.n	800f456 <HAL_SPI_Init+0xfe>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	69db      	ldr	r3, [r3, #28]
 800f438:	2b28      	cmp	r3, #40	; 0x28
 800f43a:	d00c      	beq.n	800f456 <HAL_SPI_Init+0xfe>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	69db      	ldr	r3, [r3, #28]
 800f440:	2b30      	cmp	r3, #48	; 0x30
 800f442:	d008      	beq.n	800f456 <HAL_SPI_Init+0xfe>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	69db      	ldr	r3, [r3, #28]
 800f448:	2b38      	cmp	r3, #56	; 0x38
 800f44a:	d004      	beq.n	800f456 <HAL_SPI_Init+0xfe>
 800f44c:	f240 115d 	movw	r1, #349	; 0x15d
 800f450:	4849      	ldr	r0, [pc, #292]	; (800f578 <HAL_SPI_Init+0x220>)
 800f452:	f7fc f92f 	bl	800b6b4 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6a1b      	ldr	r3, [r3, #32]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d008      	beq.n	800f470 <HAL_SPI_Init+0x118>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6a1b      	ldr	r3, [r3, #32]
 800f462:	2b80      	cmp	r3, #128	; 0x80
 800f464:	d004      	beq.n	800f470 <HAL_SPI_Init+0x118>
 800f466:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800f46a:	4843      	ldr	r0, [pc, #268]	; (800f578 <HAL_SPI_Init+0x220>)
 800f46c:	f7fc f922 	bl	800b6b4 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f474:	2b00      	cmp	r3, #0
 800f476:	d004      	beq.n	800f482 <HAL_SPI_Init+0x12a>
 800f478:	f240 1161 	movw	r1, #353	; 0x161
 800f47c:	483e      	ldr	r0, [pc, #248]	; (800f578 <HAL_SPI_Init+0x220>)
 800f47e:	f7fc f919 	bl	800b6b4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f486:	2b00      	cmp	r3, #0
 800f488:	d119      	bne.n	800f4be <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	691b      	ldr	r3, [r3, #16]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d008      	beq.n	800f4a4 <HAL_SPI_Init+0x14c>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	691b      	ldr	r3, [r3, #16]
 800f496:	2b02      	cmp	r3, #2
 800f498:	d004      	beq.n	800f4a4 <HAL_SPI_Init+0x14c>
 800f49a:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800f49e:	4836      	ldr	r0, [pc, #216]	; (800f578 <HAL_SPI_Init+0x220>)
 800f4a0:	f7fc f908 	bl	800b6b4 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	695b      	ldr	r3, [r3, #20]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d008      	beq.n	800f4be <HAL_SPI_Init+0x166>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	695b      	ldr	r3, [r3, #20]
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	d004      	beq.n	800f4be <HAL_SPI_Init+0x166>
 800f4b4:	f240 1165 	movw	r1, #357	; 0x165
 800f4b8:	482f      	ldr	r0, [pc, #188]	; (800f578 <HAL_SPI_Init+0x220>)
 800f4ba:	f7fc f8fb 	bl	800b6b4 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d106      	bne.n	800f4de <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7fc f92d 	bl	800b738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2202      	movs	r2, #2
 800f4e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f4f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	685a      	ldr	r2, [r3, #4]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	689b      	ldr	r3, [r3, #8]
 800f4fe:	431a      	orrs	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	431a      	orrs	r2, r3
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	691b      	ldr	r3, [r3, #16]
 800f50a:	431a      	orrs	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	695b      	ldr	r3, [r3, #20]
 800f510:	431a      	orrs	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	699b      	ldr	r3, [r3, #24]
 800f516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f51a:	431a      	orrs	r2, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	69db      	ldr	r3, [r3, #28]
 800f520:	431a      	orrs	r2, r3
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6a1b      	ldr	r3, [r3, #32]
 800f526:	ea42 0103 	orr.w	r1, r2, r3
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	430a      	orrs	r2, r1
 800f534:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	0c1a      	lsrs	r2, r3, #16
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f002 0204 	and.w	r2, r2, #4
 800f544:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	69da      	ldr	r2, [r3, #28]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f554:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2201      	movs	r2, #1
 800f560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f564:	2300      	movs	r3, #0
}
 800f566:	4618      	mov	r0, r3
 800f568:	3708      	adds	r7, #8
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	40013000 	.word	0x40013000
 800f574:	40003800 	.word	0x40003800
 800f578:	080127c0 	.word	0x080127c0

0800f57c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b088      	sub	sp, #32
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	603b      	str	r3, [r7, #0]
 800f588:	4613      	mov	r3, r2
 800f58a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f58c:	2300      	movs	r3, #0
 800f58e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d009      	beq.n	800f5ac <HAL_SPI_Transmit+0x30>
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	689b      	ldr	r3, [r3, #8]
 800f59c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5a0:	d004      	beq.n	800f5ac <HAL_SPI_Transmit+0x30>
 800f5a2:	f240 310a 	movw	r1, #778	; 0x30a
 800f5a6:	4896      	ldr	r0, [pc, #600]	; (800f800 <HAL_SPI_Transmit+0x284>)
 800f5a8:	f7fc f884 	bl	800b6b4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d101      	bne.n	800f5ba <HAL_SPI_Transmit+0x3e>
 800f5b6:	2302      	movs	r3, #2
 800f5b8:	e11e      	b.n	800f7f8 <HAL_SPI_Transmit+0x27c>
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2201      	movs	r2, #1
 800f5be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f5c2:	f7fc fce1 	bl	800bf88 <HAL_GetTick>
 800f5c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f5c8:	88fb      	ldrh	r3, [r7, #6]
 800f5ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d002      	beq.n	800f5de <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800f5d8:	2302      	movs	r3, #2
 800f5da:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f5dc:	e103      	b.n	800f7e6 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d002      	beq.n	800f5ea <HAL_SPI_Transmit+0x6e>
 800f5e4:	88fb      	ldrh	r3, [r7, #6]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d102      	bne.n	800f5f0 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f5ee:	e0fa      	b.n	800f7e6 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2203      	movs	r2, #3
 800f5f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	68ba      	ldr	r2, [r7, #8]
 800f602:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	88fa      	ldrh	r2, [r7, #6]
 800f608:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	88fa      	ldrh	r2, [r7, #6]
 800f60e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2200      	movs	r2, #0
 800f614:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2200      	movs	r2, #0
 800f61a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2200      	movs	r2, #0
 800f620:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2200      	movs	r2, #0
 800f626:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	2200      	movs	r2, #0
 800f62c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	689b      	ldr	r3, [r3, #8]
 800f632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f636:	d107      	bne.n	800f648 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f646:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f652:	2b40      	cmp	r3, #64	; 0x40
 800f654:	d007      	beq.n	800f666 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f664:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f66e:	d14b      	bne.n	800f708 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d002      	beq.n	800f67e <HAL_SPI_Transmit+0x102>
 800f678:	8afb      	ldrh	r3, [r7, #22]
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d13e      	bne.n	800f6fc <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f682:	881a      	ldrh	r2, [r3, #0]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f68e:	1c9a      	adds	r2, r3, #2
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f698:	b29b      	uxth	r3, r3
 800f69a:	3b01      	subs	r3, #1
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f6a2:	e02b      	b.n	800f6fc <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	f003 0302 	and.w	r3, r3, #2
 800f6ae:	2b02      	cmp	r3, #2
 800f6b0:	d112      	bne.n	800f6d8 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6b6:	881a      	ldrh	r2, [r3, #0]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6c2:	1c9a      	adds	r2, r3, #2
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	b29a      	uxth	r2, r3
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	86da      	strh	r2, [r3, #54]	; 0x36
 800f6d6:	e011      	b.n	800f6fc <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f6d8:	f7fc fc56 	bl	800bf88 <HAL_GetTick>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	69bb      	ldr	r3, [r7, #24]
 800f6e0:	1ad3      	subs	r3, r2, r3
 800f6e2:	683a      	ldr	r2, [r7, #0]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d803      	bhi.n	800f6f0 <HAL_SPI_Transmit+0x174>
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ee:	d102      	bne.n	800f6f6 <HAL_SPI_Transmit+0x17a>
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d102      	bne.n	800f6fc <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800f6f6:	2303      	movs	r3, #3
 800f6f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f6fa:	e074      	b.n	800f7e6 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f700:	b29b      	uxth	r3, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	d1ce      	bne.n	800f6a4 <HAL_SPI_Transmit+0x128>
 800f706:	e04c      	b.n	800f7a2 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d002      	beq.n	800f716 <HAL_SPI_Transmit+0x19a>
 800f710:	8afb      	ldrh	r3, [r7, #22]
 800f712:	2b01      	cmp	r3, #1
 800f714:	d140      	bne.n	800f798 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	330c      	adds	r3, #12
 800f720:	7812      	ldrb	r2, [r2, #0]
 800f722:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f728:	1c5a      	adds	r2, r3, #1
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f732:	b29b      	uxth	r3, r3
 800f734:	3b01      	subs	r3, #1
 800f736:	b29a      	uxth	r2, r3
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f73c:	e02c      	b.n	800f798 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	f003 0302 	and.w	r3, r3, #2
 800f748:	2b02      	cmp	r3, #2
 800f74a:	d113      	bne.n	800f774 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	330c      	adds	r3, #12
 800f756:	7812      	ldrb	r2, [r2, #0]
 800f758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f75e:	1c5a      	adds	r2, r3, #1
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f768:	b29b      	uxth	r3, r3
 800f76a:	3b01      	subs	r3, #1
 800f76c:	b29a      	uxth	r2, r3
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	86da      	strh	r2, [r3, #54]	; 0x36
 800f772:	e011      	b.n	800f798 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f774:	f7fc fc08 	bl	800bf88 <HAL_GetTick>
 800f778:	4602      	mov	r2, r0
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	1ad3      	subs	r3, r2, r3
 800f77e:	683a      	ldr	r2, [r7, #0]
 800f780:	429a      	cmp	r2, r3
 800f782:	d803      	bhi.n	800f78c <HAL_SPI_Transmit+0x210>
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f78a:	d102      	bne.n	800f792 <HAL_SPI_Transmit+0x216>
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d102      	bne.n	800f798 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800f792:	2303      	movs	r3, #3
 800f794:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f796:	e026      	b.n	800f7e6 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1cd      	bne.n	800f73e <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f7a2:	69ba      	ldr	r2, [r7, #24]
 800f7a4:	6839      	ldr	r1, [r7, #0]
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f000 f896 	bl	800f8d8 <SPI_EndRxTxTransaction>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d002      	beq.n	800f7b8 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2220      	movs	r2, #32
 800f7b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	689b      	ldr	r3, [r3, #8]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d10a      	bne.n	800f7d6 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	613b      	str	r3, [r7, #16]
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	613b      	str	r3, [r7, #16]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	613b      	str	r3, [r7, #16]
 800f7d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d002      	beq.n	800f7e4 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800f7de:	2301      	movs	r3, #1
 800f7e0:	77fb      	strb	r3, [r7, #31]
 800f7e2:	e000      	b.n	800f7e6 <HAL_SPI_Transmit+0x26a>
  }

error:
 800f7e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f7f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3720      	adds	r7, #32
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	080127c0 	.word	0x080127c0

0800f804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	603b      	str	r3, [r7, #0]
 800f810:	4613      	mov	r3, r2
 800f812:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f814:	e04c      	b.n	800f8b0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f81c:	d048      	beq.n	800f8b0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f81e:	f7fc fbb3 	bl	800bf88 <HAL_GetTick>
 800f822:	4602      	mov	r2, r0
 800f824:	69bb      	ldr	r3, [r7, #24]
 800f826:	1ad3      	subs	r3, r2, r3
 800f828:	683a      	ldr	r2, [r7, #0]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d902      	bls.n	800f834 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d13d      	bne.n	800f8b0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	685a      	ldr	r2, [r3, #4]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f842:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f84c:	d111      	bne.n	800f872 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	689b      	ldr	r3, [r3, #8]
 800f852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f856:	d004      	beq.n	800f862 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	689b      	ldr	r3, [r3, #8]
 800f85c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f860:	d107      	bne.n	800f872 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f870:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f87a:	d10f      	bne.n	800f89c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	681a      	ldr	r2, [r3, #0]
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f88a:	601a      	str	r2, [r3, #0]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f89a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f8ac:	2303      	movs	r3, #3
 800f8ae:	e00f      	b.n	800f8d0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	689a      	ldr	r2, [r3, #8]
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	4013      	ands	r3, r2
 800f8ba:	68ba      	ldr	r2, [r7, #8]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	bf0c      	ite	eq
 800f8c0:	2301      	moveq	r3, #1
 800f8c2:	2300      	movne	r3, #0
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	79fb      	ldrb	r3, [r7, #7]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d1a3      	bne.n	800f816 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3710      	adds	r7, #16
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b086      	sub	sp, #24
 800f8dc:	af02      	add	r7, sp, #8
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	9300      	str	r3, [sp, #0]
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	2180      	movs	r1, #128	; 0x80
 800f8ee:	68f8      	ldr	r0, [r7, #12]
 800f8f0:	f7ff ff88 	bl	800f804 <SPI_WaitFlagStateUntilTimeout>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d007      	beq.n	800f90a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8fe:	f043 0220 	orr.w	r2, r3, #32
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800f906:	2303      	movs	r3, #3
 800f908:	e000      	b.n	800f90c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d101      	bne.n	800f926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f922:	2301      	movs	r3, #1
 800f924:	e06f      	b.n	800fa06 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	4a39      	ldr	r2, [pc, #228]	; (800fa10 <HAL_TIM_Base_Init+0xfc>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d013      	beq.n	800f958 <HAL_TIM_Base_Init+0x44>
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f938:	d00e      	beq.n	800f958 <HAL_TIM_Base_Init+0x44>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	4a35      	ldr	r2, [pc, #212]	; (800fa14 <HAL_TIM_Base_Init+0x100>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d009      	beq.n	800f958 <HAL_TIM_Base_Init+0x44>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4a33      	ldr	r2, [pc, #204]	; (800fa18 <HAL_TIM_Base_Init+0x104>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d004      	beq.n	800f958 <HAL_TIM_Base_Init+0x44>
 800f94e:	f44f 7189 	mov.w	r1, #274	; 0x112
 800f952:	4832      	ldr	r0, [pc, #200]	; (800fa1c <HAL_TIM_Base_Init+0x108>)
 800f954:	f7fb feae 	bl	800b6b4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	689b      	ldr	r3, [r3, #8]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d014      	beq.n	800f98a <HAL_TIM_Base_Init+0x76>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	2b10      	cmp	r3, #16
 800f966:	d010      	beq.n	800f98a <HAL_TIM_Base_Init+0x76>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	689b      	ldr	r3, [r3, #8]
 800f96c:	2b20      	cmp	r3, #32
 800f96e:	d00c      	beq.n	800f98a <HAL_TIM_Base_Init+0x76>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	689b      	ldr	r3, [r3, #8]
 800f974:	2b40      	cmp	r3, #64	; 0x40
 800f976:	d008      	beq.n	800f98a <HAL_TIM_Base_Init+0x76>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	689b      	ldr	r3, [r3, #8]
 800f97c:	2b60      	cmp	r3, #96	; 0x60
 800f97e:	d004      	beq.n	800f98a <HAL_TIM_Base_Init+0x76>
 800f980:	f240 1113 	movw	r1, #275	; 0x113
 800f984:	4825      	ldr	r0, [pc, #148]	; (800fa1c <HAL_TIM_Base_Init+0x108>)
 800f986:	f7fb fe95 	bl	800b6b4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	691b      	ldr	r3, [r3, #16]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d00e      	beq.n	800f9b0 <HAL_TIM_Base_Init+0x9c>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	691b      	ldr	r3, [r3, #16]
 800f996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f99a:	d009      	beq.n	800f9b0 <HAL_TIM_Base_Init+0x9c>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	691b      	ldr	r3, [r3, #16]
 800f9a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9a4:	d004      	beq.n	800f9b0 <HAL_TIM_Base_Init+0x9c>
 800f9a6:	f44f 718a 	mov.w	r1, #276	; 0x114
 800f9aa:	481c      	ldr	r0, [pc, #112]	; (800fa1c <HAL_TIM_Base_Init+0x108>)
 800f9ac:	f7fb fe82 	bl	800b6b4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	699b      	ldr	r3, [r3, #24]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d008      	beq.n	800f9ca <HAL_TIM_Base_Init+0xb6>
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	699b      	ldr	r3, [r3, #24]
 800f9bc:	2b80      	cmp	r3, #128	; 0x80
 800f9be:	d004      	beq.n	800f9ca <HAL_TIM_Base_Init+0xb6>
 800f9c0:	f240 1115 	movw	r1, #277	; 0x115
 800f9c4:	4815      	ldr	r0, [pc, #84]	; (800fa1c <HAL_TIM_Base_Init+0x108>)
 800f9c6:	f7fb fe75 	bl	800b6b4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d106      	bne.n	800f9e4 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7fc f9ac 	bl	800bd3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2202      	movs	r2, #2
 800f9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	3304      	adds	r3, #4
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	4610      	mov	r0, r2
 800f9f8:	f000 fae8 	bl	800ffcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2201      	movs	r2, #1
 800fa00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa04:	2300      	movs	r3, #0
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	40012c00 	.word	0x40012c00
 800fa14:	40000400 	.word	0x40000400
 800fa18:	40000800 	.word	0x40000800
 800fa1c:	080127f8 	.word	0x080127f8

0800fa20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4a1a      	ldr	r2, [pc, #104]	; (800fa98 <HAL_TIM_Base_Start+0x78>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d013      	beq.n	800fa5a <HAL_TIM_Base_Start+0x3a>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa3a:	d00e      	beq.n	800fa5a <HAL_TIM_Base_Start+0x3a>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4a16      	ldr	r2, [pc, #88]	; (800fa9c <HAL_TIM_Base_Start+0x7c>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d009      	beq.n	800fa5a <HAL_TIM_Base_Start+0x3a>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	4a15      	ldr	r2, [pc, #84]	; (800faa0 <HAL_TIM_Base_Start+0x80>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d004      	beq.n	800fa5a <HAL_TIM_Base_Start+0x3a>
 800fa50:	f240 1185 	movw	r1, #389	; 0x185
 800fa54:	4813      	ldr	r0, [pc, #76]	; (800faa4 <HAL_TIM_Base_Start+0x84>)
 800fa56:	f7fb fe2d 	bl	800b6b4 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2202      	movs	r2, #2
 800fa5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	689b      	ldr	r3, [r3, #8]
 800fa68:	f003 0307 	and.w	r3, r3, #7
 800fa6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2b06      	cmp	r3, #6
 800fa72:	d007      	beq.n	800fa84 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f042 0201 	orr.w	r2, r2, #1
 800fa82:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2201      	movs	r2, #1
 800fa88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800fa8c:	2300      	movs	r3, #0
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	40012c00 	.word	0x40012c00
 800fa9c:	40000400 	.word	0x40000400
 800faa0:	40000800 	.word	0x40000800
 800faa4:	080127f8 	.word	0x080127f8

0800faa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d101      	bne.n	800fac0 <HAL_TIM_ConfigClockSource+0x18>
 800fabc:	2302      	movs	r3, #2
 800fabe:	e279      	b.n	800ffb4 <HAL_TIM_ConfigClockSource+0x50c>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2201      	movs	r2, #1
 800fac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2202      	movs	r2, #2
 800facc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fad8:	d029      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x86>
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fae2:	d024      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x86>
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d020      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x86>
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b10      	cmp	r3, #16
 800faf2:	d01c      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x86>
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	2b20      	cmp	r3, #32
 800fafa:	d018      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x86>
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2b30      	cmp	r3, #48	; 0x30
 800fb02:	d014      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x86>
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2b40      	cmp	r3, #64	; 0x40
 800fb0a:	d010      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x86>
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b50      	cmp	r3, #80	; 0x50
 800fb12:	d00c      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x86>
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b60      	cmp	r3, #96	; 0x60
 800fb1a:	d008      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x86>
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b70      	cmp	r3, #112	; 0x70
 800fb22:	d004      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x86>
 800fb24:	f241 118a 	movw	r1, #4490	; 0x118a
 800fb28:	4896      	ldr	r0, [pc, #600]	; (800fd84 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fb2a:	f7fb fdc3 	bl	800b6b4 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	689b      	ldr	r3, [r3, #8]
 800fb34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fb3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fb44:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	68fa      	ldr	r2, [r7, #12]
 800fb4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2b40      	cmp	r3, #64	; 0x40
 800fb54:	f000 81b6 	beq.w	800fec4 <HAL_TIM_ConfigClockSource+0x41c>
 800fb58:	2b40      	cmp	r3, #64	; 0x40
 800fb5a:	d80f      	bhi.n	800fb7c <HAL_TIM_ConfigClockSource+0xd4>
 800fb5c:	2b10      	cmp	r3, #16
 800fb5e:	f000 81fd 	beq.w	800ff5c <HAL_TIM_ConfigClockSource+0x4b4>
 800fb62:	2b10      	cmp	r3, #16
 800fb64:	d803      	bhi.n	800fb6e <HAL_TIM_ConfigClockSource+0xc6>
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	f000 81f8 	beq.w	800ff5c <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800fb6c:	e219      	b.n	800ffa2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800fb6e:	2b20      	cmp	r3, #32
 800fb70:	f000 81f4 	beq.w	800ff5c <HAL_TIM_ConfigClockSource+0x4b4>
 800fb74:	2b30      	cmp	r3, #48	; 0x30
 800fb76:	f000 81f1 	beq.w	800ff5c <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 800fb7a:	e212      	b.n	800ffa2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800fb7c:	2b70      	cmp	r3, #112	; 0x70
 800fb7e:	d02e      	beq.n	800fbde <HAL_TIM_ConfigClockSource+0x136>
 800fb80:	2b70      	cmp	r3, #112	; 0x70
 800fb82:	d806      	bhi.n	800fb92 <HAL_TIM_ConfigClockSource+0xea>
 800fb84:	2b50      	cmp	r3, #80	; 0x50
 800fb86:	f000 8105 	beq.w	800fd94 <HAL_TIM_ConfigClockSource+0x2ec>
 800fb8a:	2b60      	cmp	r3, #96	; 0x60
 800fb8c:	f000 814e 	beq.w	800fe2c <HAL_TIM_ConfigClockSource+0x384>
      break;
 800fb90:	e207      	b.n	800ffa2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800fb92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb96:	d004      	beq.n	800fba2 <HAL_TIM_ConfigClockSource+0xfa>
 800fb98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb9c:	f000 808a 	beq.w	800fcb4 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800fba0:	e1ff      	b.n	800ffa2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4a78      	ldr	r2, [pc, #480]	; (800fd88 <HAL_TIM_ConfigClockSource+0x2e0>)
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	f000 81f9 	beq.w	800ffa0 <HAL_TIM_ConfigClockSource+0x4f8>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbb6:	f000 81f3 	beq.w	800ffa0 <HAL_TIM_ConfigClockSource+0x4f8>
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	4a73      	ldr	r2, [pc, #460]	; (800fd8c <HAL_TIM_ConfigClockSource+0x2e4>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	f000 81ed 	beq.w	800ffa0 <HAL_TIM_ConfigClockSource+0x4f8>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	4a71      	ldr	r2, [pc, #452]	; (800fd90 <HAL_TIM_ConfigClockSource+0x2e8>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	f000 81e7 	beq.w	800ffa0 <HAL_TIM_ConfigClockSource+0x4f8>
 800fbd2:	f241 1196 	movw	r1, #4502	; 0x1196
 800fbd6:	486b      	ldr	r0, [pc, #428]	; (800fd84 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fbd8:	f7fb fd6c 	bl	800b6b4 <assert_failed>
      break;
 800fbdc:	e1e0      	b.n	800ffa0 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a69      	ldr	r2, [pc, #420]	; (800fd88 <HAL_TIM_ConfigClockSource+0x2e0>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d013      	beq.n	800fc10 <HAL_TIM_ConfigClockSource+0x168>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbf0:	d00e      	beq.n	800fc10 <HAL_TIM_ConfigClockSource+0x168>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4a65      	ldr	r2, [pc, #404]	; (800fd8c <HAL_TIM_ConfigClockSource+0x2e4>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d009      	beq.n	800fc10 <HAL_TIM_ConfigClockSource+0x168>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4a63      	ldr	r2, [pc, #396]	; (800fd90 <HAL_TIM_ConfigClockSource+0x2e8>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d004      	beq.n	800fc10 <HAL_TIM_ConfigClockSource+0x168>
 800fc06:	f241 119d 	movw	r1, #4509	; 0x119d
 800fc0a:	485e      	ldr	r0, [pc, #376]	; (800fd84 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fc0c:	f7fb fd52 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	689b      	ldr	r3, [r3, #8]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d013      	beq.n	800fc40 <HAL_TIM_ConfigClockSource+0x198>
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc20:	d00e      	beq.n	800fc40 <HAL_TIM_ConfigClockSource+0x198>
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	689b      	ldr	r3, [r3, #8]
 800fc26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc2a:	d009      	beq.n	800fc40 <HAL_TIM_ConfigClockSource+0x198>
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fc34:	d004      	beq.n	800fc40 <HAL_TIM_ConfigClockSource+0x198>
 800fc36:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 800fc3a:	4852      	ldr	r0, [pc, #328]	; (800fd84 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fc3c:	f7fb fd3a 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc48:	d014      	beq.n	800fc74 <HAL_TIM_ConfigClockSource+0x1cc>
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d010      	beq.n	800fc74 <HAL_TIM_ConfigClockSource+0x1cc>
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d00c      	beq.n	800fc74 <HAL_TIM_ConfigClockSource+0x1cc>
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	2b02      	cmp	r3, #2
 800fc60:	d008      	beq.n	800fc74 <HAL_TIM_ConfigClockSource+0x1cc>
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	2b0a      	cmp	r3, #10
 800fc68:	d004      	beq.n	800fc74 <HAL_TIM_ConfigClockSource+0x1cc>
 800fc6a:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800fc6e:	4845      	ldr	r0, [pc, #276]	; (800fd84 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fc70:	f7fb fd20 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	2b0f      	cmp	r3, #15
 800fc7a:	d904      	bls.n	800fc86 <HAL_TIM_ConfigClockSource+0x1de>
 800fc7c:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800fc80:	4840      	ldr	r0, [pc, #256]	; (800fd84 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fc82:	f7fb fd17 	bl	800b6b4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6818      	ldr	r0, [r3, #0]
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	6899      	ldr	r1, [r3, #8]
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	685a      	ldr	r2, [r3, #4]
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	f000 fa72 	bl	801017e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fca8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	609a      	str	r2, [r3, #8]
      break;
 800fcb2:	e176      	b.n	800ffa2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a33      	ldr	r2, [pc, #204]	; (800fd88 <HAL_TIM_ConfigClockSource+0x2e0>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d013      	beq.n	800fce6 <HAL_TIM_ConfigClockSource+0x23e>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcc6:	d00e      	beq.n	800fce6 <HAL_TIM_ConfigClockSource+0x23e>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a2f      	ldr	r2, [pc, #188]	; (800fd8c <HAL_TIM_ConfigClockSource+0x2e4>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d009      	beq.n	800fce6 <HAL_TIM_ConfigClockSource+0x23e>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a2e      	ldr	r2, [pc, #184]	; (800fd90 <HAL_TIM_ConfigClockSource+0x2e8>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d004      	beq.n	800fce6 <HAL_TIM_ConfigClockSource+0x23e>
 800fcdc:	f241 11b5 	movw	r1, #4533	; 0x11b5
 800fce0:	4828      	ldr	r0, [pc, #160]	; (800fd84 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fce2:	f7fb fce7 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d013      	beq.n	800fd16 <HAL_TIM_ConfigClockSource+0x26e>
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcf6:	d00e      	beq.n	800fd16 <HAL_TIM_ConfigClockSource+0x26e>
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	689b      	ldr	r3, [r3, #8]
 800fcfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd00:	d009      	beq.n	800fd16 <HAL_TIM_ConfigClockSource+0x26e>
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	689b      	ldr	r3, [r3, #8]
 800fd06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fd0a:	d004      	beq.n	800fd16 <HAL_TIM_ConfigClockSource+0x26e>
 800fd0c:	f241 11b8 	movw	r1, #4536	; 0x11b8
 800fd10:	481c      	ldr	r0, [pc, #112]	; (800fd84 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fd12:	f7fb fccf 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd1e:	d014      	beq.n	800fd4a <HAL_TIM_ConfigClockSource+0x2a2>
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d010      	beq.n	800fd4a <HAL_TIM_ConfigClockSource+0x2a2>
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d00c      	beq.n	800fd4a <HAL_TIM_ConfigClockSource+0x2a2>
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	2b02      	cmp	r3, #2
 800fd36:	d008      	beq.n	800fd4a <HAL_TIM_ConfigClockSource+0x2a2>
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	2b0a      	cmp	r3, #10
 800fd3e:	d004      	beq.n	800fd4a <HAL_TIM_ConfigClockSource+0x2a2>
 800fd40:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800fd44:	480f      	ldr	r0, [pc, #60]	; (800fd84 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fd46:	f7fb fcb5 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	68db      	ldr	r3, [r3, #12]
 800fd4e:	2b0f      	cmp	r3, #15
 800fd50:	d904      	bls.n	800fd5c <HAL_TIM_ConfigClockSource+0x2b4>
 800fd52:	f241 11ba 	movw	r1, #4538	; 0x11ba
 800fd56:	480b      	ldr	r0, [pc, #44]	; (800fd84 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fd58:	f7fb fcac 	bl	800b6b4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6818      	ldr	r0, [r3, #0]
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	6899      	ldr	r1, [r3, #8]
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	685a      	ldr	r2, [r3, #4]
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	f000 fa07 	bl	801017e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	689a      	ldr	r2, [r3, #8]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fd7e:	609a      	str	r2, [r3, #8]
      break;
 800fd80:	e10f      	b.n	800ffa2 <HAL_TIM_ConfigClockSource+0x4fa>
 800fd82:	bf00      	nop
 800fd84:	080127f8 	.word	0x080127f8
 800fd88:	40012c00 	.word	0x40012c00
 800fd8c:	40000400 	.word	0x40000400
 800fd90:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	4a88      	ldr	r2, [pc, #544]	; (800ffbc <HAL_TIM_ConfigClockSource+0x514>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d013      	beq.n	800fdc6 <HAL_TIM_ConfigClockSource+0x31e>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fda6:	d00e      	beq.n	800fdc6 <HAL_TIM_ConfigClockSource+0x31e>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a84      	ldr	r2, [pc, #528]	; (800ffc0 <HAL_TIM_ConfigClockSource+0x518>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d009      	beq.n	800fdc6 <HAL_TIM_ConfigClockSource+0x31e>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a83      	ldr	r2, [pc, #524]	; (800ffc4 <HAL_TIM_ConfigClockSource+0x51c>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d004      	beq.n	800fdc6 <HAL_TIM_ConfigClockSource+0x31e>
 800fdbc:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800fdc0:	4881      	ldr	r0, [pc, #516]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x520>)
 800fdc2:	f7fb fc77 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdce:	d014      	beq.n	800fdfa <HAL_TIM_ConfigClockSource+0x352>
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d010      	beq.n	800fdfa <HAL_TIM_ConfigClockSource+0x352>
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d00c      	beq.n	800fdfa <HAL_TIM_ConfigClockSource+0x352>
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	2b02      	cmp	r3, #2
 800fde6:	d008      	beq.n	800fdfa <HAL_TIM_ConfigClockSource+0x352>
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	2b0a      	cmp	r3, #10
 800fdee:	d004      	beq.n	800fdfa <HAL_TIM_ConfigClockSource+0x352>
 800fdf0:	f241 11cc 	movw	r1, #4556	; 0x11cc
 800fdf4:	4874      	ldr	r0, [pc, #464]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x520>)
 800fdf6:	f7fb fc5d 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	2b0f      	cmp	r3, #15
 800fe00:	d904      	bls.n	800fe0c <HAL_TIM_ConfigClockSource+0x364>
 800fe02:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800fe06:	4870      	ldr	r0, [pc, #448]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x520>)
 800fe08:	f7fb fc54 	bl	800b6b4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6818      	ldr	r0, [r3, #0]
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	6859      	ldr	r1, [r3, #4]
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	461a      	mov	r2, r3
 800fe1a:	f000 f939 	bl	8010090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2150      	movs	r1, #80	; 0x50
 800fe24:	4618      	mov	r0, r3
 800fe26:	f000 f990 	bl	801014a <TIM_ITRx_SetConfig>
      break;
 800fe2a:	e0ba      	b.n	800ffa2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4a62      	ldr	r2, [pc, #392]	; (800ffbc <HAL_TIM_ConfigClockSource+0x514>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d013      	beq.n	800fe5e <HAL_TIM_ConfigClockSource+0x3b6>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe3e:	d00e      	beq.n	800fe5e <HAL_TIM_ConfigClockSource+0x3b6>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	4a5e      	ldr	r2, [pc, #376]	; (800ffc0 <HAL_TIM_ConfigClockSource+0x518>)
 800fe46:	4293      	cmp	r3, r2
 800fe48:	d009      	beq.n	800fe5e <HAL_TIM_ConfigClockSource+0x3b6>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	4a5d      	ldr	r2, [pc, #372]	; (800ffc4 <HAL_TIM_ConfigClockSource+0x51c>)
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d004      	beq.n	800fe5e <HAL_TIM_ConfigClockSource+0x3b6>
 800fe54:	f241 11d9 	movw	r1, #4569	; 0x11d9
 800fe58:	485b      	ldr	r0, [pc, #364]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x520>)
 800fe5a:	f7fb fc2b 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe66:	d014      	beq.n	800fe92 <HAL_TIM_ConfigClockSource+0x3ea>
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d010      	beq.n	800fe92 <HAL_TIM_ConfigClockSource+0x3ea>
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00c      	beq.n	800fe92 <HAL_TIM_ConfigClockSource+0x3ea>
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d008      	beq.n	800fe92 <HAL_TIM_ConfigClockSource+0x3ea>
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	2b0a      	cmp	r3, #10
 800fe86:	d004      	beq.n	800fe92 <HAL_TIM_ConfigClockSource+0x3ea>
 800fe88:	f241 11dc 	movw	r1, #4572	; 0x11dc
 800fe8c:	484e      	ldr	r0, [pc, #312]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x520>)
 800fe8e:	f7fb fc11 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	68db      	ldr	r3, [r3, #12]
 800fe96:	2b0f      	cmp	r3, #15
 800fe98:	d904      	bls.n	800fea4 <HAL_TIM_ConfigClockSource+0x3fc>
 800fe9a:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800fe9e:	484a      	ldr	r0, [pc, #296]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x520>)
 800fea0:	f7fb fc08 	bl	800b6b4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6818      	ldr	r0, [r3, #0]
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	6859      	ldr	r1, [r3, #4]
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	68db      	ldr	r3, [r3, #12]
 800feb0:	461a      	mov	r2, r3
 800feb2:	f000 f91b 	bl	80100ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	2160      	movs	r1, #96	; 0x60
 800febc:	4618      	mov	r0, r3
 800febe:	f000 f944 	bl	801014a <TIM_ITRx_SetConfig>
      break;
 800fec2:	e06e      	b.n	800ffa2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4a3c      	ldr	r2, [pc, #240]	; (800ffbc <HAL_TIM_ConfigClockSource+0x514>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d013      	beq.n	800fef6 <HAL_TIM_ConfigClockSource+0x44e>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fed6:	d00e      	beq.n	800fef6 <HAL_TIM_ConfigClockSource+0x44e>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	4a38      	ldr	r2, [pc, #224]	; (800ffc0 <HAL_TIM_ConfigClockSource+0x518>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d009      	beq.n	800fef6 <HAL_TIM_ConfigClockSource+0x44e>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a37      	ldr	r2, [pc, #220]	; (800ffc4 <HAL_TIM_ConfigClockSource+0x51c>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d004      	beq.n	800fef6 <HAL_TIM_ConfigClockSource+0x44e>
 800feec:	f241 11e9 	movw	r1, #4585	; 0x11e9
 800fef0:	4835      	ldr	r0, [pc, #212]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x520>)
 800fef2:	f7fb fbdf 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fefe:	d014      	beq.n	800ff2a <HAL_TIM_ConfigClockSource+0x482>
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d010      	beq.n	800ff2a <HAL_TIM_ConfigClockSource+0x482>
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d00c      	beq.n	800ff2a <HAL_TIM_ConfigClockSource+0x482>
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	2b02      	cmp	r3, #2
 800ff16:	d008      	beq.n	800ff2a <HAL_TIM_ConfigClockSource+0x482>
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	2b0a      	cmp	r3, #10
 800ff1e:	d004      	beq.n	800ff2a <HAL_TIM_ConfigClockSource+0x482>
 800ff20:	f241 11ec 	movw	r1, #4588	; 0x11ec
 800ff24:	4828      	ldr	r0, [pc, #160]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x520>)
 800ff26:	f7fb fbc5 	bl	800b6b4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	68db      	ldr	r3, [r3, #12]
 800ff2e:	2b0f      	cmp	r3, #15
 800ff30:	d904      	bls.n	800ff3c <HAL_TIM_ConfigClockSource+0x494>
 800ff32:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800ff36:	4824      	ldr	r0, [pc, #144]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x520>)
 800ff38:	f7fb fbbc 	bl	800b6b4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6818      	ldr	r0, [r3, #0]
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	6859      	ldr	r1, [r3, #4]
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	68db      	ldr	r3, [r3, #12]
 800ff48:	461a      	mov	r2, r3
 800ff4a:	f000 f8a1 	bl	8010090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2140      	movs	r1, #64	; 0x40
 800ff54:	4618      	mov	r0, r3
 800ff56:	f000 f8f8 	bl	801014a <TIM_ITRx_SetConfig>
      break;
 800ff5a:	e022      	b.n	800ffa2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4a16      	ldr	r2, [pc, #88]	; (800ffbc <HAL_TIM_ConfigClockSource+0x514>)
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d013      	beq.n	800ff8e <HAL_TIM_ConfigClockSource+0x4e6>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff6e:	d00e      	beq.n	800ff8e <HAL_TIM_ConfigClockSource+0x4e6>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4a12      	ldr	r2, [pc, #72]	; (800ffc0 <HAL_TIM_ConfigClockSource+0x518>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d009      	beq.n	800ff8e <HAL_TIM_ConfigClockSource+0x4e6>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	4a11      	ldr	r2, [pc, #68]	; (800ffc4 <HAL_TIM_ConfigClockSource+0x51c>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d004      	beq.n	800ff8e <HAL_TIM_ConfigClockSource+0x4e6>
 800ff84:	f241 11fc 	movw	r1, #4604	; 0x11fc
 800ff88:	480f      	ldr	r0, [pc, #60]	; (800ffc8 <HAL_TIM_ConfigClockSource+0x520>)
 800ff8a:	f7fb fb93 	bl	800b6b4 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	4619      	mov	r1, r3
 800ff98:	4610      	mov	r0, r2
 800ff9a:	f000 f8d6 	bl	801014a <TIM_ITRx_SetConfig>
      break;
 800ff9e:	e000      	b.n	800ffa2 <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 800ffa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2200      	movs	r2, #0
 800ffae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ffb2:	2300      	movs	r3, #0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3710      	adds	r7, #16
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	40012c00 	.word	0x40012c00
 800ffc0:	40000400 	.word	0x40000400
 800ffc4:	40000800 	.word	0x40000800
 800ffc8:	080127f8 	.word	0x080127f8

0800ffcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b085      	sub	sp, #20
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	4a29      	ldr	r2, [pc, #164]	; (8010084 <TIM_Base_SetConfig+0xb8>)
 800ffe0:	4293      	cmp	r3, r2
 800ffe2:	d00b      	beq.n	800fffc <TIM_Base_SetConfig+0x30>
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffea:	d007      	beq.n	800fffc <TIM_Base_SetConfig+0x30>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	4a26      	ldr	r2, [pc, #152]	; (8010088 <TIM_Base_SetConfig+0xbc>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d003      	beq.n	800fffc <TIM_Base_SetConfig+0x30>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	4a25      	ldr	r2, [pc, #148]	; (801008c <TIM_Base_SetConfig+0xc0>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d108      	bne.n	801000e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	4313      	orrs	r3, r2
 801000c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4a1c      	ldr	r2, [pc, #112]	; (8010084 <TIM_Base_SetConfig+0xb8>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d00b      	beq.n	801002e <TIM_Base_SetConfig+0x62>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801001c:	d007      	beq.n	801002e <TIM_Base_SetConfig+0x62>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	4a19      	ldr	r2, [pc, #100]	; (8010088 <TIM_Base_SetConfig+0xbc>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d003      	beq.n	801002e <TIM_Base_SetConfig+0x62>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	4a18      	ldr	r2, [pc, #96]	; (801008c <TIM_Base_SetConfig+0xc0>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d108      	bne.n	8010040 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	68fa      	ldr	r2, [r7, #12]
 801003c:	4313      	orrs	r3, r2
 801003e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	695b      	ldr	r3, [r3, #20]
 801004a:	4313      	orrs	r3, r2
 801004c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	68fa      	ldr	r2, [r7, #12]
 8010052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	689a      	ldr	r2, [r3, #8]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	4a07      	ldr	r2, [pc, #28]	; (8010084 <TIM_Base_SetConfig+0xb8>)
 8010068:	4293      	cmp	r3, r2
 801006a:	d103      	bne.n	8010074 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	691a      	ldr	r2, [r3, #16]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2201      	movs	r2, #1
 8010078:	615a      	str	r2, [r3, #20]
}
 801007a:	bf00      	nop
 801007c:	3714      	adds	r7, #20
 801007e:	46bd      	mov	sp, r7
 8010080:	bc80      	pop	{r7}
 8010082:	4770      	bx	lr
 8010084:	40012c00 	.word	0x40012c00
 8010088:	40000400 	.word	0x40000400
 801008c:	40000800 	.word	0x40000800

08010090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010090:	b480      	push	{r7}
 8010092:	b087      	sub	sp, #28
 8010094:	af00      	add	r7, sp, #0
 8010096:	60f8      	str	r0, [r7, #12]
 8010098:	60b9      	str	r1, [r7, #8]
 801009a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	6a1b      	ldr	r3, [r3, #32]
 80100a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	6a1b      	ldr	r3, [r3, #32]
 80100a6:	f023 0201 	bic.w	r2, r3, #1
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	699b      	ldr	r3, [r3, #24]
 80100b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80100ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	011b      	lsls	r3, r3, #4
 80100c0:	693a      	ldr	r2, [r7, #16]
 80100c2:	4313      	orrs	r3, r2
 80100c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	f023 030a 	bic.w	r3, r3, #10
 80100cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	4313      	orrs	r3, r2
 80100d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	693a      	ldr	r2, [r7, #16]
 80100da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	697a      	ldr	r2, [r7, #20]
 80100e0:	621a      	str	r2, [r3, #32]
}
 80100e2:	bf00      	nop
 80100e4:	371c      	adds	r7, #28
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bc80      	pop	{r7}
 80100ea:	4770      	bx	lr

080100ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80100ec:	b480      	push	{r7}
 80100ee:	b087      	sub	sp, #28
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	6a1b      	ldr	r3, [r3, #32]
 80100fc:	f023 0210 	bic.w	r2, r3, #16
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	699b      	ldr	r3, [r3, #24]
 8010108:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	6a1b      	ldr	r3, [r3, #32]
 801010e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010116:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	031b      	lsls	r3, r3, #12
 801011c:	697a      	ldr	r2, [r7, #20]
 801011e:	4313      	orrs	r3, r2
 8010120:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010128:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	011b      	lsls	r3, r3, #4
 801012e:	693a      	ldr	r2, [r7, #16]
 8010130:	4313      	orrs	r3, r2
 8010132:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	693a      	ldr	r2, [r7, #16]
 801013e:	621a      	str	r2, [r3, #32]
}
 8010140:	bf00      	nop
 8010142:	371c      	adds	r7, #28
 8010144:	46bd      	mov	sp, r7
 8010146:	bc80      	pop	{r7}
 8010148:	4770      	bx	lr

0801014a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801014a:	b480      	push	{r7}
 801014c:	b085      	sub	sp, #20
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
 8010152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	689b      	ldr	r3, [r3, #8]
 8010158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010162:	683a      	ldr	r2, [r7, #0]
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	4313      	orrs	r3, r2
 8010168:	f043 0307 	orr.w	r3, r3, #7
 801016c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	609a      	str	r2, [r3, #8]
}
 8010174:	bf00      	nop
 8010176:	3714      	adds	r7, #20
 8010178:	46bd      	mov	sp, r7
 801017a:	bc80      	pop	{r7}
 801017c:	4770      	bx	lr

0801017e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801017e:	b480      	push	{r7}
 8010180:	b087      	sub	sp, #28
 8010182:	af00      	add	r7, sp, #0
 8010184:	60f8      	str	r0, [r7, #12]
 8010186:	60b9      	str	r1, [r7, #8]
 8010188:	607a      	str	r2, [r7, #4]
 801018a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	689b      	ldr	r3, [r3, #8]
 8010190:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010198:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	021a      	lsls	r2, r3, #8
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	431a      	orrs	r2, r3
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	4313      	orrs	r3, r2
 80101a6:	697a      	ldr	r2, [r7, #20]
 80101a8:	4313      	orrs	r3, r2
 80101aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	697a      	ldr	r2, [r7, #20]
 80101b0:	609a      	str	r2, [r3, #8]
}
 80101b2:	bf00      	nop
 80101b4:	371c      	adds	r7, #28
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bc80      	pop	{r7}
 80101ba:	4770      	bx	lr

080101bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b084      	sub	sp, #16
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4a43      	ldr	r2, [pc, #268]	; (80102d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d013      	beq.n	80101f8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101d8:	d00e      	beq.n	80101f8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4a3f      	ldr	r2, [pc, #252]	; (80102dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d009      	beq.n	80101f8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4a3d      	ldr	r2, [pc, #244]	; (80102e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d004      	beq.n	80101f8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80101ee:	f240 6164 	movw	r1, #1636	; 0x664
 80101f2:	483c      	ldr	r0, [pc, #240]	; (80102e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80101f4:	f7fb fa5e 	bl	800b6b4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d020      	beq.n	8010242 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b10      	cmp	r3, #16
 8010206:	d01c      	beq.n	8010242 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2b20      	cmp	r3, #32
 801020e:	d018      	beq.n	8010242 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b30      	cmp	r3, #48	; 0x30
 8010216:	d014      	beq.n	8010242 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2b40      	cmp	r3, #64	; 0x40
 801021e:	d010      	beq.n	8010242 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	2b50      	cmp	r3, #80	; 0x50
 8010226:	d00c      	beq.n	8010242 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2b60      	cmp	r3, #96	; 0x60
 801022e:	d008      	beq.n	8010242 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2b70      	cmp	r3, #112	; 0x70
 8010236:	d004      	beq.n	8010242 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010238:	f240 6165 	movw	r1, #1637	; 0x665
 801023c:	4829      	ldr	r0, [pc, #164]	; (80102e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801023e:	f7fb fa39 	bl	800b6b4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	2b80      	cmp	r3, #128	; 0x80
 8010248:	d008      	beq.n	801025c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d004      	beq.n	801025c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8010252:	f240 6166 	movw	r1, #1638	; 0x666
 8010256:	4823      	ldr	r0, [pc, #140]	; (80102e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010258:	f7fb fa2c 	bl	800b6b4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010262:	2b01      	cmp	r3, #1
 8010264:	d101      	bne.n	801026a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010266:	2302      	movs	r3, #2
 8010268:	e032      	b.n	80102d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2201      	movs	r2, #1
 801026e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2202      	movs	r2, #2
 8010276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	689b      	ldr	r3, [r3, #8]
 8010288:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	68fa      	ldr	r2, [r7, #12]
 8010298:	4313      	orrs	r3, r2
 801029a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102a2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	68ba      	ldr	r2, [r7, #8]
 80102aa:	4313      	orrs	r3, r2
 80102ac:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	68fa      	ldr	r2, [r7, #12]
 80102b4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	68ba      	ldr	r2, [r7, #8]
 80102bc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2201      	movs	r2, #1
 80102c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2200      	movs	r2, #0
 80102ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80102ce:	2300      	movs	r3, #0
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3710      	adds	r7, #16
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	40012c00 	.word	0x40012c00
 80102dc:	40000400 	.word	0x40000400
 80102e0:	40000800 	.word	0x40000800
 80102e4:	08012830 	.word	0x08012830

080102e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d101      	bne.n	80102fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80102f6:	2301      	movs	r3, #1
 80102f8:	e092      	b.n	8010420 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	699b      	ldr	r3, [r3, #24]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d02c      	beq.n	801035c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	4a48      	ldr	r2, [pc, #288]	; (8010428 <HAL_UART_Init+0x140>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d00e      	beq.n	801032a <HAL_UART_Init+0x42>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4a46      	ldr	r2, [pc, #280]	; (801042c <HAL_UART_Init+0x144>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d009      	beq.n	801032a <HAL_UART_Init+0x42>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4a45      	ldr	r2, [pc, #276]	; (8010430 <HAL_UART_Init+0x148>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d004      	beq.n	801032a <HAL_UART_Init+0x42>
 8010320:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8010324:	4843      	ldr	r0, [pc, #268]	; (8010434 <HAL_UART_Init+0x14c>)
 8010326:	f7fb f9c5 	bl	800b6b4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	699b      	ldr	r3, [r3, #24]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d028      	beq.n	8010384 <HAL_UART_Init+0x9c>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	699b      	ldr	r3, [r3, #24]
 8010336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801033a:	d023      	beq.n	8010384 <HAL_UART_Init+0x9c>
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	699b      	ldr	r3, [r3, #24]
 8010340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010344:	d01e      	beq.n	8010384 <HAL_UART_Init+0x9c>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	699b      	ldr	r3, [r3, #24]
 801034a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801034e:	d019      	beq.n	8010384 <HAL_UART_Init+0x9c>
 8010350:	f240 1147 	movw	r1, #327	; 0x147
 8010354:	4837      	ldr	r0, [pc, #220]	; (8010434 <HAL_UART_Init+0x14c>)
 8010356:	f7fb f9ad 	bl	800b6b4 <assert_failed>
 801035a:	e013      	b.n	8010384 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	4a31      	ldr	r2, [pc, #196]	; (8010428 <HAL_UART_Init+0x140>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d00e      	beq.n	8010384 <HAL_UART_Init+0x9c>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4a30      	ldr	r2, [pc, #192]	; (801042c <HAL_UART_Init+0x144>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d009      	beq.n	8010384 <HAL_UART_Init+0x9c>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4a2e      	ldr	r2, [pc, #184]	; (8010430 <HAL_UART_Init+0x148>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d004      	beq.n	8010384 <HAL_UART_Init+0x9c>
 801037a:	f240 114b 	movw	r1, #331	; 0x14b
 801037e:	482d      	ldr	r0, [pc, #180]	; (8010434 <HAL_UART_Init+0x14c>)
 8010380:	f7fb f998 	bl	800b6b4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d009      	beq.n	80103a0 <HAL_UART_Init+0xb8>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010394:	d004      	beq.n	80103a0 <HAL_UART_Init+0xb8>
 8010396:	f240 114d 	movw	r1, #333	; 0x14d
 801039a:	4826      	ldr	r0, [pc, #152]	; (8010434 <HAL_UART_Init+0x14c>)
 801039c:	f7fb f98a 	bl	800b6b4 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80103a6:	b2db      	uxtb	r3, r3
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d106      	bne.n	80103ba <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2200      	movs	r2, #0
 80103b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7fb fd07 	bl	800bdc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2224      	movs	r2, #36	; 0x24
 80103be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	68da      	ldr	r2, [r3, #12]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80103d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f000 fbf0 	bl	8010bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	691a      	ldr	r2, [r3, #16]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80103e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	695a      	ldr	r2, [r3, #20]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80103f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	68da      	ldr	r2, [r3, #12]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010406:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2220      	movs	r2, #32
 8010412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2220      	movs	r2, #32
 801041a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801041e:	2300      	movs	r3, #0
}
 8010420:	4618      	mov	r0, r3
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	40013800 	.word	0x40013800
 801042c:	40004400 	.word	0x40004400
 8010430:	40004800 	.word	0x40004800
 8010434:	0801286c 	.word	0x0801286c

08010438 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b088      	sub	sp, #32
 801043c:	af02      	add	r7, sp, #8
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	603b      	str	r3, [r7, #0]
 8010444:	4613      	mov	r3, r2
 8010446:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010448:	2300      	movs	r3, #0
 801044a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010452:	b2db      	uxtb	r3, r3
 8010454:	2b20      	cmp	r3, #32
 8010456:	f040 8083 	bne.w	8010560 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d002      	beq.n	8010466 <HAL_UART_Transmit+0x2e>
 8010460:	88fb      	ldrh	r3, [r7, #6]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d101      	bne.n	801046a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010466:	2301      	movs	r3, #1
 8010468:	e07b      	b.n	8010562 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010470:	2b01      	cmp	r3, #1
 8010472:	d101      	bne.n	8010478 <HAL_UART_Transmit+0x40>
 8010474:	2302      	movs	r3, #2
 8010476:	e074      	b.n	8010562 <HAL_UART_Transmit+0x12a>
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2201      	movs	r2, #1
 801047c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2200      	movs	r2, #0
 8010484:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2221      	movs	r2, #33	; 0x21
 801048a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801048e:	f7fb fd7b 	bl	800bf88 <HAL_GetTick>
 8010492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	88fa      	ldrh	r2, [r7, #6]
 8010498:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	88fa      	ldrh	r2, [r7, #6]
 801049e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80104a0:	e042      	b.n	8010528 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	3b01      	subs	r3, #1
 80104aa:	b29a      	uxth	r2, r3
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104b8:	d122      	bne.n	8010500 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	9300      	str	r3, [sp, #0]
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	2200      	movs	r2, #0
 80104c2:	2180      	movs	r1, #128	; 0x80
 80104c4:	68f8      	ldr	r0, [r7, #12]
 80104c6:	f000 fa0e 	bl	80108e6 <UART_WaitOnFlagUntilTimeout>
 80104ca:	4603      	mov	r3, r0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d001      	beq.n	80104d4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80104d0:	2303      	movs	r3, #3
 80104d2:	e046      	b.n	8010562 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	881b      	ldrh	r3, [r3, #0]
 80104dc:	461a      	mov	r2, r3
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80104e6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	691b      	ldr	r3, [r3, #16]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d103      	bne.n	80104f8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	3302      	adds	r3, #2
 80104f4:	60bb      	str	r3, [r7, #8]
 80104f6:	e017      	b.n	8010528 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	3301      	adds	r3, #1
 80104fc:	60bb      	str	r3, [r7, #8]
 80104fe:	e013      	b.n	8010528 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	2200      	movs	r2, #0
 8010508:	2180      	movs	r1, #128	; 0x80
 801050a:	68f8      	ldr	r0, [r7, #12]
 801050c:	f000 f9eb 	bl	80108e6 <UART_WaitOnFlagUntilTimeout>
 8010510:	4603      	mov	r3, r0
 8010512:	2b00      	cmp	r3, #0
 8010514:	d001      	beq.n	801051a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8010516:	2303      	movs	r3, #3
 8010518:	e023      	b.n	8010562 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	1c5a      	adds	r2, r3, #1
 801051e:	60ba      	str	r2, [r7, #8]
 8010520:	781a      	ldrb	r2, [r3, #0]
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801052c:	b29b      	uxth	r3, r3
 801052e:	2b00      	cmp	r3, #0
 8010530:	d1b7      	bne.n	80104a2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	2200      	movs	r2, #0
 801053a:	2140      	movs	r1, #64	; 0x40
 801053c:	68f8      	ldr	r0, [r7, #12]
 801053e:	f000 f9d2 	bl	80108e6 <UART_WaitOnFlagUntilTimeout>
 8010542:	4603      	mov	r3, r0
 8010544:	2b00      	cmp	r3, #0
 8010546:	d001      	beq.n	801054c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8010548:	2303      	movs	r3, #3
 801054a:	e00a      	b.n	8010562 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2220      	movs	r2, #32
 8010550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2200      	movs	r2, #0
 8010558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 801055c:	2300      	movs	r3, #0
 801055e:	e000      	b.n	8010562 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8010560:	2302      	movs	r3, #2
  }
}
 8010562:	4618      	mov	r0, r3
 8010564:	3718      	adds	r7, #24
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}

0801056a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801056a:	b580      	push	{r7, lr}
 801056c:	b088      	sub	sp, #32
 801056e:	af02      	add	r7, sp, #8
 8010570:	60f8      	str	r0, [r7, #12]
 8010572:	60b9      	str	r1, [r7, #8]
 8010574:	603b      	str	r3, [r7, #0]
 8010576:	4613      	mov	r3, r2
 8010578:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801057a:	2300      	movs	r3, #0
 801057c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010584:	b2db      	uxtb	r3, r3
 8010586:	2b20      	cmp	r3, #32
 8010588:	f040 8090 	bne.w	80106ac <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d002      	beq.n	8010598 <HAL_UART_Receive+0x2e>
 8010592:	88fb      	ldrh	r3, [r7, #6]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d101      	bne.n	801059c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8010598:	2301      	movs	r3, #1
 801059a:	e088      	b.n	80106ae <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d101      	bne.n	80105aa <HAL_UART_Receive+0x40>
 80105a6:	2302      	movs	r3, #2
 80105a8:	e081      	b.n	80106ae <HAL_UART_Receive+0x144>
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2201      	movs	r2, #1
 80105ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2200      	movs	r2, #0
 80105b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	2222      	movs	r2, #34	; 0x22
 80105bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80105c0:	f7fb fce2 	bl	800bf88 <HAL_GetTick>
 80105c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	88fa      	ldrh	r2, [r7, #6]
 80105ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	88fa      	ldrh	r2, [r7, #6]
 80105d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80105d2:	e05c      	b.n	801068e <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80105d8:	b29b      	uxth	r3, r3
 80105da:	3b01      	subs	r3, #1
 80105dc:	b29a      	uxth	r2, r3
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	689b      	ldr	r3, [r3, #8]
 80105e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105ea:	d12b      	bne.n	8010644 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	9300      	str	r3, [sp, #0]
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	2200      	movs	r2, #0
 80105f4:	2120      	movs	r1, #32
 80105f6:	68f8      	ldr	r0, [r7, #12]
 80105f8:	f000 f975 	bl	80108e6 <UART_WaitOnFlagUntilTimeout>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d001      	beq.n	8010606 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8010602:	2303      	movs	r3, #3
 8010604:	e053      	b.n	80106ae <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	691b      	ldr	r3, [r3, #16]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d10c      	bne.n	801062c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	b29b      	uxth	r3, r3
 801061a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801061e:	b29a      	uxth	r2, r3
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	3302      	adds	r3, #2
 8010628:	60bb      	str	r3, [r7, #8]
 801062a:	e030      	b.n	801068e <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	b29b      	uxth	r3, r3
 8010634:	b2db      	uxtb	r3, r3
 8010636:	b29a      	uxth	r2, r3
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	3301      	adds	r3, #1
 8010640:	60bb      	str	r3, [r7, #8]
 8010642:	e024      	b.n	801068e <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	9300      	str	r3, [sp, #0]
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	2200      	movs	r2, #0
 801064c:	2120      	movs	r1, #32
 801064e:	68f8      	ldr	r0, [r7, #12]
 8010650:	f000 f949 	bl	80108e6 <UART_WaitOnFlagUntilTimeout>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d001      	beq.n	801065e <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 801065a:	2303      	movs	r3, #3
 801065c:	e027      	b.n	80106ae <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	691b      	ldr	r3, [r3, #16]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d108      	bne.n	8010678 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	6859      	ldr	r1, [r3, #4]
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	1c5a      	adds	r2, r3, #1
 8010670:	60ba      	str	r2, [r7, #8]
 8010672:	b2ca      	uxtb	r2, r1
 8010674:	701a      	strb	r2, [r3, #0]
 8010676:	e00a      	b.n	801068e <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	b2da      	uxtb	r2, r3
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	1c59      	adds	r1, r3, #1
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801068a:	b2d2      	uxtb	r2, r2
 801068c:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010692:	b29b      	uxth	r3, r3
 8010694:	2b00      	cmp	r3, #0
 8010696:	d19d      	bne.n	80105d4 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	2220      	movs	r2, #32
 801069c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2200      	movs	r2, #0
 80106a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80106a8:	2300      	movs	r3, #0
 80106aa:	e000      	b.n	80106ae <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80106ac:	2302      	movs	r3, #2
  }
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3718      	adds	r7, #24
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
	...

080106b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b088      	sub	sp, #32
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	695b      	ldr	r3, [r3, #20]
 80106d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80106d8:	2300      	movs	r3, #0
 80106da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80106dc:	2300      	movs	r3, #0
 80106de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80106e0:	69fb      	ldr	r3, [r7, #28]
 80106e2:	f003 030f 	and.w	r3, r3, #15
 80106e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d10d      	bne.n	801070a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80106ee:	69fb      	ldr	r3, [r7, #28]
 80106f0:	f003 0320 	and.w	r3, r3, #32
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d008      	beq.n	801070a <HAL_UART_IRQHandler+0x52>
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	f003 0320 	and.w	r3, r3, #32
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d003      	beq.n	801070a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f9d7 	bl	8010ab6 <UART_Receive_IT>
      return;
 8010708:	e0cc      	b.n	80108a4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	2b00      	cmp	r3, #0
 801070e:	f000 80ab 	beq.w	8010868 <HAL_UART_IRQHandler+0x1b0>
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	f003 0301 	and.w	r3, r3, #1
 8010718:	2b00      	cmp	r3, #0
 801071a:	d105      	bne.n	8010728 <HAL_UART_IRQHandler+0x70>
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010722:	2b00      	cmp	r3, #0
 8010724:	f000 80a0 	beq.w	8010868 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010728:	69fb      	ldr	r3, [r7, #28]
 801072a:	f003 0301 	and.w	r3, r3, #1
 801072e:	2b00      	cmp	r3, #0
 8010730:	d00a      	beq.n	8010748 <HAL_UART_IRQHandler+0x90>
 8010732:	69bb      	ldr	r3, [r7, #24]
 8010734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010738:	2b00      	cmp	r3, #0
 801073a:	d005      	beq.n	8010748 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010740:	f043 0201 	orr.w	r2, r3, #1
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	f003 0304 	and.w	r3, r3, #4
 801074e:	2b00      	cmp	r3, #0
 8010750:	d00a      	beq.n	8010768 <HAL_UART_IRQHandler+0xb0>
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	f003 0301 	and.w	r3, r3, #1
 8010758:	2b00      	cmp	r3, #0
 801075a:	d005      	beq.n	8010768 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010760:	f043 0202 	orr.w	r2, r3, #2
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	f003 0302 	and.w	r3, r3, #2
 801076e:	2b00      	cmp	r3, #0
 8010770:	d00a      	beq.n	8010788 <HAL_UART_IRQHandler+0xd0>
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	f003 0301 	and.w	r3, r3, #1
 8010778:	2b00      	cmp	r3, #0
 801077a:	d005      	beq.n	8010788 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010780:	f043 0204 	orr.w	r2, r3, #4
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010788:	69fb      	ldr	r3, [r7, #28]
 801078a:	f003 0308 	and.w	r3, r3, #8
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00a      	beq.n	80107a8 <HAL_UART_IRQHandler+0xf0>
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	f003 0301 	and.w	r3, r3, #1
 8010798:	2b00      	cmp	r3, #0
 801079a:	d005      	beq.n	80107a8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107a0:	f043 0208 	orr.w	r2, r3, #8
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d078      	beq.n	80108a2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	f003 0320 	and.w	r3, r3, #32
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d007      	beq.n	80107ca <HAL_UART_IRQHandler+0x112>
 80107ba:	69bb      	ldr	r3, [r7, #24]
 80107bc:	f003 0320 	and.w	r3, r3, #32
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d002      	beq.n	80107ca <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f000 f976 	bl	8010ab6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	695b      	ldr	r3, [r3, #20]
 80107d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	bf14      	ite	ne
 80107d8:	2301      	movne	r3, #1
 80107da:	2300      	moveq	r3, #0
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107e4:	f003 0308 	and.w	r3, r3, #8
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d102      	bne.n	80107f2 <HAL_UART_IRQHandler+0x13a>
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d031      	beq.n	8010856 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f000 f8c1 	bl	801097a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	695b      	ldr	r3, [r3, #20]
 80107fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010802:	2b00      	cmp	r3, #0
 8010804:	d023      	beq.n	801084e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	695a      	ldr	r2, [r3, #20]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010814:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801081a:	2b00      	cmp	r3, #0
 801081c:	d013      	beq.n	8010846 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010822:	4a22      	ldr	r2, [pc, #136]	; (80108ac <HAL_UART_IRQHandler+0x1f4>)
 8010824:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801082a:	4618      	mov	r0, r3
 801082c:	f7fc f894 	bl	800c958 <HAL_DMA_Abort_IT>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d016      	beq.n	8010864 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801083a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010840:	4610      	mov	r0, r2
 8010842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010844:	e00e      	b.n	8010864 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f000 f844 	bl	80108d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801084c:	e00a      	b.n	8010864 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f000 f840 	bl	80108d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010854:	e006      	b.n	8010864 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f000 f83c 	bl	80108d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2200      	movs	r2, #0
 8010860:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010862:	e01e      	b.n	80108a2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010864:	bf00      	nop
    return;
 8010866:	e01c      	b.n	80108a2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801086e:	2b00      	cmp	r3, #0
 8010870:	d008      	beq.n	8010884 <HAL_UART_IRQHandler+0x1cc>
 8010872:	69bb      	ldr	r3, [r7, #24]
 8010874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010878:	2b00      	cmp	r3, #0
 801087a:	d003      	beq.n	8010884 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 f8ad 	bl	80109dc <UART_Transmit_IT>
    return;
 8010882:	e00f      	b.n	80108a4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801088a:	2b00      	cmp	r3, #0
 801088c:	d00a      	beq.n	80108a4 <HAL_UART_IRQHandler+0x1ec>
 801088e:	69bb      	ldr	r3, [r7, #24]
 8010890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010894:	2b00      	cmp	r3, #0
 8010896:	d005      	beq.n	80108a4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f000 f8f4 	bl	8010a86 <UART_EndTransmit_IT>
    return;
 801089e:	bf00      	nop
 80108a0:	e000      	b.n	80108a4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80108a2:	bf00      	nop
  }
}
 80108a4:	3720      	adds	r7, #32
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	080109b5 	.word	0x080109b5

080108b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b083      	sub	sp, #12
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80108b8:	bf00      	nop
 80108ba:	370c      	adds	r7, #12
 80108bc:	46bd      	mov	sp, r7
 80108be:	bc80      	pop	{r7}
 80108c0:	4770      	bx	lr

080108c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80108c2:	b480      	push	{r7}
 80108c4:	b083      	sub	sp, #12
 80108c6:	af00      	add	r7, sp, #0
 80108c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80108ca:	bf00      	nop
 80108cc:	370c      	adds	r7, #12
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bc80      	pop	{r7}
 80108d2:	4770      	bx	lr

080108d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80108dc:	bf00      	nop
 80108de:	370c      	adds	r7, #12
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bc80      	pop	{r7}
 80108e4:	4770      	bx	lr

080108e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80108e6:	b580      	push	{r7, lr}
 80108e8:	b084      	sub	sp, #16
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	60f8      	str	r0, [r7, #12]
 80108ee:	60b9      	str	r1, [r7, #8]
 80108f0:	603b      	str	r3, [r7, #0]
 80108f2:	4613      	mov	r3, r2
 80108f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108f6:	e02c      	b.n	8010952 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108fe:	d028      	beq.n	8010952 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d007      	beq.n	8010916 <UART_WaitOnFlagUntilTimeout+0x30>
 8010906:	f7fb fb3f 	bl	800bf88 <HAL_GetTick>
 801090a:	4602      	mov	r2, r0
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	69ba      	ldr	r2, [r7, #24]
 8010912:	429a      	cmp	r2, r3
 8010914:	d21d      	bcs.n	8010952 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	68da      	ldr	r2, [r3, #12]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010924:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	695a      	ldr	r2, [r3, #20]
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f022 0201 	bic.w	r2, r2, #1
 8010934:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2220      	movs	r2, #32
 801093a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2220      	movs	r2, #32
 8010942:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	2200      	movs	r2, #0
 801094a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801094e:	2303      	movs	r3, #3
 8010950:	e00f      	b.n	8010972 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	4013      	ands	r3, r2
 801095c:	68ba      	ldr	r2, [r7, #8]
 801095e:	429a      	cmp	r2, r3
 8010960:	bf0c      	ite	eq
 8010962:	2301      	moveq	r3, #1
 8010964:	2300      	movne	r3, #0
 8010966:	b2db      	uxtb	r3, r3
 8010968:	461a      	mov	r2, r3
 801096a:	79fb      	ldrb	r3, [r7, #7]
 801096c:	429a      	cmp	r2, r3
 801096e:	d0c3      	beq.n	80108f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010970:	2300      	movs	r3, #0
}
 8010972:	4618      	mov	r0, r3
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801097a:	b480      	push	{r7}
 801097c:	b083      	sub	sp, #12
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	68da      	ldr	r2, [r3, #12]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010990:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	695a      	ldr	r2, [r3, #20]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f022 0201 	bic.w	r2, r2, #1
 80109a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2220      	movs	r2, #32
 80109a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80109aa:	bf00      	nop
 80109ac:	370c      	adds	r7, #12
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bc80      	pop	{r7}
 80109b2:	4770      	bx	lr

080109b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2200      	movs	r2, #0
 80109c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2200      	movs	r2, #0
 80109cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109ce:	68f8      	ldr	r0, [r7, #12]
 80109d0:	f7ff ff80 	bl	80108d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109d4:	bf00      	nop
 80109d6:	3710      	adds	r7, #16
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80109dc:	b480      	push	{r7}
 80109de:	b085      	sub	sp, #20
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	2b21      	cmp	r3, #33	; 0x21
 80109ee:	d144      	bne.n	8010a7a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	689b      	ldr	r3, [r3, #8]
 80109f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109f8:	d11a      	bne.n	8010a30 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6a1b      	ldr	r3, [r3, #32]
 80109fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	881b      	ldrh	r3, [r3, #0]
 8010a04:	461a      	mov	r2, r3
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010a0e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	691b      	ldr	r3, [r3, #16]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d105      	bne.n	8010a24 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6a1b      	ldr	r3, [r3, #32]
 8010a1c:	1c9a      	adds	r2, r3, #2
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	621a      	str	r2, [r3, #32]
 8010a22:	e00e      	b.n	8010a42 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6a1b      	ldr	r3, [r3, #32]
 8010a28:	1c5a      	adds	r2, r3, #1
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	621a      	str	r2, [r3, #32]
 8010a2e:	e008      	b.n	8010a42 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6a1b      	ldr	r3, [r3, #32]
 8010a34:	1c59      	adds	r1, r3, #1
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	6211      	str	r1, [r2, #32]
 8010a3a:	781a      	ldrb	r2, [r3, #0]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	3b01      	subs	r3, #1
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	4619      	mov	r1, r3
 8010a50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d10f      	bne.n	8010a76 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	68da      	ldr	r2, [r3, #12]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010a64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	68da      	ldr	r2, [r3, #12]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010a74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010a76:	2300      	movs	r3, #0
 8010a78:	e000      	b.n	8010a7c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010a7a:	2302      	movs	r3, #2
  }
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3714      	adds	r7, #20
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bc80      	pop	{r7}
 8010a84:	4770      	bx	lr

08010a86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b082      	sub	sp, #8
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	68da      	ldr	r2, [r3, #12]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2220      	movs	r2, #32
 8010aa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f7ff ff02 	bl	80108b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010aac:	2300      	movs	r3, #0
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3708      	adds	r7, #8
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b084      	sub	sp, #16
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010ac4:	b2db      	uxtb	r3, r3
 8010ac6:	2b22      	cmp	r3, #34	; 0x22
 8010ac8:	d171      	bne.n	8010bae <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ad2:	d123      	bne.n	8010b1c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ad8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	691b      	ldr	r3, [r3, #16]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d10e      	bne.n	8010b00 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	b29b      	uxth	r3, r3
 8010aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010aee:	b29a      	uxth	r2, r3
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010af8:	1c9a      	adds	r2, r3, #2
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	629a      	str	r2, [r3, #40]	; 0x28
 8010afe:	e029      	b.n	8010b54 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	b2db      	uxtb	r3, r3
 8010b0a:	b29a      	uxth	r2, r3
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b14:	1c5a      	adds	r2, r3, #1
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	629a      	str	r2, [r3, #40]	; 0x28
 8010b1a:	e01b      	b.n	8010b54 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	691b      	ldr	r3, [r3, #16]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d10a      	bne.n	8010b3a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	6858      	ldr	r0, [r3, #4]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b2e:	1c59      	adds	r1, r3, #1
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	6291      	str	r1, [r2, #40]	; 0x28
 8010b34:	b2c2      	uxtb	r2, r0
 8010b36:	701a      	strb	r2, [r3, #0]
 8010b38:	e00c      	b.n	8010b54 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	685b      	ldr	r3, [r3, #4]
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b46:	1c58      	adds	r0, r3, #1
 8010b48:	6879      	ldr	r1, [r7, #4]
 8010b4a:	6288      	str	r0, [r1, #40]	; 0x28
 8010b4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010b50:	b2d2      	uxtb	r2, r2
 8010b52:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b58:	b29b      	uxth	r3, r3
 8010b5a:	3b01      	subs	r3, #1
 8010b5c:	b29b      	uxth	r3, r3
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	4619      	mov	r1, r3
 8010b62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d120      	bne.n	8010baa <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	68da      	ldr	r2, [r3, #12]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f022 0220 	bic.w	r2, r2, #32
 8010b76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	68da      	ldr	r2, [r3, #12]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010b86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	695a      	ldr	r2, [r3, #20]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f022 0201 	bic.w	r2, r2, #1
 8010b96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2220      	movs	r2, #32
 8010b9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7ff fe8e 	bl	80108c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	e002      	b.n	8010bb0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8010baa:	2300      	movs	r3, #0
 8010bac:	e000      	b.n	8010bb0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8010bae:	2302      	movs	r3, #2
  }
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3710      	adds	r7, #16
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	685b      	ldr	r3, [r3, #4]
 8010bc4:	4a84      	ldr	r2, [pc, #528]	; (8010dd8 <UART_SetConfig+0x220>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d904      	bls.n	8010bd4 <UART_SetConfig+0x1c>
 8010bca:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8010bce:	4883      	ldr	r0, [pc, #524]	; (8010ddc <UART_SetConfig+0x224>)
 8010bd0:	f7fa fd70 	bl	800b6b4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	68db      	ldr	r3, [r3, #12]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d009      	beq.n	8010bf0 <UART_SetConfig+0x38>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	68db      	ldr	r3, [r3, #12]
 8010be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010be4:	d004      	beq.n	8010bf0 <UART_SetConfig+0x38>
 8010be6:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8010bea:	487c      	ldr	r0, [pc, #496]	; (8010ddc <UART_SetConfig+0x224>)
 8010bec:	f7fa fd62 	bl	800b6b4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	691b      	ldr	r3, [r3, #16]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00e      	beq.n	8010c16 <UART_SetConfig+0x5e>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	691b      	ldr	r3, [r3, #16]
 8010bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c00:	d009      	beq.n	8010c16 <UART_SetConfig+0x5e>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	691b      	ldr	r3, [r3, #16]
 8010c06:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010c0a:	d004      	beq.n	8010c16 <UART_SetConfig+0x5e>
 8010c0c:	f640 31ff 	movw	r1, #3071	; 0xbff
 8010c10:	4872      	ldr	r0, [pc, #456]	; (8010ddc <UART_SetConfig+0x224>)
 8010c12:	f7fa fd4f 	bl	800b6b4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	695a      	ldr	r2, [r3, #20]
 8010c1a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8010c1e:	4013      	ands	r3, r2
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d103      	bne.n	8010c2c <UART_SetConfig+0x74>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	695b      	ldr	r3, [r3, #20]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d104      	bne.n	8010c36 <UART_SetConfig+0x7e>
 8010c2c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8010c30:	486a      	ldr	r0, [pc, #424]	; (8010ddc <UART_SetConfig+0x224>)
 8010c32:	f7fa fd3f 	bl	800b6b4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	691b      	ldr	r3, [r3, #16]
 8010c3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	68da      	ldr	r2, [r3, #12]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	430a      	orrs	r2, r1
 8010c4a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	689a      	ldr	r2, [r3, #8]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	691b      	ldr	r3, [r3, #16]
 8010c54:	431a      	orrs	r2, r3
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	695b      	ldr	r3, [r3, #20]
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010c68:	f023 030c 	bic.w	r3, r3, #12
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	6812      	ldr	r2, [r2, #0]
 8010c70:	68f9      	ldr	r1, [r7, #12]
 8010c72:	430b      	orrs	r3, r1
 8010c74:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	695b      	ldr	r3, [r3, #20]
 8010c7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	699a      	ldr	r2, [r3, #24]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	430a      	orrs	r2, r1
 8010c8a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a53      	ldr	r2, [pc, #332]	; (8010de0 <UART_SetConfig+0x228>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d14e      	bne.n	8010d34 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8010c96:	f7fe fa23 	bl	800f0e0 <HAL_RCC_GetPCLK2Freq>
 8010c9a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010c9c:	68ba      	ldr	r2, [r7, #8]
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	009b      	lsls	r3, r3, #2
 8010ca2:	4413      	add	r3, r2
 8010ca4:	009a      	lsls	r2, r3, #2
 8010ca6:	441a      	add	r2, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cb2:	4a4c      	ldr	r2, [pc, #304]	; (8010de4 <UART_SetConfig+0x22c>)
 8010cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8010cb8:	095b      	lsrs	r3, r3, #5
 8010cba:	0119      	lsls	r1, r3, #4
 8010cbc:	68ba      	ldr	r2, [r7, #8]
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	4413      	add	r3, r2
 8010cc4:	009a      	lsls	r2, r3, #2
 8010cc6:	441a      	add	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	009b      	lsls	r3, r3, #2
 8010cce:	fbb2 f2f3 	udiv	r2, r2, r3
 8010cd2:	4b44      	ldr	r3, [pc, #272]	; (8010de4 <UART_SetConfig+0x22c>)
 8010cd4:	fba3 0302 	umull	r0, r3, r3, r2
 8010cd8:	095b      	lsrs	r3, r3, #5
 8010cda:	2064      	movs	r0, #100	; 0x64
 8010cdc:	fb00 f303 	mul.w	r3, r0, r3
 8010ce0:	1ad3      	subs	r3, r2, r3
 8010ce2:	011b      	lsls	r3, r3, #4
 8010ce4:	3332      	adds	r3, #50	; 0x32
 8010ce6:	4a3f      	ldr	r2, [pc, #252]	; (8010de4 <UART_SetConfig+0x22c>)
 8010ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8010cec:	095b      	lsrs	r3, r3, #5
 8010cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010cf2:	4419      	add	r1, r3
 8010cf4:	68ba      	ldr	r2, [r7, #8]
 8010cf6:	4613      	mov	r3, r2
 8010cf8:	009b      	lsls	r3, r3, #2
 8010cfa:	4413      	add	r3, r2
 8010cfc:	009a      	lsls	r2, r3, #2
 8010cfe:	441a      	add	r2, r3
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	fbb2 f2f3 	udiv	r2, r2, r3
 8010d0a:	4b36      	ldr	r3, [pc, #216]	; (8010de4 <UART_SetConfig+0x22c>)
 8010d0c:	fba3 0302 	umull	r0, r3, r3, r2
 8010d10:	095b      	lsrs	r3, r3, #5
 8010d12:	2064      	movs	r0, #100	; 0x64
 8010d14:	fb00 f303 	mul.w	r3, r0, r3
 8010d18:	1ad3      	subs	r3, r2, r3
 8010d1a:	011b      	lsls	r3, r3, #4
 8010d1c:	3332      	adds	r3, #50	; 0x32
 8010d1e:	4a31      	ldr	r2, [pc, #196]	; (8010de4 <UART_SetConfig+0x22c>)
 8010d20:	fba2 2303 	umull	r2, r3, r2, r3
 8010d24:	095b      	lsrs	r3, r3, #5
 8010d26:	f003 020f 	and.w	r2, r3, #15
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	440a      	add	r2, r1
 8010d30:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8010d32:	e04d      	b.n	8010dd0 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8010d34:	f7fe f9c0 	bl	800f0b8 <HAL_RCC_GetPCLK1Freq>
 8010d38:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010d3a:	68ba      	ldr	r2, [r7, #8]
 8010d3c:	4613      	mov	r3, r2
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	4413      	add	r3, r2
 8010d42:	009a      	lsls	r2, r3, #2
 8010d44:	441a      	add	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d50:	4a24      	ldr	r2, [pc, #144]	; (8010de4 <UART_SetConfig+0x22c>)
 8010d52:	fba2 2303 	umull	r2, r3, r2, r3
 8010d56:	095b      	lsrs	r3, r3, #5
 8010d58:	0119      	lsls	r1, r3, #4
 8010d5a:	68ba      	ldr	r2, [r7, #8]
 8010d5c:	4613      	mov	r3, r2
 8010d5e:	009b      	lsls	r3, r3, #2
 8010d60:	4413      	add	r3, r2
 8010d62:	009a      	lsls	r2, r3, #2
 8010d64:	441a      	add	r2, r3
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	009b      	lsls	r3, r3, #2
 8010d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8010d70:	4b1c      	ldr	r3, [pc, #112]	; (8010de4 <UART_SetConfig+0x22c>)
 8010d72:	fba3 0302 	umull	r0, r3, r3, r2
 8010d76:	095b      	lsrs	r3, r3, #5
 8010d78:	2064      	movs	r0, #100	; 0x64
 8010d7a:	fb00 f303 	mul.w	r3, r0, r3
 8010d7e:	1ad3      	subs	r3, r2, r3
 8010d80:	011b      	lsls	r3, r3, #4
 8010d82:	3332      	adds	r3, #50	; 0x32
 8010d84:	4a17      	ldr	r2, [pc, #92]	; (8010de4 <UART_SetConfig+0x22c>)
 8010d86:	fba2 2303 	umull	r2, r3, r2, r3
 8010d8a:	095b      	lsrs	r3, r3, #5
 8010d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d90:	4419      	add	r1, r3
 8010d92:	68ba      	ldr	r2, [r7, #8]
 8010d94:	4613      	mov	r3, r2
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	4413      	add	r3, r2
 8010d9a:	009a      	lsls	r2, r3, #2
 8010d9c:	441a      	add	r2, r3
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	009b      	lsls	r3, r3, #2
 8010da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8010da8:	4b0e      	ldr	r3, [pc, #56]	; (8010de4 <UART_SetConfig+0x22c>)
 8010daa:	fba3 0302 	umull	r0, r3, r3, r2
 8010dae:	095b      	lsrs	r3, r3, #5
 8010db0:	2064      	movs	r0, #100	; 0x64
 8010db2:	fb00 f303 	mul.w	r3, r0, r3
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	011b      	lsls	r3, r3, #4
 8010dba:	3332      	adds	r3, #50	; 0x32
 8010dbc:	4a09      	ldr	r2, [pc, #36]	; (8010de4 <UART_SetConfig+0x22c>)
 8010dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8010dc2:	095b      	lsrs	r3, r3, #5
 8010dc4:	f003 020f 	and.w	r2, r3, #15
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	440a      	add	r2, r1
 8010dce:	609a      	str	r2, [r3, #8]
}
 8010dd0:	bf00      	nop
 8010dd2:	3710      	adds	r7, #16
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	0044aa20 	.word	0x0044aa20
 8010ddc:	0801286c 	.word	0x0801286c
 8010de0:	40013800 	.word	0x40013800
 8010de4:	51eb851f 	.word	0x51eb851f

08010de8 <_Znaj>:
 8010de8:	f000 b800 	b.w	8010dec <_Znwj>

08010dec <_Znwj>:
 8010dec:	b510      	push	{r4, lr}
 8010dee:	2800      	cmp	r0, #0
 8010df0:	bf14      	ite	ne
 8010df2:	4604      	movne	r4, r0
 8010df4:	2401      	moveq	r4, #1
 8010df6:	4620      	mov	r0, r4
 8010df8:	f000 fbd8 	bl	80115ac <malloc>
 8010dfc:	b930      	cbnz	r0, 8010e0c <_Znwj+0x20>
 8010dfe:	f000 f807 	bl	8010e10 <_ZSt15get_new_handlerv>
 8010e02:	b908      	cbnz	r0, 8010e08 <_Znwj+0x1c>
 8010e04:	f000 fba0 	bl	8011548 <abort>
 8010e08:	4780      	blx	r0
 8010e0a:	e7f4      	b.n	8010df6 <_Znwj+0xa>
 8010e0c:	bd10      	pop	{r4, pc}
	...

08010e10 <_ZSt15get_new_handlerv>:
 8010e10:	4b02      	ldr	r3, [pc, #8]	; (8010e1c <_ZSt15get_new_handlerv+0xc>)
 8010e12:	6818      	ldr	r0, [r3, #0]
 8010e14:	f3bf 8f5b 	dmb	ish
 8010e18:	4770      	bx	lr
 8010e1a:	bf00      	nop
 8010e1c:	2000069c 	.word	0x2000069c

08010e20 <_ZdlPv>:
 8010e20:	f000 bbcc 	b.w	80115bc <free>

08010e24 <_ZNSaIcEC1Ev>:
 8010e24:	4770      	bx	lr

08010e26 <_ZNSaIcED1Ev>:
 8010e26:	4770      	bx	lr

08010e28 <_ZSt17__throw_bad_allocv>:
 8010e28:	b508      	push	{r3, lr}
 8010e2a:	f000 fb8d 	bl	8011548 <abort>

08010e2e <_ZSt19__throw_logic_errorPKc>:
 8010e2e:	b508      	push	{r3, lr}
 8010e30:	f000 fb8a 	bl	8011548 <abort>

08010e34 <_ZSt24__throw_invalid_argumentPKc>:
 8010e34:	b508      	push	{r3, lr}
 8010e36:	f000 fb87 	bl	8011548 <abort>

08010e3a <_ZSt20__throw_length_errorPKc>:
 8010e3a:	b508      	push	{r3, lr}
 8010e3c:	f000 fb84 	bl	8011548 <abort>

08010e40 <_ZSt20__throw_out_of_rangePKc>:
 8010e40:	b508      	push	{r3, lr}
 8010e42:	f000 fb81 	bl	8011548 <abort>

08010e46 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8010e46:	b40f      	push	{r0, r1, r2, r3}
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	f107 0410 	add.w	r4, r7, #16
 8010e52:	f854 5b04 	ldr.w	r5, [r4], #4
 8010e56:	4628      	mov	r0, r5
 8010e58:	f7ef f97a 	bl	8000150 <strlen>
 8010e5c:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8010e60:	f023 0307 	bic.w	r3, r3, #7
 8010e64:	ebad 0d03 	sub.w	sp, sp, r3
 8010e68:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8010e6c:	4623      	mov	r3, r4
 8010e6e:	462a      	mov	r2, r5
 8010e70:	4668      	mov	r0, sp
 8010e72:	607c      	str	r4, [r7, #4]
 8010e74:	f000 fb02 	bl	801147c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8010e78:	f000 fb66 	bl	8011548 <abort>

08010e7c <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8010e7c:	b10a      	cbz	r2, 8010e82 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8010e7e:	f000 bbb3 	b.w	80115e8 <memcmp>
 8010e82:	4610      	mov	r0, r2
 8010e84:	4770      	bx	lr

08010e86 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8010e86:	b10a      	cbz	r2, 8010e8c <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8010e88:	f000 bbbd 	b.w	8011606 <memcpy>
 8010e8c:	4770      	bx	lr

08010e8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8010e8e:	6001      	str	r1, [r0, #0]
 8010e90:	4770      	bx	lr

08010e92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8010e92:	6800      	ldr	r0, [r0, #0]
 8010e94:	4770      	bx	lr

08010e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8010e96:	3008      	adds	r0, #8
 8010e98:	4770      	bx	lr

08010e9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8010e9a:	6081      	str	r1, [r0, #8]
 8010e9c:	4770      	bx	lr

08010e9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	6803      	ldr	r3, [r0, #0]
 8010ea2:	6041      	str	r1, [r0, #4]
 8010ea4:	545a      	strb	r2, [r3, r1]
 8010ea6:	4770      	bx	lr

08010ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8010ea8:	b508      	push	{r3, lr}
 8010eaa:	680b      	ldr	r3, [r1, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	da02      	bge.n	8010eb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8010eb0:	4809      	ldr	r0, [pc, #36]	; (8010ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8010eb2:	f7ff ffc2 	bl	8010e3a <_ZSt20__throw_length_errorPKc>
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d908      	bls.n	8010ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8010eba:	0052      	lsls	r2, r2, #1
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d205      	bcs.n	8010ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8010ec0:	2a00      	cmp	r2, #0
 8010ec2:	bfb6      	itet	lt
 8010ec4:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8010ec8:	600a      	strge	r2, [r1, #0]
 8010eca:	600b      	strlt	r3, [r1, #0]
 8010ecc:	6808      	ldr	r0, [r1, #0]
 8010ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010ed2:	3001      	adds	r0, #1
 8010ed4:	f7ff bf8a 	b.w	8010dec <_Znwj>
 8010ed8:	08015429 	.word	0x08015429

08010edc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8010edc:	4603      	mov	r3, r0
 8010ede:	f853 0b08 	ldr.w	r0, [r3], #8
 8010ee2:	4298      	cmp	r0, r3
 8010ee4:	d001      	beq.n	8010eea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8010ee6:	f7ff bf9b 	b.w	8010e20 <_ZdlPv>
 8010eea:	4770      	bx	lr

08010eec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8010eec:	b510      	push	{r4, lr}
 8010eee:	6843      	ldr	r3, [r0, #4]
 8010ef0:	4614      	mov	r4, r2
 8010ef2:	4299      	cmp	r1, r3
 8010ef4:	d904      	bls.n	8010f00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 8010ef6:	460a      	mov	r2, r1
 8010ef8:	4802      	ldr	r0, [pc, #8]	; (8010f04 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8010efa:	4621      	mov	r1, r4
 8010efc:	f7ff ffa3 	bl	8010e46 <_ZSt24__throw_out_of_range_fmtPKcz>
 8010f00:	4608      	mov	r0, r1
 8010f02:	bd10      	pop	{r4, pc}
 8010f04:	08015384 	.word	0x08015384

08010f08 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8010f08:	b508      	push	{r3, lr}
 8010f0a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8010f0e:	6840      	ldr	r0, [r0, #4]
 8010f10:	3901      	subs	r1, #1
 8010f12:	1a09      	subs	r1, r1, r0
 8010f14:	4291      	cmp	r1, r2
 8010f16:	d202      	bcs.n	8010f1e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7ff ff8e 	bl	8010e3a <_ZSt20__throw_length_errorPKc>
 8010f1e:	bd08      	pop	{r3, pc}

08010f20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8010f20:	6803      	ldr	r3, [r0, #0]
 8010f22:	428b      	cmp	r3, r1
 8010f24:	d806      	bhi.n	8010f34 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8010f26:	6840      	ldr	r0, [r0, #4]
 8010f28:	4418      	add	r0, r3
 8010f2a:	4281      	cmp	r1, r0
 8010f2c:	bf94      	ite	ls
 8010f2e:	2000      	movls	r0, #0
 8010f30:	2001      	movhi	r0, #1
 8010f32:	4770      	bx	lr
 8010f34:	2001      	movs	r0, #1
 8010f36:	4770      	bx	lr

08010f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8010f38:	2a01      	cmp	r2, #1
 8010f3a:	b510      	push	{r4, lr}
 8010f3c:	d102      	bne.n	8010f44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8010f3e:	780a      	ldrb	r2, [r1, #0]
 8010f40:	7002      	strb	r2, [r0, #0]
 8010f42:	bd10      	pop	{r4, pc}
 8010f44:	f7ff ff9f 	bl	8010e86 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8010f48:	e7fb      	b.n	8010f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08010f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8010f4a:	2a01      	cmp	r2, #1
 8010f4c:	b430      	push	{r4, r5}
 8010f4e:	d103      	bne.n	8010f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8010f50:	780b      	ldrb	r3, [r1, #0]
 8010f52:	7003      	strb	r3, [r0, #0]
 8010f54:	bc30      	pop	{r4, r5}
 8010f56:	4770      	bx	lr
 8010f58:	2a00      	cmp	r2, #0
 8010f5a:	d0fb      	beq.n	8010f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8010f5c:	bc30      	pop	{r4, r5}
 8010f5e:	f000 bb5d 	b.w	801161c <memmove>

08010f62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8010f62:	b508      	push	{r3, lr}
 8010f64:	1a52      	subs	r2, r2, r1
 8010f66:	f7ff ffe7 	bl	8010f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010f6a:	bd08      	pop	{r3, pc}

08010f6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8010f6c:	b508      	push	{r3, lr}
 8010f6e:	1a52      	subs	r2, r2, r1
 8010f70:	f7ff ffe2 	bl	8010f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010f74:	bd08      	pop	{r3, pc}

08010f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8010f76:	4288      	cmp	r0, r1
 8010f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	460e      	mov	r6, r1
 8010f7e:	d020      	beq.n	8010fc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8010f80:	6802      	ldr	r2, [r0, #0]
 8010f82:	f100 0308 	add.w	r3, r0, #8
 8010f86:	429a      	cmp	r2, r3
 8010f88:	bf08      	it	eq
 8010f8a:	220f      	moveq	r2, #15
 8010f8c:	684d      	ldr	r5, [r1, #4]
 8010f8e:	bf18      	it	ne
 8010f90:	6882      	ldrne	r2, [r0, #8]
 8010f92:	42aa      	cmp	r2, r5
 8010f94:	d20b      	bcs.n	8010fae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 8010f96:	a902      	add	r1, sp, #8
 8010f98:	f841 5d04 	str.w	r5, [r1, #-4]!
 8010f9c:	f7ff ff84 	bl	8010ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010fa0:	4607      	mov	r7, r0
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	f7ff ff9a 	bl	8010edc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010fa8:	9b01      	ldr	r3, [sp, #4]
 8010faa:	6027      	str	r7, [r4, #0]
 8010fac:	60a3      	str	r3, [r4, #8]
 8010fae:	b125      	cbz	r5, 8010fba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8010fb0:	462a      	mov	r2, r5
 8010fb2:	6831      	ldr	r1, [r6, #0]
 8010fb4:	6820      	ldr	r0, [r4, #0]
 8010fb6:	f7ff ffbf 	bl	8010f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010fba:	2200      	movs	r2, #0
 8010fbc:	6823      	ldr	r3, [r4, #0]
 8010fbe:	6065      	str	r5, [r4, #4]
 8010fc0:	555a      	strb	r2, [r3, r5]
 8010fc2:	b003      	add	sp, #12
 8010fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8010fc6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fca:	4616      	mov	r6, r2
 8010fcc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8010fd0:	6842      	ldr	r2, [r0, #4]
 8010fd2:	469a      	mov	sl, r3
 8010fd4:	eba8 0306 	sub.w	r3, r8, r6
 8010fd8:	1a57      	subs	r7, r2, r1
 8010fda:	4413      	add	r3, r2
 8010fdc:	6802      	ldr	r2, [r0, #0]
 8010fde:	9301      	str	r3, [sp, #4]
 8010fe0:	f100 0308 	add.w	r3, r0, #8
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	460d      	mov	r5, r1
 8010fe8:	bf14      	ite	ne
 8010fea:	6882      	ldrne	r2, [r0, #8]
 8010fec:	220f      	moveq	r2, #15
 8010fee:	a901      	add	r1, sp, #4
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	f7ff ff59 	bl	8010ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010ff6:	1bbf      	subs	r7, r7, r6
 8010ff8:	4681      	mov	r9, r0
 8010ffa:	b11d      	cbz	r5, 8011004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8010ffc:	462a      	mov	r2, r5
 8010ffe:	6821      	ldr	r1, [r4, #0]
 8011000:	f7ff ff9a 	bl	8010f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011004:	f1ba 0f00 	cmp.w	sl, #0
 8011008:	d008      	beq.n	801101c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 801100a:	f1b8 0f00 	cmp.w	r8, #0
 801100e:	d005      	beq.n	801101c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8011010:	4642      	mov	r2, r8
 8011012:	4651      	mov	r1, sl
 8011014:	eb09 0005 	add.w	r0, r9, r5
 8011018:	f7ff ff8e 	bl	8010f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801101c:	b147      	cbz	r7, 8011030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 801101e:	6821      	ldr	r1, [r4, #0]
 8011020:	442e      	add	r6, r5
 8011022:	eb05 0008 	add.w	r0, r5, r8
 8011026:	463a      	mov	r2, r7
 8011028:	4431      	add	r1, r6
 801102a:	4448      	add	r0, r9
 801102c:	f7ff ff84 	bl	8010f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011030:	4620      	mov	r0, r4
 8011032:	f7ff ff53 	bl	8010edc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011036:	9b01      	ldr	r3, [sp, #4]
 8011038:	f8c4 9000 	str.w	r9, [r4]
 801103c:	60a3      	str	r3, [r4, #8]
 801103e:	b002      	add	sp, #8
 8011040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8011044:	f100 0208 	add.w	r2, r0, #8
 8011048:	6002      	str	r2, [r0, #0]
 801104a:	2200      	movs	r2, #0
 801104c:	6042      	str	r2, [r0, #4]
 801104e:	7202      	strb	r2, [r0, #8]
 8011050:	4770      	bx	lr

08011052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8011052:	b570      	push	{r4, r5, r6, lr}
 8011054:	4604      	mov	r4, r0
 8011056:	460e      	mov	r6, r1
 8011058:	3008      	adds	r0, #8
 801105a:	6020      	str	r0, [r4, #0]
 801105c:	f856 3b08 	ldr.w	r3, [r6], #8
 8011060:	460d      	mov	r5, r1
 8011062:	429e      	cmp	r6, r3
 8011064:	d10b      	bne.n	801107e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8011066:	2210      	movs	r2, #16
 8011068:	4631      	mov	r1, r6
 801106a:	f7ff ff0c 	bl	8010e86 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 801106e:	686b      	ldr	r3, [r5, #4]
 8011070:	4620      	mov	r0, r4
 8011072:	6063      	str	r3, [r4, #4]
 8011074:	2300      	movs	r3, #0
 8011076:	602e      	str	r6, [r5, #0]
 8011078:	606b      	str	r3, [r5, #4]
 801107a:	722b      	strb	r3, [r5, #8]
 801107c:	bd70      	pop	{r4, r5, r6, pc}
 801107e:	6023      	str	r3, [r4, #0]
 8011080:	688b      	ldr	r3, [r1, #8]
 8011082:	60a3      	str	r3, [r4, #8]
 8011084:	e7f3      	b.n	801106e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08011086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8011086:	b510      	push	{r4, lr}
 8011088:	4604      	mov	r4, r0
 801108a:	f7ff ff27 	bl	8010edc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801108e:	4620      	mov	r0, r4
 8011090:	bd10      	pop	{r4, pc}

08011092 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8011092:	b510      	push	{r4, lr}
 8011094:	4604      	mov	r4, r0
 8011096:	f7ff ff6e 	bl	8010f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801109a:	4620      	mov	r0, r4
 801109c:	bd10      	pop	{r4, pc}

0801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801109e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110a0:	460b      	mov	r3, r1
 80110a2:	4606      	mov	r6, r0
 80110a4:	f853 7b08 	ldr.w	r7, [r3], #8
 80110a8:	4605      	mov	r5, r0
 80110aa:	42bb      	cmp	r3, r7
 80110ac:	460c      	mov	r4, r1
 80110ae:	f856 2b08 	ldr.w	r2, [r6], #8
 80110b2:	d016      	beq.n	80110e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 80110b4:	4296      	cmp	r6, r2
 80110b6:	bf08      	it	eq
 80110b8:	2200      	moveq	r2, #0
 80110ba:	6007      	str	r7, [r0, #0]
 80110bc:	6849      	ldr	r1, [r1, #4]
 80110be:	bf18      	it	ne
 80110c0:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 80110c4:	6041      	str	r1, [r0, #4]
 80110c6:	68a1      	ldr	r1, [r4, #8]
 80110c8:	6081      	str	r1, [r0, #8]
 80110ca:	b142      	cbz	r2, 80110de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80110cc:	6022      	str	r2, [r4, #0]
 80110ce:	f8c4 c008 	str.w	ip, [r4, #8]
 80110d2:	2300      	movs	r3, #0
 80110d4:	6822      	ldr	r2, [r4, #0]
 80110d6:	6063      	str	r3, [r4, #4]
 80110d8:	7013      	strb	r3, [r2, #0]
 80110da:	4628      	mov	r0, r5
 80110dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110de:	6023      	str	r3, [r4, #0]
 80110e0:	e7f7      	b.n	80110d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 80110e2:	f7ff ff48 	bl	8010f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80110e6:	e7f4      	b.n	80110d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

080110e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 80110e8:	6840      	ldr	r0, [r0, #4]
 80110ea:	4770      	bx	lr

080110ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 80110ec:	6840      	ldr	r0, [r0, #4]
 80110ee:	4770      	bx	lr

080110f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80110f0:	6840      	ldr	r0, [r0, #4]
 80110f2:	fab0 f080 	clz	r0, r0
 80110f6:	0940      	lsrs	r0, r0, #5
 80110f8:	4770      	bx	lr

080110fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80110fa:	6800      	ldr	r0, [r0, #0]
 80110fc:	4408      	add	r0, r1
 80110fe:	4770      	bx	lr

08011100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8011100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011102:	6802      	ldr	r2, [r0, #0]
 8011104:	f100 0308 	add.w	r3, r0, #8
 8011108:	429a      	cmp	r2, r3
 801110a:	bf08      	it	eq
 801110c:	230f      	moveq	r3, #15
 801110e:	6846      	ldr	r6, [r0, #4]
 8011110:	bf18      	it	ne
 8011112:	6883      	ldrne	r3, [r0, #8]
 8011114:	1c75      	adds	r5, r6, #1
 8011116:	429d      	cmp	r5, r3
 8011118:	4604      	mov	r4, r0
 801111a:	460f      	mov	r7, r1
 801111c:	d906      	bls.n	801112c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 801111e:	2301      	movs	r3, #1
 8011120:	9300      	str	r3, [sp, #0]
 8011122:	2300      	movs	r3, #0
 8011124:	4631      	mov	r1, r6
 8011126:	461a      	mov	r2, r3
 8011128:	f7ff ff4d 	bl	8010fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801112c:	2200      	movs	r2, #0
 801112e:	6823      	ldr	r3, [r4, #0]
 8011130:	559f      	strb	r7, [r3, r6]
 8011132:	6823      	ldr	r3, [r4, #0]
 8011134:	6065      	str	r5, [r4, #4]
 8011136:	555a      	strb	r2, [r3, r5]
 8011138:	b003      	add	sp, #12
 801113a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801113c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 801113c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011140:	4614      	mov	r4, r2
 8011142:	4681      	mov	r9, r0
 8011144:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011146:	460f      	mov	r7, r1
 8011148:	462a      	mov	r2, r5
 801114a:	4698      	mov	r8, r3
 801114c:	4621      	mov	r1, r4
 801114e:	4b37      	ldr	r3, [pc, #220]	; (801122c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8011150:	f7ff feda 	bl	8010f08 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8011154:	464a      	mov	r2, r9
 8011156:	f852 6b08 	ldr.w	r6, [r2], #8
 801115a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801115e:	4296      	cmp	r6, r2
 8011160:	bf08      	it	eq
 8011162:	220f      	moveq	r2, #15
 8011164:	eba5 0b04 	sub.w	fp, r5, r4
 8011168:	bf18      	it	ne
 801116a:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 801116e:	eb03 0a0b 	add.w	sl, r3, fp
 8011172:	4552      	cmp	r2, sl
 8011174:	d34e      	bcc.n	8011214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 8011176:	443e      	add	r6, r7
 8011178:	4641      	mov	r1, r8
 801117a:	1bdf      	subs	r7, r3, r7
 801117c:	4648      	mov	r0, r9
 801117e:	1b3f      	subs	r7, r7, r4
 8011180:	f7ff fece 	bl	8010f20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8011184:	b170      	cbz	r0, 80111a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8011186:	b137      	cbz	r7, 8011196 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8011188:	42ac      	cmp	r4, r5
 801118a:	d004      	beq.n	8011196 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 801118c:	463a      	mov	r2, r7
 801118e:	1931      	adds	r1, r6, r4
 8011190:	1970      	adds	r0, r6, r5
 8011192:	f7ff feda 	bl	8010f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011196:	b30d      	cbz	r5, 80111dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8011198:	462a      	mov	r2, r5
 801119a:	4641      	mov	r1, r8
 801119c:	4630      	mov	r0, r6
 801119e:	f7ff fecb 	bl	8010f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80111a2:	e01b      	b.n	80111dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80111a4:	b135      	cbz	r5, 80111b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 80111a6:	42ac      	cmp	r4, r5
 80111a8:	d33c      	bcc.n	8011224 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 80111aa:	462a      	mov	r2, r5
 80111ac:	4641      	mov	r1, r8
 80111ae:	4630      	mov	r0, r6
 80111b0:	f7ff fecb 	bl	8010f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80111b4:	b197      	cbz	r7, 80111dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80111b6:	42ac      	cmp	r4, r5
 80111b8:	d010      	beq.n	80111dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80111ba:	463a      	mov	r2, r7
 80111bc:	1931      	adds	r1, r6, r4
 80111be:	1970      	adds	r0, r6, r5
 80111c0:	f7ff fec3 	bl	8010f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80111c4:	42ac      	cmp	r4, r5
 80111c6:	d209      	bcs.n	80111dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80111c8:	4434      	add	r4, r6
 80111ca:	eb08 0305 	add.w	r3, r8, r5
 80111ce:	429c      	cmp	r4, r3
 80111d0:	d30f      	bcc.n	80111f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80111d2:	462a      	mov	r2, r5
 80111d4:	4641      	mov	r1, r8
 80111d6:	4630      	mov	r0, r6
 80111d8:	f7ff feb7 	bl	8010f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80111dc:	2200      	movs	r2, #0
 80111de:	4648      	mov	r0, r9
 80111e0:	f8d9 3000 	ldr.w	r3, [r9]
 80111e4:	f8c9 a004 	str.w	sl, [r9, #4]
 80111e8:	f803 200a 	strb.w	r2, [r3, sl]
 80111ec:	b003      	add	sp, #12
 80111ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f2:	4544      	cmp	r4, r8
 80111f4:	d803      	bhi.n	80111fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 80111f6:	462a      	mov	r2, r5
 80111f8:	eb08 010b 	add.w	r1, r8, fp
 80111fc:	e7ce      	b.n	801119c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80111fe:	eba4 0408 	sub.w	r4, r4, r8
 8011202:	4622      	mov	r2, r4
 8011204:	4641      	mov	r1, r8
 8011206:	4630      	mov	r0, r6
 8011208:	f7ff fe9f 	bl	8010f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801120c:	1b2a      	subs	r2, r5, r4
 801120e:	1971      	adds	r1, r6, r5
 8011210:	1930      	adds	r0, r6, r4
 8011212:	e7c4      	b.n	801119e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8011214:	9500      	str	r5, [sp, #0]
 8011216:	4643      	mov	r3, r8
 8011218:	4622      	mov	r2, r4
 801121a:	4639      	mov	r1, r7
 801121c:	4648      	mov	r0, r9
 801121e:	f7ff fed2 	bl	8010fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8011222:	e7db      	b.n	80111dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8011224:	2f00      	cmp	r7, #0
 8011226:	d0cf      	beq.n	80111c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8011228:	e7c7      	b.n	80111ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 801122a:	bf00      	nop
 801122c:	080153bb 	.word	0x080153bb

08011230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8011230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011232:	4604      	mov	r4, r0
 8011234:	4608      	mov	r0, r1
 8011236:	460d      	mov	r5, r1
 8011238:	f7ee ff8a 	bl	8000150 <strlen>
 801123c:	462b      	mov	r3, r5
 801123e:	9000      	str	r0, [sp, #0]
 8011240:	6862      	ldr	r2, [r4, #4]
 8011242:	2100      	movs	r1, #0
 8011244:	4620      	mov	r0, r4
 8011246:	f7ff ff79 	bl	801113c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801124a:	b003      	add	sp, #12
 801124c:	bd30      	pop	{r4, r5, pc}

0801124e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 801124e:	b508      	push	{r3, lr}
 8011250:	f7ff ffee 	bl	8011230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8011254:	bd08      	pop	{r3, pc}
	...

08011258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8011258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801125a:	4604      	mov	r4, r0
 801125c:	460f      	mov	r7, r1
 801125e:	4615      	mov	r5, r2
 8011260:	4a08      	ldr	r2, [pc, #32]	; (8011284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8011262:	461e      	mov	r6, r3
 8011264:	f7ff fe42 	bl	8010eec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8011268:	6862      	ldr	r2, [r4, #4]
 801126a:	9b08      	ldr	r3, [sp, #32]
 801126c:	1bd2      	subs	r2, r2, r7
 801126e:	42aa      	cmp	r2, r5
 8011270:	9300      	str	r3, [sp, #0]
 8011272:	4601      	mov	r1, r0
 8011274:	4633      	mov	r3, r6
 8011276:	bf28      	it	cs
 8011278:	462a      	movcs	r2, r5
 801127a:	4620      	mov	r0, r4
 801127c:	f7ff ff5e 	bl	801113c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8011280:	b003      	add	sp, #12
 8011282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011284:	08015413 	.word	0x08015413

08011288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8011288:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801128a:	4605      	mov	r5, r0
 801128c:	4610      	mov	r0, r2
 801128e:	4614      	mov	r4, r2
 8011290:	460e      	mov	r6, r1
 8011292:	f7ee ff5d 	bl	8000150 <strlen>
 8011296:	4623      	mov	r3, r4
 8011298:	9000      	str	r0, [sp, #0]
 801129a:	2200      	movs	r2, #0
 801129c:	4631      	mov	r1, r6
 801129e:	4628      	mov	r0, r5
 80112a0:	f7ff ffda 	bl	8011258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80112a4:	b002      	add	sp, #8
 80112a6:	bd70      	pop	{r4, r5, r6, pc}

080112a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80112a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112aa:	4604      	mov	r4, r0
 80112ac:	4626      	mov	r6, r4
 80112ae:	f856 3b08 	ldr.w	r3, [r6], #8
 80112b2:	6840      	ldr	r0, [r0, #4]
 80112b4:	42b3      	cmp	r3, r6
 80112b6:	bf0c      	ite	eq
 80112b8:	260f      	moveq	r6, #15
 80112ba:	68a6      	ldrne	r6, [r4, #8]
 80112bc:	1885      	adds	r5, r0, r2
 80112be:	42b5      	cmp	r5, r6
 80112c0:	d80a      	bhi.n	80112d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 80112c2:	b112      	cbz	r2, 80112ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 80112c4:	4418      	add	r0, r3
 80112c6:	f7ff fe37 	bl	8010f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80112ca:	2200      	movs	r2, #0
 80112cc:	4620      	mov	r0, r4
 80112ce:	6823      	ldr	r3, [r4, #0]
 80112d0:	6065      	str	r5, [r4, #4]
 80112d2:	555a      	strb	r2, [r3, r5]
 80112d4:	b002      	add	sp, #8
 80112d6:	bd70      	pop	{r4, r5, r6, pc}
 80112d8:	9200      	str	r2, [sp, #0]
 80112da:	460b      	mov	r3, r1
 80112dc:	2200      	movs	r2, #0
 80112de:	4601      	mov	r1, r0
 80112e0:	4620      	mov	r0, r4
 80112e2:	f7ff fe70 	bl	8010fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80112e6:	e7f0      	b.n	80112ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

080112e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 80112e8:	b508      	push	{r3, lr}
 80112ea:	e9d1 1200 	ldrd	r1, r2, [r1]
 80112ee:	f7ff ffdb 	bl	80112a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80112f2:	bd08      	pop	{r3, pc}

080112f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80112f4:	b570      	push	{r4, r5, r6, lr}
 80112f6:	4604      	mov	r4, r0
 80112f8:	4608      	mov	r0, r1
 80112fa:	460d      	mov	r5, r1
 80112fc:	f7ee ff28 	bl	8000150 <strlen>
 8011300:	4606      	mov	r6, r0
 8011302:	4602      	mov	r2, r0
 8011304:	4b05      	ldr	r3, [pc, #20]	; (801131c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8011306:	4620      	mov	r0, r4
 8011308:	2100      	movs	r1, #0
 801130a:	f7ff fdfd 	bl	8010f08 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801130e:	4632      	mov	r2, r6
 8011310:	4629      	mov	r1, r5
 8011312:	4620      	mov	r0, r4
 8011314:	f7ff ffc8 	bl	80112a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8011318:	bd70      	pop	{r4, r5, r6, pc}
 801131a:	bf00      	nop
 801131c:	080153fe 	.word	0x080153fe

08011320 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8011320:	6800      	ldr	r0, [r0, #0]
 8011322:	4770      	bx	lr

08011324 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8011324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011326:	4606      	mov	r6, r0
 8011328:	6845      	ldr	r5, [r0, #4]
 801132a:	4608      	mov	r0, r1
 801132c:	460f      	mov	r7, r1
 801132e:	f7ee ff0f 	bl	8000150 <strlen>
 8011332:	4285      	cmp	r5, r0
 8011334:	4604      	mov	r4, r0
 8011336:	462a      	mov	r2, r5
 8011338:	4639      	mov	r1, r7
 801133a:	bf28      	it	cs
 801133c:	4602      	movcs	r2, r0
 801133e:	6830      	ldr	r0, [r6, #0]
 8011340:	f7ff fd9c 	bl	8010e7c <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8011344:	b900      	cbnz	r0, 8011348 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8011346:	1b28      	subs	r0, r5, r4
 8011348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801134a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 801134a:	6001      	str	r1, [r0, #0]
 801134c:	4770      	bx	lr

0801134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801134e:	b510      	push	{r4, lr}
 8011350:	4604      	mov	r4, r0
 8011352:	f100 0208 	add.w	r2, r0, #8
 8011356:	6002      	str	r2, [r0, #0]
 8011358:	e9d1 1200 	ldrd	r1, r2, [r1]
 801135c:	f04f 0300 	mov.w	r3, #0
 8011360:	440a      	add	r2, r1
 8011362:	f7f2 fe81 	bl	8004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8011366:	4620      	mov	r0, r4
 8011368:	bd10      	pop	{r4, pc}
	...

0801136c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801136c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801136e:	4604      	mov	r4, r0
 8011370:	4616      	mov	r6, r2
 8011372:	460d      	mov	r5, r1
 8011374:	b919      	cbnz	r1, 801137e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8011376:	b112      	cbz	r2, 801137e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8011378:	480d      	ldr	r0, [pc, #52]	; (80113b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801137a:	f7ff fd58 	bl	8010e2e <_ZSt19__throw_logic_errorPKc>
 801137e:	1b73      	subs	r3, r6, r5
 8011380:	2b0f      	cmp	r3, #15
 8011382:	9301      	str	r3, [sp, #4]
 8011384:	d907      	bls.n	8011396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8011386:	2200      	movs	r2, #0
 8011388:	a901      	add	r1, sp, #4
 801138a:	4620      	mov	r0, r4
 801138c:	f7ff fd8c 	bl	8010ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011390:	9b01      	ldr	r3, [sp, #4]
 8011392:	6020      	str	r0, [r4, #0]
 8011394:	60a3      	str	r3, [r4, #8]
 8011396:	4632      	mov	r2, r6
 8011398:	4629      	mov	r1, r5
 801139a:	6820      	ldr	r0, [r4, #0]
 801139c:	f7ff fde6 	bl	8010f6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80113a0:	2100      	movs	r1, #0
 80113a2:	9b01      	ldr	r3, [sp, #4]
 80113a4:	6822      	ldr	r2, [r4, #0]
 80113a6:	6063      	str	r3, [r4, #4]
 80113a8:	54d1      	strb	r1, [r2, r3]
 80113aa:	b002      	add	sp, #8
 80113ac:	bd70      	pop	{r4, r5, r6, pc}
 80113ae:	bf00      	nop
 80113b0:	080153d4 	.word	0x080153d4

080113b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80113b4:	b538      	push	{r3, r4, r5, lr}
 80113b6:	f100 0308 	add.w	r3, r0, #8
 80113ba:	4604      	mov	r4, r0
 80113bc:	6003      	str	r3, [r0, #0]
 80113be:	460d      	mov	r5, r1
 80113c0:	b159      	cbz	r1, 80113da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80113c2:	4608      	mov	r0, r1
 80113c4:	f7ee fec4 	bl	8000150 <strlen>
 80113c8:	182a      	adds	r2, r5, r0
 80113ca:	4620      	mov	r0, r4
 80113cc:	f04f 0300 	mov.w	r3, #0
 80113d0:	4629      	mov	r1, r5
 80113d2:	f7ff ffcb 	bl	801136c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80113d6:	4620      	mov	r0, r4
 80113d8:	bd38      	pop	{r3, r4, r5, pc}
 80113da:	f04f 32ff 	mov.w	r2, #4294967295
 80113de:	e7f4      	b.n	80113ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080113e0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b09c      	sub	sp, #112	; 0x70
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	1a0e      	subs	r6, r1, r0
 80113e8:	4680      	mov	r8, r0
 80113ea:	2269      	movs	r2, #105	; 0x69
 80113ec:	490e      	ldr	r1, [pc, #56]	; (8011428 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80113ee:	1d38      	adds	r0, r7, #4
 80113f0:	f000 f909 	bl	8011606 <memcpy>
 80113f4:	f106 0377 	add.w	r3, r6, #119	; 0x77
 80113f8:	f023 0307 	bic.w	r3, r3, #7
 80113fc:	ebad 0d03 	sub.w	sp, sp, r3
 8011400:	466c      	mov	r4, sp
 8011402:	2268      	movs	r2, #104	; 0x68
 8011404:	1d39      	adds	r1, r7, #4
 8011406:	4620      	mov	r0, r4
 8011408:	f000 f8fd 	bl	8011606 <memcpy>
 801140c:	4632      	mov	r2, r6
 801140e:	4641      	mov	r1, r8
 8011410:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011414:	f000 f8f7 	bl	8011606 <memcpy>
 8011418:	2300      	movs	r3, #0
 801141a:	1c75      	adds	r5, r6, #1
 801141c:	4425      	add	r5, r4
 801141e:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8011422:	4620      	mov	r0, r4
 8011424:	f7ff fd03 	bl	8010e2e <_ZSt19__throw_logic_errorPKc>
 8011428:	0801544c 	.word	0x0801544c

0801142c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 801142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801142e:	af00      	add	r7, sp, #0
 8011430:	b086      	sub	sp, #24
 8011432:	466d      	mov	r5, sp
 8011434:	f105 040c 	add.w	r4, r5, #12
 8011438:	4623      	mov	r3, r4
 801143a:	f04f 0c0a 	mov.w	ip, #10
 801143e:	f8df e038 	ldr.w	lr, [pc, #56]	; 8011478 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8011442:	fbb2 f6fc 	udiv	r6, r2, ip
 8011446:	fb0c 2216 	mls	r2, ip, r6, r2
 801144a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801144e:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8011452:	4632      	mov	r2, r6
 8011454:	2e00      	cmp	r6, #0
 8011456:	d1f4      	bne.n	8011442 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8011458:	1ae4      	subs	r4, r4, r3
 801145a:	428c      	cmp	r4, r1
 801145c:	d808      	bhi.n	8011470 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801145e:	f1c4 010c 	rsb	r1, r4, #12
 8011462:	4622      	mov	r2, r4
 8011464:	4429      	add	r1, r5
 8011466:	f000 f8ce 	bl	8011606 <memcpy>
 801146a:	4620      	mov	r0, r4
 801146c:	46bd      	mov	sp, r7
 801146e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011470:	f04f 34ff 	mov.w	r4, #4294967295
 8011474:	e7f9      	b.n	801146a <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8011476:	bf00      	nop
 8011478:	08015441 	.word	0x08015441

0801147c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 801147c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011480:	4606      	mov	r6, r0
 8011482:	4615      	mov	r5, r2
 8011484:	4604      	mov	r4, r0
 8011486:	3901      	subs	r1, #1
 8011488:	1847      	adds	r7, r0, r1
 801148a:	782a      	ldrb	r2, [r5, #0]
 801148c:	b39a      	cbz	r2, 80114f6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 801148e:	42bc      	cmp	r4, r7
 8011490:	d22d      	bcs.n	80114ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8011492:	2a25      	cmp	r2, #37	; 0x25
 8011494:	d107      	bne.n	80114a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8011496:	786a      	ldrb	r2, [r5, #1]
 8011498:	2a73      	cmp	r2, #115	; 0x73
 801149a:	d00a      	beq.n	80114b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 801149c:	2a7a      	cmp	r2, #122	; 0x7a
 801149e:	d013      	beq.n	80114c8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80114a0:	2a25      	cmp	r2, #37	; 0x25
 80114a2:	d100      	bne.n	80114a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80114a4:	3501      	adds	r5, #1
 80114a6:	782a      	ldrb	r2, [r5, #0]
 80114a8:	3401      	adds	r4, #1
 80114aa:	f804 2c01 	strb.w	r2, [r4, #-1]
 80114ae:	3501      	adds	r5, #1
 80114b0:	e7eb      	b.n	801148a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80114b2:	1d19      	adds	r1, r3, #4
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	3b01      	subs	r3, #1
 80114b8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80114bc:	b1a2      	cbz	r2, 80114e8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 80114be:	42bc      	cmp	r4, r7
 80114c0:	d015      	beq.n	80114ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80114c2:	f804 2b01 	strb.w	r2, [r4], #1
 80114c6:	e7f7      	b.n	80114b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80114c8:	78aa      	ldrb	r2, [r5, #2]
 80114ca:	2a75      	cmp	r2, #117	; 0x75
 80114cc:	d1eb      	bne.n	80114a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80114ce:	681a      	ldr	r2, [r3, #0]
 80114d0:	1b39      	subs	r1, r7, r4
 80114d2:	4620      	mov	r0, r4
 80114d4:	f103 0804 	add.w	r8, r3, #4
 80114d8:	f7ff ffa8 	bl	801142c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80114dc:	2800      	cmp	r0, #0
 80114de:	dd06      	ble.n	80114ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80114e0:	4404      	add	r4, r0
 80114e2:	3503      	adds	r5, #3
 80114e4:	4643      	mov	r3, r8
 80114e6:	e7d0      	b.n	801148a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80114e8:	3502      	adds	r5, #2
 80114ea:	460b      	mov	r3, r1
 80114ec:	e7cd      	b.n	801148a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80114ee:	4621      	mov	r1, r4
 80114f0:	4630      	mov	r0, r6
 80114f2:	f7ff ff75 	bl	80113e0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80114f6:	7022      	strb	r2, [r4, #0]
 80114f8:	1ba0      	subs	r0, r4, r6
 80114fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011500 <roundf>:
 8011500:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011504:	3b7f      	subs	r3, #127	; 0x7f
 8011506:	2b16      	cmp	r3, #22
 8011508:	b510      	push	{r4, lr}
 801150a:	4601      	mov	r1, r0
 801150c:	dc14      	bgt.n	8011538 <roundf+0x38>
 801150e:	2b00      	cmp	r3, #0
 8011510:	da07      	bge.n	8011522 <roundf+0x22>
 8011512:	3301      	adds	r3, #1
 8011514:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8011518:	d101      	bne.n	801151e <roundf+0x1e>
 801151a:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 801151e:	4608      	mov	r0, r1
 8011520:	bd10      	pop	{r4, pc}
 8011522:	4a08      	ldr	r2, [pc, #32]	; (8011544 <roundf+0x44>)
 8011524:	411a      	asrs	r2, r3
 8011526:	4210      	tst	r0, r2
 8011528:	d0f9      	beq.n	801151e <roundf+0x1e>
 801152a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801152e:	4119      	asrs	r1, r3
 8011530:	4401      	add	r1, r0
 8011532:	ea21 0102 	bic.w	r1, r1, r2
 8011536:	e7f2      	b.n	801151e <roundf+0x1e>
 8011538:	2b80      	cmp	r3, #128	; 0x80
 801153a:	d1f0      	bne.n	801151e <roundf+0x1e>
 801153c:	f7ef fa34 	bl	80009a8 <__addsf3>
 8011540:	4601      	mov	r1, r0
 8011542:	e7ec      	b.n	801151e <roundf+0x1e>
 8011544:	007fffff 	.word	0x007fffff

08011548 <abort>:
 8011548:	b508      	push	{r3, lr}
 801154a:	2006      	movs	r0, #6
 801154c:	f000 f966 	bl	801181c <raise>
 8011550:	2001      	movs	r0, #1
 8011552:	f7fa f9ae 	bl	800b8b2 <_exit>
	...

08011558 <__errno>:
 8011558:	4b01      	ldr	r3, [pc, #4]	; (8011560 <__errno+0x8>)
 801155a:	6818      	ldr	r0, [r3, #0]
 801155c:	4770      	bx	lr
 801155e:	bf00      	nop
 8011560:	200000a8 	.word	0x200000a8

08011564 <__libc_init_array>:
 8011564:	b570      	push	{r4, r5, r6, lr}
 8011566:	2500      	movs	r5, #0
 8011568:	4e0c      	ldr	r6, [pc, #48]	; (801159c <__libc_init_array+0x38>)
 801156a:	4c0d      	ldr	r4, [pc, #52]	; (80115a0 <__libc_init_array+0x3c>)
 801156c:	1ba4      	subs	r4, r4, r6
 801156e:	10a4      	asrs	r4, r4, #2
 8011570:	42a5      	cmp	r5, r4
 8011572:	d109      	bne.n	8011588 <__libc_init_array+0x24>
 8011574:	f000 fd9a 	bl	80120ac <_init>
 8011578:	2500      	movs	r5, #0
 801157a:	4e0a      	ldr	r6, [pc, #40]	; (80115a4 <__libc_init_array+0x40>)
 801157c:	4c0a      	ldr	r4, [pc, #40]	; (80115a8 <__libc_init_array+0x44>)
 801157e:	1ba4      	subs	r4, r4, r6
 8011580:	10a4      	asrs	r4, r4, #2
 8011582:	42a5      	cmp	r5, r4
 8011584:	d105      	bne.n	8011592 <__libc_init_array+0x2e>
 8011586:	bd70      	pop	{r4, r5, r6, pc}
 8011588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801158c:	4798      	blx	r3
 801158e:	3501      	adds	r5, #1
 8011590:	e7ee      	b.n	8011570 <__libc_init_array+0xc>
 8011592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011596:	4798      	blx	r3
 8011598:	3501      	adds	r5, #1
 801159a:	e7f2      	b.n	8011582 <__libc_init_array+0x1e>
 801159c:	08015658 	.word	0x08015658
 80115a0:	08015658 	.word	0x08015658
 80115a4:	08015658 	.word	0x08015658
 80115a8:	0801565c 	.word	0x0801565c

080115ac <malloc>:
 80115ac:	4b02      	ldr	r3, [pc, #8]	; (80115b8 <malloc+0xc>)
 80115ae:	4601      	mov	r1, r0
 80115b0:	6818      	ldr	r0, [r3, #0]
 80115b2:	f000 b8a1 	b.w	80116f8 <_malloc_r>
 80115b6:	bf00      	nop
 80115b8:	200000a8 	.word	0x200000a8

080115bc <free>:
 80115bc:	4b02      	ldr	r3, [pc, #8]	; (80115c8 <free+0xc>)
 80115be:	4601      	mov	r1, r0
 80115c0:	6818      	ldr	r0, [r3, #0]
 80115c2:	f000 b84d 	b.w	8011660 <_free_r>
 80115c6:	bf00      	nop
 80115c8:	200000a8 	.word	0x200000a8

080115cc <memchr>:
 80115cc:	b510      	push	{r4, lr}
 80115ce:	b2c9      	uxtb	r1, r1
 80115d0:	4402      	add	r2, r0
 80115d2:	4290      	cmp	r0, r2
 80115d4:	4603      	mov	r3, r0
 80115d6:	d101      	bne.n	80115dc <memchr+0x10>
 80115d8:	2300      	movs	r3, #0
 80115da:	e003      	b.n	80115e4 <memchr+0x18>
 80115dc:	781c      	ldrb	r4, [r3, #0]
 80115de:	3001      	adds	r0, #1
 80115e0:	428c      	cmp	r4, r1
 80115e2:	d1f6      	bne.n	80115d2 <memchr+0x6>
 80115e4:	4618      	mov	r0, r3
 80115e6:	bd10      	pop	{r4, pc}

080115e8 <memcmp>:
 80115e8:	b530      	push	{r4, r5, lr}
 80115ea:	2400      	movs	r4, #0
 80115ec:	42a2      	cmp	r2, r4
 80115ee:	d101      	bne.n	80115f4 <memcmp+0xc>
 80115f0:	2000      	movs	r0, #0
 80115f2:	e007      	b.n	8011604 <memcmp+0x1c>
 80115f4:	5d03      	ldrb	r3, [r0, r4]
 80115f6:	3401      	adds	r4, #1
 80115f8:	190d      	adds	r5, r1, r4
 80115fa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80115fe:	42ab      	cmp	r3, r5
 8011600:	d0f4      	beq.n	80115ec <memcmp+0x4>
 8011602:	1b58      	subs	r0, r3, r5
 8011604:	bd30      	pop	{r4, r5, pc}

08011606 <memcpy>:
 8011606:	b510      	push	{r4, lr}
 8011608:	1e43      	subs	r3, r0, #1
 801160a:	440a      	add	r2, r1
 801160c:	4291      	cmp	r1, r2
 801160e:	d100      	bne.n	8011612 <memcpy+0xc>
 8011610:	bd10      	pop	{r4, pc}
 8011612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011616:	f803 4f01 	strb.w	r4, [r3, #1]!
 801161a:	e7f7      	b.n	801160c <memcpy+0x6>

0801161c <memmove>:
 801161c:	4288      	cmp	r0, r1
 801161e:	b510      	push	{r4, lr}
 8011620:	eb01 0302 	add.w	r3, r1, r2
 8011624:	d807      	bhi.n	8011636 <memmove+0x1a>
 8011626:	1e42      	subs	r2, r0, #1
 8011628:	4299      	cmp	r1, r3
 801162a:	d00a      	beq.n	8011642 <memmove+0x26>
 801162c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011630:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011634:	e7f8      	b.n	8011628 <memmove+0xc>
 8011636:	4283      	cmp	r3, r0
 8011638:	d9f5      	bls.n	8011626 <memmove+0xa>
 801163a:	1881      	adds	r1, r0, r2
 801163c:	1ad2      	subs	r2, r2, r3
 801163e:	42d3      	cmn	r3, r2
 8011640:	d100      	bne.n	8011644 <memmove+0x28>
 8011642:	bd10      	pop	{r4, pc}
 8011644:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011648:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801164c:	e7f7      	b.n	801163e <memmove+0x22>

0801164e <memset>:
 801164e:	4603      	mov	r3, r0
 8011650:	4402      	add	r2, r0
 8011652:	4293      	cmp	r3, r2
 8011654:	d100      	bne.n	8011658 <memset+0xa>
 8011656:	4770      	bx	lr
 8011658:	f803 1b01 	strb.w	r1, [r3], #1
 801165c:	e7f9      	b.n	8011652 <memset+0x4>
	...

08011660 <_free_r>:
 8011660:	b538      	push	{r3, r4, r5, lr}
 8011662:	4605      	mov	r5, r0
 8011664:	2900      	cmp	r1, #0
 8011666:	d043      	beq.n	80116f0 <_free_r+0x90>
 8011668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801166c:	1f0c      	subs	r4, r1, #4
 801166e:	2b00      	cmp	r3, #0
 8011670:	bfb8      	it	lt
 8011672:	18e4      	addlt	r4, r4, r3
 8011674:	f000 fa01 	bl	8011a7a <__malloc_lock>
 8011678:	4a1e      	ldr	r2, [pc, #120]	; (80116f4 <_free_r+0x94>)
 801167a:	6813      	ldr	r3, [r2, #0]
 801167c:	4610      	mov	r0, r2
 801167e:	b933      	cbnz	r3, 801168e <_free_r+0x2e>
 8011680:	6063      	str	r3, [r4, #4]
 8011682:	6014      	str	r4, [r2, #0]
 8011684:	4628      	mov	r0, r5
 8011686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801168a:	f000 b9f7 	b.w	8011a7c <__malloc_unlock>
 801168e:	42a3      	cmp	r3, r4
 8011690:	d90b      	bls.n	80116aa <_free_r+0x4a>
 8011692:	6821      	ldr	r1, [r4, #0]
 8011694:	1862      	adds	r2, r4, r1
 8011696:	4293      	cmp	r3, r2
 8011698:	bf01      	itttt	eq
 801169a:	681a      	ldreq	r2, [r3, #0]
 801169c:	685b      	ldreq	r3, [r3, #4]
 801169e:	1852      	addeq	r2, r2, r1
 80116a0:	6022      	streq	r2, [r4, #0]
 80116a2:	6063      	str	r3, [r4, #4]
 80116a4:	6004      	str	r4, [r0, #0]
 80116a6:	e7ed      	b.n	8011684 <_free_r+0x24>
 80116a8:	4613      	mov	r3, r2
 80116aa:	685a      	ldr	r2, [r3, #4]
 80116ac:	b10a      	cbz	r2, 80116b2 <_free_r+0x52>
 80116ae:	42a2      	cmp	r2, r4
 80116b0:	d9fa      	bls.n	80116a8 <_free_r+0x48>
 80116b2:	6819      	ldr	r1, [r3, #0]
 80116b4:	1858      	adds	r0, r3, r1
 80116b6:	42a0      	cmp	r0, r4
 80116b8:	d10b      	bne.n	80116d2 <_free_r+0x72>
 80116ba:	6820      	ldr	r0, [r4, #0]
 80116bc:	4401      	add	r1, r0
 80116be:	1858      	adds	r0, r3, r1
 80116c0:	4282      	cmp	r2, r0
 80116c2:	6019      	str	r1, [r3, #0]
 80116c4:	d1de      	bne.n	8011684 <_free_r+0x24>
 80116c6:	6810      	ldr	r0, [r2, #0]
 80116c8:	6852      	ldr	r2, [r2, #4]
 80116ca:	4401      	add	r1, r0
 80116cc:	6019      	str	r1, [r3, #0]
 80116ce:	605a      	str	r2, [r3, #4]
 80116d0:	e7d8      	b.n	8011684 <_free_r+0x24>
 80116d2:	d902      	bls.n	80116da <_free_r+0x7a>
 80116d4:	230c      	movs	r3, #12
 80116d6:	602b      	str	r3, [r5, #0]
 80116d8:	e7d4      	b.n	8011684 <_free_r+0x24>
 80116da:	6820      	ldr	r0, [r4, #0]
 80116dc:	1821      	adds	r1, r4, r0
 80116de:	428a      	cmp	r2, r1
 80116e0:	bf01      	itttt	eq
 80116e2:	6811      	ldreq	r1, [r2, #0]
 80116e4:	6852      	ldreq	r2, [r2, #4]
 80116e6:	1809      	addeq	r1, r1, r0
 80116e8:	6021      	streq	r1, [r4, #0]
 80116ea:	6062      	str	r2, [r4, #4]
 80116ec:	605c      	str	r4, [r3, #4]
 80116ee:	e7c9      	b.n	8011684 <_free_r+0x24>
 80116f0:	bd38      	pop	{r3, r4, r5, pc}
 80116f2:	bf00      	nop
 80116f4:	200006a0 	.word	0x200006a0

080116f8 <_malloc_r>:
 80116f8:	b570      	push	{r4, r5, r6, lr}
 80116fa:	1ccd      	adds	r5, r1, #3
 80116fc:	f025 0503 	bic.w	r5, r5, #3
 8011700:	3508      	adds	r5, #8
 8011702:	2d0c      	cmp	r5, #12
 8011704:	bf38      	it	cc
 8011706:	250c      	movcc	r5, #12
 8011708:	2d00      	cmp	r5, #0
 801170a:	4606      	mov	r6, r0
 801170c:	db01      	blt.n	8011712 <_malloc_r+0x1a>
 801170e:	42a9      	cmp	r1, r5
 8011710:	d903      	bls.n	801171a <_malloc_r+0x22>
 8011712:	230c      	movs	r3, #12
 8011714:	6033      	str	r3, [r6, #0]
 8011716:	2000      	movs	r0, #0
 8011718:	bd70      	pop	{r4, r5, r6, pc}
 801171a:	f000 f9ae 	bl	8011a7a <__malloc_lock>
 801171e:	4a21      	ldr	r2, [pc, #132]	; (80117a4 <_malloc_r+0xac>)
 8011720:	6814      	ldr	r4, [r2, #0]
 8011722:	4621      	mov	r1, r4
 8011724:	b991      	cbnz	r1, 801174c <_malloc_r+0x54>
 8011726:	4c20      	ldr	r4, [pc, #128]	; (80117a8 <_malloc_r+0xb0>)
 8011728:	6823      	ldr	r3, [r4, #0]
 801172a:	b91b      	cbnz	r3, 8011734 <_malloc_r+0x3c>
 801172c:	4630      	mov	r0, r6
 801172e:	f000 f83d 	bl	80117ac <_sbrk_r>
 8011732:	6020      	str	r0, [r4, #0]
 8011734:	4629      	mov	r1, r5
 8011736:	4630      	mov	r0, r6
 8011738:	f000 f838 	bl	80117ac <_sbrk_r>
 801173c:	1c43      	adds	r3, r0, #1
 801173e:	d124      	bne.n	801178a <_malloc_r+0x92>
 8011740:	230c      	movs	r3, #12
 8011742:	4630      	mov	r0, r6
 8011744:	6033      	str	r3, [r6, #0]
 8011746:	f000 f999 	bl	8011a7c <__malloc_unlock>
 801174a:	e7e4      	b.n	8011716 <_malloc_r+0x1e>
 801174c:	680b      	ldr	r3, [r1, #0]
 801174e:	1b5b      	subs	r3, r3, r5
 8011750:	d418      	bmi.n	8011784 <_malloc_r+0x8c>
 8011752:	2b0b      	cmp	r3, #11
 8011754:	d90f      	bls.n	8011776 <_malloc_r+0x7e>
 8011756:	600b      	str	r3, [r1, #0]
 8011758:	18cc      	adds	r4, r1, r3
 801175a:	50cd      	str	r5, [r1, r3]
 801175c:	4630      	mov	r0, r6
 801175e:	f000 f98d 	bl	8011a7c <__malloc_unlock>
 8011762:	f104 000b 	add.w	r0, r4, #11
 8011766:	1d23      	adds	r3, r4, #4
 8011768:	f020 0007 	bic.w	r0, r0, #7
 801176c:	1ac3      	subs	r3, r0, r3
 801176e:	d0d3      	beq.n	8011718 <_malloc_r+0x20>
 8011770:	425a      	negs	r2, r3
 8011772:	50e2      	str	r2, [r4, r3]
 8011774:	e7d0      	b.n	8011718 <_malloc_r+0x20>
 8011776:	684b      	ldr	r3, [r1, #4]
 8011778:	428c      	cmp	r4, r1
 801177a:	bf16      	itet	ne
 801177c:	6063      	strne	r3, [r4, #4]
 801177e:	6013      	streq	r3, [r2, #0]
 8011780:	460c      	movne	r4, r1
 8011782:	e7eb      	b.n	801175c <_malloc_r+0x64>
 8011784:	460c      	mov	r4, r1
 8011786:	6849      	ldr	r1, [r1, #4]
 8011788:	e7cc      	b.n	8011724 <_malloc_r+0x2c>
 801178a:	1cc4      	adds	r4, r0, #3
 801178c:	f024 0403 	bic.w	r4, r4, #3
 8011790:	42a0      	cmp	r0, r4
 8011792:	d005      	beq.n	80117a0 <_malloc_r+0xa8>
 8011794:	1a21      	subs	r1, r4, r0
 8011796:	4630      	mov	r0, r6
 8011798:	f000 f808 	bl	80117ac <_sbrk_r>
 801179c:	3001      	adds	r0, #1
 801179e:	d0cf      	beq.n	8011740 <_malloc_r+0x48>
 80117a0:	6025      	str	r5, [r4, #0]
 80117a2:	e7db      	b.n	801175c <_malloc_r+0x64>
 80117a4:	200006a0 	.word	0x200006a0
 80117a8:	200006a4 	.word	0x200006a4

080117ac <_sbrk_r>:
 80117ac:	b538      	push	{r3, r4, r5, lr}
 80117ae:	2300      	movs	r3, #0
 80117b0:	4c05      	ldr	r4, [pc, #20]	; (80117c8 <_sbrk_r+0x1c>)
 80117b2:	4605      	mov	r5, r0
 80117b4:	4608      	mov	r0, r1
 80117b6:	6023      	str	r3, [r4, #0]
 80117b8:	f7fa f886 	bl	800b8c8 <_sbrk>
 80117bc:	1c43      	adds	r3, r0, #1
 80117be:	d102      	bne.n	80117c6 <_sbrk_r+0x1a>
 80117c0:	6823      	ldr	r3, [r4, #0]
 80117c2:	b103      	cbz	r3, 80117c6 <_sbrk_r+0x1a>
 80117c4:	602b      	str	r3, [r5, #0]
 80117c6:	bd38      	pop	{r3, r4, r5, pc}
 80117c8:	20000828 	.word	0x20000828

080117cc <_raise_r>:
 80117cc:	291f      	cmp	r1, #31
 80117ce:	b538      	push	{r3, r4, r5, lr}
 80117d0:	4604      	mov	r4, r0
 80117d2:	460d      	mov	r5, r1
 80117d4:	d904      	bls.n	80117e0 <_raise_r+0x14>
 80117d6:	2316      	movs	r3, #22
 80117d8:	6003      	str	r3, [r0, #0]
 80117da:	f04f 30ff 	mov.w	r0, #4294967295
 80117de:	bd38      	pop	{r3, r4, r5, pc}
 80117e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80117e2:	b112      	cbz	r2, 80117ea <_raise_r+0x1e>
 80117e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80117e8:	b94b      	cbnz	r3, 80117fe <_raise_r+0x32>
 80117ea:	4620      	mov	r0, r4
 80117ec:	f000 f830 	bl	8011850 <_getpid_r>
 80117f0:	462a      	mov	r2, r5
 80117f2:	4601      	mov	r1, r0
 80117f4:	4620      	mov	r0, r4
 80117f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117fa:	f000 b817 	b.w	801182c <_kill_r>
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d00a      	beq.n	8011818 <_raise_r+0x4c>
 8011802:	1c59      	adds	r1, r3, #1
 8011804:	d103      	bne.n	801180e <_raise_r+0x42>
 8011806:	2316      	movs	r3, #22
 8011808:	6003      	str	r3, [r0, #0]
 801180a:	2001      	movs	r0, #1
 801180c:	e7e7      	b.n	80117de <_raise_r+0x12>
 801180e:	2400      	movs	r4, #0
 8011810:	4628      	mov	r0, r5
 8011812:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011816:	4798      	blx	r3
 8011818:	2000      	movs	r0, #0
 801181a:	e7e0      	b.n	80117de <_raise_r+0x12>

0801181c <raise>:
 801181c:	4b02      	ldr	r3, [pc, #8]	; (8011828 <raise+0xc>)
 801181e:	4601      	mov	r1, r0
 8011820:	6818      	ldr	r0, [r3, #0]
 8011822:	f7ff bfd3 	b.w	80117cc <_raise_r>
 8011826:	bf00      	nop
 8011828:	200000a8 	.word	0x200000a8

0801182c <_kill_r>:
 801182c:	b538      	push	{r3, r4, r5, lr}
 801182e:	2300      	movs	r3, #0
 8011830:	4c06      	ldr	r4, [pc, #24]	; (801184c <_kill_r+0x20>)
 8011832:	4605      	mov	r5, r0
 8011834:	4608      	mov	r0, r1
 8011836:	4611      	mov	r1, r2
 8011838:	6023      	str	r3, [r4, #0]
 801183a:	f7fa f82a 	bl	800b892 <_kill>
 801183e:	1c43      	adds	r3, r0, #1
 8011840:	d102      	bne.n	8011848 <_kill_r+0x1c>
 8011842:	6823      	ldr	r3, [r4, #0]
 8011844:	b103      	cbz	r3, 8011848 <_kill_r+0x1c>
 8011846:	602b      	str	r3, [r5, #0]
 8011848:	bd38      	pop	{r3, r4, r5, pc}
 801184a:	bf00      	nop
 801184c:	20000828 	.word	0x20000828

08011850 <_getpid_r>:
 8011850:	f7fa b818 	b.w	800b884 <_getpid>

08011854 <sniprintf>:
 8011854:	b40c      	push	{r2, r3}
 8011856:	b530      	push	{r4, r5, lr}
 8011858:	4b17      	ldr	r3, [pc, #92]	; (80118b8 <sniprintf+0x64>)
 801185a:	1e0c      	subs	r4, r1, #0
 801185c:	b09d      	sub	sp, #116	; 0x74
 801185e:	681d      	ldr	r5, [r3, #0]
 8011860:	da08      	bge.n	8011874 <sniprintf+0x20>
 8011862:	238b      	movs	r3, #139	; 0x8b
 8011864:	f04f 30ff 	mov.w	r0, #4294967295
 8011868:	602b      	str	r3, [r5, #0]
 801186a:	b01d      	add	sp, #116	; 0x74
 801186c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011870:	b002      	add	sp, #8
 8011872:	4770      	bx	lr
 8011874:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011878:	f8ad 3014 	strh.w	r3, [sp, #20]
 801187c:	bf0c      	ite	eq
 801187e:	4623      	moveq	r3, r4
 8011880:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011884:	9304      	str	r3, [sp, #16]
 8011886:	9307      	str	r3, [sp, #28]
 8011888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801188c:	9002      	str	r0, [sp, #8]
 801188e:	9006      	str	r0, [sp, #24]
 8011890:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011894:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011896:	ab21      	add	r3, sp, #132	; 0x84
 8011898:	a902      	add	r1, sp, #8
 801189a:	4628      	mov	r0, r5
 801189c:	9301      	str	r3, [sp, #4]
 801189e:	f000 f949 	bl	8011b34 <_svfiprintf_r>
 80118a2:	1c43      	adds	r3, r0, #1
 80118a4:	bfbc      	itt	lt
 80118a6:	238b      	movlt	r3, #139	; 0x8b
 80118a8:	602b      	strlt	r3, [r5, #0]
 80118aa:	2c00      	cmp	r4, #0
 80118ac:	d0dd      	beq.n	801186a <sniprintf+0x16>
 80118ae:	2200      	movs	r2, #0
 80118b0:	9b02      	ldr	r3, [sp, #8]
 80118b2:	701a      	strb	r2, [r3, #0]
 80118b4:	e7d9      	b.n	801186a <sniprintf+0x16>
 80118b6:	bf00      	nop
 80118b8:	200000a8 	.word	0x200000a8

080118bc <_strtoul_l.isra.0>:
 80118bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118c0:	4680      	mov	r8, r0
 80118c2:	4689      	mov	r9, r1
 80118c4:	4692      	mov	sl, r2
 80118c6:	461e      	mov	r6, r3
 80118c8:	460f      	mov	r7, r1
 80118ca:	463d      	mov	r5, r7
 80118cc:	9808      	ldr	r0, [sp, #32]
 80118ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118d2:	f000 f8bd 	bl	8011a50 <__locale_ctype_ptr_l>
 80118d6:	4420      	add	r0, r4
 80118d8:	7843      	ldrb	r3, [r0, #1]
 80118da:	f013 0308 	ands.w	r3, r3, #8
 80118de:	d130      	bne.n	8011942 <_strtoul_l.isra.0+0x86>
 80118e0:	2c2d      	cmp	r4, #45	; 0x2d
 80118e2:	d130      	bne.n	8011946 <_strtoul_l.isra.0+0x8a>
 80118e4:	2101      	movs	r1, #1
 80118e6:	787c      	ldrb	r4, [r7, #1]
 80118e8:	1cbd      	adds	r5, r7, #2
 80118ea:	2e00      	cmp	r6, #0
 80118ec:	d05c      	beq.n	80119a8 <_strtoul_l.isra.0+0xec>
 80118ee:	2e10      	cmp	r6, #16
 80118f0:	d109      	bne.n	8011906 <_strtoul_l.isra.0+0x4a>
 80118f2:	2c30      	cmp	r4, #48	; 0x30
 80118f4:	d107      	bne.n	8011906 <_strtoul_l.isra.0+0x4a>
 80118f6:	782b      	ldrb	r3, [r5, #0]
 80118f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80118fc:	2b58      	cmp	r3, #88	; 0x58
 80118fe:	d14e      	bne.n	801199e <_strtoul_l.isra.0+0xe2>
 8011900:	2610      	movs	r6, #16
 8011902:	786c      	ldrb	r4, [r5, #1]
 8011904:	3502      	adds	r5, #2
 8011906:	f04f 32ff 	mov.w	r2, #4294967295
 801190a:	fbb2 f2f6 	udiv	r2, r2, r6
 801190e:	2300      	movs	r3, #0
 8011910:	fb06 fc02 	mul.w	ip, r6, r2
 8011914:	4618      	mov	r0, r3
 8011916:	ea6f 0c0c 	mvn.w	ip, ip
 801191a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801191e:	2f09      	cmp	r7, #9
 8011920:	d817      	bhi.n	8011952 <_strtoul_l.isra.0+0x96>
 8011922:	463c      	mov	r4, r7
 8011924:	42a6      	cmp	r6, r4
 8011926:	dd23      	ble.n	8011970 <_strtoul_l.isra.0+0xb4>
 8011928:	2b00      	cmp	r3, #0
 801192a:	db1e      	blt.n	801196a <_strtoul_l.isra.0+0xae>
 801192c:	4282      	cmp	r2, r0
 801192e:	d31c      	bcc.n	801196a <_strtoul_l.isra.0+0xae>
 8011930:	d101      	bne.n	8011936 <_strtoul_l.isra.0+0x7a>
 8011932:	45a4      	cmp	ip, r4
 8011934:	db19      	blt.n	801196a <_strtoul_l.isra.0+0xae>
 8011936:	2301      	movs	r3, #1
 8011938:	fb00 4006 	mla	r0, r0, r6, r4
 801193c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011940:	e7eb      	b.n	801191a <_strtoul_l.isra.0+0x5e>
 8011942:	462f      	mov	r7, r5
 8011944:	e7c1      	b.n	80118ca <_strtoul_l.isra.0+0xe>
 8011946:	2c2b      	cmp	r4, #43	; 0x2b
 8011948:	bf04      	itt	eq
 801194a:	1cbd      	addeq	r5, r7, #2
 801194c:	787c      	ldrbeq	r4, [r7, #1]
 801194e:	4619      	mov	r1, r3
 8011950:	e7cb      	b.n	80118ea <_strtoul_l.isra.0+0x2e>
 8011952:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011956:	2f19      	cmp	r7, #25
 8011958:	d801      	bhi.n	801195e <_strtoul_l.isra.0+0xa2>
 801195a:	3c37      	subs	r4, #55	; 0x37
 801195c:	e7e2      	b.n	8011924 <_strtoul_l.isra.0+0x68>
 801195e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011962:	2f19      	cmp	r7, #25
 8011964:	d804      	bhi.n	8011970 <_strtoul_l.isra.0+0xb4>
 8011966:	3c57      	subs	r4, #87	; 0x57
 8011968:	e7dc      	b.n	8011924 <_strtoul_l.isra.0+0x68>
 801196a:	f04f 33ff 	mov.w	r3, #4294967295
 801196e:	e7e5      	b.n	801193c <_strtoul_l.isra.0+0x80>
 8011970:	2b00      	cmp	r3, #0
 8011972:	da09      	bge.n	8011988 <_strtoul_l.isra.0+0xcc>
 8011974:	2322      	movs	r3, #34	; 0x22
 8011976:	f04f 30ff 	mov.w	r0, #4294967295
 801197a:	f8c8 3000 	str.w	r3, [r8]
 801197e:	f1ba 0f00 	cmp.w	sl, #0
 8011982:	d107      	bne.n	8011994 <_strtoul_l.isra.0+0xd8>
 8011984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011988:	b101      	cbz	r1, 801198c <_strtoul_l.isra.0+0xd0>
 801198a:	4240      	negs	r0, r0
 801198c:	f1ba 0f00 	cmp.w	sl, #0
 8011990:	d0f8      	beq.n	8011984 <_strtoul_l.isra.0+0xc8>
 8011992:	b10b      	cbz	r3, 8011998 <_strtoul_l.isra.0+0xdc>
 8011994:	f105 39ff 	add.w	r9, r5, #4294967295
 8011998:	f8ca 9000 	str.w	r9, [sl]
 801199c:	e7f2      	b.n	8011984 <_strtoul_l.isra.0+0xc8>
 801199e:	2430      	movs	r4, #48	; 0x30
 80119a0:	2e00      	cmp	r6, #0
 80119a2:	d1b0      	bne.n	8011906 <_strtoul_l.isra.0+0x4a>
 80119a4:	2608      	movs	r6, #8
 80119a6:	e7ae      	b.n	8011906 <_strtoul_l.isra.0+0x4a>
 80119a8:	2c30      	cmp	r4, #48	; 0x30
 80119aa:	d0a4      	beq.n	80118f6 <_strtoul_l.isra.0+0x3a>
 80119ac:	260a      	movs	r6, #10
 80119ae:	e7aa      	b.n	8011906 <_strtoul_l.isra.0+0x4a>

080119b0 <strtoul>:
 80119b0:	4b08      	ldr	r3, [pc, #32]	; (80119d4 <strtoul+0x24>)
 80119b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119b4:	681c      	ldr	r4, [r3, #0]
 80119b6:	4d08      	ldr	r5, [pc, #32]	; (80119d8 <strtoul+0x28>)
 80119b8:	6a23      	ldr	r3, [r4, #32]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	bf08      	it	eq
 80119be:	462b      	moveq	r3, r5
 80119c0:	9300      	str	r3, [sp, #0]
 80119c2:	4613      	mov	r3, r2
 80119c4:	460a      	mov	r2, r1
 80119c6:	4601      	mov	r1, r0
 80119c8:	4620      	mov	r0, r4
 80119ca:	f7ff ff77 	bl	80118bc <_strtoul_l.isra.0>
 80119ce:	b003      	add	sp, #12
 80119d0:	bd30      	pop	{r4, r5, pc}
 80119d2:	bf00      	nop
 80119d4:	200000a8 	.word	0x200000a8
 80119d8:	2000010c 	.word	0x2000010c

080119dc <_vsniprintf_r>:
 80119dc:	b530      	push	{r4, r5, lr}
 80119de:	1e14      	subs	r4, r2, #0
 80119e0:	4605      	mov	r5, r0
 80119e2:	b09b      	sub	sp, #108	; 0x6c
 80119e4:	4618      	mov	r0, r3
 80119e6:	da05      	bge.n	80119f4 <_vsniprintf_r+0x18>
 80119e8:	238b      	movs	r3, #139	; 0x8b
 80119ea:	f04f 30ff 	mov.w	r0, #4294967295
 80119ee:	602b      	str	r3, [r5, #0]
 80119f0:	b01b      	add	sp, #108	; 0x6c
 80119f2:	bd30      	pop	{r4, r5, pc}
 80119f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80119f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80119fc:	bf0c      	ite	eq
 80119fe:	4623      	moveq	r3, r4
 8011a00:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011a04:	9302      	str	r3, [sp, #8]
 8011a06:	9305      	str	r3, [sp, #20]
 8011a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a0c:	9100      	str	r1, [sp, #0]
 8011a0e:	9104      	str	r1, [sp, #16]
 8011a10:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011a14:	4602      	mov	r2, r0
 8011a16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011a18:	4669      	mov	r1, sp
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	f000 f88a 	bl	8011b34 <_svfiprintf_r>
 8011a20:	1c43      	adds	r3, r0, #1
 8011a22:	bfbc      	itt	lt
 8011a24:	238b      	movlt	r3, #139	; 0x8b
 8011a26:	602b      	strlt	r3, [r5, #0]
 8011a28:	2c00      	cmp	r4, #0
 8011a2a:	d0e1      	beq.n	80119f0 <_vsniprintf_r+0x14>
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	9b00      	ldr	r3, [sp, #0]
 8011a30:	701a      	strb	r2, [r3, #0]
 8011a32:	e7dd      	b.n	80119f0 <_vsniprintf_r+0x14>

08011a34 <vsniprintf>:
 8011a34:	b507      	push	{r0, r1, r2, lr}
 8011a36:	9300      	str	r3, [sp, #0]
 8011a38:	4613      	mov	r3, r2
 8011a3a:	460a      	mov	r2, r1
 8011a3c:	4601      	mov	r1, r0
 8011a3e:	4803      	ldr	r0, [pc, #12]	; (8011a4c <vsniprintf+0x18>)
 8011a40:	6800      	ldr	r0, [r0, #0]
 8011a42:	f7ff ffcb 	bl	80119dc <_vsniprintf_r>
 8011a46:	b003      	add	sp, #12
 8011a48:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a4c:	200000a8 	.word	0x200000a8

08011a50 <__locale_ctype_ptr_l>:
 8011a50:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011a54:	4770      	bx	lr

08011a56 <__ascii_mbtowc>:
 8011a56:	b082      	sub	sp, #8
 8011a58:	b901      	cbnz	r1, 8011a5c <__ascii_mbtowc+0x6>
 8011a5a:	a901      	add	r1, sp, #4
 8011a5c:	b142      	cbz	r2, 8011a70 <__ascii_mbtowc+0x1a>
 8011a5e:	b14b      	cbz	r3, 8011a74 <__ascii_mbtowc+0x1e>
 8011a60:	7813      	ldrb	r3, [r2, #0]
 8011a62:	600b      	str	r3, [r1, #0]
 8011a64:	7812      	ldrb	r2, [r2, #0]
 8011a66:	1c10      	adds	r0, r2, #0
 8011a68:	bf18      	it	ne
 8011a6a:	2001      	movne	r0, #1
 8011a6c:	b002      	add	sp, #8
 8011a6e:	4770      	bx	lr
 8011a70:	4610      	mov	r0, r2
 8011a72:	e7fb      	b.n	8011a6c <__ascii_mbtowc+0x16>
 8011a74:	f06f 0001 	mvn.w	r0, #1
 8011a78:	e7f8      	b.n	8011a6c <__ascii_mbtowc+0x16>

08011a7a <__malloc_lock>:
 8011a7a:	4770      	bx	lr

08011a7c <__malloc_unlock>:
 8011a7c:	4770      	bx	lr

08011a7e <__ssputs_r>:
 8011a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a82:	688e      	ldr	r6, [r1, #8]
 8011a84:	4682      	mov	sl, r0
 8011a86:	429e      	cmp	r6, r3
 8011a88:	460c      	mov	r4, r1
 8011a8a:	4690      	mov	r8, r2
 8011a8c:	4699      	mov	r9, r3
 8011a8e:	d837      	bhi.n	8011b00 <__ssputs_r+0x82>
 8011a90:	898a      	ldrh	r2, [r1, #12]
 8011a92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011a96:	d031      	beq.n	8011afc <__ssputs_r+0x7e>
 8011a98:	2302      	movs	r3, #2
 8011a9a:	6825      	ldr	r5, [r4, #0]
 8011a9c:	6909      	ldr	r1, [r1, #16]
 8011a9e:	1a6f      	subs	r7, r5, r1
 8011aa0:	6965      	ldr	r5, [r4, #20]
 8011aa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011aa6:	fb95 f5f3 	sdiv	r5, r5, r3
 8011aaa:	f109 0301 	add.w	r3, r9, #1
 8011aae:	443b      	add	r3, r7
 8011ab0:	429d      	cmp	r5, r3
 8011ab2:	bf38      	it	cc
 8011ab4:	461d      	movcc	r5, r3
 8011ab6:	0553      	lsls	r3, r2, #21
 8011ab8:	d530      	bpl.n	8011b1c <__ssputs_r+0x9e>
 8011aba:	4629      	mov	r1, r5
 8011abc:	f7ff fe1c 	bl	80116f8 <_malloc_r>
 8011ac0:	4606      	mov	r6, r0
 8011ac2:	b950      	cbnz	r0, 8011ada <__ssputs_r+0x5c>
 8011ac4:	230c      	movs	r3, #12
 8011ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8011aca:	f8ca 3000 	str.w	r3, [sl]
 8011ace:	89a3      	ldrh	r3, [r4, #12]
 8011ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ad4:	81a3      	strh	r3, [r4, #12]
 8011ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ada:	463a      	mov	r2, r7
 8011adc:	6921      	ldr	r1, [r4, #16]
 8011ade:	f7ff fd92 	bl	8011606 <memcpy>
 8011ae2:	89a3      	ldrh	r3, [r4, #12]
 8011ae4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011aec:	81a3      	strh	r3, [r4, #12]
 8011aee:	6126      	str	r6, [r4, #16]
 8011af0:	443e      	add	r6, r7
 8011af2:	6026      	str	r6, [r4, #0]
 8011af4:	464e      	mov	r6, r9
 8011af6:	6165      	str	r5, [r4, #20]
 8011af8:	1bed      	subs	r5, r5, r7
 8011afa:	60a5      	str	r5, [r4, #8]
 8011afc:	454e      	cmp	r6, r9
 8011afe:	d900      	bls.n	8011b02 <__ssputs_r+0x84>
 8011b00:	464e      	mov	r6, r9
 8011b02:	4632      	mov	r2, r6
 8011b04:	4641      	mov	r1, r8
 8011b06:	6820      	ldr	r0, [r4, #0]
 8011b08:	f7ff fd88 	bl	801161c <memmove>
 8011b0c:	68a3      	ldr	r3, [r4, #8]
 8011b0e:	2000      	movs	r0, #0
 8011b10:	1b9b      	subs	r3, r3, r6
 8011b12:	60a3      	str	r3, [r4, #8]
 8011b14:	6823      	ldr	r3, [r4, #0]
 8011b16:	441e      	add	r6, r3
 8011b18:	6026      	str	r6, [r4, #0]
 8011b1a:	e7dc      	b.n	8011ad6 <__ssputs_r+0x58>
 8011b1c:	462a      	mov	r2, r5
 8011b1e:	f000 fa96 	bl	801204e <_realloc_r>
 8011b22:	4606      	mov	r6, r0
 8011b24:	2800      	cmp	r0, #0
 8011b26:	d1e2      	bne.n	8011aee <__ssputs_r+0x70>
 8011b28:	6921      	ldr	r1, [r4, #16]
 8011b2a:	4650      	mov	r0, sl
 8011b2c:	f7ff fd98 	bl	8011660 <_free_r>
 8011b30:	e7c8      	b.n	8011ac4 <__ssputs_r+0x46>
	...

08011b34 <_svfiprintf_r>:
 8011b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b38:	461d      	mov	r5, r3
 8011b3a:	898b      	ldrh	r3, [r1, #12]
 8011b3c:	b09d      	sub	sp, #116	; 0x74
 8011b3e:	061f      	lsls	r7, r3, #24
 8011b40:	4680      	mov	r8, r0
 8011b42:	460c      	mov	r4, r1
 8011b44:	4616      	mov	r6, r2
 8011b46:	d50f      	bpl.n	8011b68 <_svfiprintf_r+0x34>
 8011b48:	690b      	ldr	r3, [r1, #16]
 8011b4a:	b96b      	cbnz	r3, 8011b68 <_svfiprintf_r+0x34>
 8011b4c:	2140      	movs	r1, #64	; 0x40
 8011b4e:	f7ff fdd3 	bl	80116f8 <_malloc_r>
 8011b52:	6020      	str	r0, [r4, #0]
 8011b54:	6120      	str	r0, [r4, #16]
 8011b56:	b928      	cbnz	r0, 8011b64 <_svfiprintf_r+0x30>
 8011b58:	230c      	movs	r3, #12
 8011b5a:	f8c8 3000 	str.w	r3, [r8]
 8011b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8011b62:	e0c8      	b.n	8011cf6 <_svfiprintf_r+0x1c2>
 8011b64:	2340      	movs	r3, #64	; 0x40
 8011b66:	6163      	str	r3, [r4, #20]
 8011b68:	2300      	movs	r3, #0
 8011b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8011b6c:	2320      	movs	r3, #32
 8011b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b72:	2330      	movs	r3, #48	; 0x30
 8011b74:	f04f 0b01 	mov.w	fp, #1
 8011b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b7c:	9503      	str	r5, [sp, #12]
 8011b7e:	4637      	mov	r7, r6
 8011b80:	463d      	mov	r5, r7
 8011b82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011b86:	b10b      	cbz	r3, 8011b8c <_svfiprintf_r+0x58>
 8011b88:	2b25      	cmp	r3, #37	; 0x25
 8011b8a:	d13e      	bne.n	8011c0a <_svfiprintf_r+0xd6>
 8011b8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8011b90:	d00b      	beq.n	8011baa <_svfiprintf_r+0x76>
 8011b92:	4653      	mov	r3, sl
 8011b94:	4632      	mov	r2, r6
 8011b96:	4621      	mov	r1, r4
 8011b98:	4640      	mov	r0, r8
 8011b9a:	f7ff ff70 	bl	8011a7e <__ssputs_r>
 8011b9e:	3001      	adds	r0, #1
 8011ba0:	f000 80a4 	beq.w	8011cec <_svfiprintf_r+0x1b8>
 8011ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ba6:	4453      	add	r3, sl
 8011ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8011baa:	783b      	ldrb	r3, [r7, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	f000 809d 	beq.w	8011cec <_svfiprintf_r+0x1b8>
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8011bb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bbc:	9304      	str	r3, [sp, #16]
 8011bbe:	9307      	str	r3, [sp, #28]
 8011bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8011bc6:	462f      	mov	r7, r5
 8011bc8:	2205      	movs	r2, #5
 8011bca:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011bce:	4850      	ldr	r0, [pc, #320]	; (8011d10 <_svfiprintf_r+0x1dc>)
 8011bd0:	f7ff fcfc 	bl	80115cc <memchr>
 8011bd4:	9b04      	ldr	r3, [sp, #16]
 8011bd6:	b9d0      	cbnz	r0, 8011c0e <_svfiprintf_r+0xda>
 8011bd8:	06d9      	lsls	r1, r3, #27
 8011bda:	bf44      	itt	mi
 8011bdc:	2220      	movmi	r2, #32
 8011bde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011be2:	071a      	lsls	r2, r3, #28
 8011be4:	bf44      	itt	mi
 8011be6:	222b      	movmi	r2, #43	; 0x2b
 8011be8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011bec:	782a      	ldrb	r2, [r5, #0]
 8011bee:	2a2a      	cmp	r2, #42	; 0x2a
 8011bf0:	d015      	beq.n	8011c1e <_svfiprintf_r+0xea>
 8011bf2:	462f      	mov	r7, r5
 8011bf4:	2000      	movs	r0, #0
 8011bf6:	250a      	movs	r5, #10
 8011bf8:	9a07      	ldr	r2, [sp, #28]
 8011bfa:	4639      	mov	r1, r7
 8011bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c00:	3b30      	subs	r3, #48	; 0x30
 8011c02:	2b09      	cmp	r3, #9
 8011c04:	d94d      	bls.n	8011ca2 <_svfiprintf_r+0x16e>
 8011c06:	b1b8      	cbz	r0, 8011c38 <_svfiprintf_r+0x104>
 8011c08:	e00f      	b.n	8011c2a <_svfiprintf_r+0xf6>
 8011c0a:	462f      	mov	r7, r5
 8011c0c:	e7b8      	b.n	8011b80 <_svfiprintf_r+0x4c>
 8011c0e:	4a40      	ldr	r2, [pc, #256]	; (8011d10 <_svfiprintf_r+0x1dc>)
 8011c10:	463d      	mov	r5, r7
 8011c12:	1a80      	subs	r0, r0, r2
 8011c14:	fa0b f000 	lsl.w	r0, fp, r0
 8011c18:	4318      	orrs	r0, r3
 8011c1a:	9004      	str	r0, [sp, #16]
 8011c1c:	e7d3      	b.n	8011bc6 <_svfiprintf_r+0x92>
 8011c1e:	9a03      	ldr	r2, [sp, #12]
 8011c20:	1d11      	adds	r1, r2, #4
 8011c22:	6812      	ldr	r2, [r2, #0]
 8011c24:	9103      	str	r1, [sp, #12]
 8011c26:	2a00      	cmp	r2, #0
 8011c28:	db01      	blt.n	8011c2e <_svfiprintf_r+0xfa>
 8011c2a:	9207      	str	r2, [sp, #28]
 8011c2c:	e004      	b.n	8011c38 <_svfiprintf_r+0x104>
 8011c2e:	4252      	negs	r2, r2
 8011c30:	f043 0302 	orr.w	r3, r3, #2
 8011c34:	9207      	str	r2, [sp, #28]
 8011c36:	9304      	str	r3, [sp, #16]
 8011c38:	783b      	ldrb	r3, [r7, #0]
 8011c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8011c3c:	d10c      	bne.n	8011c58 <_svfiprintf_r+0x124>
 8011c3e:	787b      	ldrb	r3, [r7, #1]
 8011c40:	2b2a      	cmp	r3, #42	; 0x2a
 8011c42:	d133      	bne.n	8011cac <_svfiprintf_r+0x178>
 8011c44:	9b03      	ldr	r3, [sp, #12]
 8011c46:	3702      	adds	r7, #2
 8011c48:	1d1a      	adds	r2, r3, #4
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	9203      	str	r2, [sp, #12]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	bfb8      	it	lt
 8011c52:	f04f 33ff 	movlt.w	r3, #4294967295
 8011c56:	9305      	str	r3, [sp, #20]
 8011c58:	4d2e      	ldr	r5, [pc, #184]	; (8011d14 <_svfiprintf_r+0x1e0>)
 8011c5a:	2203      	movs	r2, #3
 8011c5c:	7839      	ldrb	r1, [r7, #0]
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f7ff fcb4 	bl	80115cc <memchr>
 8011c64:	b138      	cbz	r0, 8011c76 <_svfiprintf_r+0x142>
 8011c66:	2340      	movs	r3, #64	; 0x40
 8011c68:	1b40      	subs	r0, r0, r5
 8011c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8011c6e:	9b04      	ldr	r3, [sp, #16]
 8011c70:	3701      	adds	r7, #1
 8011c72:	4303      	orrs	r3, r0
 8011c74:	9304      	str	r3, [sp, #16]
 8011c76:	7839      	ldrb	r1, [r7, #0]
 8011c78:	2206      	movs	r2, #6
 8011c7a:	4827      	ldr	r0, [pc, #156]	; (8011d18 <_svfiprintf_r+0x1e4>)
 8011c7c:	1c7e      	adds	r6, r7, #1
 8011c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c82:	f7ff fca3 	bl	80115cc <memchr>
 8011c86:	2800      	cmp	r0, #0
 8011c88:	d038      	beq.n	8011cfc <_svfiprintf_r+0x1c8>
 8011c8a:	4b24      	ldr	r3, [pc, #144]	; (8011d1c <_svfiprintf_r+0x1e8>)
 8011c8c:	bb13      	cbnz	r3, 8011cd4 <_svfiprintf_r+0x1a0>
 8011c8e:	9b03      	ldr	r3, [sp, #12]
 8011c90:	3307      	adds	r3, #7
 8011c92:	f023 0307 	bic.w	r3, r3, #7
 8011c96:	3308      	adds	r3, #8
 8011c98:	9303      	str	r3, [sp, #12]
 8011c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c9c:	444b      	add	r3, r9
 8011c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8011ca0:	e76d      	b.n	8011b7e <_svfiprintf_r+0x4a>
 8011ca2:	fb05 3202 	mla	r2, r5, r2, r3
 8011ca6:	2001      	movs	r0, #1
 8011ca8:	460f      	mov	r7, r1
 8011caa:	e7a6      	b.n	8011bfa <_svfiprintf_r+0xc6>
 8011cac:	2300      	movs	r3, #0
 8011cae:	250a      	movs	r5, #10
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	3701      	adds	r7, #1
 8011cb4:	9305      	str	r3, [sp, #20]
 8011cb6:	4638      	mov	r0, r7
 8011cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cbc:	3a30      	subs	r2, #48	; 0x30
 8011cbe:	2a09      	cmp	r2, #9
 8011cc0:	d903      	bls.n	8011cca <_svfiprintf_r+0x196>
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d0c8      	beq.n	8011c58 <_svfiprintf_r+0x124>
 8011cc6:	9105      	str	r1, [sp, #20]
 8011cc8:	e7c6      	b.n	8011c58 <_svfiprintf_r+0x124>
 8011cca:	fb05 2101 	mla	r1, r5, r1, r2
 8011cce:	2301      	movs	r3, #1
 8011cd0:	4607      	mov	r7, r0
 8011cd2:	e7f0      	b.n	8011cb6 <_svfiprintf_r+0x182>
 8011cd4:	ab03      	add	r3, sp, #12
 8011cd6:	9300      	str	r3, [sp, #0]
 8011cd8:	4622      	mov	r2, r4
 8011cda:	4b11      	ldr	r3, [pc, #68]	; (8011d20 <_svfiprintf_r+0x1ec>)
 8011cdc:	a904      	add	r1, sp, #16
 8011cde:	4640      	mov	r0, r8
 8011ce0:	f3af 8000 	nop.w
 8011ce4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011ce8:	4681      	mov	r9, r0
 8011cea:	d1d6      	bne.n	8011c9a <_svfiprintf_r+0x166>
 8011cec:	89a3      	ldrh	r3, [r4, #12]
 8011cee:	065b      	lsls	r3, r3, #25
 8011cf0:	f53f af35 	bmi.w	8011b5e <_svfiprintf_r+0x2a>
 8011cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011cf6:	b01d      	add	sp, #116	; 0x74
 8011cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cfc:	ab03      	add	r3, sp, #12
 8011cfe:	9300      	str	r3, [sp, #0]
 8011d00:	4622      	mov	r2, r4
 8011d02:	4b07      	ldr	r3, [pc, #28]	; (8011d20 <_svfiprintf_r+0x1ec>)
 8011d04:	a904      	add	r1, sp, #16
 8011d06:	4640      	mov	r0, r8
 8011d08:	f000 f882 	bl	8011e10 <_printf_i>
 8011d0c:	e7ea      	b.n	8011ce4 <_svfiprintf_r+0x1b0>
 8011d0e:	bf00      	nop
 8011d10:	08015522 	.word	0x08015522
 8011d14:	08015528 	.word	0x08015528
 8011d18:	0801552c 	.word	0x0801552c
 8011d1c:	00000000 	.word	0x00000000
 8011d20:	08011a7f 	.word	0x08011a7f

08011d24 <_printf_common>:
 8011d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d28:	4691      	mov	r9, r2
 8011d2a:	461f      	mov	r7, r3
 8011d2c:	688a      	ldr	r2, [r1, #8]
 8011d2e:	690b      	ldr	r3, [r1, #16]
 8011d30:	4606      	mov	r6, r0
 8011d32:	4293      	cmp	r3, r2
 8011d34:	bfb8      	it	lt
 8011d36:	4613      	movlt	r3, r2
 8011d38:	f8c9 3000 	str.w	r3, [r9]
 8011d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011d40:	460c      	mov	r4, r1
 8011d42:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d46:	b112      	cbz	r2, 8011d4e <_printf_common+0x2a>
 8011d48:	3301      	adds	r3, #1
 8011d4a:	f8c9 3000 	str.w	r3, [r9]
 8011d4e:	6823      	ldr	r3, [r4, #0]
 8011d50:	0699      	lsls	r1, r3, #26
 8011d52:	bf42      	ittt	mi
 8011d54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011d58:	3302      	addmi	r3, #2
 8011d5a:	f8c9 3000 	strmi.w	r3, [r9]
 8011d5e:	6825      	ldr	r5, [r4, #0]
 8011d60:	f015 0506 	ands.w	r5, r5, #6
 8011d64:	d107      	bne.n	8011d76 <_printf_common+0x52>
 8011d66:	f104 0a19 	add.w	sl, r4, #25
 8011d6a:	68e3      	ldr	r3, [r4, #12]
 8011d6c:	f8d9 2000 	ldr.w	r2, [r9]
 8011d70:	1a9b      	subs	r3, r3, r2
 8011d72:	42ab      	cmp	r3, r5
 8011d74:	dc29      	bgt.n	8011dca <_printf_common+0xa6>
 8011d76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011d7a:	6822      	ldr	r2, [r4, #0]
 8011d7c:	3300      	adds	r3, #0
 8011d7e:	bf18      	it	ne
 8011d80:	2301      	movne	r3, #1
 8011d82:	0692      	lsls	r2, r2, #26
 8011d84:	d42e      	bmi.n	8011de4 <_printf_common+0xc0>
 8011d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d8a:	4639      	mov	r1, r7
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	47c0      	blx	r8
 8011d90:	3001      	adds	r0, #1
 8011d92:	d021      	beq.n	8011dd8 <_printf_common+0xb4>
 8011d94:	6823      	ldr	r3, [r4, #0]
 8011d96:	68e5      	ldr	r5, [r4, #12]
 8011d98:	f003 0306 	and.w	r3, r3, #6
 8011d9c:	2b04      	cmp	r3, #4
 8011d9e:	bf18      	it	ne
 8011da0:	2500      	movne	r5, #0
 8011da2:	f8d9 2000 	ldr.w	r2, [r9]
 8011da6:	f04f 0900 	mov.w	r9, #0
 8011daa:	bf08      	it	eq
 8011dac:	1aad      	subeq	r5, r5, r2
 8011dae:	68a3      	ldr	r3, [r4, #8]
 8011db0:	6922      	ldr	r2, [r4, #16]
 8011db2:	bf08      	it	eq
 8011db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011db8:	4293      	cmp	r3, r2
 8011dba:	bfc4      	itt	gt
 8011dbc:	1a9b      	subgt	r3, r3, r2
 8011dbe:	18ed      	addgt	r5, r5, r3
 8011dc0:	341a      	adds	r4, #26
 8011dc2:	454d      	cmp	r5, r9
 8011dc4:	d11a      	bne.n	8011dfc <_printf_common+0xd8>
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	e008      	b.n	8011ddc <_printf_common+0xb8>
 8011dca:	2301      	movs	r3, #1
 8011dcc:	4652      	mov	r2, sl
 8011dce:	4639      	mov	r1, r7
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	47c0      	blx	r8
 8011dd4:	3001      	adds	r0, #1
 8011dd6:	d103      	bne.n	8011de0 <_printf_common+0xbc>
 8011dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011de0:	3501      	adds	r5, #1
 8011de2:	e7c2      	b.n	8011d6a <_printf_common+0x46>
 8011de4:	2030      	movs	r0, #48	; 0x30
 8011de6:	18e1      	adds	r1, r4, r3
 8011de8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011dec:	1c5a      	adds	r2, r3, #1
 8011dee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011df2:	4422      	add	r2, r4
 8011df4:	3302      	adds	r3, #2
 8011df6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011dfa:	e7c4      	b.n	8011d86 <_printf_common+0x62>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	4622      	mov	r2, r4
 8011e00:	4639      	mov	r1, r7
 8011e02:	4630      	mov	r0, r6
 8011e04:	47c0      	blx	r8
 8011e06:	3001      	adds	r0, #1
 8011e08:	d0e6      	beq.n	8011dd8 <_printf_common+0xb4>
 8011e0a:	f109 0901 	add.w	r9, r9, #1
 8011e0e:	e7d8      	b.n	8011dc2 <_printf_common+0x9e>

08011e10 <_printf_i>:
 8011e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011e18:	460c      	mov	r4, r1
 8011e1a:	7e09      	ldrb	r1, [r1, #24]
 8011e1c:	b085      	sub	sp, #20
 8011e1e:	296e      	cmp	r1, #110	; 0x6e
 8011e20:	4617      	mov	r7, r2
 8011e22:	4606      	mov	r6, r0
 8011e24:	4698      	mov	r8, r3
 8011e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e28:	f000 80b3 	beq.w	8011f92 <_printf_i+0x182>
 8011e2c:	d822      	bhi.n	8011e74 <_printf_i+0x64>
 8011e2e:	2963      	cmp	r1, #99	; 0x63
 8011e30:	d036      	beq.n	8011ea0 <_printf_i+0x90>
 8011e32:	d80a      	bhi.n	8011e4a <_printf_i+0x3a>
 8011e34:	2900      	cmp	r1, #0
 8011e36:	f000 80b9 	beq.w	8011fac <_printf_i+0x19c>
 8011e3a:	2958      	cmp	r1, #88	; 0x58
 8011e3c:	f000 8083 	beq.w	8011f46 <_printf_i+0x136>
 8011e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011e48:	e032      	b.n	8011eb0 <_printf_i+0xa0>
 8011e4a:	2964      	cmp	r1, #100	; 0x64
 8011e4c:	d001      	beq.n	8011e52 <_printf_i+0x42>
 8011e4e:	2969      	cmp	r1, #105	; 0x69
 8011e50:	d1f6      	bne.n	8011e40 <_printf_i+0x30>
 8011e52:	6820      	ldr	r0, [r4, #0]
 8011e54:	6813      	ldr	r3, [r2, #0]
 8011e56:	0605      	lsls	r5, r0, #24
 8011e58:	f103 0104 	add.w	r1, r3, #4
 8011e5c:	d52a      	bpl.n	8011eb4 <_printf_i+0xa4>
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	6011      	str	r1, [r2, #0]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	da03      	bge.n	8011e6e <_printf_i+0x5e>
 8011e66:	222d      	movs	r2, #45	; 0x2d
 8011e68:	425b      	negs	r3, r3
 8011e6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011e6e:	486f      	ldr	r0, [pc, #444]	; (801202c <_printf_i+0x21c>)
 8011e70:	220a      	movs	r2, #10
 8011e72:	e039      	b.n	8011ee8 <_printf_i+0xd8>
 8011e74:	2973      	cmp	r1, #115	; 0x73
 8011e76:	f000 809d 	beq.w	8011fb4 <_printf_i+0x1a4>
 8011e7a:	d808      	bhi.n	8011e8e <_printf_i+0x7e>
 8011e7c:	296f      	cmp	r1, #111	; 0x6f
 8011e7e:	d020      	beq.n	8011ec2 <_printf_i+0xb2>
 8011e80:	2970      	cmp	r1, #112	; 0x70
 8011e82:	d1dd      	bne.n	8011e40 <_printf_i+0x30>
 8011e84:	6823      	ldr	r3, [r4, #0]
 8011e86:	f043 0320 	orr.w	r3, r3, #32
 8011e8a:	6023      	str	r3, [r4, #0]
 8011e8c:	e003      	b.n	8011e96 <_printf_i+0x86>
 8011e8e:	2975      	cmp	r1, #117	; 0x75
 8011e90:	d017      	beq.n	8011ec2 <_printf_i+0xb2>
 8011e92:	2978      	cmp	r1, #120	; 0x78
 8011e94:	d1d4      	bne.n	8011e40 <_printf_i+0x30>
 8011e96:	2378      	movs	r3, #120	; 0x78
 8011e98:	4865      	ldr	r0, [pc, #404]	; (8012030 <_printf_i+0x220>)
 8011e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011e9e:	e055      	b.n	8011f4c <_printf_i+0x13c>
 8011ea0:	6813      	ldr	r3, [r2, #0]
 8011ea2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ea6:	1d19      	adds	r1, r3, #4
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	6011      	str	r1, [r2, #0]
 8011eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	e08c      	b.n	8011fce <_printf_i+0x1be>
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011eba:	6011      	str	r1, [r2, #0]
 8011ebc:	bf18      	it	ne
 8011ebe:	b21b      	sxthne	r3, r3
 8011ec0:	e7cf      	b.n	8011e62 <_printf_i+0x52>
 8011ec2:	6813      	ldr	r3, [r2, #0]
 8011ec4:	6825      	ldr	r5, [r4, #0]
 8011ec6:	1d18      	adds	r0, r3, #4
 8011ec8:	6010      	str	r0, [r2, #0]
 8011eca:	0628      	lsls	r0, r5, #24
 8011ecc:	d501      	bpl.n	8011ed2 <_printf_i+0xc2>
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	e002      	b.n	8011ed8 <_printf_i+0xc8>
 8011ed2:	0668      	lsls	r0, r5, #25
 8011ed4:	d5fb      	bpl.n	8011ece <_printf_i+0xbe>
 8011ed6:	881b      	ldrh	r3, [r3, #0]
 8011ed8:	296f      	cmp	r1, #111	; 0x6f
 8011eda:	bf14      	ite	ne
 8011edc:	220a      	movne	r2, #10
 8011ede:	2208      	moveq	r2, #8
 8011ee0:	4852      	ldr	r0, [pc, #328]	; (801202c <_printf_i+0x21c>)
 8011ee2:	2100      	movs	r1, #0
 8011ee4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011ee8:	6865      	ldr	r5, [r4, #4]
 8011eea:	2d00      	cmp	r5, #0
 8011eec:	60a5      	str	r5, [r4, #8]
 8011eee:	f2c0 8095 	blt.w	801201c <_printf_i+0x20c>
 8011ef2:	6821      	ldr	r1, [r4, #0]
 8011ef4:	f021 0104 	bic.w	r1, r1, #4
 8011ef8:	6021      	str	r1, [r4, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d13d      	bne.n	8011f7a <_printf_i+0x16a>
 8011efe:	2d00      	cmp	r5, #0
 8011f00:	f040 808e 	bne.w	8012020 <_printf_i+0x210>
 8011f04:	4665      	mov	r5, ip
 8011f06:	2a08      	cmp	r2, #8
 8011f08:	d10b      	bne.n	8011f22 <_printf_i+0x112>
 8011f0a:	6823      	ldr	r3, [r4, #0]
 8011f0c:	07db      	lsls	r3, r3, #31
 8011f0e:	d508      	bpl.n	8011f22 <_printf_i+0x112>
 8011f10:	6923      	ldr	r3, [r4, #16]
 8011f12:	6862      	ldr	r2, [r4, #4]
 8011f14:	429a      	cmp	r2, r3
 8011f16:	bfde      	ittt	le
 8011f18:	2330      	movle	r3, #48	; 0x30
 8011f1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011f1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011f22:	ebac 0305 	sub.w	r3, ip, r5
 8011f26:	6123      	str	r3, [r4, #16]
 8011f28:	f8cd 8000 	str.w	r8, [sp]
 8011f2c:	463b      	mov	r3, r7
 8011f2e:	aa03      	add	r2, sp, #12
 8011f30:	4621      	mov	r1, r4
 8011f32:	4630      	mov	r0, r6
 8011f34:	f7ff fef6 	bl	8011d24 <_printf_common>
 8011f38:	3001      	adds	r0, #1
 8011f3a:	d14d      	bne.n	8011fd8 <_printf_i+0x1c8>
 8011f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f40:	b005      	add	sp, #20
 8011f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f46:	4839      	ldr	r0, [pc, #228]	; (801202c <_printf_i+0x21c>)
 8011f48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011f4c:	6813      	ldr	r3, [r2, #0]
 8011f4e:	6821      	ldr	r1, [r4, #0]
 8011f50:	1d1d      	adds	r5, r3, #4
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	6015      	str	r5, [r2, #0]
 8011f56:	060a      	lsls	r2, r1, #24
 8011f58:	d50b      	bpl.n	8011f72 <_printf_i+0x162>
 8011f5a:	07ca      	lsls	r2, r1, #31
 8011f5c:	bf44      	itt	mi
 8011f5e:	f041 0120 	orrmi.w	r1, r1, #32
 8011f62:	6021      	strmi	r1, [r4, #0]
 8011f64:	b91b      	cbnz	r3, 8011f6e <_printf_i+0x15e>
 8011f66:	6822      	ldr	r2, [r4, #0]
 8011f68:	f022 0220 	bic.w	r2, r2, #32
 8011f6c:	6022      	str	r2, [r4, #0]
 8011f6e:	2210      	movs	r2, #16
 8011f70:	e7b7      	b.n	8011ee2 <_printf_i+0xd2>
 8011f72:	064d      	lsls	r5, r1, #25
 8011f74:	bf48      	it	mi
 8011f76:	b29b      	uxthmi	r3, r3
 8011f78:	e7ef      	b.n	8011f5a <_printf_i+0x14a>
 8011f7a:	4665      	mov	r5, ip
 8011f7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f80:	fb02 3311 	mls	r3, r2, r1, r3
 8011f84:	5cc3      	ldrb	r3, [r0, r3]
 8011f86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011f8a:	460b      	mov	r3, r1
 8011f8c:	2900      	cmp	r1, #0
 8011f8e:	d1f5      	bne.n	8011f7c <_printf_i+0x16c>
 8011f90:	e7b9      	b.n	8011f06 <_printf_i+0xf6>
 8011f92:	6813      	ldr	r3, [r2, #0]
 8011f94:	6825      	ldr	r5, [r4, #0]
 8011f96:	1d18      	adds	r0, r3, #4
 8011f98:	6961      	ldr	r1, [r4, #20]
 8011f9a:	6010      	str	r0, [r2, #0]
 8011f9c:	0628      	lsls	r0, r5, #24
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	d501      	bpl.n	8011fa6 <_printf_i+0x196>
 8011fa2:	6019      	str	r1, [r3, #0]
 8011fa4:	e002      	b.n	8011fac <_printf_i+0x19c>
 8011fa6:	066a      	lsls	r2, r5, #25
 8011fa8:	d5fb      	bpl.n	8011fa2 <_printf_i+0x192>
 8011faa:	8019      	strh	r1, [r3, #0]
 8011fac:	2300      	movs	r3, #0
 8011fae:	4665      	mov	r5, ip
 8011fb0:	6123      	str	r3, [r4, #16]
 8011fb2:	e7b9      	b.n	8011f28 <_printf_i+0x118>
 8011fb4:	6813      	ldr	r3, [r2, #0]
 8011fb6:	1d19      	adds	r1, r3, #4
 8011fb8:	6011      	str	r1, [r2, #0]
 8011fba:	681d      	ldr	r5, [r3, #0]
 8011fbc:	6862      	ldr	r2, [r4, #4]
 8011fbe:	2100      	movs	r1, #0
 8011fc0:	4628      	mov	r0, r5
 8011fc2:	f7ff fb03 	bl	80115cc <memchr>
 8011fc6:	b108      	cbz	r0, 8011fcc <_printf_i+0x1bc>
 8011fc8:	1b40      	subs	r0, r0, r5
 8011fca:	6060      	str	r0, [r4, #4]
 8011fcc:	6863      	ldr	r3, [r4, #4]
 8011fce:	6123      	str	r3, [r4, #16]
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fd6:	e7a7      	b.n	8011f28 <_printf_i+0x118>
 8011fd8:	6923      	ldr	r3, [r4, #16]
 8011fda:	462a      	mov	r2, r5
 8011fdc:	4639      	mov	r1, r7
 8011fde:	4630      	mov	r0, r6
 8011fe0:	47c0      	blx	r8
 8011fe2:	3001      	adds	r0, #1
 8011fe4:	d0aa      	beq.n	8011f3c <_printf_i+0x12c>
 8011fe6:	6823      	ldr	r3, [r4, #0]
 8011fe8:	079b      	lsls	r3, r3, #30
 8011fea:	d413      	bmi.n	8012014 <_printf_i+0x204>
 8011fec:	68e0      	ldr	r0, [r4, #12]
 8011fee:	9b03      	ldr	r3, [sp, #12]
 8011ff0:	4298      	cmp	r0, r3
 8011ff2:	bfb8      	it	lt
 8011ff4:	4618      	movlt	r0, r3
 8011ff6:	e7a3      	b.n	8011f40 <_printf_i+0x130>
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	464a      	mov	r2, r9
 8011ffc:	4639      	mov	r1, r7
 8011ffe:	4630      	mov	r0, r6
 8012000:	47c0      	blx	r8
 8012002:	3001      	adds	r0, #1
 8012004:	d09a      	beq.n	8011f3c <_printf_i+0x12c>
 8012006:	3501      	adds	r5, #1
 8012008:	68e3      	ldr	r3, [r4, #12]
 801200a:	9a03      	ldr	r2, [sp, #12]
 801200c:	1a9b      	subs	r3, r3, r2
 801200e:	42ab      	cmp	r3, r5
 8012010:	dcf2      	bgt.n	8011ff8 <_printf_i+0x1e8>
 8012012:	e7eb      	b.n	8011fec <_printf_i+0x1dc>
 8012014:	2500      	movs	r5, #0
 8012016:	f104 0919 	add.w	r9, r4, #25
 801201a:	e7f5      	b.n	8012008 <_printf_i+0x1f8>
 801201c:	2b00      	cmp	r3, #0
 801201e:	d1ac      	bne.n	8011f7a <_printf_i+0x16a>
 8012020:	7803      	ldrb	r3, [r0, #0]
 8012022:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012026:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801202a:	e76c      	b.n	8011f06 <_printf_i+0xf6>
 801202c:	08015533 	.word	0x08015533
 8012030:	08015544 	.word	0x08015544

08012034 <__ascii_wctomb>:
 8012034:	b149      	cbz	r1, 801204a <__ascii_wctomb+0x16>
 8012036:	2aff      	cmp	r2, #255	; 0xff
 8012038:	bf8b      	itete	hi
 801203a:	238a      	movhi	r3, #138	; 0x8a
 801203c:	700a      	strbls	r2, [r1, #0]
 801203e:	6003      	strhi	r3, [r0, #0]
 8012040:	2001      	movls	r0, #1
 8012042:	bf88      	it	hi
 8012044:	f04f 30ff 	movhi.w	r0, #4294967295
 8012048:	4770      	bx	lr
 801204a:	4608      	mov	r0, r1
 801204c:	4770      	bx	lr

0801204e <_realloc_r>:
 801204e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012050:	4607      	mov	r7, r0
 8012052:	4614      	mov	r4, r2
 8012054:	460e      	mov	r6, r1
 8012056:	b921      	cbnz	r1, 8012062 <_realloc_r+0x14>
 8012058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801205c:	4611      	mov	r1, r2
 801205e:	f7ff bb4b 	b.w	80116f8 <_malloc_r>
 8012062:	b922      	cbnz	r2, 801206e <_realloc_r+0x20>
 8012064:	f7ff fafc 	bl	8011660 <_free_r>
 8012068:	4625      	mov	r5, r4
 801206a:	4628      	mov	r0, r5
 801206c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801206e:	f000 f814 	bl	801209a <_malloc_usable_size_r>
 8012072:	42a0      	cmp	r0, r4
 8012074:	d20f      	bcs.n	8012096 <_realloc_r+0x48>
 8012076:	4621      	mov	r1, r4
 8012078:	4638      	mov	r0, r7
 801207a:	f7ff fb3d 	bl	80116f8 <_malloc_r>
 801207e:	4605      	mov	r5, r0
 8012080:	2800      	cmp	r0, #0
 8012082:	d0f2      	beq.n	801206a <_realloc_r+0x1c>
 8012084:	4631      	mov	r1, r6
 8012086:	4622      	mov	r2, r4
 8012088:	f7ff fabd 	bl	8011606 <memcpy>
 801208c:	4631      	mov	r1, r6
 801208e:	4638      	mov	r0, r7
 8012090:	f7ff fae6 	bl	8011660 <_free_r>
 8012094:	e7e9      	b.n	801206a <_realloc_r+0x1c>
 8012096:	4635      	mov	r5, r6
 8012098:	e7e7      	b.n	801206a <_realloc_r+0x1c>

0801209a <_malloc_usable_size_r>:
 801209a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801209e:	1f18      	subs	r0, r3, #4
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	bfbc      	itt	lt
 80120a4:	580b      	ldrlt	r3, [r1, r0]
 80120a6:	18c0      	addlt	r0, r0, r3
 80120a8:	4770      	bx	lr
	...

080120ac <_init>:
 80120ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ae:	bf00      	nop
 80120b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120b2:	bc08      	pop	{r3}
 80120b4:	469e      	mov	lr, r3
 80120b6:	4770      	bx	lr

080120b8 <_fini>:
 80120b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ba:	bf00      	nop
 80120bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120be:	bc08      	pop	{r3}
 80120c0:	469e      	mov	lr, r3
 80120c2:	4770      	bx	lr

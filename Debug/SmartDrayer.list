
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08008e58  08008e58  00018e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d8  080093d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080093d8  080093d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093d8  080093d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d8  080093d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080093e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  20000070  08009450  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  08009450  00020688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000f4292  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007d24  00000000  00000000  0011432b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000034c0  00000000  00000000  0011c050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003230  00000000  00000000  0011f510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d79a  00000000  00000000  00122740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025fd5  00000000  00000000  0013feda  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0b8f  00000000  00000000  00165eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00206a3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fcf8  00000000  00000000  00206abc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08008e40 	.word	0x08008e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08008e40 	.word	0x08008e40

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	7c1b      	ldrb	r3, [r3, #16]
 800016a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000172:	461a      	mov	r2, r3
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	fb02 f303 	mul.w	r3, r2, r3
 800017a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	00db      	lsls	r3, r3, #3
 8000180:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f008 fa12 	bl	80085b4 <memset>
}
 8000190:	bf00      	nop
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af02      	add	r7, sp, #8
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	70fb      	strb	r3, [r7, #3]
 80001a4:	4613      	mov	r3, r2
 80001a6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	7c1b      	ldrb	r3, [r3, #16]
 80001ae:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80001b0:	78fb      	ldrb	r3, [r7, #3]
 80001b2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001b8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	b29b      	uxth	r3, r3
 80001be:	89ba      	ldrh	r2, [r7, #12]
 80001c0:	fb02 f303 	mul.w	r3, r2, r3
 80001c4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80001c6:	89bb      	ldrh	r3, [r7, #12]
 80001c8:	00db      	lsls	r3, r3, #3
 80001ca:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80001cc:	89bb      	ldrh	r3, [r7, #12]
 80001ce:	68ba      	ldr	r2, [r7, #8]
 80001d0:	4413      	add	r3, r2
 80001d2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80001d4:	7bf9      	ldrb	r1, [r7, #15]
 80001d6:	78ba      	ldrb	r2, [r7, #2]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	460b      	mov	r3, r1
 80001de:	2100      	movs	r1, #0
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	f000 fe8b 	bl	8000efc <u8x8_DrawTile>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b084      	sub	sp, #16
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000200:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000208:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	7c5b      	ldrb	r3, [r3, #17]
 8000210:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000212:	7bba      	ldrb	r2, [r7, #14]
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	4619      	mov	r1, r3
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f7ff ffbd 	bl	8000198 <u8g2_send_tile_row>
    src_row++;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	3301      	adds	r3, #1
 8000222:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000224:	7bbb      	ldrb	r3, [r7, #14]
 8000226:	3301      	adds	r3, #1
 8000228:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800022a:	7bfa      	ldrb	r2, [r7, #15]
 800022c:	7b7b      	ldrb	r3, [r7, #13]
 800022e:	429a      	cmp	r2, r3
 8000230:	d203      	bcs.n	800023a <u8g2_send_buffer+0x4c>
 8000232:	7bba      	ldrb	r2, [r7, #14]
 8000234:	7b3b      	ldrb	r3, [r7, #12]
 8000236:	429a      	cmp	r2, r3
 8000238:	d3eb      	bcc.n	8000212 <u8g2_send_buffer+0x24>
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000242:	b580      	push	{r7, lr}
 8000244:	b082      	sub	sp, #8
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ffcf 	bl	80001ee <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f000 fea4 	bl	8000f9e <u8x8_RefreshDisplay>
}
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2208      	movs	r2, #8
 800026c:	701a      	strb	r2, [r3, #0]
  return buf;
 800026e:	4b03      	ldr	r3, [pc, #12]	; (800027c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8000270:	4618      	mov	r0, r3
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	2000008c 	.word	0x2000008c

08000280 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af02      	add	r7, sp, #8
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 8000296:	490c      	ldr	r1, [pc, #48]	; (80002c8 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f000 fedf 	bl	800105c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800029e:	f107 0313 	add.w	r3, r7, #19
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffdc 	bl	8000260 <u8g2_m_16_8_f>
 80002a8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80002aa:	7cfa      	ldrb	r2, [r7, #19]
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 80002b2:	6979      	ldr	r1, [r7, #20]
 80002b4:	68f8      	ldr	r0, [r7, #12]
 80002b6:	f000 fa49 	bl	800074c <u8g2_SetupBuffer>
}
 80002ba:	bf00      	nop
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	08000c21 	.word	0x08000c21
 80002c8:	08000dbd 	.word	0x08000dbd
 80002cc:	080005d3 	.word	0x080005d3

080002d0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  return 0;
 80002d8:	2300      	movs	r3, #0
}
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a03      	ldr	r2, [pc, #12]	; (80002fc <u8g2_SetFontPosBaseline+0x18>)
 80002f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	080002d1 	.word	0x080002d1

08000300 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8000300:	b480      	push	{r7}
 8000302:	b087      	sub	sp, #28
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	4611      	mov	r1, r2
 800030c:	461a      	mov	r2, r3
 800030e:	460b      	mov	r3, r1
 8000310:	71fb      	strb	r3, [r7, #7]
 8000312:	4613      	mov	r3, r2
 8000314:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800031c:	7dfb      	ldrb	r3, [r7, #23]
 800031e:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	781a      	ldrb	r2, [r3, #0]
 8000324:	7dbb      	ldrb	r3, [r7, #22]
 8000326:	4413      	add	r3, r2
 8000328:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800032a:	7dfa      	ldrb	r2, [r7, #23]
 800032c:	7dbb      	ldrb	r3, [r7, #22]
 800032e:	429a      	cmp	r2, r3
 8000330:	d90b      	bls.n	800034a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8000332:	7dfa      	ldrb	r2, [r7, #23]
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	429a      	cmp	r2, r3
 8000338:	d205      	bcs.n	8000346 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800033a:	79bb      	ldrb	r3, [r7, #6]
 800033c:	75bb      	strb	r3, [r7, #22]
      b--;
 800033e:	7dbb      	ldrb	r3, [r7, #22]
 8000340:	3b01      	subs	r3, #1
 8000342:	75bb      	strb	r3, [r7, #22]
 8000344:	e001      	b.n	800034a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800034a:	7dfa      	ldrb	r2, [r7, #23]
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	429a      	cmp	r2, r3
 8000350:	d301      	bcc.n	8000356 <u8g2_clip_intersection2+0x56>
    return 0;
 8000352:	2300      	movs	r3, #0
 8000354:	e01c      	b.n	8000390 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8000356:	7dba      	ldrb	r2, [r7, #22]
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	429a      	cmp	r2, r3
 800035c:	d801      	bhi.n	8000362 <u8g2_clip_intersection2+0x62>
    return 0;
 800035e:	2300      	movs	r3, #0
 8000360:	e016      	b.n	8000390 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8000362:	7dfa      	ldrb	r2, [r7, #23]
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	429a      	cmp	r2, r3
 8000368:	d201      	bcs.n	800036e <u8g2_clip_intersection2+0x6e>
    a = c;
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800036e:	7dba      	ldrb	r2, [r7, #22]
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	429a      	cmp	r2, r3
 8000374:	d901      	bls.n	800037a <u8g2_clip_intersection2+0x7a>
    b = d;
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	7dfa      	ldrb	r2, [r7, #23]
 800037e:	701a      	strb	r2, [r3, #0]
  b -= a;
 8000380:	7dba      	ldrb	r2, [r7, #22]
 8000382:	7dfb      	ldrb	r3, [r7, #23]
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	7dba      	ldrb	r2, [r7, #22]
 800038c:	701a      	strb	r2, [r3, #0]
  return 1;
 800038e:	2301      	movs	r3, #1
}
 8000390:	4618      	mov	r0, r3
 8000392:	371c      	adds	r7, #28
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr

0800039a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800039a:	b590      	push	{r4, r7, lr}
 800039c:	b085      	sub	sp, #20
 800039e:	af02      	add	r7, sp, #8
 80003a0:	6078      	str	r0, [r7, #4]
 80003a2:	4608      	mov	r0, r1
 80003a4:	4611      	mov	r1, r2
 80003a6:	461a      	mov	r2, r3
 80003a8:	4603      	mov	r3, r0
 80003aa:	70fb      	strb	r3, [r7, #3]
 80003ac:	460b      	mov	r3, r1
 80003ae:	70bb      	strb	r3, [r7, #2]
 80003b0:	4613      	mov	r3, r2
 80003b2:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80003ba:	78ba      	ldrb	r2, [r7, #2]
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80003c4:	7878      	ldrb	r0, [r7, #1]
 80003c6:	78ba      	ldrb	r2, [r7, #2]
 80003c8:	78f9      	ldrb	r1, [r7, #3]
 80003ca:	7e3b      	ldrb	r3, [r7, #24]
 80003cc:	9300      	str	r3, [sp, #0]
 80003ce:	4603      	mov	r3, r0
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	47a0      	blx	r4
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd90      	pop	{r4, r7, pc}

080003dc <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b085      	sub	sp, #20
 80003e0:	af02      	add	r7, sp, #8
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	4608      	mov	r0, r1
 80003e6:	4611      	mov	r1, r2
 80003e8:	461a      	mov	r2, r3
 80003ea:	4603      	mov	r3, r0
 80003ec:	70fb      	strb	r3, [r7, #3]
 80003ee:	460b      	mov	r3, r1
 80003f0:	70bb      	strb	r3, [r7, #2]
 80003f2:	4613      	mov	r3, r2
 80003f4:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d06d      	beq.n	80004dc <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8000400:	787b      	ldrb	r3, [r7, #1]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d06a      	beq.n	80004dc <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8000406:	787b      	ldrb	r3, [r7, #1]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d918      	bls.n	800043e <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800040c:	7e3b      	ldrb	r3, [r7, #24]
 800040e:	2b02      	cmp	r3, #2
 8000410:	d109      	bne.n	8000426 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8000412:	78fa      	ldrb	r2, [r7, #3]
 8000414:	787b      	ldrb	r3, [r7, #1]
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	b2db      	uxtb	r3, r3
 800041a:	70fb      	strb	r3, [r7, #3]
	  x++;
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	3301      	adds	r3, #1
 8000420:	b2db      	uxtb	r3, r3
 8000422:	70fb      	strb	r3, [r7, #3]
 8000424:	e00b      	b.n	800043e <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8000426:	7e3b      	ldrb	r3, [r7, #24]
 8000428:	2b03      	cmp	r3, #3
 800042a:	d108      	bne.n	800043e <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800042c:	78ba      	ldrb	r2, [r7, #2]
 800042e:	787b      	ldrb	r3, [r7, #1]
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	70bb      	strb	r3, [r7, #2]
	  y++;
 8000436:	78bb      	ldrb	r3, [r7, #2]
 8000438:	3301      	adds	r3, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800043e:	7e3b      	ldrb	r3, [r7, #24]
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8000446:	7e3b      	ldrb	r3, [r7, #24]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d119      	bne.n	8000480 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000452:	78bb      	ldrb	r3, [r7, #2]
 8000454:	429a      	cmp	r2, r3
 8000456:	d838      	bhi.n	80004ca <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800045e:	78bb      	ldrb	r3, [r7, #2]
 8000460:	429a      	cmp	r2, r3
 8000462:	d934      	bls.n	80004ce <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000470:	1c79      	adds	r1, r7, #1
 8000472:	1cf8      	adds	r0, r7, #3
 8000474:	f7ff ff44 	bl	8000300 <u8g2_clip_intersection2>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d119      	bne.n	80004b2 <u8g2_DrawHVLine+0xd6>
	  return;
 800047e:	e02d      	b.n	80004dc <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000486:	78fb      	ldrb	r3, [r7, #3]
 8000488:	429a      	cmp	r2, r3
 800048a:	d822      	bhi.n	80004d2 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	429a      	cmp	r2, r3
 8000496:	d91e      	bls.n	80004d6 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80004a4:	1c79      	adds	r1, r7, #1
 80004a6:	1cb8      	adds	r0, r7, #2
 80004a8:	f7ff ff2a 	bl	8000300 <u8g2_clip_intersection2>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d013      	beq.n	80004da <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	689c      	ldr	r4, [r3, #8]
 80004b8:	78f9      	ldrb	r1, [r7, #3]
 80004ba:	78ba      	ldrb	r2, [r7, #2]
 80004bc:	7878      	ldrb	r0, [r7, #1]
 80004be:	7e3b      	ldrb	r3, [r7, #24]
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	4603      	mov	r3, r0
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	47a0      	blx	r4
 80004c8:	e008      	b.n	80004dc <u8g2_DrawHVLine+0x100>
	  return;
 80004ca:	bf00      	nop
 80004cc:	e006      	b.n	80004dc <u8g2_DrawHVLine+0x100>
	  return;
 80004ce:	bf00      	nop
 80004d0:	e004      	b.n	80004dc <u8g2_DrawHVLine+0x100>
	  return;
 80004d2:	bf00      	nop
 80004d4:	e002      	b.n	80004dc <u8g2_DrawHVLine+0x100>
	  return;
 80004d6:	bf00      	nop
 80004d8:	e000      	b.n	80004dc <u8g2_DrawHVLine+0x100>
	  return;
 80004da:	bf00      	nop
    }
}
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd90      	pop	{r4, r7, pc}

080004e2 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b084      	sub	sp, #16
 80004e6:	af02      	add	r7, sp, #8
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	4608      	mov	r0, r1
 80004ec:	4611      	mov	r1, r2
 80004ee:	461a      	mov	r2, r3
 80004f0:	4603      	mov	r3, r0
 80004f2:	70fb      	strb	r3, [r7, #3]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70bb      	strb	r3, [r7, #2]
 80004f8:	4613      	mov	r3, r2
 80004fa:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80004fc:	7878      	ldrb	r0, [r7, #1]
 80004fe:	78ba      	ldrb	r2, [r7, #2]
 8000500:	78f9      	ldrb	r1, [r7, #3]
 8000502:	2300      	movs	r3, #0
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	4603      	mov	r3, r0
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f7ff ff67 	bl	80003dc <u8g2_DrawHVLine>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8000516:	b490      	push	{r4, r7}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	4604      	mov	r4, r0
 800051e:	4608      	mov	r0, r1
 8000520:	4611      	mov	r1, r2
 8000522:	461a      	mov	r2, r3
 8000524:	4623      	mov	r3, r4
 8000526:	71fb      	strb	r3, [r7, #7]
 8000528:	4603      	mov	r3, r0
 800052a:	71bb      	strb	r3, [r7, #6]
 800052c:	460b      	mov	r3, r1
 800052e:	717b      	strb	r3, [r7, #5]
 8000530:	4613      	mov	r3, r2
 8000532:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8000534:	797a      	ldrb	r2, [r7, #5]
 8000536:	79bb      	ldrb	r3, [r7, #6]
 8000538:	429a      	cmp	r2, r3
 800053a:	d20d      	bcs.n	8000558 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800053c:	793a      	ldrb	r2, [r7, #4]
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	429a      	cmp	r2, r3
 8000542:	d901      	bls.n	8000548 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8000544:	2301      	movs	r3, #1
 8000546:	e014      	b.n	8000572 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8000548:	797a      	ldrb	r2, [r7, #5]
 800054a:	793b      	ldrb	r3, [r7, #4]
 800054c:	429a      	cmp	r2, r3
 800054e:	d901      	bls.n	8000554 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8000550:	2301      	movs	r3, #1
 8000552:	e00e      	b.n	8000572 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8000554:	2300      	movs	r3, #0
 8000556:	e00c      	b.n	8000572 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8000558:	793a      	ldrb	r2, [r7, #4]
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	429a      	cmp	r2, r3
 800055e:	d907      	bls.n	8000570 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8000560:	797a      	ldrb	r2, [r7, #5]
 8000562:	793b      	ldrb	r3, [r7, #4]
 8000564:	429a      	cmp	r2, r3
 8000566:	d901      	bls.n	800056c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8000568:	2301      	movs	r3, #1
 800056a:	e002      	b.n	8000572 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800056c:	2300      	movs	r3, #0
 800056e:	e000      	b.n	8000572 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8000570:	2300      	movs	r3, #0
    }
  }
}
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bc90      	pop	{r4, r7}
 800057a:	4770      	bx	lr

0800057c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	4608      	mov	r0, r1
 8000586:	4611      	mov	r1, r2
 8000588:	461a      	mov	r2, r3
 800058a:	4603      	mov	r3, r0
 800058c:	70fb      	strb	r3, [r7, #3]
 800058e:	460b      	mov	r3, r1
 8000590:	70bb      	strb	r3, [r7, #2]
 8000592:	4613      	mov	r3, r2
 8000594:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80005a2:	7c3b      	ldrb	r3, [r7, #16]
 80005a4:	78ba      	ldrb	r2, [r7, #2]
 80005a6:	f7ff ffb6 	bl	8000516 <u8g2_is_intersection_decision_tree>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d101      	bne.n	80005b4 <u8g2_IsIntersection+0x38>
    return 0; 
 80005b0:	2300      	movs	r3, #0
 80005b2:	e00a      	b.n	80005ca <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 80005c0:	787b      	ldrb	r3, [r7, #1]
 80005c2:	78fa      	ldrb	r2, [r7, #3]
 80005c4:	f7ff ffa7 	bl	8000516 <u8g2_is_intersection_decision_tree>
 80005c8:	4603      	mov	r3, r0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b087      	sub	sp, #28
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	4608      	mov	r0, r1
 80005dc:	4611      	mov	r1, r2
 80005de:	461a      	mov	r2, r3
 80005e0:	4603      	mov	r3, r0
 80005e2:	70fb      	strb	r3, [r7, #3]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70bb      	strb	r3, [r7, #2]
 80005e8:	4613      	mov	r3, r2
 80005ea:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80005ec:	78bb      	ldrb	r3, [r7, #2]
 80005ee:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80005f0:	7cfb      	ldrb	r3, [r7, #19]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 80005fc:	7c3a      	ldrb	r2, [r7, #16]
 80005fe:	7cfb      	ldrb	r3, [r7, #19]
 8000600:	fa02 f303 	lsl.w	r3, r2, r3
 8000604:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000614:	2b01      	cmp	r3, #1
 8000616:	d801      	bhi.n	800061c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8000618:	7c3b      	ldrb	r3, [r7, #16]
 800061a:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000622:	2b01      	cmp	r3, #1
 8000624:	d001      	beq.n	800062a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8000626:	7c3b      	ldrb	r3, [r7, #16]
 8000628:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800062a:	78bb      	ldrb	r3, [r7, #2]
 800062c:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 800062e:	89fb      	ldrh	r3, [r7, #14]
 8000630:	f023 0307 	bic.w	r3, r3, #7
 8000634:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	7c1b      	ldrb	r3, [r3, #16]
 800063c:	b29b      	uxth	r3, r3
 800063e:	89fa      	ldrh	r2, [r7, #14]
 8000640:	fb02 f303 	mul.w	r3, r2, r3
 8000644:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800064a:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800064c:	89fb      	ldrh	r3, [r7, #14]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	4413      	add	r3, r2
 8000652:	617b      	str	r3, [r7, #20]
  ptr += x;
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	697a      	ldr	r2, [r7, #20]
 8000658:	4413      	add	r3, r2
 800065a:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800065c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d117      	bne.n	8000694 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	781a      	ldrb	r2, [r3, #0]
 8000668:	7cbb      	ldrb	r3, [r7, #18]
 800066a:	4313      	orrs	r3, r2
 800066c:	b2da      	uxtb	r2, r3
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	7c7b      	ldrb	r3, [r7, #17]
 8000678:	4053      	eors	r3, r2
 800067a:	b2da      	uxtb	r2, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	701a      	strb	r2, [r3, #0]
	ptr++;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	3301      	adds	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
	len--;
 8000686:	787b      	ldrb	r3, [r7, #1]
 8000688:	3b01      	subs	r3, #1
 800068a:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800068c:	787b      	ldrb	r3, [r7, #1]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1e8      	bne.n	8000664 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8000692:	e039      	b.n	8000708 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	7cbb      	ldrb	r3, [r7, #18]
 800069a:	4313      	orrs	r3, r2
 800069c:	b2da      	uxtb	r2, r3
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	7c7b      	ldrb	r3, [r7, #17]
 80006a8:	4053      	eors	r3, r2
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80006b0:	7cfb      	ldrb	r3, [r7, #19]
 80006b2:	3301      	adds	r3, #1
 80006b4:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80006b6:	7cfb      	ldrb	r3, [r7, #19]
 80006b8:	f003 0307 	and.w	r3, r3, #7
 80006bc:	74fb      	strb	r3, [r7, #19]
      len--;
 80006be:	787b      	ldrb	r3, [r7, #1]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80006c4:	7cfb      	ldrb	r3, [r7, #19]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d115      	bne.n	80006f6 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80006d0:	461a      	mov	r2, r3
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	4413      	add	r3, r2
 80006d6:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d801      	bhi.n	80006e6 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d008      	beq.n	8000702 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	747b      	strb	r3, [r7, #17]
 80006f4:	e005      	b.n	8000702 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80006f6:	7cbb      	ldrb	r3, [r7, #18]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 80006fc:	7c7b      	ldrb	r3, [r7, #17]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8000702:	787b      	ldrb	r3, [r7, #1]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1c5      	bne.n	8000694 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8000708:	bf00      	nop
 800070a:	371c      	adds	r7, #28
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	22ff      	movs	r2, #255	; 0xff
 800072e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	22ff      	movs	r2, #255	; 0xff
 8000736:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	4798      	blx	r3
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	4613      	mov	r3, r2
 800075a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2200      	movs	r2, #0
 8000760:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	2200      	movs	r2, #0
 8000782:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2201      	movs	r2, #1
 8000792:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2201      	movs	r2, #1
 800079a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	69ba      	ldr	r2, [r7, #24]
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80007ae:	68f8      	ldr	r0, [r7, #12]
 80007b0:	f7ff ffaf 	bl	8000712 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f7ff fd95 	bl	80002e4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b085      	sub	sp, #20
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80007de:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	7c1b      	ldrb	r3, [r3, #16]
 80007f2:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	2b1f      	cmp	r3, #31
 80007f8:	d901      	bls.n	80007fe <u8g2_update_dimension_common+0x34>
    t = 31;
 80007fa:	231f      	movs	r3, #31
 80007fc:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7bfa      	ldrb	r2, [r7, #15]
 8000808:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000812:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7bfa      	ldrb	r2, [r7, #15]
 800081e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000828:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8000832:	4413      	add	r3, r2
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	7c52      	ldrb	r2, [r2, #17]
 8000838:	4293      	cmp	r3, r2
 800083a:	dd06      	ble.n	800084a <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	7c5a      	ldrb	r2, [r3, #17]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	4413      	add	r3, r2
 8000872:	b2da      	uxtb	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	22f0      	movs	r2, #240	; 0xf0
 800087e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	8a9b      	ldrh	r3, [r3, #20]
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d805      	bhi.n	8000896 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	8a9b      	ldrh	r3, [r3, #20]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	8adb      	ldrh	r3, [r3, #22]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	4603      	mov	r3, r0
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff fe53 	bl	800057c <u8g2_IsIntersection>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d104      	bne.n	80008e6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80008e4:	e03b      	b.n	800095e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d205      	bcs.n	800090a <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000916:	429a      	cmp	r2, r3
 8000918:	d905      	bls.n	8000926 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000932:	429a      	cmp	r2, r3
 8000934:	d205      	bcs.n	8000942 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800094e:	429a      	cmp	r2, r3
 8000950:	d905      	bls.n	800095e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff2b 	bl	80007ca <u8g2_update_dimension_common>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d30a      	bcc.n	80009c6 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff65 	bl	80008ac <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af02      	add	r7, sp, #8
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	4608      	mov	r0, r1
 80009f4:	4611      	mov	r1, r2
 80009f6:	461a      	mov	r2, r3
 80009f8:	4603      	mov	r3, r0
 80009fa:	70fb      	strb	r3, [r7, #3]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70bb      	strb	r3, [r7, #2]
 8000a00:	4613      	mov	r3, r2
 8000a02:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a0a:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8000a0c:	7bba      	ldrb	r2, [r7, #14]
 8000a0e:	78bb      	ldrb	r3, [r7, #2]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000a1a:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8000a1c:	7bfa      	ldrb	r2, [r7, #15]
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8000a24:	7e3b      	ldrb	r3, [r7, #24]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d107      	bne.n	8000a3a <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8000a2a:	7bbb      	ldrb	r3, [r7, #14]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8000a30:	7bfa      	ldrb	r2, [r7, #15]
 8000a32:	787b      	ldrb	r3, [r7, #1]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	e009      	b.n	8000a4e <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8000a3a:	7e3b      	ldrb	r3, [r7, #24]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d106      	bne.n	8000a4e <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8000a46:	7bba      	ldrb	r2, [r7, #14]
 8000a48:	787b      	ldrb	r3, [r7, #1]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8000a4e:	7878      	ldrb	r0, [r7, #1]
 8000a50:	7bba      	ldrb	r2, [r7, #14]
 8000a52:	7bf9      	ldrb	r1, [r7, #15]
 8000a54:	7e3b      	ldrb	r3, [r7, #24]
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	4603      	mov	r3, r0
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fc9d 	bl	800039a <u8g2_draw_hv_line_2dir>
}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691c      	ldr	r4, [r3, #16]
 8000a78:	78fa      	ldrb	r2, [r7, #3]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	47a0      	blx	r4
 8000a82:	4603      	mov	r3, r0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd90      	pop	{r4, r7, pc}

08000a8c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	460b      	mov	r3, r1
 8000a96:	607a      	str	r2, [r7, #4]
 8000a98:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	691c      	ldr	r4, [r3, #16]
 8000a9e:	7afa      	ldrb	r2, [r7, #11]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2117      	movs	r1, #23
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	47a0      	blx	r4
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}

08000ab2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	460b      	mov	r3, r1
 8000abc:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8000abe:	1cfb      	adds	r3, r7, #3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ffe1 	bl	8000a8c <u8x8_byte_SendBytes>
 8000aca:	4603      	mov	r3, r0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68dc      	ldr	r4, [r3, #12]
 8000ae4:	78fa      	ldrb	r2, [r7, #3]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	2115      	movs	r1, #21
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	47a0      	blx	r4
 8000aee:	4603      	mov	r3, r0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68dc      	ldr	r4, [r3, #12]
 8000b08:	78fa      	ldrb	r2, [r7, #3]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	2116      	movs	r1, #22
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	47a0      	blx	r4
 8000b12:	4603      	mov	r3, r0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd90      	pop	{r4, r7, pc}

08000b1c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	460b      	mov	r3, r1
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	68dc      	ldr	r4, [r3, #12]
 8000b2e:	7afa      	ldrb	r2, [r7, #11]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2117      	movs	r1, #23
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	47a0      	blx	r4
 8000b38:	4603      	mov	r3, r0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd90      	pop	{r4, r7, pc}

08000b42 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8000b42:	b590      	push	{r4, r7, lr}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68dc      	ldr	r4, [r3, #12]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2200      	movs	r2, #0
 8000b52:	2118      	movs	r1, #24
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	47a0      	blx	r4
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}

08000b62 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8000b62:	b590      	push	{r4, r7, lr}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68dc      	ldr	r4, [r3, #12]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2200      	movs	r2, #0
 8000b72:	2119      	movs	r1, #25
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	47a0      	blx	r4
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd90      	pop	{r4, r7, pc}

08000b82 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8000b82:	b590      	push	{r4, r7, lr}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	73fb      	strb	r3, [r7, #15]
    data++;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	2b17      	cmp	r3, #23
 8000b9c:	d017      	beq.n	8000bce <u8x8_cad_SendSequence+0x4c>
 8000b9e:	2b17      	cmp	r3, #23
 8000ba0:	dc02      	bgt.n	8000ba8 <u8x8_cad_SendSequence+0x26>
 8000ba2:	2b15      	cmp	r3, #21
 8000ba4:	db37      	blt.n	8000c16 <u8x8_cad_SendSequence+0x94>
 8000ba6:	e004      	b.n	8000bb2 <u8x8_cad_SendSequence+0x30>
 8000ba8:	2b19      	cmp	r3, #25
 8000baa:	dd1e      	ble.n	8000bea <u8x8_cad_SendSequence+0x68>
 8000bac:	2bfe      	cmp	r3, #254	; 0xfe
 8000bae:	d024      	beq.n	8000bfa <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8000bb0:	e031      	b.n	8000c16 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68dc      	ldr	r4, [r3, #12]
 8000bbc:	7bba      	ldrb	r2, [r7, #14]
 8000bbe:	7bf9      	ldrb	r1, [r7, #15]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	47a0      	blx	r4
	  data++;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	603b      	str	r3, [r7, #0]
	  break;
 8000bcc:	e022      	b.n	8000c14 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8000bd4:	f107 030e 	add.w	r3, r7, #14
 8000bd8:	461a      	mov	r2, r3
 8000bda:	2101      	movs	r1, #1
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff9d 	bl	8000b1c <u8x8_cad_SendData>
	  data++;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	603b      	str	r3, [r7, #0]
	  break;
 8000be8:	e014      	b.n	8000c14 <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68dc      	ldr	r4, [r3, #12]
 8000bee:	7bf9      	ldrb	r1, [r7, #15]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	47a0      	blx	r4
	  break;
 8000bf8:	e00c      	b.n	8000c14 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	461a      	mov	r2, r3
 8000c04:	2129      	movs	r1, #41	; 0x29
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 f9d8 	bl	8000fbc <u8x8_gpio_call>
	  data++;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	603b      	str	r3, [r7, #0]
	  break;
 8000c12:	bf00      	nop
    cmd = *data;
 8000c14:	e7ba      	b.n	8000b8c <u8x8_cad_SendSequence+0xa>
	return;
 8000c16:	bf00      	nop
    }
  }
}
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd90      	pop	{r4, r7, pc}
	...

08000c20 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	72fb      	strb	r3, [r7, #11]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8000c32:	7afb      	ldrb	r3, [r7, #11]
 8000c34:	3b14      	subs	r3, #20
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d82f      	bhi.n	8000c9a <u8x8_cad_001+0x7a>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <u8x8_cad_001+0x20>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000c89 	.word	0x08000c89
 8000c44:	08000c59 	.word	0x08000c59
 8000c48:	08000c6d 	.word	0x08000c6d
 8000c4c:	08000c81 	.word	0x08000c81
 8000c50:	08000c89 	.word	0x08000c89
 8000c54:	08000c89 	.word	0x08000c89
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff ff04 	bl	8000a68 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8000c60:	7abb      	ldrb	r3, [r7, #10]
 8000c62:	4619      	mov	r1, r3
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f7ff ff24 	bl	8000ab2 <u8x8_byte_SendByte>
      break;
 8000c6a:	e018      	b.n	8000c9e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fefa 	bl	8000a68 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8000c74:	7abb      	ldrb	r3, [r7, #10]
 8000c76:	4619      	mov	r1, r3
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f7ff ff1a 	bl	8000ab2 <u8x8_byte_SendByte>
      break;
 8000c7e:	e00e      	b.n	8000c9e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8000c80:	2101      	movs	r1, #1
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f7ff fef0 	bl	8000a68 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	691c      	ldr	r4, [r3, #16]
 8000c8c:	7aba      	ldrb	r2, [r7, #10]
 8000c8e:	7af9      	ldrb	r1, [r7, #11]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	47a0      	blx	r4
 8000c96:	4603      	mov	r3, r0
 8000c98:	e002      	b.n	8000ca0 <u8x8_cad_001+0x80>
    default:
      return 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <u8x8_cad_001+0x80>
  }
  return 1;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd90      	pop	{r4, r7, pc}

08000ca8 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	72fb      	strb	r3, [r7, #11]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8000cba:	7afb      	ldrb	r3, [r7, #11]
 8000cbc:	2b0e      	cmp	r3, #14
 8000cbe:	d05f      	beq.n	8000d80 <u8x8_d_st7565_common+0xd8>
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d002      	beq.n	8000cca <u8x8_d_st7565_common+0x22>
 8000cc4:	2b0b      	cmp	r3, #11
 8000cc6:	d04e      	beq.n	8000d66 <u8x8_d_st7565_common+0xbe>
 8000cc8:	e06c      	b.n	8000da4 <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f7ff ff39 	bl	8000b42 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	795b      	ldrb	r3, [r3, #5]
 8000cd4:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8000cd6:	7dbb      	ldrb	r3, [r7, #22]
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000ce2:	7dbb      	ldrb	r3, [r7, #22]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8000ce8:	7dbb      	ldrb	r3, [r7, #22]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f7ff feec 	bl	8000ad4 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8000cfc:	7dbb      	ldrb	r3, [r7, #22]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	68f8      	ldr	r0, [r7, #12]
 8000d08:	f7ff fee4 	bl	8000ad4 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	799b      	ldrb	r3, [r3, #6]
 8000d10:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	4619      	mov	r1, r3
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f7ff fedb 	bl	8000ad4 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	791b      	ldrb	r3, [r3, #4]
 8000d22:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8000d24:	7dfb      	ldrb	r3, [r7, #23]
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8000d30:	7dfa      	ldrb	r2, [r7, #23]
 8000d32:	7dbb      	ldrb	r3, [r7, #22]
 8000d34:	4413      	add	r3, r2
 8000d36:	2b84      	cmp	r3, #132	; 0x84
 8000d38:	d905      	bls.n	8000d46 <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 8000d3a:	2384      	movs	r3, #132	; 0x84
 8000d3c:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8000d3e:	7dfa      	ldrb	r2, [r7, #23]
 8000d40:	7dbb      	ldrb	r3, [r7, #22]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f7ff fee5 	bl	8000b1c <u8x8_cad_SendData>
	arg_int--;
 8000d52:	7abb      	ldrb	r3, [r7, #10]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8000d58:	7abb      	ldrb	r3, [r7, #10]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f3      	bne.n	8000d46 <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f7ff feff 	bl	8000b62 <u8x8_cad_EndTransfer>
      break;
 8000d64:	e020      	b.n	8000da8 <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8000d66:	7abb      	ldrb	r3, [r7, #10]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d104      	bne.n	8000d76 <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8000d6c:	4911      	ldr	r1, [pc, #68]	; (8000db4 <u8x8_d_st7565_common+0x10c>)
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f7ff ff07 	bl	8000b82 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8000d74:	e018      	b.n	8000da8 <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8000d76:	4910      	ldr	r1, [pc, #64]	; (8000db8 <u8x8_d_st7565_common+0x110>)
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f7ff ff02 	bl	8000b82 <u8x8_cad_SendSequence>
      break;
 8000d7e:	e013      	b.n	8000da8 <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f7ff fede 	bl	8000b42 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8000d86:	2181      	movs	r1, #129	; 0x81
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f7ff fea3 	bl	8000ad4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8000d8e:	7abb      	ldrb	r3, [r7, #10]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4619      	mov	r1, r3
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f7ff feae 	bl	8000af8 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fee0 	bl	8000b62 <u8x8_cad_EndTransfer>
      break;
 8000da2:	e001      	b.n	8000da8 <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	e000      	b.n	8000daa <u8x8_d_st7565_common+0x102>
  }
  return 1;
 8000da8:	2301      	movs	r3, #1
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	0800919c 	.word	0x0800919c
 8000db8:	080091a4 	.word	0x080091a4

08000dbc <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	72fb      	strb	r3, [r7, #11]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8000dce:	7aba      	ldrb	r2, [r7, #10]
 8000dd0:	7af9      	ldrb	r1, [r7, #11]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f7ff ff67 	bl	8000ca8 <u8x8_d_st7565_common>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d12e      	bne.n	8000e3e <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8000de0:	7afb      	ldrb	r3, [r7, #11]
 8000de2:	2b0a      	cmp	r3, #10
 8000de4:	d008      	beq.n	8000df8 <u8x8_d_st7565_nhd_c12864+0x3c>
 8000de6:	2b0d      	cmp	r3, #13
 8000de8:	d00e      	beq.n	8000e08 <u8x8_d_st7565_nhd_c12864+0x4c>
 8000dea:	2b09      	cmp	r3, #9
 8000dec:	d125      	bne.n	8000e3a <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8000dee:	4917      	ldr	r1, [pc, #92]	; (8000e4c <u8x8_d_st7565_nhd_c12864+0x90>)
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f000 f833 	bl	8000e5c <u8x8_d_helper_display_setup_memory>
	break;
 8000df6:	e023      	b.n	8000e40 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f000 f842 	bl	8000e82 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8000dfe:	4914      	ldr	r1, [pc, #80]	; (8000e50 <u8x8_d_st7565_nhd_c12864+0x94>)
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f7ff febe 	bl	8000b82 <u8x8_cad_SendSequence>
	break;
 8000e06:	e01b      	b.n	8000e40 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8000e08:	7abb      	ldrb	r3, [r7, #10]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10a      	bne.n	8000e24 <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8000e0e:	4911      	ldr	r1, [pc, #68]	; (8000e54 <u8x8_d_st7565_nhd_c12864+0x98>)
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f7ff feb6 	bl	8000b82 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	7c9a      	ldrb	r2, [r3, #18]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8000e22:	e00d      	b.n	8000e40 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8000e24:	490c      	ldr	r1, [pc, #48]	; (8000e58 <u8x8_d_st7565_nhd_c12864+0x9c>)
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff feab 	bl	8000b82 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	7cda      	ldrb	r2, [r3, #19]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8000e38:	e002      	b.n	8000e40 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e001      	b.n	8000e42 <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 8000e3e:	bf00      	nop
  return 1;
 8000e40:	2301      	movs	r3, #1
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	080091bc 	.word	0x080091bc
 8000e50:	080091d4 	.word	0x080091d4
 8000e54:	080091ac 	.word	0x080091ac
 8000e58:	080091b4 	.word	0x080091b4

08000e5c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	7c9a      	ldrb	r2, [r3, #18]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8000e82:	b590      	push	{r4, r7, lr}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	695c      	ldr	r4, [r3, #20]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2200      	movs	r2, #0
 8000e92:	2128      	movs	r1, #40	; 0x28
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68dc      	ldr	r4, [r3, #12]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2114      	movs	r1, #20
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	214b      	movs	r1, #75	; 0x4b
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f886 	bl	8000fbc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	791b      	ldrb	r3, [r3, #4]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	2129      	movs	r1, #41	; 0x29
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 f87e 	bl	8000fbc <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	214b      	movs	r1, #75	; 0x4b
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f879 	bl	8000fbc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	791b      	ldrb	r3, [r3, #4]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	2129      	movs	r1, #41	; 0x29
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 f871 	bl	8000fbc <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8000eda:	2201      	movs	r2, #1
 8000edc:	214b      	movs	r1, #75	; 0x4b
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f86c 	bl	8000fbc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	795b      	ldrb	r3, [r3, #5]
 8000eea:	461a      	mov	r2, r3
 8000eec:	2129      	movs	r1, #41	; 0x29
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f864 	bl	8000fbc <u8x8_gpio_call>
}    
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}

08000efc <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	70fb      	strb	r3, [r7, #3]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	70bb      	strb	r3, [r7, #2]
 8000f12:	4613      	mov	r3, r2
 8000f14:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8000f1a:	78bb      	ldrb	r3, [r7, #2]
 8000f1c:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8000f1e:	787b      	ldrb	r3, [r7, #1]
 8000f20:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689c      	ldr	r4, [r3, #8]
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	2201      	movs	r2, #1
 8000f30:	210f      	movs	r1, #15
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	47a0      	blx	r4
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd90      	pop	{r4, r7, pc}

08000f40 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689c      	ldr	r4, [r3, #8]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2109      	movs	r1, #9
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	47a0      	blx	r4
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd90      	pop	{r4, r7, pc}

08000f5e <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8000f5e:	b590      	push	{r4, r7, lr}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689c      	ldr	r4, [r3, #8]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	210a      	movs	r1, #10
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	47a0      	blx	r4
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd90      	pop	{r4, r7, pc}

08000f7c <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689c      	ldr	r4, [r3, #8]
 8000f8c:	78fa      	ldrb	r2, [r7, #3]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	210b      	movs	r1, #11
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	47a0      	blx	r4
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd90      	pop	{r4, r7, pc}

08000f9e <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8000f9e:	b590      	push	{r4, r7, lr}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689c      	ldr	r4, [r3, #8]
 8000faa:	2300      	movs	r3, #0
 8000fac:	2200      	movs	r2, #0
 8000fae:	2110      	movs	r1, #16
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	47a0      	blx	r4
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	695c      	ldr	r4, [r3, #20]
 8000fd0:	78ba      	ldrb	r2, [r7, #2]
 8000fd2:	78f9      	ldrb	r1, [r7, #3]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	47a0      	blx	r4
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd90      	pop	{r4, r7, pc}

08000fe2 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	72fb      	strb	r3, [r7, #11]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a11      	ldr	r2, [pc, #68]	; (8001058 <u8x8_SetupDefaults+0x58>)
 8001012:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <u8x8_SetupDefaults+0x58>)
 8001018:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <u8x8_SetupDefaults+0x58>)
 800101e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <u8x8_SetupDefaults+0x58>)
 8001024:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	22ff      	movs	r2, #255	; 0xff
 8001040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	08000fe3 	.word	0x08000fe3

0800105c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff ffc8 	bl	8001000 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f7ff ff59 	bl	8000f40 <u8x8_SetupMemory>
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	70fb      	strb	r3, [r7, #3]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	741a      	strb	r2, [r3, #16]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	745a      	strb	r2, [r3, #17]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d802      	bhi.n	80010d8 <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	78fa      	ldrb	r2, [r7, #3]
 80010d6:	701a      	strb	r2, [r3, #0]
}
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d031      	beq.n	800115c <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d826      	bhi.n	800114e <_ZN11ChronoTimer8setTimerEm+0x6a>
 8001100:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <_ZN11ChronoTimer8setTimerEm+0x24>)
 8001102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001106:	bf00      	nop
 8001108:	08001119 	.word	0x08001119
 800110c:	08001121 	.word	0x08001121
 8001110:	08001131 	.word	0x08001131
 8001114:	08001141 	.word	0x08001141
		{
		case MILLIS:
			timeDelay = SetDelay;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	605a      	str	r2, [r3, #4]
			break;
 800111e:	e017      	b.n	8001150 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001126:	fb02 f203 	mul.w	r2, r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	605a      	str	r2, [r3, #4]
			break;
 800112e:	e00f      	b.n	8001150 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001136:	fb02 f203 	mul.w	r2, r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	605a      	str	r2, [r3, #4]
			break;
 800113e:	e007      	b.n	8001150 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <_ZN11ChronoTimer8setTimerEm+0x84>)
 8001144:	fb02 f203 	mul.w	r2, r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	605a      	str	r2, [r3, #4]
			break;
 800114c:	e000      	b.n	8001150 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 800114e:	bf00      	nop
		}
		isSetted = true;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	609a      	str	r2, [r3, #8]
	}

}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	0036ee80 	.word	0x0036ee80

0800116c <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7c9b      	ldrb	r3, [r3, #18]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00e      	beq.n	800119a <_ZN11ChronoTimer10startTimerEv+0x2e>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7c1b      	ldrb	r3, [r3, #16]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00a      	beq.n	800119a <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 8001190:	f002 f9b8 	bl	8003504 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60da      	str	r2, [r3, #12]
	}
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
	if(isStarted)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7c5b      	ldrb	r3, [r3, #17]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
	}
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	stopTimer();
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffe3 	bl	80011a2 <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ffc5 	bl	800116c <_ZN11ChronoTimer10startTimerEv>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	460b      	mov	r3, r1
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 80011f8:	2300      	movs	r3, #0
 80011fa:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f7ff ff6d 	bl	80010e4 <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f7ff ffae 	bl	800116c <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 8001210:	f002 f978 	bl	8003504 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	1ad2      	subs	r2, r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	bf2c      	ite	cs
 8001224:	2301      	movcs	r3, #1
 8001226:	2300      	movcc	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 800122e:	2301      	movs	r3, #1
 8001230:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 8001238:	7dfb      	ldrb	r3, [r7, #23]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff ffc5 	bl	80011ce <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 8001244:	7dfb      	ldrb	r3, [r7, #23]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af02      	add	r7, sp, #8
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <_ZNSt7__cxx119to_stringEi+0x24>)
 8001262:	2210      	movs	r2, #16
 8001264:	4904      	ldr	r1, [pc, #16]	; (8001278 <_ZNSt7__cxx119to_stringEi+0x28>)
 8001266:	f000 fc0d 	bl	8001a84 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	08008e58 	.word	0x08008e58
 8001278:	08008811 	.word	0x08008811

0800127c <_ZL7bcd2binh>:
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	111b      	asrs	r3, r3, #4
 800128a:	b2db      	uxtb	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	b2da      	uxtb	r2, r3
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4413      	add	r3, r2
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t; // @suppress("Return with parenthesis")
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 80012ae:	23d0      	movs	r3, #208	; 0xd0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2220      	movs	r2, #32
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f007 f973 	bl	80085b4 <memset>
	i2cBufferIndex = 0;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2020 	strb.w	r2, [r3, #32]
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
	...

080012fc <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
	clearI2CBuff();
}

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af02      	add	r7, sp, #8
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffd7 	bl	80012ba <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ffca 	bl	80012a6 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8001312:	4603      	mov	r3, r0
 8001314:	4619      	mov	r1, r3
 8001316:	2301      	movs	r3, #1
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2200      	movs	r2, #0
 800131e:	4848      	ldr	r0, [pc, #288]	; (8001440 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8001320:	f003 faa8 	bl	8004874 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ffbe 	bl	80012a6 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800132a:	4603      	mov	r3, r0
 800132c:	4619      	mov	r1, r3
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	2301      	movs	r3, #1
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2307      	movs	r3, #7
 8001336:	4842      	ldr	r0, [pc, #264]	; (8001440 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8001338:	f003 fb9a 	bl	8004a70 <HAL_I2C_Master_Receive>
	RetTimeDate.second = bcd2bin(i2cBuffer[i2cBufferIndex++] & 0x7F);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	b2d1      	uxtb	r1, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	f882 1020 	strb.w	r1, [r2, #32]
 800134c:	461a      	mov	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	5c9b      	ldrb	r3, [r3, r2]
 8001352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001356:	b2db      	uxtb	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff8f 	bl	800127c <_ZL7bcd2binh>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	b2d1      	uxtb	r1, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	f882 1020 	strb.w	r1, [r2, #32]
 8001376:	461a      	mov	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	5c9b      	ldrb	r3, [r3, r2]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff7d 	bl	800127c <_ZL7bcd2binh>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	b2d1      	uxtb	r1, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	f882 1020 	strb.w	r1, [r2, #32]
 800139a:	461a      	mov	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	5c9b      	ldrb	r3, [r3, r2]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff6b 	bl	800127c <_ZL7bcd2binh>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	b2d1      	uxtb	r1, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	f882 1020 	strb.w	r1, [r2, #32]
 80013ce:	461a      	mov	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	5c9b      	ldrb	r3, [r3, r2]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff51 	bl	800127c <_ZL7bcd2binh>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	b2d1      	uxtb	r1, r2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f882 1020 	strb.w	r1, [r2, #32]
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	5c9b      	ldrb	r3, [r3, r2]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff3f 	bl	800127c <_ZL7bcd2binh>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bcd2bin(i2cBuffer[i2cBufferIndex++]) + 2000;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	b2d1      	uxtb	r1, r2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	f882 1020 	strb.w	r1, [r2, #32]
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	5c9b      	ldrb	r3, [r3, r2]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff2d 	bl	800127c <_ZL7bcd2binh>
 8001422:	4603      	mov	r3, r0
 8001424:	b29b      	uxth	r3, r3
 8001426:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800142a:	b29a      	uxth	r2, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff42 	bl	80012ba <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000554 	.word	0x20000554

08001444 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 800144a:	af00      	add	r7, sp, #0
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	6018      	str	r0, [r3, #0]
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	6019      	str	r1, [r3, #0]
 8001458:	1dfb      	adds	r3, r7, #7
 800145a:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 800145c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001460:	4618      	mov	r0, r3
 8001462:	f006 fdad 	bl	8007fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001466:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800146a:	4618      	mov	r0, r3
 800146c:	f006 fda8 	bl	8007fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001470:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001474:	4618      	mov	r0, r3
 8001476:	f006 fda3 	bl	8007fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800147a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800147e:	4618      	mov	r0, r3
 8001480:	f006 fd9e 	bl	8007fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001484:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001488:	4618      	mov	r0, r3
 800148a:	f006 fd99 	bl	8007fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4618      	mov	r0, r3
 8001494:	f006 fd94 	bl	8007fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001498:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800149c:	4618      	mov	r0, r3
 800149e:	f006 fc8d 	bl	8007dbc <_ZNSaIcEC1Ev>
 80014a2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	49df      	ldr	r1, [pc, #892]	; (8001828 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e4>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f006 ff67 	bl	8008380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80014b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014b6:	4618      	mov	r0, r3
 80014b8:	f006 fc81 	bl	8007dbe <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 80014bc:	f107 0214 	add.w	r2, r7, #20
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4611      	mov	r1, r2
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	f7ff ff18 	bl	80012fc <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = TimeDate.second > 9 ? std::to_string(TimeDate.second) : "0" + std::to_string(TimeDate.second);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2400      	movs	r4, #0
 80014d4:	2b09      	cmp	r3, #9
 80014d6:	d90a      	bls.n	80014ee <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xaa>
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff feb2 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 80014ec:	e012      	b.n	8001514 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xd0>
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fea7 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 8001502:	2401      	movs	r4, #1
 8001504:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001508:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800150c:	49c7      	ldr	r1, [pc, #796]	; (800182c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 800150e:	4618      	mov	r0, r3
 8001510:	f000 faf0 	bl	8001af4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001514:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001518:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f006 fd75 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001524:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001528:	4618      	mov	r0, r3
 800152a:	f006 fd6a 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800152e:	2c00      	cmp	r4, #0
 8001530:	d004      	beq.n	800153c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xf8>
 8001532:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001536:	4618      	mov	r0, r3
 8001538:	f006 fd63 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = TimeDate.minute > 9 ? std::to_string(TimeDate.minute) : "0" + std::to_string(TimeDate.minute);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	2400      	movs	r4, #0
 8001544:	2b09      	cmp	r3, #9
 8001546:	d90a      	bls.n	800155e <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x11a>
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	785b      	ldrb	r3, [r3, #1]
 800154e:	461a      	mov	r2, r3
 8001550:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fe7a 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 800155c:	e012      	b.n	8001584 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x140>
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	461a      	mov	r2, r3
 8001566:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fe6f 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 8001572:	2401      	movs	r4, #1
 8001574:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001578:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800157c:	49ab      	ldr	r1, [pc, #684]	; (800182c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fab8 	bl	8001af4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001584:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001588:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f006 fd3d 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001594:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001598:	4618      	mov	r0, r3
 800159a:	f006 fd32 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800159e:	2c00      	cmp	r4, #0
 80015a0:	d004      	beq.n	80015ac <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x168>
 80015a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015a6:	4618      	mov	r0, r3
 80015a8:	f006 fd2b 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = TimeDate.hour > 9 ? std::to_string(TimeDate.hour) : "0" + std::to_string(TimeDate.hour);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	789b      	ldrb	r3, [r3, #2]
 80015b2:	2400      	movs	r4, #0
 80015b4:	2b09      	cmp	r3, #9
 80015b6:	d90a      	bls.n	80015ce <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x18a>
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	461a      	mov	r2, r3
 80015c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fe42 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 80015cc:	e012      	b.n	80015f4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1b0>
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	789b      	ldrb	r3, [r3, #2]
 80015d4:	461a      	mov	r2, r3
 80015d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fe37 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 80015e2:	2401      	movs	r4, #1
 80015e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015e8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80015ec:	498f      	ldr	r1, [pc, #572]	; (800182c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 fa80 	bl	8001af4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80015f4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f006 fd05 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001604:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001608:	4618      	mov	r0, r3
 800160a:	f006 fcfa 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800160e:	2c00      	cmp	r4, #0
 8001610:	d004      	beq.n	800161c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1d8>
 8001612:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001616:	4618      	mov	r0, r3
 8001618:	f006 fcf3 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = TimeDate.day > 9 ? std::to_string(TimeDate.day) : "0" + std::to_string(TimeDate.day);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	78db      	ldrb	r3, [r3, #3]
 8001622:	2400      	movs	r4, #0
 8001624:	2b09      	cmp	r3, #9
 8001626:	d90a      	bls.n	800163e <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1fa>
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	78db      	ldrb	r3, [r3, #3]
 800162e:	461a      	mov	r2, r3
 8001630:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fe0a 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 800163c:	e012      	b.n	8001664 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x220>
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	78db      	ldrb	r3, [r3, #3]
 8001644:	461a      	mov	r2, r3
 8001646:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fdff 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 8001652:	2401      	movs	r4, #1
 8001654:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001658:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800165c:	4973      	ldr	r1, [pc, #460]	; (800182c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fa48 	bl	8001af4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001664:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001668:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f006 fccd 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001674:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001678:	4618      	mov	r0, r3
 800167a:	f006 fcc2 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800167e:	2c00      	cmp	r4, #0
 8001680:	d004      	beq.n	800168c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x248>
 8001682:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001686:	4618      	mov	r0, r3
 8001688:	f006 fcbb 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = TimeDate.month > 9 ? std::to_string(TimeDate.month) : "0" + std::to_string(TimeDate.month);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	791b      	ldrb	r3, [r3, #4]
 8001692:	2400      	movs	r4, #0
 8001694:	2b09      	cmp	r3, #9
 8001696:	d90a      	bls.n	80016ae <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x26a>
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	791b      	ldrb	r3, [r3, #4]
 800169e:	461a      	mov	r2, r3
 80016a0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fdd2 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 80016ac:	e012      	b.n	80016d4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x290>
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	791b      	ldrb	r3, [r3, #4]
 80016b4:	461a      	mov	r2, r3
 80016b6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fdc7 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 80016c2:	2401      	movs	r4, #1
 80016c4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80016c8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80016cc:	4957      	ldr	r1, [pc, #348]	; (800182c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fa10 	bl	8001af4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80016d4:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80016d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f006 fc95 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80016e4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80016e8:	4618      	mov	r0, r3
 80016ea:	f006 fc8a 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80016ee:	2c00      	cmp	r4, #0
 80016f0:	d004      	beq.n	80016fc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x2b8>
 80016f2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80016f6:	4618      	mov	r0, r3
 80016f8:	f006 fc83 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year % 100);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	88db      	ldrh	r3, [r3, #6]
 8001702:	4a4b      	ldr	r2, [pc, #300]	; (8001830 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3ec>)
 8001704:	fba2 1203 	umull	r1, r2, r2, r3
 8001708:	0952      	lsrs	r2, r2, #5
 800170a:	2164      	movs	r1, #100	; 0x64
 800170c:	fb01 f202 	mul.w	r2, r1, r2
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fd97 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 8001722:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f006 fc6e 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001732:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001736:	4618      	mov	r0, r3
 8001738:	f006 fc63 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b04      	cmp	r3, #4
 8001742:	f200 816c 	bhi.w	8001a1e <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5da>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x308>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	08001761 	.word	0x08001761
 8001750:	080017df 	.word	0x080017df
 8001754:	08001839 	.word	0x08001839
 8001758:	080018b7 	.word	0x080018b7
 800175c:	080018ff 	.word	0x080018ff
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001768:	4a32      	ldr	r2, [pc, #200]	; (8001834 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f9da 	bl	8001b24 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8001770:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001774:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001778:	f507 7100 	add.w	r1, r7, #512	; 0x200
 800177c:	4618      	mov	r0, r3
 800177e:	f000 f9e4 	bl	8001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8001782:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001786:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 800178a:	4a2a      	ldr	r2, [pc, #168]	; (8001834 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f9f3 	bl	8001b78 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001792:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001796:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800179a:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f9d3 	bl	8001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80017a4:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4611      	mov	r1, r2
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	f006 fc2d 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80017b4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80017b8:	4618      	mov	r0, r3
 80017ba:	f006 fc22 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017be:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f006 fc1d 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017c8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80017cc:	4618      	mov	r0, r3
 80017ce:	f006 fc18 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d6:	4618      	mov	r0, r3
 80017d8:	f006 fc13 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 80017dc:	e120      	b.n	8001a20 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 80017de:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80017e2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 f99b 	bl	8001b24 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80017ee:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80017f2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80017f6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f9a5 	bl	8001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8001800:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4611      	mov	r1, r2
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	f006 fbff 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001810:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001814:	4618      	mov	r0, r3
 8001816:	f006 fbf4 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800181a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800181e:	4618      	mov	r0, r3
 8001820:	f006 fbef 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8001824:	e0fc      	b.n	8001a20 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
 8001826:	bf00      	nop
 8001828:	08008e5c 	.word	0x08008e5c
 800182c:	08008e68 	.word	0x08008e68
 8001830:	51eb851f 	.word	0x51eb851f
 8001834:	08008e6c 	.word	0x08008e6c
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 8001838:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800183c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001840:	4a8d      	ldr	r2, [pc, #564]	; (8001a78 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f96e 	bl	8001b24 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8001848:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800184c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001850:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8001854:	4618      	mov	r0, r3
 8001856:	f000 f978 	bl	8001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800185a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800185e:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8001862:	4a85      	ldr	r2, [pc, #532]	; (8001a78 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8001864:	4618      	mov	r0, r3
 8001866:	f000 f987 	bl	8001b78 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800186a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800186e:	f107 021c 	add.w	r2, r7, #28
 8001872:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f967 	bl	8001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800187c:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4611      	mov	r1, r2
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	f006 fbc1 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800188c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001890:	4618      	mov	r0, r3
 8001892:	f006 fbb6 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001896:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800189a:	4618      	mov	r0, r3
 800189c:	f006 fbb1 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80018a0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80018a4:	4618      	mov	r0, r3
 80018a6:	f006 fbac 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80018aa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80018ae:	4618      	mov	r0, r3
 80018b0:	f006 fba7 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 80018b4:	e0b4      	b.n	8001a20 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 80018b6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80018ba:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80018be:	4a6e      	ldr	r2, [pc, #440]	; (8001a78 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 f92f 	bl	8001b24 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80018c6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80018ca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018ce:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f939 	bl	8001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80018d8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4611      	mov	r1, r2
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	f006 fb93 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80018e8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80018ec:	4618      	mov	r0, r3
 80018ee:	f006 fb88 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80018f2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f006 fb83 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 80018fc:	e090      	b.n	8001a20 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 80018fe:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001902:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001906:	4a5d      	ldr	r2, [pc, #372]	; (8001a7c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f90b 	bl	8001b24 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800190e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001912:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001916:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f915 	bl	8001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8001920:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001924:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8001928:	4a54      	ldr	r2, [pc, #336]	; (8001a7c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f924 	bl	8001b78 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001930:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001934:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001938:	f507 7160 	add.w	r1, r7, #896	; 0x380
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f904 	bl	8001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8001942:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8001946:	f507 715a 	add.w	r1, r7, #872	; 0x368
 800194a:	4a4d      	ldr	r2, [pc, #308]	; (8001a80 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x63c>)
 800194c:	4618      	mov	r0, r3
 800194e:	f000 f913 	bl	8001b78 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001952:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001956:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800195a:	f507 7154 	add.w	r1, r7, #848	; 0x350
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f8f3 	bl	8001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8001964:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001968:	f507 714e 	add.w	r1, r7, #824	; 0x338
 800196c:	4a42      	ldr	r2, [pc, #264]	; (8001a78 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f902 	bl	8001b78 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001974:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001978:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800197c:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f8e2 	bl	8001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8001986:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800198a:	f507 7142 	add.w	r1, r7, #776	; 0x308
 800198e:	4a3a      	ldr	r2, [pc, #232]	; (8001a78 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f8f1 	bl	8001b78 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001996:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800199a:	f107 021c 	add.w	r2, r7, #28
 800199e:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f8d1 	bl	8001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80019a8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	4611      	mov	r1, r2
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	f006 fb2b 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80019b8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80019bc:	4618      	mov	r0, r3
 80019be:	f006 fb20 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f006 fb1b 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019cc:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80019d0:	4618      	mov	r0, r3
 80019d2:	f006 fb16 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019d6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80019da:	4618      	mov	r0, r3
 80019dc:	f006 fb11 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019e0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80019e4:	4618      	mov	r0, r3
 80019e6:	f006 fb0c 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019ea:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80019ee:	4618      	mov	r0, r3
 80019f0:	f006 fb07 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019f4:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80019f8:	4618      	mov	r0, r3
 80019fa:	f006 fb02 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019fe:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 fafd 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a08:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f006 faf8 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a12:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 faf3 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8001a1c:	e000      	b.n	8001a20 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	default:
		break;
 8001a1e:	bf00      	nop
	}
	return RetStr;
 8001a20:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4618      	mov	r0, r3
 8001a28:	f006 faeb 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a30:	4618      	mov	r0, r3
 8001a32:	f006 fae6 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f006 fae1 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a44:	4618      	mov	r0, r3
 8001a46:	f006 fadc 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f006 fad7 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a54:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f006 fad2 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	f107 020c 	add.w	r2, r7, #12
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd90      	pop	{r4, r7, pc}
 8001a78:	08008e70 	.word	0x08008e70
 8001a7c:	08008e6c 	.word	0x08008e6c
 8001a80:	08008e74 	.word	0x08008e74

08001a84 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8001a84:	b408      	push	{r3}
 8001a86:	b590      	push	{r4, r7, lr}
 8001a88:	b088      	sub	sp, #32
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3307      	adds	r3, #7
 8001a96:	3307      	adds	r3, #7
 8001a98:	08db      	lsrs	r3, r3, #3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	ebad 0d03 	sub.w	sp, sp, r3
 8001aa0:	466b      	mov	r3, sp
 8001aa2:	3307      	adds	r3, #7
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8001aaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aae:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8001ab0:	68bc      	ldr	r4, [r7, #8]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	69f8      	ldr	r0, [r7, #28]
 8001aba:	47a0      	blx	r4
 8001abc:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	18d4      	adds	r4, r2, r3
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f006 f977 	bl	8007dbc <_ZNSaIcEC1Ev>
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	69f9      	ldr	r1, [r7, #28]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f865 	bl	8001ba6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f006 f96c 	bl	8007dbe <_ZNSaIcED1Ev>
    }
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001af0:	b001      	add	sp, #4
 8001af2:	4770      	bx	lr

08001af4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	2100      	movs	r1, #0
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f006 fba9 	bl	800825c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 f865 	bl	8001bdc <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4619      	mov	r1, r3
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f006 fa59 	bl	8007fce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f006 fbf2 	bl	800831c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f006 fbd4 	bl	80082e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8001b40:	bf00      	nop
    }
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	68b8      	ldr	r0, [r7, #8]
 8001b5a:	f006 fbaf 	bl	80082bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f83b 	bl	8001bdc <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4619      	mov	r1, r3
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f006 fa2f 	bl	8007fce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f006 fbae 	bl	80082e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f824 	bl	8001bdc <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4619      	mov	r1, r3
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f006 fa18 	bl	8007fce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8001ba6:	b590      	push	{r4, r7, lr}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8001bb4:	68fc      	ldr	r4, [r7, #12]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f006 f92b 	bl	8007e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f006 fba8 	bl	8008318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f80f 	bl	8001bf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd90      	pop	{r4, r7, pc}

08001bdc <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f804 	bl	8001c0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001c0e:	b590      	push	{r4, r7, lr}
 8001c10:	b087      	sub	sp, #28
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8001c1c:	4623      	mov	r3, r4
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f804 	bl	8001c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8001c28:	bf00      	nop
 8001c2a:	371c      	adds	r7, #28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}

08001c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001c3e:	68b8      	ldr	r0, [r7, #8]
 8001c40:	f000 f83e 	bl	8001cc0 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d001      	beq.n	8001c56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001c56:	2300      	movs	r3, #0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001c5c:	4817      	ldr	r0, [pc, #92]	; (8001cbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8001c5e:	f006 f8af 	bl	8007dc0 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	68b8      	ldr	r0, [r7, #8]
 8001c66:	f000 f843 	bl	8001cf0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d910      	bls.n	8001c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f006 f8d1 	bl	8007e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4619      	mov	r1, r3
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f006 f8bf 	bl	8007e0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f006 f8c0 	bl	8007e16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f006 f8b9 	bl	8007e0e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f006 f91b 	bl	8007ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4619      	mov	r1, r3
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f006 f8b4 	bl	8007e1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	08008e78 	.word	0x08008e78

08001cc0 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf0c      	ite	eq
 8001cce:	2301      	moveq	r3, #1
 8001cd0:	2300      	movne	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001cfa:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ffed 	bl	8001cde <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8001d04:	462a      	mov	r2, r5
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f000 f805 	bl	8001d18 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8001d0e:	4603      	mov	r3, r0
    }
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bdb0      	pop	{r4, r5, r7, pc}

08001d18 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
    }
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <_Z7DelayNsm>:
#include "tim.h"

u8g2_t U8G2_Display;

void DelayNs(uint32_t NsDelay)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	d801      	bhi.n	8001d46 <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 8001d42:	2310      	movs	r3, #16
 8001d44:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <_Z7DelayNsm+0x3c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <_Z7DelayNsm+0x3c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	bf8c      	ite	hi
 8001d5a:	2301      	movhi	r3, #1
 8001d5c:	2300      	movls	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d000      	beq.n	8001d66 <_Z7DelayNsm+0x32>
 8001d64:	e7f3      	b.n	8001d4e <_Z7DelayNsm+0x1a>
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000600 	.word	0x20000600

08001d74 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	72fb      	strb	r3, [r7, #11]
 8001d82:	4613      	mov	r3, r2
 8001d84:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 8001d86:	7afb      	ldrb	r3, [r7, #11]
 8001d88:	3b28      	subs	r3, #40	; 0x28
 8001d8a:	2b23      	cmp	r3, #35	; 0x23
 8001d8c:	d873      	bhi.n	8001e76 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x102>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001e81 	.word	0x08001e81
 8001d98:	08001e43 	.word	0x08001e43
 8001d9c:	08001e39 	.word	0x08001e39
 8001da0:	08001e2f 	.word	0x08001e2f
 8001da4:	08001e25 	.word	0x08001e25
 8001da8:	08001e77 	.word	0x08001e77
 8001dac:	08001e77 	.word	0x08001e77
 8001db0:	08001e77 	.word	0x08001e77
 8001db4:	08001e77 	.word	0x08001e77
 8001db8:	08001e77 	.word	0x08001e77
 8001dbc:	08001e77 	.word	0x08001e77
 8001dc0:	08001e77 	.word	0x08001e77
 8001dc4:	08001e77 	.word	0x08001e77
 8001dc8:	08001e77 	.word	0x08001e77
 8001dcc:	08001e77 	.word	0x08001e77
 8001dd0:	08001e77 	.word	0x08001e77
 8001dd4:	08001e77 	.word	0x08001e77
 8001dd8:	08001e77 	.word	0x08001e77
 8001ddc:	08001e77 	.word	0x08001e77
 8001de0:	08001e77 	.word	0x08001e77
 8001de4:	08001e77 	.word	0x08001e77
 8001de8:	08001e77 	.word	0x08001e77
 8001dec:	08001e77 	.word	0x08001e77
 8001df0:	08001e77 	.word	0x08001e77
 8001df4:	08001e77 	.word	0x08001e77
 8001df8:	08001e77 	.word	0x08001e77
 8001dfc:	08001e77 	.word	0x08001e77
 8001e00:	08001e77 	.word	0x08001e77
 8001e04:	08001e77 	.word	0x08001e77
 8001e08:	08001e77 	.word	0x08001e77
 8001e0c:	08001e77 	.word	0x08001e77
 8001e10:	08001e77 	.word	0x08001e77
 8001e14:	08001e77 	.word	0x08001e77
 8001e18:	08001e4d 	.word	0x08001e4d
 8001e1c:	08001e5b 	.word	0x08001e5b
 8001e20:	08001e69 	.word	0x08001e69
	{
	case U8X8_MSG_GPIO_AND_DELAY_INIT:	// called once during init phase of u8g2/u8x8
		break;							// can be used to setup pins
	case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
		DelayNs(arg_int);
 8001e24:	7abb      	ldrb	r3, [r7, #10]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff84 	bl	8001d34 <_Z7DelayNsm>
		break;
 8001e2c:	e029      	b.n	8001e82 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x10e>
	case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
		DelayNs(arg_int);
 8001e2e:	7abb      	ldrb	r3, [r7, #10]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff7f 	bl	8001d34 <_Z7DelayNsm>
		break;
 8001e36:	e024      	b.n	8001e82 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x10e>
		//Function which delays 10us
	case U8X8_MSG_DELAY_10MICRO:
		DelayNs(10000);
 8001e38:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e3c:	f7ff ff7a 	bl	8001d34 <_Z7DelayNsm>
//		for (uint16_t n = 0; n < 320; n++)
//		{
//			__NOP();
//		}
		break;
 8001e40:	e01f      	b.n	8001e82 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x10e>
	case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
		HAL_Delay(arg_int);
 8001e42:	7abb      	ldrb	r3, [r7, #10]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 fb67 	bl	8003518 <HAL_Delay>
		break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 8001e4a:	e01a      	b.n	8001e82 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x10e>
//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
//	case U8X8_MSG_GPIO_SPI_DATA:
//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
//		break;
	case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
		HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8001e4c:	7abb      	ldrb	r3, [r7, #10]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2108      	movs	r1, #8
 8001e52:	480e      	ldr	r0, [pc, #56]	; (8001e8c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x118>)
 8001e54:	f002 fafc 	bl	8004450 <HAL_GPIO_WritePin>
		break;
 8001e58:	e013      	b.n	8001e82 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x10e>
	case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
		HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8001e5a:	7abb      	ldrb	r3, [r7, #10]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2108      	movs	r1, #8
 8001e60:	480a      	ldr	r0, [pc, #40]	; (8001e8c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x118>)
 8001e62:	f002 faf5 	bl	8004450 <HAL_GPIO_WritePin>
		break;
 8001e66:	e00c      	b.n	8001e82 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x10e>
	case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
		HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 8001e68:	7abb      	ldrb	r3, [r7, #10]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2140      	movs	r1, #64	; 0x40
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x118>)
 8001e70:	f002 faee 	bl	8004450 <HAL_GPIO_WritePin>
		break;
 8001e74:	e005      	b.n	8001e82 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x10e>
	default:
		u8x8_SetGPIOResult(u8x8, 1);			// default return value
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 8001e7e:	e000      	b.n	8001e82 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x10e>
		break;							// can be used to setup pins
 8001e80:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40010800 	.word	0x40010800

08001e90 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	72fb      	strb	r3, [r7, #11]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	72bb      	strb	r3, [r7, #10]
	switch(msg)
 8001ea2:	7afb      	ldrb	r3, [r7, #11]
 8001ea4:	3b14      	subs	r3, #20
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d858      	bhi.n	8001f5c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xcc>
 8001eaa:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001ef5 	.word	0x08001ef5
 8001eb4:	08001f5d 	.word	0x08001f5d
 8001eb8:	08001f5d 	.word	0x08001f5d
 8001ebc:	08001ee5 	.word	0x08001ee5
 8001ec0:	08001f15 	.word	0x08001f15
 8001ec4:	08001f39 	.word	0x08001f39
 8001ec8:	08001f5d 	.word	0x08001f5d
 8001ecc:	08001f5d 	.word	0x08001f5d
 8001ed0:	08001f5d 	.word	0x08001f5d
 8001ed4:	08001f5d 	.word	0x08001f5d
 8001ed8:	08001f5d 	.word	0x08001f5d
 8001edc:	08001f5d 	.word	0x08001f5d
 8001ee0:	08001f07 	.word	0x08001f07
	{
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 8001ee4:	7abb      	ldrb	r3, [r7, #10]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	230a      	movs	r3, #10
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	481f      	ldr	r0, [pc, #124]	; (8001f6c <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xdc>)
 8001eee:	f004 fb13 	bl	8006518 <HAL_SPI_Transmit>
		break;
 8001ef2:	e035      	b.n	8001f60 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xd0>
	case U8X8_MSG_BYTE_INIT:
		u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	461a      	mov	r2, r3
 8001efc:	2149      	movs	r1, #73	; 0x49
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7ff f85c 	bl	8000fbc <u8x8_gpio_call>
		break;
 8001f04:	e02c      	b.n	8001f60 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xd0>
	case U8X8_MSG_BYTE_SET_DC:
		u8x8_gpio_SetDC(u8g2, arg_int);
 8001f06:	7abb      	ldrb	r3, [r7, #10]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	214a      	movs	r1, #74	; 0x4a
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f7ff f855 	bl	8000fbc <u8x8_gpio_call>
		break;
 8001f12:	e025      	b.n	8001f60 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xd0>
	case U8X8_MSG_BYTE_START_TRANSFER:
		u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2149      	movs	r1, #73	; 0x49
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff f84c 	bl	8000fbc <u8x8_gpio_call>
		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	695c      	ldr	r4, [r3, #20]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	789a      	ldrb	r2, [r3, #2]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	212c      	movs	r1, #44	; 0x2c
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	47a0      	blx	r4
		break;
 8001f36:	e013      	b.n	8001f60 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xd0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	695c      	ldr	r4, [r3, #20]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	78da      	ldrb	r2, [r3, #3]
 8001f42:	2300      	movs	r3, #0
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	47a0      	blx	r4
		u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	461a      	mov	r2, r3
 8001f52:	2149      	movs	r1, #73	; 0x49
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7ff f831 	bl	8000fbc <u8x8_gpio_call>
		break;
 8001f5a:	e001      	b.n	8001f60 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xd0>
	default:
		return 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e000      	b.n	8001f62 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xd2>
	}
	return 1;
 8001f60:	2301      	movs	r3, #1
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd90      	pop	{r4, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200005a8 	.word	0x200005a8

08001f70 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f006 f820 	bl	8007fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <_ZN13NHDST7565_LCDC1Ehh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Width, uint8_t High)
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
 8001f96:	4613      	mov	r3, r2
 8001f98:	70bb      	strb	r3, [r7, #2]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ffe6 	bl	8001f70 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
{
	//	U8G2_Display = new u8g2_t();
	DispParams.width = Width;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	701a      	strb	r2, [r3, #0]
	DispParams.high = High;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	78ba      	ldrb	r2, [r7, #2]
 8001fae:	705a      	strb	r2, [r3, #1]
}
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, U8G2_R2, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_ZN13NHDST7565_LCD8setupLcdEv+0x2c>)
 8001fc6:	4a09      	ldr	r2, [pc, #36]	; (8001fec <_ZN13NHDST7565_LCD8setupLcdEv+0x30>)
 8001fc8:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <_ZN13NHDST7565_LCD8setupLcdEv+0x34>)
 8001fca:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <_ZN13NHDST7565_LCD8setupLcdEv+0x38>)
 8001fcc:	f7fe f958 	bl	8000280 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 8001fd0:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <_ZN13NHDST7565_LCD8setupLcdEv+0x38>)
 8001fd2:	f7fe ffc4 	bl	8000f5e <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <_ZN13NHDST7565_LCD8setupLcdEv+0x38>)
 8001fda:	f7fe ffcf 	bl	8000f7c <u8x8_SetPowerSave>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	08001d75 	.word	0x08001d75
 8001fec:	08001e91 	.word	0x08001e91
 8001ff0:	08009190 	.word	0x08009190
 8001ff4:	2000048c 	.word	0x2000048c

08001ff8 <_ZN13NHDST7565_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos, textToWrite.text.c_str());
}


void NHDST7565_LCD::testDisplay(String Text)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
	//	u8g2_SetFont(&U8G2_Display, u8g2_font_6x12_tn);
	u8g2_ClearBuffer(&U8G2_Display);
 8002002:	4808      	ldr	r0, [pc, #32]	; (8002024 <_ZN13NHDST7565_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>)
 8002004:	f7fe f8aa 	bl	800015c <u8g2_ClearBuffer>
	//	u8g2_DrawStr(&U8G2_Display, 20, 20, Text.c_str());
//	drawString(Text, CENTER_POS, MIDDLE_POS, u8g2_font_5x8_mf );
	u8g2_DrawHLine(&U8G2_Display, 5, 32, 100);
 8002008:	2364      	movs	r3, #100	; 0x64
 800200a:	2220      	movs	r2, #32
 800200c:	2105      	movs	r1, #5
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <_ZN13NHDST7565_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>)
 8002010:	f7fe fa67 	bl	80004e2 <u8g2_DrawHLine>
	u8g2_SendBuffer(&U8G2_Display);
 8002014:	4803      	ldr	r0, [pc, #12]	; (8002024 <_ZN13NHDST7565_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>)
 8002016:	f7fe f914 	bl	8000242 <u8g2_SendBuffer>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000048c 	.word	0x2000048c

08002028 <_ZN12STM32_EEPROMC1Ev>:

void STM32_EEPROM::saveValue(double NewVal)
{
}

STM32_EEPROM::STM32_EEPROM()
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 8002036:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800203a:	f005 fea3 	bl	8007d84 <_Znaj>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	601a      	str	r2, [r3, #0]
}
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	bool State = false;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	889b      	ldrh	r3, [r3, #4]
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f002 f9cc 	bl	8004404 <HAL_GPIO_ReadPin>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	4611      	mov	r1, r2
 8002096:	461a      	mov	r2, r3
 8002098:	460b      	mov	r3, r1
 800209a:	80fb      	strh	r3, [r7, #6]
 800209c:	4613      	mov	r3, r2
 800209e:	80bb      	strh	r3, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	819a      	strh	r2, [r3, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	88fa      	ldrh	r2, [r7, #6]
 80020bc:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	88ba      	ldrh	r2, [r7, #4]
 80020c2:	819a      	strh	r2, [r3, #12]
}
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 80020d8:	2302      	movs	r3, #2
 80020da:	73fb      	strb	r3, [r7, #15]
	bool ButtonState = readPin();
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffb7 	bl	8002050 <_ZN6BUTTON7readPinEv>
 80020e2:	4603      	mov	r3, r0
 80020e4:	73bb      	strb	r3, [r7, #14]
	if(ButtonState)
 80020e6:	7bbb      	ldrb	r3, [r7, #14]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d033      	beq.n	8002154 <_ZN6BUTTON11checkButtonEv+0x84>
	{
		longPressDelay = HAL_GetTick();
 80020ec:	f001 fa0a 	bl	8003504 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 80020f6:	7bbb      	ldrb	r3, [r7, #14]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d018      	beq.n	800212e <_ZN6BUTTON11checkButtonEv+0x5e>
		{
			ButtonState = readPin();
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ffa7 	bl	8002050 <_ZN6BUTTON7readPinEv>
 8002102:	4603      	mov	r3, r0
 8002104:	73bb      	strb	r3, [r7, #14]
			if(HAL_GetTick() - longPressDelay > delay)
 8002106:	f001 f9fd 	bl	8003504 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	8992      	ldrh	r2, [r2, #12]
 8002116:	4293      	cmp	r3, r2
 8002118:	bf8c      	ite	hi
 800211a:	2301      	movhi	r3, #1
 800211c:	2300      	movls	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0e8      	beq.n	80020f6 <_ZN6BUTTON11checkButtonEv+0x26>
			{
				Status = LONG_PRESSED;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
				wasLongPressed = true;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	739a      	strb	r2, [r3, #14]
				break;
			}
		}
		if(!wasLongPressed)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7b9b      	ldrb	r3, [r3, #14]
 8002132:	f083 0301 	eor.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <_ZN6BUTTON11checkButtonEv+0x72>
		{
			Status = PRESSED;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e002      	b.n	8002148 <_ZN6BUTTON11checkButtonEv+0x78>
		}
		else
		{
			wasLongPressed = false;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
		HAL_Delay(25);
 800214e:	2019      	movs	r0, #25
 8002150:	f001 f9e2 	bl	8003518 <HAL_Delay>
	}
	return Status;
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 1000);
 8002168:	2010      	movs	r0, #16
 800216a:	f005 fe0d 	bl	8007d88 <_Znwj>
 800216e:	4603      	mov	r3, r0
 8002170:	461c      	mov	r4, r3
 8002172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002176:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800217a:	491c      	ldr	r1, [pc, #112]	; (80021ec <_ZN8DryerKeyC1Ev+0x8c>)
 800217c:	4620      	mov	r0, r4
 800217e:	f7ff ff84 	bl	800208a <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 1000);
 8002186:	2010      	movs	r0, #16
 8002188:	f005 fdfe 	bl	8007d88 <_Znwj>
 800218c:	4603      	mov	r3, r0
 800218e:	461c      	mov	r4, r3
 8002190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002194:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002198:	4914      	ldr	r1, [pc, #80]	; (80021ec <_ZN8DryerKeyC1Ev+0x8c>)
 800219a:	4620      	mov	r0, r4
 800219c:	f7ff ff75 	bl	800208a <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 1000);
 80021a4:	2010      	movs	r0, #16
 80021a6:	f005 fdef 	bl	8007d88 <_Znwj>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461c      	mov	r4, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021b6:	490d      	ldr	r1, [pc, #52]	; (80021ec <_ZN8DryerKeyC1Ev+0x8c>)
 80021b8:	4620      	mov	r0, r4
 80021ba:	f7ff ff66 	bl	800208a <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 1000);
 80021c2:	2010      	movs	r0, #16
 80021c4:	f005 fde0 	bl	8007d88 <_Znwj>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461c      	mov	r4, r3
 80021cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021d4:	4905      	ldr	r1, [pc, #20]	; (80021ec <_ZN8DryerKeyC1Ev+0x8c>)
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7ff ff57 	bl	800208a <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	60dc      	str	r4, [r3, #12]
}
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40010c00 	.word	0x40010c00

080021f0 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 80021f8:	2308      	movs	r3, #8
 80021fa:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b03      	cmp	r3, #3
 8002204:	dc1d      	bgt.n	8002242 <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff5e 	bl	80020d0 <_ZN6BUTTON11checkButtonEv>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	75fb      	strb	r3, [r7, #23]
 8002222:	e006      	b.n	8002232 <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d103      	bne.n	8002232 <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	3304      	adds	r3, #4
 8002230:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d103      	bne.n	8002240 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	3301      	adds	r3, #1
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	e7df      	b.n	8002200 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 8002240:	bf00      	nop
		}
	}
	return KeyPressed;
 8002242:	7dfb      	ldrb	r3, [r7, #23]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <_ZN4RELE6setPinE9PIN_STATE+0x20>
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d003      	beq.n	800226c <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	719a      	strb	r2, [r3, #6]
 800226a:	e007      	b.n	800227c <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	799b      	ldrb	r3, [r3, #6]
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	429a      	cmp	r2, r3
 8002274:	d002      	beq.n	800227c <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8899      	ldrh	r1, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	799b      	ldrb	r3, [r3, #6]
 8002288:	461a      	mov	r2, r3
 800228a:	f002 f8e1 	bl	8004450 <HAL_GPIO_WritePin>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	4611      	mov	r1, r2
 80022a2:	461a      	mov	r2, r3
 80022a4:	460b      	mov	r3, r1
 80022a6:	80fb      	strh	r3, [r7, #6]
 80022a8:	4613      	mov	r3, r2
 80022aa:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	797a      	ldrb	r2, [r7, #5]
 80022bc:	719a      	strb	r2, [r3, #6]

}
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffb6 	bl	800224c <_ZN4RELE6setPinE9PIN_STATE>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <_ZN11SerialDebug11writeSerialEv>:
//{
//	RxReady = true;
//}

void SerialDebug::writeSerial()
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f005 feb0 	bl	8008058 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80022f8:	4603      	mov	r3, r0
 80022fa:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4618      	mov	r0, r3
 8002300:	f006 f808 	bl	8008314 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002304:	4601      	mov	r1, r0
 8002306:	89fa      	ldrh	r2, [r7, #14]
 8002308:	2364      	movs	r3, #100	; 0x64
 800230a:	4803      	ldr	r0, [pc, #12]	; (8002318 <_ZN11SerialDebug11writeSerialEv+0x30>)
 800230c:	f005 f862 	bl	80073d4 <HAL_UART_Transmit>
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000640 	.word	0x20000640

0800231c <_ZN11SerialDebugC1Ev>:


SerialDebug::SerialDebug()
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4618      	mov	r0, r3
 8002328:	f005 fe4a 	bl	8007fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2020 	strb.w	r2, [r3, #32]
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
}
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void SerialDebug::sendDbgStr(std::string DbgStr)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
	if(!DbgStr.empty())
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f005 feb7 	bl	80080be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8002350:	4603      	mov	r3, r0
 8002352:	f083 0301 	eor.w	r3, r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	{
		serialBuffer = DbgStr + "\n";
 800235c:	687c      	ldr	r4, [r7, #4]
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	4a0e      	ldr	r2, [pc, #56]	; (800239c <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fbdc 	bl	8001b24 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800236c:	f107 0308 	add.w	r3, r7, #8
 8002370:	4619      	mov	r1, r3
 8002372:	4620      	mov	r0, r4
 8002374:	f005 fe4b 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4618      	mov	r0, r3
 800237e:	f005 fe40 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002382:	e004      	b.n	800238e <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4906      	ldr	r1, [pc, #24]	; (80023a0 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>)
 8002388:	4618      	mov	r0, r3
 800238a:	f005 ff4a 	bl	8008222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	}
	writeSerial();
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffaa 	bl	80022e8 <_ZN11SerialDebug11writeSerialEv>
}
 8002394:	bf00      	nop
 8002396:	3724      	adds	r7, #36	; 0x24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}
 800239c:	08008ea4 	.word	0x08008ea4
 80023a0:	08008ea8 	.word	0x08008ea8

080023a4 <_ZN11SerialDebug12readSerialITEPh>:

bool SerialDebug::readSerialIT(uint8_t *Data)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
	bool Ready = false;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
//	if(RxReady)
//	{
		Ready = true;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 100);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f103 011a 	add.w	r1, r3, #26
 80023bc:	2364      	movs	r3, #100	; 0x64
 80023be:	2206      	movs	r2, #6
 80023c0:	480a      	ldr	r0, [pc, #40]	; (80023ec <_ZN11SerialDebug12readSerialITEPh+0x48>)
 80023c2:	f005 f8a0 	bl	8007506 <HAL_UART_Receive>
		memcpy(Data, rxBuffer, RECEIVE_BUFFER_LEN);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	331a      	adds	r3, #26
 80023ca:	2206      	movs	r2, #6
 80023cc:	4619      	mov	r1, r3
 80023ce:	6838      	ldr	r0, [r7, #0]
 80023d0:	f006 f8cc 	bl	800856c <memcpy>
		memset(rxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	331a      	adds	r3, #26
 80023d8:	2206      	movs	r2, #6
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f006 f8e9 	bl	80085b4 <memset>
//		RxReady = false;
//	}
	return Ready;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000640 	.word	0x20000640

080023f0 <_ZNSt11char_traitsIcE6lengthEPKc>:
	  return 0;
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus > 201402
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7fd fea7 	bl	800014c <strlen>
 80023fe:	4603      	mov	r3, r0
      }
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZN10SmartDryer10DRYER_FLAGC1Ev>:
	typedef struct
	{
		bool thermoOn = false;
		bool fanOn = false;

	}DRYER_FLAG;
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	705a      	strb	r2, [r3, #1]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2020 	strb.w	r2, [r3, #32]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <_ZN10SmartDryerC1Ev>:

#include <SmartDryer.h>

#define TOLLERANCE_DEGREES	55

SmartDryer::SmartDryer()
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3330      	adds	r3, #48	; 0x30
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ffd9 	bl	8002408 <_ZN10SmartDryer10DRYER_FLAGC1Ev>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f240 12f7 	movw	r2, #503	; 0x1f7
 800245c:	865a      	strh	r2, [r3, #50]	; 0x32
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	635a      	str	r2, [r3, #52]	; 0x34
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
{
	display = new NHDST7565_LCD(128, 64);
 800246c:	2024      	movs	r0, #36	; 0x24
 800246e:	f005 fc8b 	bl	8007d88 <_Znwj>
 8002472:	4603      	mov	r3, r0
 8002474:	461c      	mov	r4, r3
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	2180      	movs	r1, #128	; 0x80
 800247a:	4620      	mov	r0, r4
 800247c:	f7ff fd85 	bl	8001f8a <_ZN13NHDST7565_LCDC1Ehh>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	601c      	str	r4, [r3, #0]
	clock = new DS1307_RTC();
 8002484:	2021      	movs	r0, #33	; 0x21
 8002486:	f005 fc7f 	bl	8007d88 <_Znwj>
 800248a:	4603      	mov	r3, r0
 800248c:	461c      	mov	r4, r3
 800248e:	4620      	mov	r0, r4
 8002490:	f7fe ff25 	bl	80012de <_ZN10DS1307_RTCC1Ev>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	605c      	str	r4, [r3, #4]
	keyboard = new DryerKey();
 8002498:	2010      	movs	r0, #16
 800249a:	f005 fc75 	bl	8007d88 <_Znwj>
 800249e:	4603      	mov	r3, r0
 80024a0:	461c      	mov	r4, r3
 80024a2:	4620      	mov	r0, r4
 80024a4:	f7ff fe5c 	bl	8002160 <_ZN8DryerKeyC1Ev>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 80024ac:	2021      	movs	r0, #33	; 0x21
 80024ae:	f005 fc6b 	bl	8007d88 <_Znwj>
 80024b2:	4603      	mov	r3, r0
 80024b4:	461c      	mov	r4, r3
 80024b6:	4620      	mov	r0, r4
 80024b8:	2321      	movs	r3, #33	; 0x21
 80024ba:	461a      	mov	r2, r3
 80024bc:	2100      	movs	r1, #0
 80024be:	f006 f879 	bl	80085b4 <memset>
 80024c2:	4620      	mov	r0, r4
 80024c4:	f7ff ffb0 	bl	8002428 <_ZN13THERMO_SENSORC1Ev>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 80024cc:	2008      	movs	r0, #8
 80024ce:	f005 fc5b 	bl	8007d88 <_Znwj>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461c      	mov	r4, r3
 80024d6:	2300      	movs	r3, #0
 80024d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024dc:	492c      	ldr	r1, [pc, #176]	; (8002590 <_ZN10SmartDryerC1Ev+0x14c>)
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff fed9 	bl	8002296 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 80024e8:	2008      	movs	r0, #8
 80024ea:	f005 fc4d 	bl	8007d88 <_Znwj>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461c      	mov	r4, r3
 80024f2:	2300      	movs	r3, #0
 80024f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f8:	4925      	ldr	r1, [pc, #148]	; (8002590 <_ZN10SmartDryerC1Ev+0x14c>)
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7ff fecb 	bl	8002296 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 8002504:	2008      	movs	r0, #8
 8002506:	f005 fc3f 	bl	8007d88 <_Znwj>
 800250a:	4603      	mov	r3, r0
 800250c:	461c      	mov	r4, r3
 800250e:	4620      	mov	r0, r4
 8002510:	f7ff fd8a 	bl	8002028 <_ZN12STM32_EEPROMC1Ev>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::SECONDS);
 8002518:	2014      	movs	r0, #20
 800251a:	f005 fc35 	bl	8007d88 <_Znwj>
 800251e:	4603      	mov	r3, r0
 8002520:	461c      	mov	r4, r3
 8002522:	2101      	movs	r1, #1
 8002524:	4620      	mov	r0, r4
 8002526:	f7fe fdb6 	bl	8001096 <_ZN11ChronoTimerC1Eh>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800252e:	2014      	movs	r0, #20
 8002530:	f005 fc2a 	bl	8007d88 <_Znwj>
 8002534:	4603      	mov	r3, r0
 8002536:	461c      	mov	r4, r3
 8002538:	2100      	movs	r1, #0
 800253a:	4620      	mov	r0, r4
 800253c:	f7fe fdab 	bl	8001096 <_ZN11ChronoTimerC1Eh>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8002544:	2014      	movs	r0, #20
 8002546:	f005 fc1f 	bl	8007d88 <_Znwj>
 800254a:	4603      	mov	r3, r0
 800254c:	461c      	mov	r4, r3
 800254e:	2100      	movs	r1, #0
 8002550:	4620      	mov	r0, r4
 8002552:	f7fe fda0 	bl	8001096 <_ZN11ChronoTimerC1Eh>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	625c      	str	r4, [r3, #36]	; 0x24

	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800255a:	2014      	movs	r0, #20
 800255c:	f005 fc14 	bl	8007d88 <_Znwj>
 8002560:	4603      	mov	r3, r0
 8002562:	461c      	mov	r4, r3
 8002564:	2100      	movs	r1, #0
 8002566:	4620      	mov	r0, r4
 8002568:	f7fe fd95 	bl	8001096 <_ZN11ChronoTimerC1Eh>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	629c      	str	r4, [r3, #40]	; 0x28

	dbgDryer = new SerialDebug();
 8002570:	2024      	movs	r0, #36	; 0x24
 8002572:	f005 fc09 	bl	8007d88 <_Znwj>
 8002576:	4603      	mov	r3, r0
 8002578:	461c      	mov	r4, r3
 800257a:	4620      	mov	r0, r4
 800257c:	f7ff fece 	bl	800231c <_ZN11SerialDebugC1Ev>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	62dc      	str	r4, [r3, #44]	; 0x2c

}
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bd90      	pop	{r4, r7, pc}
 800258e:	bf00      	nop
 8002590:	40010800 	.word	0x40010800

08002594 <_ZN10SmartDryer8blinkLedEht>:


void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
 80025a0:	4613      	mov	r3, r2
 80025a2:	803b      	strh	r3, [r7, #0]
//	GPIO_TypeDef *LedPort;
//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 80025a4:	883b      	ldrh	r3, [r7, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d801      	bhi.n	80025ae <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 80025aa:	2302      	movs	r3, #2
 80025ac:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <_ZN10SmartDryer8blinkLedEht+0x26>
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d010      	beq.n	80025da <_ZN10SmartDryer8blinkLedEht+0x46>
		}
//		LedPort = GreenLed_GPIO_Port;
//		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 80025b8:	e022      	b.n	8002600 <_ZN10SmartDryer8blinkLedEht+0x6c>
		if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	883a      	ldrh	r2, [r7, #0]
 80025c0:	2101      	movs	r1, #1
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fe11 	bl	80011ea <_ZN11ChronoTimer10isFinishedEbm>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <_ZN10SmartDryer8blinkLedEht+0x66>
			toggleLed(WichLed);
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f818 	bl	8002608 <_ZN10SmartDryer9toggleLedEh>
		break;
 80025d8:	e00f      	b.n	80025fa <_ZN10SmartDryer8blinkLedEht+0x66>
		if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	883a      	ldrh	r2, [r7, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fe01 	bl	80011ea <_ZN11ChronoTimer10isFinishedEbm>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <_ZN10SmartDryer8blinkLedEht+0x6a>
			toggleLed(WichLed);
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f808 	bl	8002608 <_ZN10SmartDryer9toggleLedEh>
		break;
 80025f8:	e001      	b.n	80025fe <_ZN10SmartDryer8blinkLedEht+0x6a>
		break;
 80025fa:	bf00      	nop
 80025fc:	e000      	b.n	8002600 <_ZN10SmartDryer8blinkLedEht+0x6c>
		break;
 80025fe:	bf00      	nop
	}

}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <_ZN10SmartDryer9toggleLedEh+0x1c>
 800261e:	2b01      	cmp	r3, #1
 8002620:	d006      	beq.n	8002630 <_ZN10SmartDryer9toggleLedEh+0x28>
	case GREEN_LED:
		LedPort = GreenLed_GPIO_Port;
		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 8002622:	e00b      	b.n	800263c <_ZN10SmartDryer9toggleLedEh+0x34>
		LedPort = RedLed_GPIO_Port;
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <_ZN10SmartDryer9toggleLedEh+0x48>)
 8002626:	60fb      	str	r3, [r7, #12]
		LedPin = RedLed_Pin;
 8002628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800262c:	817b      	strh	r3, [r7, #10]
		break;
 800262e:	e005      	b.n	800263c <_ZN10SmartDryer9toggleLedEh+0x34>
		LedPort = GreenLed_GPIO_Port;
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <_ZN10SmartDryer9toggleLedEh+0x48>)
 8002632:	60fb      	str	r3, [r7, #12]
		LedPin = GreenLed_Pin;
 8002634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002638:	817b      	strh	r3, [r7, #10]
		break;
 800263a:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 800263c:	897b      	ldrh	r3, [r7, #10]
 800263e:	4619      	mov	r1, r3
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f001 ff37 	bl	80044b4 <HAL_GPIO_TogglePin>
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40010800 	.word	0x40010800

08002654 <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <_ZN10SmartDryer9turnOnLedEh+0x1c>
 800266a:	2b01      	cmp	r3, #1
 800266c:	d006      	beq.n	800267c <_ZN10SmartDryer9turnOnLedEh+0x28>
	case GREEN_LED:
		LedPort = GreenLed_GPIO_Port;
		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 800266e:	e00b      	b.n	8002688 <_ZN10SmartDryer9turnOnLedEh+0x34>
		LedPort = RedLed_GPIO_Port;
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8002672:	60fb      	str	r3, [r7, #12]
		LedPin = RedLed_Pin;
 8002674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002678:	817b      	strh	r3, [r7, #10]
		break;
 800267a:	e005      	b.n	8002688 <_ZN10SmartDryer9turnOnLedEh+0x34>
		LedPort = GreenLed_GPIO_Port;
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <_ZN10SmartDryer9turnOnLedEh+0x48>)
 800267e:	60fb      	str	r3, [r7, #12]
		LedPin = GreenLed_Pin;
 8002680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002684:	817b      	strh	r3, [r7, #10]
		break;
 8002686:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 8002688:	897b      	ldrh	r3, [r7, #10]
 800268a:	2201      	movs	r2, #1
 800268c:	4619      	mov	r1, r3
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f001 fede 	bl	8004450 <HAL_GPIO_WritePin>
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40010800 	.word	0x40010800

080026a0 <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <_ZN10SmartDryer10turnOffLedEh+0x1c>
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d006      	beq.n	80026c8 <_ZN10SmartDryer10turnOffLedEh+0x28>
	case GREEN_LED:
		LedPort = GreenLed_GPIO_Port;
		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 80026ba:	e00b      	b.n	80026d4 <_ZN10SmartDryer10turnOffLedEh+0x34>
		LedPort = RedLed_GPIO_Port;
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 80026be:	60fb      	str	r3, [r7, #12]
		LedPin = RedLed_Pin;
 80026c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026c4:	817b      	strh	r3, [r7, #10]
		break;
 80026c6:	e005      	b.n	80026d4 <_ZN10SmartDryer10turnOffLedEh+0x34>
		LedPort = GreenLed_GPIO_Port;
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 80026ca:	60fb      	str	r3, [r7, #12]
		LedPin = GreenLed_Pin;
 80026cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d0:	817b      	strh	r3, [r7, #10]
		break;
 80026d2:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 80026d4:	897b      	ldrh	r3, [r7, #10]
 80026d6:	2200      	movs	r2, #0
 80026d8:	4619      	mov	r1, r3
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f001 feb8 	bl	8004450 <HAL_GPIO_WritePin>
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40010800 	.word	0x40010800

080026ec <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d031      	beq.n	8002760 <_ZN10SmartDryer10ledControlEv+0x74>
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	dc06      	bgt.n	800270e <_ZN10SmartDryer10ledControlEv+0x22>
 8002700:	2b01      	cmp	r3, #1
 8002702:	d019      	beq.n	8002738 <_ZN10SmartDryer10ledControlEv+0x4c>
 8002704:	2b01      	cmp	r3, #1
 8002706:	dc22      	bgt.n	800274e <_ZN10SmartDryer10ledControlEv+0x62>
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00b      	beq.n	8002724 <_ZN10SmartDryer10ledControlEv+0x38>
 800270c:	e06a      	b.n	80027e4 <_ZN10SmartDryer10ledControlEv+0xf8>
 800270e:	f240 12f5 	movw	r2, #501	; 0x1f5
 8002712:	4293      	cmp	r3, r2
 8002714:	d038      	beq.n	8002788 <_ZN10SmartDryer10ledControlEv+0x9c>
 8002716:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800271a:	d04c      	beq.n	80027b6 <_ZN10SmartDryer10ledControlEv+0xca>
 800271c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002720:	d02a      	beq.n	8002778 <_ZN10SmartDryer10ledControlEv+0x8c>
 8002722:	e05f      	b.n	80027e4 <_ZN10SmartDryer10ledControlEv+0xf8>
	{
	case THERMO_ON_FAN_OFF:
		blinkLed(RED_LED, 10);
 8002724:	220a      	movs	r2, #10
 8002726:	2100      	movs	r1, #0
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff33 	bl	8002594 <_ZN10SmartDryer8blinkLedEht>
		turnOffLed(GREEN_LED);
 800272e:	2101      	movs	r1, #1
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ffb5 	bl	80026a0 <_ZN10SmartDryer10turnOffLedEh>
		break;
 8002736:	e065      	b.n	8002804 <_ZN10SmartDryer10ledControlEv+0x118>
	case THERMO_OFF_FAN_ON:
		turnOffLed(RED_LED);
 8002738:	2100      	movs	r1, #0
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffb0 	bl	80026a0 <_ZN10SmartDryer10turnOffLedEh>
		blinkLed(GREEN_LED, 500);
 8002740:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002744:	2101      	movs	r1, #1
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ff24 	bl	8002594 <_ZN10SmartDryer8blinkLedEht>
		break;
 800274c:	e05a      	b.n	8002804 <_ZN10SmartDryer10ledControlEv+0x118>
	case THERMO_OFF_FAN_OFF:
		turnOffLed(GREEN_LED);
 800274e:	2101      	movs	r1, #1
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ffa5 	bl	80026a0 <_ZN10SmartDryer10turnOffLedEh>
		turnOffLed(RED_LED);
 8002756:	2100      	movs	r1, #0
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ffa1 	bl	80026a0 <_ZN10SmartDryer10turnOffLedEh>
		break;
 800275e:	e051      	b.n	8002804 <_ZN10SmartDryer10ledControlEv+0x118>
	case THERMO_ON_FAN_ON:
		blinkLed(RED_LED, 10);
 8002760:	220a      	movs	r2, #10
 8002762:	2100      	movs	r1, #0
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff15 	bl	8002594 <_ZN10SmartDryer8blinkLedEht>
		blinkLed(GREEN_LED, 500);
 800276a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800276e:	2101      	movs	r1, #1
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff0f 	bl	8002594 <_ZN10SmartDryer8blinkLedEht>
		break;
 8002776:	e045      	b.n	8002804 <_ZN10SmartDryer10ledControlEv+0x118>
	case TEMP_REACHED:
		turnOnLed(RED_LED);
 8002778:	2100      	movs	r1, #0
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ff6a 	bl	8002654 <_ZN10SmartDryer9turnOnLedEh>
		HAL_Delay(250);
 8002780:	20fa      	movs	r0, #250	; 0xfa
 8002782:	f000 fec9 	bl	8003518 <HAL_Delay>
		break;
 8002786:	e03d      	b.n	8002804 <_ZN10SmartDryer10ledControlEv+0x118>
	case PROGRAM_INIT:
		for(int i = 0; i < 50*10; i++)
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002792:	da34      	bge.n	80027fe <_ZN10SmartDryer10ledControlEv+0x112>
		{
			blinkLed(RED_LED, 50);
 8002794:	2232      	movs	r2, #50	; 0x32
 8002796:	2100      	movs	r1, #0
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff fefb 	bl	8002594 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 50);
 800279e:	2232      	movs	r2, #50	; 0x32
 80027a0:	2101      	movs	r1, #1
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff fef6 	bl	8002594 <_ZN10SmartDryer8blinkLedEht>
			HAL_Delay(1);
 80027a8:	2001      	movs	r0, #1
 80027aa:	f000 feb5 	bl	8003518 <HAL_Delay>
		for(int i = 0; i < 50*10; i++)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3301      	adds	r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e7ea      	b.n	800278c <_ZN10SmartDryer10ledControlEv+0xa0>
		};
		break;
	case PROGRAM_END:
		for(int i = 0; i < 50*20; i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c0:	da1f      	bge.n	8002802 <_ZN10SmartDryer10ledControlEv+0x116>
		{
			blinkLed(RED_LED, 50);
 80027c2:	2232      	movs	r2, #50	; 0x32
 80027c4:	2100      	movs	r1, #0
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fee4 	bl	8002594 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 50);
 80027cc:	2232      	movs	r2, #50	; 0x32
 80027ce:	2101      	movs	r1, #1
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fedf 	bl	8002594 <_ZN10SmartDryer8blinkLedEht>
			HAL_Delay(1);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f000 fe9e 	bl	8003518 <HAL_Delay>
		for(int i = 0; i < 50*20; i++)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3301      	adds	r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	e7ea      	b.n	80027ba <_ZN10SmartDryer10ledControlEv+0xce>
		};
		break;
	case UNKNOWN_STATE:
	default:
		blinkLed(RED_LED, 1000);
 80027e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027e8:	2100      	movs	r1, #0
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fed2 	bl	8002594 <_ZN10SmartDryer8blinkLedEht>
		blinkLed(GREEN_LED, 1000);
 80027f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027f4:	2101      	movs	r1, #1
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fecc 	bl	8002594 <_ZN10SmartDryer8blinkLedEht>
		break;
 80027fc:	e002      	b.n	8002804 <_ZN10SmartDryer10ledControlEv+0x118>
		break;
 80027fe:	bf00      	nop
 8002800:	e000      	b.n	8002804 <_ZN10SmartDryer10ledControlEv+0x118>
		break;
 8002802:	bf00      	nop
	}
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_ZN10SmartDryer16physicalReleCtrlEv>:
		ledStatus = THERMO_OFF_FAN_OFF;
	}
}

void SmartDryer::physicalReleCtrl()
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	if(statusFlags.fanOn)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <_ZN10SmartDryer16physicalReleCtrlEv+0x20>
	{
		fanCtrl->setState(HIGH);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2101      	movs	r1, #1
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fd50 	bl	80022ca <_ZN4RELE8setStateE9PIN_STATE>
 800282a:	e005      	b.n	8002838 <_ZN10SmartDryer16physicalReleCtrlEv+0x2c>
	}
	else
	{
		fanCtrl->setState(LOW);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fd49 	bl	80022ca <_ZN4RELE8setStateE9PIN_STATE>
	}
	if(statusFlags.thermoOn)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800283e:	2b00      	cmp	r3, #0
 8002840:	d006      	beq.n	8002850 <_ZN10SmartDryer16physicalReleCtrlEv+0x44>
	{
		thermoCtrl->setState(HIGH);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	2101      	movs	r1, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fd3e 	bl	80022ca <_ZN4RELE8setStateE9PIN_STATE>
	}
	else
	{
		thermoCtrl->setState(LOW);
	}
}
 800284e:	e005      	b.n	800285c <_ZN10SmartDryer16physicalReleCtrlEv+0x50>
		thermoCtrl->setState(LOW);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fd37 	bl	80022ca <_ZN4RELE8setStateE9PIN_STATE>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_ZN10SmartDryer4testEv>:

void SmartDryer::test()
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b0b5      	sub	sp, #212	; 0xd4
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	testTimer->setTimer(5000);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	f241 3188 	movw	r1, #5000	; 0x1388
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fc35 	bl	80010e4 <_ZN11ChronoTimer8setTimerEm>
	std::string Time = "";
 800287a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800287e:	4618      	mov	r0, r3
 8002880:	f005 fa9c 	bl	8007dbc <_ZNSaIcEC1Ev>
 8002884:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288c:	4994      	ldr	r1, [pc, #592]	; (8002ae0 <_ZN10SmartDryer4testEv+0x27c>)
 800288e:	4618      	mov	r0, r3
 8002890:	f005 fd76 	bl	8008380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002894:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002898:	4618      	mov	r0, r3
 800289a:	f005 fa90 	bl	8007dbe <_ZNSaIcED1Ev>
	display->setupLcd();
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fb8a 	bl	8001fbc <_ZN13NHDST7565_LCD8setupLcdEv>

	while(1)
	{
		  uint8_t WichKey = DryerKey::NO_KEY, TestKey = 0;
 80028a8:	2308      	movs	r3, #8
 80028aa:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		  char SerialData[RECEIVE_BUFFER_LEN] = {0};
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	809a      	strh	r2, [r3, #4]

		  dbgDryer->readSerialIT((uint8_t *)SerialData);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fd6b 	bl	80023a4 <_ZN11SerialDebug12readSerialITEPh>
		  if(SerialData[5] != 0)
 80028ce:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d044      	beq.n	8002960 <_ZN10SmartDryer4testEv+0xfc>
		  {
			  std::string Rec = "";
 80028d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028da:	4618      	mov	r0, r3
 80028dc:	f005 fa6e 	bl	8007dbc <_ZNSaIcEC1Ev>
 80028e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	497d      	ldr	r1, [pc, #500]	; (8002ae0 <_ZN10SmartDryer4testEv+0x27c>)
 80028ea:	4618      	mov	r0, r3
 80028ec:	f005 fd48 	bl	8008380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80028f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028f4:	4618      	mov	r0, r3
 80028f6:	f005 fa62 	bl	8007dbe <_ZNSaIcED1Ev>
			  for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002904:	2b05      	cmp	r3, #5
 8002906:	dc11      	bgt.n	800292c <_ZN10SmartDryer4testEv+0xc8>
				  Rec += SerialData[i];
 8002908:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800290c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002910:	4413      	add	r3, r2
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f005 fbf2 	bl	8008104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8002920:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002924:	3301      	adds	r3, #1
 8002926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800292a:	e7e9      	b.n	8002900 <_ZN10SmartDryer4testEv+0x9c>
			  dbgDryer->sendDbgStr("Ricevuto: " + Rec);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002930:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002934:	f107 020c 	add.w	r2, r7, #12
 8002938:	496a      	ldr	r1, [pc, #424]	; (8002ae4 <_ZN10SmartDryer4testEv+0x280>)
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f8dd 	bl	8002afa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8002940:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002944:	4619      	mov	r1, r3
 8002946:	4620      	mov	r0, r4
 8002948:	f7ff fcfa 	bl	8002340 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800294c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002950:	4618      	mov	r0, r3
 8002952:	f005 fb56 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			  std::string Rec = "";
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	4618      	mov	r0, r3
 800295c:	f005 fb51 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  }

		  WichKey = keyboard->checkKey();
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fc43 	bl	80021f0 <_ZN8DryerKey8checkKeyEv>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		  switch(WichKey)
 8002970:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002974:	2b07      	cmp	r3, #7
 8002976:	d833      	bhi.n	80029e0 <_ZN10SmartDryer4testEv+0x17c>
 8002978:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <_ZN10SmartDryer4testEv+0x11c>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	080029a1 	.word	0x080029a1
 8002984:	080029a9 	.word	0x080029a9
 8002988:	080029b1 	.word	0x080029b1
 800298c:	080029b9 	.word	0x080029b9
 8002990:	080029c1 	.word	0x080029c1
 8002994:	080029c9 	.word	0x080029c9
 8002998:	080029d1 	.word	0x080029d1
 800299c:	080029d9 	.word	0x080029d9
		  {
		  case DryerKey::UP_KEY:
			  TestKey = 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  break;
 80029a6:	e01c      	b.n	80029e2 <_ZN10SmartDryer4testEv+0x17e>
		  case DryerKey::DOWN_KEY:
			  TestKey = 2;
 80029a8:	2302      	movs	r3, #2
 80029aa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  break;
 80029ae:	e018      	b.n	80029e2 <_ZN10SmartDryer4testEv+0x17e>
		  case DryerKey::LEFT_KEY:
			  TestKey = 3;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  break;
 80029b6:	e014      	b.n	80029e2 <_ZN10SmartDryer4testEv+0x17e>
		  case DryerKey::OK_KEY:
			  TestKey = 4;
 80029b8:	2304      	movs	r3, #4
 80029ba:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  break;
 80029be:	e010      	b.n	80029e2 <_ZN10SmartDryer4testEv+0x17e>
		  case DryerKey::LONG_UP_KEY:
			  TestKey = 5;
 80029c0:	2305      	movs	r3, #5
 80029c2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  break;
 80029c6:	e00c      	b.n	80029e2 <_ZN10SmartDryer4testEv+0x17e>
		  case DryerKey::LONG_DOWN_KEY:
			  TestKey = 6;
 80029c8:	2306      	movs	r3, #6
 80029ca:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  break;
 80029ce:	e008      	b.n	80029e2 <_ZN10SmartDryer4testEv+0x17e>
		  case DryerKey::LONG_LEFT_KEY:
			  TestKey = 7;
 80029d0:	2307      	movs	r3, #7
 80029d2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  break;
 80029d6:	e004      	b.n	80029e2 <_ZN10SmartDryer4testEv+0x17e>
		  case DryerKey::LONG_OK_KEY:
			  TestKey = 8;
 80029d8:	2308      	movs	r3, #8
 80029da:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			  break;
 80029de:	e000      	b.n	80029e2 <_ZN10SmartDryer4testEv+0x17e>
		  default:
			  break;
 80029e0:	bf00      	nop
		  }
		  if(TestKey != 0)
 80029e2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d021      	beq.n	8002a2e <_ZN10SmartDryer4testEv+0x1ca>
		  {
			  dbgDryer->sendDbgStr("Il tasto premuto vale " + std::to_string(TestKey));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80029ee:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 80029f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe fc29 	bl	8001250 <_ZNSt7__cxx119to_stringEi>
 80029fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a02:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002a06:	4938      	ldr	r1, [pc, #224]	; (8002ae8 <_ZN10SmartDryer4testEv+0x284>)
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff f873 	bl	8001af4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8002a0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a12:	4619      	mov	r1, r3
 8002a14:	4620      	mov	r0, r4
 8002a16:	f7ff fc93 	bl	8002340 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002a1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f005 faef 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002a24:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f005 faea 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  }

		  if(testTimer->isFinished(true, 2000))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a36:	2101      	movs	r1, #1
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fbd6 	bl	80011ea <_ZN11ChronoTimer10isFinishedEbm>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d014      	beq.n	8002a6e <_ZN10SmartDryer4testEv+0x20a>
		  {
			  Time = clock->getTimeDateStr(DS1307_RTC::ONLY_TIME);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fcf8 	bl	8001444 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8002a54:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f005 fad5 	bl	800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8002a64:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f005 faca 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  }
		  physicalReleCtrl();
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fecc 	bl	800280c <_ZN10SmartDryer16physicalReleCtrlEv>

		  if(testTimer->isFinished(true))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe fbb4 	bl	80011ea <_ZN11ChronoTimer10isFinishedEbm>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <_ZN10SmartDryer4testEv+0x22e>
		  {
			  ledStatus = PROGRAM_END;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8002a8e:	865a      	strh	r2, [r3, #50]	; 0x32
 8002a90:	e002      	b.n	8002a98 <_ZN10SmartDryer4testEv+0x234>
		  }
		  else
		  {
			  ledStatus = THERMO_ON_FAN_OFF;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	865a      	strh	r2, [r3, #50]	; 0x32
		  }
		  ledControl();
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff fe27 	bl	80026ec <_ZN10SmartDryer10ledControlEv>

		  display->testDisplay("Test");
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681c      	ldr	r4, [r3, #0]
 8002aa2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f005 f988 	bl	8007dbc <_ZNSaIcEC1Ev>
 8002aac:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002ab0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ab4:	490d      	ldr	r1, [pc, #52]	; (8002aec <_ZN10SmartDryer4testEv+0x288>)
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f005 fc62 	bl	8008380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002abc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f7ff fa98 	bl	8001ff8 <_ZN13NHDST7565_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002ac8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002acc:	4618      	mov	r0, r3
 8002ace:	f005 fa98 	bl	8008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002ad2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f005 f971 	bl	8007dbe <_ZNSaIcED1Ev>
	}
 8002adc:	e6e4      	b.n	80028a8 <_ZN10SmartDryer4testEv+0x44>
 8002ade:	bf00      	nop
 8002ae0:	08008ec8 	.word	0x08008ec8
 8002ae4:	08008ecc 	.word	0x08008ecc
 8002ae8:	08008ed8 	.word	0x08008ed8
 8002aec:	08008ef0 	.word	0x08008ef0

08002af0 <_ZN10SmartDryer3runEv>:
}

void SmartDryer::run()
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
	while(1)
 8002af8:	e7fe      	b.n	8002af8 <_ZN10SmartDryer3runEv+0x8>

08002afa <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 8002b06:	68b8      	ldr	r0, [r7, #8]
 8002b08:	f7ff fc72 	bl	80023f0 <_ZNSt11char_traitsIcE6lengthEPKc>
 8002b0c:	6178      	str	r0, [r7, #20]
      __string_type __str;
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f005 fa56 	bl	8007fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      __str.reserve(__len + __rhs.size());
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f005 fa9f 	bl	8008058 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	4413      	add	r3, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f005 fa9a 	bl	800805c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f005 fbcb 	bl	80082c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f005 fbc1 	bl	80082bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8002b3a:	bf00      	nop
    }
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b54:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <MX_ADC1_Init+0x74>)
 8002b56:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <MX_ADC1_Init+0x78>)
 8002b58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <MX_ADC1_Init+0x74>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <MX_ADC1_Init+0x74>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <MX_ADC1_Init+0x74>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <MX_ADC1_Init+0x74>)
 8002b6e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002b72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b74:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <MX_ADC1_Init+0x74>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <MX_ADC1_Init+0x74>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b80:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <MX_ADC1_Init+0x74>)
 8002b82:	f000 fceb 	bl	800355c <HAL_ADC_Init>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002b8c:	f000 f9d0 	bl	8002f30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <MX_ADC1_Init+0x74>)
 8002ba2:	f000 fe45 	bl	8003830 <HAL_ADC_ConfigChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002bac:	f000 f9c0 	bl	8002f30 <Error_Handler>
  }

}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000524 	.word	0x20000524
 8002bbc:	40012400 	.word	0x40012400

08002bc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 0310 	add.w	r3, r7, #16
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_ADC_MspInit+0x6c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d121      	bne.n	8002c24 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_ADC_MspInit+0x70>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <HAL_ADC_MspInit+0x70>)
 8002be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bea:	6193      	str	r3, [r2, #24]
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_ADC_MspInit+0x70>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <HAL_ADC_MspInit+0x70>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <HAL_ADC_MspInit+0x70>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	6193      	str	r3, [r2, #24]
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_ADC_MspInit+0x70>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 8002c10:	2301      	movs	r3, #1
 8002c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c14:	2303      	movs	r3, #3
 8002c16:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 8002c18:	f107 0310 	add.w	r3, r7, #16
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <HAL_ADC_MspInit+0x74>)
 8002c20:	f001 f9b6 	bl	8003f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002c24:	bf00      	nop
 8002c26:	3720      	adds	r7, #32
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40012400 	.word	0x40012400
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40010800 	.word	0x40010800

08002c38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3e:	f107 0308 	add.w	r3, r7, #8
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4c:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <MX_GPIO_Init+0xb8>)
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	4a27      	ldr	r2, [pc, #156]	; (8002cf0 <MX_GPIO_Init+0xb8>)
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	6193      	str	r3, [r2, #24]
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <MX_GPIO_Init+0xb8>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <MX_GPIO_Init+0xb8>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <MX_GPIO_Init+0xb8>)
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	6193      	str	r3, [r2, #24]
 8002c70:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <MX_GPIO_Init+0xb8>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	210c      	movs	r1, #12
 8002c80:	481c      	ldr	r0, [pc, #112]	; (8002cf4 <MX_GPIO_Init+0xbc>)
 8002c82:	f001 fbe5 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 8002c86:	2200      	movs	r2, #0
 8002c88:	f641 6150 	movw	r1, #7760	; 0x1e50
 8002c8c:	4819      	ldr	r0, [pc, #100]	; (8002cf4 <MX_GPIO_Init+0xbc>)
 8002c8e:	f001 fbdf 	bl	8004450 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 8002c92:	f240 435c 	movw	r3, #1116	; 0x45c
 8002c96:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca4:	f107 0308 	add.w	r3, r7, #8
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4812      	ldr	r0, [pc, #72]	; (8002cf4 <MX_GPIO_Init+0xbc>)
 8002cac:	f001 f970 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 8002cb0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002cb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480c      	ldr	r0, [pc, #48]	; (8002cf8 <MX_GPIO_Init+0xc0>)
 8002cc6:	f001 f963 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 8002cca:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8002cce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	f107 0308 	add.w	r3, r7, #8
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <MX_GPIO_Init+0xbc>)
 8002ce4:	f001 f954 	bl	8003f90 <HAL_GPIO_Init>

}
 8002ce8:	bf00      	nop
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010800 	.word	0x40010800
 8002cf8:	40010c00 	.word	0x40010c00

08002cfc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <MX_I2C1_Init+0x50>)
 8002d02:	4a13      	ldr	r2, [pc, #76]	; (8002d50 <MX_I2C1_Init+0x54>)
 8002d04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d06:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <MX_I2C1_Init+0x50>)
 8002d08:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <MX_I2C1_Init+0x58>)
 8002d0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <MX_I2C1_Init+0x50>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <MX_I2C1_Init+0x50>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <MX_I2C1_Init+0x50>)
 8002d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <MX_I2C1_Init+0x50>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <MX_I2C1_Init+0x50>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <MX_I2C1_Init+0x50>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <MX_I2C1_Init+0x50>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d38:	4804      	ldr	r0, [pc, #16]	; (8002d4c <MX_I2C1_Init+0x50>)
 8002d3a:	f001 fbe1 	bl	8004500 <HAL_I2C_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d44:	f000 f8f4 	bl	8002f30 <Error_Handler>
  }

}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000554 	.word	0x20000554
 8002d50:	40005400 	.word	0x40005400
 8002d54:	000186a0 	.word	0x000186a0

08002d58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_I2C_MspInit+0x90>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d132      	bne.n	8002dde <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d78:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <HAL_I2C_MspInit+0x94>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <HAL_I2C_MspInit+0x94>)
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	6193      	str	r3, [r2, #24]
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_I2C_MspInit+0x94>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8002d90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d96:	2312      	movs	r3, #18
 8002d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4619      	mov	r1, r3
 8002da4:	4812      	ldr	r0, [pc, #72]	; (8002df0 <HAL_I2C_MspInit+0x98>)
 8002da6:	f001 f8f3 	bl	8003f90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_I2C_MspInit+0x9c>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <HAL_I2C_MspInit+0x9c>)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_I2C_MspInit+0x94>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	4a08      	ldr	r2, [pc, #32]	; (8002dec <HAL_I2C_MspInit+0x94>)
 8002dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dd0:	61d3      	str	r3, [r2, #28]
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_I2C_MspInit+0x94>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002dde:	bf00      	nop
 8002de0:	3728      	adds	r7, #40	; 0x28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40005400 	.word	0x40005400
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40010c00 	.word	0x40010c00
 8002df4:	40010000 	.word	0x40010000

08002df8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002df8:	b598      	push	{r3, r4, r7, lr}
 8002dfa:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002dfc:	f000 fb2a 	bl	8003454 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 8002e00:	f000 f832 	bl	8002e68 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002e04:	f7ff ff18 	bl	8002c38 <MX_GPIO_Init>
	MX_ADC1_Init();
 8002e08:	f7ff fe9c 	bl	8002b44 <MX_ADC1_Init>
	MX_I2C1_Init();
 8002e0c:	f7ff ff76 	bl	8002cfc <MX_I2C1_Init>
	MX_SPI1_Init();
 8002e10:	f000 f89e 	bl	8002f50 <MX_SPI1_Init>
	MX_TIM2_Init();
 8002e14:	f000 fa04 	bl	8003220 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8002e18:	f000 fa6a 	bl	80032f0 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 8002e1c:	4810      	ldr	r0, [pc, #64]	; (8002e60 <main+0x68>)
 8002e1e:	f003 fdcd 	bl	80069bc <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 8002e22:	203c      	movs	r0, #60	; 0x3c
 8002e24:	f004 ffb0 	bl	8007d88 <_Znwj>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461c      	mov	r4, r3
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f7ff fb09 	bl	8002444 <_ZN10SmartDryerC1Ev>
 8002e32:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <main+0x6c>)
 8002e34:	601c      	str	r4, [r3, #0]

	if(DryerApplication->enableTest)
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <main+0x6c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <main+0x56>
	{
		DryerApplication->test();
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <main+0x6c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fd0c 	bl	8002864 <_ZN10SmartDryer4testEv>
 8002e4c:	e004      	b.n	8002e58 <main+0x60>
	}
	else
	{
		DryerApplication->run();
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <main+0x6c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fe4c 	bl	8002af0 <_ZN10SmartDryer3runEv>
	//  while (1)
	//  {
	//
	//  }

}
 8002e58:	2300      	movs	r3, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	bd98      	pop	{r3, r4, r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000600 	.word	0x20000600
 8002e64:	20000510 	.word	0x20000510

08002e68 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b094      	sub	sp, #80	; 0x50
 8002e6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e72:	2228      	movs	r2, #40	; 0x28
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f005 fb9c 	bl	80085b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e7c:	f107 0314 	add.w	r3, r7, #20
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002eac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 fb60 	bl	800557c <HAL_RCC_OscConfig>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 8002ecc:	f000 f830 	bl	8002f30 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ed0:	230f      	movs	r3, #15
 8002ed2:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 feb6 	bl	8005c5c <HAL_RCC_ClockConfig>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 8002f00:	f000 f816 	bl	8002f30 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002f04:	2302      	movs	r3, #2
 8002f06:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 f8e6 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 8002f24:	f000 f804 	bl	8002f30 <Error_Handler>
	}
}
 8002f28:	bf00      	nop
 8002f2a:	3750      	adds	r7, #80	; 0x50
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002f54:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f56:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <MX_SPI1_Init+0x6c>)
 8002f58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f68:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f86:	2210      	movs	r2, #16
 8002f88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f9e:	220a      	movs	r2, #10
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fa2:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002fa4:	f003 f9a6 	bl	80062f4 <HAL_SPI_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002fae:	f7ff ffbf 	bl	8002f30 <Error_Handler>
  }

}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200005a8 	.word	0x200005a8
 8002fbc:	40013000 	.word	0x40013000

08002fc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0310 	add.w	r3, r7, #16
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a15      	ldr	r2, [pc, #84]	; (8003030 <HAL_SPI_MspInit+0x70>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d123      	bne.n	8003028 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_SPI_MspInit+0x74>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	4a13      	ldr	r2, [pc, #76]	; (8003034 <HAL_SPI_MspInit+0x74>)
 8002fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fea:	6193      	str	r3, [r2, #24]
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_SPI_MspInit+0x74>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <HAL_SPI_MspInit+0x74>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <HAL_SPI_MspInit+0x74>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6193      	str	r3, [r2, #24]
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_SPI_MspInit+0x74>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 8003010:	23a0      	movs	r3, #160	; 0xa0
 8003012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003018:	2303      	movs	r3, #3
 800301a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	4619      	mov	r1, r3
 8003022:	4805      	ldr	r0, [pc, #20]	; (8003038 <HAL_SPI_MspInit+0x78>)
 8003024:	f000 ffb4 	bl	8003f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003028:	bf00      	nop
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40013000 	.word	0x40013000
 8003034:	40021000 	.word	0x40021000
 8003038:	40010800 	.word	0x40010800

0800303c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_MspInit+0x5c>)
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	4a14      	ldr	r2, [pc, #80]	; (8003098 <HAL_MspInit+0x5c>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6193      	str	r3, [r2, #24]
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <HAL_MspInit+0x5c>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <HAL_MspInit+0x5c>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4a0e      	ldr	r2, [pc, #56]	; (8003098 <HAL_MspInit+0x5c>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	61d3      	str	r3, [r2, #28]
 8003066:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <HAL_MspInit+0x5c>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_MspInit+0x60>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	4a04      	ldr	r2, [pc, #16]	; (800309c <HAL_MspInit+0x60>)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40021000 	.word	0x40021000
 800309c:	40010000 	.word	0x40010000

080030a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <HardFault_Handler+0x4>

080030b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <MemManage_Handler+0x4>

080030b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <BusFault_Handler+0x4>

080030be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <UsageFault_Handler+0x4>

080030c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ec:	f000 f9f8 	bl	80034e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <USART1_IRQHandler+0x10>)
 80030fa:	f004 faab 	bl	8007654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000640 	.word	0x20000640

08003108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
	return 1;
 800310c:	2301      	movs	r3, #1
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <_kill>:

int _kill(int pid, int sig)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003120:	f005 f9dc 	bl	80084dc <__errno>
 8003124:	4602      	mov	r2, r0
 8003126:	2316      	movs	r3, #22
 8003128:	6013      	str	r3, [r2, #0]
	return -1;
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <_exit>:

void _exit (int status)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800313e:	f04f 31ff 	mov.w	r1, #4294967295
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ffe7 	bl	8003116 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003148:	e7fe      	b.n	8003148 <_exit+0x12>
	...

0800314c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <_sbrk+0x5c>)
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <_sbrk+0x60>)
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <_sbrk+0x64>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <_sbrk+0x64>)
 800316a:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <_sbrk+0x68>)
 800316c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <_sbrk+0x64>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	429a      	cmp	r2, r3
 800317a:	d207      	bcs.n	800318c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800317c:	f005 f9ae 	bl	80084dc <__errno>
 8003180:	4602      	mov	r2, r0
 8003182:	230c      	movs	r3, #12
 8003184:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	e009      	b.n	80031a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800318c:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <_sbrk+0x64>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <_sbrk+0x64>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <_sbrk+0x64>)
 800319c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800319e:	68fb      	ldr	r3, [r7, #12]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20005000 	.word	0x20005000
 80031ac:	00000400 	.word	0x00000400
 80031b0:	20000514 	.word	0x20000514
 80031b4:	20000688 	.word	0x20000688

080031b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80031bc:	4b15      	ldr	r3, [pc, #84]	; (8003214 <SystemInit+0x5c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <SystemInit+0x5c>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80031c8:	4b12      	ldr	r3, [pc, #72]	; (8003214 <SystemInit+0x5c>)
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4911      	ldr	r1, [pc, #68]	; (8003214 <SystemInit+0x5c>)
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <SystemInit+0x60>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <SystemInit+0x5c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <SystemInit+0x5c>)
 80031da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <SystemInit+0x5c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <SystemInit+0x5c>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <SystemInit+0x5c>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a07      	ldr	r2, [pc, #28]	; (8003214 <SystemInit+0x5c>)
 80031f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80031fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <SystemInit+0x5c>)
 80031fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003202:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <SystemInit+0x64>)
 8003206:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800320a:	609a      	str	r2, [r3, #8]
#endif 
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	40021000 	.word	0x40021000
 8003218:	f8ff0000 	.word	0xf8ff0000
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003226:	f107 0308 	add.w	r3, r7, #8
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003234:	463b      	mov	r3, r7
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <MX_TIM2_Init+0x94>)
 800323e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <MX_TIM2_Init+0x94>)
 8003246:	2200      	movs	r2, #0
 8003248:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324a:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <MX_TIM2_Init+0x94>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 8003250:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <MX_TIM2_Init+0x94>)
 8003252:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003256:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003258:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <MX_TIM2_Init+0x94>)
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <MX_TIM2_Init+0x94>)
 8003260:	2200      	movs	r2, #0
 8003262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003264:	4813      	ldr	r0, [pc, #76]	; (80032b4 <MX_TIM2_Init+0x94>)
 8003266:	f003 fb23 	bl	80068b0 <HAL_TIM_Base_Init>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003270:	f7ff fe5e 	bl	8002f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003278:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800327a:	f107 0308 	add.w	r3, r7, #8
 800327e:	4619      	mov	r1, r3
 8003280:	480c      	ldr	r0, [pc, #48]	; (80032b4 <MX_TIM2_Init+0x94>)
 8003282:	f003 fbdf 	bl	8006a44 <HAL_TIM_ConfigClockSource>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800328c:	f7ff fe50 	bl	8002f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003290:	2300      	movs	r3, #0
 8003292:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003294:	2300      	movs	r3, #0
 8003296:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003298:	463b      	mov	r3, r7
 800329a:	4619      	mov	r1, r3
 800329c:	4805      	ldr	r0, [pc, #20]	; (80032b4 <MX_TIM2_Init+0x94>)
 800329e:	f003 ff5b 	bl	8007158 <HAL_TIMEx_MasterConfigSynchronization>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80032a8:	f7ff fe42 	bl	8002f30 <Error_Handler>
  }

}
 80032ac:	bf00      	nop
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000600 	.word	0x20000600

080032b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c8:	d10b      	bne.n	80032e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_TIM_Base_MspInit+0x34>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <HAL_TIM_Base_MspInit+0x34>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	61d3      	str	r3, [r2, #28]
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_TIM_Base_MspInit+0x34>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40021000 	.word	0x40021000

080032f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <MX_USART1_UART_Init+0x4c>)
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <MX_USART1_UART_Init+0x50>)
 80032f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <MX_USART1_UART_Init+0x4c>)
 80032fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003302:	4b0e      	ldr	r3, [pc, #56]	; (800333c <MX_USART1_UART_Init+0x4c>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <MX_USART1_UART_Init+0x4c>)
 800330a:	2200      	movs	r2, #0
 800330c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <MX_USART1_UART_Init+0x4c>)
 8003310:	2200      	movs	r2, #0
 8003312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <MX_USART1_UART_Init+0x4c>)
 8003316:	220c      	movs	r2, #12
 8003318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <MX_USART1_UART_Init+0x4c>)
 800331c:	2200      	movs	r2, #0
 800331e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <MX_USART1_UART_Init+0x4c>)
 8003322:	2200      	movs	r2, #0
 8003324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003326:	4805      	ldr	r0, [pc, #20]	; (800333c <MX_USART1_UART_Init+0x4c>)
 8003328:	f003 ffac 	bl	8007284 <HAL_UART_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003332:	f7ff fdfd 	bl	8002f30 <Error_Handler>
  }

}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000640 	.word	0x20000640
 8003340:	40013800 	.word	0x40013800

08003344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <HAL_UART_MspInit+0xb4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d145      	bne.n	80033f0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003364:	4b25      	ldr	r3, [pc, #148]	; (80033fc <HAL_UART_MspInit+0xb8>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	4a24      	ldr	r2, [pc, #144]	; (80033fc <HAL_UART_MspInit+0xb8>)
 800336a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800336e:	6193      	str	r3, [r2, #24]
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <HAL_UART_MspInit+0xb8>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337c:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <HAL_UART_MspInit+0xb8>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <HAL_UART_MspInit+0xb8>)
 8003382:	f043 0308 	orr.w	r3, r3, #8
 8003386:	6193      	str	r3, [r2, #24]
 8003388:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <HAL_UART_MspInit+0xb8>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8003394:	2340      	movs	r3, #64	; 0x40
 8003396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	4619      	mov	r1, r3
 80033a6:	4816      	ldr	r0, [pc, #88]	; (8003400 <HAL_UART_MspInit+0xbc>)
 80033a8:	f000 fdf2 	bl	8003f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80033b8:	f107 0314 	add.w	r3, r7, #20
 80033bc:	4619      	mov	r1, r3
 80033be:	4810      	ldr	r0, [pc, #64]	; (8003400 <HAL_UART_MspInit+0xbc>)
 80033c0:	f000 fde6 	bl	8003f90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80033c4:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <HAL_UART_MspInit+0xc0>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <HAL_UART_MspInit+0xc0>)
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2100      	movs	r1, #0
 80033e4:	2025      	movs	r0, #37	; 0x25
 80033e6:	f000 fd0d 	bl	8003e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033ea:	2025      	movs	r0, #37	; 0x25
 80033ec:	f000 fd36 	bl	8003e5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80033f0:	bf00      	nop
 80033f2:	3728      	adds	r7, #40	; 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40010c00 	.word	0x40010c00
 8003404:	40010000 	.word	0x40010000

08003408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003408:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800340a:	e003      	b.n	8003414 <LoopCopyDataInit>

0800340c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800340e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003410:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003412:	3104      	adds	r1, #4

08003414 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003414:	480a      	ldr	r0, [pc, #40]	; (8003440 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003418:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800341a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800341c:	d3f6      	bcc.n	800340c <CopyDataInit>
  ldr r2, =_sbss
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003420:	e002      	b.n	8003428 <LoopFillZerobss>

08003422 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003422:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003424:	f842 3b04 	str.w	r3, [r2], #4

08003428 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800342a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800342c:	d3f9      	bcc.n	8003422 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800342e:	f7ff fec3 	bl	80031b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003432:	f005 f859 	bl	80084e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003436:	f7ff fcdf 	bl	8002df8 <main>
  bx lr
 800343a:	4770      	bx	lr
  ldr r3, =_sidata
 800343c:	080093e0 	.word	0x080093e0
  ldr r0, =_sdata
 8003440:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003444:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8003448:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800344c:	20000688 	.word	0x20000688

08003450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003450:	e7fe      	b.n	8003450 <ADC1_2_IRQHandler>
	...

08003454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_Init+0x28>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <HAL_Init+0x28>)
 800345e:	f043 0310 	orr.w	r3, r3, #16
 8003462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003464:	2003      	movs	r0, #3
 8003466:	f000 fcad 	bl	8003dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800346a:	2000      	movs	r0, #0
 800346c:	f000 f808 	bl	8003480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003470:	f7ff fde4 	bl	800303c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40022000 	.word	0x40022000

08003480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_InitTick+0x54>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_InitTick+0x58>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4619      	mov	r1, r3
 8003492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003496:	fbb3 f3f1 	udiv	r3, r3, r1
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fcf4 	bl	8003e8c <HAL_SYSTICK_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00e      	b.n	80034cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b0f      	cmp	r3, #15
 80034b2:	d80a      	bhi.n	80034ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b4:	2200      	movs	r2, #0
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f000 fca2 	bl	8003e04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c0:	4a06      	ldr	r2, [pc, #24]	; (80034dc <HAL_InitTick+0x5c>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000000 	.word	0x20000000
 80034d8:	20000008 	.word	0x20000008
 80034dc:	20000004 	.word	0x20000004

080034e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_IncTick+0x1c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_IncTick+0x20>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	4a03      	ldr	r2, [pc, #12]	; (8003500 <HAL_IncTick+0x20>)
 80034f2:	6013      	str	r3, [r2, #0]
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	20000008 	.word	0x20000008
 8003500:	20000680 	.word	0x20000680

08003504 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return uwTick;
 8003508:	4b02      	ldr	r3, [pc, #8]	; (8003514 <HAL_GetTick+0x10>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	20000680 	.word	0x20000680

08003518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7ff fff0 	bl	8003504 <HAL_GetTick>
 8003524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d005      	beq.n	800353e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_Delay+0x40>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800353e:	bf00      	nop
 8003540:	f7ff ffe0 	bl	8003504 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	429a      	cmp	r2, r3
 800354e:	d8f7      	bhi.n	8003540 <HAL_Delay+0x28>
  {
  }
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000008 	.word	0x20000008

0800355c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e153      	b.n	8003826 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a9f      	ldr	r2, [pc, #636]	; (8003800 <HAL_ADC_Init+0x2a4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d009      	beq.n	800359c <HAL_ADC_Init+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a9d      	ldr	r2, [pc, #628]	; (8003804 <HAL_ADC_Init+0x2a8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <HAL_ADC_Init+0x40>
 8003592:	f240 11b3 	movw	r1, #435	; 0x1b3
 8003596:	489c      	ldr	r0, [pc, #624]	; (8003808 <HAL_ADC_Init+0x2ac>)
 8003598:	f7ff fcd0 	bl	8002f3c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d009      	beq.n	80035b8 <HAL_ADC_Init+0x5c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ac:	d004      	beq.n	80035b8 <HAL_ADC_Init+0x5c>
 80035ae:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80035b2:	4895      	ldr	r0, [pc, #596]	; (8003808 <HAL_ADC_Init+0x2ac>)
 80035b4:	f7ff fcc2 	bl	8002f3c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_ADC_Init+0x78>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c8:	d004      	beq.n	80035d4 <HAL_ADC_Init+0x78>
 80035ca:	f240 11b5 	movw	r1, #437	; 0x1b5
 80035ce:	488e      	ldr	r0, [pc, #568]	; (8003808 <HAL_ADC_Init+0x2ac>)
 80035d0:	f7ff fcb4 	bl	8002f3c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	7b1b      	ldrb	r3, [r3, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_ADC_Init+0x92>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	7b1b      	ldrb	r3, [r3, #12]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d004      	beq.n	80035ee <HAL_ADC_Init+0x92>
 80035e4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80035e8:	4887      	ldr	r0, [pc, #540]	; (8003808 <HAL_ADC_Init+0x2ac>)
 80035ea:	f7ff fca7 	bl	8002f3c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d022      	beq.n	800363c <HAL_ADC_Init+0xe0>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035fe:	d01d      	beq.n	800363c <HAL_ADC_Init+0xe0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003608:	d018      	beq.n	800363c <HAL_ADC_Init+0xe0>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003612:	d013      	beq.n	800363c <HAL_ADC_Init+0xe0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800361c:	d00e      	beq.n	800363c <HAL_ADC_Init+0xe0>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003626:	d009      	beq.n	800363c <HAL_ADC_Init+0xe0>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003630:	d004      	beq.n	800363c <HAL_ADC_Init+0xe0>
 8003632:	f240 11b7 	movw	r1, #439	; 0x1b7
 8003636:	4874      	ldr	r0, [pc, #464]	; (8003808 <HAL_ADC_Init+0x2ac>)
 8003638:	f7ff fc80 	bl	8002f3c <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d02a      	beq.n	800369a <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_ADC_Init+0xf8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	2b10      	cmp	r3, #16
 8003652:	d904      	bls.n	800365e <HAL_ADC_Init+0x102>
 8003654:	f240 11bb 	movw	r1, #443	; 0x1bb
 8003658:	486b      	ldr	r0, [pc, #428]	; (8003808 <HAL_ADC_Init+0x2ac>)
 800365a:	f7ff fc6f 	bl	8002f3c <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7d1b      	ldrb	r3, [r3, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_ADC_Init+0x11c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7d1b      	ldrb	r3, [r3, #20]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d004      	beq.n	8003678 <HAL_ADC_Init+0x11c>
 800366e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8003672:	4865      	ldr	r0, [pc, #404]	; (8003808 <HAL_ADC_Init+0x2ac>)
 8003674:	f7ff fc62 	bl	8002f3c <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7d1b      	ldrb	r3, [r3, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00c      	beq.n	800369a <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_ADC_Init+0x134>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d904      	bls.n	800369a <HAL_ADC_Init+0x13e>
 8003690:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003694:	485c      	ldr	r0, [pc, #368]	; (8003808 <HAL_ADC_Init+0x2ac>)
 8003696:	f7ff fc51 	bl	8002f3c <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff fa85 	bl	8002bc0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa7e 	bl	8003bb8 <ADC_ConversionStop_Disable>
 80036bc:	4603      	mov	r3, r0
 80036be:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f040 80a3 	bne.w	8003814 <HAL_ADC_Init+0x2b8>
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f040 809f 	bne.w	8003814 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036de:	f023 0302 	bic.w	r3, r3, #2
 80036e2:	f043 0202 	orr.w	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036f2:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7b1b      	ldrb	r3, [r3, #12]
 80036f8:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80036fa:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370a:	d003      	beq.n	8003714 <HAL_ADC_Init+0x1b8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d102      	bne.n	800371a <HAL_ADC_Init+0x1be>
 8003714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003718:	e000      	b.n	800371c <HAL_ADC_Init+0x1c0>
 800371a:	2300      	movs	r3, #0
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7d1b      	ldrb	r3, [r3, #20]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d119      	bne.n	800375e <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7b1b      	ldrb	r3, [r3, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	3b01      	subs	r3, #1
 8003738:	035a      	lsls	r2, r3, #13
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e00b      	b.n	800375e <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	f043 0201 	orr.w	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	4b24      	ldr	r3, [pc, #144]	; (800380c <HAL_ADC_Init+0x2b0>)
 800377a:	4013      	ands	r3, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	430b      	orrs	r3, r1
 8003784:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378e:	d003      	beq.n	8003798 <HAL_ADC_Init+0x23c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d104      	bne.n	80037a2 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	3b01      	subs	r3, #1
 800379e:	051b      	lsls	r3, r3, #20
 80037a0:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	4b14      	ldr	r3, [pc, #80]	; (8003810 <HAL_ADC_Init+0x2b4>)
 80037be:	4013      	ands	r3, r2
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d10b      	bne.n	80037de <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	f023 0303 	bic.w	r3, r3, #3
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80037dc:	e022      	b.n	8003824 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	f023 0312 	bic.w	r3, r3, #18
 80037e6:	f043 0210 	orr.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	f043 0201 	orr.w	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80037fe:	e011      	b.n	8003824 <HAL_ADC_Init+0x2c8>
 8003800:	40012400 	.word	0x40012400
 8003804:	40012800 	.word	0x40012800
 8003808:	08008f24 	.word	0x08008f24
 800380c:	ffe1f7fd 	.word	0xffe1f7fd
 8003810:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	f043 0210 	orr.w	r2, r3, #16
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003824:	7dfb      	ldrb	r3, [r7, #23]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop

08003830 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a88      	ldr	r2, [pc, #544]	; (8003a68 <HAL_ADC_ConfigChannel+0x238>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_ADC_ConfigChannel+0x30>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a86      	ldr	r2, [pc, #536]	; (8003a6c <HAL_ADC_ConfigChannel+0x23c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_ADC_ConfigChannel+0x30>
 8003856:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800385a:	4885      	ldr	r0, [pc, #532]	; (8003a70 <HAL_ADC_ConfigChannel+0x240>)
 800385c:	f7ff fb6e 	bl	8002f3c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d048      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d044      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d040      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d03c      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d038      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b05      	cmp	r3, #5
 800388e:	d034      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b06      	cmp	r3, #6
 8003896:	d030      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b07      	cmp	r3, #7
 800389e:	d02c      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d028      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b09      	cmp	r3, #9
 80038ae:	d024      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b0a      	cmp	r3, #10
 80038b6:	d020      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b0b      	cmp	r3, #11
 80038be:	d01c      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d018      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b0d      	cmp	r3, #13
 80038ce:	d014      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b0e      	cmp	r3, #14
 80038d6:	d010      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b0f      	cmp	r3, #15
 80038de:	d00c      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d008      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b11      	cmp	r3, #17
 80038ee:	d004      	beq.n	80038fa <HAL_ADC_ConfigChannel+0xca>
 80038f0:	f240 71cf 	movw	r1, #1999	; 0x7cf
 80038f4:	485e      	ldr	r0, [pc, #376]	; (8003a70 <HAL_ADC_ConfigChannel+0x240>)
 80038f6:	f7ff fb21 	bl	8002f3c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d040      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d03c      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d038      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b04      	cmp	r3, #4
 8003918:	d034      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b05      	cmp	r3, #5
 8003920:	d030      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b06      	cmp	r3, #6
 8003928:	d02c      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b07      	cmp	r3, #7
 8003930:	d028      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d024      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b09      	cmp	r3, #9
 8003940:	d020      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b0a      	cmp	r3, #10
 8003948:	d01c      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b0b      	cmp	r3, #11
 8003950:	d018      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b0c      	cmp	r3, #12
 8003958:	d014      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b0d      	cmp	r3, #13
 8003960:	d010      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b0e      	cmp	r3, #14
 8003968:	d00c      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b0f      	cmp	r3, #15
 8003970:	d008      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b10      	cmp	r3, #16
 8003978:	d004      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x154>
 800397a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800397e:	483c      	ldr	r0, [pc, #240]	; (8003a70 <HAL_ADC_ConfigChannel+0x240>)
 8003980:	f7ff fadc 	bl	8002f3c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d020      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x19e>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d01c      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x19e>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d018      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x19e>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d014      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x19e>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d010      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x19e>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d00c      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x19e>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b06      	cmp	r3, #6
 80039ba:	d008      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x19e>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b07      	cmp	r3, #7
 80039c2:	d004      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x19e>
 80039c4:	f240 71d1 	movw	r1, #2001	; 0x7d1
 80039c8:	4829      	ldr	r0, [pc, #164]	; (8003a70 <HAL_ADC_ConfigChannel+0x240>)
 80039ca:	f7ff fab7 	bl	8002f3c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x1ac>
 80039d8:	2302      	movs	r3, #2
 80039da:	e0e2      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x372>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b06      	cmp	r3, #6
 80039ea:	d81c      	bhi.n	8003a26 <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	3b05      	subs	r3, #5
 80039fe:	221f      	movs	r2, #31
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	4019      	ands	r1, r3
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	3b05      	subs	r3, #5
 8003a18:	fa00 f203 	lsl.w	r2, r0, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34
 8003a24:	e042      	b.n	8003aac <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d822      	bhi.n	8003a74 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3b23      	subs	r3, #35	; 0x23
 8003a40:	221f      	movs	r2, #31
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	4019      	ands	r1, r3
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	3b23      	subs	r3, #35	; 0x23
 8003a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
 8003a66:	e021      	b.n	8003aac <HAL_ADC_ConfigChannel+0x27c>
 8003a68:	40012400 	.word	0x40012400
 8003a6c:	40012800 	.word	0x40012800
 8003a70:	08008f24 	.word	0x08008f24
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	3b41      	subs	r3, #65	; 0x41
 8003a86:	221f      	movs	r2, #31
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	4019      	ands	r1, r3
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3b41      	subs	r3, #65	; 0x41
 8003aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b09      	cmp	r3, #9
 8003ab2:	d91c      	bls.n	8003aee <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68d9      	ldr	r1, [r3, #12]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3b1e      	subs	r3, #30
 8003ac6:	2207      	movs	r2, #7
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	4019      	ands	r1, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	6898      	ldr	r0, [r3, #8]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4413      	add	r3, r2
 8003ade:	3b1e      	subs	r3, #30
 8003ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	60da      	str	r2, [r3, #12]
 8003aec:	e019      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6919      	ldr	r1, [r3, #16]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	2207      	movs	r2, #7
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	4019      	ands	r1, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6898      	ldr	r0, [r3, #8]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4413      	add	r3, r2
 8003b16:	fa00 f203 	lsl.w	r2, r0, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d003      	beq.n	8003b32 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b2e:	2b11      	cmp	r3, #17
 8003b30:	d132      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <HAL_ADC_ConfigChannel+0x37c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d125      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d126      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b58:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b10      	cmp	r3, #16
 8003b60:	d11a      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b62:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <HAL_ADC_ConfigChannel+0x380>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <HAL_ADC_ConfigChannel+0x384>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	0c9a      	lsrs	r2, r3, #18
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b78:	e002      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f9      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x34a>
 8003b86:	e007      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	f043 0220 	orr.w	r2, r3, #32
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40012400 	.word	0x40012400
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	431bde83 	.word	0x431bde83

08003bb8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d127      	bne.n	8003c22 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003be2:	f7ff fc8f 	bl	8003504 <HAL_GetTick>
 8003be6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003be8:	e014      	b.n	8003c14 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bea:	f7ff fc8b 	bl	8003504 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d90d      	bls.n	8003c14 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	f043 0210 	orr.w	r2, r3, #16
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e007      	b.n	8003c24 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d0e3      	beq.n	8003bea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <__NVIC_SetPriorityGrouping+0x44>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5e:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <__NVIC_SetPriorityGrouping+0x44>)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	60d3      	str	r3, [r2, #12]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <__NVIC_GetPriorityGrouping+0x18>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f003 0307 	and.w	r3, r3, #7
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	db0b      	blt.n	8003cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	f003 021f 	and.w	r2, r3, #31
 8003ca8:	4906      	ldr	r1, [pc, #24]	; (8003cc4 <__NVIC_EnableIRQ+0x34>)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	e000e100 	.word	0xe000e100

08003cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db0a      	blt.n	8003cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	490c      	ldr	r1, [pc, #48]	; (8003d14 <__NVIC_SetPriority+0x4c>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	0112      	lsls	r2, r2, #4
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	440b      	add	r3, r1
 8003cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf0:	e00a      	b.n	8003d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4908      	ldr	r1, [pc, #32]	; (8003d18 <__NVIC_SetPriority+0x50>)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	3b04      	subs	r3, #4
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	440b      	add	r3, r1
 8003d06:	761a      	strb	r2, [r3, #24]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	e000e100 	.word	0xe000e100
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f1c3 0307 	rsb	r3, r3, #7
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	bf28      	it	cs
 8003d3a:	2304      	movcs	r3, #4
 8003d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d902      	bls.n	8003d4c <NVIC_EncodePriority+0x30>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3b03      	subs	r3, #3
 8003d4a:	e000      	b.n	8003d4e <NVIC_EncodePriority+0x32>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	401a      	ands	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d64:	f04f 31ff 	mov.w	r1, #4294967295
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	43d9      	mvns	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	4313      	orrs	r3, r2
         );
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr

08003d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d90:	d301      	bcc.n	8003d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00f      	b.n	8003db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <SysTick_Config+0x40>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9e:	210f      	movs	r1, #15
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	f7ff ff90 	bl	8003cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <SysTick_Config+0x40>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <SysTick_Config+0x40>)
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000e010 	.word	0xe000e010

08003dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b07      	cmp	r3, #7
 8003dd0:	d00f      	beq.n	8003df2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b06      	cmp	r3, #6
 8003dd6:	d00c      	beq.n	8003df2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d009      	beq.n	8003df2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d006      	beq.n	8003df2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d003      	beq.n	8003df2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003dea:	2192      	movs	r1, #146	; 0x92
 8003dec:	4804      	ldr	r0, [pc, #16]	; (8003e00 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003dee:	f7ff f8a5 	bl	8002f3c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ff1a 	bl	8003c2c <__NVIC_SetPriorityGrouping>
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	08008f5c 	.word	0x08008f5c

08003e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b0f      	cmp	r3, #15
 8003e1a:	d903      	bls.n	8003e24 <HAL_NVIC_SetPriority+0x20>
 8003e1c:	21aa      	movs	r1, #170	; 0xaa
 8003e1e:	480e      	ldr	r0, [pc, #56]	; (8003e58 <HAL_NVIC_SetPriority+0x54>)
 8003e20:	f7ff f88c 	bl	8002f3c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b0f      	cmp	r3, #15
 8003e28:	d903      	bls.n	8003e32 <HAL_NVIC_SetPriority+0x2e>
 8003e2a:	21ab      	movs	r1, #171	; 0xab
 8003e2c:	480a      	ldr	r0, [pc, #40]	; (8003e58 <HAL_NVIC_SetPriority+0x54>)
 8003e2e:	f7ff f885 	bl	8002f3c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e32:	f7ff ff1f 	bl	8003c74 <__NVIC_GetPriorityGrouping>
 8003e36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	6978      	ldr	r0, [r7, #20]
 8003e3e:	f7ff ff6d 	bl	8003d1c <NVIC_EncodePriority>
 8003e42:	4602      	mov	r2, r0
 8003e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff ff3c 	bl	8003cc8 <__NVIC_SetPriority>
}
 8003e50:	bf00      	nop
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	08008f5c 	.word	0x08008f5c

08003e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	da03      	bge.n	8003e76 <HAL_NVIC_EnableIRQ+0x1a>
 8003e6e:	21be      	movs	r1, #190	; 0xbe
 8003e70:	4805      	ldr	r0, [pc, #20]	; (8003e88 <HAL_NVIC_EnableIRQ+0x2c>)
 8003e72:	f7ff f863 	bl	8002f3c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff08 	bl	8003c90 <__NVIC_EnableIRQ>
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	08008f5c 	.word	0x08008f5c

08003e8c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff73 	bl	8003d80 <SysTick_Config>
 8003e9a:	4603      	mov	r3, r0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d005      	beq.n	8003ec6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
 8003ec4:	e051      	b.n	8003f6a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 020e 	bic.w	r2, r2, #14
 8003ed4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_DMA_Abort_IT+0xd0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d029      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xa0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a20      	ldr	r2, [pc, #128]	; (8003f78 <HAL_DMA_Abort_IT+0xd4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d022      	beq.n	8003f40 <HAL_DMA_Abort_IT+0x9c>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_DMA_Abort_IT+0xd8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d01a      	beq.n	8003f3a <HAL_DMA_Abort_IT+0x96>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_DMA_Abort_IT+0xdc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d012      	beq.n	8003f34 <HAL_DMA_Abort_IT+0x90>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <HAL_DMA_Abort_IT+0xe0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00a      	beq.n	8003f2e <HAL_DMA_Abort_IT+0x8a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <HAL_DMA_Abort_IT+0xe4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d102      	bne.n	8003f28 <HAL_DMA_Abort_IT+0x84>
 8003f22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f26:	e00e      	b.n	8003f46 <HAL_DMA_Abort_IT+0xa2>
 8003f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f2c:	e00b      	b.n	8003f46 <HAL_DMA_Abort_IT+0xa2>
 8003f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f32:	e008      	b.n	8003f46 <HAL_DMA_Abort_IT+0xa2>
 8003f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f38:	e005      	b.n	8003f46 <HAL_DMA_Abort_IT+0xa2>
 8003f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f3e:	e002      	b.n	8003f46 <HAL_DMA_Abort_IT+0xa2>
 8003f40:	2310      	movs	r3, #16
 8003f42:	e000      	b.n	8003f46 <HAL_DMA_Abort_IT+0xa2>
 8003f44:	2301      	movs	r3, #1
 8003f46:	4a11      	ldr	r2, [pc, #68]	; (8003f8c <HAL_DMA_Abort_IT+0xe8>)
 8003f48:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
    } 
  }
  return status;
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40020008 	.word	0x40020008
 8003f78:	4002001c 	.word	0x4002001c
 8003f7c:	40020030 	.word	0x40020030
 8003f80:	40020044 	.word	0x40020044
 8003f84:	40020058 	.word	0x40020058
 8003f88:	4002006c 	.word	0x4002006c
 8003f8c:	40020000 	.word	0x40020000

08003f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a9c      	ldr	r2, [pc, #624]	; (8004218 <HAL_GPIO_Init+0x288>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_GPIO_Init+0x42>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a9b      	ldr	r2, [pc, #620]	; (800421c <HAL_GPIO_Init+0x28c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00f      	beq.n	8003fd2 <HAL_GPIO_Init+0x42>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a9a      	ldr	r2, [pc, #616]	; (8004220 <HAL_GPIO_Init+0x290>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_GPIO_Init+0x42>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a99      	ldr	r2, [pc, #612]	; (8004224 <HAL_GPIO_Init+0x294>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d007      	beq.n	8003fd2 <HAL_GPIO_Init+0x42>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a98      	ldr	r2, [pc, #608]	; (8004228 <HAL_GPIO_Init+0x298>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_Init+0x42>
 8003fca:	21bd      	movs	r1, #189	; 0xbd
 8003fcc:	4897      	ldr	r0, [pc, #604]	; (800422c <HAL_GPIO_Init+0x29c>)
 8003fce:	f7fe ffb5 	bl	8002f3c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_GPIO_Init+0x58>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0c1b      	lsrs	r3, r3, #16
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x60>
 8003fe8:	21be      	movs	r1, #190	; 0xbe
 8003fea:	4890      	ldr	r0, [pc, #576]	; (800422c <HAL_GPIO_Init+0x29c>)
 8003fec:	f7fe ffa6 	bl	8002f3c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 81eb 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	f000 81e6 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b11      	cmp	r3, #17
 800400a:	f000 81e1 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b02      	cmp	r3, #2
 8004014:	f000 81dc 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b12      	cmp	r3, #18
 800401e:	f000 81d7 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4a82      	ldr	r2, [pc, #520]	; (8004230 <HAL_GPIO_Init+0x2a0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	f000 81d1 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4a80      	ldr	r2, [pc, #512]	; (8004234 <HAL_GPIO_Init+0x2a4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	f000 81cb 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4a7e      	ldr	r2, [pc, #504]	; (8004238 <HAL_GPIO_Init+0x2a8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	f000 81c5 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4a7c      	ldr	r2, [pc, #496]	; (800423c <HAL_GPIO_Init+0x2ac>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f000 81bf 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4a7a      	ldr	r2, [pc, #488]	; (8004240 <HAL_GPIO_Init+0x2b0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	f000 81b9 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4a78      	ldr	r2, [pc, #480]	; (8004244 <HAL_GPIO_Init+0x2b4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	f000 81b3 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b03      	cmp	r3, #3
 8004070:	f000 81ae 	beq.w	80043d0 <HAL_GPIO_Init+0x440>
 8004074:	21bf      	movs	r1, #191	; 0xbf
 8004076:	486d      	ldr	r0, [pc, #436]	; (800422c <HAL_GPIO_Init+0x29c>)
 8004078:	f7fe ff60 	bl	8002f3c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800407c:	e1a8      	b.n	80043d0 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800407e:	2201      	movs	r2, #1
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	4013      	ands	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	429a      	cmp	r2, r3
 8004098:	f040 8197 	bne.w	80043ca <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a5e      	ldr	r2, [pc, #376]	; (8004218 <HAL_GPIO_Init+0x288>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d013      	beq.n	80040cc <HAL_GPIO_Init+0x13c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a5d      	ldr	r2, [pc, #372]	; (800421c <HAL_GPIO_Init+0x28c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00f      	beq.n	80040cc <HAL_GPIO_Init+0x13c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a5c      	ldr	r2, [pc, #368]	; (8004220 <HAL_GPIO_Init+0x290>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00b      	beq.n	80040cc <HAL_GPIO_Init+0x13c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a5b      	ldr	r2, [pc, #364]	; (8004224 <HAL_GPIO_Init+0x294>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d007      	beq.n	80040cc <HAL_GPIO_Init+0x13c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a5a      	ldr	r2, [pc, #360]	; (8004228 <HAL_GPIO_Init+0x298>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d003      	beq.n	80040cc <HAL_GPIO_Init+0x13c>
 80040c4:	21cd      	movs	r1, #205	; 0xcd
 80040c6:	4859      	ldr	r0, [pc, #356]	; (800422c <HAL_GPIO_Init+0x29c>)
 80040c8:	f7fe ff38 	bl	8002f3c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b12      	cmp	r3, #18
 80040d2:	d065      	beq.n	80041a0 <HAL_GPIO_Init+0x210>
 80040d4:	2b12      	cmp	r3, #18
 80040d6:	d80e      	bhi.n	80040f6 <HAL_GPIO_Init+0x166>
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d04c      	beq.n	8004176 <HAL_GPIO_Init+0x1e6>
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d804      	bhi.n	80040ea <HAL_GPIO_Init+0x15a>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d072      	beq.n	80041ca <HAL_GPIO_Init+0x23a>
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d01d      	beq.n	8004124 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80040e8:	e0b1      	b.n	800424e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	f000 80ac 	beq.w	8004248 <HAL_GPIO_Init+0x2b8>
 80040f0:	2b11      	cmp	r3, #17
 80040f2:	d02b      	beq.n	800414c <HAL_GPIO_Init+0x1bc>
          break;
 80040f4:	e0ab      	b.n	800424e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80040f6:	4a4f      	ldr	r2, [pc, #316]	; (8004234 <HAL_GPIO_Init+0x2a4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d066      	beq.n	80041ca <HAL_GPIO_Init+0x23a>
 80040fc:	4a4d      	ldr	r2, [pc, #308]	; (8004234 <HAL_GPIO_Init+0x2a4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d806      	bhi.n	8004110 <HAL_GPIO_Init+0x180>
 8004102:	4a4b      	ldr	r2, [pc, #300]	; (8004230 <HAL_GPIO_Init+0x2a0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d060      	beq.n	80041ca <HAL_GPIO_Init+0x23a>
 8004108:	4a4c      	ldr	r2, [pc, #304]	; (800423c <HAL_GPIO_Init+0x2ac>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d05d      	beq.n	80041ca <HAL_GPIO_Init+0x23a>
          break;
 800410e:	e09e      	b.n	800424e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8004110:	4a49      	ldr	r2, [pc, #292]	; (8004238 <HAL_GPIO_Init+0x2a8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d059      	beq.n	80041ca <HAL_GPIO_Init+0x23a>
 8004116:	4a4b      	ldr	r2, [pc, #300]	; (8004244 <HAL_GPIO_Init+0x2b4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d056      	beq.n	80041ca <HAL_GPIO_Init+0x23a>
 800411c:	4a48      	ldr	r2, [pc, #288]	; (8004240 <HAL_GPIO_Init+0x2b0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d053      	beq.n	80041ca <HAL_GPIO_Init+0x23a>
          break;
 8004122:	e094      	b.n	800424e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d00b      	beq.n	8004144 <HAL_GPIO_Init+0x1b4>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d007      	beq.n	8004144 <HAL_GPIO_Init+0x1b4>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d003      	beq.n	8004144 <HAL_GPIO_Init+0x1b4>
 800413c:	21d5      	movs	r1, #213	; 0xd5
 800413e:	483b      	ldr	r0, [pc, #236]	; (800422c <HAL_GPIO_Init+0x29c>)
 8004140:	f7fe fefc 	bl	8002f3c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	623b      	str	r3, [r7, #32]
          break;
 800414a:	e080      	b.n	800424e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d00b      	beq.n	800416c <HAL_GPIO_Init+0x1dc>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d007      	beq.n	800416c <HAL_GPIO_Init+0x1dc>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x1dc>
 8004164:	21dc      	movs	r1, #220	; 0xdc
 8004166:	4831      	ldr	r0, [pc, #196]	; (800422c <HAL_GPIO_Init+0x29c>)
 8004168:	f7fe fee8 	bl	8002f3c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	3304      	adds	r3, #4
 8004172:	623b      	str	r3, [r7, #32]
          break;
 8004174:	e06b      	b.n	800424e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d00b      	beq.n	8004196 <HAL_GPIO_Init+0x206>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d007      	beq.n	8004196 <HAL_GPIO_Init+0x206>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x206>
 800418e:	21e3      	movs	r1, #227	; 0xe3
 8004190:	4826      	ldr	r0, [pc, #152]	; (800422c <HAL_GPIO_Init+0x29c>)
 8004192:	f7fe fed3 	bl	8002f3c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	3308      	adds	r3, #8
 800419c:	623b      	str	r3, [r7, #32]
          break;
 800419e:	e056      	b.n	800424e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d00b      	beq.n	80041c0 <HAL_GPIO_Init+0x230>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d007      	beq.n	80041c0 <HAL_GPIO_Init+0x230>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x230>
 80041b8:	21ea      	movs	r1, #234	; 0xea
 80041ba:	481c      	ldr	r0, [pc, #112]	; (800422c <HAL_GPIO_Init+0x29c>)
 80041bc:	f7fe febe 	bl	8002f3c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	330c      	adds	r3, #12
 80041c6:	623b      	str	r3, [r7, #32]
          break;
 80041c8:	e041      	b.n	800424e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_GPIO_Init+0x25a>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d007      	beq.n	80041ea <HAL_GPIO_Init+0x25a>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x25a>
 80041e2:	21f7      	movs	r1, #247	; 0xf7
 80041e4:	4811      	ldr	r0, [pc, #68]	; (800422c <HAL_GPIO_Init+0x29c>)
 80041e6:	f7fe fea9 	bl	8002f3c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041f2:	2304      	movs	r3, #4
 80041f4:	623b      	str	r3, [r7, #32]
          break;
 80041f6:	e02a      	b.n	800424e <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d105      	bne.n	800420c <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004200:	2308      	movs	r3, #8
 8004202:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	611a      	str	r2, [r3, #16]
          break;
 800420a:	e020      	b.n	800424e <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800420c:	2308      	movs	r3, #8
 800420e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	615a      	str	r2, [r3, #20]
          break;
 8004216:	e01a      	b.n	800424e <HAL_GPIO_Init+0x2be>
 8004218:	40010800 	.word	0x40010800
 800421c:	40010c00 	.word	0x40010c00
 8004220:	40011000 	.word	0x40011000
 8004224:	40011400 	.word	0x40011400
 8004228:	40011800 	.word	0x40011800
 800422c:	08008f98 	.word	0x08008f98
 8004230:	10110000 	.word	0x10110000
 8004234:	10210000 	.word	0x10210000
 8004238:	10310000 	.word	0x10310000
 800423c:	10120000 	.word	0x10120000
 8004240:	10220000 	.word	0x10220000
 8004244:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004248:	2300      	movs	r3, #0
 800424a:	623b      	str	r3, [r7, #32]
          break;
 800424c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2bff      	cmp	r3, #255	; 0xff
 8004252:	d801      	bhi.n	8004258 <HAL_GPIO_Init+0x2c8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	e001      	b.n	800425c <HAL_GPIO_Init+0x2cc>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2bff      	cmp	r3, #255	; 0xff
 8004262:	d802      	bhi.n	800426a <HAL_GPIO_Init+0x2da>
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	e002      	b.n	8004270 <HAL_GPIO_Init+0x2e0>
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	3b08      	subs	r3, #8
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	210f      	movs	r1, #15
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	401a      	ands	r2, r3
 8004282:	6a39      	ldr	r1, [r7, #32]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	431a      	orrs	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8096 	beq.w	80043ca <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800429e:	4b52      	ldr	r3, [pc, #328]	; (80043e8 <HAL_GPIO_Init+0x458>)
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	4a51      	ldr	r2, [pc, #324]	; (80043e8 <HAL_GPIO_Init+0x458>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6193      	str	r3, [r2, #24]
 80042aa:	4b4f      	ldr	r3, [pc, #316]	; (80043e8 <HAL_GPIO_Init+0x458>)
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042b6:	4a4d      	ldr	r2, [pc, #308]	; (80043ec <HAL_GPIO_Init+0x45c>)
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	089b      	lsrs	r3, r3, #2
 80042bc:	3302      	adds	r3, #2
 80042be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	220f      	movs	r2, #15
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4013      	ands	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a44      	ldr	r2, [pc, #272]	; (80043f0 <HAL_GPIO_Init+0x460>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d013      	beq.n	800430a <HAL_GPIO_Init+0x37a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a43      	ldr	r2, [pc, #268]	; (80043f4 <HAL_GPIO_Init+0x464>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00d      	beq.n	8004306 <HAL_GPIO_Init+0x376>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a42      	ldr	r2, [pc, #264]	; (80043f8 <HAL_GPIO_Init+0x468>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <HAL_GPIO_Init+0x372>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a41      	ldr	r2, [pc, #260]	; (80043fc <HAL_GPIO_Init+0x46c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d101      	bne.n	80042fe <HAL_GPIO_Init+0x36e>
 80042fa:	2303      	movs	r3, #3
 80042fc:	e006      	b.n	800430c <HAL_GPIO_Init+0x37c>
 80042fe:	2304      	movs	r3, #4
 8004300:	e004      	b.n	800430c <HAL_GPIO_Init+0x37c>
 8004302:	2302      	movs	r3, #2
 8004304:	e002      	b.n	800430c <HAL_GPIO_Init+0x37c>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <HAL_GPIO_Init+0x37c>
 800430a:	2300      	movs	r3, #0
 800430c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430e:	f002 0203 	and.w	r2, r2, #3
 8004312:	0092      	lsls	r2, r2, #2
 8004314:	4093      	lsls	r3, r2
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800431c:	4933      	ldr	r1, [pc, #204]	; (80043ec <HAL_GPIO_Init+0x45c>)
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	3302      	adds	r3, #2
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d006      	beq.n	8004344 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004336:	4b32      	ldr	r3, [pc, #200]	; (8004400 <HAL_GPIO_Init+0x470>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4931      	ldr	r1, [pc, #196]	; (8004400 <HAL_GPIO_Init+0x470>)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
 8004342:	e006      	b.n	8004352 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004344:	4b2e      	ldr	r3, [pc, #184]	; (8004400 <HAL_GPIO_Init+0x470>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	43db      	mvns	r3, r3
 800434c:	492c      	ldr	r1, [pc, #176]	; (8004400 <HAL_GPIO_Init+0x470>)
 800434e:	4013      	ands	r3, r2
 8004350:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d006      	beq.n	800436c <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800435e:	4b28      	ldr	r3, [pc, #160]	; (8004400 <HAL_GPIO_Init+0x470>)
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	4927      	ldr	r1, [pc, #156]	; (8004400 <HAL_GPIO_Init+0x470>)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
 800436a:	e006      	b.n	800437a <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800436c:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_GPIO_Init+0x470>)
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	43db      	mvns	r3, r3
 8004374:	4922      	ldr	r1, [pc, #136]	; (8004400 <HAL_GPIO_Init+0x470>)
 8004376:	4013      	ands	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d006      	beq.n	8004394 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004386:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_GPIO_Init+0x470>)
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	491d      	ldr	r1, [pc, #116]	; (8004400 <HAL_GPIO_Init+0x470>)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
 8004392:	e006      	b.n	80043a2 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004394:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <HAL_GPIO_Init+0x470>)
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	43db      	mvns	r3, r3
 800439c:	4918      	ldr	r1, [pc, #96]	; (8004400 <HAL_GPIO_Init+0x470>)
 800439e:	4013      	ands	r3, r2
 80043a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043ae:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_GPIO_Init+0x470>)
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	4913      	ldr	r1, [pc, #76]	; (8004400 <HAL_GPIO_Init+0x470>)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60cb      	str	r3, [r1, #12]
 80043ba:	e006      	b.n	80043ca <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_GPIO_Init+0x470>)
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	490e      	ldr	r1, [pc, #56]	; (8004400 <HAL_GPIO_Init+0x470>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	3301      	adds	r3, #1
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	fa22 f303 	lsr.w	r3, r2, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f47f ae4f 	bne.w	800407e <HAL_GPIO_Init+0xee>
  }
}
 80043e0:	bf00      	nop
 80043e2:	3728      	adds	r7, #40	; 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40010800 	.word	0x40010800
 80043f4:	40010c00 	.word	0x40010c00
 80043f8:	40011000 	.word	0x40011000
 80043fc:	40011400 	.word	0x40011400
 8004400:	40010400 	.word	0x40010400

08004404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004410:	887b      	ldrh	r3, [r7, #2]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d004      	beq.n	8004420 <HAL_GPIO_ReadPin+0x1c>
 8004416:	887b      	ldrh	r3, [r7, #2]
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <HAL_GPIO_ReadPin+0x26>
 8004420:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8004424:	4809      	ldr	r0, [pc, #36]	; (800444c <HAL_GPIO_ReadPin+0x48>)
 8004426:	f7fe fd89 	bl	8002f3c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	887b      	ldrh	r3, [r7, #2]
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e001      	b.n	8004440 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004440:	7bfb      	ldrb	r3, [r7, #15]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	08008f98 	.word	0x08008f98

08004450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	807b      	strh	r3, [r7, #2]
 800445c:	4613      	mov	r3, r2
 800445e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004460:	887b      	ldrh	r3, [r7, #2]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d004      	beq.n	8004470 <HAL_GPIO_WritePin+0x20>
 8004466:	887b      	ldrh	r3, [r7, #2]
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <HAL_GPIO_WritePin+0x2a>
 8004470:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8004474:	480e      	ldr	r0, [pc, #56]	; (80044b0 <HAL_GPIO_WritePin+0x60>)
 8004476:	f7fe fd61 	bl	8002f3c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800447a:	787b      	ldrb	r3, [r7, #1]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <HAL_GPIO_WritePin+0x40>
 8004480:	787b      	ldrb	r3, [r7, #1]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d004      	beq.n	8004490 <HAL_GPIO_WritePin+0x40>
 8004486:	f240 11d5 	movw	r1, #469	; 0x1d5
 800448a:	4809      	ldr	r0, [pc, #36]	; (80044b0 <HAL_GPIO_WritePin+0x60>)
 800448c:	f7fe fd56 	bl	8002f3c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004490:	787b      	ldrb	r3, [r7, #1]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004496:	887a      	ldrh	r2, [r7, #2]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800449c:	e003      	b.n	80044a6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800449e:	887b      	ldrh	r3, [r7, #2]
 80044a0:	041a      	lsls	r2, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	611a      	str	r2, [r3, #16]
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	08008f98 	.word	0x08008f98

080044b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80044c0:	887b      	ldrh	r3, [r7, #2]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d004      	beq.n	80044d0 <HAL_GPIO_TogglePin+0x1c>
 80044c6:	887b      	ldrh	r3, [r7, #2]
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	041b      	lsls	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_GPIO_TogglePin+0x26>
 80044d0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80044d4:	4809      	ldr	r0, [pc, #36]	; (80044fc <HAL_GPIO_TogglePin+0x48>)
 80044d6:	f7fe fd31 	bl	8002f3c <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	887b      	ldrh	r3, [r7, #2]
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044e6:	887a      	ldrh	r2, [r7, #2]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80044ec:	e002      	b.n	80044f4 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044ee:	887a      	ldrh	r2, [r7, #2]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	611a      	str	r2, [r3, #16]
}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	08008f98 	.word	0x08008f98

08004500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e1ab      	b.n	800486a <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4aa0      	ldr	r2, [pc, #640]	; (8004798 <HAL_I2C_Init+0x298>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d009      	beq.n	8004530 <HAL_I2C_Init+0x30>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a9e      	ldr	r2, [pc, #632]	; (800479c <HAL_I2C_Init+0x29c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d004      	beq.n	8004530 <HAL_I2C_Init+0x30>
 8004526:	f240 11d1 	movw	r1, #465	; 0x1d1
 800452a:	489d      	ldr	r0, [pc, #628]	; (80047a0 <HAL_I2C_Init+0x2a0>)
 800452c:	f7fe fd06 	bl	8002f3c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d004      	beq.n	8004542 <HAL_I2C_Init+0x42>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4a99      	ldr	r2, [pc, #612]	; (80047a4 <HAL_I2C_Init+0x2a4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d904      	bls.n	800454c <HAL_I2C_Init+0x4c>
 8004542:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8004546:	4896      	ldr	r0, [pc, #600]	; (80047a0 <HAL_I2C_Init+0x2a0>)
 8004548:	f7fe fcf8 	bl	8002f3c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <HAL_I2C_Init+0x68>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800455c:	d004      	beq.n	8004568 <HAL_I2C_Init+0x68>
 800455e:	f240 11d3 	movw	r1, #467	; 0x1d3
 8004562:	488f      	ldr	r0, [pc, #572]	; (80047a0 <HAL_I2C_Init+0x2a0>)
 8004564:	f7fe fcea 	bl	8002f3c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004570:	f023 0303 	bic.w	r3, r3, #3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_I2C_Init+0x82>
 8004578:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800457c:	4888      	ldr	r0, [pc, #544]	; (80047a0 <HAL_I2C_Init+0x2a0>)
 800457e:	f7fe fcdd 	bl	8002f3c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800458a:	d009      	beq.n	80045a0 <HAL_I2C_Init+0xa0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004594:	d004      	beq.n	80045a0 <HAL_I2C_Init+0xa0>
 8004596:	f240 11d5 	movw	r1, #469	; 0x1d5
 800459a:	4881      	ldr	r0, [pc, #516]	; (80047a0 <HAL_I2C_Init+0x2a0>)
 800459c:	f7fe fcce 	bl	8002f3c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_I2C_Init+0xba>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d004      	beq.n	80045ba <HAL_I2C_Init+0xba>
 80045b0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80045b4:	487a      	ldr	r0, [pc, #488]	; (80047a0 <HAL_I2C_Init+0x2a0>)
 80045b6:	f7fe fcc1 	bl	8002f3c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <HAL_I2C_Init+0xd0>
 80045c6:	f240 11d7 	movw	r1, #471	; 0x1d7
 80045ca:	4875      	ldr	r0, [pc, #468]	; (80047a0 <HAL_I2C_Init+0x2a0>)
 80045cc:	f7fe fcb6 	bl	8002f3c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_I2C_Init+0xea>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d004      	beq.n	80045ea <HAL_I2C_Init+0xea>
 80045e0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80045e4:	486e      	ldr	r0, [pc, #440]	; (80047a0 <HAL_I2C_Init+0x2a0>)
 80045e6:	f7fe fca9 	bl	8002f3c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <HAL_I2C_Init+0x104>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	2b80      	cmp	r3, #128	; 0x80
 80045f8:	d004      	beq.n	8004604 <HAL_I2C_Init+0x104>
 80045fa:	f240 11d9 	movw	r1, #473	; 0x1d9
 80045fe:	4868      	ldr	r0, [pc, #416]	; (80047a0 <HAL_I2C_Init+0x2a0>)
 8004600:	f7fe fc9c 	bl	8002f3c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d106      	bne.n	800461e <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7fe fb9d 	bl	8002d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2224      	movs	r2, #36	; 0x24
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004644:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004654:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004656:	f001 fcfd 	bl	8006054 <HAL_RCC_GetPCLK1Freq>
 800465a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	4a51      	ldr	r2, [pc, #324]	; (80047a8 <HAL_I2C_Init+0x2a8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d807      	bhi.n	8004676 <HAL_I2C_Init+0x176>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a50      	ldr	r2, [pc, #320]	; (80047ac <HAL_I2C_Init+0x2ac>)
 800466a:	4293      	cmp	r3, r2
 800466c:	bf94      	ite	ls
 800466e:	2301      	movls	r3, #1
 8004670:	2300      	movhi	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	e006      	b.n	8004684 <HAL_I2C_Init+0x184>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4a4d      	ldr	r2, [pc, #308]	; (80047b0 <HAL_I2C_Init+0x2b0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	bf94      	ite	ls
 800467e:	2301      	movls	r3, #1
 8004680:	2300      	movhi	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0ee      	b.n	800486a <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a49      	ldr	r2, [pc, #292]	; (80047b4 <HAL_I2C_Init+0x2b4>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	0c9b      	lsrs	r3, r3, #18
 8004696:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4a3b      	ldr	r2, [pc, #236]	; (80047a8 <HAL_I2C_Init+0x2a8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d802      	bhi.n	80046c6 <HAL_I2C_Init+0x1c6>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	3301      	adds	r3, #1
 80046c4:	e009      	b.n	80046da <HAL_I2C_Init+0x1da>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	4a39      	ldr	r2, [pc, #228]	; (80047b8 <HAL_I2C_Init+0x2b8>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	3301      	adds	r3, #1
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	430b      	orrs	r3, r1
 80046e0:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046ec:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	492c      	ldr	r1, [pc, #176]	; (80047a8 <HAL_I2C_Init+0x2a8>)
 80046f6:	428b      	cmp	r3, r1
 80046f8:	d80d      	bhi.n	8004716 <HAL_I2C_Init+0x216>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1e59      	subs	r1, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	fbb1 f3f3 	udiv	r3, r1, r3
 8004708:	3301      	adds	r3, #1
 800470a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470e:	2b04      	cmp	r3, #4
 8004710:	bf38      	it	cc
 8004712:	2304      	movcc	r3, #4
 8004714:	e062      	b.n	80047dc <HAL_I2C_Init+0x2dc>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d111      	bne.n	8004742 <HAL_I2C_Init+0x242>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1e58      	subs	r0, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	440b      	add	r3, r1
 800472c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004730:	3301      	adds	r3, #1
 8004732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	e012      	b.n	8004768 <HAL_I2C_Init+0x268>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1e58      	subs	r0, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6859      	ldr	r1, [r3, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	0099      	lsls	r1, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	fbb0 f3f3 	udiv	r3, r0, r3
 8004758:	3301      	adds	r3, #1
 800475a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf0c      	ite	eq
 8004762:	2301      	moveq	r3, #1
 8004764:	2300      	movne	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_I2C_Init+0x270>
 800476c:	2301      	movs	r3, #1
 800476e:	e035      	b.n	80047dc <HAL_I2C_Init+0x2dc>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d121      	bne.n	80047bc <HAL_I2C_Init+0x2bc>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1e58      	subs	r0, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	440b      	add	r3, r1
 8004786:	fbb0 f3f3 	udiv	r3, r0, r3
 800478a:	3301      	adds	r3, #1
 800478c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004794:	e022      	b.n	80047dc <HAL_I2C_Init+0x2dc>
 8004796:	bf00      	nop
 8004798:	40005400 	.word	0x40005400
 800479c:	40005800 	.word	0x40005800
 80047a0:	08008fd4 	.word	0x08008fd4
 80047a4:	00061a80 	.word	0x00061a80
 80047a8:	000186a0 	.word	0x000186a0
 80047ac:	001e847f 	.word	0x001e847f
 80047b0:	003d08ff 	.word	0x003d08ff
 80047b4:	431bde83 	.word	0x431bde83
 80047b8:	10624dd3 	.word	0x10624dd3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1e58      	subs	r0, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	0099      	lsls	r1, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	6809      	ldr	r1, [r1, #0]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800480a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6911      	ldr	r1, [r2, #16]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68d2      	ldr	r2, [r2, #12]
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	430b      	orrs	r3, r1
 800481e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop

08004874 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	607a      	str	r2, [r7, #4]
 800487e:	461a      	mov	r2, r3
 8004880:	460b      	mov	r3, r1
 8004882:	817b      	strh	r3, [r7, #10]
 8004884:	4613      	mov	r3, r2
 8004886:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004888:	f7fe fe3c 	bl	8003504 <HAL_GetTick>
 800488c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b20      	cmp	r3, #32
 8004898:	f040 80e0 	bne.w	8004a5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2319      	movs	r3, #25
 80048a2:	2201      	movs	r2, #1
 80048a4:	4970      	ldr	r1, [pc, #448]	; (8004a68 <HAL_I2C_Master_Transmit+0x1f4>)
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 fc8c 	bl	80051c4 <I2C_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
 80048b4:	e0d3      	b.n	8004a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_I2C_Master_Transmit+0x50>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e0cc      	b.n	8004a5e <HAL_I2C_Master_Transmit+0x1ea>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d007      	beq.n	80048ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2221      	movs	r2, #33	; 0x21
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2210      	movs	r2, #16
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	893a      	ldrh	r2, [r7, #8]
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a50      	ldr	r2, [pc, #320]	; (8004a6c <HAL_I2C_Master_Transmit+0x1f8>)
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800492c:	8979      	ldrh	r1, [r7, #10]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	6a3a      	ldr	r2, [r7, #32]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 faf6 	bl	8004f24 <I2C_MasterRequestWrite>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e08d      	b.n	8004a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004942:	2300      	movs	r3, #0
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004958:	e066      	b.n	8004a28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	6a39      	ldr	r1, [r7, #32]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fd06 	bl	8005370 <I2C_WaitOnTXEFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00d      	beq.n	8004986 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	2b04      	cmp	r3, #4
 8004970:	d107      	bne.n	8004982 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004980:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e06b      	b.n	8004a5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	781a      	ldrb	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d11b      	bne.n	80049fc <HAL_I2C_Master_Transmit+0x188>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d017      	beq.n	80049fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	781a      	ldrb	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	6a39      	ldr	r1, [r7, #32]
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fcf6 	bl	80053f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00d      	beq.n	8004a28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d107      	bne.n	8004a24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e01a      	b.n	8004a5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d194      	bne.n	800495a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e000      	b.n	8004a5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
  }
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	00100002 	.word	0x00100002
 8004a6c:	ffff0000 	.word	0xffff0000

08004a70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08c      	sub	sp, #48	; 0x30
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	817b      	strh	r3, [r7, #10]
 8004a80:	4613      	mov	r3, r2
 8004a82:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a88:	f7fe fd3c 	bl	8003504 <HAL_GetTick>
 8004a8c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	f040 8238 	bne.w	8004f0c <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	2319      	movs	r3, #25
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	497e      	ldr	r1, [pc, #504]	; (8004ca0 <HAL_I2C_Master_Receive+0x230>)
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fb8c 	bl	80051c4 <I2C_WaitOnFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e22b      	b.n	8004f0e <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_I2C_Master_Receive+0x54>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e224      	b.n	8004f0e <HAL_I2C_Master_Receive+0x49e>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d007      	beq.n	8004aea <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2222      	movs	r2, #34	; 0x22
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2210      	movs	r2, #16
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	893a      	ldrh	r2, [r7, #8]
 8004b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a5e      	ldr	r2, [pc, #376]	; (8004ca4 <HAL_I2C_Master_Receive+0x234>)
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b2c:	8979      	ldrh	r1, [r7, #10]
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fa78 	bl	8005028 <I2C_MasterRequestRead>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e1e5      	b.n	8004f0e <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d113      	bne.n	8004b72 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	e1b9      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d11d      	bne.n	8004bb6 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b88:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b8a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004bb2:	b662      	cpsie	i
 8004bb4:	e197      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d11d      	bne.n	8004bfa <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bce:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004bf6:	b662      	cpsie	i
 8004bf8:	e175      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004c20:	e161      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	f200 811a 	bhi.w	8004e60 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d123      	bne.n	8004c7c <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 fc1b 	bl	8005474 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e162      	b.n	8004f0e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c7a:	e134      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d150      	bne.n	8004d26 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	4906      	ldr	r1, [pc, #24]	; (8004ca8 <HAL_I2C_Master_Receive+0x238>)
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fa98 	bl	80051c4 <I2C_WaitOnFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d008      	beq.n	8004cac <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e137      	b.n	8004f0e <HAL_I2C_Master_Receive+0x49e>
 8004c9e:	bf00      	nop
 8004ca0:	00100002 	.word	0x00100002
 8004ca4:	ffff0000 	.word	0xffff0000
 8004ca8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004cac:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cbc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004cf0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d24:	e0df      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	497a      	ldr	r1, [pc, #488]	; (8004f18 <HAL_I2C_Master_Receive+0x4a8>)
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fa47 	bl	80051c4 <I2C_WaitOnFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0e6      	b.n	8004f0e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d50:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d84:	4b65      	ldr	r3, [pc, #404]	; (8004f1c <HAL_I2C_Master_Receive+0x4ac>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	08db      	lsrs	r3, r3, #3
 8004d8a:	4a65      	ldr	r2, [pc, #404]	; (8004f20 <HAL_I2C_Master_Receive+0x4b0>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	0a1a      	lsrs	r2, r3, #8
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	00da      	lsls	r2, r3, #3
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d117      	bne.n	8004dda <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	f043 0220 	orr.w	r2, r3, #32
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004dcc:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e099      	b.n	8004f0e <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d1da      	bne.n	8004d9e <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e2a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e5e:	e042      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fb05 	bl	8005474 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e04c      	b.n	8004f0e <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d118      	bne.n	8004ee6 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f47f ae99 	bne.w	8004c22 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e000      	b.n	8004f0e <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8004f0c:	2302      	movs	r3, #2
  }
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3728      	adds	r7, #40	; 0x28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	00010004 	.word	0x00010004
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	14f8b589 	.word	0x14f8b589

08004f24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	460b      	mov	r3, r1
 8004f32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d006      	beq.n	8004f4e <I2C_MasterRequestWrite+0x2a>
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d003      	beq.n	8004f4e <I2C_MasterRequestWrite+0x2a>
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f4c:	d108      	bne.n	8004f60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e00b      	b.n	8004f78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	2b12      	cmp	r3, #18
 8004f66:	d107      	bne.n	8004f78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f91d 	bl	80051c4 <I2C_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f9e:	d103      	bne.n	8004fa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e035      	b.n	8005018 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb4:	d108      	bne.n	8004fc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fb6:	897b      	ldrh	r3, [r7, #10]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fc4:	611a      	str	r2, [r3, #16]
 8004fc6:	e01b      	b.n	8005000 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fc8:	897b      	ldrh	r3, [r7, #10]
 8004fca:	11db      	asrs	r3, r3, #7
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f003 0306 	and.w	r3, r3, #6
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f063 030f 	orn	r3, r3, #15
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	490e      	ldr	r1, [pc, #56]	; (8005020 <I2C_MasterRequestWrite+0xfc>)
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f943 	bl	8005272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e010      	b.n	8005018 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ff6:	897b      	ldrh	r3, [r7, #10]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4907      	ldr	r1, [pc, #28]	; (8005024 <I2C_MasterRequestWrite+0x100>)
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 f933 	bl	8005272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	00010008 	.word	0x00010008
 8005024:	00010002 	.word	0x00010002

08005028 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	460b      	mov	r3, r1
 8005036:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800504c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d006      	beq.n	8005062 <I2C_MasterRequestRead+0x3a>
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d003      	beq.n	8005062 <I2C_MasterRequestRead+0x3a>
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005060:	d108      	bne.n	8005074 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e00b      	b.n	800508c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	2b11      	cmp	r3, #17
 800507a:	d107      	bne.n	800508c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800508a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f893 	bl	80051c4 <I2C_WaitOnFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00d      	beq.n	80050c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b2:	d103      	bne.n	80050bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e079      	b.n	80051b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c8:	d108      	bne.n	80050dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050ca:	897b      	ldrh	r3, [r7, #10]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	611a      	str	r2, [r3, #16]
 80050da:	e05f      	b.n	800519c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050dc:	897b      	ldrh	r3, [r7, #10]
 80050de:	11db      	asrs	r3, r3, #7
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 0306 	and.w	r3, r3, #6
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f063 030f 	orn	r3, r3, #15
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	4930      	ldr	r1, [pc, #192]	; (80051bc <I2C_MasterRequestRead+0x194>)
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f8b9 	bl	8005272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e054      	b.n	80051b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800510a:	897b      	ldrh	r3, [r7, #10]
 800510c:	b2da      	uxtb	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4929      	ldr	r1, [pc, #164]	; (80051c0 <I2C_MasterRequestRead+0x198>)
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f8a9 	bl	8005272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e044      	b.n	80051b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800514e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f831 	bl	80051c4 <I2C_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00d      	beq.n	8005184 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005176:	d103      	bne.n	8005180 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e017      	b.n	80051b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005184:	897b      	ldrh	r3, [r7, #10]
 8005186:	11db      	asrs	r3, r3, #7
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f003 0306 	and.w	r3, r3, #6
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f063 030e 	orn	r3, r3, #14
 8005194:	b2da      	uxtb	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	4907      	ldr	r1, [pc, #28]	; (80051c0 <I2C_MasterRequestRead+0x198>)
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f865 	bl	8005272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	00010008 	.word	0x00010008
 80051c0:	00010002 	.word	0x00010002

080051c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	4613      	mov	r3, r2
 80051d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051d4:	e025      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d021      	beq.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051de:	f7fe f991 	bl	8003504 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d302      	bcc.n	80051f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d116      	bne.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f043 0220 	orr.w	r2, r3, #32
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e023      	b.n	800526a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b01      	cmp	r3, #1
 800522a:	d10d      	bne.n	8005248 <I2C_WaitOnFlagUntilTimeout+0x84>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	43da      	mvns	r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4013      	ands	r3, r2
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	bf0c      	ite	eq
 800523e:	2301      	moveq	r3, #1
 8005240:	2300      	movne	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	e00c      	b.n	8005262 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	43da      	mvns	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4013      	ands	r3, r2
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf0c      	ite	eq
 800525a:	2301      	moveq	r3, #1
 800525c:	2300      	movne	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	429a      	cmp	r2, r3
 8005266:	d0b6      	beq.n	80051d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005280:	e051      	b.n	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005290:	d123      	bne.n	80052da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	f043 0204 	orr.w	r2, r3, #4
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e046      	b.n	8005368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e0:	d021      	beq.n	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e2:	f7fe f90f 	bl	8003504 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d302      	bcc.n	80052f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d116      	bne.n	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f043 0220 	orr.w	r2, r3, #32
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e020      	b.n	8005368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10c      	bne.n	800534a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	43da      	mvns	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4013      	ands	r3, r2
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	bf14      	ite	ne
 8005342:	2301      	movne	r3, #1
 8005344:	2300      	moveq	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	e00b      	b.n	8005362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	43da      	mvns	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4013      	ands	r3, r2
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	bf14      	ite	ne
 800535c:	2301      	movne	r3, #1
 800535e:	2300      	moveq	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d18d      	bne.n	8005282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800537c:	e02d      	b.n	80053da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f8ce 	bl	8005520 <I2C_IsAcknowledgeFailed>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e02d      	b.n	80053ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d021      	beq.n	80053da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005396:	f7fe f8b5 	bl	8003504 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d302      	bcc.n	80053ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d116      	bne.n	80053da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f043 0220 	orr.w	r2, r3, #32
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e007      	b.n	80053ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e4:	2b80      	cmp	r3, #128	; 0x80
 80053e6:	d1ca      	bne.n	800537e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053fe:	e02d      	b.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f88d 	bl	8005520 <I2C_IsAcknowledgeFailed>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e02d      	b.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d021      	beq.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005418:	f7fe f874 	bl	8003504 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d116      	bne.n	800545c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e007      	b.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b04      	cmp	r3, #4
 8005468:	d1ca      	bne.n	8005400 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005480:	e042      	b.n	8005508 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b10      	cmp	r3, #16
 800548e:	d119      	bne.n	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0210 	mvn.w	r2, #16
 8005498:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e029      	b.n	8005518 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c4:	f7fe f81e 	bl	8003504 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d302      	bcc.n	80054da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d116      	bne.n	8005508 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	f043 0220 	orr.w	r2, r3, #32
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e007      	b.n	8005518 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	d1b5      	bne.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005536:	d11b      	bne.n	8005570 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005540:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	f043 0204 	orr.w	r2, r3, #4
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e35c      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01c      	beq.n	80055d0 <HAL_RCC_OscConfig+0x54>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d116      	bne.n	80055d0 <HAL_RCC_OscConfig+0x54>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d110      	bne.n	80055d0 <HAL_RCC_OscConfig+0x54>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <HAL_RCC_OscConfig+0x54>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <HAL_RCC_OscConfig+0x54>
 80055c6:	f240 1167 	movw	r1, #359	; 0x167
 80055ca:	48a5      	ldr	r0, [pc, #660]	; (8005860 <HAL_RCC_OscConfig+0x2e4>)
 80055cc:	f7fd fcb6 	bl	8002f3c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 809a 	beq.w	8005712 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00e      	beq.n	8005604 <HAL_RCC_OscConfig+0x88>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ee:	d009      	beq.n	8005604 <HAL_RCC_OscConfig+0x88>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055f8:	d004      	beq.n	8005604 <HAL_RCC_OscConfig+0x88>
 80055fa:	f240 116d 	movw	r1, #365	; 0x16d
 80055fe:	4898      	ldr	r0, [pc, #608]	; (8005860 <HAL_RCC_OscConfig+0x2e4>)
 8005600:	f7fd fc9c 	bl	8002f3c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005604:	4b97      	ldr	r3, [pc, #604]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f003 030c 	and.w	r3, r3, #12
 800560c:	2b04      	cmp	r3, #4
 800560e:	d00c      	beq.n	800562a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005610:	4b94      	ldr	r3, [pc, #592]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f003 030c 	and.w	r3, r3, #12
 8005618:	2b08      	cmp	r3, #8
 800561a:	d112      	bne.n	8005642 <HAL_RCC_OscConfig+0xc6>
 800561c:	4b91      	ldr	r3, [pc, #580]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005628:	d10b      	bne.n	8005642 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800562a:	4b8e      	ldr	r3, [pc, #568]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d06c      	beq.n	8005710 <HAL_RCC_OscConfig+0x194>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d168      	bne.n	8005710 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e302      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564a:	d106      	bne.n	800565a <HAL_RCC_OscConfig+0xde>
 800564c:	4b85      	ldr	r3, [pc, #532]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a84      	ldr	r2, [pc, #528]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	e02e      	b.n	80056b8 <HAL_RCC_OscConfig+0x13c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10c      	bne.n	800567c <HAL_RCC_OscConfig+0x100>
 8005662:	4b80      	ldr	r3, [pc, #512]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a7f      	ldr	r2, [pc, #508]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4b7d      	ldr	r3, [pc, #500]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a7c      	ldr	r2, [pc, #496]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e01d      	b.n	80056b8 <HAL_RCC_OscConfig+0x13c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005684:	d10c      	bne.n	80056a0 <HAL_RCC_OscConfig+0x124>
 8005686:	4b77      	ldr	r3, [pc, #476]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a76      	ldr	r2, [pc, #472]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 800568c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	4b74      	ldr	r3, [pc, #464]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a73      	ldr	r2, [pc, #460]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e00b      	b.n	80056b8 <HAL_RCC_OscConfig+0x13c>
 80056a0:	4b70      	ldr	r3, [pc, #448]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a6f      	ldr	r2, [pc, #444]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 80056a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	4b6d      	ldr	r3, [pc, #436]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a6c      	ldr	r2, [pc, #432]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 80056b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c0:	f7fd ff20 	bl	8003504 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c8:	f7fd ff1c 	bl	8003504 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	; 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e2b6      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056da:	4b62      	ldr	r3, [pc, #392]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x14c>
 80056e6:	e014      	b.n	8005712 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e8:	f7fd ff0c 	bl	8003504 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f0:	f7fd ff08 	bl	8003504 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	; 0x64
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e2a2      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005702:	4b58      	ldr	r3, [pc, #352]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x174>
 800570e:	e000      	b.n	8005712 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d079      	beq.n	8005812 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_RCC_OscConfig+0x1bc>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d004      	beq.n	8005738 <HAL_RCC_OscConfig+0x1bc>
 800572e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8005732:	484b      	ldr	r0, [pc, #300]	; (8005860 <HAL_RCC_OscConfig+0x2e4>)
 8005734:	f7fd fc02 	bl	8002f3c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	2b1f      	cmp	r3, #31
 800573e:	d904      	bls.n	800574a <HAL_RCC_OscConfig+0x1ce>
 8005740:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8005744:	4846      	ldr	r0, [pc, #280]	; (8005860 <HAL_RCC_OscConfig+0x2e4>)
 8005746:	f7fd fbf9 	bl	8002f3c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800574a:	4b46      	ldr	r3, [pc, #280]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00b      	beq.n	800576e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005756:	4b43      	ldr	r3, [pc, #268]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b08      	cmp	r3, #8
 8005760:	d11c      	bne.n	800579c <HAL_RCC_OscConfig+0x220>
 8005762:	4b40      	ldr	r3, [pc, #256]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d116      	bne.n	800579c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576e:	4b3d      	ldr	r3, [pc, #244]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <HAL_RCC_OscConfig+0x20a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d001      	beq.n	8005786 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e260      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005786:	4b37      	ldr	r3, [pc, #220]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	4933      	ldr	r1, [pc, #204]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005796:	4313      	orrs	r3, r2
 8005798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800579a:	e03a      	b.n	8005812 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d020      	beq.n	80057e6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057a4:	4b30      	ldr	r3, [pc, #192]	; (8005868 <HAL_RCC_OscConfig+0x2ec>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057aa:	f7fd feab 	bl	8003504 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b2:	f7fd fea7 	bl	8003504 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e241      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c4:	4b27      	ldr	r3, [pc, #156]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d0:	4b24      	ldr	r3, [pc, #144]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	4921      	ldr	r1, [pc, #132]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	600b      	str	r3, [r1, #0]
 80057e4:	e015      	b.n	8005812 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057e6:	4b20      	ldr	r3, [pc, #128]	; (8005868 <HAL_RCC_OscConfig+0x2ec>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ec:	f7fd fe8a 	bl	8003504 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057f4:	f7fd fe86 	bl	8003504 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e220      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005806:	4b17      	ldr	r3, [pc, #92]	; (8005864 <HAL_RCC_OscConfig+0x2e8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f0      	bne.n	80057f4 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d048      	beq.n	80058b0 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <HAL_RCC_OscConfig+0x2bc>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d004      	beq.n	8005838 <HAL_RCC_OscConfig+0x2bc>
 800582e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8005832:	480b      	ldr	r0, [pc, #44]	; (8005860 <HAL_RCC_OscConfig+0x2e4>)
 8005834:	f7fd fb82 	bl	8002f3c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d021      	beq.n	8005884 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <HAL_RCC_OscConfig+0x2f0>)
 8005842:	2201      	movs	r2, #1
 8005844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005846:	f7fd fe5d 	bl	8003504 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800584c:	e010      	b.n	8005870 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800584e:	f7fd fe59 	bl	8003504 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d909      	bls.n	8005870 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e1f3      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
 8005860:	0800900c 	.word	0x0800900c
 8005864:	40021000 	.word	0x40021000
 8005868:	42420000 	.word	0x42420000
 800586c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005870:	4b67      	ldr	r3, [pc, #412]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0e8      	beq.n	800584e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800587c:	2001      	movs	r0, #1
 800587e:	f000 fc11 	bl	80060a4 <RCC_Delay>
 8005882:	e015      	b.n	80058b0 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005884:	4b63      	ldr	r3, [pc, #396]	; (8005a14 <HAL_RCC_OscConfig+0x498>)
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588a:	f7fd fe3b 	bl	8003504 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005892:	f7fd fe37 	bl	8003504 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e1d1      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a4:	4b5a      	ldr	r3, [pc, #360]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f0      	bne.n	8005892 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80c0 	beq.w	8005a3e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058be:	2300      	movs	r3, #0
 80058c0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00c      	beq.n	80058e4 <HAL_RCC_OscConfig+0x368>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d008      	beq.n	80058e4 <HAL_RCC_OscConfig+0x368>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	2b05      	cmp	r3, #5
 80058d8:	d004      	beq.n	80058e4 <HAL_RCC_OscConfig+0x368>
 80058da:	f240 2111 	movw	r1, #529	; 0x211
 80058de:	484e      	ldr	r0, [pc, #312]	; (8005a18 <HAL_RCC_OscConfig+0x49c>)
 80058e0:	f7fd fb2c 	bl	8002f3c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058e4:	4b4a      	ldr	r3, [pc, #296]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10d      	bne.n	800590c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058f0:	4b47      	ldr	r3, [pc, #284]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	4a46      	ldr	r2, [pc, #280]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 80058f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fa:	61d3      	str	r3, [r2, #28]
 80058fc:	4b44      	ldr	r3, [pc, #272]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005908:	2301      	movs	r3, #1
 800590a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590c:	4b43      	ldr	r3, [pc, #268]	; (8005a1c <HAL_RCC_OscConfig+0x4a0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d118      	bne.n	800594a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005918:	4b40      	ldr	r3, [pc, #256]	; (8005a1c <HAL_RCC_OscConfig+0x4a0>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a3f      	ldr	r2, [pc, #252]	; (8005a1c <HAL_RCC_OscConfig+0x4a0>)
 800591e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005924:	f7fd fdee 	bl	8003504 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800592c:	f7fd fdea 	bl	8003504 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	; 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e184      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593e:	4b37      	ldr	r3, [pc, #220]	; (8005a1c <HAL_RCC_OscConfig+0x4a0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d106      	bne.n	8005960 <HAL_RCC_OscConfig+0x3e4>
 8005952:	4b2f      	ldr	r3, [pc, #188]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	4a2e      	ldr	r2, [pc, #184]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 8005958:	f043 0301 	orr.w	r3, r3, #1
 800595c:	6213      	str	r3, [r2, #32]
 800595e:	e02d      	b.n	80059bc <HAL_RCC_OscConfig+0x440>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10c      	bne.n	8005982 <HAL_RCC_OscConfig+0x406>
 8005968:	4b29      	ldr	r3, [pc, #164]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	4a28      	ldr	r2, [pc, #160]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 800596e:	f023 0301 	bic.w	r3, r3, #1
 8005972:	6213      	str	r3, [r2, #32]
 8005974:	4b26      	ldr	r3, [pc, #152]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	4a25      	ldr	r2, [pc, #148]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 800597a:	f023 0304 	bic.w	r3, r3, #4
 800597e:	6213      	str	r3, [r2, #32]
 8005980:	e01c      	b.n	80059bc <HAL_RCC_OscConfig+0x440>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	2b05      	cmp	r3, #5
 8005988:	d10c      	bne.n	80059a4 <HAL_RCC_OscConfig+0x428>
 800598a:	4b21      	ldr	r3, [pc, #132]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	4a20      	ldr	r2, [pc, #128]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 8005990:	f043 0304 	orr.w	r3, r3, #4
 8005994:	6213      	str	r3, [r2, #32]
 8005996:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	4a1d      	ldr	r2, [pc, #116]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	6213      	str	r3, [r2, #32]
 80059a2:	e00b      	b.n	80059bc <HAL_RCC_OscConfig+0x440>
 80059a4:	4b1a      	ldr	r3, [pc, #104]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	6213      	str	r3, [r2, #32]
 80059b0:	4b17      	ldr	r3, [pc, #92]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 80059b6:	f023 0304 	bic.w	r3, r3, #4
 80059ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d015      	beq.n	80059f0 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059c4:	f7fd fd9e 	bl	8003504 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ca:	e00a      	b.n	80059e2 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059cc:	f7fd fd9a 	bl	8003504 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e132      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e2:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_RCC_OscConfig+0x494>)
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0ee      	beq.n	80059cc <HAL_RCC_OscConfig+0x450>
 80059ee:	e01d      	b.n	8005a2c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f0:	f7fd fd88 	bl	8003504 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059f6:	e013      	b.n	8005a20 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f8:	f7fd fd84 	bl	8003504 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d90a      	bls.n	8005a20 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e11c      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
 8005a0e:	bf00      	nop
 8005a10:	40021000 	.word	0x40021000
 8005a14:	42420480 	.word	0x42420480
 8005a18:	0800900c 	.word	0x0800900c
 8005a1c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a20:	4b8b      	ldr	r3, [pc, #556]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d105      	bne.n	8005a3e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a32:	4b87      	ldr	r3, [pc, #540]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	4a86      	ldr	r2, [pc, #536]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a3c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <HAL_RCC_OscConfig+0x4e4>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d008      	beq.n	8005a60 <HAL_RCC_OscConfig+0x4e4>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d004      	beq.n	8005a60 <HAL_RCC_OscConfig+0x4e4>
 8005a56:	f240 21af 	movw	r1, #687	; 0x2af
 8005a5a:	487e      	ldr	r0, [pc, #504]	; (8005c54 <HAL_RCC_OscConfig+0x6d8>)
 8005a5c:	f7fd fa6e 	bl	8002f3c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80ee 	beq.w	8005c46 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a6a:	4b79      	ldr	r3, [pc, #484]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f003 030c 	and.w	r3, r3, #12
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	f000 80ce 	beq.w	8005c14 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	f040 80b2 	bne.w	8005be6 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_RCC_OscConfig+0x522>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a92:	d004      	beq.n	8005a9e <HAL_RCC_OscConfig+0x522>
 8005a94:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8005a98:	486e      	ldr	r0, [pc, #440]	; (8005c54 <HAL_RCC_OscConfig+0x6d8>)
 8005a9a:	f7fd fa4f 	bl	8002f3c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d04a      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aae:	d045      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ab8:	d040      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ac2:	d03b      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005acc:	d036      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005ad6:	d031      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ae0:	d02c      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005aea:	d027      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005af4:	d022      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005afe:	d01d      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005b08:	d018      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005b12:	d013      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b1c:	d00e      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8005b26:	d009      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005b30:	d004      	beq.n	8005b3c <HAL_RCC_OscConfig+0x5c0>
 8005b32:	f240 21b9 	movw	r1, #697	; 0x2b9
 8005b36:	4847      	ldr	r0, [pc, #284]	; (8005c54 <HAL_RCC_OscConfig+0x6d8>)
 8005b38:	f7fd fa00 	bl	8002f3c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b3c:	4b46      	ldr	r3, [pc, #280]	; (8005c58 <HAL_RCC_OscConfig+0x6dc>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b42:	f7fd fcdf 	bl	8003504 <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b4a:	f7fd fcdb 	bl	8003504 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e075      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b5c:	4b3c      	ldr	r3, [pc, #240]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f0      	bne.n	8005b4a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b70:	d116      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <HAL_RCC_OscConfig+0x612>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b82:	d004      	beq.n	8005b8e <HAL_RCC_OscConfig+0x612>
 8005b84:	f240 21cf 	movw	r1, #719	; 0x2cf
 8005b88:	4832      	ldr	r0, [pc, #200]	; (8005c54 <HAL_RCC_OscConfig+0x6d8>)
 8005b8a:	f7fd f9d7 	bl	8002f3c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b8e:	4b30      	ldr	r3, [pc, #192]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	492d      	ldr	r1, [pc, #180]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ba0:	4b2b      	ldr	r3, [pc, #172]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a19      	ldr	r1, [r3, #32]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	4927      	ldr	r1, [pc, #156]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bb8:	4b27      	ldr	r3, [pc, #156]	; (8005c58 <HAL_RCC_OscConfig+0x6dc>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbe:	f7fd fca1 	bl	8003504 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc6:	f7fd fc9d 	bl	8003504 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e037      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd8:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x64a>
 8005be4:	e02f      	b.n	8005c46 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be6:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <HAL_RCC_OscConfig+0x6dc>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7fd fc8a 	bl	8003504 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fd fc86 	bl	8003504 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e020      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c06:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x678>
 8005c12:	e018      	b.n	8005c46 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e013      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_RCC_OscConfig+0x6d4>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d106      	bne.n	8005c42 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d001      	beq.n	8005c46 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40021000 	.word	0x40021000
 8005c54:	0800900c 	.word	0x0800900c
 8005c58:	42420060 	.word	0x42420060

08005c5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e176      	b.n	8005f5e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d116      	bne.n	8005caa <HAL_RCC_ClockConfig+0x4e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d110      	bne.n	8005caa <HAL_RCC_ClockConfig+0x4e>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <HAL_RCC_ClockConfig+0x4e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d104      	bne.n	8005caa <HAL_RCC_ClockConfig+0x4e>
 8005ca0:	f44f 714e 	mov.w	r1, #824	; 0x338
 8005ca4:	4874      	ldr	r0, [pc, #464]	; (8005e78 <HAL_RCC_ClockConfig+0x21c>)
 8005ca6:	f7fd f949 	bl	8002f3c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x6a>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d007      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x6a>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d004      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x6a>
 8005cbc:	f240 3139 	movw	r1, #825	; 0x339
 8005cc0:	486d      	ldr	r0, [pc, #436]	; (8005e78 <HAL_RCC_ClockConfig+0x21c>)
 8005cc2:	f7fd f93b 	bl	8002f3c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc6:	4b6d      	ldr	r3, [pc, #436]	; (8005e7c <HAL_RCC_ClockConfig+0x220>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d910      	bls.n	8005cf6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd4:	4b69      	ldr	r3, [pc, #420]	; (8005e7c <HAL_RCC_ClockConfig+0x220>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f023 0207 	bic.w	r2, r3, #7
 8005cdc:	4967      	ldr	r1, [pc, #412]	; (8005e7c <HAL_RCC_ClockConfig+0x220>)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce4:	4b65      	ldr	r3, [pc, #404]	; (8005e7c <HAL_RCC_ClockConfig+0x220>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d001      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e133      	b.n	8005f5e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d049      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d0e:	4b5c      	ldr	r3, [pc, #368]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4a5b      	ldr	r2, [pc, #364]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005d14:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d18:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d26:	4b56      	ldr	r3, [pc, #344]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	4a55      	ldr	r2, [pc, #340]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005d2c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d30:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d024      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x128>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b80      	cmp	r3, #128	; 0x80
 8005d40:	d020      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x128>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b90      	cmp	r3, #144	; 0x90
 8005d48:	d01c      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x128>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	2ba0      	cmp	r3, #160	; 0xa0
 8005d50:	d018      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x128>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2bb0      	cmp	r3, #176	; 0xb0
 8005d58:	d014      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x128>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d60:	d010      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x128>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2bd0      	cmp	r3, #208	; 0xd0
 8005d68:	d00c      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x128>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	2be0      	cmp	r3, #224	; 0xe0
 8005d70:	d008      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x128>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	2bf0      	cmp	r3, #240	; 0xf0
 8005d78:	d004      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x128>
 8005d7a:	f240 315f 	movw	r1, #863	; 0x35f
 8005d7e:	483e      	ldr	r0, [pc, #248]	; (8005e78 <HAL_RCC_ClockConfig+0x21c>)
 8005d80:	f7fd f8dc 	bl	8002f3c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d84:	4b3e      	ldr	r3, [pc, #248]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	493b      	ldr	r1, [pc, #236]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d051      	beq.n	8005e46 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00c      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x168>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d008      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x168>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d004      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x168>
 8005dba:	f240 3166 	movw	r1, #870	; 0x366
 8005dbe:	482e      	ldr	r0, [pc, #184]	; (8005e78 <HAL_RCC_ClockConfig+0x21c>)
 8005dc0:	f7fd f8bc 	bl	8002f3c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d107      	bne.n	8005ddc <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dcc:	4b2c      	ldr	r3, [pc, #176]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d115      	bne.n	8005e04 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0c0      	b.n	8005f5e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d107      	bne.n	8005df4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de4:	4b26      	ldr	r3, [pc, #152]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e0b4      	b.n	8005f5e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df4:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0ac      	b.n	8005f5e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e04:	4b1e      	ldr	r3, [pc, #120]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f023 0203 	bic.w	r2, r3, #3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	491b      	ldr	r1, [pc, #108]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e16:	f7fd fb75 	bl	8003504 <HAL_GetTick>
 8005e1a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1c:	e00a      	b.n	8005e34 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e1e:	f7fd fb71 	bl	8003504 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e094      	b.n	8005f5e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e34:	4b12      	ldr	r3, [pc, #72]	; (8005e80 <HAL_RCC_ClockConfig+0x224>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 020c 	and.w	r2, r3, #12
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d1eb      	bne.n	8005e1e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e46:	4b0d      	ldr	r3, [pc, #52]	; (8005e7c <HAL_RCC_ClockConfig+0x220>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d217      	bcs.n	8005e84 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e54:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <HAL_RCC_ClockConfig+0x220>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f023 0207 	bic.w	r2, r3, #7
 8005e5c:	4907      	ldr	r1, [pc, #28]	; (8005e7c <HAL_RCC_ClockConfig+0x220>)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <HAL_RCC_ClockConfig+0x220>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d008      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e073      	b.n	8005f5e <HAL_RCC_ClockConfig+0x302>
 8005e76:	bf00      	nop
 8005e78:	0800900c 	.word	0x0800900c
 8005e7c:	40022000 	.word	0x40022000
 8005e80:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d025      	beq.n	8005edc <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d018      	beq.n	8005eca <HAL_RCC_ClockConfig+0x26e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea0:	d013      	beq.n	8005eca <HAL_RCC_ClockConfig+0x26e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005eaa:	d00e      	beq.n	8005eca <HAL_RCC_ClockConfig+0x26e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005eb4:	d009      	beq.n	8005eca <HAL_RCC_ClockConfig+0x26e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ebe:	d004      	beq.n	8005eca <HAL_RCC_ClockConfig+0x26e>
 8005ec0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8005ec4:	4828      	ldr	r0, [pc, #160]	; (8005f68 <HAL_RCC_ClockConfig+0x30c>)
 8005ec6:	f7fd f839 	bl	8002f3c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eca:	4b28      	ldr	r3, [pc, #160]	; (8005f6c <HAL_RCC_ClockConfig+0x310>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	4925      	ldr	r1, [pc, #148]	; (8005f6c <HAL_RCC_ClockConfig+0x310>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d026      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d018      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x2c6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef8:	d013      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x2c6>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005f02:	d00e      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x2c6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f0c:	d009      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x2c6>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f16:	d004      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x2c6>
 8005f18:	f240 31ab 	movw	r1, #939	; 0x3ab
 8005f1c:	4812      	ldr	r0, [pc, #72]	; (8005f68 <HAL_RCC_ClockConfig+0x30c>)
 8005f1e:	f7fd f80d 	bl	8002f3c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f22:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <HAL_RCC_ClockConfig+0x310>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	490e      	ldr	r1, [pc, #56]	; (8005f6c <HAL_RCC_ClockConfig+0x310>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f36:	f000 f821 	bl	8005f7c <HAL_RCC_GetSysClockFreq>
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <HAL_RCC_ClockConfig+0x310>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	091b      	lsrs	r3, r3, #4
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	4a0a      	ldr	r2, [pc, #40]	; (8005f70 <HAL_RCC_ClockConfig+0x314>)
 8005f48:	5cd3      	ldrb	r3, [r2, r3]
 8005f4a:	fa21 f303 	lsr.w	r3, r1, r3
 8005f4e:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <HAL_RCC_ClockConfig+0x318>)
 8005f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <HAL_RCC_ClockConfig+0x31c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fd fa92 	bl	8003480 <HAL_InitTick>

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	0800900c 	.word	0x0800900c
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	080091f8 	.word	0x080091f8
 8005f74:	20000000 	.word	0x20000000
 8005f78:	20000004 	.word	0x20000004

08005f7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f7c:	b490      	push	{r4, r7}
 8005f7e:	b08a      	sub	sp, #40	; 0x28
 8005f80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005f82:	4b2a      	ldr	r3, [pc, #168]	; (800602c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f84:	1d3c      	adds	r4, r7, #4
 8005f86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f8c:	4b28      	ldr	r3, [pc, #160]	; (8006030 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	2300      	movs	r3, #0
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005fa6:	4b23      	ldr	r3, [pc, #140]	; (8006034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d002      	beq.n	8005fbc <HAL_RCC_GetSysClockFreq+0x40>
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d003      	beq.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x46>
 8005fba:	e02d      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fbc:	4b1e      	ldr	r3, [pc, #120]	; (8006038 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fbe:	623b      	str	r3, [r7, #32]
      break;
 8005fc0:	e02d      	b.n	800601e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	0c9b      	lsrs	r3, r3, #18
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005fce:	4413      	add	r3, r2
 8005fd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005fd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d013      	beq.n	8006008 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fe0:	4b14      	ldr	r3, [pc, #80]	; (8006034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	0c5b      	lsrs	r3, r3, #17
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005fee:	4413      	add	r3, r2
 8005ff0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005ff4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4a0f      	ldr	r2, [pc, #60]	; (8006038 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ffa:	fb02 f203 	mul.w	r2, r2, r3
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
 8006006:	e004      	b.n	8006012 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	4a0c      	ldr	r2, [pc, #48]	; (800603c <HAL_RCC_GetSysClockFreq+0xc0>)
 800600c:	fb02 f303 	mul.w	r3, r2, r3
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	623b      	str	r3, [r7, #32]
      break;
 8006016:	e002      	b.n	800601e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006018:	4b07      	ldr	r3, [pc, #28]	; (8006038 <HAL_RCC_GetSysClockFreq+0xbc>)
 800601a:	623b      	str	r3, [r7, #32]
      break;
 800601c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800601e:	6a3b      	ldr	r3, [r7, #32]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3728      	adds	r7, #40	; 0x28
 8006024:	46bd      	mov	sp, r7
 8006026:	bc90      	pop	{r4, r7}
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	08009044 	.word	0x08009044
 8006030:	08009054 	.word	0x08009054
 8006034:	40021000 	.word	0x40021000
 8006038:	007a1200 	.word	0x007a1200
 800603c:	003d0900 	.word	0x003d0900

08006040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006044:	4b02      	ldr	r3, [pc, #8]	; (8006050 <HAL_RCC_GetHCLKFreq+0x10>)
 8006046:	681b      	ldr	r3, [r3, #0]
}
 8006048:	4618      	mov	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr
 8006050:	20000000 	.word	0x20000000

08006054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006058:	f7ff fff2 	bl	8006040 <HAL_RCC_GetHCLKFreq>
 800605c:	4601      	mov	r1, r0
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	4a03      	ldr	r2, [pc, #12]	; (8006078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800606a:	5cd3      	ldrb	r3, [r2, r3]
 800606c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006070:	4618      	mov	r0, r3
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40021000 	.word	0x40021000
 8006078:	08009208 	.word	0x08009208

0800607c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006080:	f7ff ffde 	bl	8006040 <HAL_RCC_GetHCLKFreq>
 8006084:	4601      	mov	r1, r0
 8006086:	4b05      	ldr	r3, [pc, #20]	; (800609c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	0adb      	lsrs	r3, r3, #11
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	4a03      	ldr	r2, [pc, #12]	; (80060a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006092:	5cd3      	ldrb	r3, [r2, r3]
 8006094:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006098:	4618      	mov	r0, r3
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40021000 	.word	0x40021000
 80060a0:	08009208 	.word	0x08009208

080060a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060ac:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <RCC_Delay+0x34>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <RCC_Delay+0x38>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	0a5b      	lsrs	r3, r3, #9
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80060c0:	bf00      	nop
  }
  while (Delay --);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1e5a      	subs	r2, r3, #1
 80060c6:	60fa      	str	r2, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1f9      	bne.n	80060c0 <RCC_Delay+0x1c>
}
 80060cc:	bf00      	nop
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	20000000 	.word	0x20000000
 80060dc:	10624dd3 	.word	0x10624dd3

080060e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10f      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	d103      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006114:	216c      	movs	r1, #108	; 0x6c
 8006116:	4873      	ldr	r0, [pc, #460]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8006118:	f7fc ff10 	bl	8002f3c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8095 	beq.w	8006254 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d012      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800613a:	d00d      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006144:	d008      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614e:	d003      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006150:	2172      	movs	r1, #114	; 0x72
 8006152:	4864      	ldr	r0, [pc, #400]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8006154:	f7fc fef2 	bl	8002f3c <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8006158:	2300      	movs	r3, #0
 800615a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800615c:	4b62      	ldr	r3, [pc, #392]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10d      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006168:	4b5f      	ldr	r3, [pc, #380]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	4a5e      	ldr	r2, [pc, #376]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800616e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006172:	61d3      	str	r3, [r2, #28]
 8006174:	4b5c      	ldr	r3, [pc, #368]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617c:	60bb      	str	r3, [r7, #8]
 800617e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006180:	2301      	movs	r3, #1
 8006182:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006184:	4b59      	ldr	r3, [pc, #356]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618c:	2b00      	cmp	r3, #0
 800618e:	d118      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006190:	4b56      	ldr	r3, [pc, #344]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a55      	ldr	r2, [pc, #340]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800619a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800619c:	f7fd f9b2 	bl	8003504 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a2:	e008      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a4:	f7fd f9ae 	bl	8003504 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b64      	cmp	r3, #100	; 0x64
 80061b0:	d901      	bls.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e092      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b6:	4b4d      	ldr	r3, [pc, #308]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f0      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061c2:	4b49      	ldr	r3, [pc, #292]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d02e      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d027      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061e0:	4b41      	ldr	r3, [pc, #260]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061ea:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061f0:	4b3f      	ldr	r3, [pc, #252]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061f6:	4a3c      	ldr	r2, [pc, #240]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d014      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006206:	f7fd f97d 	bl	8003504 <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800620c:	e00a      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620e:	f7fd f979 	bl	8003504 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	f241 3288 	movw	r2, #5000	; 0x1388
 800621c:	4293      	cmp	r3, r2
 800621e:	d901      	bls.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e05b      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006224:	4b30      	ldr	r3, [pc, #192]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0ee      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006230:	4b2d      	ldr	r3, [pc, #180]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	492a      	ldr	r1, [pc, #168]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800623e:	4313      	orrs	r3, r2
 8006240:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d105      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006248:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	4a26      	ldr	r2, [pc, #152]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800624e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006252:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01f      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d012      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006270:	d00d      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627a:	d008      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006284:	d003      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006286:	21b9      	movs	r1, #185	; 0xb9
 8006288:	4816      	ldr	r0, [pc, #88]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800628a:	f7fc fe57 	bl	8002f3c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800628e:	4b16      	ldr	r3, [pc, #88]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	4913      	ldr	r1, [pc, #76]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800629c:	4313      	orrs	r3, r2
 800629e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d016      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062b4:	d008      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d004      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80062be:	f240 1115 	movw	r1, #277	; 0x115
 80062c2:	4808      	ldr	r0, [pc, #32]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80062c4:	f7fc fe3a 	bl	8002f3c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062c8:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	4904      	ldr	r1, [pc, #16]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	08009058 	.word	0x08009058
 80062e8:	40021000 	.word	0x40021000
 80062ec:	40007000 	.word	0x40007000
 80062f0:	42420440 	.word	0x42420440

080062f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e0fd      	b.n	8006502 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a80      	ldr	r2, [pc, #512]	; (800650c <HAL_SPI_Init+0x218>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d009      	beq.n	8006324 <HAL_SPI_Init+0x30>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a7e      	ldr	r2, [pc, #504]	; (8006510 <HAL_SPI_Init+0x21c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_SPI_Init+0x30>
 800631a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800631e:	487d      	ldr	r0, [pc, #500]	; (8006514 <HAL_SPI_Init+0x220>)
 8006320:	f7fc fe0c 	bl	8002f3c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d009      	beq.n	8006340 <HAL_SPI_Init+0x4c>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006334:	d004      	beq.n	8006340 <HAL_SPI_Init+0x4c>
 8006336:	f240 1159 	movw	r1, #345	; 0x159
 800633a:	4876      	ldr	r0, [pc, #472]	; (8006514 <HAL_SPI_Init+0x220>)
 800633c:	f7fc fdfe 	bl	8002f3c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00e      	beq.n	8006366 <HAL_SPI_Init+0x72>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006350:	d009      	beq.n	8006366 <HAL_SPI_Init+0x72>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635a:	d004      	beq.n	8006366 <HAL_SPI_Init+0x72>
 800635c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8006360:	486c      	ldr	r0, [pc, #432]	; (8006514 <HAL_SPI_Init+0x220>)
 8006362:	f7fc fdeb 	bl	8002f3c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636e:	d008      	beq.n	8006382 <HAL_SPI_Init+0x8e>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d004      	beq.n	8006382 <HAL_SPI_Init+0x8e>
 8006378:	f240 115b 	movw	r1, #347	; 0x15b
 800637c:	4865      	ldr	r0, [pc, #404]	; (8006514 <HAL_SPI_Init+0x220>)
 800637e:	f7fc fddd 	bl	8002f3c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800638a:	d00d      	beq.n	80063a8 <HAL_SPI_Init+0xb4>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <HAL_SPI_Init+0xb4>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800639c:	d004      	beq.n	80063a8 <HAL_SPI_Init+0xb4>
 800639e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80063a2:	485c      	ldr	r0, [pc, #368]	; (8006514 <HAL_SPI_Init+0x220>)
 80063a4:	f7fc fdca 	bl	8002f3c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d020      	beq.n	80063f2 <HAL_SPI_Init+0xfe>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d01c      	beq.n	80063f2 <HAL_SPI_Init+0xfe>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d018      	beq.n	80063f2 <HAL_SPI_Init+0xfe>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	2b18      	cmp	r3, #24
 80063c6:	d014      	beq.n	80063f2 <HAL_SPI_Init+0xfe>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d010      	beq.n	80063f2 <HAL_SPI_Init+0xfe>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	2b28      	cmp	r3, #40	; 0x28
 80063d6:	d00c      	beq.n	80063f2 <HAL_SPI_Init+0xfe>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	2b30      	cmp	r3, #48	; 0x30
 80063de:	d008      	beq.n	80063f2 <HAL_SPI_Init+0xfe>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	2b38      	cmp	r3, #56	; 0x38
 80063e6:	d004      	beq.n	80063f2 <HAL_SPI_Init+0xfe>
 80063e8:	f240 115d 	movw	r1, #349	; 0x15d
 80063ec:	4849      	ldr	r0, [pc, #292]	; (8006514 <HAL_SPI_Init+0x220>)
 80063ee:	f7fc fda5 	bl	8002f3c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <HAL_SPI_Init+0x118>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	2b80      	cmp	r3, #128	; 0x80
 8006400:	d004      	beq.n	800640c <HAL_SPI_Init+0x118>
 8006402:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006406:	4843      	ldr	r0, [pc, #268]	; (8006514 <HAL_SPI_Init+0x220>)
 8006408:	f7fc fd98 	bl	8002f3c <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	2b00      	cmp	r3, #0
 8006412:	d004      	beq.n	800641e <HAL_SPI_Init+0x12a>
 8006414:	f240 1161 	movw	r1, #353	; 0x161
 8006418:	483e      	ldr	r0, [pc, #248]	; (8006514 <HAL_SPI_Init+0x220>)
 800641a:	f7fc fd8f 	bl	8002f3c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	d119      	bne.n	800645a <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d008      	beq.n	8006440 <HAL_SPI_Init+0x14c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d004      	beq.n	8006440 <HAL_SPI_Init+0x14c>
 8006436:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800643a:	4836      	ldr	r0, [pc, #216]	; (8006514 <HAL_SPI_Init+0x220>)
 800643c:	f7fc fd7e 	bl	8002f3c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d008      	beq.n	800645a <HAL_SPI_Init+0x166>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d004      	beq.n	800645a <HAL_SPI_Init+0x166>
 8006450:	f240 1165 	movw	r1, #357	; 0x165
 8006454:	482f      	ldr	r0, [pc, #188]	; (8006514 <HAL_SPI_Init+0x220>)
 8006456:	f7fc fd71 	bl	8002f3c <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7fc fda3 	bl	8002fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2202      	movs	r2, #2
 800647e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006490:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	ea42 0103 	orr.w	r1, r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	0c1a      	lsrs	r2, r3, #16
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f002 0204 	and.w	r2, r2, #4
 80064e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	40013000 	.word	0x40013000
 8006510:	40003800 	.word	0x40003800
 8006514:	080090a8 	.word	0x080090a8

08006518 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	4613      	mov	r3, r2
 8006526:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d009      	beq.n	8006548 <HAL_SPI_Transmit+0x30>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800653c:	d004      	beq.n	8006548 <HAL_SPI_Transmit+0x30>
 800653e:	f240 310a 	movw	r1, #778	; 0x30a
 8006542:	4896      	ldr	r0, [pc, #600]	; (800679c <HAL_SPI_Transmit+0x284>)
 8006544:	f7fc fcfa 	bl	8002f3c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_SPI_Transmit+0x3e>
 8006552:	2302      	movs	r3, #2
 8006554:	e11e      	b.n	8006794 <HAL_SPI_Transmit+0x27c>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800655e:	f7fc ffd1 	bl	8003504 <HAL_GetTick>
 8006562:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b01      	cmp	r3, #1
 8006572:	d002      	beq.n	800657a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006574:	2302      	movs	r3, #2
 8006576:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006578:	e103      	b.n	8006782 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_SPI_Transmit+0x6e>
 8006580:	88fb      	ldrh	r3, [r7, #6]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d102      	bne.n	800658c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	77fb      	strb	r3, [r7, #31]
    goto error;
 800658a:	e0fa      	b.n	8006782 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2203      	movs	r2, #3
 8006590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	88fa      	ldrh	r2, [r7, #6]
 80065a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	88fa      	ldrh	r2, [r7, #6]
 80065aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d2:	d107      	bne.n	80065e4 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d007      	beq.n	8006602 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660a:	d14b      	bne.n	80066a4 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <HAL_SPI_Transmit+0x102>
 8006614:	8afb      	ldrh	r3, [r7, #22]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d13e      	bne.n	8006698 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661e:	881a      	ldrh	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	1c9a      	adds	r2, r3, #2
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800663e:	e02b      	b.n	8006698 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b02      	cmp	r3, #2
 800664c:	d112      	bne.n	8006674 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	881a      	ldrh	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	1c9a      	adds	r2, r3, #2
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	86da      	strh	r2, [r3, #54]	; 0x36
 8006672:	e011      	b.n	8006698 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006674:	f7fc ff46 	bl	8003504 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d803      	bhi.n	800668c <HAL_SPI_Transmit+0x174>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d102      	bne.n	8006692 <HAL_SPI_Transmit+0x17a>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d102      	bne.n	8006698 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006696:	e074      	b.n	8006782 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1ce      	bne.n	8006640 <HAL_SPI_Transmit+0x128>
 80066a2:	e04c      	b.n	800673e <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <HAL_SPI_Transmit+0x19a>
 80066ac:	8afb      	ldrh	r3, [r7, #22]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d140      	bne.n	8006734 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	7812      	ldrb	r2, [r2, #0]
 80066be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066d8:	e02c      	b.n	8006734 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d113      	bne.n	8006710 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	86da      	strh	r2, [r3, #54]	; 0x36
 800670e:	e011      	b.n	8006734 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006710:	f7fc fef8 	bl	8003504 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d803      	bhi.n	8006728 <HAL_SPI_Transmit+0x210>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006726:	d102      	bne.n	800672e <HAL_SPI_Transmit+0x216>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d102      	bne.n	8006734 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006732:	e026      	b.n	8006782 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1cd      	bne.n	80066da <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f896 	bl	8006874 <SPI_EndRxTxTransaction>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2220      	movs	r2, #32
 8006752:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800675c:	2300      	movs	r3, #0
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e000      	b.n	8006782 <HAL_SPI_Transmit+0x26a>
  }

error:
 8006780:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006792:	7ffb      	ldrb	r3, [r7, #31]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	080090a8 	.word	0x080090a8

080067a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	4613      	mov	r3, r2
 80067ae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067b0:	e04c      	b.n	800684c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b8:	d048      	beq.n	800684c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80067ba:	f7fc fea3 	bl	8003504 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d902      	bls.n	80067d0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d13d      	bne.n	800684c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067e8:	d111      	bne.n	800680e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f2:	d004      	beq.n	80067fe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fc:	d107      	bne.n	800680e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006816:	d10f      	bne.n	8006838 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006836:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e00f      	b.n	800686c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4013      	ands	r3, r2
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	429a      	cmp	r2, r3
 800685a:	bf0c      	ite	eq
 800685c:	2301      	moveq	r3, #1
 800685e:	2300      	movne	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	429a      	cmp	r2, r3
 8006868:	d1a3      	bne.n	80067b2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af02      	add	r7, sp, #8
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	2180      	movs	r1, #128	; 0x80
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7ff ff88 	bl	80067a0 <SPI_WaitFlagStateUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	f043 0220 	orr.w	r2, r3, #32
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e000      	b.n	80068a8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e06f      	b.n	80069a2 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a39      	ldr	r2, [pc, #228]	; (80069ac <HAL_TIM_Base_Init+0xfc>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d013      	beq.n	80068f4 <HAL_TIM_Base_Init+0x44>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d4:	d00e      	beq.n	80068f4 <HAL_TIM_Base_Init+0x44>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a35      	ldr	r2, [pc, #212]	; (80069b0 <HAL_TIM_Base_Init+0x100>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d009      	beq.n	80068f4 <HAL_TIM_Base_Init+0x44>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a33      	ldr	r2, [pc, #204]	; (80069b4 <HAL_TIM_Base_Init+0x104>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d004      	beq.n	80068f4 <HAL_TIM_Base_Init+0x44>
 80068ea:	f44f 7189 	mov.w	r1, #274	; 0x112
 80068ee:	4832      	ldr	r0, [pc, #200]	; (80069b8 <HAL_TIM_Base_Init+0x108>)
 80068f0:	f7fc fb24 	bl	8002f3c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d014      	beq.n	8006926 <HAL_TIM_Base_Init+0x76>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b10      	cmp	r3, #16
 8006902:	d010      	beq.n	8006926 <HAL_TIM_Base_Init+0x76>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b20      	cmp	r3, #32
 800690a:	d00c      	beq.n	8006926 <HAL_TIM_Base_Init+0x76>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d008      	beq.n	8006926 <HAL_TIM_Base_Init+0x76>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	2b60      	cmp	r3, #96	; 0x60
 800691a:	d004      	beq.n	8006926 <HAL_TIM_Base_Init+0x76>
 800691c:	f240 1113 	movw	r1, #275	; 0x113
 8006920:	4825      	ldr	r0, [pc, #148]	; (80069b8 <HAL_TIM_Base_Init+0x108>)
 8006922:	f7fc fb0b 	bl	8002f3c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00e      	beq.n	800694c <HAL_TIM_Base_Init+0x9c>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006936:	d009      	beq.n	800694c <HAL_TIM_Base_Init+0x9c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006940:	d004      	beq.n	800694c <HAL_TIM_Base_Init+0x9c>
 8006942:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006946:	481c      	ldr	r0, [pc, #112]	; (80069b8 <HAL_TIM_Base_Init+0x108>)
 8006948:	f7fc faf8 	bl	8002f3c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <HAL_TIM_Base_Init+0xb6>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	2b80      	cmp	r3, #128	; 0x80
 800695a:	d004      	beq.n	8006966 <HAL_TIM_Base_Init+0xb6>
 800695c:	f240 1115 	movw	r1, #277	; 0x115
 8006960:	4815      	ldr	r0, [pc, #84]	; (80069b8 <HAL_TIM_Base_Init+0x108>)
 8006962:	f7fc faeb 	bl	8002f3c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fc fc9c 	bl	80032b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f000 fae8 	bl	8006f68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	080090e0 	.word	0x080090e0

080069bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <HAL_TIM_Base_Start+0x78>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <HAL_TIM_Base_Start+0x3a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d6:	d00e      	beq.n	80069f6 <HAL_TIM_Base_Start+0x3a>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a16      	ldr	r2, [pc, #88]	; (8006a38 <HAL_TIM_Base_Start+0x7c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d009      	beq.n	80069f6 <HAL_TIM_Base_Start+0x3a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a15      	ldr	r2, [pc, #84]	; (8006a3c <HAL_TIM_Base_Start+0x80>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d004      	beq.n	80069f6 <HAL_TIM_Base_Start+0x3a>
 80069ec:	f240 1185 	movw	r1, #389	; 0x185
 80069f0:	4813      	ldr	r0, [pc, #76]	; (8006a40 <HAL_TIM_Base_Start+0x84>)
 80069f2:	f7fc faa3 	bl	8002f3c <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2202      	movs	r2, #2
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b06      	cmp	r3, #6
 8006a0e:	d007      	beq.n	8006a20 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	40012c00 	.word	0x40012c00
 8006a38:	40000400 	.word	0x40000400
 8006a3c:	40000800 	.word	0x40000800
 8006a40:	080090e0 	.word	0x080090e0

08006a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_TIM_ConfigClockSource+0x18>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e279      	b.n	8006f50 <HAL_TIM_ConfigClockSource+0x50c>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a74:	d029      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x86>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7e:	d024      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x86>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d020      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x86>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d01c      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x86>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d018      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x86>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b30      	cmp	r3, #48	; 0x30
 8006a9e:	d014      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x86>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b40      	cmp	r3, #64	; 0x40
 8006aa6:	d010      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x86>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b50      	cmp	r3, #80	; 0x50
 8006aae:	d00c      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x86>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b60      	cmp	r3, #96	; 0x60
 8006ab6:	d008      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x86>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b70      	cmp	r3, #112	; 0x70
 8006abe:	d004      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x86>
 8006ac0:	f241 118a 	movw	r1, #4490	; 0x118a
 8006ac4:	4896      	ldr	r0, [pc, #600]	; (8006d20 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006ac6:	f7fc fa39 	bl	8002f3c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ad8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ae0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	f000 81b6 	beq.w	8006e60 <HAL_TIM_ConfigClockSource+0x41c>
 8006af4:	2b40      	cmp	r3, #64	; 0x40
 8006af6:	d80f      	bhi.n	8006b18 <HAL_TIM_ConfigClockSource+0xd4>
 8006af8:	2b10      	cmp	r3, #16
 8006afa:	f000 81fd 	beq.w	8006ef8 <HAL_TIM_ConfigClockSource+0x4b4>
 8006afe:	2b10      	cmp	r3, #16
 8006b00:	d803      	bhi.n	8006b0a <HAL_TIM_ConfigClockSource+0xc6>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 81f8 	beq.w	8006ef8 <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006b08:	e219      	b.n	8006f3e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	f000 81f4 	beq.w	8006ef8 <HAL_TIM_ConfigClockSource+0x4b4>
 8006b10:	2b30      	cmp	r3, #48	; 0x30
 8006b12:	f000 81f1 	beq.w	8006ef8 <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 8006b16:	e212      	b.n	8006f3e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 8006b18:	2b70      	cmp	r3, #112	; 0x70
 8006b1a:	d02e      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x136>
 8006b1c:	2b70      	cmp	r3, #112	; 0x70
 8006b1e:	d806      	bhi.n	8006b2e <HAL_TIM_ConfigClockSource+0xea>
 8006b20:	2b50      	cmp	r3, #80	; 0x50
 8006b22:	f000 8105 	beq.w	8006d30 <HAL_TIM_ConfigClockSource+0x2ec>
 8006b26:	2b60      	cmp	r3, #96	; 0x60
 8006b28:	f000 814e 	beq.w	8006dc8 <HAL_TIM_ConfigClockSource+0x384>
      break;
 8006b2c:	e207      	b.n	8006f3e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 8006b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b32:	d004      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0xfa>
 8006b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b38:	f000 808a 	beq.w	8006c50 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 8006b3c:	e1ff      	b.n	8006f3e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a78      	ldr	r2, [pc, #480]	; (8006d24 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	f000 81f9 	beq.w	8006f3c <HAL_TIM_ConfigClockSource+0x4f8>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b52:	f000 81f3 	beq.w	8006f3c <HAL_TIM_ConfigClockSource+0x4f8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a73      	ldr	r2, [pc, #460]	; (8006d28 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	f000 81ed 	beq.w	8006f3c <HAL_TIM_ConfigClockSource+0x4f8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a71      	ldr	r2, [pc, #452]	; (8006d2c <HAL_TIM_ConfigClockSource+0x2e8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	f000 81e7 	beq.w	8006f3c <HAL_TIM_ConfigClockSource+0x4f8>
 8006b6e:	f241 1196 	movw	r1, #4502	; 0x1196
 8006b72:	486b      	ldr	r0, [pc, #428]	; (8006d20 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006b74:	f7fc f9e2 	bl	8002f3c <assert_failed>
      break;
 8006b78:	e1e0      	b.n	8006f3c <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a69      	ldr	r2, [pc, #420]	; (8006d24 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_TIM_ConfigClockSource+0x168>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8c:	d00e      	beq.n	8006bac <HAL_TIM_ConfigClockSource+0x168>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a65      	ldr	r2, [pc, #404]	; (8006d28 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_TIM_ConfigClockSource+0x168>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a63      	ldr	r2, [pc, #396]	; (8006d2c <HAL_TIM_ConfigClockSource+0x2e8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_TIM_ConfigClockSource+0x168>
 8006ba2:	f241 119d 	movw	r1, #4509	; 0x119d
 8006ba6:	485e      	ldr	r0, [pc, #376]	; (8006d20 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006ba8:	f7fc f9c8 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d013      	beq.n	8006bdc <HAL_TIM_ConfigClockSource+0x198>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bbc:	d00e      	beq.n	8006bdc <HAL_TIM_ConfigClockSource+0x198>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc6:	d009      	beq.n	8006bdc <HAL_TIM_ConfigClockSource+0x198>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bd0:	d004      	beq.n	8006bdc <HAL_TIM_ConfigClockSource+0x198>
 8006bd2:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 8006bd6:	4852      	ldr	r0, [pc, #328]	; (8006d20 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006bd8:	f7fc f9b0 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be4:	d014      	beq.n	8006c10 <HAL_TIM_ConfigClockSource+0x1cc>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d010      	beq.n	8006c10 <HAL_TIM_ConfigClockSource+0x1cc>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00c      	beq.n	8006c10 <HAL_TIM_ConfigClockSource+0x1cc>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d008      	beq.n	8006c10 <HAL_TIM_ConfigClockSource+0x1cc>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b0a      	cmp	r3, #10
 8006c04:	d004      	beq.n	8006c10 <HAL_TIM_ConfigClockSource+0x1cc>
 8006c06:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8006c0a:	4845      	ldr	r0, [pc, #276]	; (8006d20 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006c0c:	f7fc f996 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b0f      	cmp	r3, #15
 8006c16:	d904      	bls.n	8006c22 <HAL_TIM_ConfigClockSource+0x1de>
 8006c18:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8006c1c:	4840      	ldr	r0, [pc, #256]	; (8006d20 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006c1e:	f7fc f98d 	bl	8002f3c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	6899      	ldr	r1, [r3, #8]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f000 fa72 	bl	800711a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	609a      	str	r2, [r3, #8]
      break;
 8006c4e:	e176      	b.n	8006f3e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a33      	ldr	r2, [pc, #204]	; (8006d24 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d013      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x23e>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c62:	d00e      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x23e>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a2f      	ldr	r2, [pc, #188]	; (8006d28 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d009      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x23e>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a2e      	ldr	r2, [pc, #184]	; (8006d2c <HAL_TIM_ConfigClockSource+0x2e8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d004      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x23e>
 8006c78:	f241 11b5 	movw	r1, #4533	; 0x11b5
 8006c7c:	4828      	ldr	r0, [pc, #160]	; (8006d20 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006c7e:	f7fc f95d 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d013      	beq.n	8006cb2 <HAL_TIM_ConfigClockSource+0x26e>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c92:	d00e      	beq.n	8006cb2 <HAL_TIM_ConfigClockSource+0x26e>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c9c:	d009      	beq.n	8006cb2 <HAL_TIM_ConfigClockSource+0x26e>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ca6:	d004      	beq.n	8006cb2 <HAL_TIM_ConfigClockSource+0x26e>
 8006ca8:	f241 11b8 	movw	r1, #4536	; 0x11b8
 8006cac:	481c      	ldr	r0, [pc, #112]	; (8006d20 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006cae:	f7fc f945 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cba:	d014      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x2a2>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d010      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x2a2>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00c      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x2a2>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d008      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x2a2>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2b0a      	cmp	r3, #10
 8006cda:	d004      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x2a2>
 8006cdc:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8006ce0:	480f      	ldr	r0, [pc, #60]	; (8006d20 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006ce2:	f7fc f92b 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	2b0f      	cmp	r3, #15
 8006cec:	d904      	bls.n	8006cf8 <HAL_TIM_ConfigClockSource+0x2b4>
 8006cee:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8006cf2:	480b      	ldr	r0, [pc, #44]	; (8006d20 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006cf4:	f7fc f922 	bl	8002f3c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	6899      	ldr	r1, [r3, #8]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f000 fa07 	bl	800711a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d1a:	609a      	str	r2, [r3, #8]
      break;
 8006d1c:	e10f      	b.n	8006f3e <HAL_TIM_ConfigClockSource+0x4fa>
 8006d1e:	bf00      	nop
 8006d20:	080090e0 	.word	0x080090e0
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40000400 	.word	0x40000400
 8006d2c:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a88      	ldr	r2, [pc, #544]	; (8006f58 <HAL_TIM_ConfigClockSource+0x514>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d013      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x31e>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d42:	d00e      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x31e>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a84      	ldr	r2, [pc, #528]	; (8006f5c <HAL_TIM_ConfigClockSource+0x518>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d009      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x31e>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a83      	ldr	r2, [pc, #524]	; (8006f60 <HAL_TIM_ConfigClockSource+0x51c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d004      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x31e>
 8006d58:	f241 11c9 	movw	r1, #4553	; 0x11c9
 8006d5c:	4881      	ldr	r0, [pc, #516]	; (8006f64 <HAL_TIM_ConfigClockSource+0x520>)
 8006d5e:	f7fc f8ed 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6a:	d014      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0x352>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d010      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0x352>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00c      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0x352>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d008      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0x352>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2b0a      	cmp	r3, #10
 8006d8a:	d004      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0x352>
 8006d8c:	f241 11cc 	movw	r1, #4556	; 0x11cc
 8006d90:	4874      	ldr	r0, [pc, #464]	; (8006f64 <HAL_TIM_ConfigClockSource+0x520>)
 8006d92:	f7fc f8d3 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	2b0f      	cmp	r3, #15
 8006d9c:	d904      	bls.n	8006da8 <HAL_TIM_ConfigClockSource+0x364>
 8006d9e:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8006da2:	4870      	ldr	r0, [pc, #448]	; (8006f64 <HAL_TIM_ConfigClockSource+0x520>)
 8006da4:	f7fc f8ca 	bl	8002f3c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6859      	ldr	r1, [r3, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	461a      	mov	r2, r3
 8006db6:	f000 f939 	bl	800702c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2150      	movs	r1, #80	; 0x50
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 f990 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 8006dc6:	e0ba      	b.n	8006f3e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a62      	ldr	r2, [pc, #392]	; (8006f58 <HAL_TIM_ConfigClockSource+0x514>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d013      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x3b6>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dda:	d00e      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x3b6>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a5e      	ldr	r2, [pc, #376]	; (8006f5c <HAL_TIM_ConfigClockSource+0x518>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d009      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x3b6>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a5d      	ldr	r2, [pc, #372]	; (8006f60 <HAL_TIM_ConfigClockSource+0x51c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d004      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x3b6>
 8006df0:	f241 11d9 	movw	r1, #4569	; 0x11d9
 8006df4:	485b      	ldr	r0, [pc, #364]	; (8006f64 <HAL_TIM_ConfigClockSource+0x520>)
 8006df6:	f7fc f8a1 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e02:	d014      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x3ea>
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d010      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x3ea>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00c      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x3ea>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d008      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x3ea>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b0a      	cmp	r3, #10
 8006e22:	d004      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x3ea>
 8006e24:	f241 11dc 	movw	r1, #4572	; 0x11dc
 8006e28:	484e      	ldr	r0, [pc, #312]	; (8006f64 <HAL_TIM_ConfigClockSource+0x520>)
 8006e2a:	f7fc f887 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	2b0f      	cmp	r3, #15
 8006e34:	d904      	bls.n	8006e40 <HAL_TIM_ConfigClockSource+0x3fc>
 8006e36:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8006e3a:	484a      	ldr	r0, [pc, #296]	; (8006f64 <HAL_TIM_ConfigClockSource+0x520>)
 8006e3c:	f7fc f87e 	bl	8002f3c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	6859      	ldr	r1, [r3, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f000 f91b 	bl	8007088 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2160      	movs	r1, #96	; 0x60
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 f944 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 8006e5e:	e06e      	b.n	8006f3e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a3c      	ldr	r2, [pc, #240]	; (8006f58 <HAL_TIM_ConfigClockSource+0x514>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x44e>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e72:	d00e      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x44e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a38      	ldr	r2, [pc, #224]	; (8006f5c <HAL_TIM_ConfigClockSource+0x518>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x44e>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a37      	ldr	r2, [pc, #220]	; (8006f60 <HAL_TIM_ConfigClockSource+0x51c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d004      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x44e>
 8006e88:	f241 11e9 	movw	r1, #4585	; 0x11e9
 8006e8c:	4835      	ldr	r0, [pc, #212]	; (8006f64 <HAL_TIM_ConfigClockSource+0x520>)
 8006e8e:	f7fc f855 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e9a:	d014      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x482>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d010      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x482>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00c      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x482>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d008      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x482>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b0a      	cmp	r3, #10
 8006eba:	d004      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x482>
 8006ebc:	f241 11ec 	movw	r1, #4588	; 0x11ec
 8006ec0:	4828      	ldr	r0, [pc, #160]	; (8006f64 <HAL_TIM_ConfigClockSource+0x520>)
 8006ec2:	f7fc f83b 	bl	8002f3c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	2b0f      	cmp	r3, #15
 8006ecc:	d904      	bls.n	8006ed8 <HAL_TIM_ConfigClockSource+0x494>
 8006ece:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8006ed2:	4824      	ldr	r0, [pc, #144]	; (8006f64 <HAL_TIM_ConfigClockSource+0x520>)
 8006ed4:	f7fc f832 	bl	8002f3c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	6859      	ldr	r1, [r3, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f000 f8a1 	bl	800702c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2140      	movs	r1, #64	; 0x40
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 f8f8 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 8006ef6:	e022      	b.n	8006f3e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a16      	ldr	r2, [pc, #88]	; (8006f58 <HAL_TIM_ConfigClockSource+0x514>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d013      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0x4e6>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0a:	d00e      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0x4e6>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a12      	ldr	r2, [pc, #72]	; (8006f5c <HAL_TIM_ConfigClockSource+0x518>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d009      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0x4e6>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a11      	ldr	r2, [pc, #68]	; (8006f60 <HAL_TIM_ConfigClockSource+0x51c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d004      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0x4e6>
 8006f20:	f241 11fc 	movw	r1, #4604	; 0x11fc
 8006f24:	480f      	ldr	r0, [pc, #60]	; (8006f64 <HAL_TIM_ConfigClockSource+0x520>)
 8006f26:	f7fc f809 	bl	8002f3c <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4619      	mov	r1, r3
 8006f34:	4610      	mov	r0, r2
 8006f36:	f000 f8d6 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 8006f3a:	e000      	b.n	8006f3e <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 8006f3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	40012c00 	.word	0x40012c00
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	080090e0 	.word	0x080090e0

08006f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a29      	ldr	r2, [pc, #164]	; (8007020 <TIM_Base_SetConfig+0xb8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00b      	beq.n	8006f98 <TIM_Base_SetConfig+0x30>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f86:	d007      	beq.n	8006f98 <TIM_Base_SetConfig+0x30>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a26      	ldr	r2, [pc, #152]	; (8007024 <TIM_Base_SetConfig+0xbc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <TIM_Base_SetConfig+0x30>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a25      	ldr	r2, [pc, #148]	; (8007028 <TIM_Base_SetConfig+0xc0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d108      	bne.n	8006faa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a1c      	ldr	r2, [pc, #112]	; (8007020 <TIM_Base_SetConfig+0xb8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00b      	beq.n	8006fca <TIM_Base_SetConfig+0x62>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb8:	d007      	beq.n	8006fca <TIM_Base_SetConfig+0x62>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a19      	ldr	r2, [pc, #100]	; (8007024 <TIM_Base_SetConfig+0xbc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d003      	beq.n	8006fca <TIM_Base_SetConfig+0x62>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a18      	ldr	r2, [pc, #96]	; (8007028 <TIM_Base_SetConfig+0xc0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d108      	bne.n	8006fdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a07      	ldr	r2, [pc, #28]	; (8007020 <TIM_Base_SetConfig+0xb8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d103      	bne.n	8007010 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	615a      	str	r2, [r3, #20]
}
 8007016:	bf00      	nop
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	bc80      	pop	{r7}
 800701e:	4770      	bx	lr
 8007020:	40012c00 	.word	0x40012c00
 8007024:	40000400 	.word	0x40000400
 8007028:	40000800 	.word	0x40000800

0800702c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	f023 0201 	bic.w	r2, r3, #1
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f023 030a 	bic.w	r3, r3, #10
 8007068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	4313      	orrs	r3, r2
 8007070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	621a      	str	r2, [r3, #32]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	f023 0210 	bic.w	r2, r3, #16
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	031b      	lsls	r3, r3, #12
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	621a      	str	r2, [r3, #32]
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr

080070e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	f043 0307 	orr.w	r3, r3, #7
 8007108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	609a      	str	r2, [r3, #8]
}
 8007110:	bf00      	nop
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr

0800711a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800711a:	b480      	push	{r7}
 800711c:	b087      	sub	sp, #28
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
 8007126:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007134:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	021a      	lsls	r2, r3, #8
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	431a      	orrs	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4313      	orrs	r3, r2
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	4313      	orrs	r3, r2
 8007146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	609a      	str	r2, [r3, #8]
}
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	bc80      	pop	{r7}
 8007156:	4770      	bx	lr

08007158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a43      	ldr	r2, [pc, #268]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d013      	beq.n	8007194 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007174:	d00e      	beq.n	8007194 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a3f      	ldr	r2, [pc, #252]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d009      	beq.n	8007194 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a3d      	ldr	r2, [pc, #244]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800718a:	f240 6164 	movw	r1, #1636	; 0x664
 800718e:	483c      	ldr	r0, [pc, #240]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007190:	f7fb fed4 	bl	8002f3c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d020      	beq.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b10      	cmp	r3, #16
 80071a2:	d01c      	beq.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	d018      	beq.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b30      	cmp	r3, #48	; 0x30
 80071b2:	d014      	beq.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b40      	cmp	r3, #64	; 0x40
 80071ba:	d010      	beq.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b50      	cmp	r3, #80	; 0x50
 80071c2:	d00c      	beq.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b60      	cmp	r3, #96	; 0x60
 80071ca:	d008      	beq.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b70      	cmp	r3, #112	; 0x70
 80071d2:	d004      	beq.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80071d4:	f240 6165 	movw	r1, #1637	; 0x665
 80071d8:	4829      	ldr	r0, [pc, #164]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80071da:	f7fb feaf 	bl	8002f3c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	2b80      	cmp	r3, #128	; 0x80
 80071e4:	d008      	beq.n	80071f8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80071ee:	f240 6166 	movw	r1, #1638	; 0x666
 80071f2:	4823      	ldr	r0, [pc, #140]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80071f4:	f7fb fea2 	bl	8002f3c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d101      	bne.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007202:	2302      	movs	r3, #2
 8007204:	e032      	b.n	800726c <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2202      	movs	r2, #2
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4313      	orrs	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800723e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	4313      	orrs	r3, r2
 8007248:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40012c00 	.word	0x40012c00
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	08009118 	.word	0x08009118

08007284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e092      	b.n	80073bc <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d02c      	beq.n	80072f8 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a48      	ldr	r2, [pc, #288]	; (80073c4 <HAL_UART_Init+0x140>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00e      	beq.n	80072c6 <HAL_UART_Init+0x42>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a46      	ldr	r2, [pc, #280]	; (80073c8 <HAL_UART_Init+0x144>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d009      	beq.n	80072c6 <HAL_UART_Init+0x42>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a45      	ldr	r2, [pc, #276]	; (80073cc <HAL_UART_Init+0x148>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d004      	beq.n	80072c6 <HAL_UART_Init+0x42>
 80072bc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80072c0:	4843      	ldr	r0, [pc, #268]	; (80073d0 <HAL_UART_Init+0x14c>)
 80072c2:	f7fb fe3b 	bl	8002f3c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d028      	beq.n	8007320 <HAL_UART_Init+0x9c>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d6:	d023      	beq.n	8007320 <HAL_UART_Init+0x9c>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072e0:	d01e      	beq.n	8007320 <HAL_UART_Init+0x9c>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ea:	d019      	beq.n	8007320 <HAL_UART_Init+0x9c>
 80072ec:	f240 1147 	movw	r1, #327	; 0x147
 80072f0:	4837      	ldr	r0, [pc, #220]	; (80073d0 <HAL_UART_Init+0x14c>)
 80072f2:	f7fb fe23 	bl	8002f3c <assert_failed>
 80072f6:	e013      	b.n	8007320 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a31      	ldr	r2, [pc, #196]	; (80073c4 <HAL_UART_Init+0x140>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00e      	beq.n	8007320 <HAL_UART_Init+0x9c>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a30      	ldr	r2, [pc, #192]	; (80073c8 <HAL_UART_Init+0x144>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d009      	beq.n	8007320 <HAL_UART_Init+0x9c>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a2e      	ldr	r2, [pc, #184]	; (80073cc <HAL_UART_Init+0x148>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d004      	beq.n	8007320 <HAL_UART_Init+0x9c>
 8007316:	f240 114b 	movw	r1, #331	; 0x14b
 800731a:	482d      	ldr	r0, [pc, #180]	; (80073d0 <HAL_UART_Init+0x14c>)
 800731c:	f7fb fe0e 	bl	8002f3c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d009      	beq.n	800733c <HAL_UART_Init+0xb8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007330:	d004      	beq.n	800733c <HAL_UART_Init+0xb8>
 8007332:	f240 114d 	movw	r1, #333	; 0x14d
 8007336:	4826      	ldr	r0, [pc, #152]	; (80073d0 <HAL_UART_Init+0x14c>)
 8007338:	f7fb fe00 	bl	8002f3c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d106      	bne.n	8007356 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7fb fff7 	bl	8003344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2224      	movs	r2, #36	; 0x24
 800735a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800736c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fbf0 	bl	8007b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007382:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695a      	ldr	r2, [r3, #20]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007392:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40013800 	.word	0x40013800
 80073c8:	40004400 	.word	0x40004400
 80073cc:	40004800 	.word	0x40004800
 80073d0:	08009154 	.word	0x08009154

080073d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af02      	add	r7, sp, #8
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	603b      	str	r3, [r7, #0]
 80073e0:	4613      	mov	r3, r2
 80073e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	f040 8083 	bne.w	80074fc <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <HAL_UART_Transmit+0x2e>
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e07b      	b.n	80074fe <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800740c:	2b01      	cmp	r3, #1
 800740e:	d101      	bne.n	8007414 <HAL_UART_Transmit+0x40>
 8007410:	2302      	movs	r3, #2
 8007412:	e074      	b.n	80074fe <HAL_UART_Transmit+0x12a>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2221      	movs	r2, #33	; 0x21
 8007426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800742a:	f7fc f86b 	bl	8003504 <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	88fa      	ldrh	r2, [r7, #6]
 800743a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800743c:	e042      	b.n	80074c4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007454:	d122      	bne.n	800749c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2200      	movs	r2, #0
 800745e:	2180      	movs	r1, #128	; 0x80
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 fa0e 	bl	8007882 <UART_WaitOnFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e046      	b.n	80074fe <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	461a      	mov	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007482:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	3302      	adds	r3, #2
 8007490:	60bb      	str	r3, [r7, #8]
 8007492:	e017      	b.n	80074c4 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	3301      	adds	r3, #1
 8007498:	60bb      	str	r3, [r7, #8]
 800749a:	e013      	b.n	80074c4 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2200      	movs	r2, #0
 80074a4:	2180      	movs	r1, #128	; 0x80
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 f9eb 	bl	8007882 <UART_WaitOnFlagUntilTimeout>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e023      	b.n	80074fe <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	60ba      	str	r2, [r7, #8]
 80074bc:	781a      	ldrb	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1b7      	bne.n	800743e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2200      	movs	r2, #0
 80074d6:	2140      	movs	r1, #64	; 0x40
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f9d2 	bl	8007882 <UART_WaitOnFlagUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e00a      	b.n	80074fe <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	e000      	b.n	80074fe <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80074fc:	2302      	movs	r3, #2
  }
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b088      	sub	sp, #32
 800750a:	af02      	add	r7, sp, #8
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	603b      	str	r3, [r7, #0]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b20      	cmp	r3, #32
 8007524:	f040 8090 	bne.w	8007648 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <HAL_UART_Receive+0x2e>
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e088      	b.n	800764a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_UART_Receive+0x40>
 8007542:	2302      	movs	r3, #2
 8007544:	e081      	b.n	800764a <HAL_UART_Receive+0x144>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2222      	movs	r2, #34	; 0x22
 8007558:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800755c:	f7fb ffd2 	bl	8003504 <HAL_GetTick>
 8007560:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	88fa      	ldrh	r2, [r7, #6]
 8007566:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	88fa      	ldrh	r2, [r7, #6]
 800756c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800756e:	e05c      	b.n	800762a <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007574:	b29b      	uxth	r3, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	b29a      	uxth	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007586:	d12b      	bne.n	80075e0 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2200      	movs	r2, #0
 8007590:	2120      	movs	r1, #32
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f975 	bl	8007882 <UART_WaitOnFlagUntilTimeout>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e053      	b.n	800764a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10c      	bne.n	80075c8 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3302      	adds	r3, #2
 80075c4:	60bb      	str	r3, [r7, #8]
 80075c6:	e030      	b.n	800762a <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	3301      	adds	r3, #1
 80075dc:	60bb      	str	r3, [r7, #8]
 80075de:	e024      	b.n	800762a <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2200      	movs	r2, #0
 80075e8:	2120      	movs	r1, #32
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 f949 	bl	8007882 <UART_WaitOnFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e027      	b.n	800764a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d108      	bne.n	8007614 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6859      	ldr	r1, [r3, #4]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	60ba      	str	r2, [r7, #8]
 800760e:	b2ca      	uxtb	r2, r1
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	e00a      	b.n	800762a <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	b2da      	uxtb	r2, r3
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	1c59      	adds	r1, r3, #1
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007626:	b2d2      	uxtb	r2, r2
 8007628:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800762e:	b29b      	uxth	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d19d      	bne.n	8007570 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2220      	movs	r2, #32
 8007638:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	e000      	b.n	800764a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007648:	2302      	movs	r3, #2
  }
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007674:	2300      	movs	r3, #0
 8007676:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10d      	bne.n	80076a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f003 0320 	and.w	r3, r3, #32
 8007690:	2b00      	cmp	r3, #0
 8007692:	d008      	beq.n	80076a6 <HAL_UART_IRQHandler+0x52>
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f9d7 	bl	8007a52 <UART_Receive_IT>
      return;
 80076a4:	e0cc      	b.n	8007840 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 80ab 	beq.w	8007804 <HAL_UART_IRQHandler+0x1b0>
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d105      	bne.n	80076c4 <HAL_UART_IRQHandler+0x70>
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 80a0 	beq.w	8007804 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <HAL_UART_IRQHandler+0x90>
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076dc:	f043 0201 	orr.w	r2, r3, #1
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f003 0304 	and.w	r3, r3, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <HAL_UART_IRQHandler+0xb0>
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	f043 0202 	orr.w	r2, r3, #2
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <HAL_UART_IRQHandler+0xd0>
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	f043 0204 	orr.w	r2, r3, #4
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	f003 0308 	and.w	r3, r3, #8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <HAL_UART_IRQHandler+0xf0>
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773c:	f043 0208 	orr.w	r2, r3, #8
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d078      	beq.n	800783e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f003 0320 	and.w	r3, r3, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	d007      	beq.n	8007766 <HAL_UART_IRQHandler+0x112>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f976 	bl	8007a52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	bf14      	ite	ne
 8007774:	2301      	movne	r3, #1
 8007776:	2300      	moveq	r3, #0
 8007778:	b2db      	uxtb	r3, r3
 800777a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007780:	f003 0308 	and.w	r3, r3, #8
 8007784:	2b00      	cmp	r3, #0
 8007786:	d102      	bne.n	800778e <HAL_UART_IRQHandler+0x13a>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d031      	beq.n	80077f2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f8c1 	bl	8007916 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d023      	beq.n	80077ea <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	695a      	ldr	r2, [r3, #20]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d013      	beq.n	80077e2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077be:	4a22      	ldr	r2, [pc, #136]	; (8007848 <HAL_UART_IRQHandler+0x1f4>)
 80077c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fc fb6c 	bl	8003ea4 <HAL_DMA_Abort_IT>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d016      	beq.n	8007800 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e0:	e00e      	b.n	8007800 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f844 	bl	8007870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e8:	e00a      	b.n	8007800 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f840 	bl	8007870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	e006      	b.n	8007800 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f83c 	bl	8007870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80077fe:	e01e      	b.n	800783e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007800:	bf00      	nop
    return;
 8007802:	e01c      	b.n	800783e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780a:	2b00      	cmp	r3, #0
 800780c:	d008      	beq.n	8007820 <HAL_UART_IRQHandler+0x1cc>
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f8ad 	bl	8007978 <UART_Transmit_IT>
    return;
 800781e:	e00f      	b.n	8007840 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <HAL_UART_IRQHandler+0x1ec>
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f8f4 	bl	8007a22 <UART_EndTransmit_IT>
    return;
 800783a:	bf00      	nop
 800783c:	e000      	b.n	8007840 <HAL_UART_IRQHandler+0x1ec>
    return;
 800783e:	bf00      	nop
  }
}
 8007840:	3720      	adds	r7, #32
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	08007951 	.word	0x08007951

0800784c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	bc80      	pop	{r7}
 800785c:	4770      	bx	lr

0800785e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800785e:	b480      	push	{r7}
 8007860:	b083      	sub	sp, #12
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr

08007870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	bc80      	pop	{r7}
 8007880:	4770      	bx	lr

08007882 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	603b      	str	r3, [r7, #0]
 800788e:	4613      	mov	r3, r2
 8007890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007892:	e02c      	b.n	80078ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789a:	d028      	beq.n	80078ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80078a2:	f7fb fe2f 	bl	8003504 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d21d      	bcs.n	80078ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	695a      	ldr	r2, [r3, #20]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0201 	bic.w	r2, r2, #1
 80078d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2220      	movs	r2, #32
 80078de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e00f      	b.n	800790e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4013      	ands	r3, r2
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	bf0c      	ite	eq
 80078fe:	2301      	moveq	r3, #1
 8007900:	2300      	movne	r3, #0
 8007902:	b2db      	uxtb	r3, r3
 8007904:	461a      	mov	r2, r3
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	429a      	cmp	r2, r3
 800790a:	d0c3      	beq.n	8007894 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800792c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695a      	ldr	r2, [r3, #20]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0201 	bic.w	r2, r2, #1
 800793c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr

08007950 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f7ff ff80 	bl	8007870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007970:	bf00      	nop
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b21      	cmp	r3, #33	; 0x21
 800798a:	d144      	bne.n	8007a16 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007994:	d11a      	bne.n	80079cc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079aa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	1c9a      	adds	r2, r3, #2
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	621a      	str	r2, [r3, #32]
 80079be:	e00e      	b.n	80079de <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	621a      	str	r2, [r3, #32]
 80079ca:	e008      	b.n	80079de <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	1c59      	adds	r1, r3, #1
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	6211      	str	r1, [r2, #32]
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	4619      	mov	r1, r3
 80079ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10f      	bne.n	8007a12 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68da      	ldr	r2, [r3, #12]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	e000      	b.n	8007a18 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a16:	2302      	movs	r3, #2
  }
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr

08007a22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff ff02 	bl	800784c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b22      	cmp	r3, #34	; 0x22
 8007a64:	d171      	bne.n	8007b4a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6e:	d123      	bne.n	8007ab8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10e      	bne.n	8007a9c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	1c9a      	adds	r2, r3, #2
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	629a      	str	r2, [r3, #40]	; 0x28
 8007a9a:	e029      	b.n	8007af0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	629a      	str	r2, [r3, #40]	; 0x28
 8007ab6:	e01b      	b.n	8007af0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6858      	ldr	r0, [r3, #4]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	1c59      	adds	r1, r3, #1
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6291      	str	r1, [r2, #40]	; 0x28
 8007ad0:	b2c2      	uxtb	r2, r0
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	e00c      	b.n	8007af0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	1c58      	adds	r0, r3, #1
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	6288      	str	r0, [r1, #40]	; 0x28
 8007ae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	4619      	mov	r1, r3
 8007afe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d120      	bne.n	8007b46 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f022 0220 	bic.w	r2, r2, #32
 8007b12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695a      	ldr	r2, [r3, #20]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff fe8e 	bl	800785e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e002      	b.n	8007b4c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e000      	b.n	8007b4c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007b4a:	2302      	movs	r3, #2
  }
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	4a84      	ldr	r2, [pc, #528]	; (8007d74 <UART_SetConfig+0x220>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d904      	bls.n	8007b70 <UART_SetConfig+0x1c>
 8007b66:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8007b6a:	4883      	ldr	r0, [pc, #524]	; (8007d78 <UART_SetConfig+0x224>)
 8007b6c:	f7fb f9e6 	bl	8002f3c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d009      	beq.n	8007b8c <UART_SetConfig+0x38>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b80:	d004      	beq.n	8007b8c <UART_SetConfig+0x38>
 8007b82:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8007b86:	487c      	ldr	r0, [pc, #496]	; (8007d78 <UART_SetConfig+0x224>)
 8007b88:	f7fb f9d8 	bl	8002f3c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00e      	beq.n	8007bb2 <UART_SetConfig+0x5e>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b9c:	d009      	beq.n	8007bb2 <UART_SetConfig+0x5e>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007ba6:	d004      	beq.n	8007bb2 <UART_SetConfig+0x5e>
 8007ba8:	f640 31ff 	movw	r1, #3071	; 0xbff
 8007bac:	4872      	ldr	r0, [pc, #456]	; (8007d78 <UART_SetConfig+0x224>)
 8007bae:	f7fb f9c5 	bl	8002f3c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695a      	ldr	r2, [r3, #20]
 8007bb6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8007bba:	4013      	ands	r3, r2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <UART_SetConfig+0x74>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <UART_SetConfig+0x7e>
 8007bc8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8007bcc:	486a      	ldr	r0, [pc, #424]	; (8007d78 <UART_SetConfig+0x224>)
 8007bce:	f7fb f9b5 	bl	8002f3c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007c04:	f023 030c 	bic.w	r3, r3, #12
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6812      	ldr	r2, [r2, #0]
 8007c0c:	68f9      	ldr	r1, [r7, #12]
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a53      	ldr	r2, [pc, #332]	; (8007d7c <UART_SetConfig+0x228>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d14e      	bne.n	8007cd0 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c32:	f7fe fa23 	bl	800607c <HAL_RCC_GetPCLK2Freq>
 8007c36:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	009a      	lsls	r2, r3, #2
 8007c42:	441a      	add	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4e:	4a4c      	ldr	r2, [pc, #304]	; (8007d80 <UART_SetConfig+0x22c>)
 8007c50:	fba2 2303 	umull	r2, r3, r2, r3
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	0119      	lsls	r1, r3, #4
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	009a      	lsls	r2, r3, #2
 8007c62:	441a      	add	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c6e:	4b44      	ldr	r3, [pc, #272]	; (8007d80 <UART_SetConfig+0x22c>)
 8007c70:	fba3 0302 	umull	r0, r3, r3, r2
 8007c74:	095b      	lsrs	r3, r3, #5
 8007c76:	2064      	movs	r0, #100	; 0x64
 8007c78:	fb00 f303 	mul.w	r3, r0, r3
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	3332      	adds	r3, #50	; 0x32
 8007c82:	4a3f      	ldr	r2, [pc, #252]	; (8007d80 <UART_SetConfig+0x22c>)
 8007c84:	fba2 2303 	umull	r2, r3, r2, r3
 8007c88:	095b      	lsrs	r3, r3, #5
 8007c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c8e:	4419      	add	r1, r3
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	009a      	lsls	r2, r3, #2
 8007c9a:	441a      	add	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ca6:	4b36      	ldr	r3, [pc, #216]	; (8007d80 <UART_SetConfig+0x22c>)
 8007ca8:	fba3 0302 	umull	r0, r3, r3, r2
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	2064      	movs	r0, #100	; 0x64
 8007cb0:	fb00 f303 	mul.w	r3, r0, r3
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	3332      	adds	r3, #50	; 0x32
 8007cba:	4a31      	ldr	r2, [pc, #196]	; (8007d80 <UART_SetConfig+0x22c>)
 8007cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	f003 020f 	and.w	r2, r3, #15
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	440a      	add	r2, r1
 8007ccc:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007cce:	e04d      	b.n	8007d6c <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8007cd0:	f7fe f9c0 	bl	8006054 <HAL_RCC_GetPCLK1Freq>
 8007cd4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	009a      	lsls	r2, r3, #2
 8007ce0:	441a      	add	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cec:	4a24      	ldr	r2, [pc, #144]	; (8007d80 <UART_SetConfig+0x22c>)
 8007cee:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	0119      	lsls	r1, r3, #4
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009a      	lsls	r2, r3, #2
 8007d00:	441a      	add	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d0c:	4b1c      	ldr	r3, [pc, #112]	; (8007d80 <UART_SetConfig+0x22c>)
 8007d0e:	fba3 0302 	umull	r0, r3, r3, r2
 8007d12:	095b      	lsrs	r3, r3, #5
 8007d14:	2064      	movs	r0, #100	; 0x64
 8007d16:	fb00 f303 	mul.w	r3, r0, r3
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	011b      	lsls	r3, r3, #4
 8007d1e:	3332      	adds	r3, #50	; 0x32
 8007d20:	4a17      	ldr	r2, [pc, #92]	; (8007d80 <UART_SetConfig+0x22c>)
 8007d22:	fba2 2303 	umull	r2, r3, r2, r3
 8007d26:	095b      	lsrs	r3, r3, #5
 8007d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d2c:	4419      	add	r1, r3
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	009a      	lsls	r2, r3, #2
 8007d38:	441a      	add	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d44:	4b0e      	ldr	r3, [pc, #56]	; (8007d80 <UART_SetConfig+0x22c>)
 8007d46:	fba3 0302 	umull	r0, r3, r3, r2
 8007d4a:	095b      	lsrs	r3, r3, #5
 8007d4c:	2064      	movs	r0, #100	; 0x64
 8007d4e:	fb00 f303 	mul.w	r3, r0, r3
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	3332      	adds	r3, #50	; 0x32
 8007d58:	4a09      	ldr	r2, [pc, #36]	; (8007d80 <UART_SetConfig+0x22c>)
 8007d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	f003 020f 	and.w	r2, r3, #15
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	440a      	add	r2, r1
 8007d6a:	609a      	str	r2, [r3, #8]
}
 8007d6c:	bf00      	nop
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	0044aa20 	.word	0x0044aa20
 8007d78:	08009154 	.word	0x08009154
 8007d7c:	40013800 	.word	0x40013800
 8007d80:	51eb851f 	.word	0x51eb851f

08007d84 <_Znaj>:
 8007d84:	f000 b800 	b.w	8007d88 <_Znwj>

08007d88 <_Znwj>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	bf14      	ite	ne
 8007d8e:	4604      	movne	r4, r0
 8007d90:	2401      	moveq	r4, #1
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fbcc 	bl	8008530 <malloc>
 8007d98:	b930      	cbnz	r0, 8007da8 <_Znwj+0x20>
 8007d9a:	f000 f807 	bl	8007dac <_ZSt15get_new_handlerv>
 8007d9e:	b908      	cbnz	r0, 8007da4 <_Znwj+0x1c>
 8007da0:	f000 fb95 	bl	80084ce <abort>
 8007da4:	4780      	blx	r0
 8007da6:	e7f4      	b.n	8007d92 <_Znwj+0xa>
 8007da8:	bd10      	pop	{r4, pc}
	...

08007dac <_ZSt15get_new_handlerv>:
 8007dac:	4b02      	ldr	r3, [pc, #8]	; (8007db8 <_ZSt15get_new_handlerv+0xc>)
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	f3bf 8f5b 	dmb	ish
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	20000518 	.word	0x20000518

08007dbc <_ZNSaIcEC1Ev>:
 8007dbc:	4770      	bx	lr

08007dbe <_ZNSaIcED1Ev>:
 8007dbe:	4770      	bx	lr

08007dc0 <_ZSt19__throw_logic_errorPKc>:
 8007dc0:	b508      	push	{r3, lr}
 8007dc2:	f000 fb84 	bl	80084ce <abort>

08007dc6 <_ZSt20__throw_length_errorPKc>:
 8007dc6:	b508      	push	{r3, lr}
 8007dc8:	f000 fb81 	bl	80084ce <abort>

08007dcc <_ZSt24__throw_out_of_range_fmtPKcz>:
 8007dcc:	b40f      	push	{r0, r1, r2, r3}
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	f107 0410 	add.w	r4, r7, #16
 8007dd8:	f854 5b04 	ldr.w	r5, [r4], #4
 8007ddc:	4628      	mov	r0, r5
 8007dde:	f7f8 f9b5 	bl	800014c <strlen>
 8007de2:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8007de6:	f023 0307 	bic.w	r3, r3, #7
 8007dea:	ebad 0d03 	sub.w	sp, sp, r3
 8007dee:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8007df2:	4623      	mov	r3, r4
 8007df4:	462a      	mov	r2, r5
 8007df6:	4668      	mov	r0, sp
 8007df8:	607c      	str	r4, [r7, #4]
 8007dfa:	f000 fb27 	bl	800844c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8007dfe:	f000 fb66 	bl	80084ce <abort>

08007e02 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8007e02:	b10a      	cbz	r2, 8007e08 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8007e04:	f000 bbb2 	b.w	800856c <memcpy>
 8007e08:	4770      	bx	lr

08007e0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8007e0a:	6001      	str	r1, [r0, #0]
 8007e0c:	4770      	bx	lr

08007e0e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8007e0e:	6800      	ldr	r0, [r0, #0]
 8007e10:	4770      	bx	lr

08007e12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8007e12:	3008      	adds	r0, #8
 8007e14:	4770      	bx	lr

08007e16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8007e16:	6081      	str	r1, [r0, #8]
 8007e18:	4770      	bx	lr

08007e1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	6803      	ldr	r3, [r0, #0]
 8007e1e:	6041      	str	r1, [r0, #4]
 8007e20:	545a      	strb	r2, [r3, r1]
 8007e22:	4770      	bx	lr

08007e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8007e24:	b508      	push	{r3, lr}
 8007e26:	680b      	ldr	r3, [r1, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	da02      	bge.n	8007e32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8007e2c:	4809      	ldr	r0, [pc, #36]	; (8007e54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8007e2e:	f7ff ffca 	bl	8007dc6 <_ZSt20__throw_length_errorPKc>
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d908      	bls.n	8007e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8007e36:	0052      	lsls	r2, r2, #1
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d205      	bcs.n	8007e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8007e3c:	2a00      	cmp	r2, #0
 8007e3e:	bfb6      	itet	lt
 8007e40:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8007e44:	600a      	strge	r2, [r1, #0]
 8007e46:	600b      	strlt	r3, [r1, #0]
 8007e48:	6808      	ldr	r0, [r1, #0]
 8007e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e4e:	3001      	adds	r0, #1
 8007e50:	f7ff bf9a 	b.w	8007d88 <_Znwj>
 8007e54:	080092b5 	.word	0x080092b5

08007e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f853 0b08 	ldr.w	r0, [r3], #8
 8007e5e:	4298      	cmp	r0, r3
 8007e60:	d001      	beq.n	8007e66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8007e62:	f000 baa3 	b.w	80083ac <_ZdlPv>
 8007e66:	4770      	bx	lr

08007e68 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	6843      	ldr	r3, [r0, #4]
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	4299      	cmp	r1, r3
 8007e70:	d904      	bls.n	8007e7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 8007e72:	460a      	mov	r2, r1
 8007e74:	4802      	ldr	r0, [pc, #8]	; (8007e80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8007e76:	4621      	mov	r1, r4
 8007e78:	f7ff ffa8 	bl	8007dcc <_ZSt24__throw_out_of_range_fmtPKcz>
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	bd10      	pop	{r4, pc}
 8007e80:	08009210 	.word	0x08009210

08007e84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8007e84:	b508      	push	{r3, lr}
 8007e86:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007e8a:	6840      	ldr	r0, [r0, #4]
 8007e8c:	3901      	subs	r1, #1
 8007e8e:	1a09      	subs	r1, r1, r0
 8007e90:	4291      	cmp	r1, r2
 8007e92:	d202      	bcs.n	8007e9a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff ff96 	bl	8007dc6 <_ZSt20__throw_length_errorPKc>
 8007e9a:	bd08      	pop	{r3, pc}

08007e9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8007e9c:	6803      	ldr	r3, [r0, #0]
 8007e9e:	428b      	cmp	r3, r1
 8007ea0:	d806      	bhi.n	8007eb0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8007ea2:	6840      	ldr	r0, [r0, #4]
 8007ea4:	4418      	add	r0, r3
 8007ea6:	4281      	cmp	r1, r0
 8007ea8:	bf94      	ite	ls
 8007eaa:	2000      	movls	r0, #0
 8007eac:	2001      	movhi	r0, #1
 8007eae:	4770      	bx	lr
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	4770      	bx	lr

08007eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8007eb4:	2a01      	cmp	r2, #1
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	d102      	bne.n	8007ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8007eba:	780a      	ldrb	r2, [r1, #0]
 8007ebc:	7002      	strb	r2, [r0, #0]
 8007ebe:	bd10      	pop	{r4, pc}
 8007ec0:	f7ff ff9f 	bl	8007e02 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8007ec4:	e7fb      	b.n	8007ebe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08007ec6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8007ec6:	2a01      	cmp	r2, #1
 8007ec8:	b430      	push	{r4, r5}
 8007eca:	d103      	bne.n	8007ed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8007ecc:	780b      	ldrb	r3, [r1, #0]
 8007ece:	7003      	strb	r3, [r0, #0]
 8007ed0:	bc30      	pop	{r4, r5}
 8007ed2:	4770      	bx	lr
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	d0fb      	beq.n	8007ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8007ed8:	bc30      	pop	{r4, r5}
 8007eda:	f000 bb52 	b.w	8008582 <memmove>

08007ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8007ede:	b508      	push	{r3, lr}
 8007ee0:	1a52      	subs	r2, r2, r1
 8007ee2:	f7ff ffe7 	bl	8007eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007ee6:	bd08      	pop	{r3, pc}

08007ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8007ee8:	b508      	push	{r3, lr}
 8007eea:	1a52      	subs	r2, r2, r1
 8007eec:	f7ff ffe2 	bl	8007eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007ef0:	bd08      	pop	{r3, pc}

08007ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8007ef2:	4288      	cmp	r0, r1
 8007ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	460e      	mov	r6, r1
 8007efa:	d020      	beq.n	8007f3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8007efc:	6802      	ldr	r2, [r0, #0]
 8007efe:	f100 0308 	add.w	r3, r0, #8
 8007f02:	429a      	cmp	r2, r3
 8007f04:	bf08      	it	eq
 8007f06:	220f      	moveq	r2, #15
 8007f08:	684d      	ldr	r5, [r1, #4]
 8007f0a:	bf18      	it	ne
 8007f0c:	6882      	ldrne	r2, [r0, #8]
 8007f0e:	42aa      	cmp	r2, r5
 8007f10:	d20b      	bcs.n	8007f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 8007f12:	a902      	add	r1, sp, #8
 8007f14:	f841 5d04 	str.w	r5, [r1, #-4]!
 8007f18:	f7ff ff84 	bl	8007e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f7ff ff9a 	bl	8007e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007f24:	9b01      	ldr	r3, [sp, #4]
 8007f26:	6027      	str	r7, [r4, #0]
 8007f28:	60a3      	str	r3, [r4, #8]
 8007f2a:	b125      	cbz	r5, 8007f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8007f2c:	462a      	mov	r2, r5
 8007f2e:	6831      	ldr	r1, [r6, #0]
 8007f30:	6820      	ldr	r0, [r4, #0]
 8007f32:	f7ff ffbf 	bl	8007eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007f36:	2200      	movs	r2, #0
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	6065      	str	r5, [r4, #4]
 8007f3c:	555a      	strb	r2, [r3, r5]
 8007f3e:	b003      	add	sp, #12
 8007f40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8007f42:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f46:	4616      	mov	r6, r2
 8007f48:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8007f4c:	6842      	ldr	r2, [r0, #4]
 8007f4e:	469a      	mov	sl, r3
 8007f50:	eba8 0306 	sub.w	r3, r8, r6
 8007f54:	1a57      	subs	r7, r2, r1
 8007f56:	4413      	add	r3, r2
 8007f58:	6802      	ldr	r2, [r0, #0]
 8007f5a:	9301      	str	r3, [sp, #4]
 8007f5c:	f100 0308 	add.w	r3, r0, #8
 8007f60:	429a      	cmp	r2, r3
 8007f62:	460d      	mov	r5, r1
 8007f64:	bf14      	ite	ne
 8007f66:	6882      	ldrne	r2, [r0, #8]
 8007f68:	220f      	moveq	r2, #15
 8007f6a:	a901      	add	r1, sp, #4
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	f7ff ff59 	bl	8007e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007f72:	1bbf      	subs	r7, r7, r6
 8007f74:	4681      	mov	r9, r0
 8007f76:	b11d      	cbz	r5, 8007f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8007f78:	462a      	mov	r2, r5
 8007f7a:	6821      	ldr	r1, [r4, #0]
 8007f7c:	f7ff ff9a 	bl	8007eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007f80:	f1ba 0f00 	cmp.w	sl, #0
 8007f84:	d008      	beq.n	8007f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8007f86:	f1b8 0f00 	cmp.w	r8, #0
 8007f8a:	d005      	beq.n	8007f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	4651      	mov	r1, sl
 8007f90:	eb09 0005 	add.w	r0, r9, r5
 8007f94:	f7ff ff8e 	bl	8007eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007f98:	b147      	cbz	r7, 8007fac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8007f9a:	6821      	ldr	r1, [r4, #0]
 8007f9c:	442e      	add	r6, r5
 8007f9e:	eb05 0008 	add.w	r0, r5, r8
 8007fa2:	463a      	mov	r2, r7
 8007fa4:	4431      	add	r1, r6
 8007fa6:	4448      	add	r0, r9
 8007fa8:	f7ff ff84 	bl	8007eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007fac:	4620      	mov	r0, r4
 8007fae:	f7ff ff53 	bl	8007e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007fb2:	9b01      	ldr	r3, [sp, #4]
 8007fb4:	f8c4 9000 	str.w	r9, [r4]
 8007fb8:	60a3      	str	r3, [r4, #8]
 8007fba:	b002      	add	sp, #8
 8007fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8007fc0:	f100 0208 	add.w	r2, r0, #8
 8007fc4:	6002      	str	r2, [r0, #0]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	6042      	str	r2, [r0, #4]
 8007fca:	7202      	strb	r2, [r0, #8]
 8007fcc:	4770      	bx	lr

08007fce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8007fce:	b570      	push	{r4, r5, r6, lr}
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	460e      	mov	r6, r1
 8007fd4:	3008      	adds	r0, #8
 8007fd6:	6020      	str	r0, [r4, #0]
 8007fd8:	f856 3b08 	ldr.w	r3, [r6], #8
 8007fdc:	460d      	mov	r5, r1
 8007fde:	429e      	cmp	r6, r3
 8007fe0:	d10b      	bne.n	8007ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8007fe2:	2210      	movs	r2, #16
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	f7ff ff0c 	bl	8007e02 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8007fea:	686b      	ldr	r3, [r5, #4]
 8007fec:	4620      	mov	r0, r4
 8007fee:	6063      	str	r3, [r4, #4]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	602e      	str	r6, [r5, #0]
 8007ff4:	606b      	str	r3, [r5, #4]
 8007ff6:	722b      	strb	r3, [r5, #8]
 8007ff8:	bd70      	pop	{r4, r5, r6, pc}
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	688b      	ldr	r3, [r1, #8]
 8007ffe:	60a3      	str	r3, [r4, #8]
 8008000:	e7f3      	b.n	8007fea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08008002 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8008002:	b510      	push	{r4, lr}
 8008004:	4604      	mov	r4, r0
 8008006:	f7ff ff27 	bl	8007e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800800a:	4620      	mov	r0, r4
 800800c:	bd10      	pop	{r4, pc}

0800800e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800800e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008010:	460b      	mov	r3, r1
 8008012:	4606      	mov	r6, r0
 8008014:	f853 7b08 	ldr.w	r7, [r3], #8
 8008018:	4605      	mov	r5, r0
 800801a:	42bb      	cmp	r3, r7
 800801c:	460c      	mov	r4, r1
 800801e:	f856 2b08 	ldr.w	r2, [r6], #8
 8008022:	d016      	beq.n	8008052 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 8008024:	4296      	cmp	r6, r2
 8008026:	bf08      	it	eq
 8008028:	2200      	moveq	r2, #0
 800802a:	6007      	str	r7, [r0, #0]
 800802c:	6849      	ldr	r1, [r1, #4]
 800802e:	bf18      	it	ne
 8008030:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 8008034:	6041      	str	r1, [r0, #4]
 8008036:	68a1      	ldr	r1, [r4, #8]
 8008038:	6081      	str	r1, [r0, #8]
 800803a:	b142      	cbz	r2, 800804e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 800803c:	6022      	str	r2, [r4, #0]
 800803e:	f8c4 c008 	str.w	ip, [r4, #8]
 8008042:	2300      	movs	r3, #0
 8008044:	6822      	ldr	r2, [r4, #0]
 8008046:	6063      	str	r3, [r4, #4]
 8008048:	7013      	strb	r3, [r2, #0]
 800804a:	4628      	mov	r0, r5
 800804c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	e7f7      	b.n	8008042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 8008052:	f7ff ff4e 	bl	8007ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8008056:	e7f4      	b.n	8008042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08008058 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8008058:	6840      	ldr	r0, [r0, #4]
 800805a:	4770      	bx	lr

0800805c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 800805c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800805e:	4605      	mov	r5, r0
 8008060:	6843      	ldr	r3, [r0, #4]
 8008062:	9101      	str	r1, [sp, #4]
 8008064:	4299      	cmp	r1, r3
 8008066:	f855 1b08 	ldr.w	r1, [r5], #8
 800806a:	bf38      	it	cc
 800806c:	9301      	strcc	r3, [sp, #4]
 800806e:	428d      	cmp	r5, r1
 8008070:	bf0c      	ite	eq
 8008072:	220f      	moveq	r2, #15
 8008074:	6882      	ldrne	r2, [r0, #8]
 8008076:	4604      	mov	r4, r0
 8008078:	9801      	ldr	r0, [sp, #4]
 800807a:	4290      	cmp	r0, r2
 800807c:	d012      	beq.n	80080a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>
 800807e:	d801      	bhi.n	8008084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x28>
 8008080:	280f      	cmp	r0, #15
 8008082:	d911      	bls.n	80080a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4c>
 8008084:	a901      	add	r1, sp, #4
 8008086:	4620      	mov	r0, r4
 8008088:	f7ff fecc 	bl	8007e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800808c:	4605      	mov	r5, r0
 800808e:	6862      	ldr	r2, [r4, #4]
 8008090:	6821      	ldr	r1, [r4, #0]
 8008092:	3201      	adds	r2, #1
 8008094:	f7ff ff0e 	bl	8007eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008098:	4620      	mov	r0, r4
 800809a:	f7ff fedd 	bl	8007e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	6025      	str	r5, [r4, #0]
 80080a2:	60a3      	str	r3, [r4, #8]
 80080a4:	b003      	add	sp, #12
 80080a6:	bd30      	pop	{r4, r5, pc}
 80080a8:	428d      	cmp	r5, r1
 80080aa:	d0fb      	beq.n	80080a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>
 80080ac:	1c5a      	adds	r2, r3, #1
 80080ae:	4628      	mov	r0, r5
 80080b0:	f7ff ff00 	bl	8007eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80080b4:	6820      	ldr	r0, [r4, #0]
 80080b6:	f000 f979 	bl	80083ac <_ZdlPv>
 80080ba:	6025      	str	r5, [r4, #0]
 80080bc:	e7f2      	b.n	80080a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>

080080be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80080be:	6840      	ldr	r0, [r0, #4]
 80080c0:	fab0 f080 	clz	r0, r0
 80080c4:	0940      	lsrs	r0, r0, #5
 80080c6:	4770      	bx	lr

080080c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80080c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080ca:	6802      	ldr	r2, [r0, #0]
 80080cc:	f100 0308 	add.w	r3, r0, #8
 80080d0:	429a      	cmp	r2, r3
 80080d2:	bf08      	it	eq
 80080d4:	230f      	moveq	r3, #15
 80080d6:	6846      	ldr	r6, [r0, #4]
 80080d8:	bf18      	it	ne
 80080da:	6883      	ldrne	r3, [r0, #8]
 80080dc:	1c75      	adds	r5, r6, #1
 80080de:	429d      	cmp	r5, r3
 80080e0:	4604      	mov	r4, r0
 80080e2:	460f      	mov	r7, r1
 80080e4:	d906      	bls.n	80080f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 80080e6:	2301      	movs	r3, #1
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	2300      	movs	r3, #0
 80080ec:	4631      	mov	r1, r6
 80080ee:	461a      	mov	r2, r3
 80080f0:	f7ff ff27 	bl	8007f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80080f4:	2200      	movs	r2, #0
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	559f      	strb	r7, [r3, r6]
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	6065      	str	r5, [r4, #4]
 80080fe:	555a      	strb	r2, [r3, r5]
 8008100:	b003      	add	sp, #12
 8008102:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8008104:	b510      	push	{r4, lr}
 8008106:	4604      	mov	r4, r0
 8008108:	f7ff ffde 	bl	80080c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 800810c:	4620      	mov	r0, r4
 800810e:	bd10      	pop	{r4, pc}

08008110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8008110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	4614      	mov	r4, r2
 8008116:	4681      	mov	r9, r0
 8008118:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800811a:	460f      	mov	r7, r1
 800811c:	462a      	mov	r2, r5
 800811e:	4698      	mov	r8, r3
 8008120:	4621      	mov	r1, r4
 8008122:	4b37      	ldr	r3, [pc, #220]	; (8008200 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8008124:	f7ff feae 	bl	8007e84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8008128:	464a      	mov	r2, r9
 800812a:	f852 6b08 	ldr.w	r6, [r2], #8
 800812e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008132:	4296      	cmp	r6, r2
 8008134:	bf08      	it	eq
 8008136:	220f      	moveq	r2, #15
 8008138:	eba5 0b04 	sub.w	fp, r5, r4
 800813c:	bf18      	it	ne
 800813e:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 8008142:	eb03 0a0b 	add.w	sl, r3, fp
 8008146:	4552      	cmp	r2, sl
 8008148:	d34e      	bcc.n	80081e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 800814a:	443e      	add	r6, r7
 800814c:	4641      	mov	r1, r8
 800814e:	1bdf      	subs	r7, r3, r7
 8008150:	4648      	mov	r0, r9
 8008152:	1b3f      	subs	r7, r7, r4
 8008154:	f7ff fea2 	bl	8007e9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8008158:	b170      	cbz	r0, 8008178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800815a:	b137      	cbz	r7, 800816a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800815c:	42ac      	cmp	r4, r5
 800815e:	d004      	beq.n	800816a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8008160:	463a      	mov	r2, r7
 8008162:	1931      	adds	r1, r6, r4
 8008164:	1970      	adds	r0, r6, r5
 8008166:	f7ff feae 	bl	8007ec6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800816a:	b30d      	cbz	r5, 80081b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800816c:	462a      	mov	r2, r5
 800816e:	4641      	mov	r1, r8
 8008170:	4630      	mov	r0, r6
 8008172:	f7ff fe9f 	bl	8007eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008176:	e01b      	b.n	80081b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8008178:	b135      	cbz	r5, 8008188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 800817a:	42ac      	cmp	r4, r5
 800817c:	d33c      	bcc.n	80081f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 800817e:	462a      	mov	r2, r5
 8008180:	4641      	mov	r1, r8
 8008182:	4630      	mov	r0, r6
 8008184:	f7ff fe9f 	bl	8007ec6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008188:	b197      	cbz	r7, 80081b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800818a:	42ac      	cmp	r4, r5
 800818c:	d010      	beq.n	80081b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800818e:	463a      	mov	r2, r7
 8008190:	1931      	adds	r1, r6, r4
 8008192:	1970      	adds	r0, r6, r5
 8008194:	f7ff fe97 	bl	8007ec6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008198:	42ac      	cmp	r4, r5
 800819a:	d209      	bcs.n	80081b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800819c:	4434      	add	r4, r6
 800819e:	eb08 0305 	add.w	r3, r8, r5
 80081a2:	429c      	cmp	r4, r3
 80081a4:	d30f      	bcc.n	80081c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80081a6:	462a      	mov	r2, r5
 80081a8:	4641      	mov	r1, r8
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7ff fe8b 	bl	8007ec6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80081b0:	2200      	movs	r2, #0
 80081b2:	4648      	mov	r0, r9
 80081b4:	f8d9 3000 	ldr.w	r3, [r9]
 80081b8:	f8c9 a004 	str.w	sl, [r9, #4]
 80081bc:	f803 200a 	strb.w	r2, [r3, sl]
 80081c0:	b003      	add	sp, #12
 80081c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c6:	4544      	cmp	r4, r8
 80081c8:	d803      	bhi.n	80081d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 80081ca:	462a      	mov	r2, r5
 80081cc:	eb08 010b 	add.w	r1, r8, fp
 80081d0:	e7ce      	b.n	8008170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80081d2:	eba4 0408 	sub.w	r4, r4, r8
 80081d6:	4622      	mov	r2, r4
 80081d8:	4641      	mov	r1, r8
 80081da:	4630      	mov	r0, r6
 80081dc:	f7ff fe73 	bl	8007ec6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80081e0:	1b2a      	subs	r2, r5, r4
 80081e2:	1971      	adds	r1, r6, r5
 80081e4:	1930      	adds	r0, r6, r4
 80081e6:	e7c4      	b.n	8008172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 80081e8:	9500      	str	r5, [sp, #0]
 80081ea:	4643      	mov	r3, r8
 80081ec:	4622      	mov	r2, r4
 80081ee:	4639      	mov	r1, r7
 80081f0:	4648      	mov	r0, r9
 80081f2:	f7ff fea6 	bl	8007f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80081f6:	e7db      	b.n	80081b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80081f8:	2f00      	cmp	r7, #0
 80081fa:	d0cf      	beq.n	800819c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 80081fc:	e7c7      	b.n	800818e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80081fe:	bf00      	nop
 8008200:	08009247 	.word	0x08009247

08008204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8008204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	460d      	mov	r5, r1
 800820c:	f7f7 ff9e 	bl	800014c <strlen>
 8008210:	462b      	mov	r3, r5
 8008212:	9000      	str	r0, [sp, #0]
 8008214:	6862      	ldr	r2, [r4, #4]
 8008216:	2100      	movs	r1, #0
 8008218:	4620      	mov	r0, r4
 800821a:	f7ff ff79 	bl	8008110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800821e:	b003      	add	sp, #12
 8008220:	bd30      	pop	{r4, r5, pc}

08008222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8008222:	b508      	push	{r3, lr}
 8008224:	f7ff ffee 	bl	8008204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8008228:	bd08      	pop	{r3, pc}
	...

0800822c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 800822c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800822e:	4604      	mov	r4, r0
 8008230:	460f      	mov	r7, r1
 8008232:	4615      	mov	r5, r2
 8008234:	4a08      	ldr	r2, [pc, #32]	; (8008258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8008236:	461e      	mov	r6, r3
 8008238:	f7ff fe16 	bl	8007e68 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800823c:	6862      	ldr	r2, [r4, #4]
 800823e:	9b08      	ldr	r3, [sp, #32]
 8008240:	1bd2      	subs	r2, r2, r7
 8008242:	42aa      	cmp	r2, r5
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	4601      	mov	r1, r0
 8008248:	4633      	mov	r3, r6
 800824a:	bf28      	it	cs
 800824c:	462a      	movcs	r2, r5
 800824e:	4620      	mov	r0, r4
 8008250:	f7ff ff5e 	bl	8008110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8008254:	b003      	add	sp, #12
 8008256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008258:	0800929f 	.word	0x0800929f

0800825c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 800825c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800825e:	4605      	mov	r5, r0
 8008260:	4610      	mov	r0, r2
 8008262:	4614      	mov	r4, r2
 8008264:	460e      	mov	r6, r1
 8008266:	f7f7 ff71 	bl	800014c <strlen>
 800826a:	4623      	mov	r3, r4
 800826c:	9000      	str	r0, [sp, #0]
 800826e:	2200      	movs	r2, #0
 8008270:	4631      	mov	r1, r6
 8008272:	4628      	mov	r0, r5
 8008274:	f7ff ffda 	bl	800822c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8008278:	b002      	add	sp, #8
 800827a:	bd70      	pop	{r4, r5, r6, pc}

0800827c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800827c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800827e:	4604      	mov	r4, r0
 8008280:	4626      	mov	r6, r4
 8008282:	f856 3b08 	ldr.w	r3, [r6], #8
 8008286:	6840      	ldr	r0, [r0, #4]
 8008288:	42b3      	cmp	r3, r6
 800828a:	bf0c      	ite	eq
 800828c:	260f      	moveq	r6, #15
 800828e:	68a6      	ldrne	r6, [r4, #8]
 8008290:	1885      	adds	r5, r0, r2
 8008292:	42b5      	cmp	r5, r6
 8008294:	d80a      	bhi.n	80082ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 8008296:	b112      	cbz	r2, 800829e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 8008298:	4418      	add	r0, r3
 800829a:	f7ff fe0b 	bl	8007eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800829e:	2200      	movs	r2, #0
 80082a0:	4620      	mov	r0, r4
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	6065      	str	r5, [r4, #4]
 80082a6:	555a      	strb	r2, [r3, r5]
 80082a8:	b002      	add	sp, #8
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	9200      	str	r2, [sp, #0]
 80082ae:	460b      	mov	r3, r1
 80082b0:	2200      	movs	r2, #0
 80082b2:	4601      	mov	r1, r0
 80082b4:	4620      	mov	r0, r4
 80082b6:	f7ff fe44 	bl	8007f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80082ba:	e7f0      	b.n	800829e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

080082bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 80082bc:	b508      	push	{r3, lr}
 80082be:	e9d1 1200 	ldrd	r1, r2, [r1]
 80082c2:	f7ff ffdb 	bl	800827c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80082c6:	bd08      	pop	{r3, pc}

080082c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	4604      	mov	r4, r0
 80082cc:	460d      	mov	r5, r1
 80082ce:	4616      	mov	r6, r2
 80082d0:	4b04      	ldr	r3, [pc, #16]	; (80082e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 80082d2:	2100      	movs	r1, #0
 80082d4:	f7ff fdd6 	bl	8007e84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80082d8:	4632      	mov	r2, r6
 80082da:	4629      	mov	r1, r5
 80082dc:	4620      	mov	r0, r4
 80082de:	f7ff ffcd 	bl	800827c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80082e2:	bd70      	pop	{r4, r5, r6, pc}
 80082e4:	0800928a 	.word	0x0800928a

080082e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	460d      	mov	r5, r1
 80082f0:	f7f7 ff2c 	bl	800014c <strlen>
 80082f4:	4606      	mov	r6, r0
 80082f6:	4602      	mov	r2, r0
 80082f8:	4b05      	ldr	r3, [pc, #20]	; (8008310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80082fa:	4620      	mov	r0, r4
 80082fc:	2100      	movs	r1, #0
 80082fe:	f7ff fdc1 	bl	8007e84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8008302:	4632      	mov	r2, r6
 8008304:	4629      	mov	r1, r5
 8008306:	4620      	mov	r0, r4
 8008308:	f7ff ffb8 	bl	800827c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800830c:	bd70      	pop	{r4, r5, r6, pc}
 800830e:	bf00      	nop
 8008310:	0800928a 	.word	0x0800928a

08008314 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8008314:	6800      	ldr	r0, [r0, #0]
 8008316:	4770      	bx	lr

08008318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8008318:	6001      	str	r1, [r0, #0]
 800831a:	4770      	bx	lr

0800831c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800831c:	b510      	push	{r4, lr}
 800831e:	4604      	mov	r4, r0
 8008320:	f100 0208 	add.w	r2, r0, #8
 8008324:	6002      	str	r2, [r0, #0]
 8008326:	e9d1 1200 	ldrd	r1, r2, [r1]
 800832a:	f04f 0300 	mov.w	r3, #0
 800832e:	440a      	add	r2, r1
 8008330:	f7f9 fc7e 	bl	8001c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8008334:	4620      	mov	r0, r4
 8008336:	bd10      	pop	{r4, pc}

08008338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8008338:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800833a:	4604      	mov	r4, r0
 800833c:	4616      	mov	r6, r2
 800833e:	460d      	mov	r5, r1
 8008340:	b919      	cbnz	r1, 800834a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8008342:	b112      	cbz	r2, 800834a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8008344:	480d      	ldr	r0, [pc, #52]	; (800837c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8008346:	f7ff fd3b 	bl	8007dc0 <_ZSt19__throw_logic_errorPKc>
 800834a:	1b73      	subs	r3, r6, r5
 800834c:	2b0f      	cmp	r3, #15
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	d907      	bls.n	8008362 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8008352:	2200      	movs	r2, #0
 8008354:	a901      	add	r1, sp, #4
 8008356:	4620      	mov	r0, r4
 8008358:	f7ff fd64 	bl	8007e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	6020      	str	r0, [r4, #0]
 8008360:	60a3      	str	r3, [r4, #8]
 8008362:	4632      	mov	r2, r6
 8008364:	4629      	mov	r1, r5
 8008366:	6820      	ldr	r0, [r4, #0]
 8008368:	f7ff fdbe 	bl	8007ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800836c:	2100      	movs	r1, #0
 800836e:	9b01      	ldr	r3, [sp, #4]
 8008370:	6822      	ldr	r2, [r4, #0]
 8008372:	6063      	str	r3, [r4, #4]
 8008374:	54d1      	strb	r1, [r2, r3]
 8008376:	b002      	add	sp, #8
 8008378:	bd70      	pop	{r4, r5, r6, pc}
 800837a:	bf00      	nop
 800837c:	08009260 	.word	0x08009260

08008380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	f100 0308 	add.w	r3, r0, #8
 8008386:	4604      	mov	r4, r0
 8008388:	6003      	str	r3, [r0, #0]
 800838a:	460d      	mov	r5, r1
 800838c:	b159      	cbz	r1, 80083a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800838e:	4608      	mov	r0, r1
 8008390:	f7f7 fedc 	bl	800014c <strlen>
 8008394:	182a      	adds	r2, r5, r0
 8008396:	4620      	mov	r0, r4
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	4629      	mov	r1, r5
 800839e:	f7ff ffcb 	bl	8008338 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80083a2:	4620      	mov	r0, r4
 80083a4:	bd38      	pop	{r3, r4, r5, pc}
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295
 80083aa:	e7f4      	b.n	8008396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080083ac <_ZdlPv>:
 80083ac:	f000 b8c8 	b.w	8008540 <free>

080083b0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b09c      	sub	sp, #112	; 0x70
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	1a0e      	subs	r6, r1, r0
 80083b8:	4680      	mov	r8, r0
 80083ba:	2269      	movs	r2, #105	; 0x69
 80083bc:	490e      	ldr	r1, [pc, #56]	; (80083f8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80083be:	1d38      	adds	r0, r7, #4
 80083c0:	f000 f8d4 	bl	800856c <memcpy>
 80083c4:	f106 0377 	add.w	r3, r6, #119	; 0x77
 80083c8:	f023 0307 	bic.w	r3, r3, #7
 80083cc:	ebad 0d03 	sub.w	sp, sp, r3
 80083d0:	466c      	mov	r4, sp
 80083d2:	2268      	movs	r2, #104	; 0x68
 80083d4:	1d39      	adds	r1, r7, #4
 80083d6:	4620      	mov	r0, r4
 80083d8:	f000 f8c8 	bl	800856c <memcpy>
 80083dc:	4632      	mov	r2, r6
 80083de:	4641      	mov	r1, r8
 80083e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80083e4:	f000 f8c2 	bl	800856c <memcpy>
 80083e8:	2300      	movs	r3, #0
 80083ea:	1c75      	adds	r5, r6, #1
 80083ec:	4425      	add	r5, r4
 80083ee:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 80083f2:	4620      	mov	r0, r4
 80083f4:	f7ff fce4 	bl	8007dc0 <_ZSt19__throw_logic_errorPKc>
 80083f8:	080092d8 	.word	0x080092d8

080083fc <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	af00      	add	r7, sp, #0
 8008400:	b086      	sub	sp, #24
 8008402:	466d      	mov	r5, sp
 8008404:	f105 040c 	add.w	r4, r5, #12
 8008408:	4623      	mov	r3, r4
 800840a:	f04f 0c0a 	mov.w	ip, #10
 800840e:	f8df e038 	ldr.w	lr, [pc, #56]	; 8008448 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8008412:	fbb2 f6fc 	udiv	r6, r2, ip
 8008416:	fb0c 2216 	mls	r2, ip, r6, r2
 800841a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800841e:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8008422:	4632      	mov	r2, r6
 8008424:	2e00      	cmp	r6, #0
 8008426:	d1f4      	bne.n	8008412 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8008428:	1ae4      	subs	r4, r4, r3
 800842a:	428c      	cmp	r4, r1
 800842c:	d808      	bhi.n	8008440 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800842e:	f1c4 010c 	rsb	r1, r4, #12
 8008432:	4622      	mov	r2, r4
 8008434:	4429      	add	r1, r5
 8008436:	f000 f899 	bl	800856c <memcpy>
 800843a:	4620      	mov	r0, r4
 800843c:	46bd      	mov	sp, r7
 800843e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008440:	f04f 34ff 	mov.w	r4, #4294967295
 8008444:	e7f9      	b.n	800843a <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8008446:	bf00      	nop
 8008448:	080092cd 	.word	0x080092cd

0800844c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800844c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008450:	4606      	mov	r6, r0
 8008452:	4615      	mov	r5, r2
 8008454:	4604      	mov	r4, r0
 8008456:	3901      	subs	r1, #1
 8008458:	1847      	adds	r7, r0, r1
 800845a:	782a      	ldrb	r2, [r5, #0]
 800845c:	b39a      	cbz	r2, 80084c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 800845e:	42bc      	cmp	r4, r7
 8008460:	d22d      	bcs.n	80084be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8008462:	2a25      	cmp	r2, #37	; 0x25
 8008464:	d107      	bne.n	8008476 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8008466:	786a      	ldrb	r2, [r5, #1]
 8008468:	2a73      	cmp	r2, #115	; 0x73
 800846a:	d00a      	beq.n	8008482 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800846c:	2a7a      	cmp	r2, #122	; 0x7a
 800846e:	d013      	beq.n	8008498 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8008470:	2a25      	cmp	r2, #37	; 0x25
 8008472:	d100      	bne.n	8008476 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8008474:	3501      	adds	r5, #1
 8008476:	782a      	ldrb	r2, [r5, #0]
 8008478:	3401      	adds	r4, #1
 800847a:	f804 2c01 	strb.w	r2, [r4, #-1]
 800847e:	3501      	adds	r5, #1
 8008480:	e7eb      	b.n	800845a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8008482:	1d19      	adds	r1, r3, #4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3b01      	subs	r3, #1
 8008488:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800848c:	b1a2      	cbz	r2, 80084b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 800848e:	42bc      	cmp	r4, r7
 8008490:	d015      	beq.n	80084be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8008492:	f804 2b01 	strb.w	r2, [r4], #1
 8008496:	e7f7      	b.n	8008488 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8008498:	78aa      	ldrb	r2, [r5, #2]
 800849a:	2a75      	cmp	r2, #117	; 0x75
 800849c:	d1eb      	bne.n	8008476 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	1b39      	subs	r1, r7, r4
 80084a2:	4620      	mov	r0, r4
 80084a4:	f103 0804 	add.w	r8, r3, #4
 80084a8:	f7ff ffa8 	bl	80083fc <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	dd06      	ble.n	80084be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80084b0:	4404      	add	r4, r0
 80084b2:	3503      	adds	r5, #3
 80084b4:	4643      	mov	r3, r8
 80084b6:	e7d0      	b.n	800845a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80084b8:	3502      	adds	r5, #2
 80084ba:	460b      	mov	r3, r1
 80084bc:	e7cd      	b.n	800845a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80084be:	4621      	mov	r1, r4
 80084c0:	4630      	mov	r0, r6
 80084c2:	f7ff ff75 	bl	80083b0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80084c6:	7022      	strb	r2, [r4, #0]
 80084c8:	1ba0      	subs	r0, r4, r6
 80084ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080084ce <abort>:
 80084ce:	b508      	push	{r3, lr}
 80084d0:	2006      	movs	r0, #6
 80084d2:	f000 f955 	bl	8008780 <raise>
 80084d6:	2001      	movs	r0, #1
 80084d8:	f7fa fe2d 	bl	8003136 <_exit>

080084dc <__errno>:
 80084dc:	4b01      	ldr	r3, [pc, #4]	; (80084e4 <__errno+0x8>)
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	2000000c 	.word	0x2000000c

080084e8 <__libc_init_array>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	2500      	movs	r5, #0
 80084ec:	4e0c      	ldr	r6, [pc, #48]	; (8008520 <__libc_init_array+0x38>)
 80084ee:	4c0d      	ldr	r4, [pc, #52]	; (8008524 <__libc_init_array+0x3c>)
 80084f0:	1ba4      	subs	r4, r4, r6
 80084f2:	10a4      	asrs	r4, r4, #2
 80084f4:	42a5      	cmp	r5, r4
 80084f6:	d109      	bne.n	800850c <__libc_init_array+0x24>
 80084f8:	f000 fca2 	bl	8008e40 <_init>
 80084fc:	2500      	movs	r5, #0
 80084fe:	4e0a      	ldr	r6, [pc, #40]	; (8008528 <__libc_init_array+0x40>)
 8008500:	4c0a      	ldr	r4, [pc, #40]	; (800852c <__libc_init_array+0x44>)
 8008502:	1ba4      	subs	r4, r4, r6
 8008504:	10a4      	asrs	r4, r4, #2
 8008506:	42a5      	cmp	r5, r4
 8008508:	d105      	bne.n	8008516 <__libc_init_array+0x2e>
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008510:	4798      	blx	r3
 8008512:	3501      	adds	r5, #1
 8008514:	e7ee      	b.n	80084f4 <__libc_init_array+0xc>
 8008516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800851a:	4798      	blx	r3
 800851c:	3501      	adds	r5, #1
 800851e:	e7f2      	b.n	8008506 <__libc_init_array+0x1e>
 8008520:	080093d8 	.word	0x080093d8
 8008524:	080093d8 	.word	0x080093d8
 8008528:	080093d8 	.word	0x080093d8
 800852c:	080093dc 	.word	0x080093dc

08008530 <malloc>:
 8008530:	4b02      	ldr	r3, [pc, #8]	; (800853c <malloc+0xc>)
 8008532:	4601      	mov	r1, r0
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	f000 b891 	b.w	800865c <_malloc_r>
 800853a:	bf00      	nop
 800853c:	2000000c 	.word	0x2000000c

08008540 <free>:
 8008540:	4b02      	ldr	r3, [pc, #8]	; (800854c <free+0xc>)
 8008542:	4601      	mov	r1, r0
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	f000 b83d 	b.w	80085c4 <_free_r>
 800854a:	bf00      	nop
 800854c:	2000000c 	.word	0x2000000c

08008550 <memchr>:
 8008550:	b510      	push	{r4, lr}
 8008552:	b2c9      	uxtb	r1, r1
 8008554:	4402      	add	r2, r0
 8008556:	4290      	cmp	r0, r2
 8008558:	4603      	mov	r3, r0
 800855a:	d101      	bne.n	8008560 <memchr+0x10>
 800855c:	2300      	movs	r3, #0
 800855e:	e003      	b.n	8008568 <memchr+0x18>
 8008560:	781c      	ldrb	r4, [r3, #0]
 8008562:	3001      	adds	r0, #1
 8008564:	428c      	cmp	r4, r1
 8008566:	d1f6      	bne.n	8008556 <memchr+0x6>
 8008568:	4618      	mov	r0, r3
 800856a:	bd10      	pop	{r4, pc}

0800856c <memcpy>:
 800856c:	b510      	push	{r4, lr}
 800856e:	1e43      	subs	r3, r0, #1
 8008570:	440a      	add	r2, r1
 8008572:	4291      	cmp	r1, r2
 8008574:	d100      	bne.n	8008578 <memcpy+0xc>
 8008576:	bd10      	pop	{r4, pc}
 8008578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008580:	e7f7      	b.n	8008572 <memcpy+0x6>

08008582 <memmove>:
 8008582:	4288      	cmp	r0, r1
 8008584:	b510      	push	{r4, lr}
 8008586:	eb01 0302 	add.w	r3, r1, r2
 800858a:	d807      	bhi.n	800859c <memmove+0x1a>
 800858c:	1e42      	subs	r2, r0, #1
 800858e:	4299      	cmp	r1, r3
 8008590:	d00a      	beq.n	80085a8 <memmove+0x26>
 8008592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008596:	f802 4f01 	strb.w	r4, [r2, #1]!
 800859a:	e7f8      	b.n	800858e <memmove+0xc>
 800859c:	4283      	cmp	r3, r0
 800859e:	d9f5      	bls.n	800858c <memmove+0xa>
 80085a0:	1881      	adds	r1, r0, r2
 80085a2:	1ad2      	subs	r2, r2, r3
 80085a4:	42d3      	cmn	r3, r2
 80085a6:	d100      	bne.n	80085aa <memmove+0x28>
 80085a8:	bd10      	pop	{r4, pc}
 80085aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80085b2:	e7f7      	b.n	80085a4 <memmove+0x22>

080085b4 <memset>:
 80085b4:	4603      	mov	r3, r0
 80085b6:	4402      	add	r2, r0
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d100      	bne.n	80085be <memset+0xa>
 80085bc:	4770      	bx	lr
 80085be:	f803 1b01 	strb.w	r1, [r3], #1
 80085c2:	e7f9      	b.n	80085b8 <memset+0x4>

080085c4 <_free_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4605      	mov	r5, r0
 80085c8:	2900      	cmp	r1, #0
 80085ca:	d043      	beq.n	8008654 <_free_r+0x90>
 80085cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d0:	1f0c      	subs	r4, r1, #4
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bfb8      	it	lt
 80085d6:	18e4      	addlt	r4, r4, r3
 80085d8:	f000 f928 	bl	800882c <__malloc_lock>
 80085dc:	4a1e      	ldr	r2, [pc, #120]	; (8008658 <_free_r+0x94>)
 80085de:	6813      	ldr	r3, [r2, #0]
 80085e0:	4610      	mov	r0, r2
 80085e2:	b933      	cbnz	r3, 80085f2 <_free_r+0x2e>
 80085e4:	6063      	str	r3, [r4, #4]
 80085e6:	6014      	str	r4, [r2, #0]
 80085e8:	4628      	mov	r0, r5
 80085ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ee:	f000 b91e 	b.w	800882e <__malloc_unlock>
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	d90b      	bls.n	800860e <_free_r+0x4a>
 80085f6:	6821      	ldr	r1, [r4, #0]
 80085f8:	1862      	adds	r2, r4, r1
 80085fa:	4293      	cmp	r3, r2
 80085fc:	bf01      	itttt	eq
 80085fe:	681a      	ldreq	r2, [r3, #0]
 8008600:	685b      	ldreq	r3, [r3, #4]
 8008602:	1852      	addeq	r2, r2, r1
 8008604:	6022      	streq	r2, [r4, #0]
 8008606:	6063      	str	r3, [r4, #4]
 8008608:	6004      	str	r4, [r0, #0]
 800860a:	e7ed      	b.n	80085e8 <_free_r+0x24>
 800860c:	4613      	mov	r3, r2
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	b10a      	cbz	r2, 8008616 <_free_r+0x52>
 8008612:	42a2      	cmp	r2, r4
 8008614:	d9fa      	bls.n	800860c <_free_r+0x48>
 8008616:	6819      	ldr	r1, [r3, #0]
 8008618:	1858      	adds	r0, r3, r1
 800861a:	42a0      	cmp	r0, r4
 800861c:	d10b      	bne.n	8008636 <_free_r+0x72>
 800861e:	6820      	ldr	r0, [r4, #0]
 8008620:	4401      	add	r1, r0
 8008622:	1858      	adds	r0, r3, r1
 8008624:	4282      	cmp	r2, r0
 8008626:	6019      	str	r1, [r3, #0]
 8008628:	d1de      	bne.n	80085e8 <_free_r+0x24>
 800862a:	6810      	ldr	r0, [r2, #0]
 800862c:	6852      	ldr	r2, [r2, #4]
 800862e:	4401      	add	r1, r0
 8008630:	6019      	str	r1, [r3, #0]
 8008632:	605a      	str	r2, [r3, #4]
 8008634:	e7d8      	b.n	80085e8 <_free_r+0x24>
 8008636:	d902      	bls.n	800863e <_free_r+0x7a>
 8008638:	230c      	movs	r3, #12
 800863a:	602b      	str	r3, [r5, #0]
 800863c:	e7d4      	b.n	80085e8 <_free_r+0x24>
 800863e:	6820      	ldr	r0, [r4, #0]
 8008640:	1821      	adds	r1, r4, r0
 8008642:	428a      	cmp	r2, r1
 8008644:	bf01      	itttt	eq
 8008646:	6811      	ldreq	r1, [r2, #0]
 8008648:	6852      	ldreq	r2, [r2, #4]
 800864a:	1809      	addeq	r1, r1, r0
 800864c:	6021      	streq	r1, [r4, #0]
 800864e:	6062      	str	r2, [r4, #4]
 8008650:	605c      	str	r4, [r3, #4]
 8008652:	e7c9      	b.n	80085e8 <_free_r+0x24>
 8008654:	bd38      	pop	{r3, r4, r5, pc}
 8008656:	bf00      	nop
 8008658:	2000051c 	.word	0x2000051c

0800865c <_malloc_r>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	1ccd      	adds	r5, r1, #3
 8008660:	f025 0503 	bic.w	r5, r5, #3
 8008664:	3508      	adds	r5, #8
 8008666:	2d0c      	cmp	r5, #12
 8008668:	bf38      	it	cc
 800866a:	250c      	movcc	r5, #12
 800866c:	2d00      	cmp	r5, #0
 800866e:	4606      	mov	r6, r0
 8008670:	db01      	blt.n	8008676 <_malloc_r+0x1a>
 8008672:	42a9      	cmp	r1, r5
 8008674:	d903      	bls.n	800867e <_malloc_r+0x22>
 8008676:	230c      	movs	r3, #12
 8008678:	6033      	str	r3, [r6, #0]
 800867a:	2000      	movs	r0, #0
 800867c:	bd70      	pop	{r4, r5, r6, pc}
 800867e:	f000 f8d5 	bl	800882c <__malloc_lock>
 8008682:	4a21      	ldr	r2, [pc, #132]	; (8008708 <_malloc_r+0xac>)
 8008684:	6814      	ldr	r4, [r2, #0]
 8008686:	4621      	mov	r1, r4
 8008688:	b991      	cbnz	r1, 80086b0 <_malloc_r+0x54>
 800868a:	4c20      	ldr	r4, [pc, #128]	; (800870c <_malloc_r+0xb0>)
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	b91b      	cbnz	r3, 8008698 <_malloc_r+0x3c>
 8008690:	4630      	mov	r0, r6
 8008692:	f000 f83d 	bl	8008710 <_sbrk_r>
 8008696:	6020      	str	r0, [r4, #0]
 8008698:	4629      	mov	r1, r5
 800869a:	4630      	mov	r0, r6
 800869c:	f000 f838 	bl	8008710 <_sbrk_r>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d124      	bne.n	80086ee <_malloc_r+0x92>
 80086a4:	230c      	movs	r3, #12
 80086a6:	4630      	mov	r0, r6
 80086a8:	6033      	str	r3, [r6, #0]
 80086aa:	f000 f8c0 	bl	800882e <__malloc_unlock>
 80086ae:	e7e4      	b.n	800867a <_malloc_r+0x1e>
 80086b0:	680b      	ldr	r3, [r1, #0]
 80086b2:	1b5b      	subs	r3, r3, r5
 80086b4:	d418      	bmi.n	80086e8 <_malloc_r+0x8c>
 80086b6:	2b0b      	cmp	r3, #11
 80086b8:	d90f      	bls.n	80086da <_malloc_r+0x7e>
 80086ba:	600b      	str	r3, [r1, #0]
 80086bc:	18cc      	adds	r4, r1, r3
 80086be:	50cd      	str	r5, [r1, r3]
 80086c0:	4630      	mov	r0, r6
 80086c2:	f000 f8b4 	bl	800882e <__malloc_unlock>
 80086c6:	f104 000b 	add.w	r0, r4, #11
 80086ca:	1d23      	adds	r3, r4, #4
 80086cc:	f020 0007 	bic.w	r0, r0, #7
 80086d0:	1ac3      	subs	r3, r0, r3
 80086d2:	d0d3      	beq.n	800867c <_malloc_r+0x20>
 80086d4:	425a      	negs	r2, r3
 80086d6:	50e2      	str	r2, [r4, r3]
 80086d8:	e7d0      	b.n	800867c <_malloc_r+0x20>
 80086da:	684b      	ldr	r3, [r1, #4]
 80086dc:	428c      	cmp	r4, r1
 80086de:	bf16      	itet	ne
 80086e0:	6063      	strne	r3, [r4, #4]
 80086e2:	6013      	streq	r3, [r2, #0]
 80086e4:	460c      	movne	r4, r1
 80086e6:	e7eb      	b.n	80086c0 <_malloc_r+0x64>
 80086e8:	460c      	mov	r4, r1
 80086ea:	6849      	ldr	r1, [r1, #4]
 80086ec:	e7cc      	b.n	8008688 <_malloc_r+0x2c>
 80086ee:	1cc4      	adds	r4, r0, #3
 80086f0:	f024 0403 	bic.w	r4, r4, #3
 80086f4:	42a0      	cmp	r0, r4
 80086f6:	d005      	beq.n	8008704 <_malloc_r+0xa8>
 80086f8:	1a21      	subs	r1, r4, r0
 80086fa:	4630      	mov	r0, r6
 80086fc:	f000 f808 	bl	8008710 <_sbrk_r>
 8008700:	3001      	adds	r0, #1
 8008702:	d0cf      	beq.n	80086a4 <_malloc_r+0x48>
 8008704:	6025      	str	r5, [r4, #0]
 8008706:	e7db      	b.n	80086c0 <_malloc_r+0x64>
 8008708:	2000051c 	.word	0x2000051c
 800870c:	20000520 	.word	0x20000520

08008710 <_sbrk_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	2300      	movs	r3, #0
 8008714:	4c05      	ldr	r4, [pc, #20]	; (800872c <_sbrk_r+0x1c>)
 8008716:	4605      	mov	r5, r0
 8008718:	4608      	mov	r0, r1
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	f7fa fd16 	bl	800314c <_sbrk>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_sbrk_r+0x1a>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	b103      	cbz	r3, 800872a <_sbrk_r+0x1a>
 8008728:	602b      	str	r3, [r5, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	20000684 	.word	0x20000684

08008730 <_raise_r>:
 8008730:	291f      	cmp	r1, #31
 8008732:	b538      	push	{r3, r4, r5, lr}
 8008734:	4604      	mov	r4, r0
 8008736:	460d      	mov	r5, r1
 8008738:	d904      	bls.n	8008744 <_raise_r+0x14>
 800873a:	2316      	movs	r3, #22
 800873c:	6003      	str	r3, [r0, #0]
 800873e:	f04f 30ff 	mov.w	r0, #4294967295
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008746:	b112      	cbz	r2, 800874e <_raise_r+0x1e>
 8008748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800874c:	b94b      	cbnz	r3, 8008762 <_raise_r+0x32>
 800874e:	4620      	mov	r0, r4
 8008750:	f000 f830 	bl	80087b4 <_getpid_r>
 8008754:	462a      	mov	r2, r5
 8008756:	4601      	mov	r1, r0
 8008758:	4620      	mov	r0, r4
 800875a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875e:	f000 b817 	b.w	8008790 <_kill_r>
 8008762:	2b01      	cmp	r3, #1
 8008764:	d00a      	beq.n	800877c <_raise_r+0x4c>
 8008766:	1c59      	adds	r1, r3, #1
 8008768:	d103      	bne.n	8008772 <_raise_r+0x42>
 800876a:	2316      	movs	r3, #22
 800876c:	6003      	str	r3, [r0, #0]
 800876e:	2001      	movs	r0, #1
 8008770:	e7e7      	b.n	8008742 <_raise_r+0x12>
 8008772:	2400      	movs	r4, #0
 8008774:	4628      	mov	r0, r5
 8008776:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800877a:	4798      	blx	r3
 800877c:	2000      	movs	r0, #0
 800877e:	e7e0      	b.n	8008742 <_raise_r+0x12>

08008780 <raise>:
 8008780:	4b02      	ldr	r3, [pc, #8]	; (800878c <raise+0xc>)
 8008782:	4601      	mov	r1, r0
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	f7ff bfd3 	b.w	8008730 <_raise_r>
 800878a:	bf00      	nop
 800878c:	2000000c 	.word	0x2000000c

08008790 <_kill_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	2300      	movs	r3, #0
 8008794:	4c06      	ldr	r4, [pc, #24]	; (80087b0 <_kill_r+0x20>)
 8008796:	4605      	mov	r5, r0
 8008798:	4608      	mov	r0, r1
 800879a:	4611      	mov	r1, r2
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	f7fa fcba 	bl	8003116 <_kill>
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	d102      	bne.n	80087ac <_kill_r+0x1c>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	b103      	cbz	r3, 80087ac <_kill_r+0x1c>
 80087aa:	602b      	str	r3, [r5, #0]
 80087ac:	bd38      	pop	{r3, r4, r5, pc}
 80087ae:	bf00      	nop
 80087b0:	20000684 	.word	0x20000684

080087b4 <_getpid_r>:
 80087b4:	f7fa bca8 	b.w	8003108 <_getpid>

080087b8 <_vsniprintf_r>:
 80087b8:	b530      	push	{r4, r5, lr}
 80087ba:	1e14      	subs	r4, r2, #0
 80087bc:	4605      	mov	r5, r0
 80087be:	b09b      	sub	sp, #108	; 0x6c
 80087c0:	4618      	mov	r0, r3
 80087c2:	da05      	bge.n	80087d0 <_vsniprintf_r+0x18>
 80087c4:	238b      	movs	r3, #139	; 0x8b
 80087c6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ca:	602b      	str	r3, [r5, #0]
 80087cc:	b01b      	add	sp, #108	; 0x6c
 80087ce:	bd30      	pop	{r4, r5, pc}
 80087d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80087d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80087d8:	bf0c      	ite	eq
 80087da:	4623      	moveq	r3, r4
 80087dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80087e0:	9302      	str	r3, [sp, #8]
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087e8:	9100      	str	r1, [sp, #0]
 80087ea:	9104      	str	r1, [sp, #16]
 80087ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 80087f0:	4602      	mov	r2, r0
 80087f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80087f4:	4669      	mov	r1, sp
 80087f6:	4628      	mov	r0, r5
 80087f8:	f000 f874 	bl	80088e4 <_svfiprintf_r>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	bfbc      	itt	lt
 8008800:	238b      	movlt	r3, #139	; 0x8b
 8008802:	602b      	strlt	r3, [r5, #0]
 8008804:	2c00      	cmp	r4, #0
 8008806:	d0e1      	beq.n	80087cc <_vsniprintf_r+0x14>
 8008808:	2200      	movs	r2, #0
 800880a:	9b00      	ldr	r3, [sp, #0]
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	e7dd      	b.n	80087cc <_vsniprintf_r+0x14>

08008810 <vsniprintf>:
 8008810:	b507      	push	{r0, r1, r2, lr}
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4613      	mov	r3, r2
 8008816:	460a      	mov	r2, r1
 8008818:	4601      	mov	r1, r0
 800881a:	4803      	ldr	r0, [pc, #12]	; (8008828 <vsniprintf+0x18>)
 800881c:	6800      	ldr	r0, [r0, #0]
 800881e:	f7ff ffcb 	bl	80087b8 <_vsniprintf_r>
 8008822:	b003      	add	sp, #12
 8008824:	f85d fb04 	ldr.w	pc, [sp], #4
 8008828:	2000000c 	.word	0x2000000c

0800882c <__malloc_lock>:
 800882c:	4770      	bx	lr

0800882e <__malloc_unlock>:
 800882e:	4770      	bx	lr

08008830 <__ssputs_r>:
 8008830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008834:	688e      	ldr	r6, [r1, #8]
 8008836:	4682      	mov	sl, r0
 8008838:	429e      	cmp	r6, r3
 800883a:	460c      	mov	r4, r1
 800883c:	4690      	mov	r8, r2
 800883e:	4699      	mov	r9, r3
 8008840:	d837      	bhi.n	80088b2 <__ssputs_r+0x82>
 8008842:	898a      	ldrh	r2, [r1, #12]
 8008844:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008848:	d031      	beq.n	80088ae <__ssputs_r+0x7e>
 800884a:	2302      	movs	r3, #2
 800884c:	6825      	ldr	r5, [r4, #0]
 800884e:	6909      	ldr	r1, [r1, #16]
 8008850:	1a6f      	subs	r7, r5, r1
 8008852:	6965      	ldr	r5, [r4, #20]
 8008854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008858:	fb95 f5f3 	sdiv	r5, r5, r3
 800885c:	f109 0301 	add.w	r3, r9, #1
 8008860:	443b      	add	r3, r7
 8008862:	429d      	cmp	r5, r3
 8008864:	bf38      	it	cc
 8008866:	461d      	movcc	r5, r3
 8008868:	0553      	lsls	r3, r2, #21
 800886a:	d530      	bpl.n	80088ce <__ssputs_r+0x9e>
 800886c:	4629      	mov	r1, r5
 800886e:	f7ff fef5 	bl	800865c <_malloc_r>
 8008872:	4606      	mov	r6, r0
 8008874:	b950      	cbnz	r0, 800888c <__ssputs_r+0x5c>
 8008876:	230c      	movs	r3, #12
 8008878:	f04f 30ff 	mov.w	r0, #4294967295
 800887c:	f8ca 3000 	str.w	r3, [sl]
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008886:	81a3      	strh	r3, [r4, #12]
 8008888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888c:	463a      	mov	r2, r7
 800888e:	6921      	ldr	r1, [r4, #16]
 8008890:	f7ff fe6c 	bl	800856c <memcpy>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800889a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	6126      	str	r6, [r4, #16]
 80088a2:	443e      	add	r6, r7
 80088a4:	6026      	str	r6, [r4, #0]
 80088a6:	464e      	mov	r6, r9
 80088a8:	6165      	str	r5, [r4, #20]
 80088aa:	1bed      	subs	r5, r5, r7
 80088ac:	60a5      	str	r5, [r4, #8]
 80088ae:	454e      	cmp	r6, r9
 80088b0:	d900      	bls.n	80088b4 <__ssputs_r+0x84>
 80088b2:	464e      	mov	r6, r9
 80088b4:	4632      	mov	r2, r6
 80088b6:	4641      	mov	r1, r8
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	f7ff fe62 	bl	8008582 <memmove>
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	2000      	movs	r0, #0
 80088c2:	1b9b      	subs	r3, r3, r6
 80088c4:	60a3      	str	r3, [r4, #8]
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	441e      	add	r6, r3
 80088ca:	6026      	str	r6, [r4, #0]
 80088cc:	e7dc      	b.n	8008888 <__ssputs_r+0x58>
 80088ce:	462a      	mov	r2, r5
 80088d0:	f000 fa88 	bl	8008de4 <_realloc_r>
 80088d4:	4606      	mov	r6, r0
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d1e2      	bne.n	80088a0 <__ssputs_r+0x70>
 80088da:	6921      	ldr	r1, [r4, #16]
 80088dc:	4650      	mov	r0, sl
 80088de:	f7ff fe71 	bl	80085c4 <_free_r>
 80088e2:	e7c8      	b.n	8008876 <__ssputs_r+0x46>

080088e4 <_svfiprintf_r>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	461d      	mov	r5, r3
 80088ea:	898b      	ldrh	r3, [r1, #12]
 80088ec:	b09d      	sub	sp, #116	; 0x74
 80088ee:	061f      	lsls	r7, r3, #24
 80088f0:	4680      	mov	r8, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	4616      	mov	r6, r2
 80088f6:	d50f      	bpl.n	8008918 <_svfiprintf_r+0x34>
 80088f8:	690b      	ldr	r3, [r1, #16]
 80088fa:	b96b      	cbnz	r3, 8008918 <_svfiprintf_r+0x34>
 80088fc:	2140      	movs	r1, #64	; 0x40
 80088fe:	f7ff fead 	bl	800865c <_malloc_r>
 8008902:	6020      	str	r0, [r4, #0]
 8008904:	6120      	str	r0, [r4, #16]
 8008906:	b928      	cbnz	r0, 8008914 <_svfiprintf_r+0x30>
 8008908:	230c      	movs	r3, #12
 800890a:	f8c8 3000 	str.w	r3, [r8]
 800890e:	f04f 30ff 	mov.w	r0, #4294967295
 8008912:	e0c8      	b.n	8008aa6 <_svfiprintf_r+0x1c2>
 8008914:	2340      	movs	r3, #64	; 0x40
 8008916:	6163      	str	r3, [r4, #20]
 8008918:	2300      	movs	r3, #0
 800891a:	9309      	str	r3, [sp, #36]	; 0x24
 800891c:	2320      	movs	r3, #32
 800891e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008922:	2330      	movs	r3, #48	; 0x30
 8008924:	f04f 0b01 	mov.w	fp, #1
 8008928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800892c:	9503      	str	r5, [sp, #12]
 800892e:	4637      	mov	r7, r6
 8008930:	463d      	mov	r5, r7
 8008932:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008936:	b10b      	cbz	r3, 800893c <_svfiprintf_r+0x58>
 8008938:	2b25      	cmp	r3, #37	; 0x25
 800893a:	d13e      	bne.n	80089ba <_svfiprintf_r+0xd6>
 800893c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008940:	d00b      	beq.n	800895a <_svfiprintf_r+0x76>
 8008942:	4653      	mov	r3, sl
 8008944:	4632      	mov	r2, r6
 8008946:	4621      	mov	r1, r4
 8008948:	4640      	mov	r0, r8
 800894a:	f7ff ff71 	bl	8008830 <__ssputs_r>
 800894e:	3001      	adds	r0, #1
 8008950:	f000 80a4 	beq.w	8008a9c <_svfiprintf_r+0x1b8>
 8008954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008956:	4453      	add	r3, sl
 8008958:	9309      	str	r3, [sp, #36]	; 0x24
 800895a:	783b      	ldrb	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 809d 	beq.w	8008a9c <_svfiprintf_r+0x1b8>
 8008962:	2300      	movs	r3, #0
 8008964:	f04f 32ff 	mov.w	r2, #4294967295
 8008968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800896c:	9304      	str	r3, [sp, #16]
 800896e:	9307      	str	r3, [sp, #28]
 8008970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008974:	931a      	str	r3, [sp, #104]	; 0x68
 8008976:	462f      	mov	r7, r5
 8008978:	2205      	movs	r2, #5
 800897a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800897e:	4850      	ldr	r0, [pc, #320]	; (8008ac0 <_svfiprintf_r+0x1dc>)
 8008980:	f7ff fde6 	bl	8008550 <memchr>
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	b9d0      	cbnz	r0, 80089be <_svfiprintf_r+0xda>
 8008988:	06d9      	lsls	r1, r3, #27
 800898a:	bf44      	itt	mi
 800898c:	2220      	movmi	r2, #32
 800898e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008992:	071a      	lsls	r2, r3, #28
 8008994:	bf44      	itt	mi
 8008996:	222b      	movmi	r2, #43	; 0x2b
 8008998:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800899c:	782a      	ldrb	r2, [r5, #0]
 800899e:	2a2a      	cmp	r2, #42	; 0x2a
 80089a0:	d015      	beq.n	80089ce <_svfiprintf_r+0xea>
 80089a2:	462f      	mov	r7, r5
 80089a4:	2000      	movs	r0, #0
 80089a6:	250a      	movs	r5, #10
 80089a8:	9a07      	ldr	r2, [sp, #28]
 80089aa:	4639      	mov	r1, r7
 80089ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089b0:	3b30      	subs	r3, #48	; 0x30
 80089b2:	2b09      	cmp	r3, #9
 80089b4:	d94d      	bls.n	8008a52 <_svfiprintf_r+0x16e>
 80089b6:	b1b8      	cbz	r0, 80089e8 <_svfiprintf_r+0x104>
 80089b8:	e00f      	b.n	80089da <_svfiprintf_r+0xf6>
 80089ba:	462f      	mov	r7, r5
 80089bc:	e7b8      	b.n	8008930 <_svfiprintf_r+0x4c>
 80089be:	4a40      	ldr	r2, [pc, #256]	; (8008ac0 <_svfiprintf_r+0x1dc>)
 80089c0:	463d      	mov	r5, r7
 80089c2:	1a80      	subs	r0, r0, r2
 80089c4:	fa0b f000 	lsl.w	r0, fp, r0
 80089c8:	4318      	orrs	r0, r3
 80089ca:	9004      	str	r0, [sp, #16]
 80089cc:	e7d3      	b.n	8008976 <_svfiprintf_r+0x92>
 80089ce:	9a03      	ldr	r2, [sp, #12]
 80089d0:	1d11      	adds	r1, r2, #4
 80089d2:	6812      	ldr	r2, [r2, #0]
 80089d4:	9103      	str	r1, [sp, #12]
 80089d6:	2a00      	cmp	r2, #0
 80089d8:	db01      	blt.n	80089de <_svfiprintf_r+0xfa>
 80089da:	9207      	str	r2, [sp, #28]
 80089dc:	e004      	b.n	80089e8 <_svfiprintf_r+0x104>
 80089de:	4252      	negs	r2, r2
 80089e0:	f043 0302 	orr.w	r3, r3, #2
 80089e4:	9207      	str	r2, [sp, #28]
 80089e6:	9304      	str	r3, [sp, #16]
 80089e8:	783b      	ldrb	r3, [r7, #0]
 80089ea:	2b2e      	cmp	r3, #46	; 0x2e
 80089ec:	d10c      	bne.n	8008a08 <_svfiprintf_r+0x124>
 80089ee:	787b      	ldrb	r3, [r7, #1]
 80089f0:	2b2a      	cmp	r3, #42	; 0x2a
 80089f2:	d133      	bne.n	8008a5c <_svfiprintf_r+0x178>
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	3702      	adds	r7, #2
 80089f8:	1d1a      	adds	r2, r3, #4
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	9203      	str	r2, [sp, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bfb8      	it	lt
 8008a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a06:	9305      	str	r3, [sp, #20]
 8008a08:	4d2e      	ldr	r5, [pc, #184]	; (8008ac4 <_svfiprintf_r+0x1e0>)
 8008a0a:	2203      	movs	r2, #3
 8008a0c:	7839      	ldrb	r1, [r7, #0]
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f7ff fd9e 	bl	8008550 <memchr>
 8008a14:	b138      	cbz	r0, 8008a26 <_svfiprintf_r+0x142>
 8008a16:	2340      	movs	r3, #64	; 0x40
 8008a18:	1b40      	subs	r0, r0, r5
 8008a1a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a1e:	9b04      	ldr	r3, [sp, #16]
 8008a20:	3701      	adds	r7, #1
 8008a22:	4303      	orrs	r3, r0
 8008a24:	9304      	str	r3, [sp, #16]
 8008a26:	7839      	ldrb	r1, [r7, #0]
 8008a28:	2206      	movs	r2, #6
 8008a2a:	4827      	ldr	r0, [pc, #156]	; (8008ac8 <_svfiprintf_r+0x1e4>)
 8008a2c:	1c7e      	adds	r6, r7, #1
 8008a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a32:	f7ff fd8d 	bl	8008550 <memchr>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d038      	beq.n	8008aac <_svfiprintf_r+0x1c8>
 8008a3a:	4b24      	ldr	r3, [pc, #144]	; (8008acc <_svfiprintf_r+0x1e8>)
 8008a3c:	bb13      	cbnz	r3, 8008a84 <_svfiprintf_r+0x1a0>
 8008a3e:	9b03      	ldr	r3, [sp, #12]
 8008a40:	3307      	adds	r3, #7
 8008a42:	f023 0307 	bic.w	r3, r3, #7
 8008a46:	3308      	adds	r3, #8
 8008a48:	9303      	str	r3, [sp, #12]
 8008a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4c:	444b      	add	r3, r9
 8008a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a50:	e76d      	b.n	800892e <_svfiprintf_r+0x4a>
 8008a52:	fb05 3202 	mla	r2, r5, r2, r3
 8008a56:	2001      	movs	r0, #1
 8008a58:	460f      	mov	r7, r1
 8008a5a:	e7a6      	b.n	80089aa <_svfiprintf_r+0xc6>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	250a      	movs	r5, #10
 8008a60:	4619      	mov	r1, r3
 8008a62:	3701      	adds	r7, #1
 8008a64:	9305      	str	r3, [sp, #20]
 8008a66:	4638      	mov	r0, r7
 8008a68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a6c:	3a30      	subs	r2, #48	; 0x30
 8008a6e:	2a09      	cmp	r2, #9
 8008a70:	d903      	bls.n	8008a7a <_svfiprintf_r+0x196>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0c8      	beq.n	8008a08 <_svfiprintf_r+0x124>
 8008a76:	9105      	str	r1, [sp, #20]
 8008a78:	e7c6      	b.n	8008a08 <_svfiprintf_r+0x124>
 8008a7a:	fb05 2101 	mla	r1, r5, r1, r2
 8008a7e:	2301      	movs	r3, #1
 8008a80:	4607      	mov	r7, r0
 8008a82:	e7f0      	b.n	8008a66 <_svfiprintf_r+0x182>
 8008a84:	ab03      	add	r3, sp, #12
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	4622      	mov	r2, r4
 8008a8a:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <_svfiprintf_r+0x1ec>)
 8008a8c:	a904      	add	r1, sp, #16
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f3af 8000 	nop.w
 8008a94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008a98:	4681      	mov	r9, r0
 8008a9a:	d1d6      	bne.n	8008a4a <_svfiprintf_r+0x166>
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	065b      	lsls	r3, r3, #25
 8008aa0:	f53f af35 	bmi.w	800890e <_svfiprintf_r+0x2a>
 8008aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aa6:	b01d      	add	sp, #116	; 0x74
 8008aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aac:	ab03      	add	r3, sp, #12
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	4622      	mov	r2, r4
 8008ab2:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <_svfiprintf_r+0x1ec>)
 8008ab4:	a904      	add	r1, sp, #16
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	f000 f882 	bl	8008bc0 <_printf_i>
 8008abc:	e7ea      	b.n	8008a94 <_svfiprintf_r+0x1b0>
 8008abe:	bf00      	nop
 8008ac0:	080093a4 	.word	0x080093a4
 8008ac4:	080093aa 	.word	0x080093aa
 8008ac8:	080093ae 	.word	0x080093ae
 8008acc:	00000000 	.word	0x00000000
 8008ad0:	08008831 	.word	0x08008831

08008ad4 <_printf_common>:
 8008ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad8:	4691      	mov	r9, r2
 8008ada:	461f      	mov	r7, r3
 8008adc:	688a      	ldr	r2, [r1, #8]
 8008ade:	690b      	ldr	r3, [r1, #16]
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	bfb8      	it	lt
 8008ae6:	4613      	movlt	r3, r2
 8008ae8:	f8c9 3000 	str.w	r3, [r9]
 8008aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008af0:	460c      	mov	r4, r1
 8008af2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008af6:	b112      	cbz	r2, 8008afe <_printf_common+0x2a>
 8008af8:	3301      	adds	r3, #1
 8008afa:	f8c9 3000 	str.w	r3, [r9]
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	0699      	lsls	r1, r3, #26
 8008b02:	bf42      	ittt	mi
 8008b04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b08:	3302      	addmi	r3, #2
 8008b0a:	f8c9 3000 	strmi.w	r3, [r9]
 8008b0e:	6825      	ldr	r5, [r4, #0]
 8008b10:	f015 0506 	ands.w	r5, r5, #6
 8008b14:	d107      	bne.n	8008b26 <_printf_common+0x52>
 8008b16:	f104 0a19 	add.w	sl, r4, #25
 8008b1a:	68e3      	ldr	r3, [r4, #12]
 8008b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b20:	1a9b      	subs	r3, r3, r2
 8008b22:	42ab      	cmp	r3, r5
 8008b24:	dc29      	bgt.n	8008b7a <_printf_common+0xa6>
 8008b26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b2a:	6822      	ldr	r2, [r4, #0]
 8008b2c:	3300      	adds	r3, #0
 8008b2e:	bf18      	it	ne
 8008b30:	2301      	movne	r3, #1
 8008b32:	0692      	lsls	r2, r2, #26
 8008b34:	d42e      	bmi.n	8008b94 <_printf_common+0xc0>
 8008b36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	47c0      	blx	r8
 8008b40:	3001      	adds	r0, #1
 8008b42:	d021      	beq.n	8008b88 <_printf_common+0xb4>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	68e5      	ldr	r5, [r4, #12]
 8008b48:	f003 0306 	and.w	r3, r3, #6
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	bf18      	it	ne
 8008b50:	2500      	movne	r5, #0
 8008b52:	f8d9 2000 	ldr.w	r2, [r9]
 8008b56:	f04f 0900 	mov.w	r9, #0
 8008b5a:	bf08      	it	eq
 8008b5c:	1aad      	subeq	r5, r5, r2
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	6922      	ldr	r2, [r4, #16]
 8008b62:	bf08      	it	eq
 8008b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	bfc4      	itt	gt
 8008b6c:	1a9b      	subgt	r3, r3, r2
 8008b6e:	18ed      	addgt	r5, r5, r3
 8008b70:	341a      	adds	r4, #26
 8008b72:	454d      	cmp	r5, r9
 8008b74:	d11a      	bne.n	8008bac <_printf_common+0xd8>
 8008b76:	2000      	movs	r0, #0
 8008b78:	e008      	b.n	8008b8c <_printf_common+0xb8>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4652      	mov	r2, sl
 8008b7e:	4639      	mov	r1, r7
 8008b80:	4630      	mov	r0, r6
 8008b82:	47c0      	blx	r8
 8008b84:	3001      	adds	r0, #1
 8008b86:	d103      	bne.n	8008b90 <_printf_common+0xbc>
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b90:	3501      	adds	r5, #1
 8008b92:	e7c2      	b.n	8008b1a <_printf_common+0x46>
 8008b94:	2030      	movs	r0, #48	; 0x30
 8008b96:	18e1      	adds	r1, r4, r3
 8008b98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ba2:	4422      	add	r2, r4
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008baa:	e7c4      	b.n	8008b36 <_printf_common+0x62>
 8008bac:	2301      	movs	r3, #1
 8008bae:	4622      	mov	r2, r4
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	47c0      	blx	r8
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d0e6      	beq.n	8008b88 <_printf_common+0xb4>
 8008bba:	f109 0901 	add.w	r9, r9, #1
 8008bbe:	e7d8      	b.n	8008b72 <_printf_common+0x9e>

08008bc0 <_printf_i>:
 8008bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008bc8:	460c      	mov	r4, r1
 8008bca:	7e09      	ldrb	r1, [r1, #24]
 8008bcc:	b085      	sub	sp, #20
 8008bce:	296e      	cmp	r1, #110	; 0x6e
 8008bd0:	4617      	mov	r7, r2
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	4698      	mov	r8, r3
 8008bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd8:	f000 80b3 	beq.w	8008d42 <_printf_i+0x182>
 8008bdc:	d822      	bhi.n	8008c24 <_printf_i+0x64>
 8008bde:	2963      	cmp	r1, #99	; 0x63
 8008be0:	d036      	beq.n	8008c50 <_printf_i+0x90>
 8008be2:	d80a      	bhi.n	8008bfa <_printf_i+0x3a>
 8008be4:	2900      	cmp	r1, #0
 8008be6:	f000 80b9 	beq.w	8008d5c <_printf_i+0x19c>
 8008bea:	2958      	cmp	r1, #88	; 0x58
 8008bec:	f000 8083 	beq.w	8008cf6 <_printf_i+0x136>
 8008bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bf4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008bf8:	e032      	b.n	8008c60 <_printf_i+0xa0>
 8008bfa:	2964      	cmp	r1, #100	; 0x64
 8008bfc:	d001      	beq.n	8008c02 <_printf_i+0x42>
 8008bfe:	2969      	cmp	r1, #105	; 0x69
 8008c00:	d1f6      	bne.n	8008bf0 <_printf_i+0x30>
 8008c02:	6820      	ldr	r0, [r4, #0]
 8008c04:	6813      	ldr	r3, [r2, #0]
 8008c06:	0605      	lsls	r5, r0, #24
 8008c08:	f103 0104 	add.w	r1, r3, #4
 8008c0c:	d52a      	bpl.n	8008c64 <_printf_i+0xa4>
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6011      	str	r1, [r2, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	da03      	bge.n	8008c1e <_printf_i+0x5e>
 8008c16:	222d      	movs	r2, #45	; 0x2d
 8008c18:	425b      	negs	r3, r3
 8008c1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c1e:	486f      	ldr	r0, [pc, #444]	; (8008ddc <_printf_i+0x21c>)
 8008c20:	220a      	movs	r2, #10
 8008c22:	e039      	b.n	8008c98 <_printf_i+0xd8>
 8008c24:	2973      	cmp	r1, #115	; 0x73
 8008c26:	f000 809d 	beq.w	8008d64 <_printf_i+0x1a4>
 8008c2a:	d808      	bhi.n	8008c3e <_printf_i+0x7e>
 8008c2c:	296f      	cmp	r1, #111	; 0x6f
 8008c2e:	d020      	beq.n	8008c72 <_printf_i+0xb2>
 8008c30:	2970      	cmp	r1, #112	; 0x70
 8008c32:	d1dd      	bne.n	8008bf0 <_printf_i+0x30>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	f043 0320 	orr.w	r3, r3, #32
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	e003      	b.n	8008c46 <_printf_i+0x86>
 8008c3e:	2975      	cmp	r1, #117	; 0x75
 8008c40:	d017      	beq.n	8008c72 <_printf_i+0xb2>
 8008c42:	2978      	cmp	r1, #120	; 0x78
 8008c44:	d1d4      	bne.n	8008bf0 <_printf_i+0x30>
 8008c46:	2378      	movs	r3, #120	; 0x78
 8008c48:	4865      	ldr	r0, [pc, #404]	; (8008de0 <_printf_i+0x220>)
 8008c4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c4e:	e055      	b.n	8008cfc <_printf_i+0x13c>
 8008c50:	6813      	ldr	r3, [r2, #0]
 8008c52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c56:	1d19      	adds	r1, r3, #4
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6011      	str	r1, [r2, #0]
 8008c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c60:	2301      	movs	r3, #1
 8008c62:	e08c      	b.n	8008d7e <_printf_i+0x1be>
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c6a:	6011      	str	r1, [r2, #0]
 8008c6c:	bf18      	it	ne
 8008c6e:	b21b      	sxthne	r3, r3
 8008c70:	e7cf      	b.n	8008c12 <_printf_i+0x52>
 8008c72:	6813      	ldr	r3, [r2, #0]
 8008c74:	6825      	ldr	r5, [r4, #0]
 8008c76:	1d18      	adds	r0, r3, #4
 8008c78:	6010      	str	r0, [r2, #0]
 8008c7a:	0628      	lsls	r0, r5, #24
 8008c7c:	d501      	bpl.n	8008c82 <_printf_i+0xc2>
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	e002      	b.n	8008c88 <_printf_i+0xc8>
 8008c82:	0668      	lsls	r0, r5, #25
 8008c84:	d5fb      	bpl.n	8008c7e <_printf_i+0xbe>
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	296f      	cmp	r1, #111	; 0x6f
 8008c8a:	bf14      	ite	ne
 8008c8c:	220a      	movne	r2, #10
 8008c8e:	2208      	moveq	r2, #8
 8008c90:	4852      	ldr	r0, [pc, #328]	; (8008ddc <_printf_i+0x21c>)
 8008c92:	2100      	movs	r1, #0
 8008c94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c98:	6865      	ldr	r5, [r4, #4]
 8008c9a:	2d00      	cmp	r5, #0
 8008c9c:	60a5      	str	r5, [r4, #8]
 8008c9e:	f2c0 8095 	blt.w	8008dcc <_printf_i+0x20c>
 8008ca2:	6821      	ldr	r1, [r4, #0]
 8008ca4:	f021 0104 	bic.w	r1, r1, #4
 8008ca8:	6021      	str	r1, [r4, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d13d      	bne.n	8008d2a <_printf_i+0x16a>
 8008cae:	2d00      	cmp	r5, #0
 8008cb0:	f040 808e 	bne.w	8008dd0 <_printf_i+0x210>
 8008cb4:	4665      	mov	r5, ip
 8008cb6:	2a08      	cmp	r2, #8
 8008cb8:	d10b      	bne.n	8008cd2 <_printf_i+0x112>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	07db      	lsls	r3, r3, #31
 8008cbe:	d508      	bpl.n	8008cd2 <_printf_i+0x112>
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	6862      	ldr	r2, [r4, #4]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	bfde      	ittt	le
 8008cc8:	2330      	movle	r3, #48	; 0x30
 8008cca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cd2:	ebac 0305 	sub.w	r3, ip, r5
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	f8cd 8000 	str.w	r8, [sp]
 8008cdc:	463b      	mov	r3, r7
 8008cde:	aa03      	add	r2, sp, #12
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7ff fef6 	bl	8008ad4 <_printf_common>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d14d      	bne.n	8008d88 <_printf_i+0x1c8>
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	b005      	add	sp, #20
 8008cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cf6:	4839      	ldr	r0, [pc, #228]	; (8008ddc <_printf_i+0x21c>)
 8008cf8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008cfc:	6813      	ldr	r3, [r2, #0]
 8008cfe:	6821      	ldr	r1, [r4, #0]
 8008d00:	1d1d      	adds	r5, r3, #4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6015      	str	r5, [r2, #0]
 8008d06:	060a      	lsls	r2, r1, #24
 8008d08:	d50b      	bpl.n	8008d22 <_printf_i+0x162>
 8008d0a:	07ca      	lsls	r2, r1, #31
 8008d0c:	bf44      	itt	mi
 8008d0e:	f041 0120 	orrmi.w	r1, r1, #32
 8008d12:	6021      	strmi	r1, [r4, #0]
 8008d14:	b91b      	cbnz	r3, 8008d1e <_printf_i+0x15e>
 8008d16:	6822      	ldr	r2, [r4, #0]
 8008d18:	f022 0220 	bic.w	r2, r2, #32
 8008d1c:	6022      	str	r2, [r4, #0]
 8008d1e:	2210      	movs	r2, #16
 8008d20:	e7b7      	b.n	8008c92 <_printf_i+0xd2>
 8008d22:	064d      	lsls	r5, r1, #25
 8008d24:	bf48      	it	mi
 8008d26:	b29b      	uxthmi	r3, r3
 8008d28:	e7ef      	b.n	8008d0a <_printf_i+0x14a>
 8008d2a:	4665      	mov	r5, ip
 8008d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d30:	fb02 3311 	mls	r3, r2, r1, r3
 8008d34:	5cc3      	ldrb	r3, [r0, r3]
 8008d36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d1f5      	bne.n	8008d2c <_printf_i+0x16c>
 8008d40:	e7b9      	b.n	8008cb6 <_printf_i+0xf6>
 8008d42:	6813      	ldr	r3, [r2, #0]
 8008d44:	6825      	ldr	r5, [r4, #0]
 8008d46:	1d18      	adds	r0, r3, #4
 8008d48:	6961      	ldr	r1, [r4, #20]
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	0628      	lsls	r0, r5, #24
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	d501      	bpl.n	8008d56 <_printf_i+0x196>
 8008d52:	6019      	str	r1, [r3, #0]
 8008d54:	e002      	b.n	8008d5c <_printf_i+0x19c>
 8008d56:	066a      	lsls	r2, r5, #25
 8008d58:	d5fb      	bpl.n	8008d52 <_printf_i+0x192>
 8008d5a:	8019      	strh	r1, [r3, #0]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4665      	mov	r5, ip
 8008d60:	6123      	str	r3, [r4, #16]
 8008d62:	e7b9      	b.n	8008cd8 <_printf_i+0x118>
 8008d64:	6813      	ldr	r3, [r2, #0]
 8008d66:	1d19      	adds	r1, r3, #4
 8008d68:	6011      	str	r1, [r2, #0]
 8008d6a:	681d      	ldr	r5, [r3, #0]
 8008d6c:	6862      	ldr	r2, [r4, #4]
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4628      	mov	r0, r5
 8008d72:	f7ff fbed 	bl	8008550 <memchr>
 8008d76:	b108      	cbz	r0, 8008d7c <_printf_i+0x1bc>
 8008d78:	1b40      	subs	r0, r0, r5
 8008d7a:	6060      	str	r0, [r4, #4]
 8008d7c:	6863      	ldr	r3, [r4, #4]
 8008d7e:	6123      	str	r3, [r4, #16]
 8008d80:	2300      	movs	r3, #0
 8008d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d86:	e7a7      	b.n	8008cd8 <_printf_i+0x118>
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	4630      	mov	r0, r6
 8008d90:	47c0      	blx	r8
 8008d92:	3001      	adds	r0, #1
 8008d94:	d0aa      	beq.n	8008cec <_printf_i+0x12c>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	079b      	lsls	r3, r3, #30
 8008d9a:	d413      	bmi.n	8008dc4 <_printf_i+0x204>
 8008d9c:	68e0      	ldr	r0, [r4, #12]
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	4298      	cmp	r0, r3
 8008da2:	bfb8      	it	lt
 8008da4:	4618      	movlt	r0, r3
 8008da6:	e7a3      	b.n	8008cf0 <_printf_i+0x130>
 8008da8:	2301      	movs	r3, #1
 8008daa:	464a      	mov	r2, r9
 8008dac:	4639      	mov	r1, r7
 8008dae:	4630      	mov	r0, r6
 8008db0:	47c0      	blx	r8
 8008db2:	3001      	adds	r0, #1
 8008db4:	d09a      	beq.n	8008cec <_printf_i+0x12c>
 8008db6:	3501      	adds	r5, #1
 8008db8:	68e3      	ldr	r3, [r4, #12]
 8008dba:	9a03      	ldr	r2, [sp, #12]
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	42ab      	cmp	r3, r5
 8008dc0:	dcf2      	bgt.n	8008da8 <_printf_i+0x1e8>
 8008dc2:	e7eb      	b.n	8008d9c <_printf_i+0x1dc>
 8008dc4:	2500      	movs	r5, #0
 8008dc6:	f104 0919 	add.w	r9, r4, #25
 8008dca:	e7f5      	b.n	8008db8 <_printf_i+0x1f8>
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1ac      	bne.n	8008d2a <_printf_i+0x16a>
 8008dd0:	7803      	ldrb	r3, [r0, #0]
 8008dd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dda:	e76c      	b.n	8008cb6 <_printf_i+0xf6>
 8008ddc:	080093b5 	.word	0x080093b5
 8008de0:	080093c6 	.word	0x080093c6

08008de4 <_realloc_r>:
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	4607      	mov	r7, r0
 8008de8:	4614      	mov	r4, r2
 8008dea:	460e      	mov	r6, r1
 8008dec:	b921      	cbnz	r1, 8008df8 <_realloc_r+0x14>
 8008dee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008df2:	4611      	mov	r1, r2
 8008df4:	f7ff bc32 	b.w	800865c <_malloc_r>
 8008df8:	b922      	cbnz	r2, 8008e04 <_realloc_r+0x20>
 8008dfa:	f7ff fbe3 	bl	80085c4 <_free_r>
 8008dfe:	4625      	mov	r5, r4
 8008e00:	4628      	mov	r0, r5
 8008e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e04:	f000 f814 	bl	8008e30 <_malloc_usable_size_r>
 8008e08:	42a0      	cmp	r0, r4
 8008e0a:	d20f      	bcs.n	8008e2c <_realloc_r+0x48>
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4638      	mov	r0, r7
 8008e10:	f7ff fc24 	bl	800865c <_malloc_r>
 8008e14:	4605      	mov	r5, r0
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d0f2      	beq.n	8008e00 <_realloc_r+0x1c>
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	f7ff fba5 	bl	800856c <memcpy>
 8008e22:	4631      	mov	r1, r6
 8008e24:	4638      	mov	r0, r7
 8008e26:	f7ff fbcd 	bl	80085c4 <_free_r>
 8008e2a:	e7e9      	b.n	8008e00 <_realloc_r+0x1c>
 8008e2c:	4635      	mov	r5, r6
 8008e2e:	e7e7      	b.n	8008e00 <_realloc_r+0x1c>

08008e30 <_malloc_usable_size_r>:
 8008e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e34:	1f18      	subs	r0, r3, #4
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfbc      	itt	lt
 8008e3a:	580b      	ldrlt	r3, [r1, r0]
 8008e3c:	18c0      	addlt	r0, r0, r3
 8008e3e:	4770      	bx	lr

08008e40 <_init>:
 8008e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e42:	bf00      	nop
 8008e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e46:	bc08      	pop	{r3}
 8008e48:	469e      	mov	lr, r3
 8008e4a:	4770      	bx	lr

08008e4c <_fini>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	bf00      	nop
 8008e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e52:	bc08      	pop	{r3}
 8008e54:	469e      	mov	lr, r3
 8008e56:	4770      	bx	lr

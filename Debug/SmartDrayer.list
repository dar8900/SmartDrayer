
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f8c  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc64  0800fc64  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800fc64  0800fc64  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fc64  0800fc64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc64  0800fc64  0001fc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc68  0800fc68  0001fc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800fc6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000070  0800fcdc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800fcdc  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0010f147  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000084d5  00000000  00000000  0012f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000037d0  00000000  00000000  001376b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000034f8  00000000  00000000  0013ae88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dc83  00000000  00000000  0013e380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000281d4  00000000  00000000  0015c003  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a64fe  00000000  00000000  001841d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0022a6d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001086c  00000000  00000000  0022a750  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08008cc0 	.word	0x08008cc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08008cc0 	.word	0x08008cc0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	4608      	mov	r0, r1
 8000166:	4611      	mov	r1, r2
 8000168:	461a      	mov	r2, r3
 800016a:	4603      	mov	r3, r0
 800016c:	70fb      	strb	r3, [r7, #3]
 800016e:	460b      	mov	r3, r1
 8000170:	70bb      	strb	r3, [r7, #2]
 8000172:	4613      	mov	r3, r2
 8000174:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000176:	78fa      	ldrb	r2, [r7, #3]
 8000178:	787b      	ldrb	r3, [r7, #1]
 800017a:	4413      	add	r3, r2
 800017c:	b2d8      	uxtb	r0, r3
 800017e:	78ba      	ldrb	r2, [r7, #2]
 8000180:	7e3b      	ldrb	r3, [r7, #24]
 8000182:	4413      	add	r3, r2
 8000184:	b2db      	uxtb	r3, r3
 8000186:	78ba      	ldrb	r2, [r7, #2]
 8000188:	78f9      	ldrb	r1, [r7, #3]
 800018a:	9300      	str	r3, [sp, #0]
 800018c:	4603      	mov	r3, r0
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f001 fa41 	bl	8001616 <u8g2_IsIntersection>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	f000 8095 	beq.w	80002c6 <u8g2_DrawRFrame+0x16a>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 800019c:	78fb      	ldrb	r3, [r7, #3]
 800019e:	73fb      	strb	r3, [r7, #15]
  xl += r;
 80001a0:	7bfa      	ldrb	r2, [r7, #15]
 80001a2:	7f3b      	ldrb	r3, [r7, #28]
 80001a4:	4413      	add	r3, r2
 80001a6:	73fb      	strb	r3, [r7, #15]
  yu = y;
 80001a8:	78bb      	ldrb	r3, [r7, #2]
 80001aa:	73bb      	strb	r3, [r7, #14]
  yu += r;
 80001ac:	7bba      	ldrb	r2, [r7, #14]
 80001ae:	7f3b      	ldrb	r3, [r7, #28]
 80001b0:	4413      	add	r3, r2
 80001b2:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 80001b4:	78fb      	ldrb	r3, [r7, #3]
 80001b6:	737b      	strb	r3, [r7, #13]
    xr += w;
 80001b8:	7b7a      	ldrb	r2, [r7, #13]
 80001ba:	787b      	ldrb	r3, [r7, #1]
 80001bc:	4413      	add	r3, r2
 80001be:	737b      	strb	r3, [r7, #13]
    xr -= r;
 80001c0:	7b7a      	ldrb	r2, [r7, #13]
 80001c2:	7f3b      	ldrb	r3, [r7, #28]
 80001c4:	1ad3      	subs	r3, r2, r3
 80001c6:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 80001c8:	7b7b      	ldrb	r3, [r7, #13]
 80001ca:	3b01      	subs	r3, #1
 80001cc:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 80001ce:	78bb      	ldrb	r3, [r7, #2]
 80001d0:	733b      	strb	r3, [r7, #12]
    yl += h;
 80001d2:	7b3a      	ldrb	r2, [r7, #12]
 80001d4:	7e3b      	ldrb	r3, [r7, #24]
 80001d6:	4413      	add	r3, r2
 80001d8:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 80001da:	7b3a      	ldrb	r2, [r7, #12]
 80001dc:	7f3b      	ldrb	r3, [r7, #28]
 80001de:	1ad3      	subs	r3, r2, r3
 80001e0:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 80001e2:	7b3b      	ldrb	r3, [r7, #12]
 80001e4:	3b01      	subs	r3, #1
 80001e6:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 80001e8:	7f38      	ldrb	r0, [r7, #28]
 80001ea:	7bba      	ldrb	r2, [r7, #14]
 80001ec:	7bf9      	ldrb	r1, [r7, #15]
 80001ee:	2302      	movs	r3, #2
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	4603      	mov	r3, r0
 80001f4:	6878      	ldr	r0, [r7, #4]
 80001f6:	f000 f9d0 	bl	800059a <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 80001fa:	7f38      	ldrb	r0, [r7, #28]
 80001fc:	7bba      	ldrb	r2, [r7, #14]
 80001fe:	7b79      	ldrb	r1, [r7, #13]
 8000200:	2301      	movs	r3, #1
 8000202:	9300      	str	r3, [sp, #0]
 8000204:	4603      	mov	r3, r0
 8000206:	6878      	ldr	r0, [r7, #4]
 8000208:	f000 f9c7 	bl	800059a <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 800020c:	7f38      	ldrb	r0, [r7, #28]
 800020e:	7b3a      	ldrb	r2, [r7, #12]
 8000210:	7bf9      	ldrb	r1, [r7, #15]
 8000212:	2304      	movs	r3, #4
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	4603      	mov	r3, r0
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f000 f9be 	bl	800059a <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 800021e:	7f38      	ldrb	r0, [r7, #28]
 8000220:	7b3a      	ldrb	r2, [r7, #12]
 8000222:	7b79      	ldrb	r1, [r7, #13]
 8000224:	2308      	movs	r3, #8
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	4603      	mov	r3, r0
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f9b5 	bl	800059a <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8000230:	787b      	ldrb	r3, [r7, #1]
 8000232:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8000234:	7afa      	ldrb	r2, [r7, #11]
 8000236:	7f3b      	ldrb	r3, [r7, #28]
 8000238:	1ad3      	subs	r3, r2, r3
 800023a:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 800023c:	7afa      	ldrb	r2, [r7, #11]
 800023e:	7f3b      	ldrb	r3, [r7, #28]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	72fb      	strb	r3, [r7, #11]
    hh = h;
 8000244:	7e3b      	ldrb	r3, [r7, #24]
 8000246:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8000248:	7aba      	ldrb	r2, [r7, #10]
 800024a:	7f3b      	ldrb	r3, [r7, #28]
 800024c:	1ad3      	subs	r3, r2, r3
 800024e:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8000250:	7aba      	ldrb	r2, [r7, #10]
 8000252:	7f3b      	ldrb	r3, [r7, #28]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
 800025a:	3301      	adds	r3, #1
 800025c:	73fb      	strb	r3, [r7, #15]
    yu++;
 800025e:	7bbb      	ldrb	r3, [r7, #14]
 8000260:	3301      	adds	r3, #1
 8000262:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8000264:	7afb      	ldrb	r3, [r7, #11]
 8000266:	2b02      	cmp	r3, #2
 8000268:	d914      	bls.n	8000294 <u8g2_DrawRFrame+0x138>
    {
      ww -= 2;
 800026a:	7afb      	ldrb	r3, [r7, #11]
 800026c:	3b02      	subs	r3, #2
 800026e:	72fb      	strb	r3, [r7, #11]
      h--;
 8000270:	7e3b      	ldrb	r3, [r7, #24]
 8000272:	3b01      	subs	r3, #1
 8000274:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8000276:	7afb      	ldrb	r3, [r7, #11]
 8000278:	78ba      	ldrb	r2, [r7, #2]
 800027a:	7bf9      	ldrb	r1, [r7, #15]
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f001 f91a 	bl	80014b6 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8000282:	78ba      	ldrb	r2, [r7, #2]
 8000284:	7e3b      	ldrb	r3, [r7, #24]
 8000286:	4413      	add	r3, r2
 8000288:	b2da      	uxtb	r2, r3
 800028a:	7afb      	ldrb	r3, [r7, #11]
 800028c:	7bf9      	ldrb	r1, [r7, #15]
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f001 f911 	bl	80014b6 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8000294:	7abb      	ldrb	r3, [r7, #10]
 8000296:	2b02      	cmp	r3, #2
 8000298:	d916      	bls.n	80002c8 <u8g2_DrawRFrame+0x16c>
    {
      hh -= 2;
 800029a:	7abb      	ldrb	r3, [r7, #10]
 800029c:	3b02      	subs	r3, #2
 800029e:	72bb      	strb	r3, [r7, #10]
      w--;
 80002a0:	787b      	ldrb	r3, [r7, #1]
 80002a2:	3b01      	subs	r3, #1
 80002a4:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 80002a6:	7abb      	ldrb	r3, [r7, #10]
 80002a8:	7bba      	ldrb	r2, [r7, #14]
 80002aa:	78f9      	ldrb	r1, [r7, #3]
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f001 f91c 	bl	80014ea <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 80002b2:	78fa      	ldrb	r2, [r7, #3]
 80002b4:	787b      	ldrb	r3, [r7, #1]
 80002b6:	4413      	add	r3, r2
 80002b8:	b2d9      	uxtb	r1, r3
 80002ba:	7abb      	ldrb	r3, [r7, #10]
 80002bc:	7bba      	ldrb	r2, [r7, #14]
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f001 f913 	bl	80014ea <u8g2_DrawVLine>
 80002c4:	e000      	b.n	80002c8 <u8g2_DrawRFrame+0x16c>
    return;
 80002c6:	bf00      	nop
    }
  }
}
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b084      	sub	sp, #16
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	7c1b      	ldrb	r3, [r3, #16]
 80002dc:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80002e4:	461a      	mov	r2, r3
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	fb02 f303 	mul.w	r3, r2, r3
 80002ec:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f008 fbda 	bl	8008ab6 <memset>
}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	b086      	sub	sp, #24
 800030e:	af02      	add	r7, sp, #8
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	460b      	mov	r3, r1
 8000314:	70fb      	strb	r3, [r7, #3]
 8000316:	4613      	mov	r3, r2
 8000318:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	7c1b      	ldrb	r3, [r3, #16]
 8000320:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000322:	78fb      	ldrb	r3, [r7, #3]
 8000324:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800032a:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	b29b      	uxth	r3, r3
 8000330:	89ba      	ldrh	r2, [r7, #12]
 8000332:	fb02 f303 	mul.w	r3, r2, r3
 8000336:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000338:	89bb      	ldrh	r3, [r7, #12]
 800033a:	00db      	lsls	r3, r3, #3
 800033c:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800033e:	89bb      	ldrh	r3, [r7, #12]
 8000340:	68ba      	ldr	r2, [r7, #8]
 8000342:	4413      	add	r3, r2
 8000344:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000346:	7bf9      	ldrb	r1, [r7, #15]
 8000348:	78ba      	ldrb	r2, [r7, #2]
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	460b      	mov	r3, r1
 8000350:	2100      	movs	r1, #0
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f001 ff80 	bl	8002258 <u8x8_DrawTile>
}
 8000358:	bf00      	nop
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000372:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800037a:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	7c5b      	ldrb	r3, [r3, #17]
 8000382:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000384:	7bba      	ldrb	r2, [r7, #14]
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	4619      	mov	r1, r3
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	f7ff ffbd 	bl	800030a <u8g2_send_tile_row>
    src_row++;
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	3301      	adds	r3, #1
 8000394:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000396:	7bbb      	ldrb	r3, [r7, #14]
 8000398:	3301      	adds	r3, #1
 800039a:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800039c:	7bfa      	ldrb	r2, [r7, #15]
 800039e:	7b7b      	ldrb	r3, [r7, #13]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d203      	bcs.n	80003ac <u8g2_send_buffer+0x4c>
 80003a4:	7bba      	ldrb	r2, [r7, #14]
 80003a6:	7b3b      	ldrb	r3, [r7, #12]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d3eb      	bcc.n	8000384 <u8g2_send_buffer+0x24>
}
 80003ac:	bf00      	nop
 80003ae:	3710      	adds	r7, #16
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ffcf 	bl	8000360 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f001 ff99 	bl	80022fa <u8x8_RefreshDisplay>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	4608      	mov	r0, r1
 80003da:	4611      	mov	r1, r2
 80003dc:	461a      	mov	r2, r3
 80003de:	4603      	mov	r3, r0
 80003e0:	70fb      	strb	r3, [r7, #3]
 80003e2:	460b      	mov	r3, r1
 80003e4:	70bb      	strb	r3, [r7, #2]
 80003e6:	4613      	mov	r3, r2
 80003e8:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 80003ea:	7d3b      	ldrb	r3, [r7, #20]
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d017      	beq.n	8000424 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 80003f4:	787a      	ldrb	r2, [r7, #1]
 80003f6:	78fb      	ldrb	r3, [r7, #3]
 80003f8:	4413      	add	r3, r2
 80003fa:	b2d9      	uxtb	r1, r3
 80003fc:	7c3a      	ldrb	r2, [r7, #16]
 80003fe:	78bb      	ldrb	r3, [r7, #2]
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	b2db      	uxtb	r3, r3
 8000404:	461a      	mov	r2, r3
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f001 f889 	bl	800151e <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 800040c:	787a      	ldrb	r2, [r7, #1]
 800040e:	78bb      	ldrb	r3, [r7, #2]
 8000410:	4413      	add	r3, r2
 8000412:	b2d9      	uxtb	r1, r3
 8000414:	7c3a      	ldrb	r2, [r7, #16]
 8000416:	78fb      	ldrb	r3, [r7, #3]
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	b2db      	uxtb	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f001 f87d 	bl	800151e <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8000424:	7d3b      	ldrb	r3, [r7, #20]
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d017      	beq.n	800045e <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 800042e:	787a      	ldrb	r2, [r7, #1]
 8000430:	78fb      	ldrb	r3, [r7, #3]
 8000432:	1ad3      	subs	r3, r2, r3
 8000434:	b2d9      	uxtb	r1, r3
 8000436:	7c3a      	ldrb	r2, [r7, #16]
 8000438:	78bb      	ldrb	r3, [r7, #2]
 800043a:	1ad3      	subs	r3, r2, r3
 800043c:	b2db      	uxtb	r3, r3
 800043e:	461a      	mov	r2, r3
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f001 f86c 	bl	800151e <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8000446:	787a      	ldrb	r2, [r7, #1]
 8000448:	78bb      	ldrb	r3, [r7, #2]
 800044a:	1ad3      	subs	r3, r2, r3
 800044c:	b2d9      	uxtb	r1, r3
 800044e:	7c3a      	ldrb	r2, [r7, #16]
 8000450:	78fb      	ldrb	r3, [r7, #3]
 8000452:	1ad3      	subs	r3, r2, r3
 8000454:	b2db      	uxtb	r3, r3
 8000456:	461a      	mov	r2, r3
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f001 f860 	bl	800151e <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 800045e:	7d3b      	ldrb	r3, [r7, #20]
 8000460:	f003 0308 	and.w	r3, r3, #8
 8000464:	2b00      	cmp	r3, #0
 8000466:	d017      	beq.n	8000498 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8000468:	787a      	ldrb	r2, [r7, #1]
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	4413      	add	r3, r2
 800046e:	b2d9      	uxtb	r1, r3
 8000470:	7c3a      	ldrb	r2, [r7, #16]
 8000472:	78bb      	ldrb	r3, [r7, #2]
 8000474:	4413      	add	r3, r2
 8000476:	b2db      	uxtb	r3, r3
 8000478:	461a      	mov	r2, r3
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f001 f84f 	bl	800151e <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8000480:	787a      	ldrb	r2, [r7, #1]
 8000482:	78bb      	ldrb	r3, [r7, #2]
 8000484:	4413      	add	r3, r2
 8000486:	b2d9      	uxtb	r1, r3
 8000488:	7c3a      	ldrb	r2, [r7, #16]
 800048a:	78fb      	ldrb	r3, [r7, #3]
 800048c:	4413      	add	r3, r2
 800048e:	b2db      	uxtb	r3, r3
 8000490:	461a      	mov	r2, r3
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f001 f843 	bl	800151e <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8000498:	7d3b      	ldrb	r3, [r7, #20]
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d017      	beq.n	80004d2 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 80004a2:	787a      	ldrb	r2, [r7, #1]
 80004a4:	78fb      	ldrb	r3, [r7, #3]
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	b2d9      	uxtb	r1, r3
 80004aa:	7c3a      	ldrb	r2, [r7, #16]
 80004ac:	78bb      	ldrb	r3, [r7, #2]
 80004ae:	4413      	add	r3, r2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	461a      	mov	r2, r3
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f001 f832 	bl	800151e <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 80004ba:	787a      	ldrb	r2, [r7, #1]
 80004bc:	78bb      	ldrb	r3, [r7, #2]
 80004be:	1ad3      	subs	r3, r2, r3
 80004c0:	b2d9      	uxtb	r1, r3
 80004c2:	7c3a      	ldrb	r2, [r7, #16]
 80004c4:	78fb      	ldrb	r3, [r7, #3]
 80004c6:	4413      	add	r3, r2
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	461a      	mov	r2, r3
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f001 f826 	bl	800151e <u8g2_DrawPixel>
    }
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b086      	sub	sp, #24
 80004de:	af02      	add	r7, sp, #8
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	4608      	mov	r0, r1
 80004e4:	4611      	mov	r1, r2
 80004e6:	461a      	mov	r2, r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	70fb      	strb	r3, [r7, #3]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70bb      	strb	r3, [r7, #2]
 80004f0:	4613      	mov	r3, r2
 80004f2:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 80004f8:	7bfa      	ldrb	r2, [r7, #15]
 80004fa:	787b      	ldrb	r3, [r7, #1]
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 8000502:	2301      	movs	r3, #1
 8000504:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 800050a:	7b7a      	ldrb	r2, [r7, #13]
 800050c:	787b      	ldrb	r3, [r7, #1]
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 8000514:	7b7b      	ldrb	r3, [r7, #13]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	b2db      	uxtb	r3, r3
 800051a:	737b      	strb	r3, [r7, #13]
    x = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	733b      	strb	r3, [r7, #12]
    y = rad;
 8000520:	787b      	ldrb	r3, [r7, #1]
 8000522:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8000524:	78f8      	ldrb	r0, [r7, #3]
 8000526:	7afa      	ldrb	r2, [r7, #11]
 8000528:	7b39      	ldrb	r1, [r7, #12]
 800052a:	7e3b      	ldrb	r3, [r7, #24]
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	78bb      	ldrb	r3, [r7, #2]
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	4603      	mov	r3, r0
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f7ff ff4b 	bl	80003d0 <u8g2_draw_circle_section>
    
    while ( x < y )
 800053a:	e026      	b.n	800058a <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 800053c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000540:	2b00      	cmp	r3, #0
 8000542:	db0b      	blt.n	800055c <u8g2_draw_circle+0x82>
      {
        y--;
 8000544:	7afb      	ldrb	r3, [r7, #11]
 8000546:	3b01      	subs	r3, #1
 8000548:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 800054a:	7b7b      	ldrb	r3, [r7, #13]
 800054c:	3302      	adds	r3, #2
 800054e:	b2db      	uxtb	r3, r3
 8000550:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 8000552:	7bfa      	ldrb	r2, [r7, #15]
 8000554:	7b7b      	ldrb	r3, [r7, #13]
 8000556:	4413      	add	r3, r2
 8000558:	b2db      	uxtb	r3, r3
 800055a:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 800055c:	7b3b      	ldrb	r3, [r7, #12]
 800055e:	3301      	adds	r3, #1
 8000560:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	3302      	adds	r3, #2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 800056a:	7bfa      	ldrb	r2, [r7, #15]
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	4413      	add	r3, r2
 8000570:	b2db      	uxtb	r3, r3
 8000572:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8000574:	78f8      	ldrb	r0, [r7, #3]
 8000576:	7afa      	ldrb	r2, [r7, #11]
 8000578:	7b39      	ldrb	r1, [r7, #12]
 800057a:	7e3b      	ldrb	r3, [r7, #24]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	78bb      	ldrb	r3, [r7, #2]
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	4603      	mov	r3, r0
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff ff23 	bl	80003d0 <u8g2_draw_circle_section>
    while ( x < y )
 800058a:	7b3a      	ldrb	r2, [r7, #12]
 800058c:	7afb      	ldrb	r3, [r7, #11]
 800058e:	429a      	cmp	r2, r3
 8000590:	d3d4      	bcc.n	800053c <u8g2_draw_circle+0x62>
    }
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800059a:	b590      	push	{r4, r7, lr}
 800059c:	b085      	sub	sp, #20
 800059e:	af02      	add	r7, sp, #8
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	4608      	mov	r0, r1
 80005a4:	4611      	mov	r1, r2
 80005a6:	461a      	mov	r2, r3
 80005a8:	4603      	mov	r3, r0
 80005aa:	70fb      	strb	r3, [r7, #3]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70bb      	strb	r3, [r7, #2]
 80005b0:	4613      	mov	r3, r2
 80005b2:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80005b4:	78fa      	ldrb	r2, [r7, #3]
 80005b6:	787b      	ldrb	r3, [r7, #1]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	b2d9      	uxtb	r1, r3
 80005bc:	78ba      	ldrb	r2, [r7, #2]
 80005be:	787b      	ldrb	r3, [r7, #1]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	b2d8      	uxtb	r0, r3
 80005c4:	78fa      	ldrb	r2, [r7, #3]
 80005c6:	787b      	ldrb	r3, [r7, #1]
 80005c8:	4413      	add	r3, r2
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	3301      	adds	r3, #1
 80005ce:	b2dc      	uxtb	r4, r3
 80005d0:	78ba      	ldrb	r2, [r7, #2]
 80005d2:	787b      	ldrb	r3, [r7, #1]
 80005d4:	4413      	add	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	3301      	adds	r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4623      	mov	r3, r4
 80005e0:	4602      	mov	r2, r0
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f001 f817 	bl	8001616 <u8g2_IsIntersection>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d009      	beq.n	8000602 <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 80005ee:	7878      	ldrb	r0, [r7, #1]
 80005f0:	78ba      	ldrb	r2, [r7, #2]
 80005f2:	78f9      	ldrb	r1, [r7, #3]
 80005f4:	7e3b      	ldrb	r3, [r7, #24]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	4603      	mov	r3, r0
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ff6d 	bl	80004da <u8g2_draw_circle>
 8000600:	e000      	b.n	8000604 <u8g2_DrawCircle+0x6a>
      return;
 8000602:	bf00      	nop
}
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bd90      	pop	{r4, r7, pc}
	...

0800060c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2208      	movs	r2, #8
 8000618:	701a      	strb	r2, [r3, #0]
  return buf;
 800061a:	4b03      	ldr	r3, [pc, #12]	; (8000628 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	2000008c 	.word	0x2000008c

0800062c <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af02      	add	r7, sp, #8
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 8000642:	490c      	ldr	r1, [pc, #48]	; (8000674 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 8000644:	68f8      	ldr	r0, [r7, #12]
 8000646:	f001 feb7 	bl	80023b8 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800064a:	f107 0313 	add.w	r3, r7, #19
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ffdc 	bl	800060c <u8g2_m_16_8_f>
 8000654:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000656:	7cfa      	ldrb	r2, [r7, #19]
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 800065e:	6979      	ldr	r1, [r7, #20]
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f001 f8c0 	bl	80017e6 <u8g2_SetupBuffer>
}
 8000666:	bf00      	nop
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	08001f7d 	.word	0x08001f7d
 8000674:	08002119 	.word	0x08002119
 8000678:	0800166d 	.word	0x0800166d

0800067c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	781b      	ldrb	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800069e:	b480      	push	{r7}
 80006a0:	b085      	sub	sp, #20
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	81fb      	strh	r3, [r7, #14]
    font++;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3301      	adds	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80006be:	89fb      	ldrh	r3, [r7, #14]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	89fb      	ldrh	r3, [r7, #14]
 80006cc:	4413      	add	r3, r2
 80006ce:	81fb      	strh	r3, [r7, #14]
    return pos;
 80006d0:	89fb      	ldrh	r3, [r7, #14]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80006e6:	2100      	movs	r1, #0
 80006e8:	6838      	ldr	r0, [r7, #0]
 80006ea:	f7ff ffc7 	bl	800067c <u8g2_font_get_byte>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80006f6:	2101      	movs	r1, #1
 80006f8:	6838      	ldr	r0, [r7, #0]
 80006fa:	f7ff ffbf 	bl	800067c <u8g2_font_get_byte>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000706:	2102      	movs	r1, #2
 8000708:	6838      	ldr	r0, [r7, #0]
 800070a:	f7ff ffb7 	bl	800067c <u8g2_font_get_byte>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000716:	2103      	movs	r1, #3
 8000718:	6838      	ldr	r0, [r7, #0]
 800071a:	f7ff ffaf 	bl	800067c <u8g2_font_get_byte>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000726:	2104      	movs	r1, #4
 8000728:	6838      	ldr	r0, [r7, #0]
 800072a:	f7ff ffa7 	bl	800067c <u8g2_font_get_byte>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000736:	2105      	movs	r1, #5
 8000738:	6838      	ldr	r0, [r7, #0]
 800073a:	f7ff ff9f 	bl	800067c <u8g2_font_get_byte>
 800073e:	4603      	mov	r3, r0
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000746:	2106      	movs	r1, #6
 8000748:	6838      	ldr	r0, [r7, #0]
 800074a:	f7ff ff97 	bl	800067c <u8g2_font_get_byte>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000756:	2107      	movs	r1, #7
 8000758:	6838      	ldr	r0, [r7, #0]
 800075a:	f7ff ff8f 	bl	800067c <u8g2_font_get_byte>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000766:	2108      	movs	r1, #8
 8000768:	6838      	ldr	r0, [r7, #0]
 800076a:	f7ff ff87 	bl	800067c <u8g2_font_get_byte>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000776:	2109      	movs	r1, #9
 8000778:	6838      	ldr	r0, [r7, #0]
 800077a:	f7ff ff7f 	bl	800067c <u8g2_font_get_byte>
 800077e:	4603      	mov	r3, r0
 8000780:	b25a      	sxtb	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000786:	210a      	movs	r1, #10
 8000788:	6838      	ldr	r0, [r7, #0]
 800078a:	f7ff ff77 	bl	800067c <u8g2_font_get_byte>
 800078e:	4603      	mov	r3, r0
 8000790:	b25a      	sxtb	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8000796:	210b      	movs	r1, #11
 8000798:	6838      	ldr	r0, [r7, #0]
 800079a:	f7ff ff6f 	bl	800067c <u8g2_font_get_byte>
 800079e:	4603      	mov	r3, r0
 80007a0:	b25a      	sxtb	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80007a6:	210c      	movs	r1, #12
 80007a8:	6838      	ldr	r0, [r7, #0]
 80007aa:	f7ff ff67 	bl	800067c <u8g2_font_get_byte>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b25a      	sxtb	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80007b6:	210d      	movs	r1, #13
 80007b8:	6838      	ldr	r0, [r7, #0]
 80007ba:	f7ff ff5f 	bl	800067c <u8g2_font_get_byte>
 80007be:	4603      	mov	r3, r0
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80007c6:	210e      	movs	r1, #14
 80007c8:	6838      	ldr	r0, [r7, #0]
 80007ca:	f7ff ff57 	bl	800067c <u8g2_font_get_byte>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b25a      	sxtb	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80007d6:	210f      	movs	r1, #15
 80007d8:	6838      	ldr	r0, [r7, #0]
 80007da:	f7ff ff4f 	bl	800067c <u8g2_font_get_byte>
 80007de:	4603      	mov	r3, r0
 80007e0:	b25a      	sxtb	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80007e6:	2110      	movs	r1, #16
 80007e8:	6838      	ldr	r0, [r7, #0]
 80007ea:	f7ff ff47 	bl	800067c <u8g2_font_get_byte>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b25a      	sxtb	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80007f6:	2111      	movs	r1, #17
 80007f8:	6838      	ldr	r0, [r7, #0]
 80007fa:	f7ff ff50 	bl	800069e <u8g2_font_get_word>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000806:	2113      	movs	r1, #19
 8000808:	6838      	ldr	r0, [r7, #0]
 800080a:	f7ff ff48 	bl	800069e <u8g2_font_get_word>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000816:	2115      	movs	r1, #21
 8000818:	6838      	ldr	r0, [r7, #0]
 800081a:	f7ff ff40 	bl	800069e <u8g2_font_get_word>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	82da      	strh	r2, [r3, #22]
#endif
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800082e:	b480      	push	{r7}
 8000830:	b085      	sub	sp, #20
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	460b      	mov	r3, r1
 8000838:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	7a9b      	ldrb	r3, [r3, #10]
 800083e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8000848:	7bfa      	ldrb	r2, [r7, #15]
 800084a:	7b7b      	ldrb	r3, [r7, #13]
 800084c:	fa42 f303 	asr.w	r3, r2, r3
 8000850:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8000852:	7b7b      	ldrb	r3, [r7, #13]
 8000854:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8000856:	7bba      	ldrb	r2, [r7, #14]
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	4413      	add	r3, r2
 800085c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800085e:	7bbb      	ldrb	r3, [r7, #14]
 8000860:	2b07      	cmp	r3, #7
 8000862:	d91a      	bls.n	800089a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8000864:	2308      	movs	r3, #8
 8000866:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8000868:	7b3a      	ldrb	r2, [r7, #12]
 800086a:	7b7b      	ldrb	r3, [r7, #13]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	7b3b      	ldrb	r3, [r7, #12]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	b25a      	sxtb	r2, r3
 800088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088e:	4313      	orrs	r3, r2
 8000890:	b25b      	sxtb	r3, r3
 8000892:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	3b08      	subs	r3, #8
 8000898:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800089a:	78fb      	ldrb	r3, [r7, #3]
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	4013      	ands	r3, r2
 80008ae:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7bba      	ldrb	r2, [r7, #14]
 80008b4:	729a      	strb	r2, [r3, #10]
  return val;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b084      	sub	sp, #16
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	460b      	mov	r3, r1
 80008cc:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	4619      	mov	r1, r3
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ffab 	bl	800082e <u8g2_font_decode_get_unsigned_bits>
 80008d8:	4603      	mov	r3, r0
 80008da:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80008e6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80008f2:	7bfa      	ldrb	r2, [r7, #15]
 80008f4:	7bbb      	ldrb	r3, [r7, #14]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	73fb      	strb	r3, [r7, #15]
  return v;
 80008fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8000908:	b490      	push	{r4, r7}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4604      	mov	r4, r0
 8000910:	4608      	mov	r0, r1
 8000912:	4611      	mov	r1, r2
 8000914:	461a      	mov	r2, r3
 8000916:	4623      	mov	r3, r4
 8000918:	71fb      	strb	r3, [r7, #7]
 800091a:	4603      	mov	r3, r0
 800091c:	71bb      	strb	r3, [r7, #6]
 800091e:	460b      	mov	r3, r1
 8000920:	717b      	strb	r3, [r7, #5]
 8000922:	4613      	mov	r3, r2
 8000924:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8000926:	793b      	ldrb	r3, [r7, #4]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d008      	beq.n	800093e <u8g2_add_vector_y+0x36>
 800092c:	2b02      	cmp	r3, #2
 800092e:	d00b      	beq.n	8000948 <u8g2_add_vector_y+0x40>
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10e      	bne.n	8000952 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8000934:	797a      	ldrb	r2, [r7, #5]
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	4413      	add	r3, r2
 800093a:	71fb      	strb	r3, [r7, #7]
      break;
 800093c:	e00e      	b.n	800095c <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 800093e:	79ba      	ldrb	r2, [r7, #6]
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	4413      	add	r3, r2
 8000944:	71fb      	strb	r3, [r7, #7]
      break;
 8000946:	e009      	b.n	800095c <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8000948:	797b      	ldrb	r3, [r7, #5]
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	71fb      	strb	r3, [r7, #7]
      break;
 8000950:	e004      	b.n	800095c <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	71fb      	strb	r3, [r7, #7]
      break;      
 800095a:	bf00      	nop
  }
  return dy;
 800095c:	79fb      	ldrb	r3, [r7, #7]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bc90      	pop	{r4, r7}
 8000966:	4770      	bx	lr

08000968 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8000968:	b490      	push	{r4, r7}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4604      	mov	r4, r0
 8000970:	4608      	mov	r0, r1
 8000972:	4611      	mov	r1, r2
 8000974:	461a      	mov	r2, r3
 8000976:	4623      	mov	r3, r4
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	4603      	mov	r3, r0
 800097c:	71bb      	strb	r3, [r7, #6]
 800097e:	460b      	mov	r3, r1
 8000980:	717b      	strb	r3, [r7, #5]
 8000982:	4613      	mov	r3, r2
 8000984:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8000986:	793b      	ldrb	r3, [r7, #4]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d008      	beq.n	800099e <u8g2_add_vector_x+0x36>
 800098c:	2b02      	cmp	r3, #2
 800098e:	d00b      	beq.n	80009a8 <u8g2_add_vector_x+0x40>
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10e      	bne.n	80009b2 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8000994:	79ba      	ldrb	r2, [r7, #6]
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4413      	add	r3, r2
 800099a:	71fb      	strb	r3, [r7, #7]
      break;
 800099c:	e00e      	b.n	80009bc <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 800099e:	797b      	ldrb	r3, [r7, #5]
 80009a0:	79fa      	ldrb	r2, [r7, #7]
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	71fb      	strb	r3, [r7, #7]
      break;
 80009a6:	e009      	b.n	80009bc <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	71fb      	strb	r3, [r7, #7]
      break;
 80009b0:	e004      	b.n	80009bc <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 80009b2:	797a      	ldrb	r2, [r7, #5]
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	4413      	add	r3, r2
 80009b8:	71fb      	strb	r3, [r7, #7]
      break;      
 80009ba:	bf00      	nop
  }
  return dx;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc90      	pop	{r4, r7}
 80009c6:	4770      	bx	lr

080009c8 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
 80009d4:	4613      	mov	r3, r2
 80009d6:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3354      	adds	r3, #84	; 0x54
 80009dc:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80009e8:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80009f0:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80009f8:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80009fa:	7bfa      	ldrb	r2, [r7, #15]
 80009fc:	7d7b      	ldrb	r3, [r7, #21]
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8000a06:	7dfa      	ldrb	r2, [r7, #23]
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d201      	bcs.n	8000a12 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
 8000a10:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	791b      	ldrb	r3, [r3, #4]
 8000a16:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	795b      	ldrb	r3, [r3, #5]
 8000a1c:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8000a1e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000a22:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	7b9b      	ldrb	r3, [r3, #14]
 8000a2a:	7bb8      	ldrb	r0, [r7, #14]
 8000a2c:	f7ff ff9c 	bl	8000968 <u8g2_add_vector_x>
 8000a30:	4603      	mov	r3, r0
 8000a32:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8000a34:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000a38:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	7b9b      	ldrb	r3, [r3, #14]
 8000a40:	7b78      	ldrb	r0, [r7, #13]
 8000a42:	f7ff ff61 	bl	8000908 <u8g2_add_vector_y>
 8000a46:	4603      	mov	r3, r0
 8000a48:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8000a4a:	78bb      	ldrb	r3, [r7, #2]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00f      	beq.n	8000a70 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	7b1a      	ldrb	r2, [r3, #12]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	7b9b      	ldrb	r3, [r3, #14]
 8000a5e:	7db8      	ldrb	r0, [r7, #22]
 8000a60:	7b7a      	ldrb	r2, [r7, #13]
 8000a62:	7bb9      	ldrb	r1, [r7, #14]
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	4603      	mov	r3, r0
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 fca1 	bl	80013b0 <u8g2_DrawHVLine>
 8000a6e:	e012      	b.n	8000a96 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	7adb      	ldrb	r3, [r3, #11]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10e      	bne.n	8000a96 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	7b5a      	ldrb	r2, [r3, #13]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	7b9b      	ldrb	r3, [r3, #14]
 8000a86:	7db8      	ldrb	r0, [r7, #22]
 8000a88:	7b7a      	ldrb	r2, [r7, #13]
 8000a8a:	7bb9      	ldrb	r1, [r7, #14]
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 fc8d 	bl	80013b0 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8000a96:	7dfa      	ldrb	r2, [r7, #23]
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d309      	bcc.n	8000ab2 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8000a9e:	7dfa      	ldrb	r2, [r7, #23]
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	757b      	strb	r3, [r7, #21]
    ly++;
 8000aaa:	7d3b      	ldrb	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8000ab0:	e79f      	b.n	80009f2 <u8g2_font_decode_len+0x2a>
      break;
 8000ab2:	bf00      	nop
  }
  lx += cnt;
 8000ab4:	7d7a      	ldrb	r2, [r7, #21]
 8000ab6:	7dfb      	ldrb	r3, [r7, #23]
 8000ab8:	4413      	add	r3, r2
 8000aba:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8000abc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8000ac4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	71da      	strb	r2, [r3, #7]
  
}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3354      	adds	r3, #84	; 0x54
 8000ae2:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2200      	movs	r2, #0
 8000aee:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000af6:	4619      	mov	r1, r3
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f7ff fe98 	bl	800082e <u8g2_font_decode_get_unsigned_bits>
 8000afe:	4603      	mov	r3, r0
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff fe8d 	bl	800082e <u8g2_font_decode_get_unsigned_bits>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b25a      	sxtb	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	7b1b      	ldrb	r3, [r3, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2301      	moveq	r3, #1
 8000b30:	2300      	movne	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	735a      	strb	r2, [r3, #13]
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3354      	adds	r3, #84	; 0x54
 8000b52:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8000b54:	6839      	ldr	r1, [r7, #0]
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffbc 	bl	8000ad4 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000b62:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	6938      	ldr	r0, [r7, #16]
 8000b6e:	f7ff fea8 	bl	80008c2 <u8g2_font_decode_get_signed_bits>
 8000b72:	4603      	mov	r3, r0
 8000b74:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	6938      	ldr	r0, [r7, #16]
 8000b80:	f7ff fe9f 	bl	80008c2 <u8g2_font_decode_get_signed_bits>
 8000b84:	4603      	mov	r3, r0
 8000b86:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8000b8e:	4619      	mov	r1, r3
 8000b90:	6938      	ldr	r0, [r7, #16]
 8000b92:	f7ff fe96 	bl	80008c2 <u8g2_font_decode_get_signed_bits>
 8000b96:	4603      	mov	r3, r0
 8000b98:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f340 80cf 	ble.w	8000d44 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	7918      	ldrb	r0, [r3, #4]
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	7b7b      	ldrb	r3, [r7, #13]
 8000bae:	4413      	add	r3, r2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	425b      	negs	r3, r3
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	b25a      	sxtb	r2, r3
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	7b9b      	ldrb	r3, [r3, #14]
 8000bbc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000bc0:	f7ff fed2 	bl	8000968 <u8g2_add_vector_x>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	7958      	ldrb	r0, [r3, #5]
 8000bd0:	7bfa      	ldrb	r2, [r7, #15]
 8000bd2:	7b7b      	ldrb	r3, [r7, #13]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	425b      	negs	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	b25a      	sxtb	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	7b9b      	ldrb	r3, [r3, #14]
 8000be2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000be6:	f7ff fe8f 	bl	8000908 <u8g2_add_vector_y>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	795b      	ldrb	r3, [r3, #5]
 8000bfc:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8000c02:	7d7b      	ldrb	r3, [r7, #21]
 8000c04:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	7b9b      	ldrb	r3, [r3, #14]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d852      	bhi.n	8000cb4 <u8g2_font_decode_glyph+0x170>
 8000c0e:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <u8g2_font_decode_glyph+0xd0>)
 8000c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c14:	08000c25 	.word	0x08000c25
 8000c18:	08000c3d 	.word	0x08000c3d
 8000c1c:	08000c61 	.word	0x08000c61
 8000c20:	08000c91 	.word	0x08000c91
      {
	case 0:
	    x1 += decode->glyph_width;
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	7dbb      	ldrb	r3, [r7, #22]
 8000c2e:	4413      	add	r3, r2
 8000c30:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8000c32:	7bfa      	ldrb	r2, [r7, #15]
 8000c34:	7d3b      	ldrb	r3, [r7, #20]
 8000c36:	4413      	add	r3, r2
 8000c38:	753b      	strb	r3, [r7, #20]
	    break;
 8000c3a:	e03b      	b.n	8000cb4 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	7dfa      	ldrb	r2, [r7, #23]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	3301      	adds	r3, #1
 8000c48:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8000c4a:	7dbb      	ldrb	r3, [r7, #22]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	7d3b      	ldrb	r3, [r7, #20]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	753b      	strb	r3, [r7, #20]
	    break;
 8000c5e:	e029      	b.n	8000cb4 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	7dfa      	ldrb	r2, [r7, #23]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000c6e:	7dfb      	ldrb	r3, [r7, #23]
 8000c70:	3301      	adds	r3, #1
 8000c72:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8000c74:	7dbb      	ldrb	r3, [r7, #22]
 8000c76:	3301      	adds	r3, #1
 8000c78:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	7d7a      	ldrb	r2, [r7, #21]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000c82:	7d7b      	ldrb	r3, [r7, #21]
 8000c84:	3301      	adds	r3, #1
 8000c86:	757b      	strb	r3, [r7, #21]
	    y1++;
 8000c88:	7d3b      	ldrb	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8000c8e:	e011      	b.n	8000cb4 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8000c90:	7bfa      	ldrb	r2, [r7, #15]
 8000c92:	7dbb      	ldrb	r3, [r7, #22]
 8000c94:	4413      	add	r3, r2
 8000c96:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	7d7a      	ldrb	r2, [r7, #21]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000ca6:	7d7b      	ldrb	r3, [r7, #21]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	757b      	strb	r3, [r7, #21]
	    y1++;
 8000cac:	7d3b      	ldrb	r3, [r7, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	753b      	strb	r3, [r7, #20]
	    break;	  
 8000cb2:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8000cb4:	7db8      	ldrb	r0, [r7, #22]
 8000cb6:	7d7a      	ldrb	r2, [r7, #21]
 8000cb8:	7df9      	ldrb	r1, [r7, #23]
 8000cba:	7d3b      	ldrb	r3, [r7, #20]
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 fca8 	bl	8001616 <u8g2_IsIntersection>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <u8g2_font_decode_glyph+0x18e>
	return d;
 8000ccc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000cd0:	e03a      	b.n	8000d48 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6938      	ldr	r0, [r7, #16]
 8000ce8:	f7ff fda1 	bl	800082e <u8g2_font_decode_get_unsigned_bits>
 8000cec:	4603      	mov	r3, r0
 8000cee:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	6938      	ldr	r0, [r7, #16]
 8000cfa:	f7ff fd98 	bl	800082e <u8g2_font_decode_get_unsigned_bits>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	2200      	movs	r2, #0
 8000d06:	4619      	mov	r1, r3
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fe5d 	bl	80009c8 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8000d0e:	7abb      	ldrb	r3, [r7, #10]
 8000d10:	2201      	movs	r2, #1
 8000d12:	4619      	mov	r1, r3
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff fe57 	bl	80009c8 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	6938      	ldr	r0, [r7, #16]
 8000d1e:	f7ff fd86 	bl	800082e <u8g2_font_decode_get_unsigned_bits>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1ec      	bne.n	8000d02 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000d2e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	dd00      	ble.n	8000d38 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000d36:	e7d2      	b.n	8000cde <u8g2_font_decode_glyph+0x19a>
	break;
 8000d38:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	7b1a      	ldrb	r2, [r3, #12]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8000d44:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3317      	adds	r3, #23
 8000d66:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	2bff      	cmp	r3, #255	; 0xff
 8000d6c:	d82a      	bhi.n	8000dc4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	2b60      	cmp	r3, #96	; 0x60
 8000d72:	d907      	bls.n	8000d84 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	4413      	add	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	e009      	b.n	8000d98 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	2b40      	cmp	r3, #64	; 0x40
 8000d88:	d906      	bls.n	8000d98 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8000d90:	461a      	mov	r2, r3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	4413      	add	r3, r2
 8000d96:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d04e      	beq.n	8000e40 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	887a      	ldrh	r2, [r7, #2]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d102      	bne.n	8000db4 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3302      	adds	r3, #2
 8000db2:	e049      	b.n	8000e48 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3301      	adds	r3, #1
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8000dc2:	e7e9      	b.n	8000d98 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8000dca:	461a      	mov	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	4413      	add	r3, r2
 8000dd0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	6938      	ldr	r0, [r7, #16]
 8000dda:	f7ff fc60 	bl	800069e <u8g2_font_get_word>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	4413      	add	r3, r2
 8000de6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8000de8:	2102      	movs	r1, #2
 8000dea:	6938      	ldr	r0, [r7, #16]
 8000dec:	f7ff fc57 	bl	800069e <u8g2_font_get_word>
 8000df0:	4603      	mov	r3, r0
 8000df2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	3304      	adds	r3, #4
 8000df8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8000dfa:	89fa      	ldrh	r2, [r7, #14]
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3e9      	bcc.n	8000dd6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8000e08:	89fb      	ldrh	r3, [r7, #14]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	89fb      	ldrh	r3, [r7, #14]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d010      	beq.n	8000e44 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8000e22:	89fa      	ldrh	r2, [r7, #14]
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d102      	bne.n	8000e30 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	3303      	adds	r3, #3
 8000e2e:	e00b      	b.n	8000e48 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3302      	adds	r3, #2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8000e3e:	e7e0      	b.n	8000e02 <u8g2_font_get_glyph_data+0xb2>
	break;
 8000e40:	bf00      	nop
 8000e42:	e000      	b.n	8000e46 <u8g2_font_get_glyph_data+0xf6>
	break;
 8000e44:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	4608      	mov	r0, r1
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4603      	mov	r3, r0
 8000e60:	70fb      	strb	r3, [r7, #3]
 8000e62:	460b      	mov	r3, r1
 8000e64:	70bb      	strb	r3, [r7, #2]
 8000e66:	4613      	mov	r3, r2
 8000e68:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	78fa      	ldrb	r2, [r7, #3]
 8000e72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	78ba      	ldrb	r2, [r7, #2]
 8000e7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8000e7e:	883b      	ldrh	r3, [r7, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff64 	bl	8000d50 <u8g2_font_get_glyph_data>
 8000e88:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fe56 	bl	8000b44 <u8g2_font_decode_glyph>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff4a 	bl	8000d50 <u8g2_font_get_glyph_data>
 8000ebc:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e027      	b.n	8000f18 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fe02 	bl	8000ad4 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f7ff fcef 	bl	80008c2 <u8g2_font_decode_get_signed_bits>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8000efa:	4619      	mov	r1, r3
 8000efc:	4610      	mov	r0, r2
 8000efe:	f7ff fce0 	bl	80008c2 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4610      	mov	r0, r2
 8000f12:	f7ff fcd6 	bl	80008c2 <u8g2_font_decode_get_signed_bits>
 8000f16:	4603      	mov	r3, r0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	78fa      	ldrb	r2, [r7, #3]
 8000f30:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
	...

08000f40 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	4608      	mov	r0, r1
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4603      	mov	r3, r0
 8000f50:	70fb      	strb	r3, [r7, #3]
 8000f52:	460b      	mov	r3, r1
 8000f54:	70bb      	strb	r3, [r7, #2]
 8000f56:	4613      	mov	r3, r2
 8000f58:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d833      	bhi.n	8000fcc <u8g2_DrawGlyph+0x8c>
 8000f64:	a201      	add	r2, pc, #4	; (adr r2, 8000f6c <u8g2_DrawGlyph+0x2c>)
 8000f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6a:	bf00      	nop
 8000f6c:	08000f7d 	.word	0x08000f7d
 8000f70:	08000f91 	.word	0x08000f91
 8000f74:	08000fa5 	.word	0x08000fa5
 8000f78:	08000fb9 	.word	0x08000fb9
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	4798      	blx	r3
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	78bb      	ldrb	r3, [r7, #2]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	70bb      	strb	r3, [r7, #2]
      break;
 8000f8e:	e01d      	b.n	8000fcc <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	4798      	blx	r3
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	70fb      	strb	r3, [r7, #3]
      break;
 8000fa2:	e013      	b.n	8000fcc <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	4798      	blx	r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	78bb      	ldrb	r3, [r7, #2]
 8000fb2:	1a9b      	subs	r3, r3, r2
 8000fb4:	70bb      	strb	r3, [r7, #2]
      break;
 8000fb6:	e009      	b.n	8000fcc <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	4798      	blx	r3
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	70fb      	strb	r3, [r7, #3]
      break;
 8000fca:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8000fcc:	883b      	ldrh	r3, [r7, #0]
 8000fce:	78ba      	ldrb	r2, [r7, #2]
 8000fd0:	78f9      	ldrb	r1, [r7, #3]
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff3c 	bl	8000e50 <u8g2_font_draw_glyph>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop

08000fe4 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	72fb      	strb	r3, [r7, #11]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 fec2 	bl	8001d80 <u8x8_utf8_init>
  sum = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	7812      	ldrb	r2, [r2, #0]
 8001008:	4611      	mov	r1, r2
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	4798      	blx	r3
 800100e:	4603      	mov	r3, r0
 8001010:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001012:	8abb      	ldrh	r3, [r7, #20]
 8001014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001018:	4293      	cmp	r3, r2
 800101a:	d038      	beq.n	800108e <u8g2_draw_string+0xaa>
      break;
    str++;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3301      	adds	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001022:	8abb      	ldrh	r3, [r7, #20]
 8001024:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001028:	4293      	cmp	r3, r2
 800102a:	d0e9      	beq.n	8001000 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800102c:	8abb      	ldrh	r3, [r7, #20]
 800102e:	7aba      	ldrb	r2, [r7, #10]
 8001030:	7af9      	ldrb	r1, [r7, #11]
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff ff84 	bl	8000f40 <u8g2_DrawGlyph>
 8001038:	4603      	mov	r3, r0
 800103a:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001042:	2b03      	cmp	r3, #3
 8001044:	d81e      	bhi.n	8001084 <u8g2_draw_string+0xa0>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <u8g2_draw_string+0x68>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	0800105d 	.word	0x0800105d
 8001050:	08001067 	.word	0x08001067
 8001054:	08001071 	.word	0x08001071
 8001058:	0800107b 	.word	0x0800107b
      {
	case 0:
	  x += delta;
 800105c:	7afa      	ldrb	r2, [r7, #11]
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	4413      	add	r3, r2
 8001062:	72fb      	strb	r3, [r7, #11]
	  break;
 8001064:	e00e      	b.n	8001084 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001066:	7aba      	ldrb	r2, [r7, #10]
 8001068:	7cfb      	ldrb	r3, [r7, #19]
 800106a:	4413      	add	r3, r2
 800106c:	72bb      	strb	r3, [r7, #10]
	  break;
 800106e:	e009      	b.n	8001084 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001070:	7afa      	ldrb	r2, [r7, #11]
 8001072:	7cfb      	ldrb	r3, [r7, #19]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	72fb      	strb	r3, [r7, #11]
	  break;
 8001078:	e004      	b.n	8001084 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800107a:	7aba      	ldrb	r2, [r7, #10]
 800107c:	7cfb      	ldrb	r3, [r7, #19]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	72bb      	strb	r3, [r7, #10]
	  break;
 8001082:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001084:	7dfa      	ldrb	r2, [r7, #23]
 8001086:	7cfb      	ldrb	r3, [r7, #19]
 8001088:	4413      	add	r3, r2
 800108a:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800108c:	e7b8      	b.n	8001000 <u8g2_draw_string+0x1c>
      break;
 800108e:	bf00      	nop
    }
  }
  return sum;
 8001090:	7dfb      	ldrb	r3, [r7, #23]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop

0800109c <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	72fb      	strb	r3, [r7, #11]
 80010aa:	4613      	mov	r3, r2
 80010ac:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <u8g2_DrawStr+0x30>)
 80010b2:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80010b4:	7aba      	ldrb	r2, [r7, #10]
 80010b6:	7af9      	ldrb	r1, [r7, #11]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f7ff ff92 	bl	8000fe4 <u8g2_draw_string>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	08001d9b 	.word	0x08001d9b

080010d0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d05d      	beq.n	800119c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d04d      	beq.n	800119e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001108:	2b01      	cmp	r3, #1
 800110a:	d11c      	bne.n	8001146 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8001118:	429a      	cmp	r2, r3
 800111a:	da05      	bge.n	8001128 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8001134:	429a      	cmp	r2, r3
 8001136:	dd32      	ble.n	800119e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001144:	e02b      	b.n	800119e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800114c:	461a      	mov	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001154:	4619      	mov	r1, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 800115c:	440b      	add	r3, r1
 800115e:	429a      	cmp	r2, r3
 8001160:	da0d      	bge.n	800117e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001168:	b2da      	uxtb	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4413      	add	r3, r2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b25a      	sxtb	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 800118a:	429a      	cmp	r2, r3
 800118c:	dd07      	ble.n	800119e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800119a:	e000      	b.n	800119e <u8g2_UpdateRefHeight+0xce>
    return;
 800119c:	bf00      	nop
  }  
}
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  return 0;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
	...

080011bc <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <u8g2_SetFontPosBaseline+0x18>)
 80011c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	080011a7 	.word	0x080011a7

080011d8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d00b      	beq.n	8001204 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3364      	adds	r3, #100	; 0x64
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fa6f 	bl	80006dc <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff66 	bl	80010d0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fdae 	bl	8001d80 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	4611      	mov	r1, r2
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	4798      	blx	r3
 800123a:	4603      	mov	r3, r0
 800123c:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 800123e:	89bb      	ldrh	r3, [r7, #12]
 8001240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001244:	4293      	cmp	r3, r2
 8001246:	d013      	beq.n	8001270 <u8g2_string_width+0x64>
      break;
    str++;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 800124e:	89bb      	ldrh	r3, [r7, #12]
 8001250:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001254:	4293      	cmp	r3, r2
 8001256:	d0e9      	beq.n	800122c <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8001258:	89bb      	ldrh	r3, [r7, #12]
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff fe22 	bl	8000ea6 <u8g2_GetGlyphWidth>
 8001262:	4603      	mov	r3, r0
 8001264:	73bb      	strb	r3, [r7, #14]
      w += dx;
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	4413      	add	r3, r2
 800126c:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800126e:	e7dd      	b.n	800122c <u8g2_string_width+0x20>
      break;
 8001270:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8001278:	2b00      	cmp	r3, #0
 800127a:	d011      	beq.n	80012a0 <u8g2_string_width+0x94>
  {
    w -= dx;
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 800128a:	b2da      	uxtb	r2, r3
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	4413      	add	r3, r2
 8001290:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001298:	b2da      	uxtb	r2, r3
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	4413      	add	r3, r2
 800129e:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <u8g2_GetStrWidth+0x24>)
 80012ba:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 80012bc:	6839      	ldr	r1, [r7, #0]
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffa4 	bl	800120c <u8g2_string_width>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	08001d9b 	.word	0x08001d9b

080012d4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	4611      	mov	r1, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	460b      	mov	r3, r1
 80012e4:	71fb      	strb	r3, [r7, #7]
 80012e6:	4613      	mov	r3, r2
 80012e8:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	7dbb      	ldrb	r3, [r7, #22]
 80012fa:	4413      	add	r3, r2
 80012fc:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80012fe:	7dfa      	ldrb	r2, [r7, #23]
 8001300:	7dbb      	ldrb	r3, [r7, #22]
 8001302:	429a      	cmp	r2, r3
 8001304:	d90b      	bls.n	800131e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001306:	7dfa      	ldrb	r2, [r7, #23]
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	429a      	cmp	r2, r3
 800130c:	d205      	bcs.n	800131a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800130e:	79bb      	ldrb	r3, [r7, #6]
 8001310:	75bb      	strb	r3, [r7, #22]
      b--;
 8001312:	7dbb      	ldrb	r3, [r7, #22]
 8001314:	3b01      	subs	r3, #1
 8001316:	75bb      	strb	r3, [r7, #22]
 8001318:	e001      	b.n	800131e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800131e:	7dfa      	ldrb	r2, [r7, #23]
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	429a      	cmp	r2, r3
 8001324:	d301      	bcc.n	800132a <u8g2_clip_intersection2+0x56>
    return 0;
 8001326:	2300      	movs	r3, #0
 8001328:	e01c      	b.n	8001364 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800132a:	7dba      	ldrb	r2, [r7, #22]
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	429a      	cmp	r2, r3
 8001330:	d801      	bhi.n	8001336 <u8g2_clip_intersection2+0x62>
    return 0;
 8001332:	2300      	movs	r3, #0
 8001334:	e016      	b.n	8001364 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001336:	7dfa      	ldrb	r2, [r7, #23]
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	429a      	cmp	r2, r3
 800133c:	d201      	bcs.n	8001342 <u8g2_clip_intersection2+0x6e>
    a = c;
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8001342:	7dba      	ldrb	r2, [r7, #22]
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	429a      	cmp	r2, r3
 8001348:	d901      	bls.n	800134e <u8g2_clip_intersection2+0x7a>
    b = d;
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	7dfa      	ldrb	r2, [r7, #23]
 8001352:	701a      	strb	r2, [r3, #0]
  b -= a;
 8001354:	7dba      	ldrb	r2, [r7, #22]
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	7dba      	ldrb	r2, [r7, #22]
 8001360:	701a      	strb	r2, [r3, #0]
  return 1;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800136e:	b590      	push	{r4, r7, lr}
 8001370:	b085      	sub	sp, #20
 8001372:	af02      	add	r7, sp, #8
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	4608      	mov	r0, r1
 8001378:	4611      	mov	r1, r2
 800137a:	461a      	mov	r2, r3
 800137c:	4603      	mov	r3, r0
 800137e:	70fb      	strb	r3, [r7, #3]
 8001380:	460b      	mov	r3, r1
 8001382:	70bb      	strb	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138e:	78ba      	ldrb	r2, [r7, #2]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001398:	7878      	ldrb	r0, [r7, #1]
 800139a:	78ba      	ldrb	r2, [r7, #2]
 800139c:	78f9      	ldrb	r1, [r7, #3]
 800139e:	7e3b      	ldrb	r3, [r7, #24]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4603      	mov	r3, r0
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	47a0      	blx	r4
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	4608      	mov	r0, r1
 80013ba:	4611      	mov	r1, r2
 80013bc:	461a      	mov	r2, r3
 80013be:	4603      	mov	r3, r0
 80013c0:	70fb      	strb	r3, [r7, #3]
 80013c2:	460b      	mov	r3, r1
 80013c4:	70bb      	strb	r3, [r7, #2]
 80013c6:	4613      	mov	r3, r2
 80013c8:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d06d      	beq.n	80014b0 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d06a      	beq.n	80014b0 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80013da:	787b      	ldrb	r3, [r7, #1]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d918      	bls.n	8001412 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 80013e0:	7e3b      	ldrb	r3, [r7, #24]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d109      	bne.n	80013fa <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 80013e6:	78fa      	ldrb	r2, [r7, #3]
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	70fb      	strb	r3, [r7, #3]
	  x++;
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	70fb      	strb	r3, [r7, #3]
 80013f8:	e00b      	b.n	8001412 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80013fa:	7e3b      	ldrb	r3, [r7, #24]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d108      	bne.n	8001412 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8001400:	78ba      	ldrb	r2, [r7, #2]
 8001402:	787b      	ldrb	r3, [r7, #1]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	70bb      	strb	r3, [r7, #2]
	  y++;
 800140a:	78bb      	ldrb	r3, [r7, #2]
 800140c:	3301      	adds	r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8001412:	7e3b      	ldrb	r3, [r7, #24]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 800141a:	7e3b      	ldrb	r3, [r7, #24]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d119      	bne.n	8001454 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8001426:	78bb      	ldrb	r3, [r7, #2]
 8001428:	429a      	cmp	r2, r3
 800142a:	d838      	bhi.n	800149e <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001432:	78bb      	ldrb	r3, [r7, #2]
 8001434:	429a      	cmp	r2, r3
 8001436:	d934      	bls.n	80014a2 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001444:	1c79      	adds	r1, r7, #1
 8001446:	1cf8      	adds	r0, r7, #3
 8001448:	f7ff ff44 	bl	80012d4 <u8g2_clip_intersection2>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d119      	bne.n	8001486 <u8g2_DrawHVLine+0xd6>
	  return;
 8001452:	e02d      	b.n	80014b0 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	429a      	cmp	r2, r3
 800145e:	d822      	bhi.n	80014a6 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	429a      	cmp	r2, r3
 800146a:	d91e      	bls.n	80014aa <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001478:	1c79      	adds	r1, r7, #1
 800147a:	1cb8      	adds	r0, r7, #2
 800147c:	f7ff ff2a 	bl	80012d4 <u8g2_clip_intersection2>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d013      	beq.n	80014ae <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	689c      	ldr	r4, [r3, #8]
 800148c:	78f9      	ldrb	r1, [r7, #3]
 800148e:	78ba      	ldrb	r2, [r7, #2]
 8001490:	7878      	ldrb	r0, [r7, #1]
 8001492:	7e3b      	ldrb	r3, [r7, #24]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	4603      	mov	r3, r0
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	47a0      	blx	r4
 800149c:	e008      	b.n	80014b0 <u8g2_DrawHVLine+0x100>
	  return;
 800149e:	bf00      	nop
 80014a0:	e006      	b.n	80014b0 <u8g2_DrawHVLine+0x100>
	  return;
 80014a2:	bf00      	nop
 80014a4:	e004      	b.n	80014b0 <u8g2_DrawHVLine+0x100>
	  return;
 80014a6:	bf00      	nop
 80014a8:	e002      	b.n	80014b0 <u8g2_DrawHVLine+0x100>
	  return;
 80014aa:	bf00      	nop
 80014ac:	e000      	b.n	80014b0 <u8g2_DrawHVLine+0x100>
	  return;
 80014ae:	bf00      	nop
    }
}
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}

080014b6 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af02      	add	r7, sp, #8
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	4608      	mov	r0, r1
 80014c0:	4611      	mov	r1, r2
 80014c2:	461a      	mov	r2, r3
 80014c4:	4603      	mov	r3, r0
 80014c6:	70fb      	strb	r3, [r7, #3]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70bb      	strb	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80014d0:	7878      	ldrb	r0, [r7, #1]
 80014d2:	78ba      	ldrb	r2, [r7, #2]
 80014d4:	78f9      	ldrb	r1, [r7, #3]
 80014d6:	2300      	movs	r3, #0
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	4603      	mov	r3, r0
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff67 	bl	80013b0 <u8g2_DrawHVLine>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af02      	add	r7, sp, #8
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	4608      	mov	r0, r1
 80014f4:	4611      	mov	r1, r2
 80014f6:	461a      	mov	r2, r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	70fb      	strb	r3, [r7, #3]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70bb      	strb	r3, [r7, #2]
 8001500:	4613      	mov	r3, r2
 8001502:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8001504:	7878      	ldrb	r0, [r7, #1]
 8001506:	78ba      	ldrb	r2, [r7, #2]
 8001508:	78f9      	ldrb	r1, [r7, #3]
 800150a:	2301      	movs	r3, #1
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	4603      	mov	r3, r0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff4d 	bl	80013b0 <u8g2_DrawHVLine>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af02      	add	r7, sp, #8
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	70fb      	strb	r3, [r7, #3]
 800152a:	4613      	mov	r3, r2
 800152c:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001534:	78ba      	ldrb	r2, [r7, #2]
 8001536:	429a      	cmp	r2, r3
 8001538:	d31a      	bcc.n	8001570 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001540:	78ba      	ldrb	r2, [r7, #2]
 8001542:	429a      	cmp	r2, r3
 8001544:	d216      	bcs.n	8001574 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	429a      	cmp	r2, r3
 8001550:	d312      	bcc.n	8001578 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	429a      	cmp	r2, r3
 800155c:	d20e      	bcs.n	800157c <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800155e:	78ba      	ldrb	r2, [r7, #2]
 8001560:	78f9      	ldrb	r1, [r7, #3]
 8001562:	2300      	movs	r3, #0
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff21 	bl	80013b0 <u8g2_DrawHVLine>
 800156e:	e006      	b.n	800157e <u8g2_DrawPixel+0x60>
    return;
 8001570:	bf00      	nop
 8001572:	e004      	b.n	800157e <u8g2_DrawPixel+0x60>
    return;
 8001574:	bf00      	nop
 8001576:	e002      	b.n	800157e <u8g2_DrawPixel+0x60>
    return;
 8001578:	bf00      	nop
 800157a:	e000      	b.n	800157e <u8g2_DrawPixel+0x60>
    return;
 800157c:	bf00      	nop
}
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	78fa      	ldrb	r2, [r7, #3]
 8001594:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d903      	bls.n	80015a6 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80015b0:	b490      	push	{r4, r7}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4604      	mov	r4, r0
 80015b8:	4608      	mov	r0, r1
 80015ba:	4611      	mov	r1, r2
 80015bc:	461a      	mov	r2, r3
 80015be:	4623      	mov	r3, r4
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	4603      	mov	r3, r0
 80015c4:	71bb      	strb	r3, [r7, #6]
 80015c6:	460b      	mov	r3, r1
 80015c8:	717b      	strb	r3, [r7, #5]
 80015ca:	4613      	mov	r3, r2
 80015cc:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 80015ce:	797a      	ldrb	r2, [r7, #5]
 80015d0:	79bb      	ldrb	r3, [r7, #6]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d20d      	bcs.n	80015f2 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80015d6:	793a      	ldrb	r2, [r7, #4]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d901      	bls.n	80015e2 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	e014      	b.n	800160c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80015e2:	797a      	ldrb	r2, [r7, #5]
 80015e4:	793b      	ldrb	r3, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d901      	bls.n	80015ee <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e00c      	b.n	800160c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80015f2:	793a      	ldrb	r2, [r7, #4]
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d907      	bls.n	800160a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80015fa:	797a      	ldrb	r2, [r7, #5]
 80015fc:	793b      	ldrb	r3, [r7, #4]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d901      	bls.n	8001606 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001602:	2301      	movs	r3, #1
 8001604:	e002      	b.n	800160c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800160a:	2300      	movs	r3, #0
    }
  }
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bc90      	pop	{r4, r7}
 8001614:	4770      	bx	lr

08001616 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	4608      	mov	r0, r1
 8001620:	4611      	mov	r1, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4603      	mov	r3, r0
 8001626:	70fb      	strb	r3, [r7, #3]
 8001628:	460b      	mov	r3, r1
 800162a:	70bb      	strb	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 800163c:	7c3b      	ldrb	r3, [r7, #16]
 800163e:	78ba      	ldrb	r2, [r7, #2]
 8001640:	f7ff ffb6 	bl	80015b0 <u8g2_is_intersection_decision_tree>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <u8g2_IsIntersection+0x38>
    return 0; 
 800164a:	2300      	movs	r3, #0
 800164c:	e00a      	b.n	8001664 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 800165a:	787b      	ldrb	r3, [r7, #1]
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	f7ff ffa7 	bl	80015b0 <u8g2_is_intersection_decision_tree>
 8001662:	4603      	mov	r3, r0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4603      	mov	r3, r0
 800167c:	70fb      	strb	r3, [r7, #3]
 800167e:	460b      	mov	r3, r1
 8001680:	70bb      	strb	r3, [r7, #2]
 8001682:	4613      	mov	r3, r2
 8001684:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001686:	78bb      	ldrb	r3, [r7, #2]
 8001688:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800168a:	7cfb      	ldrb	r3, [r7, #19]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8001692:	2301      	movs	r3, #1
 8001694:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8001696:	7c3a      	ldrb	r2, [r7, #16]
 8001698:	7cfb      	ldrb	r3, [r7, #19]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d801      	bhi.n	80016b6 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80016b2:	7c3b      	ldrb	r3, [r7, #16]
 80016b4:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d001      	beq.n	80016c4 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80016c0:	7c3b      	ldrb	r3, [r7, #16]
 80016c2:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80016c4:	78bb      	ldrb	r3, [r7, #2]
 80016c6:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 80016c8:	89fb      	ldrh	r3, [r7, #14]
 80016ca:	f023 0307 	bic.w	r3, r3, #7
 80016ce:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	7c1b      	ldrb	r3, [r3, #16]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	89fa      	ldrh	r2, [r7, #14]
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e4:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80016e6:	89fb      	ldrh	r3, [r7, #14]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
  ptr += x;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	4413      	add	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80016f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d117      	bne.n	800172e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	7cbb      	ldrb	r3, [r7, #18]
 8001704:	4313      	orrs	r3, r2
 8001706:	b2da      	uxtb	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	7c7b      	ldrb	r3, [r7, #17]
 8001712:	4053      	eors	r3, r2
 8001714:	b2da      	uxtb	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	701a      	strb	r2, [r3, #0]
	ptr++;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
	len--;
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	3b01      	subs	r3, #1
 8001724:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8001726:	787b      	ldrb	r3, [r7, #1]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1e8      	bne.n	80016fe <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800172c:	e039      	b.n	80017a2 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	7cbb      	ldrb	r3, [r7, #18]
 8001734:	4313      	orrs	r3, r2
 8001736:	b2da      	uxtb	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	7c7b      	ldrb	r3, [r7, #17]
 8001742:	4053      	eors	r3, r2
 8001744:	b2da      	uxtb	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800174a:	7cfb      	ldrb	r3, [r7, #19]
 800174c:	3301      	adds	r3, #1
 800174e:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	74fb      	strb	r3, [r7, #19]
      len--;
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	3b01      	subs	r3, #1
 800175c:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800175e:	7cfb      	ldrb	r3, [r7, #19]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d115      	bne.n	8001790 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800176a:	461a      	mov	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	4413      	add	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001778:	2b01      	cmp	r3, #1
 800177a:	d801      	bhi.n	8001780 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800177c:	2301      	movs	r3, #1
 800177e:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001786:	2b01      	cmp	r3, #1
 8001788:	d008      	beq.n	800179c <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800178a:	2301      	movs	r3, #1
 800178c:	747b      	strb	r3, [r7, #17]
 800178e:	e005      	b.n	800179c <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8001790:	7cbb      	ldrb	r3, [r7, #18]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8001796:	7c7b      	ldrb	r3, [r7, #17]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1c5      	bne.n	800172e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80017a2:	bf00      	nop
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	22ff      	movs	r2, #255	; 0xff
 80017c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	22ff      	movs	r2, #255	; 0xff
 80017d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7ff ffaf 	bl	80017ac <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f7ff fcb4 	bl	80011bc <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001878:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	7c1b      	ldrb	r3, [r3, #16]
 800188c:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	2b1f      	cmp	r3, #31
 8001892:	d901      	bls.n	8001898 <u8g2_update_dimension_common+0x34>
    t = 31;
 8001894:	231f      	movs	r3, #31
 8001896:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018ac:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018c2:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80018cc:	4413      	add	r3, r2
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	7c52      	ldrb	r2, [r2, #17]
 80018d2:	4293      	cmp	r3, r2
 80018d4:	dd06      	ble.n	80018e4 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	7c5a      	ldrb	r2, [r3, #17]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	4413      	add	r3, r2
 800190c:	b2da      	uxtb	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	22f0      	movs	r2, #240	; 0xf0
 8001918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	8a9b      	ldrh	r3, [r3, #20]
 8001920:	2bf0      	cmp	r3, #240	; 0xf0
 8001922:	d805      	bhi.n	8001930 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	8a9b      	ldrh	r3, [r3, #20]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	8adb      	ldrh	r3, [r3, #22]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af02      	add	r7, sp, #8
 800194c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	4603      	mov	r3, r0
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fe53 	bl	8001616 <u8g2_IsIntersection>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d104      	bne.n	8001980 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800197e:	e03b      	b.n	80019f8 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001994:	429a      	cmp	r2, r3
 8001996:	d205      	bcs.n	80019a4 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d905      	bls.n	80019c0 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d205      	bcs.n	80019dc <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d905      	bls.n	80019f8 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff2b 	bl	8001864 <u8g2_update_dimension_common>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff7b 	bl	8001946 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff feff 	bl	8001864 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	8a9b      	ldrh	r3, [r3, #20]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	8adb      	ldrh	r3, [r3, #22]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff41 	bl	8001946 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fec5 	bl	8001864 <u8g2_update_dimension_common>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d30a      	bcc.n	8001b2c <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff feff 	bl	8001946 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fe83 	bl	8001864 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	8a9b      	ldrh	r3, [r3, #20]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	8adb      	ldrh	r3, [r3, #22]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d30a      	bcc.n	8001bb8 <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff feaf 	bl	8001946 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	70fb      	strb	r3, [r7, #3]
 8001c02:	460b      	mov	r3, r1
 8001c04:	70bb      	strb	r3, [r7, #2]
 8001c06:	4613      	mov	r3, r2
 8001c08:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8001c0a:	7878      	ldrb	r0, [r7, #1]
 8001c0c:	78ba      	ldrb	r2, [r7, #2]
 8001c0e:	78f9      	ldrb	r1, [r7, #3]
 8001c10:	7c3b      	ldrb	r3, [r7, #16]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	4603      	mov	r3, r0
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fba9 	bl	800136e <u8g2_draw_hv_line_2dir>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	70fb      	strb	r3, [r7, #3]
 8001c36:	460b      	mov	r3, r1
 8001c38:	70bb      	strb	r3, [r7, #2]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c48:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	78bb      	ldrb	r3, [r7, #2]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	73fb      	strb	r3, [r7, #15]
  xx--;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8001c58:	7e3b      	ldrb	r3, [r7, #24]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8001c5e:	7e3b      	ldrb	r3, [r7, #24]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d108      	bne.n	8001c76 <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	787b      	ldrb	r3, [r7, #1]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	73fb      	strb	r3, [r7, #15]
    xx++;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8001c76:	7878      	ldrb	r0, [r7, #1]
 8001c78:	7bba      	ldrb	r2, [r7, #14]
 8001c7a:	7bf9      	ldrb	r1, [r7, #15]
 8001c7c:	7e3b      	ldrb	r3, [r7, #24]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	4603      	mov	r3, r0
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fb73 	bl	800136e <u8g2_draw_hv_line_2dir>
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	4608      	mov	r0, r1
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	70fb      	strb	r3, [r7, #3]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	70bb      	strb	r3, [r7, #2]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cb0:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8001cb2:	7bba      	ldrb	r2, [r7, #14]
 8001cb4:	78bb      	ldrb	r3, [r7, #2]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cc0:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8001cca:	7e3b      	ldrb	r3, [r7, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8001cd0:	7bbb      	ldrb	r3, [r7, #14]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e009      	b.n	8001cf4 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8001ce0:	7e3b      	ldrb	r3, [r7, #24]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d106      	bne.n	8001cf4 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8001cec:	7bba      	ldrb	r2, [r7, #14]
 8001cee:	787b      	ldrb	r3, [r7, #1]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8001cf4:	7878      	ldrb	r0, [r7, #1]
 8001cf6:	7bba      	ldrb	r2, [r7, #14]
 8001cf8:	7bf9      	ldrb	r1, [r7, #15]
 8001cfa:	7e3b      	ldrb	r3, [r7, #24]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fb34 	bl	800136e <u8g2_draw_hv_line_2dir>
}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af02      	add	r7, sp, #8
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	4608      	mov	r0, r1
 8001d18:	4611      	mov	r1, r2
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	70fb      	strb	r3, [r7, #3]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70bb      	strb	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8001d28:	78bb      	ldrb	r3, [r7, #2]
 8001d2a:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d32:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8001d3c:	7e3b      	ldrb	r3, [r7, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10c      	bne.n	8001d5c <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	787b      	ldrb	r3, [r7, #1]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	73fb      	strb	r3, [r7, #15]
    yy++;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	3301      	adds	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	763b      	strb	r3, [r7, #24]
 8001d5a:	e004      	b.n	8001d66 <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8001d66:	7878      	ldrb	r0, [r7, #1]
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	7bb9      	ldrb	r1, [r7, #14]
 8001d6c:	7e3b      	ldrb	r3, [r7, #24]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	4603      	mov	r3, r0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fafb 	bl	800136e <u8g2_draw_hv_line_2dir>
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <u8x8_ascii_next+0x18>
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	2b0a      	cmp	r3, #10
 8001db0:	d102      	bne.n	8001db8 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8001db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db6:	e001      	b.n	8001dbc <u8x8_ascii_next+0x22>
  return b;
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	b29b      	uxth	r3, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001dc6:	b590      	push	{r4, r7, lr}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691c      	ldr	r4, [r3, #16]
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	2120      	movs	r1, #32
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	47a0      	blx	r4
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}

08001dea <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001dea:	b590      	push	{r4, r7, lr}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	460b      	mov	r3, r1
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691c      	ldr	r4, [r3, #16]
 8001dfc:	7afa      	ldrb	r2, [r7, #11]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2117      	movs	r1, #23
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	47a0      	blx	r4
 8001e06:	4603      	mov	r3, r0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd90      	pop	{r4, r7, pc}

08001e10 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001e1c:	1cfb      	adds	r3, r7, #3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2101      	movs	r1, #1
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffe1 	bl	8001dea <u8x8_byte_SendBytes>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8001e32:	b590      	push	{r4, r7, lr}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68dc      	ldr	r4, [r3, #12]
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	2300      	movs	r3, #0
 8001e46:	2115      	movs	r1, #21
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	47a0      	blx	r4
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}

08001e56 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001e56:	b590      	push	{r4, r7, lr}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68dc      	ldr	r4, [r3, #12]
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2116      	movs	r1, #22
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	47a0      	blx	r4
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd90      	pop	{r4, r7, pc}

08001e7a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001e7a:	b590      	push	{r4, r7, lr}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	460b      	mov	r3, r1
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	68dc      	ldr	r4, [r3, #12]
 8001e8c:	7afa      	ldrb	r2, [r7, #11]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2117      	movs	r1, #23
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	47a0      	blx	r4
 8001e96:	4603      	mov	r3, r0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}

08001ea0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68dc      	ldr	r4, [r3, #12]
 8001eac:	2300      	movs	r3, #0
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2118      	movs	r1, #24
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	47a0      	blx	r4
 8001eb6:	4603      	mov	r3, r0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}

08001ec0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68dc      	ldr	r4, [r3, #12]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2119      	movs	r1, #25
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	47a0      	blx	r4
 8001ed6:	4603      	mov	r3, r0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd90      	pop	{r4, r7, pc}

08001ee0 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	73fb      	strb	r3, [r7, #15]
    data++;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2b17      	cmp	r3, #23
 8001efa:	d017      	beq.n	8001f2c <u8x8_cad_SendSequence+0x4c>
 8001efc:	2b17      	cmp	r3, #23
 8001efe:	dc02      	bgt.n	8001f06 <u8x8_cad_SendSequence+0x26>
 8001f00:	2b15      	cmp	r3, #21
 8001f02:	db37      	blt.n	8001f74 <u8x8_cad_SendSequence+0x94>
 8001f04:	e004      	b.n	8001f10 <u8x8_cad_SendSequence+0x30>
 8001f06:	2b19      	cmp	r3, #25
 8001f08:	dd1e      	ble.n	8001f48 <u8x8_cad_SendSequence+0x68>
 8001f0a:	2bfe      	cmp	r3, #254	; 0xfe
 8001f0c:	d024      	beq.n	8001f58 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8001f0e:	e031      	b.n	8001f74 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68dc      	ldr	r4, [r3, #12]
 8001f1a:	7bba      	ldrb	r2, [r7, #14]
 8001f1c:	7bf9      	ldrb	r1, [r7, #15]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	47a0      	blx	r4
	  data++;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	603b      	str	r3, [r7, #0]
	  break;
 8001f2a:	e022      	b.n	8001f72 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001f32:	f107 030e 	add.w	r3, r7, #14
 8001f36:	461a      	mov	r2, r3
 8001f38:	2101      	movs	r1, #1
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ff9d 	bl	8001e7a <u8x8_cad_SendData>
	  data++;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	603b      	str	r3, [r7, #0]
	  break;
 8001f46:	e014      	b.n	8001f72 <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68dc      	ldr	r4, [r3, #12]
 8001f4c:	7bf9      	ldrb	r1, [r7, #15]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2200      	movs	r2, #0
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	47a0      	blx	r4
	  break;
 8001f56:	e00c      	b.n	8001f72 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8001f5e:	7bbb      	ldrb	r3, [r7, #14]
 8001f60:	461a      	mov	r2, r3
 8001f62:	2129      	movs	r1, #41	; 0x29
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f9d7 	bl	8002318 <u8x8_gpio_call>
	  data++;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	603b      	str	r3, [r7, #0]
	  break;
 8001f70:	bf00      	nop
    cmd = *data;
 8001f72:	e7ba      	b.n	8001eea <u8x8_cad_SendSequence+0xa>
	return;
 8001f74:	bf00      	nop
    }
  }
}
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}

08001f7c <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	72fb      	strb	r3, [r7, #11]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	3b14      	subs	r3, #20
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d82f      	bhi.n	8001ff6 <u8x8_cad_001+0x7a>
 8001f96:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <u8x8_cad_001+0x20>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08001fe5 	.word	0x08001fe5
 8001fa0:	08001fb5 	.word	0x08001fb5
 8001fa4:	08001fc9 	.word	0x08001fc9
 8001fa8:	08001fdd 	.word	0x08001fdd
 8001fac:	08001fe5 	.word	0x08001fe5
 8001fb0:	08001fe5 	.word	0x08001fe5
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff ff05 	bl	8001dc6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001fbc:	7abb      	ldrb	r3, [r7, #10]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff ff25 	bl	8001e10 <u8x8_byte_SendByte>
      break;
 8001fc6:	e018      	b.n	8001ffa <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fefb 	bl	8001dc6 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001fd0:	7abb      	ldrb	r3, [r7, #10]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7ff ff1b 	bl	8001e10 <u8x8_byte_SendByte>
      break;
 8001fda:	e00e      	b.n	8001ffa <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8001fdc:	2101      	movs	r1, #1
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff fef1 	bl	8001dc6 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	691c      	ldr	r4, [r3, #16]
 8001fe8:	7aba      	ldrb	r2, [r7, #10]
 8001fea:	7af9      	ldrb	r1, [r7, #11]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	47a0      	blx	r4
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	e002      	b.n	8001ffc <u8x8_cad_001+0x80>
    default:
      return 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <u8x8_cad_001+0x80>
  }
  return 1;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bd90      	pop	{r4, r7, pc}

08002004 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	72fb      	strb	r3, [r7, #11]
 8002012:	4613      	mov	r3, r2
 8002014:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002016:	7afb      	ldrb	r3, [r7, #11]
 8002018:	2b0e      	cmp	r3, #14
 800201a:	d05f      	beq.n	80020dc <u8x8_d_st7565_common+0xd8>
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d002      	beq.n	8002026 <u8x8_d_st7565_common+0x22>
 8002020:	2b0b      	cmp	r3, #11
 8002022:	d04e      	beq.n	80020c2 <u8x8_d_st7565_common+0xbe>
 8002024:	e06c      	b.n	8002100 <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7ff ff3a 	bl	8001ea0 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	795b      	ldrb	r3, [r3, #5]
 8002030:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8002032:	7dbb      	ldrb	r3, [r7, #22]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800203e:	7dbb      	ldrb	r3, [r7, #22]
 8002040:	4413      	add	r3, r2
 8002042:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002044:	7dbb      	ldrb	r3, [r7, #22]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f043 0310 	orr.w	r3, r3, #16
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4619      	mov	r1, r3
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f7ff feed 	bl	8001e32 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002058:	7dbb      	ldrb	r3, [r7, #22]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	b2db      	uxtb	r3, r3
 8002060:	4619      	mov	r1, r3
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff fee5 	bl	8001e32 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	799b      	ldrb	r3, [r3, #6]
 800206c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4619      	mov	r1, r3
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff fedc 	bl	8001e32 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	791b      	ldrb	r3, [r3, #4]
 800207e:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 800208c:	7dfa      	ldrb	r2, [r7, #23]
 800208e:	7dbb      	ldrb	r3, [r7, #22]
 8002090:	4413      	add	r3, r2
 8002092:	2b84      	cmp	r3, #132	; 0x84
 8002094:	d905      	bls.n	80020a2 <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 8002096:	2384      	movs	r3, #132	; 0x84
 8002098:	75fb      	strb	r3, [r7, #23]
	c -= x;
 800209a:	7dfa      	ldrb	r2, [r7, #23]
 800209c:	7dbb      	ldrb	r3, [r7, #22]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4619      	mov	r1, r3
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f7ff fee6 	bl	8001e7a <u8x8_cad_SendData>
	arg_int--;
 80020ae:	7abb      	ldrb	r3, [r7, #10]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80020b4:	7abb      	ldrb	r3, [r7, #10]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f3      	bne.n	80020a2 <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff ff00 	bl	8001ec0 <u8x8_cad_EndTransfer>
      break;
 80020c0:	e020      	b.n	8002104 <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80020c2:	7abb      	ldrb	r3, [r7, #10]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d104      	bne.n	80020d2 <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 80020c8:	4911      	ldr	r1, [pc, #68]	; (8002110 <u8x8_d_st7565_common+0x10c>)
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7ff ff08 	bl	8001ee0 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 80020d0:	e018      	b.n	8002104 <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 80020d2:	4910      	ldr	r1, [pc, #64]	; (8002114 <u8x8_d_st7565_common+0x110>)
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7ff ff03 	bl	8001ee0 <u8x8_cad_SendSequence>
      break;
 80020da:	e013      	b.n	8002104 <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff fedf 	bl	8001ea0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80020e2:	2181      	movs	r1, #129	; 0x81
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff fea4 	bl	8001e32 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 80020ea:	7abb      	ldrb	r3, [r7, #10]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	4619      	mov	r1, r3
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff feaf 	bl	8001e56 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7ff fee1 	bl	8001ec0 <u8x8_cad_EndTransfer>
      break;
 80020fe:	e001      	b.n	8002104 <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <u8x8_d_st7565_common+0x102>
  }
  return 1;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	0800fac0 	.word	0x0800fac0
 8002114:	0800fac8 	.word	0x0800fac8

08002118 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	72fb      	strb	r3, [r7, #11]
 8002126:	4613      	mov	r3, r2
 8002128:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 800212a:	7aba      	ldrb	r2, [r7, #10]
 800212c:	7af9      	ldrb	r1, [r7, #11]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff ff67 	bl	8002004 <u8x8_d_st7565_common>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d12e      	bne.n	800219a <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	2b0a      	cmp	r3, #10
 8002140:	d008      	beq.n	8002154 <u8x8_d_st7565_nhd_c12864+0x3c>
 8002142:	2b0d      	cmp	r3, #13
 8002144:	d00e      	beq.n	8002164 <u8x8_d_st7565_nhd_c12864+0x4c>
 8002146:	2b09      	cmp	r3, #9
 8002148:	d125      	bne.n	8002196 <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 800214a:	4917      	ldr	r1, [pc, #92]	; (80021a8 <u8x8_d_st7565_nhd_c12864+0x90>)
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f833 	bl	80021b8 <u8x8_d_helper_display_setup_memory>
	break;
 8002152:	e023      	b.n	800219c <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f842 	bl	80021de <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 800215a:	4914      	ldr	r1, [pc, #80]	; (80021ac <u8x8_d_st7565_nhd_c12864+0x94>)
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f7ff febf 	bl	8001ee0 <u8x8_cad_SendSequence>
	break;
 8002162:	e01b      	b.n	800219c <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8002164:	7abb      	ldrb	r3, [r7, #10]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10a      	bne.n	8002180 <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 800216a:	4911      	ldr	r1, [pc, #68]	; (80021b0 <u8x8_d_st7565_nhd_c12864+0x98>)
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7ff feb7 	bl	8001ee0 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	7c9a      	ldrb	r2, [r3, #18]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 800217e:	e00d      	b.n	800219c <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002180:	490c      	ldr	r1, [pc, #48]	; (80021b4 <u8x8_d_st7565_nhd_c12864+0x9c>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f7ff feac 	bl	8001ee0 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	7cda      	ldrb	r2, [r3, #19]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8002194:	e002      	b.n	800219c <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 8002196:	2300      	movs	r3, #0
 8002198:	e001      	b.n	800219e <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 800219a:	bf00      	nop
  return 1;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	0800fae0 	.word	0x0800fae0
 80021ac:	0800faf8 	.word	0x0800faf8
 80021b0:	0800fad0 	.word	0x0800fad0
 80021b4:	0800fad8 	.word	0x0800fad8

080021b8 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	7c9a      	ldrb	r2, [r3, #18]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80021de:	b590      	push	{r4, r7, lr}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695c      	ldr	r4, [r3, #20]
 80021ea:	2300      	movs	r3, #0
 80021ec:	2200      	movs	r2, #0
 80021ee:	2128      	movs	r1, #40	; 0x28
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68dc      	ldr	r4, [r3, #12]
 80021f8:	2300      	movs	r3, #0
 80021fa:	2200      	movs	r2, #0
 80021fc:	2114      	movs	r1, #20
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002202:	2201      	movs	r2, #1
 8002204:	214b      	movs	r1, #75	; 0x4b
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f886 	bl	8002318 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	791b      	ldrb	r3, [r3, #4]
 8002212:	461a      	mov	r2, r3
 8002214:	2129      	movs	r1, #41	; 0x29
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f87e 	bl	8002318 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	214b      	movs	r1, #75	; 0x4b
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f879 	bl	8002318 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	791b      	ldrb	r3, [r3, #4]
 800222c:	461a      	mov	r2, r3
 800222e:	2129      	movs	r1, #41	; 0x29
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f871 	bl	8002318 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002236:	2201      	movs	r2, #1
 8002238:	214b      	movs	r1, #75	; 0x4b
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f86c 	bl	8002318 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	795b      	ldrb	r3, [r3, #5]
 8002246:	461a      	mov	r2, r3
 8002248:	2129      	movs	r1, #41	; 0x29
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f864 	bl	8002318 <u8x8_gpio_call>
}    
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bd90      	pop	{r4, r7, pc}

08002258 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	4608      	mov	r0, r1
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4603      	mov	r3, r0
 8002268:	70fb      	strb	r3, [r7, #3]
 800226a:	460b      	mov	r3, r1
 800226c:	70bb      	strb	r3, [r7, #2]
 800226e:	4613      	mov	r3, r2
 8002270:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002276:	78bb      	ldrb	r3, [r7, #2]
 8002278:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800227a:	787b      	ldrb	r3, [r7, #1]
 800227c:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689c      	ldr	r4, [r3, #8]
 8002286:	f107 0308 	add.w	r3, r7, #8
 800228a:	2201      	movs	r2, #1
 800228c:	210f      	movs	r1, #15
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	47a0      	blx	r4
 8002292:	4603      	mov	r3, r0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}

0800229c <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689c      	ldr	r4, [r3, #8]
 80022a8:	2300      	movs	r3, #0
 80022aa:	2200      	movs	r2, #0
 80022ac:	2109      	movs	r1, #9
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	47a0      	blx	r4
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}

080022ba <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80022ba:	b590      	push	{r4, r7, lr}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689c      	ldr	r4, [r3, #8]
 80022c6:	2300      	movs	r3, #0
 80022c8:	2200      	movs	r2, #0
 80022ca:	210a      	movs	r1, #10
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	47a0      	blx	r4
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd90      	pop	{r4, r7, pc}

080022d8 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689c      	ldr	r4, [r3, #8]
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	2300      	movs	r3, #0
 80022ec:	210b      	movs	r1, #11
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	47a0      	blx	r4
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd90      	pop	{r4, r7, pc}

080022fa <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80022fa:	b590      	push	{r4, r7, lr}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689c      	ldr	r4, [r3, #8]
 8002306:	2300      	movs	r3, #0
 8002308:	2200      	movs	r2, #0
 800230a:	2110      	movs	r1, #16
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	47a0      	blx	r4
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bd90      	pop	{r4, r7, pc}

08002318 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
 8002324:	4613      	mov	r3, r2
 8002326:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695c      	ldr	r4, [r3, #20]
 800232c:	78ba      	ldrb	r2, [r7, #2]
 800232e:	78f9      	ldrb	r1, [r7, #3]
 8002330:	2300      	movs	r3, #0
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	47a0      	blx	r4
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bd90      	pop	{r4, r7, pc}

0800233e <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	72fb      	strb	r3, [r7, #11]
 800234c:	4613      	mov	r3, r2
 800234e:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <u8x8_SetupDefaults+0x58>)
 800236e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <u8x8_SetupDefaults+0x58>)
 8002374:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <u8x8_SetupDefaults+0x58>)
 800237a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <u8x8_SetupDefaults+0x58>)
 8002380:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	22ff      	movs	r2, #255	; 0xff
 80023a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	0800233f 	.word	0x0800233f

080023b8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff ffc8 	bl	800235c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff ff59 	bl	800229c <u8x8_SetupMemory>
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70fb      	strb	r3, [r7, #3]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	741a      	strb	r2, [r3, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	745a      	strb	r2, [r3, #17]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d802      	bhi.n	8002434 <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	701a      	strb	r2, [r3, #0]
}
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d031      	beq.n	80024b8 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d826      	bhi.n	80024aa <_ZN11ChronoTimer8setTimerEm+0x6a>
 800245c:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <_ZN11ChronoTimer8setTimerEm+0x24>)
 800245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002462:	bf00      	nop
 8002464:	08002475 	.word	0x08002475
 8002468:	0800247d 	.word	0x0800247d
 800246c:	0800248d 	.word	0x0800248d
 8002470:	0800249d 	.word	0x0800249d
		{
		case MILLIS:
			timeDelay = SetDelay;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	605a      	str	r2, [r3, #4]
			break;
 800247a:	e017      	b.n	80024ac <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002482:	fb02 f203 	mul.w	r2, r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	605a      	str	r2, [r3, #4]
			break;
 800248a:	e00f      	b.n	80024ac <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002492:	fb02 f203 	mul.w	r2, r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	605a      	str	r2, [r3, #4]
			break;
 800249a:	e007      	b.n	80024ac <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <_ZN11ChronoTimer8setTimerEm+0x84>)
 80024a0:	fb02 f203 	mul.w	r2, r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	605a      	str	r2, [r3, #4]
			break;
 80024a8:	e000      	b.n	80024ac <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 80024aa:	bf00      	nop
		}
		isSetted = true;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	609a      	str	r2, [r3, #8]
	}

}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	0036ee80 	.word	0x0036ee80

080024c8 <_ZN10DS1307_RTCC1Ev>:
{
	memset(i2cBuffer, 0x00, BUFFER_LEN);
	i2cBufferIndex = 0;
}

DS1307_RTC::DS1307_RTC()
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8002506:	68b8      	ldr	r0, [r7, #8]
 8002508:	f000 f83e 	bl	8002588 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800251e:	2300      	movs	r3, #0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8002524:	4817      	ldr	r0, [pc, #92]	; (8002584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8002526:	f005 ffb6 	bl	8008496 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	68b8      	ldr	r0, [r7, #8]
 800252e:	f000 f843 	bl	80025b8 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8002532:	4603      	mov	r3, r0
 8002534:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b0f      	cmp	r3, #15
 800253a:	d910      	bls.n	800255e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	4619      	mov	r1, r3
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f005 ffdb 	bl	8008500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800254a:	4603      	mov	r3, r0
 800254c:	4619      	mov	r1, r3
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f005 ffcb 	bl	80084ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	4619      	mov	r1, r3
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f005 ffca 	bl	80084f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f005 ffc5 	bl	80084ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8002564:	4603      	mov	r3, r0
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f006 f817 	bl	800859e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	4619      	mov	r1, r3
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f005 ffbe 	bl	80084f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	08008cf8 	.word	0x08008cf8

08002588 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80025b8:	b5b0      	push	{r4, r5, r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80025c2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ffed 	bl	80025a6 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 80025cc:	462a      	mov	r2, r5
 80025ce:	6839      	ldr	r1, [r7, #0]
 80025d0:	4620      	mov	r0, r4
 80025d2:	f000 f805 	bl	80025e0 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80025d6:	4603      	mov	r3, r0
    }
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bdb0      	pop	{r4, r5, r7, pc}

080025e0 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
    }
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <_Z7DelayNsm>:
#include "tim.h"



void DelayNs(uint32_t NsDelay)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	d801      	bhi.n	800260e <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 800260a:	2310      	movs	r3, #16
 800260c:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <_Z7DelayNsm+0x3c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <_Z7DelayNsm+0x3c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	bf8c      	ite	hi
 8002622:	2301      	movhi	r3, #1
 8002624:	2300      	movls	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d000      	beq.n	800262e <_Z7DelayNsm+0x32>
 800262c:	e7f3      	b.n	8002616 <_Z7DelayNsm+0x1a>
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	2000057c 	.word	0x2000057c

0800263c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	72fb      	strb	r3, [r7, #11]
 800264a:	4613      	mov	r3, r2
 800264c:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 800264e:	7afb      	ldrb	r3, [r7, #11]
 8002650:	3b28      	subs	r3, #40	; 0x28
 8002652:	2b23      	cmp	r3, #35	; 0x23
 8002654:	d86b      	bhi.n	800272e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 8002656:	a201      	add	r2, pc, #4	; (adr r2, 800265c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	08002739 	.word	0x08002739
 8002660:	080026fb 	.word	0x080026fb
 8002664:	080026f1 	.word	0x080026f1
 8002668:	080026ed 	.word	0x080026ed
 800266c:	08002739 	.word	0x08002739
 8002670:	0800272f 	.word	0x0800272f
 8002674:	0800272f 	.word	0x0800272f
 8002678:	0800272f 	.word	0x0800272f
 800267c:	0800272f 	.word	0x0800272f
 8002680:	0800272f 	.word	0x0800272f
 8002684:	0800272f 	.word	0x0800272f
 8002688:	0800272f 	.word	0x0800272f
 800268c:	0800272f 	.word	0x0800272f
 8002690:	0800272f 	.word	0x0800272f
 8002694:	0800272f 	.word	0x0800272f
 8002698:	0800272f 	.word	0x0800272f
 800269c:	0800272f 	.word	0x0800272f
 80026a0:	0800272f 	.word	0x0800272f
 80026a4:	0800272f 	.word	0x0800272f
 80026a8:	0800272f 	.word	0x0800272f
 80026ac:	0800272f 	.word	0x0800272f
 80026b0:	0800272f 	.word	0x0800272f
 80026b4:	0800272f 	.word	0x0800272f
 80026b8:	0800272f 	.word	0x0800272f
 80026bc:	0800272f 	.word	0x0800272f
 80026c0:	0800272f 	.word	0x0800272f
 80026c4:	0800272f 	.word	0x0800272f
 80026c8:	0800272f 	.word	0x0800272f
 80026cc:	0800272f 	.word	0x0800272f
 80026d0:	0800272f 	.word	0x0800272f
 80026d4:	0800272f 	.word	0x0800272f
 80026d8:	0800272f 	.word	0x0800272f
 80026dc:	0800272f 	.word	0x0800272f
 80026e0:	08002705 	.word	0x08002705
 80026e4:	08002713 	.word	0x08002713
 80026e8:	08002721 	.word	0x08002721
	case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
//		DelayNs(arg_int);
		break;
	case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
//		DelayNs(arg_int);
		__NOP();
 80026ec:	bf00      	nop
		break;
 80026ee:	e024      	b.n	800273a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		//Function which delays 10us
	case U8X8_MSG_DELAY_10MICRO:
		DelayNs(10000);
 80026f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80026f4:	f7ff ff82 	bl	80025fc <_Z7DelayNsm>
//		for (uint16_t n = 0; n < 320; n++)
//		{
//			__NOP();
//		}
		break;
 80026f8:	e01f      	b.n	800273a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
	case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
		HAL_Delay(arg_int);
 80026fa:	7abb      	ldrb	r3, [r7, #10]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 fa8d 	bl	8004c1c <HAL_Delay>
		break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 8002702:	e01a      	b.n	800273a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
//	case U8X8_MSG_GPIO_SPI_DATA:
//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
//		break;
	case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
		HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8002704:	7abb      	ldrb	r3, [r7, #10]
 8002706:	461a      	mov	r2, r3
 8002708:	2108      	movs	r1, #8
 800270a:	480e      	ldr	r0, [pc, #56]	; (8002744 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800270c:	f003 fa3a 	bl	8005b84 <HAL_GPIO_WritePin>
		break;
 8002710:	e013      	b.n	800273a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
	case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
		HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 8002712:	7abb      	ldrb	r3, [r7, #10]
 8002714:	461a      	mov	r2, r3
 8002716:	2110      	movs	r1, #16
 8002718:	480a      	ldr	r0, [pc, #40]	; (8002744 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800271a:	f003 fa33 	bl	8005b84 <HAL_GPIO_WritePin>
		break;
 800271e:	e00c      	b.n	800273a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
	case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
		HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 8002720:	7abb      	ldrb	r3, [r7, #10]
 8002722:	461a      	mov	r2, r3
 8002724:	2140      	movs	r1, #64	; 0x40
 8002726:	4807      	ldr	r0, [pc, #28]	; (8002744 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8002728:	f003 fa2c 	bl	8005b84 <HAL_GPIO_WritePin>
		break;
 800272c:	e005      	b.n	800273a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
	default:
		u8x8_SetGPIOResult(u8x8, 1);			// default return value
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 8002736:	e000      	b.n	800273a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		break;							// can be used to setup pins
 8002738:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 800273a:	2301      	movs	r3, #1
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40010800 	.word	0x40010800

08002748 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	72fb      	strb	r3, [r7, #11]
 8002756:	4613      	mov	r3, r2
 8002758:	72bb      	strb	r3, [r7, #10]
//	uint8_t byte;
//	uint8_t *data;
	switch(msg)
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	3b14      	subs	r3, #20
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d848      	bhi.n	80027f4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 8002762:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	080027ad 	.word	0x080027ad
 800276c:	080027f5 	.word	0x080027f5
 8002770:	080027f5 	.word	0x080027f5
 8002774:	0800279d 	.word	0x0800279d
 8002778:	080027cd 	.word	0x080027cd
 800277c:	080027e1 	.word	0x080027e1
 8002780:	080027f5 	.word	0x080027f5
 8002784:	080027f5 	.word	0x080027f5
 8002788:	080027f5 	.word	0x080027f5
 800278c:	080027f5 	.word	0x080027f5
 8002790:	080027f5 	.word	0x080027f5
 8002794:	080027f5 	.word	0x080027f5
 8002798:	080027bf 	.word	0x080027bf
//			byte = *data;
//			data++;
//			arg_int--;
//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
//		}
		HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 800279c:	7abb      	ldrb	r3, [r7, #10]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	230a      	movs	r3, #10
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4817      	ldr	r0, [pc, #92]	; (8002804 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 80027a6:	f004 fba7 	bl	8006ef8 <HAL_SPI_Transmit>
		break;
 80027aa:	e025      	b.n	80027f8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
	case U8X8_MSG_BYTE_INIT:
		u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	785b      	ldrb	r3, [r3, #1]
 80027b2:	461a      	mov	r2, r3
 80027b4:	2149      	movs	r1, #73	; 0x49
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f7ff fdae 	bl	8002318 <u8x8_gpio_call>
		break;
 80027bc:	e01c      	b.n	80027f8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
	case U8X8_MSG_BYTE_SET_DC:
		u8x8_gpio_SetDC(u8g2, arg_int);
 80027be:	7abb      	ldrb	r3, [r7, #10]
 80027c0:	461a      	mov	r2, r3
 80027c2:	214a      	movs	r1, #74	; 0x4a
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff fda7 	bl	8002318 <u8x8_gpio_call>
		break;
 80027ca:	e015      	b.n	80027f8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
	case U8X8_MSG_BYTE_START_TRANSFER:
		u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	2149      	movs	r1, #73	; 0x49
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff fd9e 	bl	8002318 <u8x8_gpio_call>
		__NOP();
 80027dc:	bf00      	nop
//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
		break;
 80027de:	e00b      	b.n	80027f8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
		__NOP();
 80027e0:	bf00      	nop
		u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	461a      	mov	r2, r3
 80027ea:	2149      	movs	r1, #73	; 0x49
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff fd93 	bl	8002318 <u8x8_gpio_call>
		break;
 80027f2:	e001      	b.n	80027f8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
	default:
		return 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 80027f8:	2301      	movs	r3, #1
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000524 	.word	0x20000524

08002808 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	f005 ff34 	bl	8008680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 8002824:	b5b0      	push	{r4, r5, r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	70fb      	strb	r3, [r7, #3]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3304      	adds	r3, #4
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ffe7 	bl	8002808 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <_ZN13NHDST7565_LCDC1Eh+0x44>)
 800283e:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8002842:	4615      	mov	r5, r2
 8002844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800284c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002850:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	4619      	mov	r1, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f807 	bl	800286c <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bdb0      	pop	{r4, r5, r7, pc}
 8002868:	08008d24 	.word	0x08008d24

0800286c <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	709a      	strb	r2, [r3, #2]
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	789b      	ldrb	r3, [r3, #2]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d003      	beq.n	800288e <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x22>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	789b      	ldrb	r3, [r3, #2]
 800288a:	2b03      	cmp	r3, #3
 800288c:	d106      	bne.n	800289c <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x30>
	{
		dispParams.width = 64;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2240      	movs	r2, #64	; 0x40
 8002892:	701a      	strb	r2, [r3, #0]
		dispParams.high = 128;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	705a      	strb	r2, [r3, #1]
 800289a:	e005      	b.n	80028a8 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3c>
	}
	else
	{
		dispParams.width = 128;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	701a      	strb	r2, [r3, #0]
		dispParams.high = 64;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2240      	movs	r2, #64	; 0x40
 80028a6:	705a      	strb	r2, [r3, #1]
	}
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
	...

080028b4 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>:


void NHDST7565_LCD::assignTextParams(String Text, const uint8_t *Font)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
	textToWrite.textLen = 0;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	771a      	strb	r2, [r3, #28]
	textToWrite.textHigh = 0;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	775a      	strb	r2, [r3, #29]
	textToWrite.text = "";
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3304      	adds	r3, #4
 80028d0:	4922      	ldr	r1, [pc, #136]	; (800295c <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xa8>)
 80028d2:	4618      	mov	r0, r3
 80028d4:	f005 ff8b 	bl	80087ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textFont = Font;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	621a      	str	r2, [r3, #32]
//	if(textToWrite.textFont != Font)
//	{
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f7fe fc74 	bl	80011d8 <u8g2_SetFont>
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	775a      	strb	r2, [r3, #29]
//	}
	if(Text != "")
 80028fc:	4917      	ldr	r1, [pc, #92]	; (800295c <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xa8>)
 80028fe:	68b8      	ldr	r0, [r7, #8]
 8002900:	f000 fb26 	bl	8002f50 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00e      	beq.n	8002928 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x74>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002910:	68b8      	ldr	r0, [r7, #8]
 8002912:	f005 ff70 	bl	80087f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002916:	4603      	mov	r3, r0
 8002918:	4619      	mov	r1, r3
 800291a:	4620      	mov	r0, r4
 800291c:	f7fe fcc6 	bl	80012ac <u8g2_GetStrWidth>
 8002920:	4603      	mov	r3, r0
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	771a      	strb	r2, [r3, #28]

	if(textToWrite.textLen < dispParams.width)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	7f1a      	ldrb	r2, [r3, #28]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d206      	bcs.n	8002942 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x8e>
	{
		textToWrite.text = Text;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3304      	adds	r3, #4
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f005 fec7 	bl	80086ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	else
	{
		textToWrite.textFont = u8g2_font_5x8_mf;
		textToWrite.text = "STRING ERROR!";
	}
}
 8002940:	e008      	b.n	8002954 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xa0>
		textToWrite.textFont = u8g2_font_5x8_mf;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4a06      	ldr	r2, [pc, #24]	; (8002960 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xac>)
 8002946:	621a      	str	r2, [r3, #32]
		textToWrite.text = "STRING ERROR!";
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3304      	adds	r3, #4
 800294c:	4905      	ldr	r1, [pc, #20]	; (8002964 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xb0>)
 800294e:	4618      	mov	r0, r3
 8002950:	f005 ff4d 	bl	80087ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	08008d50 	.word	0x08008d50
 8002960:	08009db0 	.word	0x08009db0
 8002964:	08008d54 	.word	0x08008d54

08002968 <_ZN13NHDST7565_LCD8setupLcdEv>:


void NHDST7565_LCD::setupLcd()
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	789b      	ldrb	r3, [r3, #2]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d817      	bhi.n	80029a8 <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 8002978:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	08002991 	.word	0x08002991
 8002984:	08002997 	.word	0x08002997
 8002988:	0800299d 	.word	0x0800299d
 800298c:	080029a3 	.word	0x080029a3
	{
	case LANDSCAPE_1:
		DisplayRotation = &u8g2_cb_r2;
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <_ZN13NHDST7565_LCD8setupLcdEv+0x88>)
 8002992:	60fb      	str	r3, [r7, #12]
		break;
 8002994:	e00b      	b.n	80029ae <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
	case LANDSCAPE_2:
		DisplayRotation = &u8g2_cb_r0;
 8002996:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <_ZN13NHDST7565_LCD8setupLcdEv+0x8c>)
 8002998:	60fb      	str	r3, [r7, #12]
		break;
 800299a:	e008      	b.n	80029ae <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
	case VERTICAL_1:
		DisplayRotation = &u8g2_cb_r1;
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <_ZN13NHDST7565_LCD8setupLcdEv+0x90>)
 800299e:	60fb      	str	r3, [r7, #12]
		break;
 80029a0:	e005      	b.n	80029ae <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
	case VERTICAL_2:
		DisplayRotation = &u8g2_cb_r3;
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <_ZN13NHDST7565_LCD8setupLcdEv+0x94>)
 80029a4:	60fb      	str	r3, [r7, #12]
		break;
 80029a6:	e002      	b.n	80029ae <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
	default:
		DisplayRotation = &u8g2_cb_r0;
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <_ZN13NHDST7565_LCD8setupLcdEv+0x8c>)
 80029aa:	60fb      	str	r3, [r7, #12]
		break;
 80029ac:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <_ZN13NHDST7565_LCD8setupLcdEv+0x98>)
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	f7fd fe37 	bl	800062c <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3324      	adds	r3, #36	; 0x24
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fc79 	bl	80022ba <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3324      	adds	r3, #36	; 0x24
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fc82 	bl	80022d8 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3324      	adds	r3, #36	; 0x24
 80029d8:	2101      	movs	r1, #1
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe faa0 	bl	8000f20 <u8g2_SetFontMode>
	clearScreen();
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f89c 	bl	8002b1e <_ZN13NHDST7565_LCD11clearScreenEv>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	0800faa8 	.word	0x0800faa8
 80029f4:	0800fa90 	.word	0x0800fa90
 80029f8:	0800fa9c 	.word	0x0800fa9c
 80029fc:	0800fab4 	.word	0x0800fab4
 8002a00:	0800263d 	.word	0x0800263d
 8002a04:	08002749 	.word	0x08002749

08002a08 <_ZN13NHDST7565_LCD11setTextLeftEv>:


uint8_t NHDST7565_LCD::setTextLeft()
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
	//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <_ZN13NHDST7565_LCD13setTextCenterEv>:

uint8_t NHDST7565_LCD::setTextCenter()
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen) / 2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7f1b      	ldrb	r3, [r3, #28]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	0fda      	lsrs	r2, r3, #31
 8002a3a:	4413      	add	r3, r2
 8002a3c:	105b      	asrs	r3, r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <_ZN13NHDST7565_LCD12setTextRightEv>:

uint8_t NHDST7565_LCD::setTextRight()
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7f1b      	ldrb	r3, [r3, #28]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <_ZN13NHDST7565_LCD10setTextTopEv>:

uint8_t NHDST7565_LCD::setTextTop()
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
	NewPos = textToWrite.textHigh + 1;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7f5b      	ldrb	r3, [r3, #29]
 8002a80:	3301      	adds	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <_ZN13NHDST7565_LCD13setTextMiddleEv>:

uint8_t NHDST7565_LCD::setTextMiddle()
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
	NewPos = ((dispParams.high - textToWrite.textHigh + 1) / 2) + (textToWrite.textHigh / 2);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	785b      	ldrb	r3, [r3, #1]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7f5b      	ldrb	r3, [r3, #29]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	0fda      	lsrs	r2, r3, #31
 8002aac:	4413      	add	r3, r2
 8002aae:	105b      	asrs	r3, r3, #1
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	7f5b      	ldrb	r3, [r3, #29]
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <_ZN13NHDST7565_LCD13setTextBottomEv>:

uint8_t NHDST7565_LCD::setTextBottom()
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	73fb      	strb	r3, [r7, #15]
//	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	NewPos = dispParams.high - 1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	785b      	ldrb	r3, [r3, #1]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <_ZN13NHDST7565_LCD16clearFrameBufferEv>:

void NHDST7565_LCD::clearFrameBuffer()
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3324      	adds	r3, #36	; 0x24
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fbe9 	bl	80002ce <u8g2_ClearBuffer>
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3324      	adds	r3, #36	; 0x24
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fc4f 	bl	80003b4 <u8g2_SendBuffer>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ffdf 	bl	8002aea <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ffe9 	bl	8002b04 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>:
		u8g2_DrawDisc(&U8G2_Display, x, y, r, U8G2_DRAW_ALL);
	u8g2_SetDrawColor(&U8G2_Display, 0);
}

void NHDST7565_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos, const uint8_t *u8g2Font)
{
 8002b3a:	b590      	push	{r4, r7, lr}
 8002b3c:	b08d      	sub	sp, #52	; 0x34
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	4611      	mov	r1, r2
 8002b46:	461a      	mov	r2, r3
 8002b48:	460b      	mov	r3, r1
 8002b4a:	71fb      	strb	r3, [r7, #7]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71bb      	strb	r3, [r7, #6]
	uint8_t NewXPos = 0, NewYPos = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002b56:	2300      	movs	r3, #0
 8002b58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	assignTextParams(Text, u8g2Font);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f005 fe5c 	bl	8008820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b6e:	4619      	mov	r1, r3
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f7ff fe9f 	bl	80028b4 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f005 fda1 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	if(XPos <= dispParams.width && YPos <= dispParams.high)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	79fa      	ldrb	r2, [r7, #7]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d80b      	bhi.n	8002ba2 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x68>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	785b      	ldrb	r3, [r3, #1]
 8002b8e:	79ba      	ldrb	r2, [r7, #6]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d806      	bhi.n	8002ba2 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x68>
	{
		NewXPos = XPos;
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		NewYPos = YPos;
 8002b9a:	79bb      	ldrb	r3, [r7, #6]
 8002b9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002ba0:	e0a7      	b.n	8002cf2 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x1b8>
	}
	else if(XPos > dispParams.width && YPos <= dispParams.high)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	79fa      	ldrb	r2, [r7, #7]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d92b      	bls.n	8002c04 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0xca>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	785b      	ldrb	r3, [r3, #1]
 8002bb0:	79ba      	ldrb	r2, [r7, #6]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d826      	bhi.n	8002c04 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0xca>
	{
		NewYPos = YPos;
 8002bb6:	79bb      	ldrb	r3, [r7, #6]
 8002bb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		switch(XPos)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	2b83      	cmp	r3, #131	; 0x83
 8002bc0:	d00a      	beq.n	8002bd8 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x9e>
 8002bc2:	2b84      	cmp	r3, #132	; 0x84
 8002bc4:	d00f      	beq.n	8002be6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0xac>
 8002bc6:	2b82      	cmp	r3, #130	; 0x82
 8002bc8:	d114      	bne.n	8002bf4 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0xba>
		{
		case LEFT_POS:
			NewXPos = setTextLeft();
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f7ff ff1c 	bl	8002a08 <_ZN13NHDST7565_LCD11setTextLeftEv>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002bd6:	e014      	b.n	8002c02 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0xc8>
		case CENTER_POS:
			NewXPos = setTextCenter();
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff ff21 	bl	8002a20 <_ZN13NHDST7565_LCD13setTextCenterEv>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002be4:	e00d      	b.n	8002c02 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0xc8>
		case RIGHT_POS:
			NewXPos = setTextRight();
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff ff30 	bl	8002a4c <_ZN13NHDST7565_LCD12setTextRightEv>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002bf2:	e006      	b.n	8002c02 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0xc8>
		default:
			NewXPos = setTextCenter();
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7ff ff13 	bl	8002a20 <_ZN13NHDST7565_LCD13setTextCenterEv>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002c00:	bf00      	nop
	else if(XPos > dispParams.width && YPos <= dispParams.high)
 8002c02:	e076      	b.n	8002cf2 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x1b8>
		}
	}
	else if(XPos <= dispParams.width && YPos > dispParams.high)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	79fa      	ldrb	r2, [r7, #7]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d82b      	bhi.n	8002c66 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x12c>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	79ba      	ldrb	r2, [r7, #6]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d926      	bls.n	8002c66 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x12c>
	{
		NewXPos = XPos;
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		switch(YPos)
 8002c1e:	79bb      	ldrb	r3, [r7, #6]
 8002c20:	2b47      	cmp	r3, #71	; 0x47
 8002c22:	d00a      	beq.n	8002c3a <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x100>
 8002c24:	2b48      	cmp	r3, #72	; 0x48
 8002c26:	d00f      	beq.n	8002c48 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x10e>
 8002c28:	2b46      	cmp	r3, #70	; 0x46
 8002c2a:	d114      	bne.n	8002c56 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x11c>
		{
		case TOP_POS:
			NewYPos = setTextTop();
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff ff1f 	bl	8002a70 <_ZN13NHDST7565_LCD10setTextTopEv>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c38:	e014      	b.n	8002c64 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x12a>
		case MIDDLE_POS:
			NewYPos = setTextMiddle();
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7ff ff28 	bl	8002a90 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c46:	e00d      	b.n	8002c64 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x12a>
		case BOTTOM_POS:
			NewYPos = setTextBottom();
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff ff3e 	bl	8002aca <_ZN13NHDST7565_LCD13setTextBottomEv>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c54:	e006      	b.n	8002c64 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x12a>
		default:
			NewYPos = setTextMiddle();
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7ff ff1a 	bl	8002a90 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c62:	bf00      	nop
	else if(XPos <= dispParams.width && YPos > dispParams.high)
 8002c64:	e045      	b.n	8002cf2 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x1b8>
		}
	}
	else
	{
		switch(XPos)
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	2b83      	cmp	r3, #131	; 0x83
 8002c6a:	d00a      	beq.n	8002c82 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x148>
 8002c6c:	2b84      	cmp	r3, #132	; 0x84
 8002c6e:	d00f      	beq.n	8002c90 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x156>
 8002c70:	2b82      	cmp	r3, #130	; 0x82
 8002c72:	d114      	bne.n	8002c9e <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x164>
		{
		case LEFT_POS:
			NewXPos = setTextLeft();
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff fec7 	bl	8002a08 <_ZN13NHDST7565_LCD11setTextLeftEv>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002c80:	e014      	b.n	8002cac <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x172>
		case CENTER_POS:
			NewXPos = setTextCenter();
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff fecc 	bl	8002a20 <_ZN13NHDST7565_LCD13setTextCenterEv>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002c8e:	e00d      	b.n	8002cac <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x172>
		case RIGHT_POS:
			NewXPos = setTextRight();
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7ff fedb 	bl	8002a4c <_ZN13NHDST7565_LCD12setTextRightEv>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002c9c:	e006      	b.n	8002cac <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x172>
		default:
			NewXPos = setTextCenter();
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7ff febe 	bl	8002a20 <_ZN13NHDST7565_LCD13setTextCenterEv>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002caa:	bf00      	nop
		}
		switch(YPos)
 8002cac:	79bb      	ldrb	r3, [r7, #6]
 8002cae:	2b47      	cmp	r3, #71	; 0x47
 8002cb0:	d00a      	beq.n	8002cc8 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x18e>
 8002cb2:	2b48      	cmp	r3, #72	; 0x48
 8002cb4:	d00f      	beq.n	8002cd6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x19c>
 8002cb6:	2b46      	cmp	r3, #70	; 0x46
 8002cb8:	d114      	bne.n	8002ce4 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x1aa>
		{
		case TOP_POS:
			NewYPos = setTextTop();
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f7ff fed8 	bl	8002a70 <_ZN13NHDST7565_LCD10setTextTopEv>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002cc6:	e014      	b.n	8002cf2 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x1b8>
		case MIDDLE_POS:
			NewYPos = setTextMiddle();
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff fee1 	bl	8002a90 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002cd4:	e00d      	b.n	8002cf2 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x1b8>
		case BOTTOM_POS:
			NewYPos = setTextBottom();
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff fef7 	bl	8002aca <_ZN13NHDST7565_LCD13setTextBottomEv>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002ce2:	e006      	b.n	8002cf2 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh+0x1b8>
		default:
			NewYPos = setTextMiddle();
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff fed3 	bl	8002a90 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002cf0:	bf00      	nop
		}
	}

	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos, textToWrite.text.c_str());
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f005 fd7a 	bl	80087f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002d08:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7fe f9c5 	bl	800109c <u8g2_DrawStr>
}
 8002d12:	bf00      	nop
 8002d14:	3734      	adds	r7, #52	; 0x34
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd90      	pop	{r4, r7, pc}
	...

08002d1c <_ZN13NHDST7565_LCD12drawMenuListEhhhhRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEPKh>:
	}
}

uint8_t NHDST7565_LCD::drawMenuList(uint8_t FirstItemXPos, uint8_t FirstItemYPos, uint8_t FirsListItem,
		uint8_t ItemSel, StrVector &MenuItems, const uint8_t *u8g2Font)
{
 8002d1c:	b5b0      	push	{r4, r5, r7, lr}
 8002d1e:	b0a0      	sub	sp, #128	; 0x80
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	4608      	mov	r0, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	70fb      	strb	r3, [r7, #3]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	70bb      	strb	r3, [r7, #2]
 8002d32:	4613      	mov	r3, r2
 8002d34:	707b      	strb	r3, [r7, #1]
	assignTextParams("", u8g2Font);
 8002d36:	f107 0320 	add.w	r3, r7, #32
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f005 fba6 	bl	800848c <_ZNSaIcEC1Ev>
 8002d40:	f107 0220 	add.w	r2, r7, #32
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	4980      	ldr	r1, [pc, #512]	; (8002f4c <_ZN13NHDST7565_LCD12drawMenuListEhhhhRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEPKh+0x230>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f005 fd9a 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002d50:	f107 0308 	add.w	r3, r7, #8
 8002d54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002d58:	4619      	mov	r1, r3
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fdaa 	bl	80028b4 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 fcac 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002d6a:	f107 0320 	add.w	r3, r7, #32
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f005 fb8d 	bl	800848e <_ZNSaIcED1Ev>
	uint8_t MaxLines = (dispParams.high - FirstItemYPos) / (textToWrite.textHigh + MENU_ITEM_INTERLINE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	78bb      	ldrb	r3, [r7, #2]
 8002d7c:	1ad2      	subs	r2, r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7f5b      	ldrb	r3, [r3, #29]
 8002d82:	3303      	adds	r3, #3
 8002d84:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t NextItem = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t MaxTexLen = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	for(int Item = 0; Item < MaxLines; Item++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002da0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002da2:	429a      	cmp	r2, r3
 8002da4:	f280 80b8 	bge.w	8002f18 <_ZN13NHDST7565_LCD12drawMenuListEhhhhRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEPKh+0x1fc>
	{
		NextItem = FirsListItem + Item;
 8002da8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	787b      	ldrb	r3, [r7, #1]
 8002dae:	4413      	add	r3, r2
 8002db0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		if(NextItem >= MenuItems.size())
 8002db4:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 8002db8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002dbc:	f000 f8da 	bl	8002f74 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	bf2c      	ite	cs
 8002dc6:	2301      	movcs	r3, #1
 8002dc8:	2300      	movcc	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f040 80a2 	bne.w	8002f16 <_ZN13NHDST7565_LCD12drawMenuListEhhhhRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEPKh+0x1fa>
			break;
		if(NextItem == ItemSel)
 8002dd2:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002dd6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d160      	bne.n	8002ea0 <_ZN13NHDST7565_LCD12drawMenuListEhhhhRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEPKh+0x184>
		{
			assignTextParams(MenuItems.at(NextItem), u8g2Font);
 8002dde:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002de2:	4619      	mov	r1, r3
 8002de4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002de8:	f000 f8da 	bl	8002fa0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f005 fd13 	bl	8008820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff fd55 	bl	80028b4 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8002e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f005 fc57 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 0);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3324      	adds	r3, #36	; 0x24
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe f880 	bl	8000f20 <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 0);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3324      	adds	r3, #36	; 0x24
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fbac 	bl	8001584 <u8g2_SetDrawColor>
			drawString(MenuItems.at(NextItem), FirstItemXPos, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8002e2c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e30:	4619      	mov	r1, r3
 8002e32:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002e36:	f000 f8b3 	bl	8002fa0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f005 fcec 	bl	8008820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7f5a      	ldrb	r2, [r3, #29]
 8002e4c:	78bb      	ldrb	r3, [r7, #2]
 8002e4e:	4413      	add	r3, r2
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7f5b      	ldrb	r3, [r3, #29]
 8002e56:	3303      	adds	r3, #3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002e5c:	b2c9      	uxtb	r1, r1
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	b2d8      	uxtb	r0, r3
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002e6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	4603      	mov	r3, r0
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff fe5f 	bl	8002b3a <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8002e7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e80:	4618      	mov	r0, r3
 8002e82:	f005 fc1e 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3324      	adds	r3, #36	; 0x24
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe f847 	bl	8000f20 <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3324      	adds	r3, #36	; 0x24
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fb73 	bl	8001584 <u8g2_SetDrawColor>
 8002e9e:	e02c      	b.n	8002efa <_ZN13NHDST7565_LCD12drawMenuListEhhhhRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEPKh+0x1de>
		}
		else
		{
			drawString(MenuItems.at(NextItem), FirstItemXPos, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8002ea0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002eaa:	f000 f879 	bl	8002fa0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f005 fcb2 	bl	8008820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7f5a      	ldrb	r2, [r3, #29]
 8002ec0:	78bb      	ldrb	r3, [r7, #2]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7f5b      	ldrb	r3, [r3, #29]
 8002eca:	3303      	adds	r3, #3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002ed0:	b2c9      	uxtb	r1, r1
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	b2d8      	uxtb	r0, r3
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	4603      	mov	r3, r0
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff fe25 	bl	8002b3a <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8002ef0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f005 fbe4 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		if(MaxTexLen < textToWrite.textLen)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7f1b      	ldrb	r3, [r3, #28]
 8002efe:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d203      	bcs.n	8002f0e <_ZN13NHDST7565_LCD12drawMenuListEhhhhRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEPKh+0x1f2>
			MaxTexLen = textToWrite.textLen;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7f1b      	ldrb	r3, [r3, #28]
 8002f0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	for(int Item = 0; Item < MaxLines; Item++)
 8002f0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f10:	3301      	adds	r3, #1
 8002f12:	673b      	str	r3, [r7, #112]	; 0x70
 8002f14:	e742      	b.n	8002d9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEPKh+0x80>
			break;
 8002f16:	bf00      	nop
	}
	u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos, FirstItemYPos, MaxTexLen + 2, dispParams.high - 1, 3);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8002f1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002f22:	3302      	adds	r3, #2
 8002f24:	b2dd      	uxtb	r5, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	78bc      	ldrb	r4, [r7, #2]
 8002f30:	78f9      	ldrb	r1, [r7, #3]
 8002f32:	2203      	movs	r2, #3
 8002f34:	9201      	str	r2, [sp, #4]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	462b      	mov	r3, r5
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	f7fd f90e 	bl	800015c <u8g2_DrawRFrame>
	return MaxLines;
 8002f40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3778      	adds	r7, #120	; 0x78
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4c:	08008d50 	.word	0x08008d50

08002f50 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
	       const _CharT* __rhs)
    { return !(__lhs == __rhs); }
 8002f5a:	6839      	ldr	r1, [r7, #0]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f831 	bl	8002fc4 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f083 0301 	eor.w	r3, r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	461a      	mov	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	10db      	asrs	r3, r3, #3
 8002f8a:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	aaaaaaab 	.word	0xaaaaaaab

08002fa0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>:
       *  This function provides for safer data access.  The parameter
       *  is first checked that it is in the range of the vector.  The
       *  function throws out_of_range if the check fails.
       */
      reference
      at(size_type __n)
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
      {
	_M_range_check(__n);
 8002faa:	6839      	ldr	r1, [r7, #0]
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f81d 	bl	8002fec <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj>
	return (*this)[__n];
 8002fb2:	6839      	ldr	r1, [r7, #0]
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f839 	bl	800302c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>
 8002fba:	4603      	mov	r3, r0
      }
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f005 fc12 	bl	80087fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffbc 	bl	8002f74 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	4293      	cmp	r3, r2
 8003002:	bf2c      	ite	cs
 8003004:	2301      	movcs	r3, #1
 8003006:	2300      	movcc	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ffb0 	bl	8002f74 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	4803      	ldr	r0, [pc, #12]	; (8003028 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_M_range_checkEj+0x3c>)
 800301c:	f005 fa41 	bl	80084a2 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	08008d6c 	.word	0x08008d6c

0800302c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6819      	ldr	r1, [r3, #0]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
      }
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <_ZN12STM32_EEPROMC1Ev>:

void STM32_EEPROM::saveValue(double NewVal)
{
}

STM32_EEPROM::STM32_EEPROM()
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 800305e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003062:	f005 f9f5 	bl	8008450 <_Znaj>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	601a      	str	r2, [r3, #0]
}
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	bool State = false;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	889b      	ldrh	r3, [r3, #4]
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f002 fd52 	bl	8005b38 <HAL_GPIO_ReadPin>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf0c      	ite	eq
 800309a:	2301      	moveq	r3, #1
 800309c:	2300      	movne	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	4611      	mov	r1, r2
 80030be:	461a      	mov	r2, r3
 80030c0:	460b      	mov	r3, r1
 80030c2:	80fb      	strh	r3, [r7, #6]
 80030c4:	4613      	mov	r3, r2
 80030c6:	80bb      	strh	r3, [r7, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	819a      	strh	r2, [r3, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	88ba      	ldrh	r2, [r7, #4]
 80030ea:	819a      	strh	r2, [r3, #12]
}
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 8003100:	2302      	movs	r3, #2
 8003102:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 8003104:	2300      	movs	r3, #0
 8003106:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ffb5 	bl	8003078 <_ZN6BUTTON7readPinEv>
 800310e:	4603      	mov	r3, r0
 8003110:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 8003112:	7b7b      	ldrb	r3, [r7, #13]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d03c      	beq.n	8003192 <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 8003118:	f001 fd76 	bl	8004c08 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 8003122:	7b7b      	ldrb	r3, [r7, #13]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d015      	beq.n	8003154 <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ffa5 	bl	8003078 <_ZN6BUTTON7readPinEv>
 800312e:	4603      	mov	r3, r0
 8003130:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 8003132:	f001 fd69 	bl	8004c08 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	8992      	ldrh	r2, [r2, #12]
 8003142:	4293      	cmp	r3, r2
 8003144:	bf8c      	ite	hi
 8003146:	2301      	movhi	r3, #1
 8003148:	2300      	movls	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0e8      	beq.n	8003122 <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 8003150:	2301      	movs	r3, #1
 8003152:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 8003154:	7bbb      	ldrb	r3, [r7, #14]
 8003156:	f083 0301 	eor.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00d      	beq.n	800317c <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	7b9b      	ldrb	r3, [r3, #14]
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
 8003172:	e008      	b.n	8003186 <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	739a      	strb	r2, [r3, #14]
 800317a:	e004      	b.n	8003186 <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 800318c:	200a      	movs	r0, #10
 800318e:	f001 fd45 	bl	8004c1c <HAL_Delay>
	}
	return Status;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 80031a4:	2010      	movs	r0, #16
 80031a6:	f005 f955 	bl	8008454 <_Znwj>
 80031aa:	4603      	mov	r3, r0
 80031ac:	461c      	mov	r4, r3
 80031ae:	23fa      	movs	r3, #250	; 0xfa
 80031b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031b4:	491b      	ldr	r1, [pc, #108]	; (8003224 <_ZN8DryerKeyC1Ev+0x88>)
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7ff ff7b 	bl	80030b2 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 80031c0:	2010      	movs	r0, #16
 80031c2:	f005 f947 	bl	8008454 <_Znwj>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461c      	mov	r4, r3
 80031ca:	23fa      	movs	r3, #250	; 0xfa
 80031cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031d0:	4914      	ldr	r1, [pc, #80]	; (8003224 <_ZN8DryerKeyC1Ev+0x88>)
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7ff ff6d 	bl	80030b2 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 1000);
 80031dc:	2010      	movs	r0, #16
 80031de:	f005 f939 	bl	8008454 <_Znwj>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461c      	mov	r4, r3
 80031e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ee:	490d      	ldr	r1, [pc, #52]	; (8003224 <_ZN8DryerKeyC1Ev+0x88>)
 80031f0:	4620      	mov	r0, r4
 80031f2:	f7ff ff5e 	bl	80030b2 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 1000);
 80031fa:	2010      	movs	r0, #16
 80031fc:	f005 f92a 	bl	8008454 <_Znwj>
 8003200:	4603      	mov	r3, r0
 8003202:	461c      	mov	r4, r3
 8003204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003208:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800320c:	4905      	ldr	r1, [pc, #20]	; (8003224 <_ZN8DryerKeyC1Ev+0x88>)
 800320e:	4620      	mov	r0, r4
 8003210:	f7ff ff4f 	bl	80030b2 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60dc      	str	r4, [r3, #12]
}
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bd90      	pop	{r4, r7, pc}
 8003222:	bf00      	nop
 8003224:	40010c00 	.word	0x40010c00

08003228 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8003230:	2308      	movs	r3, #8
 8003232:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b03      	cmp	r3, #3
 800323c:	dc1d      	bgt.n	800327a <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff56 	bl	80030f8 <_ZN6BUTTON11checkButtonEv>
 800324c:	4603      	mov	r3, r0
 800324e:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d102      	bne.n	800325c <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	75fb      	strb	r3, [r7, #23]
 800325a:	e006      	b.n	800326a <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d103      	bne.n	800326a <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	3304      	adds	r3, #4
 8003268:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d103      	bne.n	8003278 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	3301      	adds	r3, #1
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	e7df      	b.n	8003238 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 8003278:	bf00      	nop
		}
	}
	return KeyPressed;
 800327a:	7dfb      	ldrb	r3, [r7, #23]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:
}




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	4611      	mov	r1, r2
 8003290:	461a      	mov	r2, r3
 8003292:	460b      	mov	r3, r1
 8003294:	80fb      	strh	r3, [r7, #6]
 8003296:	4613      	mov	r3, r2
 8003298:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	88fa      	ldrh	r2, [r7, #6]
 80032a4:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	797a      	ldrb	r2, [r7, #5]
 80032aa:	719a      	strb	r2, [r3, #6]

}
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <_ZN11SerialDebugC1Ev>:
	uint16_t BufferLen = serialBuffer.size();
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
}


SerialDebug::SerialDebug()
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f005 f9dc 	bl	8008680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2020 	strb.w	r2, [r3, #32]
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
}
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <_ZN10SmartDryer10DRYER_FLAGC1Ev>:
	typedef struct
	{
		bool thermoOn = false;
		bool fanOn = false;

	}DRYER_FLAG;
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	705a      	strb	r2, [r3, #1]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2020 	strb.w	r2, [r3, #32]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <_ZN10SmartDryerC1Ev>:

#include <SmartDryer.h>

#define TOLLERANCE_DEGREES	55

SmartDryer::SmartDryer()
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3330      	adds	r3, #48	; 0x30
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ffd9 	bl	80032f0 <_ZN10SmartDryer10DRYER_FLAGC1Ev>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f240 12f7 	movw	r2, #503	; 0x1f7
 8003344:	865a      	strh	r2, [r3, #50]	; 0x32
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	635a      	str	r2, [r3, #52]	; 0x34
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 8003354:	20d4      	movs	r0, #212	; 0xd4
 8003356:	f005 f87d 	bl	8008454 <_Znwj>
 800335a:	4603      	mov	r3, r0
 800335c:	461c      	mov	r4, r3
 800335e:	2101      	movs	r1, #1
 8003360:	4620      	mov	r0, r4
 8003362:	f7ff fa5f 	bl	8002824 <_ZN13NHDST7565_LCDC1Eh>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	601c      	str	r4, [r3, #0]
	clock = new DS1307_RTC();
 800336a:	2021      	movs	r0, #33	; 0x21
 800336c:	f005 f872 	bl	8008454 <_Znwj>
 8003370:	4603      	mov	r3, r0
 8003372:	461c      	mov	r4, r3
 8003374:	4620      	mov	r0, r4
 8003376:	f7ff f8a7 	bl	80024c8 <_ZN10DS1307_RTCC1Ev>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	605c      	str	r4, [r3, #4]
	keyboard = new DryerKey();
 800337e:	2010      	movs	r0, #16
 8003380:	f005 f868 	bl	8008454 <_Znwj>
 8003384:	4603      	mov	r3, r0
 8003386:	461c      	mov	r4, r3
 8003388:	4620      	mov	r0, r4
 800338a:	f7ff ff07 	bl	800319c <_ZN8DryerKeyC1Ev>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 8003392:	2021      	movs	r0, #33	; 0x21
 8003394:	f005 f85e 	bl	8008454 <_Znwj>
 8003398:	4603      	mov	r3, r0
 800339a:	461c      	mov	r4, r3
 800339c:	4620      	mov	r0, r4
 800339e:	2321      	movs	r3, #33	; 0x21
 80033a0:	461a      	mov	r2, r3
 80033a2:	2100      	movs	r1, #0
 80033a4:	f005 fb87 	bl	8008ab6 <memset>
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7ff ffb1 	bl	8003310 <_ZN13THERMO_SENSORC1Ev>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 80033b2:	2008      	movs	r0, #8
 80033b4:	f005 f84e 	bl	8008454 <_Znwj>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461c      	mov	r4, r3
 80033bc:	2300      	movs	r3, #0
 80033be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c2:	492c      	ldr	r1, [pc, #176]	; (8003474 <_ZN10SmartDryerC1Ev+0x148>)
 80033c4:	4620      	mov	r0, r4
 80033c6:	f7ff ff5d 	bl	8003284 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 80033ce:	2008      	movs	r0, #8
 80033d0:	f005 f840 	bl	8008454 <_Znwj>
 80033d4:	4603      	mov	r3, r0
 80033d6:	461c      	mov	r4, r3
 80033d8:	2300      	movs	r3, #0
 80033da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033de:	4925      	ldr	r1, [pc, #148]	; (8003474 <_ZN10SmartDryerC1Ev+0x148>)
 80033e0:	4620      	mov	r0, r4
 80033e2:	f7ff ff4f 	bl	8003284 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 80033ea:	2008      	movs	r0, #8
 80033ec:	f005 f832 	bl	8008454 <_Znwj>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461c      	mov	r4, r3
 80033f4:	4620      	mov	r0, r4
 80033f6:	f7ff fe2b 	bl	8003050 <_ZN12STM32_EEPROMC1Ev>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::SECONDS);
 80033fe:	2014      	movs	r0, #20
 8003400:	f005 f828 	bl	8008454 <_Znwj>
 8003404:	4603      	mov	r3, r0
 8003406:	461c      	mov	r4, r3
 8003408:	2101      	movs	r1, #1
 800340a:	4620      	mov	r0, r4
 800340c:	f7fe fff1 	bl	80023f2 <_ZN11ChronoTimerC1Eh>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8003414:	2014      	movs	r0, #20
 8003416:	f005 f81d 	bl	8008454 <_Znwj>
 800341a:	4603      	mov	r3, r0
 800341c:	461c      	mov	r4, r3
 800341e:	2100      	movs	r1, #0
 8003420:	4620      	mov	r0, r4
 8003422:	f7fe ffe6 	bl	80023f2 <_ZN11ChronoTimerC1Eh>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800342a:	2014      	movs	r0, #20
 800342c:	f005 f812 	bl	8008454 <_Znwj>
 8003430:	4603      	mov	r3, r0
 8003432:	461c      	mov	r4, r3
 8003434:	2100      	movs	r1, #0
 8003436:	4620      	mov	r0, r4
 8003438:	f7fe ffdb 	bl	80023f2 <_ZN11ChronoTimerC1Eh>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	625c      	str	r4, [r3, #36]	; 0x24

	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8003440:	2014      	movs	r0, #20
 8003442:	f005 f807 	bl	8008454 <_Znwj>
 8003446:	4603      	mov	r3, r0
 8003448:	461c      	mov	r4, r3
 800344a:	2100      	movs	r1, #0
 800344c:	4620      	mov	r0, r4
 800344e:	f7fe ffd0 	bl	80023f2 <_ZN11ChronoTimerC1Eh>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	629c      	str	r4, [r3, #40]	; 0x28

	dbgDryer = new SerialDebug();
 8003456:	2024      	movs	r0, #36	; 0x24
 8003458:	f004 fffc 	bl	8008454 <_Znwj>
 800345c:	4603      	mov	r3, r0
 800345e:	461c      	mov	r4, r3
 8003460:	4620      	mov	r0, r4
 8003462:	f7ff ff29 	bl	80032b8 <_ZN11SerialDebugC1Ev>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	62dc      	str	r4, [r3, #44]	; 0x2c

}
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bd90      	pop	{r4, r7, pc}
 8003474:	40010800 	.word	0x40010800

08003478 <_ZN10SmartDryer4testEv>:
		thermoCtrl->setState(LOW);
	}
}

void SmartDryer::test()
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b0f6      	sub	sp, #472	; 0x1d8
 800347c:	af04      	add	r7, sp, #16
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	6018      	str	r0, [r3, #0]
	testTimer->setTimer(5000);
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	f241 3188 	movw	r1, #5000	; 0x1388
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe ffd7 	bl	8002440 <_ZN11ChronoTimer8setTimerEm>
	std::string Time = "";
 8003492:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003496:	4618      	mov	r0, r3
 8003498:	f004 fff8 	bl	800848c <_ZNSaIcEC1Ev>
 800349c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80034a0:	f107 0320 	add.w	r3, r7, #32
 80034a4:	49ed      	ldr	r1, [pc, #948]	; (800385c <_ZN10SmartDryer4testEv+0x3e4>)
 80034a6:	4618      	mov	r0, r3
 80034a8:	f005 f9ec 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80034ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80034b0:	4618      	mov	r0, r3
 80034b2:	f004 ffec 	bl	800848e <_ZNSaIcED1Ev>
	display->setupLcd();
 80034b6:	1d3b      	adds	r3, r7, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fa53 	bl	8002968 <_ZN13NHDST7565_LCD8setupLcdEv>

	uint8_t TopPos = 0, ItemSel = 0, MaxLines = 0, MaxItems = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 31c4 	strb.w	r3, [r7, #452]	; 0x1c4
	bool SwitchMenu = false;
 80034da:	2300      	movs	r3, #0
 80034dc:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
	StrVector MenuList1, MenuList2;
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fac0 	bl	8003a6a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 80034ea:	f107 0308 	add.w	r3, r7, #8
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fabb 	bl	8003a6a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
	MenuList1.push_back("stringa 1");
 80034f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034f8:	4618      	mov	r0, r3
 80034fa:	f004 ffc7 	bl	800848c <_ZNSaIcEC1Ev>
 80034fe:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003506:	49d6      	ldr	r1, [pc, #856]	; (8003860 <_ZN10SmartDryer4testEv+0x3e8>)
 8003508:	4618      	mov	r0, r3
 800350a:	f005 f9bb 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800350e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fab3 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800351e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003522:	4618      	mov	r0, r3
 8003524:	f005 f8cd 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003528:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800352c:	4618      	mov	r0, r3
 800352e:	f004 ffae 	bl	800848e <_ZNSaIcED1Ev>
	MenuList1.push_back("stringa 2");
 8003532:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003536:	4618      	mov	r0, r3
 8003538:	f004 ffa8 	bl	800848c <_ZNSaIcEC1Ev>
 800353c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003540:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003544:	49c7      	ldr	r1, [pc, #796]	; (8003864 <_ZN10SmartDryer4testEv+0x3ec>)
 8003546:	4618      	mov	r0, r3
 8003548:	f005 f99c 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800354c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fa94 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800355c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003560:	4618      	mov	r0, r3
 8003562:	f005 f8ae 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003566:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800356a:	4618      	mov	r0, r3
 800356c:	f004 ff8f 	bl	800848e <_ZNSaIcED1Ev>
	MenuList1.push_back("stringa 3");
 8003570:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003574:	4618      	mov	r0, r3
 8003576:	f004 ff89 	bl	800848c <_ZNSaIcEC1Ev>
 800357a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800357e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003582:	49b9      	ldr	r1, [pc, #740]	; (8003868 <_ZN10SmartDryer4testEv+0x3f0>)
 8003584:	4618      	mov	r0, r3
 8003586:	f005 f97d 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800358a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800358e:	f107 0314 	add.w	r3, r7, #20
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fa75 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800359a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800359e:	4618      	mov	r0, r3
 80035a0:	f005 f88f 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80035a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80035a8:	4618      	mov	r0, r3
 80035aa:	f004 ff70 	bl	800848e <_ZNSaIcED1Ev>
	MenuList1.push_back("stringa 4");
 80035ae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035b2:	4618      	mov	r0, r3
 80035b4:	f004 ff6a 	bl	800848c <_ZNSaIcEC1Ev>
 80035b8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80035bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035c0:	49aa      	ldr	r1, [pc, #680]	; (800386c <_ZN10SmartDryer4testEv+0x3f4>)
 80035c2:	4618      	mov	r0, r3
 80035c4:	f005 f95e 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80035c8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fa56 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80035d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035dc:	4618      	mov	r0, r3
 80035de:	f005 f870 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80035e2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 ff51 	bl	800848e <_ZNSaIcED1Ev>
	MenuList1.push_back("stringa 5");
 80035ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035f0:	4618      	mov	r0, r3
 80035f2:	f004 ff4b 	bl	800848c <_ZNSaIcEC1Ev>
 80035f6:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80035fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035fe:	499c      	ldr	r1, [pc, #624]	; (8003870 <_ZN10SmartDryer4testEv+0x3f8>)
 8003600:	4618      	mov	r0, r3
 8003602:	f005 f93f 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003606:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fa37 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8003616:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800361a:	4618      	mov	r0, r3
 800361c:	f005 f851 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003620:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003624:	4618      	mov	r0, r3
 8003626:	f004 ff32 	bl	800848e <_ZNSaIcED1Ev>

	MenuList2.push_back("stringa 11");
 800362a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800362e:	4618      	mov	r0, r3
 8003630:	f004 ff2c 	bl	800848c <_ZNSaIcEC1Ev>
 8003634:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003638:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800363c:	498d      	ldr	r1, [pc, #564]	; (8003874 <_ZN10SmartDryer4testEv+0x3fc>)
 800363e:	4618      	mov	r0, r3
 8003640:	f005 f920 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003644:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003648:	f107 0308 	add.w	r3, r7, #8
 800364c:	4611      	mov	r1, r2
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fa18 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8003654:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003658:	4618      	mov	r0, r3
 800365a:	f005 f832 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800365e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003662:	4618      	mov	r0, r3
 8003664:	f004 ff13 	bl	800848e <_ZNSaIcED1Ev>
	MenuList2.push_back("stringa 22");
 8003668:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800366c:	4618      	mov	r0, r3
 800366e:	f004 ff0d 	bl	800848c <_ZNSaIcEC1Ev>
 8003672:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8003676:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800367a:	497f      	ldr	r1, [pc, #508]	; (8003878 <_ZN10SmartDryer4testEv+0x400>)
 800367c:	4618      	mov	r0, r3
 800367e:	f005 f901 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003682:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8003686:	f107 0308 	add.w	r3, r7, #8
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f9f9 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8003692:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003696:	4618      	mov	r0, r3
 8003698:	f005 f813 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800369c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80036a0:	4618      	mov	r0, r3
 80036a2:	f004 fef4 	bl	800848e <_ZNSaIcED1Ev>
	MenuList2.push_back("stringa 33");
 80036a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 feee 	bl	800848c <_ZNSaIcEC1Ev>
 80036b0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80036b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80036b8:	4970      	ldr	r1, [pc, #448]	; (800387c <_ZN10SmartDryer4testEv+0x404>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f005 f8e2 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80036c0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80036c4:	f107 0308 	add.w	r3, r7, #8
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f9da 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80036d0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80036d4:	4618      	mov	r0, r3
 80036d6:	f004 fff4 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80036da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 fed5 	bl	800848e <_ZNSaIcED1Ev>
	MenuList2.push_back("stringa 44");
 80036e4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 fecf 	bl	800848c <_ZNSaIcEC1Ev>
 80036ee:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80036f2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80036f6:	4962      	ldr	r1, [pc, #392]	; (8003880 <_ZN10SmartDryer4testEv+0x408>)
 80036f8:	4618      	mov	r0, r3
 80036fa:	f005 f8c3 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80036fe:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8003702:	f107 0308 	add.w	r3, r7, #8
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f9bb 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800370e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003712:	4618      	mov	r0, r3
 8003714:	f004 ffd5 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003718:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800371c:	4618      	mov	r0, r3
 800371e:	f004 feb6 	bl	800848e <_ZNSaIcED1Ev>
	MenuList2.push_back("stringa 55");
 8003722:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003726:	4618      	mov	r0, r3
 8003728:	f004 feb0 	bl	800848c <_ZNSaIcEC1Ev>
 800372c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8003730:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003734:	4953      	ldr	r1, [pc, #332]	; (8003884 <_ZN10SmartDryer4testEv+0x40c>)
 8003736:	4618      	mov	r0, r3
 8003738:	f005 f8a4 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800373c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003740:	f107 0308 	add.w	r3, r7, #8
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f99c 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800374c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003750:	4618      	mov	r0, r3
 8003752:	f004 ffb6 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003756:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800375a:	4618      	mov	r0, r3
 800375c:	f004 fe97 	bl	800848e <_ZNSaIcED1Ev>
	MenuList2.push_back("stringa 66");
 8003760:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003764:	4618      	mov	r0, r3
 8003766:	f004 fe91 	bl	800848c <_ZNSaIcEC1Ev>
 800376a:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800376e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003772:	4945      	ldr	r1, [pc, #276]	; (8003888 <_ZN10SmartDryer4testEv+0x410>)
 8003774:	4618      	mov	r0, r3
 8003776:	f005 f885 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800377a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f000 f97d 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800378a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800378e:	4618      	mov	r0, r3
 8003790:	f004 ff97 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003794:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003798:	4618      	mov	r0, r3
 800379a:	f004 fe78 	bl	800848e <_ZNSaIcED1Ev>
	MenuList2.push_back("stringa 77");
 800379e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80037a2:	4618      	mov	r0, r3
 80037a4:	f004 fe72 	bl	800848c <_ZNSaIcEC1Ev>
 80037a8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80037ac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80037b0:	4936      	ldr	r1, [pc, #216]	; (800388c <_ZN10SmartDryer4testEv+0x414>)
 80037b2:	4618      	mov	r0, r3
 80037b4:	f005 f866 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037b8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80037bc:	f107 0308 	add.w	r3, r7, #8
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 f95e 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80037c8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80037cc:	4618      	mov	r0, r3
 80037ce:	f004 ff78 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80037d2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80037d6:	4618      	mov	r0, r3
 80037d8:	f004 fe59 	bl	800848e <_ZNSaIcED1Ev>
	MenuList2.push_back("stringa 88");
 80037dc:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f004 fe53 	bl	800848c <_ZNSaIcEC1Ev>
 80037e6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80037ea:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80037ee:	4928      	ldr	r1, [pc, #160]	; (8003890 <_ZN10SmartDryer4testEv+0x418>)
 80037f0:	4618      	mov	r0, r3
 80037f2:	f005 f847 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037f6:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 80037fa:	f107 0308 	add.w	r3, r7, #8
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f000 f93f 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8003806:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800380a:	4618      	mov	r0, r3
 800380c:	f004 ff59 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003810:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8003814:	4618      	mov	r0, r3
 8003816:	f004 fe3a 	bl	800848e <_ZNSaIcED1Ev>
	MenuList2.push_back("stringa 99");
 800381a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800381e:	4618      	mov	r0, r3
 8003820:	f004 fe34 	bl	800848c <_ZNSaIcEC1Ev>
 8003824:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8003828:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800382c:	4919      	ldr	r1, [pc, #100]	; (8003894 <_ZN10SmartDryer4testEv+0x41c>)
 800382e:	4618      	mov	r0, r3
 8003830:	f005 f828 	bl	8008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003834:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8003838:	f107 0308 	add.w	r3, r7, #8
 800383c:	4611      	mov	r1, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f920 	bl	8003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8003844:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003848:	4618      	mov	r0, r3
 800384a:	f004 ff3a 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800384e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003852:	4618      	mov	r0, r3
 8003854:	f004 fe1b 	bl	800848e <_ZNSaIcED1Ev>
 8003858:	e01e      	b.n	8003898 <_ZN10SmartDryer4testEv+0x420>
 800385a:	bf00      	nop
 800385c:	08008db8 	.word	0x08008db8
 8003860:	08008dbc 	.word	0x08008dbc
 8003864:	08008dc8 	.word	0x08008dc8
 8003868:	08008dd4 	.word	0x08008dd4
 800386c:	08008de0 	.word	0x08008de0
 8003870:	08008dec 	.word	0x08008dec
 8003874:	08008df8 	.word	0x08008df8
 8003878:	08008e04 	.word	0x08008e04
 800387c:	08008e10 	.word	0x08008e10
 8003880:	08008e1c 	.word	0x08008e1c
 8003884:	08008e28 	.word	0x08008e28
 8003888:	08008e34 	.word	0x08008e34
 800388c:	08008e40 	.word	0x08008e40
 8003890:	08008e4c 	.word	0x08008e4c
 8003894:	08008e58 	.word	0x08008e58

	while(1)
	{
		  uint8_t WichKey = DryerKey::NO_KEY;
 8003898:	2308      	movs	r3, #8
 800389a:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
		  display->clearFrameBuffer();
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff f920 	bl	8002aea <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		  if(!SwitchMenu)
 80038aa:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 80038ae:	f083 0301 	eor.w	r3, r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d021      	beq.n	80038fc <_ZN10SmartDryer4testEv+0x484>
		  {
			  MaxLines = display->drawMenuList(5, 1, TopPos, ItemSel, MenuList1, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038c8:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 80038cc:	9302      	str	r3, [sp, #8]
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	4613      	mov	r3, r2
 80038dc:	2201      	movs	r2, #1
 80038de:	2105      	movs	r1, #5
 80038e0:	f7ff fa1c 	bl	8002d1c <_ZN13NHDST7565_LCD12drawMenuListEhhhhRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEPKh>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
			  MaxItems = MenuList1.size();
 80038ea:	f107 0314 	add.w	r3, r7, #20
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fb40 	bl	8002f74 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f887 31c4 	strb.w	r3, [r7, #452]	; 0x1c4
 80038fa:	e020      	b.n	800393e <_ZN10SmartDryer4testEv+0x4c6>
		  }
		  else
		  {
			  MaxLines = display->drawMenuList(60, 1, TopPos, ItemSel, MenuList2, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800390c:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8003910:	9302      	str	r3, [sp, #8]
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	2201      	movs	r2, #1
 8003922:	213c      	movs	r1, #60	; 0x3c
 8003924:	f7ff f9fa 	bl	8002d1c <_ZN13NHDST7565_LCD12drawMenuListEhhhhRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEPKh>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
			  MaxItems = MenuList2.size();
 800392e:	f107 0308 	add.w	r3, r7, #8
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fb1e 	bl	8002f74 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 31c4 	strb.w	r3, [r7, #452]	; 0x1c4
		  }
		  display->sendFrameBuffer();
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff f8dd 	bl	8002b04 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		  WichKey = keyboard->checkKey();
 800394a:	1d3b      	adds	r3, r7, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fc69 	bl	8003228 <_ZN8DryerKey8checkKeyEv>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
		  switch(WichKey)
 800395c:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 8003960:	2b07      	cmp	r3, #7
 8003962:	d841      	bhi.n	80039e8 <_ZN10SmartDryer4testEv+0x570>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <_ZN10SmartDryer4testEv+0x4f4>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	0800398d 	.word	0x0800398d
 8003970:	080039ad 	.word	0x080039ad
 8003974:	080039cf 	.word	0x080039cf
 8003978:	080039e9 	.word	0x080039e9
 800397c:	0800398d 	.word	0x0800398d
 8003980:	080039ad 	.word	0x080039ad
 8003984:	080039e9 	.word	0x080039e9
 8003988:	080039e9 	.word	0x080039e9
		  {
		  case DryerKey::UP_KEY:
		  case DryerKey::LONG_UP_KEY:
			  if(ItemSel > 0)
 800398c:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <_ZN10SmartDryer4testEv+0x528>
				  ItemSel--;
 8003994:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 8003998:	3b01      	subs	r3, #1
 800399a:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
			  else
				  ItemSel = MaxItems - 1;
			  break;
 800399e:	e024      	b.n	80039ea <_ZN10SmartDryer4testEv+0x572>
				  ItemSel = MaxItems - 1;
 80039a0:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 80039a4:	3b01      	subs	r3, #1
 80039a6:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
			  break;
 80039aa:	e01e      	b.n	80039ea <_ZN10SmartDryer4testEv+0x572>
		  case DryerKey::DOWN_KEY:
		  case DryerKey::LONG_DOWN_KEY:
			  if(ItemSel < MaxItems - 1)
 80039ac:	f897 21c6 	ldrb.w	r2, [r7, #454]	; 0x1c6
 80039b0:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 80039b4:	3b01      	subs	r3, #1
 80039b6:	429a      	cmp	r2, r3
 80039b8:	da05      	bge.n	80039c6 <_ZN10SmartDryer4testEv+0x54e>
				  ItemSel++;
 80039ba:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 80039be:	3301      	adds	r3, #1
 80039c0:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
			  else
				  ItemSel = 0;
			  break;
 80039c4:	e011      	b.n	80039ea <_ZN10SmartDryer4testEv+0x572>
				  ItemSel = 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
			  break;
 80039cc:	e00d      	b.n	80039ea <_ZN10SmartDryer4testEv+0x572>
		  case DryerKey::LEFT_KEY:
			  SwitchMenu = !SwitchMenu;
 80039ce:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 80039d2:	f083 0301 	eor.w	r3, r3, #1
 80039d6:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
			  TopPos = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
			  ItemSel = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
			  break;
 80039e6:	e000      	b.n	80039ea <_ZN10SmartDryer4testEv+0x572>

			  break;
		  case DryerKey::LONG_OK_KEY:
			  break;
		  default:
			  break;
 80039e8:	bf00      	nop
		  }
		  if(WichKey != DryerKey::NO_KEY)
 80039ea:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	f43f af52 	beq.w	8003898 <_ZN10SmartDryer4testEv+0x420>
		  {
			  if(ItemSel > MaxLines - 3)
 80039f4:	f897 21c6 	ldrb.w	r2, [r7, #454]	; 0x1c6
 80039f8:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 80039fc:	3b03      	subs	r3, #3
 80039fe:	429a      	cmp	r2, r3
 8003a00:	dd18      	ble.n	8003a34 <_ZN10SmartDryer4testEv+0x5bc>
			  {
				  if(ItemSel - (MaxLines - 3) < MaxItems - 1)
 8003a02:	f897 21c6 	ldrb.w	r2, [r7, #454]	; 0x1c6
 8003a06:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8003a0a:	3b03      	subs	r3, #3
 8003a0c:	1ad2      	subs	r2, r2, r3
 8003a0e:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8003a12:	3b01      	subs	r3, #1
 8003a14:	429a      	cmp	r2, r3
 8003a16:	da09      	bge.n	8003a2c <_ZN10SmartDryer4testEv+0x5b4>
					  TopPos = ItemSel - (MaxLines - 3);
 8003a18:	f897 21c6 	ldrb.w	r2, [r7, #454]	; 0x1c6
 8003a1c:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	3303      	adds	r3, #3
 8003a26:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 8003a2a:	e006      	b.n	8003a3a <_ZN10SmartDryer4testEv+0x5c2>
				  else
					  TopPos = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 8003a32:	e002      	b.n	8003a3a <_ZN10SmartDryer4testEv+0x5c2>
			  }
			  else
				  TopPos = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
			  if(ItemSel >= MaxItems - MaxLines)
 8003a3a:	f897 21c6 	ldrb.w	r2, [r7, #454]	; 0x1c6
 8003a3e:	f897 11c4 	ldrb.w	r1, [r7, #452]	; 0x1c4
 8003a42:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8003a46:	1acb      	subs	r3, r1, r3
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	f6ff af25 	blt.w	8003898 <_ZN10SmartDryer4testEv+0x420>
			  {
				  TopPos = MaxItems - MaxLines;
 8003a4e:	f897 21c4 	ldrb.w	r2, [r7, #452]	; 0x1c4
 8003a52:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
			  }
		  }

	}
 8003a5c:	e71c      	b.n	8003898 <_ZN10SmartDryer4testEv+0x420>
 8003a5e:	bf00      	nop

08003a60 <_ZN10SmartDryer3runEv>:
}

void SmartDryer::run()
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	while(1)
 8003a68:	e7fe      	b.n	8003a68 <_ZN10SmartDryer3runEv+0x8>

08003a6a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      vector()
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f816 	bl	8003aa6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8003a8e:	6838      	ldr	r0, [r7, #0]
 8003a90:	f7fe fd28 	bl	80024e4 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003a94:	4603      	mov	r3, r0
 8003a96:	4619      	mov	r1, r3
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f833 	bl	8003b04 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f856 	bl	8003b62 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f865 	bl	8003bb2 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8003b04:	b5b0      	push	{r4, r5, r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d012      	beq.n	8003b40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003b1a:	687c      	ldr	r4, [r7, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685d      	ldr	r5, [r3, #4]
 8003b20:	6838      	ldr	r0, [r7, #0]
 8003b22:	f7ff ffe5 	bl	8003af0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f000 f84d 	bl	8003bcc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f103 0218 	add.w	r2, r3, #24
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8003b3e:	e00c      	b.n	8003b5a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f856 	bl	8003bf2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8003b46:	4604      	mov	r4, r0
 8003b48:	6838      	ldr	r0, [r7, #0]
 8003b4a:	f7ff ffd1 	bl	8003af0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	461a      	mov	r2, r3
 8003b52:	4621      	mov	r1, r4
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f85d 	bl	8003c14 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bdb0      	pop	{r4, r5, r7, pc}

08003b62 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8ea 	bl	8003d44 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
	{ }
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
	if (__p)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 f8d9 	bl	8003d5c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f8e5 	bl	8003d8e <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8003bc4:	bf00      	nop
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ff89 	bl	8003af0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003bde:	4603      	mov	r3, r0
 8003be0:	461a      	mov	r2, r3
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f8ea 	bl	8003dbe <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	1d1a      	adds	r2, r3, #4
 8003bfe:	f107 030c 	add.w	r3, r7, #12
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f8f4 	bl	8003df2 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003c14:	b5b0      	push	{r4, r5, r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8003c20:	4a46      	ldr	r2, [pc, #280]	; (8003d3c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 8003c22:	2101      	movs	r1, #1
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f8f3 	bl	8003e10 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8003c2a:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f937 	bl	8003ea0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8003c32:	4603      	mov	r3, r0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	f107 0214 	add.w	r2, r7, #20
 8003c3a:	f107 0308 	add.w	r3, r7, #8
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f93d 	bl	8003ec0 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8003c46:	4603      	mov	r3, r0
 8003c48:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f952 	bl	8003ef8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8003c54:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8003c5a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	189d      	adds	r5, r3, r2
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ff3f 	bl	8003af0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003c72:	4603      	mov	r3, r0
 8003c74:	461a      	mov	r2, r3
 8003c76:	4629      	mov	r1, r5
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7ff ffa7 	bl	8003bcc <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681c      	ldr	r4, [r3, #0]
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f948 	bl	8003f20 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8003c90:	4603      	mov	r3, r0
 8003c92:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff ff12 	bl	8003ac0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8003c9c:	4603      	mov	r3, r0
	  __new_finish
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f000 f946 	bl	8003f34 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8003ca8:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3318      	adds	r3, #24
 8003cae:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8003cb0:	f107 0308 	add.w	r3, r7, #8
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 f933 	bl	8003f20 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	681c      	ldr	r4, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fefb 	bl	8003ac0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8003cca:	4603      	mov	r3, r0
	  __new_finish
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f000 f92f 	bl	8003f34 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8003cd6:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681c      	ldr	r4, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff feec 	bl	8003ac0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8003ce8:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003cea:	461a      	mov	r2, r3
 8003cec:	4629      	mov	r1, r5
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f7ff fef0 	bl	8003ad4 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	10db      	asrs	r3, r3, #3
 8003d08:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f7ff ff3c 	bl	8003b8c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	441a      	add	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	609a      	str	r2, [r3, #8]
    }
 8003d34:	bf00      	nop
 8003d36:	3728      	adds	r7, #40	; 0x28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d3c:	08008e64 	.word	0x08008e64
 8003d40:	aaaaaaab 	.word	0xaaaaaaab

08003d44 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f90a 	bl	8003f66 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f904 	bl	8003f7a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d00a      	beq.n	8003db6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ffea 	bl	8003d7a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8003da6:	4603      	mov	r3, r0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f8f3 	bl	8003f94 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3318      	adds	r3, #24
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	e7f0      	b.n	8003d98 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8003dbe:	b590      	push	{r4, r7, lr}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fe90 	bl	8003af0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	2018      	movs	r0, #24
 8003dd8:	f7ff fa7f 	bl	80032da <_ZnwjPv>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x2c>
 8003de2:	4621      	mov	r1, r4
 8003de4:	4618      	mov	r0, r3
 8003de6:	f004 fc52 	bl	800868e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd90      	pop	{r4, r7, pc}

08003df2 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f8c4 	bl	8003faa <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8003e22:	4604      	mov	r4, r0
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff f8a5 	bl	8002f74 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	1ae2      	subs	r2, r4, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	bf34      	ite	cc
 8003e34:	2301      	movcc	r3, #1
 8003e36:	2300      	movcs	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f004 fb2b 	bl	800849c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff f894 	bl	8002f74 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff f890 	bl	8002f74 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8003e54:	4603      	mov	r3, r0
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	f107 0208 	add.w	r2, r7, #8
 8003e5c:	f107 0310 	add.w	r3, r7, #16
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f8b2 	bl	8003fcc <_ZSt3maxIjERKT_S2_S2_>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4423      	add	r3, r4
 8003e6e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff f87f 	bl	8002f74 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8003e76:	4602      	mov	r2, r0
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d306      	bcc.n	8003e8c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f893 	bl	8003faa <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8003e84:	4602      	mov	r2, r0
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d904      	bls.n	8003e96 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f88c 	bl	8003faa <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8003e92:	4603      	mov	r3, r0
 8003e94:	e000      	b.n	8003e98 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 8003e96:	697b      	ldr	r3, [r7, #20]
      }
 8003e98:	4618      	mov	r0, r3
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	f107 030c 	add.w	r3, r7, #12
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff9e 	bl	8003df2 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003ec0:	b590      	push	{r4, r7, lr}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f828 	bl	8003f20 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461c      	mov	r4, r3
 8003ed6:	6838      	ldr	r0, [r7, #0]
 8003ed8:	f000 f822 	bl	8003f20 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8003edc:	4603      	mov	r3, r0
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	1ae3      	subs	r3, r4, r3
 8003ee2:	10db      	asrs	r3, r3, #3
 8003ee4:	4a03      	ldr	r2, [pc, #12]	; (8003ef4 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd90      	pop	{r4, r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	aaaaaaab 	.word	0xaaaaaaab

08003ef8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d006      	beq.n	8003f16 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6839      	ldr	r1, [r7, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f870 	bl	8003ff2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8003f12:	4603      	mov	r3, r0
 8003f14:	e000      	b.n	8003f18 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8003f16:	2300      	movs	r3, #0
      }
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f864 	bl	8004010 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8003f48:	4604      	mov	r4, r0
 8003f4a:	68b8      	ldr	r0, [r7, #8]
 8003f4c:	f000 f860 	bl	8004010 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8003f50:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	4620      	mov	r0, r4
 8003f58:	f000 f869 	bl	800402e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 8003f5c:	4603      	mov	r3, r0
    }
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd90      	pop	{r4, r7, pc}

08003f66 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003f86:	68b8      	ldr	r0, [r7, #8]
 8003f88:	f004 fa7e 	bl	8008488 <_ZdlPv>
      }
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f004 fb90 	bl	80086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 f857 	bl	8004068 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f847 	bl	8004050 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d201      	bcs.n	8003fe6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	e000      	b.n	8003fe8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003fe6:	687b      	ldr	r3, [r7, #4]
    }
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f83b 	bl	800407c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8004006:	4603      	mov	r3, r0
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8004018:	f107 030c 	add.w	r3, r7, #12
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 f84d 	bl	80040be <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f84a 	bl	80040da <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 8004046:	4603      	mov	r3, r0
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f851 	bl	8004100 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800405e:	4603      	mov	r3, r0
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr

0800407c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f839 	bl	8004100 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800408e:	4602      	mov	r2, r0
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4293      	cmp	r3, r2
 8004094:	bf8c      	ite	hi
 8004096:	2301      	movhi	r3, #1
 8004098:	2300      	movls	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80040a0:	f004 f9f6 	bl	8008490 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4618      	mov	r0, r3
 80040b0:	f004 f9d0 	bl	8008454 <_Znwj>
 80040b4:	4603      	mov	r3, r0
      }
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80040e6:	2301      	movs	r3, #1
 80040e8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f812 	bl	8004118 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 80040f4:	4603      	mov	r3, r0
    }
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004108:	4b02      	ldr	r3, [pc, #8]	; (8004114 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	0aaaaaaa 	.word	0x0aaaaaaa

08004118 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8004128:	f107 0208 	add.w	r2, r7, #8
 800412c:	f107 030c 	add.w	r3, r7, #12
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f81f 	bl	8004176 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800413e:	6978      	ldr	r0, [r7, #20]
 8004140:	f7ff fe1b 	bl	8003d7a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8004144:	4604      	mov	r4, r0
 8004146:	f107 030c 	add.w	r3, r7, #12
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f834 	bl	80041b8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8004150:	4603      	mov	r3, r0
 8004152:	4619      	mov	r1, r3
 8004154:	4620      	mov	r0, r4
 8004156:	f000 f83a 	bl	80041ce <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800415a:	f107 030c 	add.w	r3, r7, #12
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f81a 	bl	8004198 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	3318      	adds	r3, #24
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e7dd      	b.n	8004128 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800416c:	697b      	ldr	r3, [r7, #20]
	}
 800416e:	4618      	mov	r0, r3
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}

08004176 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8004180:	6839      	ldr	r1, [r7, #0]
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f83c 	bl	8004200 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8004188:	4603      	mov	r3, r0
 800418a:	f083 0301 	eor.w	r3, r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	++_M_current;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f103 0218 	add.w	r2, r3, #24
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	601a      	str	r2, [r3, #0]
	return *this;
 80041ac:	687b      	ldr	r3, [r7, #4]
      }
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80041ce:	b590      	push	{r4, r7, lr}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80041d8:	6838      	ldr	r0, [r7, #0]
 80041da:	f7ff fc89 	bl	8003af0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80041de:	4604      	mov	r4, r0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4619      	mov	r1, r3
 80041e4:	2018      	movs	r0, #24
 80041e6:	f7ff f878 	bl	80032da <_ZnwjPv>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 80041f0:	4621      	mov	r1, r4
 80041f2:	4618      	mov	r0, r3
 80041f4:	f004 fa4b 	bl	800868e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd90      	pop	{r4, r7, pc}

08004200 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f80e 	bl	800422c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8004210:	4604      	mov	r4, r0
 8004212:	6838      	ldr	r0, [r7, #0]
 8004214:	f000 f80a 	bl	800422c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8004218:	4603      	mov	r3, r0
 800421a:	429c      	cmp	r4, r3
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bd90      	pop	{r4, r7, pc}

0800422c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr
	...

08004244 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004254:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <MX_ADC1_Init+0x74>)
 8004256:	4a19      	ldr	r2, [pc, #100]	; (80042bc <MX_ADC1_Init+0x78>)
 8004258:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800425a:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <MX_ADC1_Init+0x74>)
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004260:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <MX_ADC1_Init+0x74>)
 8004262:	2200      	movs	r2, #0
 8004264:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004266:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <MX_ADC1_Init+0x74>)
 8004268:	2200      	movs	r2, #0
 800426a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <MX_ADC1_Init+0x74>)
 800426e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004274:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <MX_ADC1_Init+0x74>)
 8004276:	2200      	movs	r2, #0
 8004278:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800427a:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <MX_ADC1_Init+0x74>)
 800427c:	2201      	movs	r2, #1
 800427e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004280:	480d      	ldr	r0, [pc, #52]	; (80042b8 <MX_ADC1_Init+0x74>)
 8004282:	f000 fced 	bl	8004c60 <HAL_ADC_Init>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800428c:	f000 f9d0 	bl	8004630 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004290:	2300      	movs	r3, #0
 8004292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004294:	2301      	movs	r3, #1
 8004296:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800429c:	1d3b      	adds	r3, r7, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4805      	ldr	r0, [pc, #20]	; (80042b8 <MX_ADC1_Init+0x74>)
 80042a2:	f000 fe47 	bl	8004f34 <HAL_ADC_ConfigChannel>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80042ac:	f000 f9c0 	bl	8004630 <Error_Handler>
  }

}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	200004a0 	.word	0x200004a0
 80042bc:	40012400 	.word	0x40012400

080042c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c8:	f107 0310 	add.w	r3, r7, #16
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a14      	ldr	r2, [pc, #80]	; (800432c <HAL_ADC_MspInit+0x6c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d121      	bne.n	8004324 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042e0:	4b13      	ldr	r3, [pc, #76]	; (8004330 <HAL_ADC_MspInit+0x70>)
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	4a12      	ldr	r2, [pc, #72]	; (8004330 <HAL_ADC_MspInit+0x70>)
 80042e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ea:	6193      	str	r3, [r2, #24]
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_ADC_MspInit+0x70>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <HAL_ADC_MspInit+0x70>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <HAL_ADC_MspInit+0x70>)
 80042fe:	f043 0304 	orr.w	r3, r3, #4
 8004302:	6193      	str	r3, [r2, #24]
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_ADC_MspInit+0x70>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 8004310:	2301      	movs	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004314:	2303      	movs	r3, #3
 8004316:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 8004318:	f107 0310 	add.w	r3, r7, #16
 800431c:	4619      	mov	r1, r3
 800431e:	4805      	ldr	r0, [pc, #20]	; (8004334 <HAL_ADC_MspInit+0x74>)
 8004320:	f001 f9d0 	bl	80056c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004324:	bf00      	nop
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40012400 	.word	0x40012400
 8004330:	40021000 	.word	0x40021000
 8004334:	40010800 	.word	0x40010800

08004338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800433e:	f107 0308 	add.w	r3, r7, #8
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800434c:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <MX_GPIO_Init+0xb8>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <MX_GPIO_Init+0xb8>)
 8004352:	f043 0304 	orr.w	r3, r3, #4
 8004356:	6193      	str	r3, [r2, #24]
 8004358:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <MX_GPIO_Init+0xb8>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004364:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <MX_GPIO_Init+0xb8>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <MX_GPIO_Init+0xb8>)
 800436a:	f043 0308 	orr.w	r3, r3, #8
 800436e:	6193      	str	r3, [r2, #24]
 8004370:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <MX_GPIO_Init+0xb8>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 800437c:	2201      	movs	r2, #1
 800437e:	210c      	movs	r1, #12
 8004380:	481c      	ldr	r0, [pc, #112]	; (80043f4 <MX_GPIO_Init+0xbc>)
 8004382:	f001 fbff 	bl	8005b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 8004386:	2200      	movs	r2, #0
 8004388:	f641 6150 	movw	r1, #7760	; 0x1e50
 800438c:	4819      	ldr	r0, [pc, #100]	; (80043f4 <MX_GPIO_Init+0xbc>)
 800438e:	f001 fbf9 	bl	8005b84 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 8004392:	f240 435c 	movw	r3, #1116	; 0x45c
 8004396:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004398:	2301      	movs	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043a0:	2303      	movs	r3, #3
 80043a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a4:	f107 0308 	add.w	r3, r7, #8
 80043a8:	4619      	mov	r1, r3
 80043aa:	4812      	ldr	r0, [pc, #72]	; (80043f4 <MX_GPIO_Init+0xbc>)
 80043ac:	f001 f98a 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 80043b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80043b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043ba:	2301      	movs	r3, #1
 80043bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	4619      	mov	r1, r3
 80043c4:	480c      	ldr	r0, [pc, #48]	; (80043f8 <MX_GPIO_Init+0xc0>)
 80043c6:	f001 f97d 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 80043ca:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 80043ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043d0:	2301      	movs	r3, #1
 80043d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d8:	2302      	movs	r3, #2
 80043da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043dc:	f107 0308 	add.w	r3, r7, #8
 80043e0:	4619      	mov	r1, r3
 80043e2:	4804      	ldr	r0, [pc, #16]	; (80043f4 <MX_GPIO_Init+0xbc>)
 80043e4:	f001 f96e 	bl	80056c4 <HAL_GPIO_Init>

}
 80043e8:	bf00      	nop
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40010800 	.word	0x40010800
 80043f8:	40010c00 	.word	0x40010c00

080043fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004400:	4b12      	ldr	r3, [pc, #72]	; (800444c <MX_I2C1_Init+0x50>)
 8004402:	4a13      	ldr	r2, [pc, #76]	; (8004450 <MX_I2C1_Init+0x54>)
 8004404:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004406:	4b11      	ldr	r3, [pc, #68]	; (800444c <MX_I2C1_Init+0x50>)
 8004408:	4a12      	ldr	r2, [pc, #72]	; (8004454 <MX_I2C1_Init+0x58>)
 800440a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <MX_I2C1_Init+0x50>)
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <MX_I2C1_Init+0x50>)
 8004414:	2200      	movs	r2, #0
 8004416:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <MX_I2C1_Init+0x50>)
 800441a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800441e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <MX_I2C1_Init+0x50>)
 8004422:	2200      	movs	r2, #0
 8004424:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <MX_I2C1_Init+0x50>)
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800442c:	4b07      	ldr	r3, [pc, #28]	; (800444c <MX_I2C1_Init+0x50>)
 800442e:	2200      	movs	r2, #0
 8004430:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <MX_I2C1_Init+0x50>)
 8004434:	2200      	movs	r2, #0
 8004436:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004438:	4804      	ldr	r0, [pc, #16]	; (800444c <MX_I2C1_Init+0x50>)
 800443a:	f001 fbd5 	bl	8005be8 <HAL_I2C_Init>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004444:	f000 f8f4 	bl	8004630 <Error_Handler>
  }

}
 8004448:	bf00      	nop
 800444a:	bd80      	pop	{r7, pc}
 800444c:	200004d0 	.word	0x200004d0
 8004450:	40005400 	.word	0x40005400
 8004454:	000186a0 	.word	0x000186a0

08004458 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	; 0x28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <HAL_I2C_MspInit+0x90>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d132      	bne.n	80044de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004478:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <HAL_I2C_MspInit+0x94>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <HAL_I2C_MspInit+0x94>)
 800447e:	f043 0308 	orr.w	r3, r3, #8
 8004482:	6193      	str	r3, [r2, #24]
 8004484:	4b19      	ldr	r3, [pc, #100]	; (80044ec <HAL_I2C_MspInit+0x94>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8004490:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004496:	2312      	movs	r3, #18
 8004498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800449a:	2303      	movs	r3, #3
 800449c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449e:	f107 0314 	add.w	r3, r7, #20
 80044a2:	4619      	mov	r1, r3
 80044a4:	4812      	ldr	r0, [pc, #72]	; (80044f0 <HAL_I2C_MspInit+0x98>)
 80044a6:	f001 f90d 	bl	80056c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <HAL_I2C_MspInit+0x9c>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	f043 0302 	orr.w	r3, r3, #2
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
 80044c0:	4a0c      	ldr	r2, [pc, #48]	; (80044f4 <HAL_I2C_MspInit+0x9c>)
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044c6:	4b09      	ldr	r3, [pc, #36]	; (80044ec <HAL_I2C_MspInit+0x94>)
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	4a08      	ldr	r2, [pc, #32]	; (80044ec <HAL_I2C_MspInit+0x94>)
 80044cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044d0:	61d3      	str	r3, [r2, #28]
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_I2C_MspInit+0x94>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80044de:	bf00      	nop
 80044e0:	3728      	adds	r7, #40	; 0x28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40005400 	.word	0x40005400
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40010c00 	.word	0x40010c00
 80044f4:	40010000 	.word	0x40010000

080044f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80044f8:	b598      	push	{r3, r4, r7, lr}
 80044fa:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80044fc:	f000 fb2c 	bl	8004b58 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 8004500:	f000 f832 	bl	8004568 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004504:	f7ff ff18 	bl	8004338 <MX_GPIO_Init>
	MX_ADC1_Init();
 8004508:	f7ff fe9c 	bl	8004244 <MX_ADC1_Init>
	MX_I2C1_Init();
 800450c:	f7ff ff76 	bl	80043fc <MX_I2C1_Init>
	MX_SPI1_Init();
 8004510:	f000 f89e 	bl	8004650 <MX_SPI1_Init>
	MX_TIM2_Init();
 8004514:	f000 fa06 	bl	8004924 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8004518:	f000 fa6c 	bl	80049f4 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 800451c:	4810      	ldr	r0, [pc, #64]	; (8004560 <main+0x68>)
 800451e:	f002 ff3d 	bl	800739c <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 8004522:	203c      	movs	r0, #60	; 0x3c
 8004524:	f003 ff96 	bl	8008454 <_Znwj>
 8004528:	4603      	mov	r3, r0
 800452a:	461c      	mov	r4, r3
 800452c:	4620      	mov	r0, r4
 800452e:	f7fe fefd 	bl	800332c <_ZN10SmartDryerC1Ev>
 8004532:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <main+0x6c>)
 8004534:	601c      	str	r4, [r3, #0]

	if(DryerApplication->enableTest)
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <main+0x6c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <main+0x56>
	{
		DryerApplication->test();
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <main+0x6c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe ff96 	bl	8003478 <_ZN10SmartDryer4testEv>
 800454c:	e004      	b.n	8004558 <main+0x60>
	}
	else
	{
		DryerApplication->run();
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <main+0x6c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fa84 	bl	8003a60 <_ZN10SmartDryer3runEv>
	//  while (1)
	//  {
	//
	//  }

}
 8004558:	2300      	movs	r3, #0
 800455a:	4618      	mov	r0, r3
 800455c:	bd98      	pop	{r3, r4, r7, pc}
 800455e:	bf00      	nop
 8004560:	2000057c 	.word	0x2000057c
 8004564:	2000048c 	.word	0x2000048c

08004568 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b094      	sub	sp, #80	; 0x50
 800456c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800456e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004572:	2228      	movs	r2, #40	; 0x28
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f004 fa9d 	bl	8008ab6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800457c:	f107 0314 	add.w	r3, r7, #20
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	609a      	str	r2, [r3, #8]
 8004596:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004598:	2302      	movs	r3, #2
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800459c:	2301      	movs	r3, #1
 800459e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80045a0:	2310      	movs	r3, #16
 80045a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045a4:	2302      	movs	r3, #2
 80045a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80045a8:	2300      	movs	r3, #0
 80045aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80045ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 fcd0 	bl	8005f5c <HAL_RCC_OscConfig>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf14      	ite	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	2300      	moveq	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 80045cc:	f000 f830 	bl	8004630 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045d0:	230f      	movs	r3, #15
 80045d2:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045d4:	2302      	movs	r3, #2
 80045d6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045dc:	2300      	movs	r3, #0
 80045de:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045e0:	2300      	movs	r3, #0
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80045e4:	f107 0314 	add.w	r3, r7, #20
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f002 f826 	bl	800663c <HAL_RCC_ClockConfig>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf14      	ite	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	2300      	moveq	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 8004600:	f000 f816 	bl	8004630 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004604:	2302      	movs	r3, #2
 8004606:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	4618      	mov	r0, r3
 8004610:	f002 fa56 	bl	8006ac0 <HAL_RCCEx_PeriphCLKConfig>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	bf14      	ite	ne
 800461a:	2301      	movne	r3, #1
 800461c:	2300      	moveq	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 8004624:	f000 f804 	bl	8004630 <Error_Handler>
	}
}
 8004628:	bf00      	nop
 800462a:	3750      	adds	r7, #80	; 0x50
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004654:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <MX_SPI1_Init+0x68>)
 8004656:	4a19      	ldr	r2, [pc, #100]	; (80046bc <MX_SPI1_Init+0x6c>)
 8004658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800465a:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <MX_SPI1_Init+0x68>)
 800465c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <MX_SPI1_Init+0x68>)
 8004664:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004668:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <MX_SPI1_Init+0x68>)
 800466c:	2200      	movs	r2, #0
 800466e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <MX_SPI1_Init+0x68>)
 8004672:	2200      	movs	r2, #0
 8004674:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <MX_SPI1_Init+0x68>)
 8004678:	2200      	movs	r2, #0
 800467a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <MX_SPI1_Init+0x68>)
 800467e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004682:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <MX_SPI1_Init+0x68>)
 8004686:	2228      	movs	r2, #40	; 0x28
 8004688:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800468a:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <MX_SPI1_Init+0x68>)
 800468c:	2200      	movs	r2, #0
 800468e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <MX_SPI1_Init+0x68>)
 8004692:	2200      	movs	r2, #0
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <MX_SPI1_Init+0x68>)
 8004698:	2200      	movs	r2, #0
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <MX_SPI1_Init+0x68>)
 800469e:	220a      	movs	r2, #10
 80046a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80046a2:	4805      	ldr	r0, [pc, #20]	; (80046b8 <MX_SPI1_Init+0x68>)
 80046a4:	f002 fb16 	bl	8006cd4 <HAL_SPI_Init>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80046ae:	f7ff ffbf 	bl	8004630 <Error_Handler>
  }

}
 80046b2:	bf00      	nop
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000524 	.word	0x20000524
 80046bc:	40013000 	.word	0x40013000

080046c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c8:	f107 0310 	add.w	r3, r7, #16
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a15      	ldr	r2, [pc, #84]	; (8004730 <HAL_SPI_MspInit+0x70>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d123      	bne.n	8004728 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046e0:	4b14      	ldr	r3, [pc, #80]	; (8004734 <HAL_SPI_MspInit+0x74>)
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	4a13      	ldr	r2, [pc, #76]	; (8004734 <HAL_SPI_MspInit+0x74>)
 80046e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046ea:	6193      	str	r3, [r2, #24]
 80046ec:	4b11      	ldr	r3, [pc, #68]	; (8004734 <HAL_SPI_MspInit+0x74>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <HAL_SPI_MspInit+0x74>)
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	4a0d      	ldr	r2, [pc, #52]	; (8004734 <HAL_SPI_MspInit+0x74>)
 80046fe:	f043 0304 	orr.w	r3, r3, #4
 8004702:	6193      	str	r3, [r2, #24]
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_SPI_MspInit+0x74>)
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 8004710:	23a0      	movs	r3, #160	; 0xa0
 8004712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004714:	2302      	movs	r3, #2
 8004716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004718:	2303      	movs	r3, #3
 800471a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800471c:	f107 0310 	add.w	r3, r7, #16
 8004720:	4619      	mov	r1, r3
 8004722:	4805      	ldr	r0, [pc, #20]	; (8004738 <HAL_SPI_MspInit+0x78>)
 8004724:	f000 ffce 	bl	80056c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004728:	bf00      	nop
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40013000 	.word	0x40013000
 8004734:	40021000 	.word	0x40021000
 8004738:	40010800 	.word	0x40010800

0800473c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004742:	4b15      	ldr	r3, [pc, #84]	; (8004798 <HAL_MspInit+0x5c>)
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	4a14      	ldr	r2, [pc, #80]	; (8004798 <HAL_MspInit+0x5c>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6193      	str	r3, [r2, #24]
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <HAL_MspInit+0x5c>)
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	4b0f      	ldr	r3, [pc, #60]	; (8004798 <HAL_MspInit+0x5c>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	4a0e      	ldr	r2, [pc, #56]	; (8004798 <HAL_MspInit+0x5c>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004764:	61d3      	str	r3, [r2, #28]
 8004766:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <HAL_MspInit+0x5c>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	607b      	str	r3, [r7, #4]
 8004770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_MspInit+0x60>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	4a04      	ldr	r2, [pc, #16]	; (800479c <HAL_MspInit+0x60>)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	40021000 	.word	0x40021000
 800479c:	40010000 	.word	0x40010000

080047a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80047b0:	f000 ff02 	bl	80055b8 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047b4:	e7fe      	b.n	80047b4 <HardFault_Handler+0x8>

080047b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047b6:	b480      	push	{r7}
 80047b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047ba:	e7fe      	b.n	80047ba <MemManage_Handler+0x4>

080047bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047c0:	e7fe      	b.n	80047c0 <BusFault_Handler+0x4>

080047c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047c2:	b480      	push	{r7}
 80047c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047c6:	e7fe      	b.n	80047c6 <UsageFault_Handler+0x4>

080047c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047f0:	f000 f9f8 	bl	8004be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047f4:	bf00      	nop
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80047fc:	4802      	ldr	r0, [pc, #8]	; (8004808 <USART1_IRQHandler+0x10>)
 80047fe:	f003 fad9 	bl	8007db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004802:	bf00      	nop
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	200005bc 	.word	0x200005bc

0800480c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
	return 1;
 8004810:	2301      	movs	r3, #1
}
 8004812:	4618      	mov	r0, r3
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr

0800481a <_kill>:

int _kill(int pid, int sig)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004824:	f004 f8da 	bl	80089dc <__errno>
 8004828:	4602      	mov	r2, r0
 800482a:	2316      	movs	r3, #22
 800482c:	6013      	str	r3, [r2, #0]
	return -1;
 800482e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <_exit>:

void _exit (int status)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004842:	f04f 31ff 	mov.w	r1, #4294967295
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ffe7 	bl	800481a <_kill>
	while (1) {}		/* Make sure we hang here */
 800484c:	e7fe      	b.n	800484c <_exit+0x12>
	...

08004850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004858:	4a14      	ldr	r2, [pc, #80]	; (80048ac <_sbrk+0x5c>)
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <_sbrk+0x60>)
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004864:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <_sbrk+0x64>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800486c:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <_sbrk+0x64>)
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <_sbrk+0x68>)
 8004870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <_sbrk+0x64>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4413      	add	r3, r2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	429a      	cmp	r2, r3
 800487e:	d207      	bcs.n	8004890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004880:	f004 f8ac 	bl	80089dc <__errno>
 8004884:	4602      	mov	r2, r0
 8004886:	230c      	movs	r3, #12
 8004888:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800488a:	f04f 33ff 	mov.w	r3, #4294967295
 800488e:	e009      	b.n	80048a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004890:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <_sbrk+0x64>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004896:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <_sbrk+0x64>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <_sbrk+0x64>)
 80048a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048a2:	68fb      	ldr	r3, [r7, #12]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20005000 	.word	0x20005000
 80048b0:	00000400 	.word	0x00000400
 80048b4:	20000490 	.word	0x20000490
 80048b8:	20000608 	.word	0x20000608

080048bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <SystemInit+0x5c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a14      	ldr	r2, [pc, #80]	; (8004918 <SystemInit+0x5c>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80048cc:	4b12      	ldr	r3, [pc, #72]	; (8004918 <SystemInit+0x5c>)
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4911      	ldr	r1, [pc, #68]	; (8004918 <SystemInit+0x5c>)
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <SystemInit+0x60>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <SystemInit+0x5c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0e      	ldr	r2, [pc, #56]	; (8004918 <SystemInit+0x5c>)
 80048de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80048e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <SystemInit+0x5c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <SystemInit+0x5c>)
 80048ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80048f4:	4b08      	ldr	r3, [pc, #32]	; (8004918 <SystemInit+0x5c>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4a07      	ldr	r2, [pc, #28]	; (8004918 <SystemInit+0x5c>)
 80048fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80048fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <SystemInit+0x5c>)
 8004902:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004906:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <SystemInit+0x64>)
 800490a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800490e:	609a      	str	r2, [r3, #8]
#endif 
}
 8004910:	bf00      	nop
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	40021000 	.word	0x40021000
 800491c:	f8ff0000 	.word	0xf8ff0000
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800492a:	f107 0308 	add.w	r3, r7, #8
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	605a      	str	r2, [r3, #4]
 8004934:	609a      	str	r2, [r3, #8]
 8004936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004938:	463b      	mov	r3, r7
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <MX_TIM2_Init+0x94>)
 8004942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004946:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004948:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <MX_TIM2_Init+0x94>)
 800494a:	2200      	movs	r2, #0
 800494c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800494e:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <MX_TIM2_Init+0x94>)
 8004950:	2200      	movs	r2, #0
 8004952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 8004954:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <MX_TIM2_Init+0x94>)
 8004956:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800495a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800495c:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <MX_TIM2_Init+0x94>)
 800495e:	2200      	movs	r2, #0
 8004960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004962:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <MX_TIM2_Init+0x94>)
 8004964:	2200      	movs	r2, #0
 8004966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004968:	4813      	ldr	r0, [pc, #76]	; (80049b8 <MX_TIM2_Init+0x94>)
 800496a:	f002 fc91 	bl	8007290 <HAL_TIM_Base_Init>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004974:	f7ff fe5c 	bl	8004630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800497c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800497e:	f107 0308 	add.w	r3, r7, #8
 8004982:	4619      	mov	r1, r3
 8004984:	480c      	ldr	r0, [pc, #48]	; (80049b8 <MX_TIM2_Init+0x94>)
 8004986:	f002 fd4d 	bl	8007424 <HAL_TIM_ConfigClockSource>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004990:	f7ff fe4e 	bl	8004630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004994:	2300      	movs	r3, #0
 8004996:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004998:	2300      	movs	r3, #0
 800499a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800499c:	463b      	mov	r3, r7
 800499e:	4619      	mov	r1, r3
 80049a0:	4805      	ldr	r0, [pc, #20]	; (80049b8 <MX_TIM2_Init+0x94>)
 80049a2:	f003 f8c9 	bl	8007b38 <HAL_TIMEx_MasterConfigSynchronization>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80049ac:	f7ff fe40 	bl	8004630 <Error_Handler>
  }

}
 80049b0:	bf00      	nop
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	2000057c 	.word	0x2000057c

080049bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049cc:	d10b      	bne.n	80049e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <HAL_TIM_Base_MspInit+0x34>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4a07      	ldr	r2, [pc, #28]	; (80049f0 <HAL_TIM_Base_MspInit+0x34>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	61d3      	str	r3, [r2, #28]
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_TIM_Base_MspInit+0x34>)
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr
 80049f0:	40021000 	.word	0x40021000

080049f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <MX_USART1_UART_Init+0x4c>)
 80049fa:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <MX_USART1_UART_Init+0x50>)
 80049fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <MX_USART1_UART_Init+0x4c>)
 8004a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a06:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <MX_USART1_UART_Init+0x4c>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <MX_USART1_UART_Init+0x4c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <MX_USART1_UART_Init+0x4c>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a18:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <MX_USART1_UART_Init+0x4c>)
 8004a1a:	220c      	movs	r2, #12
 8004a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a1e:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <MX_USART1_UART_Init+0x4c>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <MX_USART1_UART_Init+0x4c>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a2a:	4805      	ldr	r0, [pc, #20]	; (8004a40 <MX_USART1_UART_Init+0x4c>)
 8004a2c:	f003 f91a 	bl	8007c64 <HAL_UART_Init>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004a36:	f7ff fdfb 	bl	8004630 <Error_Handler>
  }

}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	200005bc 	.word	0x200005bc
 8004a44:	40013800 	.word	0x40013800

08004a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a50:	f107 0314 	add.w	r3, r7, #20
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	609a      	str	r2, [r3, #8]
 8004a5c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a26      	ldr	r2, [pc, #152]	; (8004afc <HAL_UART_MspInit+0xb4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d145      	bne.n	8004af4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a68:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <HAL_UART_MspInit+0xb8>)
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	4a24      	ldr	r2, [pc, #144]	; (8004b00 <HAL_UART_MspInit+0xb8>)
 8004a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a72:	6193      	str	r3, [r2, #24]
 8004a74:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <HAL_UART_MspInit+0xb8>)
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a80:	4b1f      	ldr	r3, [pc, #124]	; (8004b00 <HAL_UART_MspInit+0xb8>)
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <HAL_UART_MspInit+0xb8>)
 8004a86:	f043 0308 	orr.w	r3, r3, #8
 8004a8a:	6193      	str	r3, [r2, #24]
 8004a8c:	4b1c      	ldr	r3, [pc, #112]	; (8004b00 <HAL_UART_MspInit+0xb8>)
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8004a98:	2340      	movs	r3, #64	; 0x40
 8004a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8004aa4:	f107 0314 	add.w	r3, r7, #20
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4816      	ldr	r0, [pc, #88]	; (8004b04 <HAL_UART_MspInit+0xbc>)
 8004aac:	f000 fe0a 	bl	80056c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8004abc:	f107 0314 	add.w	r3, r7, #20
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4810      	ldr	r0, [pc, #64]	; (8004b04 <HAL_UART_MspInit+0xbc>)
 8004ac4:	f000 fdfe 	bl	80056c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <HAL_UART_MspInit+0xc0>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	f043 0304 	orr.w	r3, r3, #4
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ade:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <HAL_UART_MspInit+0xc0>)
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	2025      	movs	r0, #37	; 0x25
 8004aea:	f000 fd21 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004aee:	2025      	movs	r0, #37	; 0x25
 8004af0:	f000 fd4a 	bl	8005588 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004af4:	bf00      	nop
 8004af6:	3728      	adds	r7, #40	; 0x28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40013800 	.word	0x40013800
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40010c00 	.word	0x40010c00
 8004b08:	40010000 	.word	0x40010000

08004b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004b0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004b0e:	e003      	b.n	8004b18 <LoopCopyDataInit>

08004b10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004b12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004b14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004b16:	3104      	adds	r1, #4

08004b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004b18:	480a      	ldr	r0, [pc, #40]	; (8004b44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004b1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004b1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004b20:	d3f6      	bcc.n	8004b10 <CopyDataInit>
  ldr r2, =_sbss
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004b24:	e002      	b.n	8004b2c <LoopFillZerobss>

08004b26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004b26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004b28:	f842 3b04 	str.w	r3, [r2], #4

08004b2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004b2c:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004b2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004b30:	d3f9      	bcc.n	8004b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b32:	f7ff fec3 	bl	80048bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b36:	f003 ff57 	bl	80089e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b3a:	f7ff fcdd 	bl	80044f8 <main>
  bx lr
 8004b3e:	4770      	bx	lr
  ldr r3, =_sidata
 8004b40:	0800fc6c 	.word	0x0800fc6c
  ldr r0, =_sdata
 8004b44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004b48:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8004b4c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8004b50:	20000604 	.word	0x20000604

08004b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b54:	e7fe      	b.n	8004b54 <ADC1_2_IRQHandler>
	...

08004b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b5c:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <HAL_Init+0x28>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a07      	ldr	r2, [pc, #28]	; (8004b80 <HAL_Init+0x28>)
 8004b62:	f043 0310 	orr.w	r3, r3, #16
 8004b66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b68:	2003      	movs	r0, #3
 8004b6a:	f000 fcc1 	bl	80054f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f000 f808 	bl	8004b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b74:	f7ff fde2 	bl	800473c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40022000 	.word	0x40022000

08004b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b8c:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <HAL_InitTick+0x54>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <HAL_InitTick+0x58>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	4619      	mov	r1, r3
 8004b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fd0c 	bl	80055c0 <HAL_SYSTICK_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e00e      	b.n	8004bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b0f      	cmp	r3, #15
 8004bb6:	d80a      	bhi.n	8004bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bb8:	2200      	movs	r2, #0
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	f000 fcb6 	bl	8005530 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bc4:	4a06      	ldr	r2, [pc, #24]	; (8004be0 <HAL_InitTick+0x5c>)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e000      	b.n	8004bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000000 	.word	0x20000000
 8004bdc:	20000008 	.word	0x20000008
 8004be0:	20000004 	.word	0x20000004

08004be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_IncTick+0x1c>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_IncTick+0x20>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	4a03      	ldr	r2, [pc, #12]	; (8004c04 <HAL_IncTick+0x20>)
 8004bf6:	6013      	str	r3, [r2, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr
 8004c00:	20000008 	.word	0x20000008
 8004c04:	200005fc 	.word	0x200005fc

08004c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c0c:	4b02      	ldr	r3, [pc, #8]	; (8004c18 <HAL_GetTick+0x10>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	200005fc 	.word	0x200005fc

08004c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c24:	f7ff fff0 	bl	8004c08 <HAL_GetTick>
 8004c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d005      	beq.n	8004c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c36:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_Delay+0x40>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c42:	bf00      	nop
 8004c44:	f7ff ffe0 	bl	8004c08 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d8f7      	bhi.n	8004c44 <HAL_Delay+0x28>
  {
  }
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000008 	.word	0x20000008

08004c60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e153      	b.n	8004f2a <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a9f      	ldr	r2, [pc, #636]	; (8004f04 <HAL_ADC_Init+0x2a4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d009      	beq.n	8004ca0 <HAL_ADC_Init+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a9d      	ldr	r2, [pc, #628]	; (8004f08 <HAL_ADC_Init+0x2a8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d004      	beq.n	8004ca0 <HAL_ADC_Init+0x40>
 8004c96:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004c9a:	489c      	ldr	r0, [pc, #624]	; (8004f0c <HAL_ADC_Init+0x2ac>)
 8004c9c:	f7ff fcce 	bl	800463c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <HAL_ADC_Init+0x5c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb0:	d004      	beq.n	8004cbc <HAL_ADC_Init+0x5c>
 8004cb2:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8004cb6:	4895      	ldr	r0, [pc, #596]	; (8004f0c <HAL_ADC_Init+0x2ac>)
 8004cb8:	f7ff fcc0 	bl	800463c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d009      	beq.n	8004cd8 <HAL_ADC_Init+0x78>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ccc:	d004      	beq.n	8004cd8 <HAL_ADC_Init+0x78>
 8004cce:	f240 11b5 	movw	r1, #437	; 0x1b5
 8004cd2:	488e      	ldr	r0, [pc, #568]	; (8004f0c <HAL_ADC_Init+0x2ac>)
 8004cd4:	f7ff fcb2 	bl	800463c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	7b1b      	ldrb	r3, [r3, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_ADC_Init+0x92>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	7b1b      	ldrb	r3, [r3, #12]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d004      	beq.n	8004cf2 <HAL_ADC_Init+0x92>
 8004ce8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8004cec:	4887      	ldr	r0, [pc, #540]	; (8004f0c <HAL_ADC_Init+0x2ac>)
 8004cee:	f7ff fca5 	bl	800463c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d022      	beq.n	8004d40 <HAL_ADC_Init+0xe0>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d02:	d01d      	beq.n	8004d40 <HAL_ADC_Init+0xe0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004d0c:	d018      	beq.n	8004d40 <HAL_ADC_Init+0xe0>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d16:	d013      	beq.n	8004d40 <HAL_ADC_Init+0xe0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8004d20:	d00e      	beq.n	8004d40 <HAL_ADC_Init+0xe0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d2a:	d009      	beq.n	8004d40 <HAL_ADC_Init+0xe0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004d34:	d004      	beq.n	8004d40 <HAL_ADC_Init+0xe0>
 8004d36:	f240 11b7 	movw	r1, #439	; 0x1b7
 8004d3a:	4874      	ldr	r0, [pc, #464]	; (8004f0c <HAL_ADC_Init+0x2ac>)
 8004d3c:	f7ff fc7e 	bl	800463c <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d02a      	beq.n	8004d9e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_ADC_Init+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d904      	bls.n	8004d62 <HAL_ADC_Init+0x102>
 8004d58:	f240 11bb 	movw	r1, #443	; 0x1bb
 8004d5c:	486b      	ldr	r0, [pc, #428]	; (8004f0c <HAL_ADC_Init+0x2ac>)
 8004d5e:	f7ff fc6d 	bl	800463c <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	7d1b      	ldrb	r3, [r3, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_ADC_Init+0x11c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	7d1b      	ldrb	r3, [r3, #20]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d004      	beq.n	8004d7c <HAL_ADC_Init+0x11c>
 8004d72:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004d76:	4865      	ldr	r0, [pc, #404]	; (8004f0c <HAL_ADC_Init+0x2ac>)
 8004d78:	f7ff fc60 	bl	800463c <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	7d1b      	ldrb	r3, [r3, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00c      	beq.n	8004d9e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <HAL_ADC_Init+0x134>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d904      	bls.n	8004d9e <HAL_ADC_Init+0x13e>
 8004d94:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004d98:	485c      	ldr	r0, [pc, #368]	; (8004f0c <HAL_ADC_Init+0x2ac>)
 8004d9a:	f7ff fc4f 	bl	800463c <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fa83 	bl	80042c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fa7e 	bl	80052bc <ADC_ConversionStop_Disable>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 80a3 	bne.w	8004f18 <HAL_ADC_Init+0x2b8>
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f040 809f 	bne.w	8004f18 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004de2:	f023 0302 	bic.w	r3, r3, #2
 8004de6:	f043 0202 	orr.w	r2, r3, #2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004df6:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7b1b      	ldrb	r3, [r3, #12]
 8004dfc:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004dfe:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0e:	d003      	beq.n	8004e18 <HAL_ADC_Init+0x1b8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d102      	bne.n	8004e1e <HAL_ADC_Init+0x1be>
 8004e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e1c:	e000      	b.n	8004e20 <HAL_ADC_Init+0x1c0>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	7d1b      	ldrb	r3, [r3, #20]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d119      	bne.n	8004e62 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	7b1b      	ldrb	r3, [r3, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	035a      	lsls	r2, r3, #13
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	e00b      	b.n	8004e62 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <HAL_ADC_Init+0x2b0>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	430b      	orrs	r3, r1
 8004e88:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e92:	d003      	beq.n	8004e9c <HAL_ADC_Init+0x23c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d104      	bne.n	8004ea6 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	051b      	lsls	r3, r3, #20
 8004ea4:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <HAL_ADC_Init+0x2b4>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	f023 0303 	bic.w	r3, r3, #3
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004ee0:	e022      	b.n	8004f28 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	f023 0312 	bic.w	r3, r3, #18
 8004eea:	f043 0210 	orr.w	r2, r3, #16
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	f043 0201 	orr.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f02:	e011      	b.n	8004f28 <HAL_ADC_Init+0x2c8>
 8004f04:	40012400 	.word	0x40012400
 8004f08:	40012800 	.word	0x40012800
 8004f0c:	08008e80 	.word	0x08008e80
 8004f10:	ffe1f7fd 	.word	0xffe1f7fd
 8004f14:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	f043 0210 	orr.w	r2, r3, #16
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop

08004f34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a88      	ldr	r2, [pc, #544]	; (800516c <HAL_ADC_ConfigChannel+0x238>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d009      	beq.n	8004f64 <HAL_ADC_ConfigChannel+0x30>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a86      	ldr	r2, [pc, #536]	; (8005170 <HAL_ADC_ConfigChannel+0x23c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <HAL_ADC_ConfigChannel+0x30>
 8004f5a:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8004f5e:	4885      	ldr	r0, [pc, #532]	; (8005174 <HAL_ADC_ConfigChannel+0x240>)
 8004f60:	f7ff fb6c 	bl	800463c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d048      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d044      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d040      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d03c      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d038      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	d034      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b06      	cmp	r3, #6
 8004f9a:	d030      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b07      	cmp	r3, #7
 8004fa2:	d02c      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d028      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b09      	cmp	r3, #9
 8004fb2:	d024      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b0a      	cmp	r3, #10
 8004fba:	d020      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b0b      	cmp	r3, #11
 8004fc2:	d01c      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b0c      	cmp	r3, #12
 8004fca:	d018      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b0d      	cmp	r3, #13
 8004fd2:	d014      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b0e      	cmp	r3, #14
 8004fda:	d010      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b0f      	cmp	r3, #15
 8004fe2:	d00c      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d008      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b11      	cmp	r3, #17
 8004ff2:	d004      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0xca>
 8004ff4:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8004ff8:	485e      	ldr	r0, [pc, #376]	; (8005174 <HAL_ADC_ConfigChannel+0x240>)
 8004ffa:	f7ff fb1f 	bl	800463c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d040      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d03c      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b03      	cmp	r3, #3
 8005014:	d038      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b04      	cmp	r3, #4
 800501c:	d034      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b05      	cmp	r3, #5
 8005024:	d030      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b06      	cmp	r3, #6
 800502c:	d02c      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b07      	cmp	r3, #7
 8005034:	d028      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b08      	cmp	r3, #8
 800503c:	d024      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b09      	cmp	r3, #9
 8005044:	d020      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b0a      	cmp	r3, #10
 800504c:	d01c      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b0b      	cmp	r3, #11
 8005054:	d018      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b0c      	cmp	r3, #12
 800505c:	d014      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b0d      	cmp	r3, #13
 8005064:	d010      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b0e      	cmp	r3, #14
 800506c:	d00c      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b0f      	cmp	r3, #15
 8005074:	d008      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b10      	cmp	r3, #16
 800507c:	d004      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x154>
 800507e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005082:	483c      	ldr	r0, [pc, #240]	; (8005174 <HAL_ADC_ConfigChannel+0x240>)
 8005084:	f7ff fada 	bl	800463c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d020      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0x19e>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d01c      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0x19e>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d018      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0x19e>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d014      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0x19e>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d010      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0x19e>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b05      	cmp	r3, #5
 80050b6:	d00c      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0x19e>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b06      	cmp	r3, #6
 80050be:	d008      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0x19e>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b07      	cmp	r3, #7
 80050c6:	d004      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0x19e>
 80050c8:	f240 71d1 	movw	r1, #2001	; 0x7d1
 80050cc:	4829      	ldr	r0, [pc, #164]	; (8005174 <HAL_ADC_ConfigChannel+0x240>)
 80050ce:	f7ff fab5 	bl	800463c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_ADC_ConfigChannel+0x1ac>
 80050dc:	2302      	movs	r3, #2
 80050de:	e0e2      	b.n	80052a6 <HAL_ADC_ConfigChannel+0x372>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b06      	cmp	r3, #6
 80050ee:	d81c      	bhi.n	800512a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	3b05      	subs	r3, #5
 8005102:	221f      	movs	r2, #31
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	4019      	ands	r1, r3
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	3b05      	subs	r3, #5
 800511c:	fa00 f203 	lsl.w	r2, r0, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	635a      	str	r2, [r3, #52]	; 0x34
 8005128:	e042      	b.n	80051b0 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d822      	bhi.n	8005178 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	3b23      	subs	r3, #35	; 0x23
 8005144:	221f      	movs	r2, #31
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	43db      	mvns	r3, r3
 800514c:	4019      	ands	r1, r3
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	3b23      	subs	r3, #35	; 0x23
 800515e:	fa00 f203 	lsl.w	r2, r0, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	631a      	str	r2, [r3, #48]	; 0x30
 800516a:	e021      	b.n	80051b0 <HAL_ADC_ConfigChannel+0x27c>
 800516c:	40012400 	.word	0x40012400
 8005170:	40012800 	.word	0x40012800
 8005174:	08008e80 	.word	0x08008e80
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	3b41      	subs	r3, #65	; 0x41
 800518a:	221f      	movs	r2, #31
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	4019      	ands	r1, r3
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	3b41      	subs	r3, #65	; 0x41
 80051a4:	fa00 f203 	lsl.w	r2, r0, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	d91c      	bls.n	80051f2 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68d9      	ldr	r1, [r3, #12]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4613      	mov	r3, r2
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	4413      	add	r3, r2
 80051c8:	3b1e      	subs	r3, #30
 80051ca:	2207      	movs	r2, #7
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	4019      	ands	r1, r3
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	6898      	ldr	r0, [r3, #8]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	3b1e      	subs	r3, #30
 80051e4:	fa00 f203 	lsl.w	r2, r0, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	e019      	b.n	8005226 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6919      	ldr	r1, [r3, #16]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	4413      	add	r3, r2
 8005202:	2207      	movs	r2, #7
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	43db      	mvns	r3, r3
 800520a:	4019      	ands	r1, r3
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6898      	ldr	r0, [r3, #8]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	4413      	add	r3, r2
 800521a:	fa00 f203 	lsl.w	r2, r0, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b10      	cmp	r3, #16
 800522c:	d003      	beq.n	8005236 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005232:	2b11      	cmp	r3, #17
 8005234:	d132      	bne.n	800529c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <HAL_ADC_ConfigChannel+0x37c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d125      	bne.n	800528c <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d126      	bne.n	800529c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800525c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b10      	cmp	r3, #16
 8005264:	d11a      	bne.n	800529c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005266:	4b13      	ldr	r3, [pc, #76]	; (80052b4 <HAL_ADC_ConfigChannel+0x380>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <HAL_ADC_ConfigChannel+0x384>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	0c9a      	lsrs	r2, r3, #18
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800527c:	e002      	b.n	8005284 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	3b01      	subs	r3, #1
 8005282:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f9      	bne.n	800527e <HAL_ADC_ConfigChannel+0x34a>
 800528a:	e007      	b.n	800529c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005290:	f043 0220 	orr.w	r2, r3, #32
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40012400 	.word	0x40012400
 80052b4:	20000000 	.word	0x20000000
 80052b8:	431bde83 	.word	0x431bde83

080052bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d127      	bne.n	8005326 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052e6:	f7ff fc8f 	bl	8004c08 <HAL_GetTick>
 80052ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80052ec:	e014      	b.n	8005318 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052ee:	f7ff fc8b 	bl	8004c08 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d90d      	bls.n	8005318 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	f043 0210 	orr.w	r2, r3, #16
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	f043 0201 	orr.w	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e007      	b.n	8005328 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d0e3      	beq.n	80052ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005340:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <__NVIC_SetPriorityGrouping+0x44>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800534c:	4013      	ands	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800535c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005362:	4a04      	ldr	r2, [pc, #16]	; (8005374 <__NVIC_SetPriorityGrouping+0x44>)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	60d3      	str	r3, [r2, #12]
}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	e000ed00 	.word	0xe000ed00

08005378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800537c:	4b04      	ldr	r3, [pc, #16]	; (8005390 <__NVIC_GetPriorityGrouping+0x18>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	0a1b      	lsrs	r3, r3, #8
 8005382:	f003 0307 	and.w	r3, r3, #7
}
 8005386:	4618      	mov	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	e000ed00 	.word	0xe000ed00

08005394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800539e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	db0b      	blt.n	80053be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	f003 021f 	and.w	r2, r3, #31
 80053ac:	4906      	ldr	r1, [pc, #24]	; (80053c8 <__NVIC_EnableIRQ+0x34>)
 80053ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	2001      	movs	r0, #1
 80053b6:	fa00 f202 	lsl.w	r2, r0, r2
 80053ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr
 80053c8:	e000e100 	.word	0xe000e100

080053cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	6039      	str	r1, [r7, #0]
 80053d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	db0a      	blt.n	80053f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	490c      	ldr	r1, [pc, #48]	; (8005418 <__NVIC_SetPriority+0x4c>)
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	0112      	lsls	r2, r2, #4
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	440b      	add	r3, r1
 80053f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053f4:	e00a      	b.n	800540c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	4908      	ldr	r1, [pc, #32]	; (800541c <__NVIC_SetPriority+0x50>)
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	3b04      	subs	r3, #4
 8005404:	0112      	lsls	r2, r2, #4
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	440b      	add	r3, r1
 800540a:	761a      	strb	r2, [r3, #24]
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	e000e100 	.word	0xe000e100
 800541c:	e000ed00 	.word	0xe000ed00

08005420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005420:	b480      	push	{r7}
 8005422:	b089      	sub	sp, #36	; 0x24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f1c3 0307 	rsb	r3, r3, #7
 800543a:	2b04      	cmp	r3, #4
 800543c:	bf28      	it	cs
 800543e:	2304      	movcs	r3, #4
 8005440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	3304      	adds	r3, #4
 8005446:	2b06      	cmp	r3, #6
 8005448:	d902      	bls.n	8005450 <NVIC_EncodePriority+0x30>
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	3b03      	subs	r3, #3
 800544e:	e000      	b.n	8005452 <NVIC_EncodePriority+0x32>
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005454:	f04f 32ff 	mov.w	r2, #4294967295
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	43da      	mvns	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	401a      	ands	r2, r3
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005468:	f04f 31ff 	mov.w	r1, #4294967295
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	fa01 f303 	lsl.w	r3, r1, r3
 8005472:	43d9      	mvns	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005478:	4313      	orrs	r3, r2
         );
}
 800547a:	4618      	mov	r0, r3
 800547c:	3724      	adds	r7, #36	; 0x24
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr

08005484 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005488:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800548c:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <__NVIC_SystemReset+0x20>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005494:	4903      	ldr	r1, [pc, #12]	; (80054a4 <__NVIC_SystemReset+0x20>)
 8005496:	4b04      	ldr	r3, [pc, #16]	; (80054a8 <__NVIC_SystemReset+0x24>)
 8005498:	4313      	orrs	r3, r2
 800549a:	60cb      	str	r3, [r1, #12]
 800549c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80054a0:	bf00      	nop
 80054a2:	e7fd      	b.n	80054a0 <__NVIC_SystemReset+0x1c>
 80054a4:	e000ed00 	.word	0xe000ed00
 80054a8:	05fa0004 	.word	0x05fa0004

080054ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054bc:	d301      	bcc.n	80054c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054be:	2301      	movs	r3, #1
 80054c0:	e00f      	b.n	80054e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054c2:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <SysTick_Config+0x40>)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ca:	210f      	movs	r1, #15
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	f7ff ff7c 	bl	80053cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <SysTick_Config+0x40>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054da:	4b04      	ldr	r3, [pc, #16]	; (80054ec <SysTick_Config+0x40>)
 80054dc:	2207      	movs	r2, #7
 80054de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	e000e010 	.word	0xe000e010

080054f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b07      	cmp	r3, #7
 80054fc:	d00f      	beq.n	800551e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b06      	cmp	r3, #6
 8005502:	d00c      	beq.n	800551e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b05      	cmp	r3, #5
 8005508:	d009      	beq.n	800551e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b04      	cmp	r3, #4
 800550e:	d006      	beq.n	800551e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b03      	cmp	r3, #3
 8005514:	d003      	beq.n	800551e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005516:	2192      	movs	r1, #146	; 0x92
 8005518:	4804      	ldr	r0, [pc, #16]	; (800552c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800551a:	f7ff f88f 	bl	800463c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff ff06 	bl	8005330 <__NVIC_SetPriorityGrouping>
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	08008eb8 	.word	0x08008eb8

08005530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d903      	bls.n	8005550 <HAL_NVIC_SetPriority+0x20>
 8005548:	21aa      	movs	r1, #170	; 0xaa
 800554a:	480e      	ldr	r0, [pc, #56]	; (8005584 <HAL_NVIC_SetPriority+0x54>)
 800554c:	f7ff f876 	bl	800463c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b0f      	cmp	r3, #15
 8005554:	d903      	bls.n	800555e <HAL_NVIC_SetPriority+0x2e>
 8005556:	21ab      	movs	r1, #171	; 0xab
 8005558:	480a      	ldr	r0, [pc, #40]	; (8005584 <HAL_NVIC_SetPriority+0x54>)
 800555a:	f7ff f86f 	bl	800463c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800555e:	f7ff ff0b 	bl	8005378 <__NVIC_GetPriorityGrouping>
 8005562:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	6978      	ldr	r0, [r7, #20]
 800556a:	f7ff ff59 	bl	8005420 <NVIC_EncodePriority>
 800556e:	4602      	mov	r2, r0
 8005570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005574:	4611      	mov	r1, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff ff28 	bl	80053cc <__NVIC_SetPriority>
}
 800557c:	bf00      	nop
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	08008eb8 	.word	0x08008eb8

08005588 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005596:	2b00      	cmp	r3, #0
 8005598:	da03      	bge.n	80055a2 <HAL_NVIC_EnableIRQ+0x1a>
 800559a:	21be      	movs	r1, #190	; 0xbe
 800559c:	4805      	ldr	r0, [pc, #20]	; (80055b4 <HAL_NVIC_EnableIRQ+0x2c>)
 800559e:	f7ff f84d 	bl	800463c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fef4 	bl	8005394 <__NVIC_EnableIRQ>
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	08008eb8 	.word	0x08008eb8

080055b8 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80055bc:	f7ff ff62 	bl	8005484 <__NVIC_SystemReset>

080055c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff6f 	bl	80054ac <SysTick_Config>
 80055ce:	4603      	mov	r3, r0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d005      	beq.n	80055fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2204      	movs	r2, #4
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
 80055f8:	e051      	b.n	800569e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 020e 	bic.w	r2, r2, #14
 8005608:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0201 	bic.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a22      	ldr	r2, [pc, #136]	; (80056a8 <HAL_DMA_Abort_IT+0xd0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d029      	beq.n	8005678 <HAL_DMA_Abort_IT+0xa0>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a20      	ldr	r2, [pc, #128]	; (80056ac <HAL_DMA_Abort_IT+0xd4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d022      	beq.n	8005674 <HAL_DMA_Abort_IT+0x9c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <HAL_DMA_Abort_IT+0xd8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d01a      	beq.n	800566e <HAL_DMA_Abort_IT+0x96>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1d      	ldr	r2, [pc, #116]	; (80056b4 <HAL_DMA_Abort_IT+0xdc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d012      	beq.n	8005668 <HAL_DMA_Abort_IT+0x90>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1c      	ldr	r2, [pc, #112]	; (80056b8 <HAL_DMA_Abort_IT+0xe0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00a      	beq.n	8005662 <HAL_DMA_Abort_IT+0x8a>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1a      	ldr	r2, [pc, #104]	; (80056bc <HAL_DMA_Abort_IT+0xe4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d102      	bne.n	800565c <HAL_DMA_Abort_IT+0x84>
 8005656:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800565a:	e00e      	b.n	800567a <HAL_DMA_Abort_IT+0xa2>
 800565c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005660:	e00b      	b.n	800567a <HAL_DMA_Abort_IT+0xa2>
 8005662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005666:	e008      	b.n	800567a <HAL_DMA_Abort_IT+0xa2>
 8005668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800566c:	e005      	b.n	800567a <HAL_DMA_Abort_IT+0xa2>
 800566e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005672:	e002      	b.n	800567a <HAL_DMA_Abort_IT+0xa2>
 8005674:	2310      	movs	r3, #16
 8005676:	e000      	b.n	800567a <HAL_DMA_Abort_IT+0xa2>
 8005678:	2301      	movs	r3, #1
 800567a:	4a11      	ldr	r2, [pc, #68]	; (80056c0 <HAL_DMA_Abort_IT+0xe8>)
 800567c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
    } 
  }
  return status;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40020008 	.word	0x40020008
 80056ac:	4002001c 	.word	0x4002001c
 80056b0:	40020030 	.word	0x40020030
 80056b4:	40020044 	.word	0x40020044
 80056b8:	40020058 	.word	0x40020058
 80056bc:	4002006c 	.word	0x4002006c
 80056c0:	40020000 	.word	0x40020000

080056c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	; 0x28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056ce:	2300      	movs	r3, #0
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80056d2:	2300      	movs	r3, #0
 80056d4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a9c      	ldr	r2, [pc, #624]	; (800594c <HAL_GPIO_Init+0x288>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_GPIO_Init+0x42>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a9b      	ldr	r2, [pc, #620]	; (8005950 <HAL_GPIO_Init+0x28c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00f      	beq.n	8005706 <HAL_GPIO_Init+0x42>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a9a      	ldr	r2, [pc, #616]	; (8005954 <HAL_GPIO_Init+0x290>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <HAL_GPIO_Init+0x42>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a99      	ldr	r2, [pc, #612]	; (8005958 <HAL_GPIO_Init+0x294>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <HAL_GPIO_Init+0x42>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a98      	ldr	r2, [pc, #608]	; (800595c <HAL_GPIO_Init+0x298>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <HAL_GPIO_Init+0x42>
 80056fe:	21bd      	movs	r1, #189	; 0xbd
 8005700:	4897      	ldr	r0, [pc, #604]	; (8005960 <HAL_GPIO_Init+0x29c>)
 8005702:	f7fe ff9b 	bl	800463c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_GPIO_Init+0x58>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	0c1b      	lsrs	r3, r3, #16
 8005716:	041b      	lsls	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_GPIO_Init+0x60>
 800571c:	21be      	movs	r1, #190	; 0xbe
 800571e:	4890      	ldr	r0, [pc, #576]	; (8005960 <HAL_GPIO_Init+0x29c>)
 8005720:	f7fe ff8c 	bl	800463c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 81eb 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b01      	cmp	r3, #1
 8005734:	f000 81e6 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b11      	cmp	r3, #17
 800573e:	f000 81e1 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b02      	cmp	r3, #2
 8005748:	f000 81dc 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b12      	cmp	r3, #18
 8005752:	f000 81d7 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4a82      	ldr	r2, [pc, #520]	; (8005964 <HAL_GPIO_Init+0x2a0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	f000 81d1 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	4a80      	ldr	r2, [pc, #512]	; (8005968 <HAL_GPIO_Init+0x2a4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	f000 81cb 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	4a7e      	ldr	r2, [pc, #504]	; (800596c <HAL_GPIO_Init+0x2a8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	f000 81c5 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	4a7c      	ldr	r2, [pc, #496]	; (8005970 <HAL_GPIO_Init+0x2ac>)
 8005780:	4293      	cmp	r3, r2
 8005782:	f000 81bf 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	4a7a      	ldr	r2, [pc, #488]	; (8005974 <HAL_GPIO_Init+0x2b0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	f000 81b9 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4a78      	ldr	r2, [pc, #480]	; (8005978 <HAL_GPIO_Init+0x2b4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	f000 81b3 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	f000 81ae 	beq.w	8005b04 <HAL_GPIO_Init+0x440>
 80057a8:	21bf      	movs	r1, #191	; 0xbf
 80057aa:	486d      	ldr	r0, [pc, #436]	; (8005960 <HAL_GPIO_Init+0x29c>)
 80057ac:	f7fe ff46 	bl	800463c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057b0:	e1a8      	b.n	8005b04 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80057b2:	2201      	movs	r2, #1
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	4013      	ands	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	f040 8197 	bne.w	8005afe <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a5e      	ldr	r2, [pc, #376]	; (800594c <HAL_GPIO_Init+0x288>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d013      	beq.n	8005800 <HAL_GPIO_Init+0x13c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a5d      	ldr	r2, [pc, #372]	; (8005950 <HAL_GPIO_Init+0x28c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00f      	beq.n	8005800 <HAL_GPIO_Init+0x13c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a5c      	ldr	r2, [pc, #368]	; (8005954 <HAL_GPIO_Init+0x290>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00b      	beq.n	8005800 <HAL_GPIO_Init+0x13c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a5b      	ldr	r2, [pc, #364]	; (8005958 <HAL_GPIO_Init+0x294>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <HAL_GPIO_Init+0x13c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a5a      	ldr	r2, [pc, #360]	; (800595c <HAL_GPIO_Init+0x298>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <HAL_GPIO_Init+0x13c>
 80057f8:	21cd      	movs	r1, #205	; 0xcd
 80057fa:	4859      	ldr	r0, [pc, #356]	; (8005960 <HAL_GPIO_Init+0x29c>)
 80057fc:	f7fe ff1e 	bl	800463c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b12      	cmp	r3, #18
 8005806:	d065      	beq.n	80058d4 <HAL_GPIO_Init+0x210>
 8005808:	2b12      	cmp	r3, #18
 800580a:	d80e      	bhi.n	800582a <HAL_GPIO_Init+0x166>
 800580c:	2b02      	cmp	r3, #2
 800580e:	d04c      	beq.n	80058aa <HAL_GPIO_Init+0x1e6>
 8005810:	2b02      	cmp	r3, #2
 8005812:	d804      	bhi.n	800581e <HAL_GPIO_Init+0x15a>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d072      	beq.n	80058fe <HAL_GPIO_Init+0x23a>
 8005818:	2b01      	cmp	r3, #1
 800581a:	d01d      	beq.n	8005858 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800581c:	e0b1      	b.n	8005982 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800581e:	2b03      	cmp	r3, #3
 8005820:	f000 80ac 	beq.w	800597c <HAL_GPIO_Init+0x2b8>
 8005824:	2b11      	cmp	r3, #17
 8005826:	d02b      	beq.n	8005880 <HAL_GPIO_Init+0x1bc>
          break;
 8005828:	e0ab      	b.n	8005982 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800582a:	4a4f      	ldr	r2, [pc, #316]	; (8005968 <HAL_GPIO_Init+0x2a4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d066      	beq.n	80058fe <HAL_GPIO_Init+0x23a>
 8005830:	4a4d      	ldr	r2, [pc, #308]	; (8005968 <HAL_GPIO_Init+0x2a4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d806      	bhi.n	8005844 <HAL_GPIO_Init+0x180>
 8005836:	4a4b      	ldr	r2, [pc, #300]	; (8005964 <HAL_GPIO_Init+0x2a0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d060      	beq.n	80058fe <HAL_GPIO_Init+0x23a>
 800583c:	4a4c      	ldr	r2, [pc, #304]	; (8005970 <HAL_GPIO_Init+0x2ac>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d05d      	beq.n	80058fe <HAL_GPIO_Init+0x23a>
          break;
 8005842:	e09e      	b.n	8005982 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8005844:	4a49      	ldr	r2, [pc, #292]	; (800596c <HAL_GPIO_Init+0x2a8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d059      	beq.n	80058fe <HAL_GPIO_Init+0x23a>
 800584a:	4a4b      	ldr	r2, [pc, #300]	; (8005978 <HAL_GPIO_Init+0x2b4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d056      	beq.n	80058fe <HAL_GPIO_Init+0x23a>
 8005850:	4a48      	ldr	r2, [pc, #288]	; (8005974 <HAL_GPIO_Init+0x2b0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d053      	beq.n	80058fe <HAL_GPIO_Init+0x23a>
          break;
 8005856:	e094      	b.n	8005982 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d00b      	beq.n	8005878 <HAL_GPIO_Init+0x1b4>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d007      	beq.n	8005878 <HAL_GPIO_Init+0x1b4>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d003      	beq.n	8005878 <HAL_GPIO_Init+0x1b4>
 8005870:	21d5      	movs	r1, #213	; 0xd5
 8005872:	483b      	ldr	r0, [pc, #236]	; (8005960 <HAL_GPIO_Init+0x29c>)
 8005874:	f7fe fee2 	bl	800463c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	623b      	str	r3, [r7, #32]
          break;
 800587e:	e080      	b.n	8005982 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d00b      	beq.n	80058a0 <HAL_GPIO_Init+0x1dc>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d007      	beq.n	80058a0 <HAL_GPIO_Init+0x1dc>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	2b03      	cmp	r3, #3
 8005896:	d003      	beq.n	80058a0 <HAL_GPIO_Init+0x1dc>
 8005898:	21dc      	movs	r1, #220	; 0xdc
 800589a:	4831      	ldr	r0, [pc, #196]	; (8005960 <HAL_GPIO_Init+0x29c>)
 800589c:	f7fe fece 	bl	800463c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	3304      	adds	r3, #4
 80058a6:	623b      	str	r3, [r7, #32]
          break;
 80058a8:	e06b      	b.n	8005982 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d00b      	beq.n	80058ca <HAL_GPIO_Init+0x206>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d007      	beq.n	80058ca <HAL_GPIO_Init+0x206>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d003      	beq.n	80058ca <HAL_GPIO_Init+0x206>
 80058c2:	21e3      	movs	r1, #227	; 0xe3
 80058c4:	4826      	ldr	r0, [pc, #152]	; (8005960 <HAL_GPIO_Init+0x29c>)
 80058c6:	f7fe feb9 	bl	800463c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	3308      	adds	r3, #8
 80058d0:	623b      	str	r3, [r7, #32]
          break;
 80058d2:	e056      	b.n	8005982 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d00b      	beq.n	80058f4 <HAL_GPIO_Init+0x230>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d007      	beq.n	80058f4 <HAL_GPIO_Init+0x230>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d003      	beq.n	80058f4 <HAL_GPIO_Init+0x230>
 80058ec:	21ea      	movs	r1, #234	; 0xea
 80058ee:	481c      	ldr	r0, [pc, #112]	; (8005960 <HAL_GPIO_Init+0x29c>)
 80058f0:	f7fe fea4 	bl	800463c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	330c      	adds	r3, #12
 80058fa:	623b      	str	r3, [r7, #32]
          break;
 80058fc:	e041      	b.n	8005982 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <HAL_GPIO_Init+0x25a>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d007      	beq.n	800591e <HAL_GPIO_Init+0x25a>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d003      	beq.n	800591e <HAL_GPIO_Init+0x25a>
 8005916:	21f7      	movs	r1, #247	; 0xf7
 8005918:	4811      	ldr	r0, [pc, #68]	; (8005960 <HAL_GPIO_Init+0x29c>)
 800591a:	f7fe fe8f 	bl	800463c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005926:	2304      	movs	r3, #4
 8005928:	623b      	str	r3, [r7, #32]
          break;
 800592a:	e02a      	b.n	8005982 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d105      	bne.n	8005940 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005934:	2308      	movs	r3, #8
 8005936:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	611a      	str	r2, [r3, #16]
          break;
 800593e:	e020      	b.n	8005982 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005940:	2308      	movs	r3, #8
 8005942:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	615a      	str	r2, [r3, #20]
          break;
 800594a:	e01a      	b.n	8005982 <HAL_GPIO_Init+0x2be>
 800594c:	40010800 	.word	0x40010800
 8005950:	40010c00 	.word	0x40010c00
 8005954:	40011000 	.word	0x40011000
 8005958:	40011400 	.word	0x40011400
 800595c:	40011800 	.word	0x40011800
 8005960:	08008ef4 	.word	0x08008ef4
 8005964:	10110000 	.word	0x10110000
 8005968:	10210000 	.word	0x10210000
 800596c:	10310000 	.word	0x10310000
 8005970:	10120000 	.word	0x10120000
 8005974:	10220000 	.word	0x10220000
 8005978:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800597c:	2300      	movs	r3, #0
 800597e:	623b      	str	r3, [r7, #32]
          break;
 8005980:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	2bff      	cmp	r3, #255	; 0xff
 8005986:	d801      	bhi.n	800598c <HAL_GPIO_Init+0x2c8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	e001      	b.n	8005990 <HAL_GPIO_Init+0x2cc>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2bff      	cmp	r3, #255	; 0xff
 8005996:	d802      	bhi.n	800599e <HAL_GPIO_Init+0x2da>
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	e002      	b.n	80059a4 <HAL_GPIO_Init+0x2e0>
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	3b08      	subs	r3, #8
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	210f      	movs	r1, #15
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	43db      	mvns	r3, r3
 80059b4:	401a      	ands	r2, r3
 80059b6:	6a39      	ldr	r1, [r7, #32]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	fa01 f303 	lsl.w	r3, r1, r3
 80059be:	431a      	orrs	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8096 	beq.w	8005afe <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80059d2:	4b52      	ldr	r3, [pc, #328]	; (8005b1c <HAL_GPIO_Init+0x458>)
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	4a51      	ldr	r2, [pc, #324]	; (8005b1c <HAL_GPIO_Init+0x458>)
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	6193      	str	r3, [r2, #24]
 80059de:	4b4f      	ldr	r3, [pc, #316]	; (8005b1c <HAL_GPIO_Init+0x458>)
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	60bb      	str	r3, [r7, #8]
 80059e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80059ea:	4a4d      	ldr	r2, [pc, #308]	; (8005b20 <HAL_GPIO_Init+0x45c>)
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	089b      	lsrs	r3, r3, #2
 80059f0:	3302      	adds	r3, #2
 80059f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	220f      	movs	r2, #15
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43db      	mvns	r3, r3
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a44      	ldr	r2, [pc, #272]	; (8005b24 <HAL_GPIO_Init+0x460>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <HAL_GPIO_Init+0x37a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a43      	ldr	r2, [pc, #268]	; (8005b28 <HAL_GPIO_Init+0x464>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00d      	beq.n	8005a3a <HAL_GPIO_Init+0x376>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a42      	ldr	r2, [pc, #264]	; (8005b2c <HAL_GPIO_Init+0x468>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d007      	beq.n	8005a36 <HAL_GPIO_Init+0x372>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a41      	ldr	r2, [pc, #260]	; (8005b30 <HAL_GPIO_Init+0x46c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d101      	bne.n	8005a32 <HAL_GPIO_Init+0x36e>
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e006      	b.n	8005a40 <HAL_GPIO_Init+0x37c>
 8005a32:	2304      	movs	r3, #4
 8005a34:	e004      	b.n	8005a40 <HAL_GPIO_Init+0x37c>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e002      	b.n	8005a40 <HAL_GPIO_Init+0x37c>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <HAL_GPIO_Init+0x37c>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a42:	f002 0203 	and.w	r2, r2, #3
 8005a46:	0092      	lsls	r2, r2, #2
 8005a48:	4093      	lsls	r3, r2
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005a50:	4933      	ldr	r1, [pc, #204]	; (8005b20 <HAL_GPIO_Init+0x45c>)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	089b      	lsrs	r3, r3, #2
 8005a56:	3302      	adds	r3, #2
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d006      	beq.n	8005a78 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005a6a:	4b32      	ldr	r3, [pc, #200]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4931      	ldr	r1, [pc, #196]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]
 8005a76:	e006      	b.n	8005a86 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005a78:	4b2e      	ldr	r3, [pc, #184]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	492c      	ldr	r1, [pc, #176]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d006      	beq.n	8005aa0 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005a92:	4b28      	ldr	r3, [pc, #160]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	4927      	ldr	r1, [pc, #156]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	604b      	str	r3, [r1, #4]
 8005a9e:	e006      	b.n	8005aae <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005aa0:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	4922      	ldr	r1, [pc, #136]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d006      	beq.n	8005ac8 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005aba:	4b1e      	ldr	r3, [pc, #120]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	491d      	ldr	r1, [pc, #116]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	608b      	str	r3, [r1, #8]
 8005ac6:	e006      	b.n	8005ad6 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005ac8:	4b1a      	ldr	r3, [pc, #104]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	4918      	ldr	r1, [pc, #96]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d006      	beq.n	8005af0 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	4913      	ldr	r1, [pc, #76]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60cb      	str	r3, [r1, #12]
 8005aee:	e006      	b.n	8005afe <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005af0:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	43db      	mvns	r3, r3
 8005af8:	490e      	ldr	r1, [pc, #56]	; (8005b34 <HAL_GPIO_Init+0x470>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	3301      	adds	r3, #1
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f47f ae4f 	bne.w	80057b2 <HAL_GPIO_Init+0xee>
  }
}
 8005b14:	bf00      	nop
 8005b16:	3728      	adds	r7, #40	; 0x28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010800 	.word	0x40010800
 8005b28:	40010c00 	.word	0x40010c00
 8005b2c:	40011000 	.word	0x40011000
 8005b30:	40011400 	.word	0x40011400
 8005b34:	40010400 	.word	0x40010400

08005b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005b44:	887b      	ldrh	r3, [r7, #2]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d004      	beq.n	8005b54 <HAL_GPIO_ReadPin+0x1c>
 8005b4a:	887b      	ldrh	r3, [r7, #2]
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <HAL_GPIO_ReadPin+0x26>
 8005b54:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8005b58:	4809      	ldr	r0, [pc, #36]	; (8005b80 <HAL_GPIO_ReadPin+0x48>)
 8005b5a:	f7fe fd6f 	bl	800463c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	887b      	ldrh	r3, [r7, #2]
 8005b64:	4013      	ands	r3, r2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
 8005b6e:	e001      	b.n	8005b74 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b70:	2300      	movs	r3, #0
 8005b72:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	08008ef4 	.word	0x08008ef4

08005b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	807b      	strh	r3, [r7, #2]
 8005b90:	4613      	mov	r3, r2
 8005b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005b94:	887b      	ldrh	r3, [r7, #2]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d004      	beq.n	8005ba4 <HAL_GPIO_WritePin+0x20>
 8005b9a:	887b      	ldrh	r3, [r7, #2]
 8005b9c:	0c1b      	lsrs	r3, r3, #16
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <HAL_GPIO_WritePin+0x2a>
 8005ba4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8005ba8:	480e      	ldr	r0, [pc, #56]	; (8005be4 <HAL_GPIO_WritePin+0x60>)
 8005baa:	f7fe fd47 	bl	800463c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005bae:	787b      	ldrb	r3, [r7, #1]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <HAL_GPIO_WritePin+0x40>
 8005bb4:	787b      	ldrb	r3, [r7, #1]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d004      	beq.n	8005bc4 <HAL_GPIO_WritePin+0x40>
 8005bba:	f240 11d5 	movw	r1, #469	; 0x1d5
 8005bbe:	4809      	ldr	r0, [pc, #36]	; (8005be4 <HAL_GPIO_WritePin+0x60>)
 8005bc0:	f7fe fd3c 	bl	800463c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8005bc4:	787b      	ldrb	r3, [r7, #1]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bca:	887a      	ldrh	r2, [r7, #2]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005bd0:	e003      	b.n	8005bda <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005bd2:	887b      	ldrh	r3, [r7, #2]
 8005bd4:	041a      	lsls	r2, r3, #16
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]
}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	08008ef4 	.word	0x08008ef4

08005be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e1ab      	b.n	8005f52 <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4aa0      	ldr	r2, [pc, #640]	; (8005e80 <HAL_I2C_Init+0x298>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d009      	beq.n	8005c18 <HAL_I2C_Init+0x30>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a9e      	ldr	r2, [pc, #632]	; (8005e84 <HAL_I2C_Init+0x29c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_I2C_Init+0x30>
 8005c0e:	f240 11d1 	movw	r1, #465	; 0x1d1
 8005c12:	489d      	ldr	r0, [pc, #628]	; (8005e88 <HAL_I2C_Init+0x2a0>)
 8005c14:	f7fe fd12 	bl	800463c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d004      	beq.n	8005c2a <HAL_I2C_Init+0x42>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4a99      	ldr	r2, [pc, #612]	; (8005e8c <HAL_I2C_Init+0x2a4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d904      	bls.n	8005c34 <HAL_I2C_Init+0x4c>
 8005c2a:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8005c2e:	4896      	ldr	r0, [pc, #600]	; (8005e88 <HAL_I2C_Init+0x2a0>)
 8005c30:	f7fe fd04 	bl	800463c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d009      	beq.n	8005c50 <HAL_I2C_Init+0x68>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c44:	d004      	beq.n	8005c50 <HAL_I2C_Init+0x68>
 8005c46:	f240 11d3 	movw	r1, #467	; 0x1d3
 8005c4a:	488f      	ldr	r0, [pc, #572]	; (8005e88 <HAL_I2C_Init+0x2a0>)
 8005c4c:	f7fe fcf6 	bl	800463c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c58:	f023 0303 	bic.w	r3, r3, #3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <HAL_I2C_Init+0x82>
 8005c60:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8005c64:	4888      	ldr	r0, [pc, #544]	; (8005e88 <HAL_I2C_Init+0x2a0>)
 8005c66:	f7fe fce9 	bl	800463c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c72:	d009      	beq.n	8005c88 <HAL_I2C_Init+0xa0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c7c:	d004      	beq.n	8005c88 <HAL_I2C_Init+0xa0>
 8005c7e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8005c82:	4881      	ldr	r0, [pc, #516]	; (8005e88 <HAL_I2C_Init+0x2a0>)
 8005c84:	f7fe fcda 	bl	800463c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_I2C_Init+0xba>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d004      	beq.n	8005ca2 <HAL_I2C_Init+0xba>
 8005c98:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8005c9c:	487a      	ldr	r0, [pc, #488]	; (8005e88 <HAL_I2C_Init+0x2a0>)
 8005c9e:	f7fe fccd 	bl	800463c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d004      	beq.n	8005cb8 <HAL_I2C_Init+0xd0>
 8005cae:	f240 11d7 	movw	r1, #471	; 0x1d7
 8005cb2:	4875      	ldr	r0, [pc, #468]	; (8005e88 <HAL_I2C_Init+0x2a0>)
 8005cb4:	f7fe fcc2 	bl	800463c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <HAL_I2C_Init+0xea>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	2b40      	cmp	r3, #64	; 0x40
 8005cc6:	d004      	beq.n	8005cd2 <HAL_I2C_Init+0xea>
 8005cc8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8005ccc:	486e      	ldr	r0, [pc, #440]	; (8005e88 <HAL_I2C_Init+0x2a0>)
 8005cce:	f7fe fcb5 	bl	800463c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <HAL_I2C_Init+0x104>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	2b80      	cmp	r3, #128	; 0x80
 8005ce0:	d004      	beq.n	8005cec <HAL_I2C_Init+0x104>
 8005ce2:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ce6:	4868      	ldr	r0, [pc, #416]	; (8005e88 <HAL_I2C_Init+0x2a0>)
 8005ce8:	f7fe fca8 	bl	800463c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7fe fba9 	bl	8004458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2224      	movs	r2, #36	; 0x24
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d2c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d3c:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d3e:	f000 fe79 	bl	8006a34 <HAL_RCC_GetPCLK1Freq>
 8005d42:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4a51      	ldr	r2, [pc, #324]	; (8005e90 <HAL_I2C_Init+0x2a8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d807      	bhi.n	8005d5e <HAL_I2C_Init+0x176>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4a50      	ldr	r2, [pc, #320]	; (8005e94 <HAL_I2C_Init+0x2ac>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	bf94      	ite	ls
 8005d56:	2301      	movls	r3, #1
 8005d58:	2300      	movhi	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	e006      	b.n	8005d6c <HAL_I2C_Init+0x184>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4a4d      	ldr	r2, [pc, #308]	; (8005e98 <HAL_I2C_Init+0x2b0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bf94      	ite	ls
 8005d66:	2301      	movls	r3, #1
 8005d68:	2300      	movhi	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e0ee      	b.n	8005f52 <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a49      	ldr	r2, [pc, #292]	; (8005e9c <HAL_I2C_Init+0x2b4>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	0c9b      	lsrs	r3, r3, #18
 8005d7e:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	4a3b      	ldr	r2, [pc, #236]	; (8005e90 <HAL_I2C_Init+0x2a8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d802      	bhi.n	8005dae <HAL_I2C_Init+0x1c6>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	3301      	adds	r3, #1
 8005dac:	e009      	b.n	8005dc2 <HAL_I2C_Init+0x1da>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005db4:	fb02 f303 	mul.w	r3, r2, r3
 8005db8:	4a39      	ldr	r2, [pc, #228]	; (8005ea0 <HAL_I2C_Init+0x2b8>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	099b      	lsrs	r3, r3, #6
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005dd4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	492c      	ldr	r1, [pc, #176]	; (8005e90 <HAL_I2C_Init+0x2a8>)
 8005dde:	428b      	cmp	r3, r1
 8005de0:	d80d      	bhi.n	8005dfe <HAL_I2C_Init+0x216>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	1e59      	subs	r1, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8005df0:	3301      	adds	r3, #1
 8005df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	bf38      	it	cc
 8005dfa:	2304      	movcc	r3, #4
 8005dfc:	e062      	b.n	8005ec4 <HAL_I2C_Init+0x2dc>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d111      	bne.n	8005e2a <HAL_I2C_Init+0x242>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1e58      	subs	r0, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6859      	ldr	r1, [r3, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	440b      	add	r3, r1
 8005e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	e012      	b.n	8005e50 <HAL_I2C_Init+0x268>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1e58      	subs	r0, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6859      	ldr	r1, [r3, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	0099      	lsls	r1, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e40:	3301      	adds	r3, #1
 8005e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	bf0c      	ite	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	2300      	movne	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <HAL_I2C_Init+0x270>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e035      	b.n	8005ec4 <HAL_I2C_Init+0x2dc>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d121      	bne.n	8005ea4 <HAL_I2C_Init+0x2bc>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	1e58      	subs	r0, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6859      	ldr	r1, [r3, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	440b      	add	r3, r1
 8005e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e72:	3301      	adds	r3, #1
 8005e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e7c:	e022      	b.n	8005ec4 <HAL_I2C_Init+0x2dc>
 8005e7e:	bf00      	nop
 8005e80:	40005400 	.word	0x40005400
 8005e84:	40005800 	.word	0x40005800
 8005e88:	08008f30 	.word	0x08008f30
 8005e8c:	00061a80 	.word	0x00061a80
 8005e90:	000186a0 	.word	0x000186a0
 8005e94:	001e847f 	.word	0x001e847f
 8005e98:	003d08ff 	.word	0x003d08ff
 8005e9c:	431bde83 	.word	0x431bde83
 8005ea0:	10624dd3 	.word	0x10624dd3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	1e58      	subs	r0, r3, #1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6859      	ldr	r1, [r3, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	0099      	lsls	r1, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eba:	3301      	adds	r3, #1
 8005ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	6809      	ldr	r1, [r1, #0]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69da      	ldr	r2, [r3, #28]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ef2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6911      	ldr	r1, [r2, #16]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68d2      	ldr	r2, [r2, #12]
 8005efe:	4311      	orrs	r1, r2
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6812      	ldr	r2, [r2, #0]
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop

08005f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e35c      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01c      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x54>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d116      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x54>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d110      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x54>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x54>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d104      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x54>
 8005fa6:	f240 1167 	movw	r1, #359	; 0x167
 8005faa:	48a5      	ldr	r0, [pc, #660]	; (8006240 <HAL_RCC_OscConfig+0x2e4>)
 8005fac:	f7fe fb46 	bl	800463c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 809a 	beq.w	80060f2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x88>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fce:	d009      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x88>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fd8:	d004      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x88>
 8005fda:	f240 116d 	movw	r1, #365	; 0x16d
 8005fde:	4898      	ldr	r0, [pc, #608]	; (8006240 <HAL_RCC_OscConfig+0x2e4>)
 8005fe0:	f7fe fb2c 	bl	800463c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fe4:	4b97      	ldr	r3, [pc, #604]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f003 030c 	and.w	r3, r3, #12
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d00c      	beq.n	800600a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ff0:	4b94      	ldr	r3, [pc, #592]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f003 030c 	and.w	r3, r3, #12
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d112      	bne.n	8006022 <HAL_RCC_OscConfig+0xc6>
 8005ffc:	4b91      	ldr	r3, [pc, #580]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006008:	d10b      	bne.n	8006022 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800600a:	4b8e      	ldr	r3, [pc, #568]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d06c      	beq.n	80060f0 <HAL_RCC_OscConfig+0x194>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d168      	bne.n	80060f0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e302      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602a:	d106      	bne.n	800603a <HAL_RCC_OscConfig+0xde>
 800602c:	4b85      	ldr	r3, [pc, #532]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a84      	ldr	r2, [pc, #528]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	e02e      	b.n	8006098 <HAL_RCC_OscConfig+0x13c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10c      	bne.n	800605c <HAL_RCC_OscConfig+0x100>
 8006042:	4b80      	ldr	r3, [pc, #512]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a7f      	ldr	r2, [pc, #508]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	4b7d      	ldr	r3, [pc, #500]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a7c      	ldr	r2, [pc, #496]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	e01d      	b.n	8006098 <HAL_RCC_OscConfig+0x13c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006064:	d10c      	bne.n	8006080 <HAL_RCC_OscConfig+0x124>
 8006066:	4b77      	ldr	r3, [pc, #476]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a76      	ldr	r2, [pc, #472]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 800606c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	4b74      	ldr	r3, [pc, #464]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a73      	ldr	r2, [pc, #460]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e00b      	b.n	8006098 <HAL_RCC_OscConfig+0x13c>
 8006080:	4b70      	ldr	r3, [pc, #448]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a6f      	ldr	r2, [pc, #444]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	4b6d      	ldr	r3, [pc, #436]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a6c      	ldr	r2, [pc, #432]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d013      	beq.n	80060c8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a0:	f7fe fdb2 	bl	8004c08 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060a8:	f7fe fdae 	bl	8004c08 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b64      	cmp	r3, #100	; 0x64
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e2b6      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ba:	4b62      	ldr	r3, [pc, #392]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0x14c>
 80060c6:	e014      	b.n	80060f2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c8:	f7fe fd9e 	bl	8004c08 <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d0:	f7fe fd9a 	bl	8004c08 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b64      	cmp	r3, #100	; 0x64
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e2a2      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060e2:	4b58      	ldr	r3, [pc, #352]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f0      	bne.n	80060d0 <HAL_RCC_OscConfig+0x174>
 80060ee:	e000      	b.n	80060f2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d079      	beq.n	80061f2 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_RCC_OscConfig+0x1bc>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d004      	beq.n	8006118 <HAL_RCC_OscConfig+0x1bc>
 800610e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8006112:	484b      	ldr	r0, [pc, #300]	; (8006240 <HAL_RCC_OscConfig+0x2e4>)
 8006114:	f7fe fa92 	bl	800463c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	2b1f      	cmp	r3, #31
 800611e:	d904      	bls.n	800612a <HAL_RCC_OscConfig+0x1ce>
 8006120:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8006124:	4846      	ldr	r0, [pc, #280]	; (8006240 <HAL_RCC_OscConfig+0x2e4>)
 8006126:	f7fe fa89 	bl	800463c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800612a:	4b46      	ldr	r3, [pc, #280]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f003 030c 	and.w	r3, r3, #12
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006136:	4b43      	ldr	r3, [pc, #268]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f003 030c 	and.w	r3, r3, #12
 800613e:	2b08      	cmp	r3, #8
 8006140:	d11c      	bne.n	800617c <HAL_RCC_OscConfig+0x220>
 8006142:	4b40      	ldr	r3, [pc, #256]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d116      	bne.n	800617c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800614e:	4b3d      	ldr	r3, [pc, #244]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_RCC_OscConfig+0x20a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d001      	beq.n	8006166 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e260      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006166:	4b37      	ldr	r3, [pc, #220]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	4933      	ldr	r1, [pc, #204]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 8006176:	4313      	orrs	r3, r2
 8006178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800617a:	e03a      	b.n	80061f2 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d020      	beq.n	80061c6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006184:	4b30      	ldr	r3, [pc, #192]	; (8006248 <HAL_RCC_OscConfig+0x2ec>)
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618a:	f7fe fd3d 	bl	8004c08 <HAL_GetTick>
 800618e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006192:	f7fe fd39 	bl	8004c08 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e241      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061a4:	4b27      	ldr	r3, [pc, #156]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0f0      	beq.n	8006192 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b0:	4b24      	ldr	r3, [pc, #144]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4921      	ldr	r1, [pc, #132]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	600b      	str	r3, [r1, #0]
 80061c4:	e015      	b.n	80061f2 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <HAL_RCC_OscConfig+0x2ec>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061cc:	f7fe fd1c 	bl	8004c08 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d4:	f7fe fd18 	bl	8004c08 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e220      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e6:	4b17      	ldr	r3, [pc, #92]	; (8006244 <HAL_RCC_OscConfig+0x2e8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f0      	bne.n	80061d4 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d048      	beq.n	8006290 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d008      	beq.n	8006218 <HAL_RCC_OscConfig+0x2bc>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d004      	beq.n	8006218 <HAL_RCC_OscConfig+0x2bc>
 800620e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8006212:	480b      	ldr	r0, [pc, #44]	; (8006240 <HAL_RCC_OscConfig+0x2e4>)
 8006214:	f7fe fa12 	bl	800463c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d021      	beq.n	8006264 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <HAL_RCC_OscConfig+0x2f0>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006226:	f7fe fcef 	bl	8004c08 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800622c:	e010      	b.n	8006250 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800622e:	f7fe fceb 	bl	8004c08 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d909      	bls.n	8006250 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e1f3      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
 8006240:	08008f68 	.word	0x08008f68
 8006244:	40021000 	.word	0x40021000
 8006248:	42420000 	.word	0x42420000
 800624c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006250:	4b67      	ldr	r3, [pc, #412]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0e8      	beq.n	800622e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800625c:	2001      	movs	r0, #1
 800625e:	f000 fc11 	bl	8006a84 <RCC_Delay>
 8006262:	e015      	b.n	8006290 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006264:	4b63      	ldr	r3, [pc, #396]	; (80063f4 <HAL_RCC_OscConfig+0x498>)
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800626a:	f7fe fccd 	bl	8004c08 <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006272:	f7fe fcc9 	bl	8004c08 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e1d1      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006284:	4b5a      	ldr	r3, [pc, #360]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f0      	bne.n	8006272 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80c0 	beq.w	800641e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800629e:	2300      	movs	r3, #0
 80062a0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00c      	beq.n	80062c4 <HAL_RCC_OscConfig+0x368>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d008      	beq.n	80062c4 <HAL_RCC_OscConfig+0x368>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	d004      	beq.n	80062c4 <HAL_RCC_OscConfig+0x368>
 80062ba:	f240 2111 	movw	r1, #529	; 0x211
 80062be:	484e      	ldr	r0, [pc, #312]	; (80063f8 <HAL_RCC_OscConfig+0x49c>)
 80062c0:	f7fe f9bc 	bl	800463c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062c4:	4b4a      	ldr	r3, [pc, #296]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10d      	bne.n	80062ec <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d0:	4b47      	ldr	r3, [pc, #284]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	4a46      	ldr	r2, [pc, #280]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 80062d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062da:	61d3      	str	r3, [r2, #28]
 80062dc:	4b44      	ldr	r3, [pc, #272]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e4:	60bb      	str	r3, [r7, #8]
 80062e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062e8:	2301      	movs	r3, #1
 80062ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ec:	4b43      	ldr	r3, [pc, #268]	; (80063fc <HAL_RCC_OscConfig+0x4a0>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d118      	bne.n	800632a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062f8:	4b40      	ldr	r3, [pc, #256]	; (80063fc <HAL_RCC_OscConfig+0x4a0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a3f      	ldr	r2, [pc, #252]	; (80063fc <HAL_RCC_OscConfig+0x4a0>)
 80062fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006304:	f7fe fc80 	bl	8004c08 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800630c:	f7fe fc7c 	bl	8004c08 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b64      	cmp	r3, #100	; 0x64
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e184      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800631e:	4b37      	ldr	r3, [pc, #220]	; (80063fc <HAL_RCC_OscConfig+0x4a0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f0      	beq.n	800630c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d106      	bne.n	8006340 <HAL_RCC_OscConfig+0x3e4>
 8006332:	4b2f      	ldr	r3, [pc, #188]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	4a2e      	ldr	r2, [pc, #184]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	6213      	str	r3, [r2, #32]
 800633e:	e02d      	b.n	800639c <HAL_RCC_OscConfig+0x440>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10c      	bne.n	8006362 <HAL_RCC_OscConfig+0x406>
 8006348:	4b29      	ldr	r3, [pc, #164]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	4a28      	ldr	r2, [pc, #160]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	6213      	str	r3, [r2, #32]
 8006354:	4b26      	ldr	r3, [pc, #152]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	4a25      	ldr	r2, [pc, #148]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 800635a:	f023 0304 	bic.w	r3, r3, #4
 800635e:	6213      	str	r3, [r2, #32]
 8006360:	e01c      	b.n	800639c <HAL_RCC_OscConfig+0x440>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b05      	cmp	r3, #5
 8006368:	d10c      	bne.n	8006384 <HAL_RCC_OscConfig+0x428>
 800636a:	4b21      	ldr	r3, [pc, #132]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	4a20      	ldr	r2, [pc, #128]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 8006370:	f043 0304 	orr.w	r3, r3, #4
 8006374:	6213      	str	r3, [r2, #32]
 8006376:	4b1e      	ldr	r3, [pc, #120]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 800637c:	f043 0301 	orr.w	r3, r3, #1
 8006380:	6213      	str	r3, [r2, #32]
 8006382:	e00b      	b.n	800639c <HAL_RCC_OscConfig+0x440>
 8006384:	4b1a      	ldr	r3, [pc, #104]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	4a19      	ldr	r2, [pc, #100]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	6213      	str	r3, [r2, #32]
 8006390:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	4a16      	ldr	r2, [pc, #88]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 8006396:	f023 0304 	bic.w	r3, r3, #4
 800639a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d015      	beq.n	80063d0 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a4:	f7fe fc30 	bl	8004c08 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063aa:	e00a      	b.n	80063c2 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ac:	f7fe fc2c 	bl	8004c08 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e132      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c2:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <HAL_RCC_OscConfig+0x494>)
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0ee      	beq.n	80063ac <HAL_RCC_OscConfig+0x450>
 80063ce:	e01d      	b.n	800640c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063d0:	f7fe fc1a 	bl	8004c08 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063d6:	e013      	b.n	8006400 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d8:	f7fe fc16 	bl	8004c08 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d90a      	bls.n	8006400 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e11c      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
 80063ee:	bf00      	nop
 80063f0:	40021000 	.word	0x40021000
 80063f4:	42420480 	.word	0x42420480
 80063f8:	08008f68 	.word	0x08008f68
 80063fc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006400:	4b8b      	ldr	r3, [pc, #556]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e5      	bne.n	80063d8 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d105      	bne.n	800641e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006412:	4b87      	ldr	r3, [pc, #540]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	4a86      	ldr	r2, [pc, #536]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 8006418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800641c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00c      	beq.n	8006440 <HAL_RCC_OscConfig+0x4e4>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d008      	beq.n	8006440 <HAL_RCC_OscConfig+0x4e4>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d004      	beq.n	8006440 <HAL_RCC_OscConfig+0x4e4>
 8006436:	f240 21af 	movw	r1, #687	; 0x2af
 800643a:	487e      	ldr	r0, [pc, #504]	; (8006634 <HAL_RCC_OscConfig+0x6d8>)
 800643c:	f7fe f8fe 	bl	800463c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80ee 	beq.w	8006626 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800644a:	4b79      	ldr	r3, [pc, #484]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f003 030c 	and.w	r3, r3, #12
 8006452:	2b08      	cmp	r3, #8
 8006454:	f000 80ce 	beq.w	80065f4 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	2b02      	cmp	r3, #2
 800645e:	f040 80b2 	bne.w	80065c6 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d009      	beq.n	800647e <HAL_RCC_OscConfig+0x522>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006472:	d004      	beq.n	800647e <HAL_RCC_OscConfig+0x522>
 8006474:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8006478:	486e      	ldr	r0, [pc, #440]	; (8006634 <HAL_RCC_OscConfig+0x6d8>)
 800647a:	f7fe f8df 	bl	800463c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	2b00      	cmp	r3, #0
 8006484:	d04a      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800648e:	d045      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006498:	d040      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80064a2:	d03b      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ac:	d036      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80064b6:	d031      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80064c0:	d02c      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80064ca:	d027      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064d4:	d022      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80064de:	d01d      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80064e8:	d018      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80064f2:	d013      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064fc:	d00e      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8006506:	d009      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8006510:	d004      	beq.n	800651c <HAL_RCC_OscConfig+0x5c0>
 8006512:	f240 21b9 	movw	r1, #697	; 0x2b9
 8006516:	4847      	ldr	r0, [pc, #284]	; (8006634 <HAL_RCC_OscConfig+0x6d8>)
 8006518:	f7fe f890 	bl	800463c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651c:	4b46      	ldr	r3, [pc, #280]	; (8006638 <HAL_RCC_OscConfig+0x6dc>)
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006522:	f7fe fb71 	bl	8004c08 <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800652a:	f7fe fb6d 	bl	8004c08 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e075      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800653c:	4b3c      	ldr	r3, [pc, #240]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f0      	bne.n	800652a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006550:	d116      	bne.n	8006580 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <HAL_RCC_OscConfig+0x612>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006562:	d004      	beq.n	800656e <HAL_RCC_OscConfig+0x612>
 8006564:	f240 21cf 	movw	r1, #719	; 0x2cf
 8006568:	4832      	ldr	r0, [pc, #200]	; (8006634 <HAL_RCC_OscConfig+0x6d8>)
 800656a:	f7fe f867 	bl	800463c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800656e:	4b30      	ldr	r3, [pc, #192]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	492d      	ldr	r1, [pc, #180]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 800657c:	4313      	orrs	r3, r2
 800657e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006580:	4b2b      	ldr	r3, [pc, #172]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a19      	ldr	r1, [r3, #32]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	430b      	orrs	r3, r1
 8006592:	4927      	ldr	r1, [pc, #156]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 8006594:	4313      	orrs	r3, r2
 8006596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006598:	4b27      	ldr	r3, [pc, #156]	; (8006638 <HAL_RCC_OscConfig+0x6dc>)
 800659a:	2201      	movs	r2, #1
 800659c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659e:	f7fe fb33 	bl	8004c08 <HAL_GetTick>
 80065a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065a4:	e008      	b.n	80065b8 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a6:	f7fe fb2f 	bl	8004c08 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e037      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065b8:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0f0      	beq.n	80065a6 <HAL_RCC_OscConfig+0x64a>
 80065c4:	e02f      	b.n	8006626 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c6:	4b1c      	ldr	r3, [pc, #112]	; (8006638 <HAL_RCC_OscConfig+0x6dc>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065cc:	f7fe fb1c 	bl	8004c08 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d4:	f7fe fb18 	bl	8004c08 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e020      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065e6:	4b12      	ldr	r3, [pc, #72]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f0      	bne.n	80065d4 <HAL_RCC_OscConfig+0x678>
 80065f2:	e018      	b.n	8006626 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e013      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <HAL_RCC_OscConfig+0x6d4>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	429a      	cmp	r2, r3
 8006612:	d106      	bne.n	8006622 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800661e:	429a      	cmp	r2, r3
 8006620:	d001      	beq.n	8006626 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40021000 	.word	0x40021000
 8006634:	08008f68 	.word	0x08008f68
 8006638:	42420060 	.word	0x42420060

0800663c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e176      	b.n	800693e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d116      	bne.n	800668a <HAL_RCC_ClockConfig+0x4e>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d110      	bne.n	800668a <HAL_RCC_ClockConfig+0x4e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <HAL_RCC_ClockConfig+0x4e>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <HAL_RCC_ClockConfig+0x4e>
 8006680:	f44f 714e 	mov.w	r1, #824	; 0x338
 8006684:	4874      	ldr	r0, [pc, #464]	; (8006858 <HAL_RCC_ClockConfig+0x21c>)
 8006686:	f7fd ffd9 	bl	800463c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x6a>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d007      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x6a>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b02      	cmp	r3, #2
 800669a:	d004      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x6a>
 800669c:	f240 3139 	movw	r1, #825	; 0x339
 80066a0:	486d      	ldr	r0, [pc, #436]	; (8006858 <HAL_RCC_ClockConfig+0x21c>)
 80066a2:	f7fd ffcb 	bl	800463c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066a6:	4b6d      	ldr	r3, [pc, #436]	; (800685c <HAL_RCC_ClockConfig+0x220>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d910      	bls.n	80066d6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b4:	4b69      	ldr	r3, [pc, #420]	; (800685c <HAL_RCC_ClockConfig+0x220>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f023 0207 	bic.w	r2, r3, #7
 80066bc:	4967      	ldr	r1, [pc, #412]	; (800685c <HAL_RCC_ClockConfig+0x220>)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c4:	4b65      	ldr	r3, [pc, #404]	; (800685c <HAL_RCC_ClockConfig+0x220>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d001      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e133      	b.n	800693e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d049      	beq.n	8006776 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066ee:	4b5c      	ldr	r3, [pc, #368]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	4a5b      	ldr	r2, [pc, #364]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 80066f4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066f8:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d005      	beq.n	8006712 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006706:	4b56      	ldr	r3, [pc, #344]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	4a55      	ldr	r2, [pc, #340]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 800670c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006710:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d024      	beq.n	8006764 <HAL_RCC_ClockConfig+0x128>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b80      	cmp	r3, #128	; 0x80
 8006720:	d020      	beq.n	8006764 <HAL_RCC_ClockConfig+0x128>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b90      	cmp	r3, #144	; 0x90
 8006728:	d01c      	beq.n	8006764 <HAL_RCC_ClockConfig+0x128>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2ba0      	cmp	r3, #160	; 0xa0
 8006730:	d018      	beq.n	8006764 <HAL_RCC_ClockConfig+0x128>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2bb0      	cmp	r3, #176	; 0xb0
 8006738:	d014      	beq.n	8006764 <HAL_RCC_ClockConfig+0x128>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2bc0      	cmp	r3, #192	; 0xc0
 8006740:	d010      	beq.n	8006764 <HAL_RCC_ClockConfig+0x128>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2bd0      	cmp	r3, #208	; 0xd0
 8006748:	d00c      	beq.n	8006764 <HAL_RCC_ClockConfig+0x128>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2be0      	cmp	r3, #224	; 0xe0
 8006750:	d008      	beq.n	8006764 <HAL_RCC_ClockConfig+0x128>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2bf0      	cmp	r3, #240	; 0xf0
 8006758:	d004      	beq.n	8006764 <HAL_RCC_ClockConfig+0x128>
 800675a:	f240 315f 	movw	r1, #863	; 0x35f
 800675e:	483e      	ldr	r0, [pc, #248]	; (8006858 <HAL_RCC_ClockConfig+0x21c>)
 8006760:	f7fd ff6c 	bl	800463c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006764:	4b3e      	ldr	r3, [pc, #248]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	493b      	ldr	r1, [pc, #236]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 8006772:	4313      	orrs	r3, r2
 8006774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d051      	beq.n	8006826 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00c      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x168>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d008      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x168>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d004      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x168>
 800679a:	f240 3166 	movw	r1, #870	; 0x366
 800679e:	482e      	ldr	r0, [pc, #184]	; (8006858 <HAL_RCC_ClockConfig+0x21c>)
 80067a0:	f7fd ff4c 	bl	800463c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d107      	bne.n	80067bc <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ac:	4b2c      	ldr	r3, [pc, #176]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d115      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0c0      	b.n	800693e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d107      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067c4:	4b26      	ldr	r3, [pc, #152]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d109      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0b4      	b.n	800693e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d4:	4b22      	ldr	r3, [pc, #136]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0ac      	b.n	800693e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067e4:	4b1e      	ldr	r3, [pc, #120]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f023 0203 	bic.w	r2, r3, #3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	491b      	ldr	r1, [pc, #108]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067f6:	f7fe fa07 	bl	8004c08 <HAL_GetTick>
 80067fa:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fc:	e00a      	b.n	8006814 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067fe:	f7fe fa03 	bl	8004c08 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	f241 3288 	movw	r2, #5000	; 0x1388
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e094      	b.n	800693e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006814:	4b12      	ldr	r3, [pc, #72]	; (8006860 <HAL_RCC_ClockConfig+0x224>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f003 020c 	and.w	r2, r3, #12
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	429a      	cmp	r2, r3
 8006824:	d1eb      	bne.n	80067fe <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006826:	4b0d      	ldr	r3, [pc, #52]	; (800685c <HAL_RCC_ClockConfig+0x220>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d217      	bcs.n	8006864 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006834:	4b09      	ldr	r3, [pc, #36]	; (800685c <HAL_RCC_ClockConfig+0x220>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f023 0207 	bic.w	r2, r3, #7
 800683c:	4907      	ldr	r1, [pc, #28]	; (800685c <HAL_RCC_ClockConfig+0x220>)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	4313      	orrs	r3, r2
 8006842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <HAL_RCC_ClockConfig+0x220>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d008      	beq.n	8006864 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e073      	b.n	800693e <HAL_RCC_ClockConfig+0x302>
 8006856:	bf00      	nop
 8006858:	08008f68 	.word	0x08008f68
 800685c:	40022000 	.word	0x40022000
 8006860:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	d025      	beq.n	80068bc <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d018      	beq.n	80068aa <HAL_RCC_ClockConfig+0x26e>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006880:	d013      	beq.n	80068aa <HAL_RCC_ClockConfig+0x26e>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800688a:	d00e      	beq.n	80068aa <HAL_RCC_ClockConfig+0x26e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006894:	d009      	beq.n	80068aa <HAL_RCC_ClockConfig+0x26e>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800689e:	d004      	beq.n	80068aa <HAL_RCC_ClockConfig+0x26e>
 80068a0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80068a4:	4828      	ldr	r0, [pc, #160]	; (8006948 <HAL_RCC_ClockConfig+0x30c>)
 80068a6:	f7fd fec9 	bl	800463c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068aa:	4b28      	ldr	r3, [pc, #160]	; (800694c <HAL_RCC_ClockConfig+0x310>)
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	4925      	ldr	r1, [pc, #148]	; (800694c <HAL_RCC_ClockConfig+0x310>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d026      	beq.n	8006916 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d018      	beq.n	8006902 <HAL_RCC_ClockConfig+0x2c6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d8:	d013      	beq.n	8006902 <HAL_RCC_ClockConfig+0x2c6>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80068e2:	d00e      	beq.n	8006902 <HAL_RCC_ClockConfig+0x2c6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068ec:	d009      	beq.n	8006902 <HAL_RCC_ClockConfig+0x2c6>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068f6:	d004      	beq.n	8006902 <HAL_RCC_ClockConfig+0x2c6>
 80068f8:	f240 31ab 	movw	r1, #939	; 0x3ab
 80068fc:	4812      	ldr	r0, [pc, #72]	; (8006948 <HAL_RCC_ClockConfig+0x30c>)
 80068fe:	f7fd fe9d 	bl	800463c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <HAL_RCC_ClockConfig+0x310>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	490e      	ldr	r1, [pc, #56]	; (800694c <HAL_RCC_ClockConfig+0x310>)
 8006912:	4313      	orrs	r3, r2
 8006914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006916:	f000 f821 	bl	800695c <HAL_RCC_GetSysClockFreq>
 800691a:	4601      	mov	r1, r0
 800691c:	4b0b      	ldr	r3, [pc, #44]	; (800694c <HAL_RCC_ClockConfig+0x310>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	091b      	lsrs	r3, r3, #4
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <HAL_RCC_ClockConfig+0x314>)
 8006928:	5cd3      	ldrb	r3, [r2, r3]
 800692a:	fa21 f303 	lsr.w	r3, r1, r3
 800692e:	4a09      	ldr	r2, [pc, #36]	; (8006954 <HAL_RCC_ClockConfig+0x318>)
 8006930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <HAL_RCC_ClockConfig+0x31c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe f924 	bl	8004b84 <HAL_InitTick>

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	08008f68 	.word	0x08008f68
 800694c:	40021000 	.word	0x40021000
 8006950:	0800fb1c 	.word	0x0800fb1c
 8006954:	20000000 	.word	0x20000000
 8006958:	20000004 	.word	0x20000004

0800695c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800695c:	b490      	push	{r4, r7}
 800695e:	b08a      	sub	sp, #40	; 0x28
 8006960:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006962:	4b2a      	ldr	r3, [pc, #168]	; (8006a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006964:	1d3c      	adds	r4, r7, #4
 8006966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800696c:	4b28      	ldr	r3, [pc, #160]	; (8006a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	2300      	movs	r3, #0
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	2300      	movs	r3, #0
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006986:	4b23      	ldr	r3, [pc, #140]	; (8006a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 030c 	and.w	r3, r3, #12
 8006992:	2b04      	cmp	r3, #4
 8006994:	d002      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0x40>
 8006996:	2b08      	cmp	r3, #8
 8006998:	d003      	beq.n	80069a2 <HAL_RCC_GetSysClockFreq+0x46>
 800699a:	e02d      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800699c:	4b1e      	ldr	r3, [pc, #120]	; (8006a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 800699e:	623b      	str	r3, [r7, #32]
      break;
 80069a0:	e02d      	b.n	80069fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	0c9b      	lsrs	r3, r3, #18
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80069ae:	4413      	add	r3, r2
 80069b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80069b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d013      	beq.n	80069e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80069c0:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	0c5b      	lsrs	r3, r3, #17
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80069ce:	4413      	add	r3, r2
 80069d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80069d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	4a0f      	ldr	r2, [pc, #60]	; (8006a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069da:	fb02 f203 	mul.w	r2, r2, r3
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
 80069e6:	e004      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <HAL_RCC_GetSysClockFreq+0xc0>)
 80069ec:	fb02 f303 	mul.w	r3, r2, r3
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	623b      	str	r3, [r7, #32]
      break;
 80069f6:	e002      	b.n	80069fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069fa:	623b      	str	r3, [r7, #32]
      break;
 80069fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069fe:	6a3b      	ldr	r3, [r7, #32]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3728      	adds	r7, #40	; 0x28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc90      	pop	{r4, r7}
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	08008fa0 	.word	0x08008fa0
 8006a10:	08008fb0 	.word	0x08008fb0
 8006a14:	40021000 	.word	0x40021000
 8006a18:	007a1200 	.word	0x007a1200
 8006a1c:	003d0900 	.word	0x003d0900

08006a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a24:	4b02      	ldr	r3, [pc, #8]	; (8006a30 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a26:	681b      	ldr	r3, [r3, #0]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr
 8006a30:	20000000 	.word	0x20000000

08006a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a38:	f7ff fff2 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a3c:	4601      	mov	r1, r0
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	0a1b      	lsrs	r3, r3, #8
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	4a03      	ldr	r2, [pc, #12]	; (8006a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a4a:	5cd3      	ldrb	r3, [r2, r3]
 8006a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40021000 	.word	0x40021000
 8006a58:	0800fb2c 	.word	0x0800fb2c

08006a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a60:	f7ff ffde 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a64:	4601      	mov	r1, r0
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	0adb      	lsrs	r3, r3, #11
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	4a03      	ldr	r2, [pc, #12]	; (8006a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a72:	5cd3      	ldrb	r3, [r2, r3]
 8006a74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	0800fb2c 	.word	0x0800fb2c

08006a84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <RCC_Delay+0x34>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a0a      	ldr	r2, [pc, #40]	; (8006abc <RCC_Delay+0x38>)
 8006a92:	fba2 2303 	umull	r2, r3, r2, r3
 8006a96:	0a5b      	lsrs	r3, r3, #9
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	fb02 f303 	mul.w	r3, r2, r3
 8006a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006aa0:	bf00      	nop
  }
  while (Delay --);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1e5a      	subs	r2, r3, #1
 8006aa6:	60fa      	str	r2, [r7, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1f9      	bne.n	8006aa0 <RCC_Delay+0x1c>
}
 8006aac:	bf00      	nop
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	20000000 	.word	0x20000000
 8006abc:	10624dd3 	.word	0x10624dd3

08006ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10f      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0310 	and.w	r3, r3, #16
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006af4:	216c      	movs	r1, #108	; 0x6c
 8006af6:	4873      	ldr	r0, [pc, #460]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8006af8:	f7fd fda0 	bl	800463c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8095 	beq.w	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d012      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b1a:	d00d      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b24:	d008      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b2e:	d003      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006b30:	2172      	movs	r1, #114	; 0x72
 8006b32:	4864      	ldr	r0, [pc, #400]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8006b34:	f7fd fd82 	bl	800463c <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b3c:	4b62      	ldr	r3, [pc, #392]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10d      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b48:	4b5f      	ldr	r3, [pc, #380]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	4a5e      	ldr	r2, [pc, #376]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b52:	61d3      	str	r3, [r2, #28]
 8006b54:	4b5c      	ldr	r3, [pc, #368]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5c:	60bb      	str	r3, [r7, #8]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b60:	2301      	movs	r3, #1
 8006b62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b64:	4b59      	ldr	r3, [pc, #356]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d118      	bne.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b70:	4b56      	ldr	r3, [pc, #344]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a55      	ldr	r2, [pc, #340]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b7c:	f7fe f844 	bl	8004c08 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b82:	e008      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b84:	f7fe f840 	bl	8004c08 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b64      	cmp	r3, #100	; 0x64
 8006b90:	d901      	bls.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e092      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b96:	4b4d      	ldr	r3, [pc, #308]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ba2:	4b49      	ldr	r3, [pc, #292]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006baa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d02e      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d027      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bc0:	4b41      	ldr	r3, [pc, #260]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bca:	4b41      	ldr	r3, [pc, #260]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bcc:	2201      	movs	r2, #1
 8006bce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bd0:	4b3f      	ldr	r3, [pc, #252]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006bd6:	4a3c      	ldr	r2, [pc, #240]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d014      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be6:	f7fe f80f 	bl	8004c08 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bec:	e00a      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bee:	f7fe f80b 	bl	8004c08 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e05b      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c04:	4b30      	ldr	r3, [pc, #192]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0ee      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c10:	4b2d      	ldr	r3, [pc, #180]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	492a      	ldr	r1, [pc, #168]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d105      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c28:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	4a26      	ldr	r2, [pc, #152]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01f      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d012      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c50:	d00d      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c5a:	d008      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c64:	d003      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006c66:	21b9      	movs	r1, #185	; 0xb9
 8006c68:	4816      	ldr	r0, [pc, #88]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8006c6a:	f7fd fce7 	bl	800463c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c6e:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	4913      	ldr	r1, [pc, #76]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0310 	and.w	r3, r3, #16
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d016      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c94:	d008      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006c9e:	f240 1115 	movw	r1, #277	; 0x115
 8006ca2:	4808      	ldr	r0, [pc, #32]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8006ca4:	f7fd fcca 	bl	800463c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ca8:	4b07      	ldr	r3, [pc, #28]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4904      	ldr	r1, [pc, #16]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	08008fb4 	.word	0x08008fb4
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	40007000 	.word	0x40007000
 8006cd0:	42420440 	.word	0x42420440

08006cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e0fd      	b.n	8006ee2 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a80      	ldr	r2, [pc, #512]	; (8006eec <HAL_SPI_Init+0x218>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_SPI_Init+0x30>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a7e      	ldr	r2, [pc, #504]	; (8006ef0 <HAL_SPI_Init+0x21c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d004      	beq.n	8006d04 <HAL_SPI_Init+0x30>
 8006cfa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8006cfe:	487d      	ldr	r0, [pc, #500]	; (8006ef4 <HAL_SPI_Init+0x220>)
 8006d00:	f7fd fc9c 	bl	800463c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d009      	beq.n	8006d20 <HAL_SPI_Init+0x4c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d14:	d004      	beq.n	8006d20 <HAL_SPI_Init+0x4c>
 8006d16:	f240 1159 	movw	r1, #345	; 0x159
 8006d1a:	4876      	ldr	r0, [pc, #472]	; (8006ef4 <HAL_SPI_Init+0x220>)
 8006d1c:	f7fd fc8e 	bl	800463c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00e      	beq.n	8006d46 <HAL_SPI_Init+0x72>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d30:	d009      	beq.n	8006d46 <HAL_SPI_Init+0x72>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d3a:	d004      	beq.n	8006d46 <HAL_SPI_Init+0x72>
 8006d3c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8006d40:	486c      	ldr	r0, [pc, #432]	; (8006ef4 <HAL_SPI_Init+0x220>)
 8006d42:	f7fd fc7b 	bl	800463c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d4e:	d008      	beq.n	8006d62 <HAL_SPI_Init+0x8e>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <HAL_SPI_Init+0x8e>
 8006d58:	f240 115b 	movw	r1, #347	; 0x15b
 8006d5c:	4865      	ldr	r0, [pc, #404]	; (8006ef4 <HAL_SPI_Init+0x220>)
 8006d5e:	f7fd fc6d 	bl	800463c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6a:	d00d      	beq.n	8006d88 <HAL_SPI_Init+0xb4>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d009      	beq.n	8006d88 <HAL_SPI_Init+0xb4>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d7c:	d004      	beq.n	8006d88 <HAL_SPI_Init+0xb4>
 8006d7e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8006d82:	485c      	ldr	r0, [pc, #368]	; (8006ef4 <HAL_SPI_Init+0x220>)
 8006d84:	f7fd fc5a 	bl	800463c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d020      	beq.n	8006dd2 <HAL_SPI_Init+0xfe>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d01c      	beq.n	8006dd2 <HAL_SPI_Init+0xfe>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d018      	beq.n	8006dd2 <HAL_SPI_Init+0xfe>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	2b18      	cmp	r3, #24
 8006da6:	d014      	beq.n	8006dd2 <HAL_SPI_Init+0xfe>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	2b20      	cmp	r3, #32
 8006dae:	d010      	beq.n	8006dd2 <HAL_SPI_Init+0xfe>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	2b28      	cmp	r3, #40	; 0x28
 8006db6:	d00c      	beq.n	8006dd2 <HAL_SPI_Init+0xfe>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	2b30      	cmp	r3, #48	; 0x30
 8006dbe:	d008      	beq.n	8006dd2 <HAL_SPI_Init+0xfe>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	2b38      	cmp	r3, #56	; 0x38
 8006dc6:	d004      	beq.n	8006dd2 <HAL_SPI_Init+0xfe>
 8006dc8:	f240 115d 	movw	r1, #349	; 0x15d
 8006dcc:	4849      	ldr	r0, [pc, #292]	; (8006ef4 <HAL_SPI_Init+0x220>)
 8006dce:	f7fd fc35 	bl	800463c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <HAL_SPI_Init+0x118>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	2b80      	cmp	r3, #128	; 0x80
 8006de0:	d004      	beq.n	8006dec <HAL_SPI_Init+0x118>
 8006de2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006de6:	4843      	ldr	r0, [pc, #268]	; (8006ef4 <HAL_SPI_Init+0x220>)
 8006de8:	f7fd fc28 	bl	800463c <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <HAL_SPI_Init+0x12a>
 8006df4:	f240 1161 	movw	r1, #353	; 0x161
 8006df8:	483e      	ldr	r0, [pc, #248]	; (8006ef4 <HAL_SPI_Init+0x220>)
 8006dfa:	f7fd fc1f 	bl	800463c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d119      	bne.n	8006e3a <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <HAL_SPI_Init+0x14c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d004      	beq.n	8006e20 <HAL_SPI_Init+0x14c>
 8006e16:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8006e1a:	4836      	ldr	r0, [pc, #216]	; (8006ef4 <HAL_SPI_Init+0x220>)
 8006e1c:	f7fd fc0e 	bl	800463c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d008      	beq.n	8006e3a <HAL_SPI_Init+0x166>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d004      	beq.n	8006e3a <HAL_SPI_Init+0x166>
 8006e30:	f240 1165 	movw	r1, #357	; 0x165
 8006e34:	482f      	ldr	r0, [pc, #188]	; (8006ef4 <HAL_SPI_Init+0x220>)
 8006e36:	f7fd fc01 	bl	800463c <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d106      	bne.n	8006e5a <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7fd fc33 	bl	80046c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	431a      	orrs	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	ea42 0103 	orr.w	r1, r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	0c1a      	lsrs	r2, r3, #16
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f002 0204 	and.w	r2, r2, #4
 8006ec0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	40013000 	.word	0x40013000
 8006ef0:	40003800 	.word	0x40003800
 8006ef4:	08009004 	.word	0x08009004

08006ef8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	4613      	mov	r3, r2
 8006f06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <HAL_SPI_Transmit+0x30>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f1c:	d004      	beq.n	8006f28 <HAL_SPI_Transmit+0x30>
 8006f1e:	f240 310a 	movw	r1, #778	; 0x30a
 8006f22:	4896      	ldr	r0, [pc, #600]	; (800717c <HAL_SPI_Transmit+0x284>)
 8006f24:	f7fd fb8a 	bl	800463c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_SPI_Transmit+0x3e>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e11e      	b.n	8007174 <HAL_SPI_Transmit+0x27c>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f3e:	f7fd fe63 	bl	8004c08 <HAL_GetTick>
 8006f42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d002      	beq.n	8006f5a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8006f54:	2302      	movs	r3, #2
 8006f56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f58:	e103      	b.n	8007162 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <HAL_SPI_Transmit+0x6e>
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d102      	bne.n	8006f6c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f6a:	e0fa      	b.n	8007162 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2203      	movs	r2, #3
 8006f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	88fa      	ldrh	r2, [r7, #6]
 8006f84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	88fa      	ldrh	r2, [r7, #6]
 8006f8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb2:	d107      	bne.n	8006fc4 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b40      	cmp	r3, #64	; 0x40
 8006fd0:	d007      	beq.n	8006fe2 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fe0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fea:	d14b      	bne.n	8007084 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HAL_SPI_Transmit+0x102>
 8006ff4:	8afb      	ldrh	r3, [r7, #22]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d13e      	bne.n	8007078 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	881a      	ldrh	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	1c9a      	adds	r2, r3, #2
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800701e:	e02b      	b.n	8007078 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b02      	cmp	r3, #2
 800702c:	d112      	bne.n	8007054 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	881a      	ldrh	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	1c9a      	adds	r2, r3, #2
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	86da      	strh	r2, [r3, #54]	; 0x36
 8007052:	e011      	b.n	8007078 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007054:	f7fd fdd8 	bl	8004c08 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d803      	bhi.n	800706c <HAL_SPI_Transmit+0x174>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706a:	d102      	bne.n	8007072 <HAL_SPI_Transmit+0x17a>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d102      	bne.n	8007078 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007076:	e074      	b.n	8007162 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1ce      	bne.n	8007020 <HAL_SPI_Transmit+0x128>
 8007082:	e04c      	b.n	800711e <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <HAL_SPI_Transmit+0x19a>
 800708c:	8afb      	ldrh	r3, [r7, #22]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d140      	bne.n	8007114 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	330c      	adds	r3, #12
 800709c:	7812      	ldrb	r2, [r2, #0]
 800709e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070b8:	e02c      	b.n	8007114 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d113      	bne.n	80070f0 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	7812      	ldrb	r2, [r2, #0]
 80070d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80070ee:	e011      	b.n	8007114 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070f0:	f7fd fd8a 	bl	8004c08 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d803      	bhi.n	8007108 <HAL_SPI_Transmit+0x210>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d102      	bne.n	800710e <HAL_SPI_Transmit+0x216>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007112:	e026      	b.n	8007162 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1cd      	bne.n	80070ba <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 f896 	bl	8007254 <SPI_EndRxTxTransaction>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10a      	bne.n	8007152 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800713c:	2300      	movs	r3, #0
 800713e:	613b      	str	r3, [r7, #16]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	77fb      	strb	r3, [r7, #31]
 800715e:	e000      	b.n	8007162 <HAL_SPI_Transmit+0x26a>
  }

error:
 8007160:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007172:	7ffb      	ldrb	r3, [r7, #31]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3720      	adds	r7, #32
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	08009004 	.word	0x08009004

08007180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	4613      	mov	r3, r2
 800718e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007190:	e04c      	b.n	800722c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007198:	d048      	beq.n	800722c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800719a:	f7fd fd35 	bl	8004c08 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d902      	bls.n	80071b0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d13d      	bne.n	800722c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071c8:	d111      	bne.n	80071ee <SPI_WaitFlagStateUntilTimeout+0x6e>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071d2:	d004      	beq.n	80071de <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071dc:	d107      	bne.n	80071ee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f6:	d10f      	bne.n	8007218 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007216:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e00f      	b.n	800724c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4013      	ands	r3, r2
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	429a      	cmp	r2, r3
 800723a:	bf0c      	ite	eq
 800723c:	2301      	moveq	r3, #1
 800723e:	2300      	movne	r3, #0
 8007240:	b2db      	uxtb	r3, r3
 8007242:	461a      	mov	r2, r3
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	429a      	cmp	r2, r3
 8007248:	d1a3      	bne.n	8007192 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af02      	add	r7, sp, #8
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2200      	movs	r2, #0
 8007268:	2180      	movs	r1, #128	; 0x80
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff ff88 	bl	8007180 <SPI_WaitFlagStateUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727a:	f043 0220 	orr.w	r2, r3, #32
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e000      	b.n	8007288 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e06f      	b.n	8007382 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a39      	ldr	r2, [pc, #228]	; (800738c <HAL_TIM_Base_Init+0xfc>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d013      	beq.n	80072d4 <HAL_TIM_Base_Init+0x44>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b4:	d00e      	beq.n	80072d4 <HAL_TIM_Base_Init+0x44>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a35      	ldr	r2, [pc, #212]	; (8007390 <HAL_TIM_Base_Init+0x100>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d009      	beq.n	80072d4 <HAL_TIM_Base_Init+0x44>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a33      	ldr	r2, [pc, #204]	; (8007394 <HAL_TIM_Base_Init+0x104>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d004      	beq.n	80072d4 <HAL_TIM_Base_Init+0x44>
 80072ca:	f44f 7189 	mov.w	r1, #274	; 0x112
 80072ce:	4832      	ldr	r0, [pc, #200]	; (8007398 <HAL_TIM_Base_Init+0x108>)
 80072d0:	f7fd f9b4 	bl	800463c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d014      	beq.n	8007306 <HAL_TIM_Base_Init+0x76>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b10      	cmp	r3, #16
 80072e2:	d010      	beq.n	8007306 <HAL_TIM_Base_Init+0x76>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d00c      	beq.n	8007306 <HAL_TIM_Base_Init+0x76>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d008      	beq.n	8007306 <HAL_TIM_Base_Init+0x76>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b60      	cmp	r3, #96	; 0x60
 80072fa:	d004      	beq.n	8007306 <HAL_TIM_Base_Init+0x76>
 80072fc:	f240 1113 	movw	r1, #275	; 0x113
 8007300:	4825      	ldr	r0, [pc, #148]	; (8007398 <HAL_TIM_Base_Init+0x108>)
 8007302:	f7fd f99b 	bl	800463c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00e      	beq.n	800732c <HAL_TIM_Base_Init+0x9c>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007316:	d009      	beq.n	800732c <HAL_TIM_Base_Init+0x9c>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007320:	d004      	beq.n	800732c <HAL_TIM_Base_Init+0x9c>
 8007322:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007326:	481c      	ldr	r0, [pc, #112]	; (8007398 <HAL_TIM_Base_Init+0x108>)
 8007328:	f7fd f988 	bl	800463c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <HAL_TIM_Base_Init+0xb6>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	2b80      	cmp	r3, #128	; 0x80
 800733a:	d004      	beq.n	8007346 <HAL_TIM_Base_Init+0xb6>
 800733c:	f240 1115 	movw	r1, #277	; 0x115
 8007340:	4815      	ldr	r0, [pc, #84]	; (8007398 <HAL_TIM_Base_Init+0x108>)
 8007342:	f7fd f97b 	bl	800463c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7fd fb2e 	bl	80049bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3304      	adds	r3, #4
 8007370:	4619      	mov	r1, r3
 8007372:	4610      	mov	r0, r2
 8007374:	f000 fae8 	bl	8007948 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	40012c00 	.word	0x40012c00
 8007390:	40000400 	.word	0x40000400
 8007394:	40000800 	.word	0x40000800
 8007398:	0800903c 	.word	0x0800903c

0800739c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a1a      	ldr	r2, [pc, #104]	; (8007414 <HAL_TIM_Base_Start+0x78>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d013      	beq.n	80073d6 <HAL_TIM_Base_Start+0x3a>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b6:	d00e      	beq.n	80073d6 <HAL_TIM_Base_Start+0x3a>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a16      	ldr	r2, [pc, #88]	; (8007418 <HAL_TIM_Base_Start+0x7c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d009      	beq.n	80073d6 <HAL_TIM_Base_Start+0x3a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a15      	ldr	r2, [pc, #84]	; (800741c <HAL_TIM_Base_Start+0x80>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_TIM_Base_Start+0x3a>
 80073cc:	f240 1185 	movw	r1, #389	; 0x185
 80073d0:	4813      	ldr	r0, [pc, #76]	; (8007420 <HAL_TIM_Base_Start+0x84>)
 80073d2:	f7fd f933 	bl	800463c <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2202      	movs	r2, #2
 80073da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b06      	cmp	r3, #6
 80073ee:	d007      	beq.n	8007400 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0201 	orr.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800
 8007420:	0800903c 	.word	0x0800903c

08007424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_TIM_ConfigClockSource+0x18>
 8007438:	2302      	movs	r3, #2
 800743a:	e279      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x50c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007454:	d029      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x86>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800745e:	d024      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x86>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d020      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x86>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b10      	cmp	r3, #16
 800746e:	d01c      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x86>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b20      	cmp	r3, #32
 8007476:	d018      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x86>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b30      	cmp	r3, #48	; 0x30
 800747e:	d014      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x86>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b40      	cmp	r3, #64	; 0x40
 8007486:	d010      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x86>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b50      	cmp	r3, #80	; 0x50
 800748e:	d00c      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x86>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b60      	cmp	r3, #96	; 0x60
 8007496:	d008      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x86>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b70      	cmp	r3, #112	; 0x70
 800749e:	d004      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x86>
 80074a0:	f241 118a 	movw	r1, #4490	; 0x118a
 80074a4:	4896      	ldr	r0, [pc, #600]	; (8007700 <HAL_TIM_ConfigClockSource+0x2dc>)
 80074a6:	f7fd f8c9 	bl	800463c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	f000 81b6 	beq.w	8007840 <HAL_TIM_ConfigClockSource+0x41c>
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d80f      	bhi.n	80074f8 <HAL_TIM_ConfigClockSource+0xd4>
 80074d8:	2b10      	cmp	r3, #16
 80074da:	f000 81fd 	beq.w	80078d8 <HAL_TIM_ConfigClockSource+0x4b4>
 80074de:	2b10      	cmp	r3, #16
 80074e0:	d803      	bhi.n	80074ea <HAL_TIM_ConfigClockSource+0xc6>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 81f8 	beq.w	80078d8 <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80074e8:	e219      	b.n	800791e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	f000 81f4 	beq.w	80078d8 <HAL_TIM_ConfigClockSource+0x4b4>
 80074f0:	2b30      	cmp	r3, #48	; 0x30
 80074f2:	f000 81f1 	beq.w	80078d8 <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 80074f6:	e212      	b.n	800791e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 80074f8:	2b70      	cmp	r3, #112	; 0x70
 80074fa:	d02e      	beq.n	800755a <HAL_TIM_ConfigClockSource+0x136>
 80074fc:	2b70      	cmp	r3, #112	; 0x70
 80074fe:	d806      	bhi.n	800750e <HAL_TIM_ConfigClockSource+0xea>
 8007500:	2b50      	cmp	r3, #80	; 0x50
 8007502:	f000 8105 	beq.w	8007710 <HAL_TIM_ConfigClockSource+0x2ec>
 8007506:	2b60      	cmp	r3, #96	; 0x60
 8007508:	f000 814e 	beq.w	80077a8 <HAL_TIM_ConfigClockSource+0x384>
      break;
 800750c:	e207      	b.n	800791e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800750e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007512:	d004      	beq.n	800751e <HAL_TIM_ConfigClockSource+0xfa>
 8007514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007518:	f000 808a 	beq.w	8007630 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800751c:	e1ff      	b.n	800791e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a78      	ldr	r2, [pc, #480]	; (8007704 <HAL_TIM_ConfigClockSource+0x2e0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	f000 81f9 	beq.w	800791c <HAL_TIM_ConfigClockSource+0x4f8>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007532:	f000 81f3 	beq.w	800791c <HAL_TIM_ConfigClockSource+0x4f8>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a73      	ldr	r2, [pc, #460]	; (8007708 <HAL_TIM_ConfigClockSource+0x2e4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	f000 81ed 	beq.w	800791c <HAL_TIM_ConfigClockSource+0x4f8>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a71      	ldr	r2, [pc, #452]	; (800770c <HAL_TIM_ConfigClockSource+0x2e8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	f000 81e7 	beq.w	800791c <HAL_TIM_ConfigClockSource+0x4f8>
 800754e:	f241 1196 	movw	r1, #4502	; 0x1196
 8007552:	486b      	ldr	r0, [pc, #428]	; (8007700 <HAL_TIM_ConfigClockSource+0x2dc>)
 8007554:	f7fd f872 	bl	800463c <assert_failed>
      break;
 8007558:	e1e0      	b.n	800791c <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a69      	ldr	r2, [pc, #420]	; (8007704 <HAL_TIM_ConfigClockSource+0x2e0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d013      	beq.n	800758c <HAL_TIM_ConfigClockSource+0x168>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756c:	d00e      	beq.n	800758c <HAL_TIM_ConfigClockSource+0x168>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a65      	ldr	r2, [pc, #404]	; (8007708 <HAL_TIM_ConfigClockSource+0x2e4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d009      	beq.n	800758c <HAL_TIM_ConfigClockSource+0x168>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a63      	ldr	r2, [pc, #396]	; (800770c <HAL_TIM_ConfigClockSource+0x2e8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d004      	beq.n	800758c <HAL_TIM_ConfigClockSource+0x168>
 8007582:	f241 119d 	movw	r1, #4509	; 0x119d
 8007586:	485e      	ldr	r0, [pc, #376]	; (8007700 <HAL_TIM_ConfigClockSource+0x2dc>)
 8007588:	f7fd f858 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d013      	beq.n	80075bc <HAL_TIM_ConfigClockSource+0x198>
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759c:	d00e      	beq.n	80075bc <HAL_TIM_ConfigClockSource+0x198>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a6:	d009      	beq.n	80075bc <HAL_TIM_ConfigClockSource+0x198>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075b0:	d004      	beq.n	80075bc <HAL_TIM_ConfigClockSource+0x198>
 80075b2:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 80075b6:	4852      	ldr	r0, [pc, #328]	; (8007700 <HAL_TIM_ConfigClockSource+0x2dc>)
 80075b8:	f7fd f840 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c4:	d014      	beq.n	80075f0 <HAL_TIM_ConfigClockSource+0x1cc>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d010      	beq.n	80075f0 <HAL_TIM_ConfigClockSource+0x1cc>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00c      	beq.n	80075f0 <HAL_TIM_ConfigClockSource+0x1cc>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d008      	beq.n	80075f0 <HAL_TIM_ConfigClockSource+0x1cc>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b0a      	cmp	r3, #10
 80075e4:	d004      	beq.n	80075f0 <HAL_TIM_ConfigClockSource+0x1cc>
 80075e6:	f241 11a1 	movw	r1, #4513	; 0x11a1
 80075ea:	4845      	ldr	r0, [pc, #276]	; (8007700 <HAL_TIM_ConfigClockSource+0x2dc>)
 80075ec:	f7fd f826 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	2b0f      	cmp	r3, #15
 80075f6:	d904      	bls.n	8007602 <HAL_TIM_ConfigClockSource+0x1de>
 80075f8:	f241 11a2 	movw	r1, #4514	; 0x11a2
 80075fc:	4840      	ldr	r0, [pc, #256]	; (8007700 <HAL_TIM_ConfigClockSource+0x2dc>)
 80075fe:	f7fd f81d 	bl	800463c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	6899      	ldr	r1, [r3, #8]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f000 fa72 	bl	8007afa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007624:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	609a      	str	r2, [r3, #8]
      break;
 800762e:	e176      	b.n	800791e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a33      	ldr	r2, [pc, #204]	; (8007704 <HAL_TIM_ConfigClockSource+0x2e0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x23e>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007642:	d00e      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x23e>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a2f      	ldr	r2, [pc, #188]	; (8007708 <HAL_TIM_ConfigClockSource+0x2e4>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x23e>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a2e      	ldr	r2, [pc, #184]	; (800770c <HAL_TIM_ConfigClockSource+0x2e8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x23e>
 8007658:	f241 11b5 	movw	r1, #4533	; 0x11b5
 800765c:	4828      	ldr	r0, [pc, #160]	; (8007700 <HAL_TIM_ConfigClockSource+0x2dc>)
 800765e:	f7fc ffed 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d013      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0x26e>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007672:	d00e      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0x26e>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800767c:	d009      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0x26e>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007686:	d004      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0x26e>
 8007688:	f241 11b8 	movw	r1, #4536	; 0x11b8
 800768c:	481c      	ldr	r0, [pc, #112]	; (8007700 <HAL_TIM_ConfigClockSource+0x2dc>)
 800768e:	f7fc ffd5 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769a:	d014      	beq.n	80076c6 <HAL_TIM_ConfigClockSource+0x2a2>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d010      	beq.n	80076c6 <HAL_TIM_ConfigClockSource+0x2a2>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00c      	beq.n	80076c6 <HAL_TIM_ConfigClockSource+0x2a2>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d008      	beq.n	80076c6 <HAL_TIM_ConfigClockSource+0x2a2>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b0a      	cmp	r3, #10
 80076ba:	d004      	beq.n	80076c6 <HAL_TIM_ConfigClockSource+0x2a2>
 80076bc:	f241 11b9 	movw	r1, #4537	; 0x11b9
 80076c0:	480f      	ldr	r0, [pc, #60]	; (8007700 <HAL_TIM_ConfigClockSource+0x2dc>)
 80076c2:	f7fc ffbb 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	d904      	bls.n	80076d8 <HAL_TIM_ConfigClockSource+0x2b4>
 80076ce:	f241 11ba 	movw	r1, #4538	; 0x11ba
 80076d2:	480b      	ldr	r0, [pc, #44]	; (8007700 <HAL_TIM_ConfigClockSource+0x2dc>)
 80076d4:	f7fc ffb2 	bl	800463c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	6899      	ldr	r1, [r3, #8]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f000 fa07 	bl	8007afa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689a      	ldr	r2, [r3, #8]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076fa:	609a      	str	r2, [r3, #8]
      break;
 80076fc:	e10f      	b.n	800791e <HAL_TIM_ConfigClockSource+0x4fa>
 80076fe:	bf00      	nop
 8007700:	0800903c 	.word	0x0800903c
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40000400 	.word	0x40000400
 800770c:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a88      	ldr	r2, [pc, #544]	; (8007938 <HAL_TIM_ConfigClockSource+0x514>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x31e>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007722:	d00e      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x31e>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a84      	ldr	r2, [pc, #528]	; (800793c <HAL_TIM_ConfigClockSource+0x518>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d009      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x31e>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a83      	ldr	r2, [pc, #524]	; (8007940 <HAL_TIM_ConfigClockSource+0x51c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d004      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0x31e>
 8007738:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800773c:	4881      	ldr	r0, [pc, #516]	; (8007944 <HAL_TIM_ConfigClockSource+0x520>)
 800773e:	f7fc ff7d 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800774a:	d014      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x352>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d010      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x352>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00c      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x352>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d008      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x352>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b0a      	cmp	r3, #10
 800776a:	d004      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x352>
 800776c:	f241 11cc 	movw	r1, #4556	; 0x11cc
 8007770:	4874      	ldr	r0, [pc, #464]	; (8007944 <HAL_TIM_ConfigClockSource+0x520>)
 8007772:	f7fc ff63 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	2b0f      	cmp	r3, #15
 800777c:	d904      	bls.n	8007788 <HAL_TIM_ConfigClockSource+0x364>
 800777e:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8007782:	4870      	ldr	r0, [pc, #448]	; (8007944 <HAL_TIM_ConfigClockSource+0x520>)
 8007784:	f7fc ff5a 	bl	800463c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6818      	ldr	r0, [r3, #0]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	6859      	ldr	r1, [r3, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	461a      	mov	r2, r3
 8007796:	f000 f939 	bl	8007a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2150      	movs	r1, #80	; 0x50
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 f990 	bl	8007ac6 <TIM_ITRx_SetConfig>
      break;
 80077a6:	e0ba      	b.n	800791e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a62      	ldr	r2, [pc, #392]	; (8007938 <HAL_TIM_ConfigClockSource+0x514>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d013      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x3b6>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ba:	d00e      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x3b6>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a5e      	ldr	r2, [pc, #376]	; (800793c <HAL_TIM_ConfigClockSource+0x518>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d009      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x3b6>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a5d      	ldr	r2, [pc, #372]	; (8007940 <HAL_TIM_ConfigClockSource+0x51c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d004      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x3b6>
 80077d0:	f241 11d9 	movw	r1, #4569	; 0x11d9
 80077d4:	485b      	ldr	r0, [pc, #364]	; (8007944 <HAL_TIM_ConfigClockSource+0x520>)
 80077d6:	f7fc ff31 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e2:	d014      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x3ea>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d010      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x3ea>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00c      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x3ea>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d008      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x3ea>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b0a      	cmp	r3, #10
 8007802:	d004      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x3ea>
 8007804:	f241 11dc 	movw	r1, #4572	; 0x11dc
 8007808:	484e      	ldr	r0, [pc, #312]	; (8007944 <HAL_TIM_ConfigClockSource+0x520>)
 800780a:	f7fc ff17 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	2b0f      	cmp	r3, #15
 8007814:	d904      	bls.n	8007820 <HAL_TIM_ConfigClockSource+0x3fc>
 8007816:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800781a:	484a      	ldr	r0, [pc, #296]	; (8007944 <HAL_TIM_ConfigClockSource+0x520>)
 800781c:	f7fc ff0e 	bl	800463c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	6859      	ldr	r1, [r3, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	461a      	mov	r2, r3
 800782e:	f000 f91b 	bl	8007a68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2160      	movs	r1, #96	; 0x60
 8007838:	4618      	mov	r0, r3
 800783a:	f000 f944 	bl	8007ac6 <TIM_ITRx_SetConfig>
      break;
 800783e:	e06e      	b.n	800791e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a3c      	ldr	r2, [pc, #240]	; (8007938 <HAL_TIM_ConfigClockSource+0x514>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d013      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x44e>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007852:	d00e      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x44e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a38      	ldr	r2, [pc, #224]	; (800793c <HAL_TIM_ConfigClockSource+0x518>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d009      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x44e>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a37      	ldr	r2, [pc, #220]	; (8007940 <HAL_TIM_ConfigClockSource+0x51c>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d004      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x44e>
 8007868:	f241 11e9 	movw	r1, #4585	; 0x11e9
 800786c:	4835      	ldr	r0, [pc, #212]	; (8007944 <HAL_TIM_ConfigClockSource+0x520>)
 800786e:	f7fc fee5 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800787a:	d014      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x482>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d010      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x482>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00c      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x482>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d008      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x482>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	2b0a      	cmp	r3, #10
 800789a:	d004      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x482>
 800789c:	f241 11ec 	movw	r1, #4588	; 0x11ec
 80078a0:	4828      	ldr	r0, [pc, #160]	; (8007944 <HAL_TIM_ConfigClockSource+0x520>)
 80078a2:	f7fc fecb 	bl	800463c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	2b0f      	cmp	r3, #15
 80078ac:	d904      	bls.n	80078b8 <HAL_TIM_ConfigClockSource+0x494>
 80078ae:	f241 11ed 	movw	r1, #4589	; 0x11ed
 80078b2:	4824      	ldr	r0, [pc, #144]	; (8007944 <HAL_TIM_ConfigClockSource+0x520>)
 80078b4:	f7fc fec2 	bl	800463c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6818      	ldr	r0, [r3, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	6859      	ldr	r1, [r3, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	461a      	mov	r2, r3
 80078c6:	f000 f8a1 	bl	8007a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2140      	movs	r1, #64	; 0x40
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 f8f8 	bl	8007ac6 <TIM_ITRx_SetConfig>
      break;
 80078d6:	e022      	b.n	800791e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a16      	ldr	r2, [pc, #88]	; (8007938 <HAL_TIM_ConfigClockSource+0x514>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <HAL_TIM_ConfigClockSource+0x4e6>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ea:	d00e      	beq.n	800790a <HAL_TIM_ConfigClockSource+0x4e6>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a12      	ldr	r2, [pc, #72]	; (800793c <HAL_TIM_ConfigClockSource+0x518>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d009      	beq.n	800790a <HAL_TIM_ConfigClockSource+0x4e6>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a11      	ldr	r2, [pc, #68]	; (8007940 <HAL_TIM_ConfigClockSource+0x51c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d004      	beq.n	800790a <HAL_TIM_ConfigClockSource+0x4e6>
 8007900:	f241 11fc 	movw	r1, #4604	; 0x11fc
 8007904:	480f      	ldr	r0, [pc, #60]	; (8007944 <HAL_TIM_ConfigClockSource+0x520>)
 8007906:	f7fc fe99 	bl	800463c <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f000 f8d6 	bl	8007ac6 <TIM_ITRx_SetConfig>
      break;
 800791a:	e000      	b.n	800791e <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 800791c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	40012c00 	.word	0x40012c00
 800793c:	40000400 	.word	0x40000400
 8007940:	40000800 	.word	0x40000800
 8007944:	0800903c 	.word	0x0800903c

08007948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a29      	ldr	r2, [pc, #164]	; (8007a00 <TIM_Base_SetConfig+0xb8>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00b      	beq.n	8007978 <TIM_Base_SetConfig+0x30>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007966:	d007      	beq.n	8007978 <TIM_Base_SetConfig+0x30>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a26      	ldr	r2, [pc, #152]	; (8007a04 <TIM_Base_SetConfig+0xbc>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d003      	beq.n	8007978 <TIM_Base_SetConfig+0x30>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a25      	ldr	r2, [pc, #148]	; (8007a08 <TIM_Base_SetConfig+0xc0>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d108      	bne.n	800798a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1c      	ldr	r2, [pc, #112]	; (8007a00 <TIM_Base_SetConfig+0xb8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00b      	beq.n	80079aa <TIM_Base_SetConfig+0x62>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007998:	d007      	beq.n	80079aa <TIM_Base_SetConfig+0x62>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a19      	ldr	r2, [pc, #100]	; (8007a04 <TIM_Base_SetConfig+0xbc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d003      	beq.n	80079aa <TIM_Base_SetConfig+0x62>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a18      	ldr	r2, [pc, #96]	; (8007a08 <TIM_Base_SetConfig+0xc0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d108      	bne.n	80079bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a07      	ldr	r2, [pc, #28]	; (8007a00 <TIM_Base_SetConfig+0xb8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d103      	bne.n	80079f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	615a      	str	r2, [r3, #20]
}
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bc80      	pop	{r7}
 80079fe:	4770      	bx	lr
 8007a00:	40012c00 	.word	0x40012c00
 8007a04:	40000400 	.word	0x40000400
 8007a08:	40000800 	.word	0x40000800

08007a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f023 0201 	bic.w	r2, r3, #1
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f023 030a 	bic.w	r3, r3, #10
 8007a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	621a      	str	r2, [r3, #32]
}
 8007a5e:	bf00      	nop
 8007a60:	371c      	adds	r7, #28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr

08007a68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	f023 0210 	bic.w	r2, r3, #16
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	031b      	lsls	r3, r3, #12
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007aa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	621a      	str	r2, [r3, #32]
}
 8007abc:	bf00      	nop
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr

08007ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	f043 0307 	orr.w	r3, r3, #7
 8007ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	609a      	str	r2, [r3, #8]
}
 8007af0:	bf00      	nop
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr

08007afa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b087      	sub	sp, #28
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	021a      	lsls	r2, r3, #8
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	609a      	str	r2, [r3, #8]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a43      	ldr	r2, [pc, #268]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d013      	beq.n	8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b54:	d00e      	beq.n	8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a3f      	ldr	r2, [pc, #252]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d009      	beq.n	8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a3d      	ldr	r2, [pc, #244]	; (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d004      	beq.n	8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8007b6a:	f240 6164 	movw	r1, #1636	; 0x664
 8007b6e:	483c      	ldr	r0, [pc, #240]	; (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007b70:	f7fc fd64 	bl	800463c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d020      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b10      	cmp	r3, #16
 8007b82:	d01c      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b20      	cmp	r3, #32
 8007b8a:	d018      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b30      	cmp	r3, #48	; 0x30
 8007b92:	d014      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b40      	cmp	r3, #64	; 0x40
 8007b9a:	d010      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b50      	cmp	r3, #80	; 0x50
 8007ba2:	d00c      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b60      	cmp	r3, #96	; 0x60
 8007baa:	d008      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b70      	cmp	r3, #112	; 0x70
 8007bb2:	d004      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007bb4:	f240 6165 	movw	r1, #1637	; 0x665
 8007bb8:	4829      	ldr	r0, [pc, #164]	; (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007bba:	f7fc fd3f 	bl	800463c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	2b80      	cmp	r3, #128	; 0x80
 8007bc4:	d008      	beq.n	8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d004      	beq.n	8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007bce:	f240 6166 	movw	r1, #1638	; 0x666
 8007bd2:	4823      	ldr	r0, [pc, #140]	; (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007bd4:	f7fc fd32 	bl	800463c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e032      	b.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c1e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	40012c00 	.word	0x40012c00
 8007c58:	40000400 	.word	0x40000400
 8007c5c:	40000800 	.word	0x40000800
 8007c60:	08009074 	.word	0x08009074

08007c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e092      	b.n	8007d9c <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d02c      	beq.n	8007cd8 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a48      	ldr	r2, [pc, #288]	; (8007da4 <HAL_UART_Init+0x140>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d00e      	beq.n	8007ca6 <HAL_UART_Init+0x42>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a46      	ldr	r2, [pc, #280]	; (8007da8 <HAL_UART_Init+0x144>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d009      	beq.n	8007ca6 <HAL_UART_Init+0x42>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a45      	ldr	r2, [pc, #276]	; (8007dac <HAL_UART_Init+0x148>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d004      	beq.n	8007ca6 <HAL_UART_Init+0x42>
 8007c9c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007ca0:	4843      	ldr	r0, [pc, #268]	; (8007db0 <HAL_UART_Init+0x14c>)
 8007ca2:	f7fc fccb 	bl	800463c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d028      	beq.n	8007d00 <HAL_UART_Init+0x9c>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb6:	d023      	beq.n	8007d00 <HAL_UART_Init+0x9c>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc0:	d01e      	beq.n	8007d00 <HAL_UART_Init+0x9c>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cca:	d019      	beq.n	8007d00 <HAL_UART_Init+0x9c>
 8007ccc:	f240 1147 	movw	r1, #327	; 0x147
 8007cd0:	4837      	ldr	r0, [pc, #220]	; (8007db0 <HAL_UART_Init+0x14c>)
 8007cd2:	f7fc fcb3 	bl	800463c <assert_failed>
 8007cd6:	e013      	b.n	8007d00 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a31      	ldr	r2, [pc, #196]	; (8007da4 <HAL_UART_Init+0x140>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00e      	beq.n	8007d00 <HAL_UART_Init+0x9c>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a30      	ldr	r2, [pc, #192]	; (8007da8 <HAL_UART_Init+0x144>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d009      	beq.n	8007d00 <HAL_UART_Init+0x9c>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a2e      	ldr	r2, [pc, #184]	; (8007dac <HAL_UART_Init+0x148>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d004      	beq.n	8007d00 <HAL_UART_Init+0x9c>
 8007cf6:	f240 114b 	movw	r1, #331	; 0x14b
 8007cfa:	482d      	ldr	r0, [pc, #180]	; (8007db0 <HAL_UART_Init+0x14c>)
 8007cfc:	f7fc fc9e 	bl	800463c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d009      	beq.n	8007d1c <HAL_UART_Init+0xb8>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d10:	d004      	beq.n	8007d1c <HAL_UART_Init+0xb8>
 8007d12:	f240 114d 	movw	r1, #333	; 0x14d
 8007d16:	4826      	ldr	r0, [pc, #152]	; (8007db0 <HAL_UART_Init+0x14c>)
 8007d18:	f7fc fc90 	bl	800463c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d106      	bne.n	8007d36 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7fc fe89 	bl	8004a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2224      	movs	r2, #36	; 0x24
 8007d3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fa66 	bl	8008220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691a      	ldr	r2, [r3, #16]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	695a      	ldr	r2, [r3, #20]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2220      	movs	r2, #32
 8007d96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	40013800 	.word	0x40013800
 8007da8:	40004400 	.word	0x40004400
 8007dac:	40004800 	.word	0x40004800
 8007db0:	080090b0 	.word	0x080090b0

08007db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f003 030f 	and.w	r3, r3, #15
 8007de2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10d      	bne.n	8007e06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	f003 0320 	and.w	r3, r3, #32
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d008      	beq.n	8007e06 <HAL_UART_IRQHandler+0x52>
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f003 0320 	and.w	r3, r3, #32
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f98d 	bl	800811e <UART_Receive_IT>
      return;
 8007e04:	e0cc      	b.n	8007fa0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 80ab 	beq.w	8007f64 <HAL_UART_IRQHandler+0x1b0>
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d105      	bne.n	8007e24 <HAL_UART_IRQHandler+0x70>
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 80a0 	beq.w	8007f64 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <HAL_UART_IRQHandler+0x90>
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3c:	f043 0201 	orr.w	r2, r3, #1
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <HAL_UART_IRQHandler+0xb0>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e5c:	f043 0202 	orr.w	r2, r3, #2
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <HAL_UART_IRQHandler+0xd0>
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7c:	f043 0204 	orr.w	r2, r3, #4
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	f003 0308 	and.w	r3, r3, #8
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <HAL_UART_IRQHandler+0xf0>
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d005      	beq.n	8007ea4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	f043 0208 	orr.w	r2, r3, #8
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d078      	beq.n	8007f9e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x112>
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f92c 	bl	800811e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bf14      	ite	ne
 8007ed4:	2301      	movne	r3, #1
 8007ed6:	2300      	moveq	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee0:	f003 0308 	and.w	r3, r3, #8
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d102      	bne.n	8007eee <HAL_UART_IRQHandler+0x13a>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d031      	beq.n	8007f52 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f877 	bl	8007fe2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d023      	beq.n	8007f4a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695a      	ldr	r2, [r3, #20]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d013      	beq.n	8007f42 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	4a22      	ldr	r2, [pc, #136]	; (8007fa8 <HAL_UART_IRQHandler+0x1f4>)
 8007f20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fd fb56 	bl	80055d8 <HAL_DMA_Abort_IT>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d016      	beq.n	8007f60 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f40:	e00e      	b.n	8007f60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f844 	bl	8007fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f48:	e00a      	b.n	8007f60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f840 	bl	8007fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f50:	e006      	b.n	8007f60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f83c 	bl	8007fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007f5e:	e01e      	b.n	8007f9e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f60:	bf00      	nop
    return;
 8007f62:	e01c      	b.n	8007f9e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d008      	beq.n	8007f80 <HAL_UART_IRQHandler+0x1cc>
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f863 	bl	8008044 <UART_Transmit_IT>
    return;
 8007f7e:	e00f      	b.n	8007fa0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <HAL_UART_IRQHandler+0x1ec>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f8aa 	bl	80080ee <UART_EndTransmit_IT>
    return;
 8007f9a:	bf00      	nop
 8007f9c:	e000      	b.n	8007fa0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8007f9e:	bf00      	nop
  }
}
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	0800801d 	.word	0x0800801d

08007fac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc80      	pop	{r7}
 8007fbc:	4770      	bx	lr

08007fbe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bc80      	pop	{r7}
 8007fce:	4770      	bx	lr

08007fd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bc80      	pop	{r7}
 8007fe0:	4770      	bx	lr

08007fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68da      	ldr	r2, [r3, #12]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ff8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	695a      	ldr	r2, [r3, #20]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0201 	bic.w	r2, r2, #1
 8008008:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2220      	movs	r2, #32
 800800e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	bc80      	pop	{r7}
 800801a:	4770      	bx	lr

0800801c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7ff ffca 	bl	8007fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800803c:	bf00      	nop
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b21      	cmp	r3, #33	; 0x21
 8008056:	d144      	bne.n	80080e2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008060:	d11a      	bne.n	8008098 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008076:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d105      	bne.n	800808c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	1c9a      	adds	r2, r3, #2
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	621a      	str	r2, [r3, #32]
 800808a:	e00e      	b.n	80080aa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	621a      	str	r2, [r3, #32]
 8008096:	e008      	b.n	80080aa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	1c59      	adds	r1, r3, #1
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	6211      	str	r1, [r2, #32]
 80080a2:	781a      	ldrb	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	4619      	mov	r1, r3
 80080b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10f      	bne.n	80080de <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68da      	ldr	r2, [r3, #12]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e000      	b.n	80080e4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080e2:	2302      	movs	r3, #2
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bc80      	pop	{r7}
 80080ec:	4770      	bx	lr

080080ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008104:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2220      	movs	r2, #32
 800810a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff ff4c 	bl	8007fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b22      	cmp	r3, #34	; 0x22
 8008130:	d171      	bne.n	8008216 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813a:	d123      	bne.n	8008184 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008140:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10e      	bne.n	8008168 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	b29b      	uxth	r3, r3
 8008152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	1c9a      	adds	r2, r3, #2
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	629a      	str	r2, [r3, #40]	; 0x28
 8008166:	e029      	b.n	80081bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	b29b      	uxth	r3, r3
 8008170:	b2db      	uxtb	r3, r3
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	629a      	str	r2, [r3, #40]	; 0x28
 8008182:	e01b      	b.n	80081bc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10a      	bne.n	80081a2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6858      	ldr	r0, [r3, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	1c59      	adds	r1, r3, #1
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6291      	str	r1, [r2, #40]	; 0x28
 800819c:	b2c2      	uxtb	r2, r0
 800819e:	701a      	strb	r2, [r3, #0]
 80081a0:	e00c      	b.n	80081bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	1c58      	adds	r0, r3, #1
 80081b0:	6879      	ldr	r1, [r7, #4]
 80081b2:	6288      	str	r0, [r1, #40]	; 0x28
 80081b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	3b01      	subs	r3, #1
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	4619      	mov	r1, r3
 80081ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d120      	bne.n	8008212 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0220 	bic.w	r2, r2, #32
 80081de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68da      	ldr	r2, [r3, #12]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	695a      	ldr	r2, [r3, #20]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0201 	bic.w	r2, r2, #1
 80081fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2220      	movs	r2, #32
 8008204:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff fed8 	bl	8007fbe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	e002      	b.n	8008218 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e000      	b.n	8008218 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008216:	2302      	movs	r3, #2
  }
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	4a84      	ldr	r2, [pc, #528]	; (8008440 <UART_SetConfig+0x220>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d904      	bls.n	800823c <UART_SetConfig+0x1c>
 8008232:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8008236:	4883      	ldr	r0, [pc, #524]	; (8008444 <UART_SetConfig+0x224>)
 8008238:	f7fc fa00 	bl	800463c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d009      	beq.n	8008258 <UART_SetConfig+0x38>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800824c:	d004      	beq.n	8008258 <UART_SetConfig+0x38>
 800824e:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8008252:	487c      	ldr	r0, [pc, #496]	; (8008444 <UART_SetConfig+0x224>)
 8008254:	f7fc f9f2 	bl	800463c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00e      	beq.n	800827e <UART_SetConfig+0x5e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008268:	d009      	beq.n	800827e <UART_SetConfig+0x5e>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008272:	d004      	beq.n	800827e <UART_SetConfig+0x5e>
 8008274:	f640 31ff 	movw	r1, #3071	; 0xbff
 8008278:	4872      	ldr	r0, [pc, #456]	; (8008444 <UART_SetConfig+0x224>)
 800827a:	f7fc f9df 	bl	800463c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	695a      	ldr	r2, [r3, #20]
 8008282:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008286:	4013      	ands	r3, r2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d103      	bne.n	8008294 <UART_SetConfig+0x74>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d104      	bne.n	800829e <UART_SetConfig+0x7e>
 8008294:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8008298:	486a      	ldr	r0, [pc, #424]	; (8008444 <UART_SetConfig+0x224>)
 800829a:	f7fc f9cf 	bl	800463c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	431a      	orrs	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80082d0:	f023 030c 	bic.w	r3, r3, #12
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6812      	ldr	r2, [r2, #0]
 80082d8:	68f9      	ldr	r1, [r7, #12]
 80082da:	430b      	orrs	r3, r1
 80082dc:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699a      	ldr	r2, [r3, #24]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a53      	ldr	r2, [pc, #332]	; (8008448 <UART_SetConfig+0x228>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d14e      	bne.n	800839c <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80082fe:	f7fe fbad 	bl	8006a5c <HAL_RCC_GetPCLK2Freq>
 8008302:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	009a      	lsls	r2, r3, #2
 800830e:	441a      	add	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	fbb2 f3f3 	udiv	r3, r2, r3
 800831a:	4a4c      	ldr	r2, [pc, #304]	; (800844c <UART_SetConfig+0x22c>)
 800831c:	fba2 2303 	umull	r2, r3, r2, r3
 8008320:	095b      	lsrs	r3, r3, #5
 8008322:	0119      	lsls	r1, r3, #4
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	009a      	lsls	r2, r3, #2
 800832e:	441a      	add	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	fbb2 f2f3 	udiv	r2, r2, r3
 800833a:	4b44      	ldr	r3, [pc, #272]	; (800844c <UART_SetConfig+0x22c>)
 800833c:	fba3 0302 	umull	r0, r3, r3, r2
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	2064      	movs	r0, #100	; 0x64
 8008344:	fb00 f303 	mul.w	r3, r0, r3
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	011b      	lsls	r3, r3, #4
 800834c:	3332      	adds	r3, #50	; 0x32
 800834e:	4a3f      	ldr	r2, [pc, #252]	; (800844c <UART_SetConfig+0x22c>)
 8008350:	fba2 2303 	umull	r2, r3, r2, r3
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800835a:	4419      	add	r1, r3
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009a      	lsls	r2, r3, #2
 8008366:	441a      	add	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008372:	4b36      	ldr	r3, [pc, #216]	; (800844c <UART_SetConfig+0x22c>)
 8008374:	fba3 0302 	umull	r0, r3, r3, r2
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	2064      	movs	r0, #100	; 0x64
 800837c:	fb00 f303 	mul.w	r3, r0, r3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	3332      	adds	r3, #50	; 0x32
 8008386:	4a31      	ldr	r2, [pc, #196]	; (800844c <UART_SetConfig+0x22c>)
 8008388:	fba2 2303 	umull	r2, r3, r2, r3
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	f003 020f 	and.w	r2, r3, #15
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	440a      	add	r2, r1
 8008398:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800839a:	e04d      	b.n	8008438 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 800839c:	f7fe fb4a 	bl	8006a34 <HAL_RCC_GetPCLK1Freq>
 80083a0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	4613      	mov	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	009a      	lsls	r2, r3, #2
 80083ac:	441a      	add	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b8:	4a24      	ldr	r2, [pc, #144]	; (800844c <UART_SetConfig+0x22c>)
 80083ba:	fba2 2303 	umull	r2, r3, r2, r3
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	0119      	lsls	r1, r3, #4
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009a      	lsls	r2, r3, #2
 80083cc:	441a      	add	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80083d8:	4b1c      	ldr	r3, [pc, #112]	; (800844c <UART_SetConfig+0x22c>)
 80083da:	fba3 0302 	umull	r0, r3, r3, r2
 80083de:	095b      	lsrs	r3, r3, #5
 80083e0:	2064      	movs	r0, #100	; 0x64
 80083e2:	fb00 f303 	mul.w	r3, r0, r3
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	3332      	adds	r3, #50	; 0x32
 80083ec:	4a17      	ldr	r2, [pc, #92]	; (800844c <UART_SetConfig+0x22c>)
 80083ee:	fba2 2303 	umull	r2, r3, r2, r3
 80083f2:	095b      	lsrs	r3, r3, #5
 80083f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083f8:	4419      	add	r1, r3
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	4613      	mov	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	009a      	lsls	r2, r3, #2
 8008404:	441a      	add	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008410:	4b0e      	ldr	r3, [pc, #56]	; (800844c <UART_SetConfig+0x22c>)
 8008412:	fba3 0302 	umull	r0, r3, r3, r2
 8008416:	095b      	lsrs	r3, r3, #5
 8008418:	2064      	movs	r0, #100	; 0x64
 800841a:	fb00 f303 	mul.w	r3, r0, r3
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	3332      	adds	r3, #50	; 0x32
 8008424:	4a09      	ldr	r2, [pc, #36]	; (800844c <UART_SetConfig+0x22c>)
 8008426:	fba2 2303 	umull	r2, r3, r2, r3
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	f003 020f 	and.w	r2, r3, #15
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	440a      	add	r2, r1
 8008436:	609a      	str	r2, [r3, #8]
}
 8008438:	bf00      	nop
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	0044aa20 	.word	0x0044aa20
 8008444:	080090b0 	.word	0x080090b0
 8008448:	40013800 	.word	0x40013800
 800844c:	51eb851f 	.word	0x51eb851f

08008450 <_Znaj>:
 8008450:	f000 b800 	b.w	8008454 <_Znwj>

08008454 <_Znwj>:
 8008454:	b510      	push	{r4, lr}
 8008456:	2800      	cmp	r0, #0
 8008458:	bf14      	ite	ne
 800845a:	4604      	movne	r4, r0
 800845c:	2401      	moveq	r4, #1
 800845e:	4620      	mov	r0, r4
 8008460:	f000 fae6 	bl	8008a30 <malloc>
 8008464:	b930      	cbnz	r0, 8008474 <_Znwj+0x20>
 8008466:	f000 f807 	bl	8008478 <_ZSt15get_new_handlerv>
 800846a:	b908      	cbnz	r0, 8008470 <_Znwj+0x1c>
 800846c:	f000 faaf 	bl	80089ce <abort>
 8008470:	4780      	blx	r0
 8008472:	e7f4      	b.n	800845e <_Znwj+0xa>
 8008474:	bd10      	pop	{r4, pc}
	...

08008478 <_ZSt15get_new_handlerv>:
 8008478:	4b02      	ldr	r3, [pc, #8]	; (8008484 <_ZSt15get_new_handlerv+0xc>)
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	f3bf 8f5b 	dmb	ish
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	20000494 	.word	0x20000494

08008488 <_ZdlPv>:
 8008488:	f000 bada 	b.w	8008a40 <free>

0800848c <_ZNSaIcEC1Ev>:
 800848c:	4770      	bx	lr

0800848e <_ZNSaIcED1Ev>:
 800848e:	4770      	bx	lr

08008490 <_ZSt17__throw_bad_allocv>:
 8008490:	b508      	push	{r3, lr}
 8008492:	f000 fa9c 	bl	80089ce <abort>

08008496 <_ZSt19__throw_logic_errorPKc>:
 8008496:	b508      	push	{r3, lr}
 8008498:	f000 fa99 	bl	80089ce <abort>

0800849c <_ZSt20__throw_length_errorPKc>:
 800849c:	b508      	push	{r3, lr}
 800849e:	f000 fa96 	bl	80089ce <abort>

080084a2 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80084a2:	b40f      	push	{r0, r1, r2, r3}
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	f107 0410 	add.w	r4, r7, #16
 80084ae:	f854 5b04 	ldr.w	r5, [r4], #4
 80084b2:	4628      	mov	r0, r5
 80084b4:	f7f7 fe4a 	bl	800014c <strlen>
 80084b8:	f200 230e 	addw	r3, r0, #526	; 0x20e
 80084bc:	f023 0307 	bic.w	r3, r3, #7
 80084c0:	ebad 0d03 	sub.w	sp, sp, r3
 80084c4:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80084c8:	4623      	mov	r3, r4
 80084ca:	462a      	mov	r2, r5
 80084cc:	4668      	mov	r0, sp
 80084ce:	607c      	str	r4, [r7, #4]
 80084d0:	f000 fa3c 	bl	800894c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80084d4:	f000 fa7b 	bl	80089ce <abort>

080084d8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80084d8:	b10a      	cbz	r2, 80084de <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80084da:	f000 bab9 	b.w	8008a50 <memcmp>
 80084de:	4610      	mov	r0, r2
 80084e0:	4770      	bx	lr

080084e2 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80084e2:	b10a      	cbz	r2, 80084e8 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80084e4:	f000 bac3 	b.w	8008a6e <memcpy>
 80084e8:	4770      	bx	lr

080084ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80084ea:	6001      	str	r1, [r0, #0]
 80084ec:	4770      	bx	lr

080084ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80084ee:	6800      	ldr	r0, [r0, #0]
 80084f0:	4770      	bx	lr

080084f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80084f2:	6081      	str	r1, [r0, #8]
 80084f4:	4770      	bx	lr

080084f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80084f6:	2200      	movs	r2, #0
 80084f8:	6803      	ldr	r3, [r0, #0]
 80084fa:	6041      	str	r1, [r0, #4]
 80084fc:	545a      	strb	r2, [r3, r1]
 80084fe:	4770      	bx	lr

08008500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008500:	b508      	push	{r3, lr}
 8008502:	680b      	ldr	r3, [r1, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	da02      	bge.n	800850e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8008508:	4809      	ldr	r0, [pc, #36]	; (8008530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800850a:	f7ff ffc7 	bl	800849c <_ZSt20__throw_length_errorPKc>
 800850e:	4293      	cmp	r3, r2
 8008510:	d908      	bls.n	8008524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8008512:	0052      	lsls	r2, r2, #1
 8008514:	4293      	cmp	r3, r2
 8008516:	d205      	bcs.n	8008524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8008518:	2a00      	cmp	r2, #0
 800851a:	bfb6      	itet	lt
 800851c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8008520:	600a      	strge	r2, [r1, #0]
 8008522:	600b      	strlt	r3, [r1, #0]
 8008524:	6808      	ldr	r0, [r1, #0]
 8008526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800852a:	3001      	adds	r0, #1
 800852c:	f7ff bf92 	b.w	8008454 <_Znwj>
 8008530:	0800fb77 	.word	0x0800fb77

08008534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008534:	4603      	mov	r3, r0
 8008536:	f853 0b08 	ldr.w	r0, [r3], #8
 800853a:	4298      	cmp	r0, r3
 800853c:	d001      	beq.n	8008542 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800853e:	f7ff bfa3 	b.w	8008488 <_ZdlPv>
 8008542:	4770      	bx	lr

08008544 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8008544:	b508      	push	{r3, lr}
 8008546:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800854a:	6840      	ldr	r0, [r0, #4]
 800854c:	3901      	subs	r1, #1
 800854e:	1a09      	subs	r1, r1, r0
 8008550:	4291      	cmp	r1, r2
 8008552:	d202      	bcs.n	800855a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff ffa1 	bl	800849c <_ZSt20__throw_length_errorPKc>
 800855a:	bd08      	pop	{r3, pc}

0800855c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800855c:	6803      	ldr	r3, [r0, #0]
 800855e:	428b      	cmp	r3, r1
 8008560:	d806      	bhi.n	8008570 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8008562:	6840      	ldr	r0, [r0, #4]
 8008564:	4418      	add	r0, r3
 8008566:	4281      	cmp	r1, r0
 8008568:	bf94      	ite	ls
 800856a:	2000      	movls	r0, #0
 800856c:	2001      	movhi	r0, #1
 800856e:	4770      	bx	lr
 8008570:	2001      	movs	r0, #1
 8008572:	4770      	bx	lr

08008574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008574:	2a01      	cmp	r2, #1
 8008576:	b510      	push	{r4, lr}
 8008578:	d102      	bne.n	8008580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800857a:	780a      	ldrb	r2, [r1, #0]
 800857c:	7002      	strb	r2, [r0, #0]
 800857e:	bd10      	pop	{r4, pc}
 8008580:	f7ff ffaf 	bl	80084e2 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8008584:	e7fb      	b.n	800857e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08008586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8008586:	2a01      	cmp	r2, #1
 8008588:	b430      	push	{r4, r5}
 800858a:	d103      	bne.n	8008594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800858c:	780b      	ldrb	r3, [r1, #0]
 800858e:	7003      	strb	r3, [r0, #0]
 8008590:	bc30      	pop	{r4, r5}
 8008592:	4770      	bx	lr
 8008594:	2a00      	cmp	r2, #0
 8008596:	d0fb      	beq.n	8008590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8008598:	bc30      	pop	{r4, r5}
 800859a:	f000 ba73 	b.w	8008a84 <memmove>

0800859e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800859e:	b508      	push	{r3, lr}
 80085a0:	1a52      	subs	r2, r2, r1
 80085a2:	f7ff ffe7 	bl	8008574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80085a6:	bd08      	pop	{r3, pc}

080085a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80085a8:	b508      	push	{r3, lr}
 80085aa:	1a52      	subs	r2, r2, r1
 80085ac:	f7ff ffe2 	bl	8008574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80085b0:	bd08      	pop	{r3, pc}

080085b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80085b2:	4288      	cmp	r0, r1
 80085b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085b6:	4604      	mov	r4, r0
 80085b8:	460e      	mov	r6, r1
 80085ba:	d020      	beq.n	80085fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 80085bc:	6802      	ldr	r2, [r0, #0]
 80085be:	f100 0308 	add.w	r3, r0, #8
 80085c2:	429a      	cmp	r2, r3
 80085c4:	bf08      	it	eq
 80085c6:	220f      	moveq	r2, #15
 80085c8:	684d      	ldr	r5, [r1, #4]
 80085ca:	bf18      	it	ne
 80085cc:	6882      	ldrne	r2, [r0, #8]
 80085ce:	42aa      	cmp	r2, r5
 80085d0:	d20b      	bcs.n	80085ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 80085d2:	a902      	add	r1, sp, #8
 80085d4:	f841 5d04 	str.w	r5, [r1, #-4]!
 80085d8:	f7ff ff92 	bl	8008500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80085dc:	4607      	mov	r7, r0
 80085de:	4620      	mov	r0, r4
 80085e0:	f7ff ffa8 	bl	8008534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80085e4:	9b01      	ldr	r3, [sp, #4]
 80085e6:	6027      	str	r7, [r4, #0]
 80085e8:	60a3      	str	r3, [r4, #8]
 80085ea:	b125      	cbz	r5, 80085f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 80085ec:	462a      	mov	r2, r5
 80085ee:	6831      	ldr	r1, [r6, #0]
 80085f0:	6820      	ldr	r0, [r4, #0]
 80085f2:	f7ff ffbf 	bl	8008574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80085f6:	2200      	movs	r2, #0
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	6065      	str	r5, [r4, #4]
 80085fc:	555a      	strb	r2, [r3, r5]
 80085fe:	b003      	add	sp, #12
 8008600:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008602 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8008602:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008606:	4616      	mov	r6, r2
 8008608:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800860c:	6842      	ldr	r2, [r0, #4]
 800860e:	469a      	mov	sl, r3
 8008610:	eba8 0306 	sub.w	r3, r8, r6
 8008614:	1a57      	subs	r7, r2, r1
 8008616:	4413      	add	r3, r2
 8008618:	6802      	ldr	r2, [r0, #0]
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	f100 0308 	add.w	r3, r0, #8
 8008620:	429a      	cmp	r2, r3
 8008622:	460d      	mov	r5, r1
 8008624:	bf14      	ite	ne
 8008626:	6882      	ldrne	r2, [r0, #8]
 8008628:	220f      	moveq	r2, #15
 800862a:	a901      	add	r1, sp, #4
 800862c:	4604      	mov	r4, r0
 800862e:	f7ff ff67 	bl	8008500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008632:	1bbf      	subs	r7, r7, r6
 8008634:	4681      	mov	r9, r0
 8008636:	b11d      	cbz	r5, 8008640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8008638:	462a      	mov	r2, r5
 800863a:	6821      	ldr	r1, [r4, #0]
 800863c:	f7ff ff9a 	bl	8008574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008640:	f1ba 0f00 	cmp.w	sl, #0
 8008644:	d008      	beq.n	8008658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8008646:	f1b8 0f00 	cmp.w	r8, #0
 800864a:	d005      	beq.n	8008658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800864c:	4642      	mov	r2, r8
 800864e:	4651      	mov	r1, sl
 8008650:	eb09 0005 	add.w	r0, r9, r5
 8008654:	f7ff ff8e 	bl	8008574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008658:	b147      	cbz	r7, 800866c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800865a:	6821      	ldr	r1, [r4, #0]
 800865c:	442e      	add	r6, r5
 800865e:	eb05 0008 	add.w	r0, r5, r8
 8008662:	463a      	mov	r2, r7
 8008664:	4431      	add	r1, r6
 8008666:	4448      	add	r0, r9
 8008668:	f7ff ff84 	bl	8008574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800866c:	4620      	mov	r0, r4
 800866e:	f7ff ff61 	bl	8008534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008672:	9b01      	ldr	r3, [sp, #4]
 8008674:	f8c4 9000 	str.w	r9, [r4]
 8008678:	60a3      	str	r3, [r4, #8]
 800867a:	b002      	add	sp, #8
 800867c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8008680:	f100 0208 	add.w	r2, r0, #8
 8008684:	6002      	str	r2, [r0, #0]
 8008686:	2200      	movs	r2, #0
 8008688:	6042      	str	r2, [r0, #4]
 800868a:	7202      	strb	r2, [r0, #8]
 800868c:	4770      	bx	lr

0800868e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800868e:	b570      	push	{r4, r5, r6, lr}
 8008690:	4604      	mov	r4, r0
 8008692:	460e      	mov	r6, r1
 8008694:	3008      	adds	r0, #8
 8008696:	6020      	str	r0, [r4, #0]
 8008698:	f856 3b08 	ldr.w	r3, [r6], #8
 800869c:	460d      	mov	r5, r1
 800869e:	429e      	cmp	r6, r3
 80086a0:	d10b      	bne.n	80086ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 80086a2:	2210      	movs	r2, #16
 80086a4:	4631      	mov	r1, r6
 80086a6:	f7ff ff1c 	bl	80084e2 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80086aa:	686b      	ldr	r3, [r5, #4]
 80086ac:	4620      	mov	r0, r4
 80086ae:	6063      	str	r3, [r4, #4]
 80086b0:	2300      	movs	r3, #0
 80086b2:	602e      	str	r6, [r5, #0]
 80086b4:	606b      	str	r3, [r5, #4]
 80086b6:	722b      	strb	r3, [r5, #8]
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
 80086ba:	6023      	str	r3, [r4, #0]
 80086bc:	688b      	ldr	r3, [r1, #8]
 80086be:	60a3      	str	r3, [r4, #8]
 80086c0:	e7f3      	b.n	80086aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080086c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80086c2:	b510      	push	{r4, lr}
 80086c4:	4604      	mov	r4, r0
 80086c6:	f7ff ff35 	bl	8008534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80086ca:	4620      	mov	r0, r4
 80086cc:	bd10      	pop	{r4, pc}

080086ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80086ce:	b510      	push	{r4, lr}
 80086d0:	4604      	mov	r4, r0
 80086d2:	f7ff ff6e 	bl	80085b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80086d6:	4620      	mov	r0, r4
 80086d8:	bd10      	pop	{r4, pc}
	...

080086dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80086dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e0:	4614      	mov	r4, r2
 80086e2:	4681      	mov	r9, r0
 80086e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086e6:	460f      	mov	r7, r1
 80086e8:	462a      	mov	r2, r5
 80086ea:	4698      	mov	r8, r3
 80086ec:	4621      	mov	r1, r4
 80086ee:	4b37      	ldr	r3, [pc, #220]	; (80087cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 80086f0:	f7ff ff28 	bl	8008544 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80086f4:	464a      	mov	r2, r9
 80086f6:	f852 6b08 	ldr.w	r6, [r2], #8
 80086fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80086fe:	4296      	cmp	r6, r2
 8008700:	bf08      	it	eq
 8008702:	220f      	moveq	r2, #15
 8008704:	eba5 0b04 	sub.w	fp, r5, r4
 8008708:	bf18      	it	ne
 800870a:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 800870e:	eb03 0a0b 	add.w	sl, r3, fp
 8008712:	4552      	cmp	r2, sl
 8008714:	d34e      	bcc.n	80087b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 8008716:	443e      	add	r6, r7
 8008718:	4641      	mov	r1, r8
 800871a:	1bdf      	subs	r7, r3, r7
 800871c:	4648      	mov	r0, r9
 800871e:	1b3f      	subs	r7, r7, r4
 8008720:	f7ff ff1c 	bl	800855c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8008724:	b170      	cbz	r0, 8008744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8008726:	b137      	cbz	r7, 8008736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8008728:	42ac      	cmp	r4, r5
 800872a:	d004      	beq.n	8008736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800872c:	463a      	mov	r2, r7
 800872e:	1931      	adds	r1, r6, r4
 8008730:	1970      	adds	r0, r6, r5
 8008732:	f7ff ff28 	bl	8008586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008736:	b30d      	cbz	r5, 800877c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8008738:	462a      	mov	r2, r5
 800873a:	4641      	mov	r1, r8
 800873c:	4630      	mov	r0, r6
 800873e:	f7ff ff19 	bl	8008574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008742:	e01b      	b.n	800877c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8008744:	b135      	cbz	r5, 8008754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 8008746:	42ac      	cmp	r4, r5
 8008748:	d33c      	bcc.n	80087c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 800874a:	462a      	mov	r2, r5
 800874c:	4641      	mov	r1, r8
 800874e:	4630      	mov	r0, r6
 8008750:	f7ff ff19 	bl	8008586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008754:	b197      	cbz	r7, 800877c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8008756:	42ac      	cmp	r4, r5
 8008758:	d010      	beq.n	800877c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800875a:	463a      	mov	r2, r7
 800875c:	1931      	adds	r1, r6, r4
 800875e:	1970      	adds	r0, r6, r5
 8008760:	f7ff ff11 	bl	8008586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008764:	42ac      	cmp	r4, r5
 8008766:	d209      	bcs.n	800877c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8008768:	4434      	add	r4, r6
 800876a:	eb08 0305 	add.w	r3, r8, r5
 800876e:	429c      	cmp	r4, r3
 8008770:	d30f      	bcc.n	8008792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 8008772:	462a      	mov	r2, r5
 8008774:	4641      	mov	r1, r8
 8008776:	4630      	mov	r0, r6
 8008778:	f7ff ff05 	bl	8008586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800877c:	2200      	movs	r2, #0
 800877e:	4648      	mov	r0, r9
 8008780:	f8d9 3000 	ldr.w	r3, [r9]
 8008784:	f8c9 a004 	str.w	sl, [r9, #4]
 8008788:	f803 200a 	strb.w	r2, [r3, sl]
 800878c:	b003      	add	sp, #12
 800878e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008792:	4544      	cmp	r4, r8
 8008794:	d803      	bhi.n	800879e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 8008796:	462a      	mov	r2, r5
 8008798:	eb08 010b 	add.w	r1, r8, fp
 800879c:	e7ce      	b.n	800873c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800879e:	eba4 0408 	sub.w	r4, r4, r8
 80087a2:	4622      	mov	r2, r4
 80087a4:	4641      	mov	r1, r8
 80087a6:	4630      	mov	r0, r6
 80087a8:	f7ff feed 	bl	8008586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80087ac:	1b2a      	subs	r2, r5, r4
 80087ae:	1971      	adds	r1, r6, r5
 80087b0:	1930      	adds	r0, r6, r4
 80087b2:	e7c4      	b.n	800873e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 80087b4:	9500      	str	r5, [sp, #0]
 80087b6:	4643      	mov	r3, r8
 80087b8:	4622      	mov	r2, r4
 80087ba:	4639      	mov	r1, r7
 80087bc:	4648      	mov	r0, r9
 80087be:	f7ff ff20 	bl	8008602 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80087c2:	e7db      	b.n	800877c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80087c4:	2f00      	cmp	r7, #0
 80087c6:	d0cf      	beq.n	8008768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 80087c8:	e7c7      	b.n	800875a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80087ca:	bf00      	nop
 80087cc:	0800fb34 	.word	0x0800fb34

080087d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80087d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087d2:	4604      	mov	r4, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	460d      	mov	r5, r1
 80087d8:	f7f7 fcb8 	bl	800014c <strlen>
 80087dc:	462b      	mov	r3, r5
 80087de:	9000      	str	r0, [sp, #0]
 80087e0:	6862      	ldr	r2, [r4, #4]
 80087e2:	2100      	movs	r1, #0
 80087e4:	4620      	mov	r0, r4
 80087e6:	f7ff ff79 	bl	80086dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80087ea:	b003      	add	sp, #12
 80087ec:	bd30      	pop	{r4, r5, pc}

080087ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80087ee:	b508      	push	{r3, lr}
 80087f0:	f7ff ffee 	bl	80087d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80087f4:	bd08      	pop	{r3, pc}

080087f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80087f6:	6800      	ldr	r0, [r0, #0]
 80087f8:	4770      	bx	lr

080087fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80087fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fc:	4606      	mov	r6, r0
 80087fe:	6845      	ldr	r5, [r0, #4]
 8008800:	4608      	mov	r0, r1
 8008802:	460f      	mov	r7, r1
 8008804:	f7f7 fca2 	bl	800014c <strlen>
 8008808:	4285      	cmp	r5, r0
 800880a:	4604      	mov	r4, r0
 800880c:	462a      	mov	r2, r5
 800880e:	4639      	mov	r1, r7
 8008810:	bf28      	it	cs
 8008812:	4602      	movcs	r2, r0
 8008814:	6830      	ldr	r0, [r6, #0]
 8008816:	f7ff fe5f 	bl	80084d8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800881a:	b900      	cbnz	r0, 800881e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 800881c:	1b28      	subs	r0, r5, r4
 800881e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8008820:	b510      	push	{r4, lr}
 8008822:	4604      	mov	r4, r0
 8008824:	f100 0208 	add.w	r2, r0, #8
 8008828:	6002      	str	r2, [r0, #0]
 800882a:	e9d1 1200 	ldrd	r1, r2, [r1]
 800882e:	f04f 0300 	mov.w	r3, #0
 8008832:	440a      	add	r2, r1
 8008834:	f7f9 fe60 	bl	80024f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8008838:	4620      	mov	r0, r4
 800883a:	bd10      	pop	{r4, pc}

0800883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800883c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800883e:	4604      	mov	r4, r0
 8008840:	4616      	mov	r6, r2
 8008842:	460d      	mov	r5, r1
 8008844:	b919      	cbnz	r1, 800884e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8008846:	b112      	cbz	r2, 800884e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8008848:	480d      	ldr	r0, [pc, #52]	; (8008880 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800884a:	f7ff fe24 	bl	8008496 <_ZSt19__throw_logic_errorPKc>
 800884e:	1b73      	subs	r3, r6, r5
 8008850:	2b0f      	cmp	r3, #15
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	d907      	bls.n	8008866 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8008856:	2200      	movs	r2, #0
 8008858:	a901      	add	r1, sp, #4
 800885a:	4620      	mov	r0, r4
 800885c:	f7ff fe50 	bl	8008500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008860:	9b01      	ldr	r3, [sp, #4]
 8008862:	6020      	str	r0, [r4, #0]
 8008864:	60a3      	str	r3, [r4, #8]
 8008866:	4632      	mov	r2, r6
 8008868:	4629      	mov	r1, r5
 800886a:	6820      	ldr	r0, [r4, #0]
 800886c:	f7ff fe9c 	bl	80085a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8008870:	2100      	movs	r1, #0
 8008872:	9b01      	ldr	r3, [sp, #4]
 8008874:	6822      	ldr	r2, [r4, #0]
 8008876:	6063      	str	r3, [r4, #4]
 8008878:	54d1      	strb	r1, [r2, r3]
 800887a:	b002      	add	sp, #8
 800887c:	bd70      	pop	{r4, r5, r6, pc}
 800887e:	bf00      	nop
 8008880:	0800fb4d 	.word	0x0800fb4d

08008884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	f100 0308 	add.w	r3, r0, #8
 800888a:	4604      	mov	r4, r0
 800888c:	6003      	str	r3, [r0, #0]
 800888e:	460d      	mov	r5, r1
 8008890:	b159      	cbz	r1, 80088aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8008892:	4608      	mov	r0, r1
 8008894:	f7f7 fc5a 	bl	800014c <strlen>
 8008898:	182a      	adds	r2, r5, r0
 800889a:	4620      	mov	r0, r4
 800889c:	f04f 0300 	mov.w	r3, #0
 80088a0:	4629      	mov	r1, r5
 80088a2:	f7ff ffcb 	bl	800883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80088a6:	4620      	mov	r0, r4
 80088a8:	bd38      	pop	{r3, r4, r5, pc}
 80088aa:	f04f 32ff 	mov.w	r2, #4294967295
 80088ae:	e7f4      	b.n	800889a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080088b0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b09c      	sub	sp, #112	; 0x70
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	1a0e      	subs	r6, r1, r0
 80088b8:	4680      	mov	r8, r0
 80088ba:	2269      	movs	r2, #105	; 0x69
 80088bc:	490e      	ldr	r1, [pc, #56]	; (80088f8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80088be:	1d38      	adds	r0, r7, #4
 80088c0:	f000 f8d5 	bl	8008a6e <memcpy>
 80088c4:	f106 0377 	add.w	r3, r6, #119	; 0x77
 80088c8:	f023 0307 	bic.w	r3, r3, #7
 80088cc:	ebad 0d03 	sub.w	sp, sp, r3
 80088d0:	466c      	mov	r4, sp
 80088d2:	2268      	movs	r2, #104	; 0x68
 80088d4:	1d39      	adds	r1, r7, #4
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 f8c9 	bl	8008a6e <memcpy>
 80088dc:	4632      	mov	r2, r6
 80088de:	4641      	mov	r1, r8
 80088e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088e4:	f000 f8c3 	bl	8008a6e <memcpy>
 80088e8:	2300      	movs	r3, #0
 80088ea:	1c75      	adds	r5, r6, #1
 80088ec:	4425      	add	r5, r4
 80088ee:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 80088f2:	4620      	mov	r0, r4
 80088f4:	f7ff fdcf 	bl	8008496 <_ZSt19__throw_logic_errorPKc>
 80088f8:	0800fb9a 	.word	0x0800fb9a

080088fc <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	af00      	add	r7, sp, #0
 8008900:	b086      	sub	sp, #24
 8008902:	466d      	mov	r5, sp
 8008904:	f105 040c 	add.w	r4, r5, #12
 8008908:	4623      	mov	r3, r4
 800890a:	f04f 0c0a 	mov.w	ip, #10
 800890e:	f8df e038 	ldr.w	lr, [pc, #56]	; 8008948 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8008912:	fbb2 f6fc 	udiv	r6, r2, ip
 8008916:	fb0c 2216 	mls	r2, ip, r6, r2
 800891a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800891e:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8008922:	4632      	mov	r2, r6
 8008924:	2e00      	cmp	r6, #0
 8008926:	d1f4      	bne.n	8008912 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8008928:	1ae4      	subs	r4, r4, r3
 800892a:	428c      	cmp	r4, r1
 800892c:	d808      	bhi.n	8008940 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800892e:	f1c4 010c 	rsb	r1, r4, #12
 8008932:	4622      	mov	r2, r4
 8008934:	4429      	add	r1, r5
 8008936:	f000 f89a 	bl	8008a6e <memcpy>
 800893a:	4620      	mov	r0, r4
 800893c:	46bd      	mov	sp, r7
 800893e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008940:	f04f 34ff 	mov.w	r4, #4294967295
 8008944:	e7f9      	b.n	800893a <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8008946:	bf00      	nop
 8008948:	0800fb8f 	.word	0x0800fb8f

0800894c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800894c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008950:	4606      	mov	r6, r0
 8008952:	4615      	mov	r5, r2
 8008954:	4604      	mov	r4, r0
 8008956:	3901      	subs	r1, #1
 8008958:	1847      	adds	r7, r0, r1
 800895a:	782a      	ldrb	r2, [r5, #0]
 800895c:	b39a      	cbz	r2, 80089c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 800895e:	42bc      	cmp	r4, r7
 8008960:	d22d      	bcs.n	80089be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8008962:	2a25      	cmp	r2, #37	; 0x25
 8008964:	d107      	bne.n	8008976 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8008966:	786a      	ldrb	r2, [r5, #1]
 8008968:	2a73      	cmp	r2, #115	; 0x73
 800896a:	d00a      	beq.n	8008982 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800896c:	2a7a      	cmp	r2, #122	; 0x7a
 800896e:	d013      	beq.n	8008998 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8008970:	2a25      	cmp	r2, #37	; 0x25
 8008972:	d100      	bne.n	8008976 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8008974:	3501      	adds	r5, #1
 8008976:	782a      	ldrb	r2, [r5, #0]
 8008978:	3401      	adds	r4, #1
 800897a:	f804 2c01 	strb.w	r2, [r4, #-1]
 800897e:	3501      	adds	r5, #1
 8008980:	e7eb      	b.n	800895a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8008982:	1d19      	adds	r1, r3, #4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3b01      	subs	r3, #1
 8008988:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800898c:	b1a2      	cbz	r2, 80089b8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 800898e:	42bc      	cmp	r4, r7
 8008990:	d015      	beq.n	80089be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8008992:	f804 2b01 	strb.w	r2, [r4], #1
 8008996:	e7f7      	b.n	8008988 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8008998:	78aa      	ldrb	r2, [r5, #2]
 800899a:	2a75      	cmp	r2, #117	; 0x75
 800899c:	d1eb      	bne.n	8008976 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	1b39      	subs	r1, r7, r4
 80089a2:	4620      	mov	r0, r4
 80089a4:	f103 0804 	add.w	r8, r3, #4
 80089a8:	f7ff ffa8 	bl	80088fc <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	dd06      	ble.n	80089be <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80089b0:	4404      	add	r4, r0
 80089b2:	3503      	adds	r5, #3
 80089b4:	4643      	mov	r3, r8
 80089b6:	e7d0      	b.n	800895a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80089b8:	3502      	adds	r5, #2
 80089ba:	460b      	mov	r3, r1
 80089bc:	e7cd      	b.n	800895a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80089be:	4621      	mov	r1, r4
 80089c0:	4630      	mov	r0, r6
 80089c2:	f7ff ff75 	bl	80088b0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80089c6:	7022      	strb	r2, [r4, #0]
 80089c8:	1ba0      	subs	r0, r4, r6
 80089ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080089ce <abort>:
 80089ce:	b508      	push	{r3, lr}
 80089d0:	2006      	movs	r0, #6
 80089d2:	f000 f957 	bl	8008c84 <raise>
 80089d6:	2001      	movs	r0, #1
 80089d8:	f7fb ff2f 	bl	800483a <_exit>

080089dc <__errno>:
 80089dc:	4b01      	ldr	r3, [pc, #4]	; (80089e4 <__errno+0x8>)
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	2000000c 	.word	0x2000000c

080089e8 <__libc_init_array>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	2500      	movs	r5, #0
 80089ec:	4e0c      	ldr	r6, [pc, #48]	; (8008a20 <__libc_init_array+0x38>)
 80089ee:	4c0d      	ldr	r4, [pc, #52]	; (8008a24 <__libc_init_array+0x3c>)
 80089f0:	1ba4      	subs	r4, r4, r6
 80089f2:	10a4      	asrs	r4, r4, #2
 80089f4:	42a5      	cmp	r5, r4
 80089f6:	d109      	bne.n	8008a0c <__libc_init_array+0x24>
 80089f8:	f000 f962 	bl	8008cc0 <_init>
 80089fc:	2500      	movs	r5, #0
 80089fe:	4e0a      	ldr	r6, [pc, #40]	; (8008a28 <__libc_init_array+0x40>)
 8008a00:	4c0a      	ldr	r4, [pc, #40]	; (8008a2c <__libc_init_array+0x44>)
 8008a02:	1ba4      	subs	r4, r4, r6
 8008a04:	10a4      	asrs	r4, r4, #2
 8008a06:	42a5      	cmp	r5, r4
 8008a08:	d105      	bne.n	8008a16 <__libc_init_array+0x2e>
 8008a0a:	bd70      	pop	{r4, r5, r6, pc}
 8008a0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a10:	4798      	blx	r3
 8008a12:	3501      	adds	r5, #1
 8008a14:	e7ee      	b.n	80089f4 <__libc_init_array+0xc>
 8008a16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a1a:	4798      	blx	r3
 8008a1c:	3501      	adds	r5, #1
 8008a1e:	e7f2      	b.n	8008a06 <__libc_init_array+0x1e>
 8008a20:	0800fc64 	.word	0x0800fc64
 8008a24:	0800fc64 	.word	0x0800fc64
 8008a28:	0800fc64 	.word	0x0800fc64
 8008a2c:	0800fc68 	.word	0x0800fc68

08008a30 <malloc>:
 8008a30:	4b02      	ldr	r3, [pc, #8]	; (8008a3c <malloc+0xc>)
 8008a32:	4601      	mov	r1, r0
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	f000 b893 	b.w	8008b60 <_malloc_r>
 8008a3a:	bf00      	nop
 8008a3c:	2000000c 	.word	0x2000000c

08008a40 <free>:
 8008a40:	4b02      	ldr	r3, [pc, #8]	; (8008a4c <free+0xc>)
 8008a42:	4601      	mov	r1, r0
 8008a44:	6818      	ldr	r0, [r3, #0]
 8008a46:	f000 b83f 	b.w	8008ac8 <_free_r>
 8008a4a:	bf00      	nop
 8008a4c:	2000000c 	.word	0x2000000c

08008a50 <memcmp>:
 8008a50:	b530      	push	{r4, r5, lr}
 8008a52:	2400      	movs	r4, #0
 8008a54:	42a2      	cmp	r2, r4
 8008a56:	d101      	bne.n	8008a5c <memcmp+0xc>
 8008a58:	2000      	movs	r0, #0
 8008a5a:	e007      	b.n	8008a6c <memcmp+0x1c>
 8008a5c:	5d03      	ldrb	r3, [r0, r4]
 8008a5e:	3401      	adds	r4, #1
 8008a60:	190d      	adds	r5, r1, r4
 8008a62:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8008a66:	42ab      	cmp	r3, r5
 8008a68:	d0f4      	beq.n	8008a54 <memcmp+0x4>
 8008a6a:	1b58      	subs	r0, r3, r5
 8008a6c:	bd30      	pop	{r4, r5, pc}

08008a6e <memcpy>:
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	1e43      	subs	r3, r0, #1
 8008a72:	440a      	add	r2, r1
 8008a74:	4291      	cmp	r1, r2
 8008a76:	d100      	bne.n	8008a7a <memcpy+0xc>
 8008a78:	bd10      	pop	{r4, pc}
 8008a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a82:	e7f7      	b.n	8008a74 <memcpy+0x6>

08008a84 <memmove>:
 8008a84:	4288      	cmp	r0, r1
 8008a86:	b510      	push	{r4, lr}
 8008a88:	eb01 0302 	add.w	r3, r1, r2
 8008a8c:	d807      	bhi.n	8008a9e <memmove+0x1a>
 8008a8e:	1e42      	subs	r2, r0, #1
 8008a90:	4299      	cmp	r1, r3
 8008a92:	d00a      	beq.n	8008aaa <memmove+0x26>
 8008a94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008a9c:	e7f8      	b.n	8008a90 <memmove+0xc>
 8008a9e:	4283      	cmp	r3, r0
 8008aa0:	d9f5      	bls.n	8008a8e <memmove+0xa>
 8008aa2:	1881      	adds	r1, r0, r2
 8008aa4:	1ad2      	subs	r2, r2, r3
 8008aa6:	42d3      	cmn	r3, r2
 8008aa8:	d100      	bne.n	8008aac <memmove+0x28>
 8008aaa:	bd10      	pop	{r4, pc}
 8008aac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ab0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008ab4:	e7f7      	b.n	8008aa6 <memmove+0x22>

08008ab6 <memset>:
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	4402      	add	r2, r0
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d100      	bne.n	8008ac0 <memset+0xa>
 8008abe:	4770      	bx	lr
 8008ac0:	f803 1b01 	strb.w	r1, [r3], #1
 8008ac4:	e7f9      	b.n	8008aba <memset+0x4>
	...

08008ac8 <_free_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4605      	mov	r5, r0
 8008acc:	2900      	cmp	r1, #0
 8008ace:	d043      	beq.n	8008b58 <_free_r+0x90>
 8008ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad4:	1f0c      	subs	r4, r1, #4
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bfb8      	it	lt
 8008ada:	18e4      	addlt	r4, r4, r3
 8008adc:	f000 f8ee 	bl	8008cbc <__malloc_lock>
 8008ae0:	4a1e      	ldr	r2, [pc, #120]	; (8008b5c <_free_r+0x94>)
 8008ae2:	6813      	ldr	r3, [r2, #0]
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	b933      	cbnz	r3, 8008af6 <_free_r+0x2e>
 8008ae8:	6063      	str	r3, [r4, #4]
 8008aea:	6014      	str	r4, [r2, #0]
 8008aec:	4628      	mov	r0, r5
 8008aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008af2:	f000 b8e4 	b.w	8008cbe <__malloc_unlock>
 8008af6:	42a3      	cmp	r3, r4
 8008af8:	d90b      	bls.n	8008b12 <_free_r+0x4a>
 8008afa:	6821      	ldr	r1, [r4, #0]
 8008afc:	1862      	adds	r2, r4, r1
 8008afe:	4293      	cmp	r3, r2
 8008b00:	bf01      	itttt	eq
 8008b02:	681a      	ldreq	r2, [r3, #0]
 8008b04:	685b      	ldreq	r3, [r3, #4]
 8008b06:	1852      	addeq	r2, r2, r1
 8008b08:	6022      	streq	r2, [r4, #0]
 8008b0a:	6063      	str	r3, [r4, #4]
 8008b0c:	6004      	str	r4, [r0, #0]
 8008b0e:	e7ed      	b.n	8008aec <_free_r+0x24>
 8008b10:	4613      	mov	r3, r2
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	b10a      	cbz	r2, 8008b1a <_free_r+0x52>
 8008b16:	42a2      	cmp	r2, r4
 8008b18:	d9fa      	bls.n	8008b10 <_free_r+0x48>
 8008b1a:	6819      	ldr	r1, [r3, #0]
 8008b1c:	1858      	adds	r0, r3, r1
 8008b1e:	42a0      	cmp	r0, r4
 8008b20:	d10b      	bne.n	8008b3a <_free_r+0x72>
 8008b22:	6820      	ldr	r0, [r4, #0]
 8008b24:	4401      	add	r1, r0
 8008b26:	1858      	adds	r0, r3, r1
 8008b28:	4282      	cmp	r2, r0
 8008b2a:	6019      	str	r1, [r3, #0]
 8008b2c:	d1de      	bne.n	8008aec <_free_r+0x24>
 8008b2e:	6810      	ldr	r0, [r2, #0]
 8008b30:	6852      	ldr	r2, [r2, #4]
 8008b32:	4401      	add	r1, r0
 8008b34:	6019      	str	r1, [r3, #0]
 8008b36:	605a      	str	r2, [r3, #4]
 8008b38:	e7d8      	b.n	8008aec <_free_r+0x24>
 8008b3a:	d902      	bls.n	8008b42 <_free_r+0x7a>
 8008b3c:	230c      	movs	r3, #12
 8008b3e:	602b      	str	r3, [r5, #0]
 8008b40:	e7d4      	b.n	8008aec <_free_r+0x24>
 8008b42:	6820      	ldr	r0, [r4, #0]
 8008b44:	1821      	adds	r1, r4, r0
 8008b46:	428a      	cmp	r2, r1
 8008b48:	bf01      	itttt	eq
 8008b4a:	6811      	ldreq	r1, [r2, #0]
 8008b4c:	6852      	ldreq	r2, [r2, #4]
 8008b4e:	1809      	addeq	r1, r1, r0
 8008b50:	6021      	streq	r1, [r4, #0]
 8008b52:	6062      	str	r2, [r4, #4]
 8008b54:	605c      	str	r4, [r3, #4]
 8008b56:	e7c9      	b.n	8008aec <_free_r+0x24>
 8008b58:	bd38      	pop	{r3, r4, r5, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20000498 	.word	0x20000498

08008b60 <_malloc_r>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	1ccd      	adds	r5, r1, #3
 8008b64:	f025 0503 	bic.w	r5, r5, #3
 8008b68:	3508      	adds	r5, #8
 8008b6a:	2d0c      	cmp	r5, #12
 8008b6c:	bf38      	it	cc
 8008b6e:	250c      	movcc	r5, #12
 8008b70:	2d00      	cmp	r5, #0
 8008b72:	4606      	mov	r6, r0
 8008b74:	db01      	blt.n	8008b7a <_malloc_r+0x1a>
 8008b76:	42a9      	cmp	r1, r5
 8008b78:	d903      	bls.n	8008b82 <_malloc_r+0x22>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	6033      	str	r3, [r6, #0]
 8008b7e:	2000      	movs	r0, #0
 8008b80:	bd70      	pop	{r4, r5, r6, pc}
 8008b82:	f000 f89b 	bl	8008cbc <__malloc_lock>
 8008b86:	4a21      	ldr	r2, [pc, #132]	; (8008c0c <_malloc_r+0xac>)
 8008b88:	6814      	ldr	r4, [r2, #0]
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	b991      	cbnz	r1, 8008bb4 <_malloc_r+0x54>
 8008b8e:	4c20      	ldr	r4, [pc, #128]	; (8008c10 <_malloc_r+0xb0>)
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	b91b      	cbnz	r3, 8008b9c <_malloc_r+0x3c>
 8008b94:	4630      	mov	r0, r6
 8008b96:	f000 f83d 	bl	8008c14 <_sbrk_r>
 8008b9a:	6020      	str	r0, [r4, #0]
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f000 f838 	bl	8008c14 <_sbrk_r>
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d124      	bne.n	8008bf2 <_malloc_r+0x92>
 8008ba8:	230c      	movs	r3, #12
 8008baa:	4630      	mov	r0, r6
 8008bac:	6033      	str	r3, [r6, #0]
 8008bae:	f000 f886 	bl	8008cbe <__malloc_unlock>
 8008bb2:	e7e4      	b.n	8008b7e <_malloc_r+0x1e>
 8008bb4:	680b      	ldr	r3, [r1, #0]
 8008bb6:	1b5b      	subs	r3, r3, r5
 8008bb8:	d418      	bmi.n	8008bec <_malloc_r+0x8c>
 8008bba:	2b0b      	cmp	r3, #11
 8008bbc:	d90f      	bls.n	8008bde <_malloc_r+0x7e>
 8008bbe:	600b      	str	r3, [r1, #0]
 8008bc0:	18cc      	adds	r4, r1, r3
 8008bc2:	50cd      	str	r5, [r1, r3]
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f000 f87a 	bl	8008cbe <__malloc_unlock>
 8008bca:	f104 000b 	add.w	r0, r4, #11
 8008bce:	1d23      	adds	r3, r4, #4
 8008bd0:	f020 0007 	bic.w	r0, r0, #7
 8008bd4:	1ac3      	subs	r3, r0, r3
 8008bd6:	d0d3      	beq.n	8008b80 <_malloc_r+0x20>
 8008bd8:	425a      	negs	r2, r3
 8008bda:	50e2      	str	r2, [r4, r3]
 8008bdc:	e7d0      	b.n	8008b80 <_malloc_r+0x20>
 8008bde:	684b      	ldr	r3, [r1, #4]
 8008be0:	428c      	cmp	r4, r1
 8008be2:	bf16      	itet	ne
 8008be4:	6063      	strne	r3, [r4, #4]
 8008be6:	6013      	streq	r3, [r2, #0]
 8008be8:	460c      	movne	r4, r1
 8008bea:	e7eb      	b.n	8008bc4 <_malloc_r+0x64>
 8008bec:	460c      	mov	r4, r1
 8008bee:	6849      	ldr	r1, [r1, #4]
 8008bf0:	e7cc      	b.n	8008b8c <_malloc_r+0x2c>
 8008bf2:	1cc4      	adds	r4, r0, #3
 8008bf4:	f024 0403 	bic.w	r4, r4, #3
 8008bf8:	42a0      	cmp	r0, r4
 8008bfa:	d005      	beq.n	8008c08 <_malloc_r+0xa8>
 8008bfc:	1a21      	subs	r1, r4, r0
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f000 f808 	bl	8008c14 <_sbrk_r>
 8008c04:	3001      	adds	r0, #1
 8008c06:	d0cf      	beq.n	8008ba8 <_malloc_r+0x48>
 8008c08:	6025      	str	r5, [r4, #0]
 8008c0a:	e7db      	b.n	8008bc4 <_malloc_r+0x64>
 8008c0c:	20000498 	.word	0x20000498
 8008c10:	2000049c 	.word	0x2000049c

08008c14 <_sbrk_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	2300      	movs	r3, #0
 8008c18:	4c05      	ldr	r4, [pc, #20]	; (8008c30 <_sbrk_r+0x1c>)
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	f7fb fe16 	bl	8004850 <_sbrk>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_sbrk_r+0x1a>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_sbrk_r+0x1a>
 8008c2c:	602b      	str	r3, [r5, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	20000600 	.word	0x20000600

08008c34 <_raise_r>:
 8008c34:	291f      	cmp	r1, #31
 8008c36:	b538      	push	{r3, r4, r5, lr}
 8008c38:	4604      	mov	r4, r0
 8008c3a:	460d      	mov	r5, r1
 8008c3c:	d904      	bls.n	8008c48 <_raise_r+0x14>
 8008c3e:	2316      	movs	r3, #22
 8008c40:	6003      	str	r3, [r0, #0]
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c4a:	b112      	cbz	r2, 8008c52 <_raise_r+0x1e>
 8008c4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c50:	b94b      	cbnz	r3, 8008c66 <_raise_r+0x32>
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 f830 	bl	8008cb8 <_getpid_r>
 8008c58:	462a      	mov	r2, r5
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c62:	f000 b817 	b.w	8008c94 <_kill_r>
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d00a      	beq.n	8008c80 <_raise_r+0x4c>
 8008c6a:	1c59      	adds	r1, r3, #1
 8008c6c:	d103      	bne.n	8008c76 <_raise_r+0x42>
 8008c6e:	2316      	movs	r3, #22
 8008c70:	6003      	str	r3, [r0, #0]
 8008c72:	2001      	movs	r0, #1
 8008c74:	e7e7      	b.n	8008c46 <_raise_r+0x12>
 8008c76:	2400      	movs	r4, #0
 8008c78:	4628      	mov	r0, r5
 8008c7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c7e:	4798      	blx	r3
 8008c80:	2000      	movs	r0, #0
 8008c82:	e7e0      	b.n	8008c46 <_raise_r+0x12>

08008c84 <raise>:
 8008c84:	4b02      	ldr	r3, [pc, #8]	; (8008c90 <raise+0xc>)
 8008c86:	4601      	mov	r1, r0
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	f7ff bfd3 	b.w	8008c34 <_raise_r>
 8008c8e:	bf00      	nop
 8008c90:	2000000c 	.word	0x2000000c

08008c94 <_kill_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	2300      	movs	r3, #0
 8008c98:	4c06      	ldr	r4, [pc, #24]	; (8008cb4 <_kill_r+0x20>)
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	f7fb fdba 	bl	800481a <_kill>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	d102      	bne.n	8008cb0 <_kill_r+0x1c>
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	b103      	cbz	r3, 8008cb0 <_kill_r+0x1c>
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	bd38      	pop	{r3, r4, r5, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000600 	.word	0x20000600

08008cb8 <_getpid_r>:
 8008cb8:	f7fb bda8 	b.w	800480c <_getpid>

08008cbc <__malloc_lock>:
 8008cbc:	4770      	bx	lr

08008cbe <__malloc_unlock>:
 8008cbe:	4770      	bx	lr

08008cc0 <_init>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	bf00      	nop
 8008cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cc6:	bc08      	pop	{r3}
 8008cc8:	469e      	mov	lr, r3
 8008cca:	4770      	bx	lr

08008ccc <_fini>:
 8008ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cce:	bf00      	nop
 8008cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cd2:	bc08      	pop	{r3}
 8008cd4:	469e      	mov	lr, r3
 8008cd6:	4770      	bx	lr

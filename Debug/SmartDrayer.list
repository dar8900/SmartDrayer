
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003400  080103b0  080103b0  000203b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137b0  080137b0  0003010c  2**0
                  CONTENTS
  4 .ARM          00000000  080137b0  080137b0  0003010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080137b0  080137b0  0003010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080137b0  080137b0  000237b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080137b4  080137b4  000237b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080137b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000110  080138c4  00030110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  080138c4  000306c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00116bd6  00000000  00000000  00030135  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009185  00000000  00000000  00146d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003a78  00000000  00000000  0014fe90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003770  00000000  00000000  00153908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e847  00000000  00000000  00157078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b2e7  00000000  00000000  001758bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a79e0  00000000  00000000  001a0ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00248586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000117b0  00000000  00000000  00248604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000110 	.word	0x20000110
 800012c:	00000000 	.word	0x00000000
 8000130:	08010398 	.word	0x08010398

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000114 	.word	0x20000114
 800014c:	08010398 	.word	0x08010398

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	d1ed      	bne.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2uiz>:
 8000e58:	0042      	lsls	r2, r0, #1
 8000e5a:	d20e      	bcs.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e60:	d30b      	bcc.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d409      	bmi.n	8000e80 <__aeabi_f2uiz+0x28>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	fa23 f002 	lsr.w	r0, r3, r2
 8000e78:	4770      	bx	lr
 8000e7a:	f04f 0000 	mov.w	r0, #0
 8000e7e:	4770      	bx	lr
 8000e80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e84:	d101      	bne.n	8000e8a <__aeabi_f2uiz+0x32>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d102      	bne.n	8000e90 <__aeabi_f2uiz+0x38>
 8000e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8e:	4770      	bx	lr
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	70fb      	strb	r3, [r7, #3]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	70bb      	strb	r3, [r7, #2]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000eb2:	78fa      	ldrb	r2, [r7, #3]
 8000eb4:	787b      	ldrb	r3, [r7, #1]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b2d8      	uxtb	r0, r3
 8000eba:	78ba      	ldrb	r2, [r7, #2]
 8000ebc:	7c3b      	ldrb	r3, [r7, #16]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	78ba      	ldrb	r2, [r7, #2]
 8000ec4:	78f9      	ldrb	r1, [r7, #3]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4603      	mov	r3, r0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f001 fad9 	bl	8002482 <u8g2_IsIntersection>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d013      	beq.n	8000efe <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8000ed6:	e00e      	b.n	8000ef6 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000ed8:	7878      	ldrb	r0, [r7, #1]
 8000eda:	78ba      	ldrb	r2, [r7, #2]
 8000edc:	78f9      	ldrb	r1, [r7, #3]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 f999 	bl	800221c <u8g2_DrawHVLine>
    y++;    
 8000eea:	78bb      	ldrb	r3, [r7, #2]
 8000eec:	3301      	adds	r3, #1
 8000eee:	70bb      	strb	r3, [r7, #2]
    h--;
 8000ef0:	7c3b      	ldrb	r3, [r7, #16]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8000ef6:	7c3b      	ldrb	r3, [r7, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1ed      	bne.n	8000ed8 <u8g2_DrawBox+0x40>
 8000efc:	e000      	b.n	8000f00 <u8g2_DrawBox+0x68>
    return;
 8000efe:	bf00      	nop
  }
}
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af02      	add	r7, sp, #8
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	4608      	mov	r0, r1
 8000f10:	4611      	mov	r1, r2
 8000f12:	461a      	mov	r2, r3
 8000f14:	4603      	mov	r3, r0
 8000f16:	70fb      	strb	r3, [r7, #3]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70bb      	strb	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	787b      	ldrb	r3, [r7, #1]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2d8      	uxtb	r0, r3
 8000f2c:	78ba      	ldrb	r2, [r7, #2]
 8000f2e:	7e3b      	ldrb	r3, [r7, #24]
 8000f30:	4413      	add	r3, r2
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	78ba      	ldrb	r2, [r7, #2]
 8000f36:	78f9      	ldrb	r1, [r7, #3]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f001 faa0 	bl	8002482 <u8g2_IsIntersection>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d03b      	beq.n	8000fc0 <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000f48:	7878      	ldrb	r0, [r7, #1]
 8000f4a:	78ba      	ldrb	r2, [r7, #2]
 8000f4c:	78f9      	ldrb	r1, [r7, #3]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	4603      	mov	r3, r0
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f001 f961 	bl	800221c <u8g2_DrawHVLine>
  if (h >= 2) {
 8000f5a:	7e3b      	ldrb	r3, [r7, #24]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d930      	bls.n	8000fc2 <u8g2_DrawFrame+0xbc>
    h-=2;
 8000f60:	7e3b      	ldrb	r3, [r7, #24]
 8000f62:	3b02      	subs	r3, #2
 8000f64:	763b      	strb	r3, [r7, #24]
    y++;
 8000f66:	78bb      	ldrb	r3, [r7, #2]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 8000f6c:	7e3b      	ldrb	r3, [r7, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d01c      	beq.n	8000fac <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000f72:	7e38      	ldrb	r0, [r7, #24]
 8000f74:	78ba      	ldrb	r2, [r7, #2]
 8000f76:	78f9      	ldrb	r1, [r7, #3]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f001 f94c 	bl	800221c <u8g2_DrawHVLine>
      x+=w;
 8000f84:	78fa      	ldrb	r2, [r7, #3]
 8000f86:	787b      	ldrb	r3, [r7, #1]
 8000f88:	4413      	add	r3, r2
 8000f8a:	70fb      	strb	r3, [r7, #3]
      x--;
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000f92:	7e38      	ldrb	r0, [r7, #24]
 8000f94:	78ba      	ldrb	r2, [r7, #2]
 8000f96:	78f9      	ldrb	r1, [r7, #3]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f001 f93c 	bl	800221c <u8g2_DrawHVLine>
      y+=h;
 8000fa4:	78ba      	ldrb	r2, [r7, #2]
 8000fa6:	7e3b      	ldrb	r3, [r7, #24]
 8000fa8:	4413      	add	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8000fac:	7878      	ldrb	r0, [r7, #1]
 8000fae:	78ba      	ldrb	r2, [r7, #2]
 8000fb0:	7bf9      	ldrb	r1, [r7, #15]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f001 f92f 	bl	800221c <u8g2_DrawHVLine>
 8000fbe:	e000      	b.n	8000fc2 <u8g2_DrawFrame+0xbc>
    return;
 8000fc0:	bf00      	nop
  }
}
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	70fb      	strb	r3, [r7, #3]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70bb      	strb	r3, [r7, #2]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2d8      	uxtb	r0, r3
 8000fea:	78ba      	ldrb	r2, [r7, #2]
 8000fec:	7e3b      	ldrb	r3, [r7, #24]
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	78ba      	ldrb	r2, [r7, #2]
 8000ff4:	78f9      	ldrb	r1, [r7, #3]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 fa41 	bl	8002482 <u8g2_IsIntersection>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8095 	beq.w	8001132 <u8g2_DrawRFrame+0x16a>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	73fb      	strb	r3, [r7, #15]
  xl += r;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	7f3b      	ldrb	r3, [r7, #28]
 8001010:	4413      	add	r3, r2
 8001012:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8001014:	78bb      	ldrb	r3, [r7, #2]
 8001016:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8001018:	7bba      	ldrb	r2, [r7, #14]
 800101a:	7f3b      	ldrb	r3, [r7, #28]
 800101c:	4413      	add	r3, r2
 800101e:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	737b      	strb	r3, [r7, #13]
    xr += w;
 8001024:	7b7a      	ldrb	r2, [r7, #13]
 8001026:	787b      	ldrb	r3, [r7, #1]
 8001028:	4413      	add	r3, r2
 800102a:	737b      	strb	r3, [r7, #13]
    xr -= r;
 800102c:	7b7a      	ldrb	r2, [r7, #13]
 800102e:	7f3b      	ldrb	r3, [r7, #28]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	3b01      	subs	r3, #1
 8001038:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 800103a:	78bb      	ldrb	r3, [r7, #2]
 800103c:	733b      	strb	r3, [r7, #12]
    yl += h;
 800103e:	7b3a      	ldrb	r2, [r7, #12]
 8001040:	7e3b      	ldrb	r3, [r7, #24]
 8001042:	4413      	add	r3, r2
 8001044:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8001046:	7b3a      	ldrb	r2, [r7, #12]
 8001048:	7f3b      	ldrb	r3, [r7, #28]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 800104e:	7b3b      	ldrb	r3, [r7, #12]
 8001050:	3b01      	subs	r3, #1
 8001052:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001054:	7f38      	ldrb	r0, [r7, #28]
 8001056:	7bba      	ldrb	r2, [r7, #14]
 8001058:	7bf9      	ldrb	r1, [r7, #15]
 800105a:	2302      	movs	r3, #2
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4603      	mov	r3, r0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f9d0 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8001066:	7f38      	ldrb	r0, [r7, #28]
 8001068:	7bba      	ldrb	r2, [r7, #14]
 800106a:	7b79      	ldrb	r1, [r7, #13]
 800106c:	2301      	movs	r3, #1
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4603      	mov	r3, r0
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f9c7 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8001078:	7f38      	ldrb	r0, [r7, #28]
 800107a:	7b3a      	ldrb	r2, [r7, #12]
 800107c:	7bf9      	ldrb	r1, [r7, #15]
 800107e:	2304      	movs	r3, #4
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4603      	mov	r3, r0
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f9be 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 800108a:	7f38      	ldrb	r0, [r7, #28]
 800108c:	7b3a      	ldrb	r2, [r7, #12]
 800108e:	7b79      	ldrb	r1, [r7, #13]
 8001090:	2308      	movs	r3, #8
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	4603      	mov	r3, r0
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f9b5 	bl	8001406 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 80010a0:	7afa      	ldrb	r2, [r7, #11]
 80010a2:	7f3b      	ldrb	r3, [r7, #28]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 80010a8:	7afa      	ldrb	r2, [r7, #11]
 80010aa:	7f3b      	ldrb	r3, [r7, #28]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	72fb      	strb	r3, [r7, #11]
    hh = h;
 80010b0:	7e3b      	ldrb	r3, [r7, #24]
 80010b2:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 80010b4:	7aba      	ldrb	r2, [r7, #10]
 80010b6:	7f3b      	ldrb	r3, [r7, #28]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 80010bc:	7aba      	ldrb	r2, [r7, #10]
 80010be:	7f3b      	ldrb	r3, [r7, #28]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	3301      	adds	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
    yu++;
 80010ca:	7bbb      	ldrb	r3, [r7, #14]
 80010cc:	3301      	adds	r3, #1
 80010ce:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d914      	bls.n	8001100 <u8g2_DrawRFrame+0x138>
    {
      ww -= 2;
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	3b02      	subs	r3, #2
 80010da:	72fb      	strb	r3, [r7, #11]
      h--;
 80010dc:	7e3b      	ldrb	r3, [r7, #24]
 80010de:	3b01      	subs	r3, #1
 80010e0:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	78ba      	ldrb	r2, [r7, #2]
 80010e6:	7bf9      	ldrb	r1, [r7, #15]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f001 f91a 	bl	8002322 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 80010ee:	78ba      	ldrb	r2, [r7, #2]
 80010f0:	7e3b      	ldrb	r3, [r7, #24]
 80010f2:	4413      	add	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	7bf9      	ldrb	r1, [r7, #15]
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f001 f911 	bl	8002322 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8001100:	7abb      	ldrb	r3, [r7, #10]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d916      	bls.n	8001134 <u8g2_DrawRFrame+0x16c>
    {
      hh -= 2;
 8001106:	7abb      	ldrb	r3, [r7, #10]
 8001108:	3b02      	subs	r3, #2
 800110a:	72bb      	strb	r3, [r7, #10]
      w--;
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	3b01      	subs	r3, #1
 8001110:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8001112:	7abb      	ldrb	r3, [r7, #10]
 8001114:	7bba      	ldrb	r2, [r7, #14]
 8001116:	78f9      	ldrb	r1, [r7, #3]
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f001 f91c 	bl	8002356 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 800111e:	78fa      	ldrb	r2, [r7, #3]
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	4413      	add	r3, r2
 8001124:	b2d9      	uxtb	r1, r3
 8001126:	7abb      	ldrb	r3, [r7, #10]
 8001128:	7bba      	ldrb	r2, [r7, #14]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f001 f913 	bl	8002356 <u8g2_DrawVLine>
 8001130:	e000      	b.n	8001134 <u8g2_DrawRFrame+0x16c>
    return;
 8001132:	bf00      	nop
    }
  }
}
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	7c1b      	ldrb	r3, [r3, #16]
 8001148:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001150:	461a      	mov	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f00e fcce 	bl	800fb0a <memset>
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af02      	add	r7, sp, #8
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
 8001182:	4613      	mov	r3, r2
 8001184:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	7c1b      	ldrb	r3, [r3, #16]
 800118c:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001196:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	b29b      	uxth	r3, r3
 800119c:	89ba      	ldrh	r2, [r7, #12]
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80011a4:	89bb      	ldrh	r3, [r7, #12]
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80011aa:	89bb      	ldrh	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80011b2:	7bf9      	ldrb	r1, [r7, #15]
 80011b4:	78ba      	ldrb	r2, [r7, #2]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	2100      	movs	r1, #0
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f001 ff80 	bl	80030c4 <u8x8_DrawTile>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011de:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011e6:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	7c5b      	ldrb	r3, [r3, #17]
 80011ee:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80011f0:	7bba      	ldrb	r2, [r7, #14]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffbd 	bl	8001176 <u8g2_send_tile_row>
    src_row++;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	3301      	adds	r3, #1
 8001206:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	7b7b      	ldrb	r3, [r7, #13]
 800120c:	429a      	cmp	r2, r3
 800120e:	d203      	bcs.n	8001218 <u8g2_send_buffer+0x4c>
 8001210:	7bba      	ldrb	r2, [r7, #14]
 8001212:	7b3b      	ldrb	r3, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3eb      	bcc.n	80011f0 <u8g2_send_buffer+0x24>
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffcf 	bl	80011cc <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f001 ff99 	bl	8003166 <u8x8_RefreshDisplay>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4603      	mov	r3, r0
 800124c:	70fb      	strb	r3, [r7, #3]
 800124e:	460b      	mov	r3, r1
 8001250:	70bb      	strb	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001256:	7d3b      	ldrb	r3, [r7, #20]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d017      	beq.n	8001290 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8001260:	787a      	ldrb	r2, [r7, #1]
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	4413      	add	r3, r2
 8001266:	b2d9      	uxtb	r1, r3
 8001268:	7c3a      	ldrb	r2, [r7, #16]
 800126a:	78bb      	ldrb	r3, [r7, #2]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 f889 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8001278:	787a      	ldrb	r2, [r7, #1]
 800127a:	78bb      	ldrb	r3, [r7, #2]
 800127c:	4413      	add	r3, r2
 800127e:	b2d9      	uxtb	r1, r3
 8001280:	7c3a      	ldrb	r2, [r7, #16]
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f001 f87d 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8001290:	7d3b      	ldrb	r3, [r7, #20]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d017      	beq.n	80012ca <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 800129a:	787a      	ldrb	r2, [r7, #1]
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	b2d9      	uxtb	r1, r3
 80012a2:	7c3a      	ldrb	r2, [r7, #16]
 80012a4:	78bb      	ldrb	r3, [r7, #2]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f001 f86c 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 80012b2:	787a      	ldrb	r2, [r7, #1]
 80012b4:	78bb      	ldrb	r3, [r7, #2]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b2d9      	uxtb	r1, r3
 80012ba:	7c3a      	ldrb	r2, [r7, #16]
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f001 f860 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80012ca:	7d3b      	ldrb	r3, [r7, #20]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d017      	beq.n	8001304 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80012d4:	787a      	ldrb	r2, [r7, #1]
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	4413      	add	r3, r2
 80012da:	b2d9      	uxtb	r1, r3
 80012dc:	7c3a      	ldrb	r2, [r7, #16]
 80012de:	78bb      	ldrb	r3, [r7, #2]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f001 f84f 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80012ec:	787a      	ldrb	r2, [r7, #1]
 80012ee:	78bb      	ldrb	r3, [r7, #2]
 80012f0:	4413      	add	r3, r2
 80012f2:	b2d9      	uxtb	r1, r3
 80012f4:	7c3a      	ldrb	r2, [r7, #16]
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	4413      	add	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f001 f843 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001304:	7d3b      	ldrb	r3, [r7, #20]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d017      	beq.n	800133e <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 800130e:	787a      	ldrb	r2, [r7, #1]
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	b2d9      	uxtb	r1, r3
 8001316:	7c3a      	ldrb	r2, [r7, #16]
 8001318:	78bb      	ldrb	r3, [r7, #2]
 800131a:	4413      	add	r3, r2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f001 f832 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8001326:	787a      	ldrb	r2, [r7, #1]
 8001328:	78bb      	ldrb	r3, [r7, #2]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b2d9      	uxtb	r1, r3
 800132e:	7c3a      	ldrb	r2, [r7, #16]
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	4413      	add	r3, r2
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f001 f826 	bl	800238a <u8g2_DrawPixel>
    }
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af02      	add	r7, sp, #8
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	4608      	mov	r0, r1
 8001350:	4611      	mov	r1, r2
 8001352:	461a      	mov	r2, r3
 8001354:	4603      	mov	r3, r0
 8001356:	70fb      	strb	r3, [r7, #3]
 8001358:	460b      	mov	r3, r1
 800135a:	70bb      	strb	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	787b      	ldrb	r3, [r7, #1]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8001376:	7b7a      	ldrb	r2, [r7, #13]
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 8001380:	7b7b      	ldrb	r3, [r7, #13]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	737b      	strb	r3, [r7, #13]
    x = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	733b      	strb	r3, [r7, #12]
    y = rad;
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8001390:	78f8      	ldrb	r0, [r7, #3]
 8001392:	7afa      	ldrb	r2, [r7, #11]
 8001394:	7b39      	ldrb	r1, [r7, #12]
 8001396:	7e3b      	ldrb	r3, [r7, #24]
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	78bb      	ldrb	r3, [r7, #2]
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4603      	mov	r3, r0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff4b 	bl	800123c <u8g2_draw_circle_section>
    
    while ( x < y )
 80013a6:	e026      	b.n	80013f6 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 80013a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0b      	blt.n	80013c8 <u8g2_draw_circle+0x82>
      {
        y--;
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 80013b6:	7b7b      	ldrb	r3, [r7, #13]
 80013b8:	3302      	adds	r3, #2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	4413      	add	r3, r2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	3302      	adds	r3, #2
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	4413      	add	r3, r2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 80013e0:	78f8      	ldrb	r0, [r7, #3]
 80013e2:	7afa      	ldrb	r2, [r7, #11]
 80013e4:	7b39      	ldrb	r1, [r7, #12]
 80013e6:	7e3b      	ldrb	r3, [r7, #24]
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	78bb      	ldrb	r3, [r7, #2]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4603      	mov	r3, r0
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff23 	bl	800123c <u8g2_draw_circle_section>
    while ( x < y )
 80013f6:	7b3a      	ldrb	r2, [r7, #12]
 80013f8:	7afb      	ldrb	r3, [r7, #11]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3d4      	bcc.n	80013a8 <u8g2_draw_circle+0x62>
    }
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001406:	b590      	push	{r4, r7, lr}
 8001408:	b085      	sub	sp, #20
 800140a:	af02      	add	r7, sp, #8
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	4608      	mov	r0, r1
 8001410:	4611      	mov	r1, r2
 8001412:	461a      	mov	r2, r3
 8001414:	4603      	mov	r3, r0
 8001416:	70fb      	strb	r3, [r7, #3]
 8001418:	460b      	mov	r3, r1
 800141a:	70bb      	strb	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8001420:	78fa      	ldrb	r2, [r7, #3]
 8001422:	787b      	ldrb	r3, [r7, #1]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	b2d9      	uxtb	r1, r3
 8001428:	78ba      	ldrb	r2, [r7, #2]
 800142a:	787b      	ldrb	r3, [r7, #1]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	b2d8      	uxtb	r0, r3
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	787b      	ldrb	r3, [r7, #1]
 8001434:	4413      	add	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	b2dc      	uxtb	r4, r3
 800143c:	78ba      	ldrb	r2, [r7, #2]
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	4413      	add	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	3301      	adds	r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	4623      	mov	r3, r4
 800144c:	4602      	mov	r2, r0
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f001 f817 	bl	8002482 <u8g2_IsIntersection>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 800145a:	7878      	ldrb	r0, [r7, #1]
 800145c:	78ba      	ldrb	r2, [r7, #2]
 800145e:	78f9      	ldrb	r1, [r7, #3]
 8001460:	7e3b      	ldrb	r3, [r7, #24]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4603      	mov	r3, r0
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff6d 	bl	8001346 <u8g2_draw_circle>
 800146c:	e000      	b.n	8001470 <u8g2_DrawCircle+0x6a>
      return;
 800146e:	bf00      	nop
}
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
	...

08001478 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2208      	movs	r2, #8
 8001484:	701a      	strb	r2, [r3, #0]
  return buf;
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	2000012c 	.word	0x2000012c

08001498 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 80014ae:	490c      	ldr	r1, [pc, #48]	; (80014e0 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f001 feb7 	bl	8003224 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80014b6:	f107 0313 	add.w	r3, r7, #19
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffdc 	bl	8001478 <u8g2_m_16_8_f>
 80014c0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80014c2:	7cfa      	ldrb	r2, [r7, #19]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 80014ca:	6979      	ldr	r1, [r7, #20]
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f001 f8c0 	bl	8002652 <u8g2_SetupBuffer>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08002de9 	.word	0x08002de9
 80014e0:	08002f85 	.word	0x08002f85
 80014e4:	080024d9 	.word	0x080024d9

080014e8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	81fb      	strh	r3, [r7, #14]
    font++;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3301      	adds	r3, #1
 8001528:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b29a      	uxth	r2, r3
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	4413      	add	r3, r2
 800153a:	81fb      	strh	r3, [r7, #14]
    return pos;
 800153c:	89fb      	ldrh	r3, [r7, #14]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001552:	2100      	movs	r1, #0
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f7ff ffc7 	bl	80014e8 <u8g2_font_get_byte>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001562:	2101      	movs	r1, #1
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	f7ff ffbf 	bl	80014e8 <u8g2_font_get_byte>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001572:	2102      	movs	r1, #2
 8001574:	6838      	ldr	r0, [r7, #0]
 8001576:	f7ff ffb7 	bl	80014e8 <u8g2_font_get_byte>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001582:	2103      	movs	r1, #3
 8001584:	6838      	ldr	r0, [r7, #0]
 8001586:	f7ff ffaf 	bl	80014e8 <u8g2_font_get_byte>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001592:	2104      	movs	r1, #4
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7ff ffa7 	bl	80014e8 <u8g2_font_get_byte>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80015a2:	2105      	movs	r1, #5
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7ff ff9f 	bl	80014e8 <u8g2_font_get_byte>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80015b2:	2106      	movs	r1, #6
 80015b4:	6838      	ldr	r0, [r7, #0]
 80015b6:	f7ff ff97 	bl	80014e8 <u8g2_font_get_byte>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80015c2:	2107      	movs	r1, #7
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f7ff ff8f 	bl	80014e8 <u8g2_font_get_byte>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80015d2:	2108      	movs	r1, #8
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f7ff ff87 	bl	80014e8 <u8g2_font_get_byte>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80015e2:	2109      	movs	r1, #9
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f7ff ff7f 	bl	80014e8 <u8g2_font_get_byte>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80015f2:	210a      	movs	r1, #10
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7ff ff77 	bl	80014e8 <u8g2_font_get_byte>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001602:	210b      	movs	r1, #11
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f7ff ff6f 	bl	80014e8 <u8g2_font_get_byte>
 800160a:	4603      	mov	r3, r0
 800160c:	b25a      	sxtb	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001612:	210c      	movs	r1, #12
 8001614:	6838      	ldr	r0, [r7, #0]
 8001616:	f7ff ff67 	bl	80014e8 <u8g2_font_get_byte>
 800161a:	4603      	mov	r3, r0
 800161c:	b25a      	sxtb	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001622:	210d      	movs	r1, #13
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f7ff ff5f 	bl	80014e8 <u8g2_font_get_byte>
 800162a:	4603      	mov	r3, r0
 800162c:	b25a      	sxtb	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001632:	210e      	movs	r1, #14
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f7ff ff57 	bl	80014e8 <u8g2_font_get_byte>
 800163a:	4603      	mov	r3, r0
 800163c:	b25a      	sxtb	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001642:	210f      	movs	r1, #15
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f7ff ff4f 	bl	80014e8 <u8g2_font_get_byte>
 800164a:	4603      	mov	r3, r0
 800164c:	b25a      	sxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001652:	2110      	movs	r1, #16
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f7ff ff47 	bl	80014e8 <u8g2_font_get_byte>
 800165a:	4603      	mov	r3, r0
 800165c:	b25a      	sxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001662:	2111      	movs	r1, #17
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	f7ff ff50 	bl	800150a <u8g2_font_get_word>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001672:	2113      	movs	r1, #19
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7ff ff48 	bl	800150a <u8g2_font_get_word>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001682:	2115      	movs	r1, #21
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f7ff ff40 	bl	800150a <u8g2_font_get_word>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	82da      	strh	r2, [r3, #22]
#endif
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7a9b      	ldrb	r3, [r3, #10]
 80016aa:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	7b7b      	ldrb	r3, [r7, #13]
 80016b8:	fa42 f303 	asr.w	r3, r2, r3
 80016bc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80016be:	7b7b      	ldrb	r3, [r7, #13]
 80016c0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80016c2:	7bba      	ldrb	r2, [r7, #14]
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	4413      	add	r3, r2
 80016c8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	2b07      	cmp	r3, #7
 80016ce:	d91a      	bls.n	8001706 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80016d4:	7b3a      	ldrb	r2, [r7, #12]
 80016d6:	7b7b      	ldrb	r3, [r7, #13]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	7b3b      	ldrb	r3, [r7, #12]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	3b08      	subs	r3, #8
 8001704:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	4013      	ands	r3, r2
 800171a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7bba      	ldrb	r2, [r7, #14]
 8001720:	729a      	strb	r2, [r3, #10]
  return val;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	4619      	mov	r1, r3
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffab 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001748:	2301      	movs	r3, #1
 800174a:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	3b01      	subs	r3, #1
 8001750:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001752:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	73fb      	strb	r3, [r7, #15]
  return v;
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001774:	b490      	push	{r4, r7}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4623      	mov	r3, r4
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	4603      	mov	r3, r0
 8001788:	71bb      	strb	r3, [r7, #6]
 800178a:	460b      	mov	r3, r1
 800178c:	717b      	strb	r3, [r7, #5]
 800178e:	4613      	mov	r3, r2
 8001790:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001792:	793b      	ldrb	r3, [r7, #4]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d008      	beq.n	80017aa <u8g2_add_vector_y+0x36>
 8001798:	2b02      	cmp	r3, #2
 800179a:	d00b      	beq.n	80017b4 <u8g2_add_vector_y+0x40>
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10e      	bne.n	80017be <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 80017a0:	797a      	ldrb	r2, [r7, #5]
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	4413      	add	r3, r2
 80017a6:	71fb      	strb	r3, [r7, #7]
      break;
 80017a8:	e00e      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 80017aa:	79ba      	ldrb	r2, [r7, #6]
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4413      	add	r3, r2
 80017b0:	71fb      	strb	r3, [r7, #7]
      break;
 80017b2:	e009      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 80017b4:	797b      	ldrb	r3, [r7, #5]
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	71fb      	strb	r3, [r7, #7]
      break;
 80017bc:	e004      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	79fa      	ldrb	r2, [r7, #7]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	71fb      	strb	r3, [r7, #7]
      break;      
 80017c6:	bf00      	nop
  }
  return dy;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc90      	pop	{r4, r7}
 80017d2:	4770      	bx	lr

080017d4 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80017d4:	b490      	push	{r4, r7}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4604      	mov	r4, r0
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4623      	mov	r3, r4
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	4603      	mov	r3, r0
 80017e8:	71bb      	strb	r3, [r7, #6]
 80017ea:	460b      	mov	r3, r1
 80017ec:	717b      	strb	r3, [r7, #5]
 80017ee:	4613      	mov	r3, r2
 80017f0:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80017f2:	793b      	ldrb	r3, [r7, #4]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d008      	beq.n	800180a <u8g2_add_vector_x+0x36>
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d00b      	beq.n	8001814 <u8g2_add_vector_x+0x40>
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10e      	bne.n	800181e <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8001800:	79ba      	ldrb	r2, [r7, #6]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4413      	add	r3, r2
 8001806:	71fb      	strb	r3, [r7, #7]
      break;
 8001808:	e00e      	b.n	8001828 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 800180a:	797b      	ldrb	r3, [r7, #5]
 800180c:	79fa      	ldrb	r2, [r7, #7]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	71fb      	strb	r3, [r7, #7]
      break;
 8001812:	e009      	b.n	8001828 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	71fb      	strb	r3, [r7, #7]
      break;
 800181c:	e004      	b.n	8001828 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 800181e:	797a      	ldrb	r2, [r7, #5]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4413      	add	r3, r2
 8001824:	71fb      	strb	r3, [r7, #7]
      break;      
 8001826:	bf00      	nop
  }
  return dx;
 8001828:	79fb      	ldrb	r3, [r7, #7]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bc90      	pop	{r4, r7}
 8001832:	4770      	bx	lr

08001834 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af02      	add	r7, sp, #8
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
 8001840:	4613      	mov	r3, r2
 8001842:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3354      	adds	r3, #84	; 0x54
 8001848:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001854:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800185c:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001864:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	7d7b      	ldrb	r3, [r7, #21]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001872:	7dfa      	ldrb	r2, [r7, #23]
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	429a      	cmp	r2, r3
 8001878:	d201      	bcs.n	800187e <u8g2_font_decode_len+0x4a>
      current = cnt;
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	795b      	ldrb	r3, [r3, #5]
 8001888:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800188a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800188e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	7b9b      	ldrb	r3, [r3, #14]
 8001896:	7bb8      	ldrb	r0, [r7, #14]
 8001898:	f7ff ff9c 	bl	80017d4 <u8g2_add_vector_x>
 800189c:	4603      	mov	r3, r0
 800189e:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80018a0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80018a4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	7b9b      	ldrb	r3, [r3, #14]
 80018ac:	7b78      	ldrb	r0, [r7, #13]
 80018ae:	f7ff ff61 	bl	8001774 <u8g2_add_vector_y>
 80018b2:	4603      	mov	r3, r0
 80018b4:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00f      	beq.n	80018dc <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	7b1a      	ldrb	r2, [r3, #12]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	7b9b      	ldrb	r3, [r3, #14]
 80018ca:	7db8      	ldrb	r0, [r7, #22]
 80018cc:	7b7a      	ldrb	r2, [r7, #13]
 80018ce:	7bb9      	ldrb	r1, [r7, #14]
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	4603      	mov	r3, r0
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fca1 	bl	800221c <u8g2_DrawHVLine>
 80018da:	e012      	b.n	8001902 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	7adb      	ldrb	r3, [r3, #11]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10e      	bne.n	8001902 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	7b5a      	ldrb	r2, [r3, #13]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	7b9b      	ldrb	r3, [r3, #14]
 80018f2:	7db8      	ldrb	r0, [r7, #22]
 80018f4:	7b7a      	ldrb	r2, [r7, #13]
 80018f6:	7bb9      	ldrb	r1, [r7, #14]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	4603      	mov	r3, r0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fc8d 	bl	800221c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001902:	7dfa      	ldrb	r2, [r7, #23]
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	429a      	cmp	r2, r3
 8001908:	d309      	bcc.n	800191e <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 800190a:	7dfa      	ldrb	r2, [r7, #23]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	757b      	strb	r3, [r7, #21]
    ly++;
 8001916:	7d3b      	ldrb	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800191c:	e79f      	b.n	800185e <u8g2_font_decode_len+0x2a>
      break;
 800191e:	bf00      	nop
  }
  lx += cnt;
 8001920:	7d7a      	ldrb	r2, [r7, #21]
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	4413      	add	r3, r2
 8001926:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001928:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001930:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	71da      	strb	r2, [r3, #7]
  
}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3354      	adds	r3, #84	; 0x54
 800194e:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001962:	4619      	mov	r1, r3
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fe98 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 800196a:	4603      	mov	r3, r0
 800196c:	b25a      	sxtb	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001978:	4619      	mov	r1, r3
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fe8d 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001980:	4603      	mov	r3, r0
 8001982:	b25a      	sxtb	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	7b1b      	ldrb	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	735a      	strb	r2, [r3, #13]
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3354      	adds	r3, #84	; 0x54
 80019be:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80019c0:	6839      	ldr	r1, [r7, #0]
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffbc 	bl	8001940 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80019ce:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80019d6:	4619      	mov	r1, r3
 80019d8:	6938      	ldr	r0, [r7, #16]
 80019da:	f7ff fea8 	bl	800172e <u8g2_font_decode_get_signed_bits>
 80019de:	4603      	mov	r3, r0
 80019e0:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80019e8:	4619      	mov	r1, r3
 80019ea:	6938      	ldr	r0, [r7, #16]
 80019ec:	f7ff fe9f 	bl	800172e <u8g2_font_decode_get_signed_bits>
 80019f0:	4603      	mov	r3, r0
 80019f2:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80019fa:	4619      	mov	r1, r3
 80019fc:	6938      	ldr	r0, [r7, #16]
 80019fe:	f7ff fe96 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001a02:	4603      	mov	r3, r0
 8001a04:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f340 80cf 	ble.w	8001bb0 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	7918      	ldrb	r0, [r3, #4]
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	7b7b      	ldrb	r3, [r7, #13]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	425b      	negs	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	b25a      	sxtb	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	7b9b      	ldrb	r3, [r3, #14]
 8001a28:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001a2c:	f7ff fed2 	bl	80017d4 <u8g2_add_vector_x>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	7958      	ldrb	r0, [r3, #5]
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	7b7b      	ldrb	r3, [r7, #13]
 8001a40:	4413      	add	r3, r2
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	425b      	negs	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	b25a      	sxtb	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	7b9b      	ldrb	r3, [r3, #14]
 8001a4e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001a52:	f7ff fe8f 	bl	8001774 <u8g2_add_vector_y>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	795b      	ldrb	r3, [r3, #5]
 8001a68:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	7b9b      	ldrb	r3, [r3, #14]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d852      	bhi.n	8001b20 <u8g2_font_decode_glyph+0x170>
 8001a7a:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <u8g2_font_decode_glyph+0xd0>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001aa9 	.word	0x08001aa9
 8001a88:	08001acd 	.word	0x08001acd
 8001a8c:	08001afd 	.word	0x08001afd
      {
	case 0:
	    x1 += decode->glyph_width;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	7dbb      	ldrb	r3, [r7, #22]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	7d3b      	ldrb	r3, [r7, #20]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	753b      	strb	r3, [r7, #20]
	    break;
 8001aa6:	e03b      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	7dfa      	ldrb	r2, [r7, #23]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001ab6:	7dbb      	ldrb	r3, [r7, #22]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	7d3b      	ldrb	r3, [r7, #20]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	753b      	strb	r3, [r7, #20]
	    break;
 8001aca:	e029      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	7dfa      	ldrb	r2, [r7, #23]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	3301      	adds	r3, #1
 8001ade:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001ae0:	7dbb      	ldrb	r3, [r7, #22]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	7d7a      	ldrb	r2, [r7, #21]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001aee:	7d7b      	ldrb	r3, [r7, #21]
 8001af0:	3301      	adds	r3, #1
 8001af2:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001af4:	7d3b      	ldrb	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001afa:	e011      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	7dbb      	ldrb	r3, [r7, #22]
 8001b00:	4413      	add	r3, r2
 8001b02:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	7d7a      	ldrb	r2, [r7, #21]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b12:	7d7b      	ldrb	r3, [r7, #21]
 8001b14:	3301      	adds	r3, #1
 8001b16:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001b18:	7d3b      	ldrb	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001b1e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001b20:	7db8      	ldrb	r0, [r7, #22]
 8001b22:	7d7a      	ldrb	r2, [r7, #21]
 8001b24:	7df9      	ldrb	r1, [r7, #23]
 8001b26:	7d3b      	ldrb	r3, [r7, #20]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fca8 	bl	8002482 <u8g2_IsIntersection>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <u8g2_font_decode_glyph+0x18e>
	return d;
 8001b38:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001b3c:	e03a      	b.n	8001bb4 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2200      	movs	r2, #0
 8001b42:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2200      	movs	r2, #0
 8001b48:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001b50:	4619      	mov	r1, r3
 8001b52:	6938      	ldr	r0, [r7, #16]
 8001b54:	f7ff fda1 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001b62:	4619      	mov	r1, r3
 8001b64:	6938      	ldr	r0, [r7, #16]
 8001b66:	f7ff fd98 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	2200      	movs	r2, #0
 8001b72:	4619      	mov	r1, r3
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fe5d 	bl	8001834 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001b7a:	7abb      	ldrb	r3, [r7, #10]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fe57 	bl	8001834 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001b86:	2101      	movs	r1, #1
 8001b88:	6938      	ldr	r0, [r7, #16]
 8001b8a:	f7ff fd86 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ec      	bne.n	8001b6e <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001b9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dd00      	ble.n	8001ba4 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001ba2:	e7d2      	b.n	8001b4a <u8g2_font_decode_glyph+0x19a>
	break;
 8001ba4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	7b1a      	ldrb	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8001bb0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3317      	adds	r3, #23
 8001bd2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	2bff      	cmp	r3, #255	; 0xff
 8001bd8:	d82a      	bhi.n	8001c30 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	2b60      	cmp	r3, #96	; 0x60
 8001bde:	d907      	bls.n	8001bf0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001be6:	461a      	mov	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e009      	b.n	8001c04 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d906      	bls.n	8001c04 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d04e      	beq.n	8001cac <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	887a      	ldrh	r2, [r7, #2]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d102      	bne.n	8001c20 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	e049      	b.n	8001cb4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c2e:	e7e9      	b.n	8001c04 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001c36:	461a      	mov	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001c42:	2100      	movs	r1, #0
 8001c44:	6938      	ldr	r0, [r7, #16]
 8001c46:	f7ff fc60 	bl	800150a <u8g2_font_get_word>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001c54:	2102      	movs	r1, #2
 8001c56:	6938      	ldr	r0, [r7, #16]
 8001c58:	f7ff fc57 	bl	800150a <u8g2_font_get_word>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3304      	adds	r3, #4
 8001c64:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001c66:	89fa      	ldrh	r2, [r7, #14]
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3e9      	bcc.n	8001c42 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001c74:	89fb      	ldrh	r3, [r7, #14]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001c88:	89fb      	ldrh	r3, [r7, #14]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001c8e:	89fa      	ldrh	r2, [r7, #14]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d102      	bne.n	8001c9c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3303      	adds	r3, #3
 8001c9a:	e00b      	b.n	8001cb4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001caa:	e7e0      	b.n	8001c6e <u8g2_font_get_glyph_data+0xb2>
	break;
 8001cac:	bf00      	nop
 8001cae:	e000      	b.n	8001cb2 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001cb0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	4608      	mov	r0, r1
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4603      	mov	r3, r0
 8001ccc:	70fb      	strb	r3, [r7, #3]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70bb      	strb	r3, [r7, #2]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	78ba      	ldrb	r2, [r7, #2]
 8001ce6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001cea:	883b      	ldrh	r3, [r7, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff64 	bl	8001bbc <u8g2_font_get_glyph_data>
 8001cf4:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fe56 	bl	80019b0 <u8g2_font_decode_glyph>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff4a 	bl	8001bbc <u8g2_font_get_glyph_data>
 8001d28:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001d30:	2300      	movs	r3, #0
 8001d32:	e027      	b.n	8001d84 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fe02 	bl	8001940 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff fcef 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001d66:	4619      	mov	r1, r3
 8001d68:	4610      	mov	r0, r2
 8001d6a:	f7ff fce0 	bl	800172e <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f7ff fcd6 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001d82:	4603      	mov	r3, r0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
	...

08001dac <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	70fb      	strb	r3, [r7, #3]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70bb      	strb	r3, [r7, #2]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d833      	bhi.n	8001e38 <u8g2_DrawGlyph+0x8c>
 8001dd0:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <u8g2_DrawGlyph+0x2c>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	08001dfd 	.word	0x08001dfd
 8001de0:	08001e11 	.word	0x08001e11
 8001de4:	08001e25 	.word	0x08001e25
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	78bb      	ldrb	r3, [r7, #2]
 8001df6:	4413      	add	r3, r2
 8001df8:	70bb      	strb	r3, [r7, #2]
      break;
 8001dfa:	e01d      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	70fb      	strb	r3, [r7, #3]
      break;
 8001e0e:	e013      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	78bb      	ldrb	r3, [r7, #2]
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	70bb      	strb	r3, [r7, #2]
      break;
 8001e22:	e009      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	4413      	add	r3, r2
 8001e34:	70fb      	strb	r3, [r7, #3]
      break;
 8001e36:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001e38:	883b      	ldrh	r3, [r7, #0]
 8001e3a:	78ba      	ldrb	r2, [r7, #2]
 8001e3c:	78f9      	ldrb	r1, [r7, #3]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff3c 	bl	8001cbc <u8g2_font_draw_glyph>
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop

08001e50 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	72fb      	strb	r3, [r7, #11]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fec2 	bl	8002bec <u8x8_utf8_init>
  sum = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	4611      	mov	r1, r2
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	4798      	blx	r3
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001e7e:	8abb      	ldrh	r3, [r7, #20]
 8001e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d038      	beq.n	8001efa <u8g2_draw_string+0xaa>
      break;
    str++;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001e8e:	8abb      	ldrh	r3, [r7, #20]
 8001e90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d0e9      	beq.n	8001e6c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001e98:	8abb      	ldrh	r3, [r7, #20]
 8001e9a:	7aba      	ldrb	r2, [r7, #10]
 8001e9c:	7af9      	ldrb	r1, [r7, #11]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ff84 	bl	8001dac <u8g2_DrawGlyph>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d81e      	bhi.n	8001ef0 <u8g2_draw_string+0xa0>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <u8g2_draw_string+0x68>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001ed3 	.word	0x08001ed3
 8001ec0:	08001edd 	.word	0x08001edd
 8001ec4:	08001ee7 	.word	0x08001ee7
      {
	case 0:
	  x += delta;
 8001ec8:	7afa      	ldrb	r2, [r7, #11]
 8001eca:	7cfb      	ldrb	r3, [r7, #19]
 8001ecc:	4413      	add	r3, r2
 8001ece:	72fb      	strb	r3, [r7, #11]
	  break;
 8001ed0:	e00e      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001ed2:	7aba      	ldrb	r2, [r7, #10]
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	72bb      	strb	r3, [r7, #10]
	  break;
 8001eda:	e009      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001edc:	7afa      	ldrb	r2, [r7, #11]
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	72fb      	strb	r3, [r7, #11]
	  break;
 8001ee4:	e004      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001ee6:	7aba      	ldrb	r2, [r7, #10]
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	72bb      	strb	r3, [r7, #10]
	  break;
 8001eee:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001ef0:	7dfa      	ldrb	r2, [r7, #23]
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001ef8:	e7b8      	b.n	8001e6c <u8g2_draw_string+0x1c>
      break;
 8001efa:	bf00      	nop
    }
  }
  return sum;
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	72fb      	strb	r3, [r7, #11]
 8001f16:	4613      	mov	r3, r2
 8001f18:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <u8g2_DrawStr+0x30>)
 8001f1e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001f20:	7aba      	ldrb	r2, [r7, #10]
 8001f22:	7af9      	ldrb	r1, [r7, #11]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff ff92 	bl	8001e50 <u8g2_draw_string>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	08002c07 	.word	0x08002c07

08001f3c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05d      	beq.n	8002008 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d04d      	beq.n	800200a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d11c      	bne.n	8001fb2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8001f84:	429a      	cmp	r2, r3
 8001f86:	da05      	bge.n	8001f94 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dd32      	ble.n	800200a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001fb0:	e02b      	b.n	800200a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001fb8:	461a      	mov	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001fc8:	440b      	add	r3, r1
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	da0d      	bge.n	8001fea <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	b25a      	sxtb	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dd07      	ble.n	800200a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002006:	e000      	b.n	800200a <u8g2_UpdateRefHeight+0xce>
    return;
 8002008:	bf00      	nop
  }  
}
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
	...

08002028 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a03      	ldr	r2, [pc, #12]	; (8002040 <u8g2_SetFontPosBaseline+0x18>)
 8002034:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	08002013 	.word	0x08002013

08002044 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d00b      	beq.n	8002070 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3364      	adds	r3, #100	; 0x64
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fa6f 	bl	8001548 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff66 	bl	8001f3c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fdae 	bl	8002bec <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	4611      	mov	r1, r2
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 80020aa:	89bb      	ldrh	r3, [r7, #12]
 80020ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <u8g2_string_width+0x64>
      break;
    str++;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 80020ba:	89bb      	ldrh	r3, [r7, #12]
 80020bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d0e9      	beq.n	8002098 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 80020c4:	89bb      	ldrh	r3, [r7, #12]
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fe22 	bl	8001d12 <u8g2_GetGlyphWidth>
 80020ce:	4603      	mov	r3, r0
 80020d0:	73bb      	strb	r3, [r7, #14]
      w += dx;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	4413      	add	r3, r2
 80020d8:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80020da:	e7dd      	b.n	8002098 <u8g2_string_width+0x20>
      break;
 80020dc:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d011      	beq.n	800210c <u8g2_string_width+0x94>
  {
    w -= dx;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	4413      	add	r3, r2
 80020fc:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002104:	b2da      	uxtb	r2, r3
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	4413      	add	r3, r2
 800210a:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a05      	ldr	r2, [pc, #20]	; (800213c <u8g2_GetStrWidth+0x24>)
 8002126:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa4 	bl	8002078 <u8g2_string_width>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	08002c07 	.word	0x08002c07

08002140 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	4611      	mov	r1, r2
 800214c:	461a      	mov	r2, r3
 800214e:	460b      	mov	r3, r1
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	4613      	mov	r3, r2
 8002154:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	7dbb      	ldrb	r3, [r7, #22]
 8002166:	4413      	add	r3, r2
 8002168:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800216a:	7dfa      	ldrb	r2, [r7, #23]
 800216c:	7dbb      	ldrb	r3, [r7, #22]
 800216e:	429a      	cmp	r2, r3
 8002170:	d90b      	bls.n	800218a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002172:	7dfa      	ldrb	r2, [r7, #23]
 8002174:	79bb      	ldrb	r3, [r7, #6]
 8002176:	429a      	cmp	r2, r3
 8002178:	d205      	bcs.n	8002186 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	75bb      	strb	r3, [r7, #22]
      b--;
 800217e:	7dbb      	ldrb	r3, [r7, #22]
 8002180:	3b01      	subs	r3, #1
 8002182:	75bb      	strb	r3, [r7, #22]
 8002184:	e001      	b.n	800218a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800218a:	7dfa      	ldrb	r2, [r7, #23]
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	429a      	cmp	r2, r3
 8002190:	d301      	bcc.n	8002196 <u8g2_clip_intersection2+0x56>
    return 0;
 8002192:	2300      	movs	r3, #0
 8002194:	e01c      	b.n	80021d0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002196:	7dba      	ldrb	r2, [r7, #22]
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	429a      	cmp	r2, r3
 800219c:	d801      	bhi.n	80021a2 <u8g2_clip_intersection2+0x62>
    return 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	e016      	b.n	80021d0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80021a2:	7dfa      	ldrb	r2, [r7, #23]
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d201      	bcs.n	80021ae <u8g2_clip_intersection2+0x6e>
    a = c;
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80021ae:	7dba      	ldrb	r2, [r7, #22]
 80021b0:	79bb      	ldrb	r3, [r7, #6]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d901      	bls.n	80021ba <u8g2_clip_intersection2+0x7a>
    b = d;
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	7dfa      	ldrb	r2, [r7, #23]
 80021be:	701a      	strb	r2, [r3, #0]
  b -= a;
 80021c0:	7dba      	ldrb	r2, [r7, #22]
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	75bb      	strb	r3, [r7, #22]
  *len = b;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	7dba      	ldrb	r2, [r7, #22]
 80021cc:	701a      	strb	r2, [r3, #0]
  return 1;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80021da:	b590      	push	{r4, r7, lr}
 80021dc:	b085      	sub	sp, #20
 80021de:	af02      	add	r7, sp, #8
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	4608      	mov	r0, r1
 80021e4:	4611      	mov	r1, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	4603      	mov	r3, r0
 80021ea:	70fb      	strb	r3, [r7, #3]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70bb      	strb	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fa:	78ba      	ldrb	r2, [r7, #2]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002204:	7878      	ldrb	r0, [r7, #1]
 8002206:	78ba      	ldrb	r2, [r7, #2]
 8002208:	78f9      	ldrb	r1, [r7, #3]
 800220a:	7e3b      	ldrb	r3, [r7, #24]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4603      	mov	r3, r0
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	47a0      	blx	r4
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}

0800221c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b085      	sub	sp, #20
 8002220:	af02      	add	r7, sp, #8
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4603      	mov	r3, r0
 800222c:	70fb      	strb	r3, [r7, #3]
 800222e:	460b      	mov	r3, r1
 8002230:	70bb      	strb	r3, [r7, #2]
 8002232:	4613      	mov	r3, r2
 8002234:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d06d      	beq.n	800231c <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d06a      	beq.n	800231c <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002246:	787b      	ldrb	r3, [r7, #1]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d918      	bls.n	800227e <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800224c:	7e3b      	ldrb	r3, [r7, #24]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d109      	bne.n	8002266 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	70fb      	strb	r3, [r7, #3]
	  x++;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	3301      	adds	r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	70fb      	strb	r3, [r7, #3]
 8002264:	e00b      	b.n	800227e <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8002266:	7e3b      	ldrb	r3, [r7, #24]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d108      	bne.n	800227e <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800226c:	78ba      	ldrb	r2, [r7, #2]
 800226e:	787b      	ldrb	r3, [r7, #1]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	70bb      	strb	r3, [r7, #2]
	  y++;
 8002276:	78bb      	ldrb	r3, [r7, #2]
 8002278:	3301      	adds	r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800227e:	7e3b      	ldrb	r3, [r7, #24]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002286:	7e3b      	ldrb	r3, [r7, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d119      	bne.n	80022c0 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002292:	78bb      	ldrb	r3, [r7, #2]
 8002294:	429a      	cmp	r2, r3
 8002296:	d838      	bhi.n	800230a <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800229e:	78bb      	ldrb	r3, [r7, #2]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d934      	bls.n	800230e <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022b0:	1c79      	adds	r1, r7, #1
 80022b2:	1cf8      	adds	r0, r7, #3
 80022b4:	f7ff ff44 	bl	8002140 <u8g2_clip_intersection2>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d119      	bne.n	80022f2 <u8g2_DrawHVLine+0xd6>
	  return;
 80022be:	e02d      	b.n	800231c <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d822      	bhi.n	8002312 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d91e      	bls.n	8002316 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022e4:	1c79      	adds	r1, r7, #1
 80022e6:	1cb8      	adds	r0, r7, #2
 80022e8:	f7ff ff2a 	bl	8002140 <u8g2_clip_intersection2>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d013      	beq.n	800231a <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	689c      	ldr	r4, [r3, #8]
 80022f8:	78f9      	ldrb	r1, [r7, #3]
 80022fa:	78ba      	ldrb	r2, [r7, #2]
 80022fc:	7878      	ldrb	r0, [r7, #1]
 80022fe:	7e3b      	ldrb	r3, [r7, #24]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	4603      	mov	r3, r0
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	47a0      	blx	r4
 8002308:	e008      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800230a:	bf00      	nop
 800230c:	e006      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800230e:	bf00      	nop
 8002310:	e004      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 8002312:	bf00      	nop
 8002314:	e002      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800231a:	bf00      	nop
    }
}
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}

08002322 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af02      	add	r7, sp, #8
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	4608      	mov	r0, r1
 800232c:	4611      	mov	r1, r2
 800232e:	461a      	mov	r2, r3
 8002330:	4603      	mov	r3, r0
 8002332:	70fb      	strb	r3, [r7, #3]
 8002334:	460b      	mov	r3, r1
 8002336:	70bb      	strb	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800233c:	7878      	ldrb	r0, [r7, #1]
 800233e:	78ba      	ldrb	r2, [r7, #2]
 8002340:	78f9      	ldrb	r1, [r7, #3]
 8002342:	2300      	movs	r3, #0
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	4603      	mov	r3, r0
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff67 	bl	800221c <u8g2_DrawHVLine>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af02      	add	r7, sp, #8
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	4608      	mov	r0, r1
 8002360:	4611      	mov	r1, r2
 8002362:	461a      	mov	r2, r3
 8002364:	4603      	mov	r3, r0
 8002366:	70fb      	strb	r3, [r7, #3]
 8002368:	460b      	mov	r3, r1
 800236a:	70bb      	strb	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002370:	7878      	ldrb	r0, [r7, #1]
 8002372:	78ba      	ldrb	r2, [r7, #2]
 8002374:	78f9      	ldrb	r1, [r7, #3]
 8002376:	2301      	movs	r3, #1
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	4603      	mov	r3, r0
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff4d 	bl	800221c <u8g2_DrawHVLine>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af02      	add	r7, sp, #8
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	70fb      	strb	r3, [r7, #3]
 8002396:	4613      	mov	r3, r2
 8002398:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80023a0:	78ba      	ldrb	r2, [r7, #2]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d31a      	bcc.n	80023dc <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023ac:	78ba      	ldrb	r2, [r7, #2]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d216      	bcs.n	80023e0 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d312      	bcc.n	80023e4 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d20e      	bcs.n	80023e8 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80023ca:	78ba      	ldrb	r2, [r7, #2]
 80023cc:	78f9      	ldrb	r1, [r7, #3]
 80023ce:	2300      	movs	r3, #0
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff21 	bl	800221c <u8g2_DrawHVLine>
 80023da:	e006      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023dc:	bf00      	nop
 80023de:	e004      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e0:	bf00      	nop
 80023e2:	e002      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e4:	bf00      	nop
 80023e6:	e000      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e8:	bf00      	nop
}
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d903      	bls.n	8002412 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800241c:	b490      	push	{r4, r7}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4604      	mov	r4, r0
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4623      	mov	r3, r4
 800242c:	71fb      	strb	r3, [r7, #7]
 800242e:	4603      	mov	r3, r0
 8002430:	71bb      	strb	r3, [r7, #6]
 8002432:	460b      	mov	r3, r1
 8002434:	717b      	strb	r3, [r7, #5]
 8002436:	4613      	mov	r3, r2
 8002438:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800243a:	797a      	ldrb	r2, [r7, #5]
 800243c:	79bb      	ldrb	r3, [r7, #6]
 800243e:	429a      	cmp	r2, r3
 8002440:	d20d      	bcs.n	800245e <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002442:	793a      	ldrb	r2, [r7, #4]
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d901      	bls.n	800244e <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800244a:	2301      	movs	r3, #1
 800244c:	e014      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800244e:	797a      	ldrb	r2, [r7, #5]
 8002450:	793b      	ldrb	r3, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	d901      	bls.n	800245a <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002456:	2301      	movs	r3, #1
 8002458:	e00e      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800245a:	2300      	movs	r3, #0
 800245c:	e00c      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800245e:	793a      	ldrb	r2, [r7, #4]
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	429a      	cmp	r2, r3
 8002464:	d907      	bls.n	8002476 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002466:	797a      	ldrb	r2, [r7, #5]
 8002468:	793b      	ldrb	r3, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d901      	bls.n	8002472 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800246e:	2301      	movs	r3, #1
 8002470:	e002      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002476:	2300      	movs	r3, #0
    }
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bc90      	pop	{r4, r7}
 8002480:	4770      	bx	lr

08002482 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	4608      	mov	r0, r1
 800248c:	4611      	mov	r1, r2
 800248e:	461a      	mov	r2, r3
 8002490:	4603      	mov	r3, r0
 8002492:	70fb      	strb	r3, [r7, #3]
 8002494:	460b      	mov	r3, r1
 8002496:	70bb      	strb	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80024a8:	7c3b      	ldrb	r3, [r7, #16]
 80024aa:	78ba      	ldrb	r2, [r7, #2]
 80024ac:	f7ff ffb6 	bl	800241c <u8g2_is_intersection_decision_tree>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <u8g2_IsIntersection+0x38>
    return 0; 
 80024b6:	2300      	movs	r3, #0
 80024b8:	e00a      	b.n	80024d0 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 80024c6:	787b      	ldrb	r3, [r7, #1]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	f7ff ffa7 	bl	800241c <u8g2_is_intersection_decision_tree>
 80024ce:	4603      	mov	r3, r0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	4608      	mov	r0, r1
 80024e2:	4611      	mov	r1, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	70fb      	strb	r3, [r7, #3]
 80024ea:	460b      	mov	r3, r1
 80024ec:	70bb      	strb	r3, [r7, #2]
 80024ee:	4613      	mov	r3, r2
 80024f0:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80024f2:	78bb      	ldrb	r3, [r7, #2]
 80024f4:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8002502:	7c3a      	ldrb	r2, [r7, #16]
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800251a:	2b01      	cmp	r3, #1
 800251c:	d801      	bhi.n	8002522 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800251e:	7c3b      	ldrb	r3, [r7, #16]
 8002520:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800252c:	7c3b      	ldrb	r3, [r7, #16]
 800252e:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002530:	78bb      	ldrb	r3, [r7, #2]
 8002532:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8002534:	89fb      	ldrh	r3, [r7, #14]
 8002536:	f023 0307 	bic.w	r3, r3, #7
 800253a:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	7c1b      	ldrb	r3, [r3, #16]
 8002542:	b29b      	uxth	r3, r3
 8002544:	89fa      	ldrh	r2, [r7, #14]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4413      	add	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
  ptr += x;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4413      	add	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8002562:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d117      	bne.n	800259a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	7cbb      	ldrb	r3, [r7, #18]
 8002570:	4313      	orrs	r3, r2
 8002572:	b2da      	uxtb	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	7c7b      	ldrb	r3, [r7, #17]
 800257e:	4053      	eors	r3, r2
 8002580:	b2da      	uxtb	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
	len--;
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	3b01      	subs	r3, #1
 8002590:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8002592:	787b      	ldrb	r3, [r7, #1]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e8      	bne.n	800256a <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002598:	e039      	b.n	800260e <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	7cbb      	ldrb	r3, [r7, #18]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	7c7b      	ldrb	r3, [r7, #17]
 80025ae:	4053      	eors	r3, r2
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80025b6:	7cfb      	ldrb	r3, [r7, #19]
 80025b8:	3301      	adds	r3, #1
 80025ba:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	74fb      	strb	r3, [r7, #19]
      len--;
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d115      	bne.n	80025fc <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025d6:	461a      	mov	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4413      	add	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d801      	bhi.n	80025ec <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d008      	beq.n	8002608 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	747b      	strb	r3, [r7, #17]
 80025fa:	e005      	b.n	8002608 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80025fc:	7cbb      	ldrb	r3, [r7, #18]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8002602:	7c7b      	ldrb	r3, [r7, #17]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1c5      	bne.n	800259a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	22ff      	movs	r2, #255	; 0xff
 8002634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	22ff      	movs	r2, #255	; 0xff
 800263c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff ffaf 	bl	8002618 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff fcb4 	bl	8002028 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026e4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	7c1b      	ldrb	r3, [r3, #16]
 80026f8:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b1f      	cmp	r3, #31
 80026fe:	d901      	bls.n	8002704 <u8g2_update_dimension_common+0x34>
    t = 31;
 8002700:	231f      	movs	r3, #31
 8002702:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002718:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800272e:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002738:	4413      	add	r3, r2
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	7c52      	ldrb	r2, [r2, #17]
 800273e:	4293      	cmp	r3, r2
 8002740:	dd06      	ble.n	8002750 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	7c5a      	ldrb	r2, [r3, #17]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	4413      	add	r3, r2
 8002778:	b2da      	uxtb	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	22f0      	movs	r2, #240	; 0xf0
 8002784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	8a9b      	ldrh	r3, [r3, #20]
 800278c:	2bf0      	cmp	r3, #240	; 0xf0
 800278e:	d805      	bhi.n	800279c <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	8a9b      	ldrh	r3, [r3, #20]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	8adb      	ldrh	r3, [r3, #22]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af02      	add	r7, sp, #8
 80027b8:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4603      	mov	r3, r0
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fe53 	bl	8002482 <u8g2_IsIntersection>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80027ea:	e03b      	b.n	8002864 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002800:	429a      	cmp	r2, r3
 8002802:	d205      	bcs.n	8002810 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800281c:	429a      	cmp	r2, r3
 800281e:	d905      	bls.n	800282c <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002838:	429a      	cmp	r2, r3
 800283a:	d205      	bcs.n	8002848 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002854:	429a      	cmp	r2, r3
 8002856:	d905      	bls.n	8002864 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff2b 	bl	80026d0 <u8g2_update_dimension_common>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff7b 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff feff 	bl	80026d0 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	8a9b      	ldrh	r3, [r3, #20]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	8adb      	ldrh	r3, [r3, #22]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ff41 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fec5 	bl	80026d0 <u8g2_update_dimension_common>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297e:	429a      	cmp	r2, r3
 8002980:	d30a      	bcc.n	8002998 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff feff 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fe83 	bl	80026d0 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	8a9b      	ldrh	r3, [r3, #20]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	8adb      	ldrh	r3, [r3, #22]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d30a      	bcc.n	8002a24 <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff feaf 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	70fb      	strb	r3, [r7, #3]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	70bb      	strb	r3, [r7, #2]
 8002a72:	4613      	mov	r3, r2
 8002a74:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002a76:	7878      	ldrb	r0, [r7, #1]
 8002a78:	78ba      	ldrb	r2, [r7, #2]
 8002a7a:	78f9      	ldrb	r1, [r7, #3]
 8002a7c:	7c3b      	ldrb	r3, [r7, #16]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4603      	mov	r3, r0
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fba9 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	70fb      	strb	r3, [r7, #3]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70bb      	strb	r3, [r7, #2]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab4:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	78bb      	ldrb	r3, [r7, #2]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	73fb      	strb	r3, [r7, #15]
  xx--;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8002ac4:	7e3b      	ldrb	r3, [r7, #24]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8002aca:	7e3b      	ldrb	r3, [r7, #24]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d108      	bne.n	8002ae2 <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	787b      	ldrb	r3, [r7, #1]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	73fb      	strb	r3, [r7, #15]
    xx++;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	3301      	adds	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002ae2:	7878      	ldrb	r0, [r7, #1]
 8002ae4:	7bba      	ldrb	r2, [r7, #14]
 8002ae6:	7bf9      	ldrb	r1, [r7, #15]
 8002ae8:	7e3b      	ldrb	r3, [r7, #24]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4603      	mov	r3, r0
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fb73 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	70fb      	strb	r3, [r7, #3]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70bb      	strb	r3, [r7, #2]
 8002b12:	4613      	mov	r3, r2
 8002b14:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1c:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8002b1e:	7bba      	ldrb	r2, [r7, #14]
 8002b20:	78bb      	ldrb	r3, [r7, #2]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b2c:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002b36:	7e3b      	ldrb	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8002b3c:	7bbb      	ldrb	r3, [r7, #14]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	e009      	b.n	8002b60 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8002b4c:	7e3b      	ldrb	r3, [r7, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d106      	bne.n	8002b60 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002b58:	7bba      	ldrb	r2, [r7, #14]
 8002b5a:	787b      	ldrb	r3, [r7, #1]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002b60:	7878      	ldrb	r0, [r7, #1]
 8002b62:	7bba      	ldrb	r2, [r7, #14]
 8002b64:	7bf9      	ldrb	r1, [r7, #15]
 8002b66:	7e3b      	ldrb	r3, [r7, #24]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fb34 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af02      	add	r7, sp, #8
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	4608      	mov	r0, r1
 8002b84:	4611      	mov	r1, r2
 8002b86:	461a      	mov	r2, r3
 8002b88:	4603      	mov	r3, r0
 8002b8a:	70fb      	strb	r3, [r7, #3]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70bb      	strb	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8002b94:	78bb      	ldrb	r3, [r7, #2]
 8002b96:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b9e:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002ba8:	7e3b      	ldrb	r3, [r7, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	787b      	ldrb	r3, [r7, #1]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	73fb      	strb	r3, [r7, #15]
    yy++;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	763b      	strb	r3, [r7, #24]
 8002bc6:	e004      	b.n	8002bd2 <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002bd2:	7878      	ldrb	r0, [r7, #1]
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	7bb9      	ldrb	r1, [r7, #14]
 8002bd8:	7e3b      	ldrb	r3, [r7, #24]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	4603      	mov	r3, r0
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fafb 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <u8x8_ascii_next+0x18>
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	2b0a      	cmp	r3, #10
 8002c1c:	d102      	bne.n	8002c24 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c22:	e001      	b.n	8002c28 <u8x8_ascii_next+0x22>
  return b;
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	b29b      	uxth	r3, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002c32:	b590      	push	{r4, r7, lr}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691c      	ldr	r4, [r3, #16]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	2300      	movs	r3, #0
 8002c46:	2120      	movs	r1, #32
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	47a0      	blx	r4
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd90      	pop	{r4, r7, pc}

08002c56 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002c56:	b590      	push	{r4, r7, lr}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691c      	ldr	r4, [r3, #16]
 8002c68:	7afa      	ldrb	r2, [r7, #11]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2117      	movs	r1, #23
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	47a0      	blx	r4
 8002c72:	4603      	mov	r3, r0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd90      	pop	{r4, r7, pc}

08002c7c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002c88:	1cfb      	adds	r3, r7, #3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffe1 	bl	8002c56 <u8x8_byte_SendBytes>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002c9e:	b590      	push	{r4, r7, lr}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68dc      	ldr	r4, [r3, #12]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2115      	movs	r1, #21
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	47a0      	blx	r4
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd90      	pop	{r4, r7, pc}

08002cc2 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002cc2:	b590      	push	{r4, r7, lr}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68dc      	ldr	r4, [r3, #12]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2116      	movs	r1, #22
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	47a0      	blx	r4
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}

08002ce6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002ce6:	b590      	push	{r4, r7, lr}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68dc      	ldr	r4, [r3, #12]
 8002cf8:	7afa      	ldrb	r2, [r7, #11]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2117      	movs	r1, #23
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	47a0      	blx	r4
 8002d02:	4603      	mov	r3, r0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd90      	pop	{r4, r7, pc}

08002d0c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68dc      	ldr	r4, [r3, #12]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2118      	movs	r1, #24
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	47a0      	blx	r4
 8002d22:	4603      	mov	r3, r0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}

08002d2c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68dc      	ldr	r4, [r3, #12]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2119      	movs	r1, #25
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	47a0      	blx	r4
 8002d42:	4603      	mov	r3, r0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}

08002d4c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	73fb      	strb	r3, [r7, #15]
    data++;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b17      	cmp	r3, #23
 8002d66:	d017      	beq.n	8002d98 <u8x8_cad_SendSequence+0x4c>
 8002d68:	2b17      	cmp	r3, #23
 8002d6a:	dc02      	bgt.n	8002d72 <u8x8_cad_SendSequence+0x26>
 8002d6c:	2b15      	cmp	r3, #21
 8002d6e:	db37      	blt.n	8002de0 <u8x8_cad_SendSequence+0x94>
 8002d70:	e004      	b.n	8002d7c <u8x8_cad_SendSequence+0x30>
 8002d72:	2b19      	cmp	r3, #25
 8002d74:	dd1e      	ble.n	8002db4 <u8x8_cad_SendSequence+0x68>
 8002d76:	2bfe      	cmp	r3, #254	; 0xfe
 8002d78:	d024      	beq.n	8002dc4 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002d7a:	e031      	b.n	8002de0 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68dc      	ldr	r4, [r3, #12]
 8002d86:	7bba      	ldrb	r2, [r7, #14]
 8002d88:	7bf9      	ldrb	r1, [r7, #15]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	47a0      	blx	r4
	  data++;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	603b      	str	r3, [r7, #0]
	  break;
 8002d96:	e022      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002d9e:	f107 030e 	add.w	r3, r7, #14
 8002da2:	461a      	mov	r2, r3
 8002da4:	2101      	movs	r1, #1
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ff9d 	bl	8002ce6 <u8x8_cad_SendData>
	  data++;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	603b      	str	r3, [r7, #0]
	  break;
 8002db2:	e014      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68dc      	ldr	r4, [r3, #12]
 8002db8:	7bf9      	ldrb	r1, [r7, #15]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	47a0      	blx	r4
	  break;
 8002dc2:	e00c      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002dca:	7bbb      	ldrb	r3, [r7, #14]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2129      	movs	r1, #41	; 0x29
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f9d7 	bl	8003184 <u8x8_gpio_call>
	  data++;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	603b      	str	r3, [r7, #0]
	  break;
 8002ddc:	bf00      	nop
    cmd = *data;
 8002dde:	e7ba      	b.n	8002d56 <u8x8_cad_SendSequence+0xa>
	return;
 8002de0:	bf00      	nop
    }
  }
}
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	72fb      	strb	r3, [r7, #11]
 8002df6:	4613      	mov	r3, r2
 8002df8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002dfa:	7afb      	ldrb	r3, [r7, #11]
 8002dfc:	3b14      	subs	r3, #20
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d82f      	bhi.n	8002e62 <u8x8_cad_001+0x7a>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <u8x8_cad_001+0x20>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e51 	.word	0x08002e51
 8002e0c:	08002e21 	.word	0x08002e21
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08002e51 	.word	0x08002e51
 8002e1c:	08002e51 	.word	0x08002e51
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002e20:	2100      	movs	r1, #0
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff ff05 	bl	8002c32 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e28:	7abb      	ldrb	r3, [r7, #10]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff ff25 	bl	8002c7c <u8x8_byte_SendByte>
      break;
 8002e32:	e018      	b.n	8002e66 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002e34:	2100      	movs	r1, #0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff fefb 	bl	8002c32 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e3c:	7abb      	ldrb	r3, [r7, #10]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ff1b 	bl	8002c7c <u8x8_byte_SendByte>
      break;
 8002e46:	e00e      	b.n	8002e66 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002e48:	2101      	movs	r1, #1
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7ff fef1 	bl	8002c32 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691c      	ldr	r4, [r3, #16]
 8002e54:	7aba      	ldrb	r2, [r7, #10]
 8002e56:	7af9      	ldrb	r1, [r7, #11]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	47a0      	blx	r4
 8002e5e:	4603      	mov	r3, r0
 8002e60:	e002      	b.n	8002e68 <u8x8_cad_001+0x80>
    default:
      return 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <u8x8_cad_001+0x80>
  }
  return 1;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}

08002e70 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	72fb      	strb	r3, [r7, #11]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	2b0e      	cmp	r3, #14
 8002e86:	d05f      	beq.n	8002f48 <u8x8_d_st7565_common+0xd8>
 8002e88:	2b0f      	cmp	r3, #15
 8002e8a:	d002      	beq.n	8002e92 <u8x8_d_st7565_common+0x22>
 8002e8c:	2b0b      	cmp	r3, #11
 8002e8e:	d04e      	beq.n	8002f2e <u8x8_d_st7565_common+0xbe>
 8002e90:	e06c      	b.n	8002f6c <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff3a 	bl	8002d0c <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	795b      	ldrb	r3, [r3, #5]
 8002e9c:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8002e9e:	7dbb      	ldrb	r3, [r7, #22]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002eaa:	7dbb      	ldrb	r3, [r7, #22]
 8002eac:	4413      	add	r3, r2
 8002eae:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002eb0:	7dbb      	ldrb	r3, [r7, #22]
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f043 0310 	orr.w	r3, r3, #16
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff feed 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002ec4:	7dbb      	ldrb	r3, [r7, #22]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4619      	mov	r1, r3
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff fee5 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	799b      	ldrb	r3, [r3, #6]
 8002ed8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff fedc 	bl	8002c9e <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	791b      	ldrb	r3, [r3, #4]
 8002eea:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8002ef8:	7dfa      	ldrb	r2, [r7, #23]
 8002efa:	7dbb      	ldrb	r3, [r7, #22]
 8002efc:	4413      	add	r3, r2
 8002efe:	2b84      	cmp	r3, #132	; 0x84
 8002f00:	d905      	bls.n	8002f0e <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 8002f02:	2384      	movs	r3, #132	; 0x84
 8002f04:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8002f06:	7dfa      	ldrb	r2, [r7, #23]
 8002f08:	7dbb      	ldrb	r3, [r7, #22]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4619      	mov	r1, r3
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fee6 	bl	8002ce6 <u8x8_cad_SendData>
	arg_int--;
 8002f1a:	7abb      	ldrb	r3, [r7, #10]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002f20:	7abb      	ldrb	r3, [r7, #10]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f3      	bne.n	8002f0e <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff ff00 	bl	8002d2c <u8x8_cad_EndTransfer>
      break;
 8002f2c:	e020      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002f2e:	7abb      	ldrb	r3, [r7, #10]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d104      	bne.n	8002f3e <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8002f34:	4911      	ldr	r1, [pc, #68]	; (8002f7c <u8x8_d_st7565_common+0x10c>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff08 	bl	8002d4c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8002f3c:	e018      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8002f3e:	4910      	ldr	r1, [pc, #64]	; (8002f80 <u8x8_d_st7565_common+0x110>)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff ff03 	bl	8002d4c <u8x8_cad_SendSequence>
      break;
 8002f46:	e013      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff fedf 	bl	8002d0c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002f4e:	2181      	movs	r1, #129	; 0x81
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff fea4 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002f56:	7abb      	ldrb	r3, [r7, #10]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff feaf 	bl	8002cc2 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff fee1 	bl	8002d2c <u8x8_cad_EndTransfer>
      break;
 8002f6a:	e001      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <u8x8_d_st7565_common+0x102>
  }
  return 1;
 8002f70:	2301      	movs	r3, #1
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	08013568 	.word	0x08013568
 8002f80:	08013570 	.word	0x08013570

08002f84 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	72fb      	strb	r3, [r7, #11]
 8002f92:	4613      	mov	r3, r2
 8002f94:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8002f96:	7aba      	ldrb	r2, [r7, #10]
 8002f98:	7af9      	ldrb	r1, [r7, #11]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff ff67 	bl	8002e70 <u8x8_d_st7565_common>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d12e      	bne.n	8003006 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002fa8:	7afb      	ldrb	r3, [r7, #11]
 8002faa:	2b0a      	cmp	r3, #10
 8002fac:	d008      	beq.n	8002fc0 <u8x8_d_st7565_nhd_c12864+0x3c>
 8002fae:	2b0d      	cmp	r3, #13
 8002fb0:	d00e      	beq.n	8002fd0 <u8x8_d_st7565_nhd_c12864+0x4c>
 8002fb2:	2b09      	cmp	r3, #9
 8002fb4:	d125      	bne.n	8003002 <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8002fb6:	4917      	ldr	r1, [pc, #92]	; (8003014 <u8x8_d_st7565_nhd_c12864+0x90>)
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f833 	bl	8003024 <u8x8_d_helper_display_setup_memory>
	break;
 8002fbe:	e023      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f842 	bl	800304a <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8002fc6:	4914      	ldr	r1, [pc, #80]	; (8003018 <u8x8_d_st7565_nhd_c12864+0x94>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7ff febf 	bl	8002d4c <u8x8_cad_SendSequence>
	break;
 8002fce:	e01b      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8002fd0:	7abb      	ldrb	r3, [r7, #10]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8002fd6:	4911      	ldr	r1, [pc, #68]	; (800301c <u8x8_d_st7565_nhd_c12864+0x98>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7ff feb7 	bl	8002d4c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	7c9a      	ldrb	r2, [r3, #18]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8002fea:	e00d      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002fec:	490c      	ldr	r1, [pc, #48]	; (8003020 <u8x8_d_st7565_nhd_c12864+0x9c>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff feac 	bl	8002d4c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	7cda      	ldrb	r2, [r3, #19]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8003000:	e002      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 8003002:	2300      	movs	r3, #0
 8003004:	e001      	b.n	800300a <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 8003006:	bf00      	nop
  return 1;
 8003008:	2301      	movs	r3, #1
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	08013588 	.word	0x08013588
 8003018:	080135a0 	.word	0x080135a0
 800301c:	08013578 	.word	0x08013578
 8003020:	08013580 	.word	0x08013580

08003024 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	7c9a      	ldrb	r2, [r3, #18]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800304a:	b590      	push	{r4, r7, lr}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695c      	ldr	r4, [r3, #20]
 8003056:	2300      	movs	r3, #0
 8003058:	2200      	movs	r2, #0
 800305a:	2128      	movs	r1, #40	; 0x28
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68dc      	ldr	r4, [r3, #12]
 8003064:	2300      	movs	r3, #0
 8003066:	2200      	movs	r2, #0
 8003068:	2114      	movs	r1, #20
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800306e:	2201      	movs	r2, #1
 8003070:	214b      	movs	r1, #75	; 0x4b
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f886 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	461a      	mov	r2, r3
 8003080:	2129      	movs	r1, #41	; 0x29
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f87e 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003088:	2200      	movs	r2, #0
 800308a:	214b      	movs	r1, #75	; 0x4b
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f879 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	791b      	ldrb	r3, [r3, #4]
 8003098:	461a      	mov	r2, r3
 800309a:	2129      	movs	r1, #41	; 0x29
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f871 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80030a2:	2201      	movs	r2, #1
 80030a4:	214b      	movs	r1, #75	; 0x4b
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f86c 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	795b      	ldrb	r3, [r3, #5]
 80030b2:	461a      	mov	r2, r3
 80030b4:	2129      	movs	r1, #41	; 0x29
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f864 	bl	8003184 <u8x8_gpio_call>
}    
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}

080030c4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	4608      	mov	r0, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	70fb      	strb	r3, [r7, #3]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70bb      	strb	r3, [r7, #2]
 80030da:	4613      	mov	r3, r2
 80030dc:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80030e2:	78bb      	ldrb	r3, [r7, #2]
 80030e4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80030e6:	787b      	ldrb	r3, [r7, #1]
 80030e8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689c      	ldr	r4, [r3, #8]
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	2201      	movs	r2, #1
 80030f8:	210f      	movs	r1, #15
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	47a0      	blx	r4
 80030fe:	4603      	mov	r3, r0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	bd90      	pop	{r4, r7, pc}

08003108 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689c      	ldr	r4, [r3, #8]
 8003114:	2300      	movs	r3, #0
 8003116:	2200      	movs	r2, #0
 8003118:	2109      	movs	r1, #9
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	47a0      	blx	r4
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}

08003126 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003126:	b590      	push	{r4, r7, lr}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689c      	ldr	r4, [r3, #8]
 8003132:	2300      	movs	r3, #0
 8003134:	2200      	movs	r2, #0
 8003136:	210a      	movs	r1, #10
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	47a0      	blx	r4
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bd90      	pop	{r4, r7, pc}

08003144 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689c      	ldr	r4, [r3, #8]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	2300      	movs	r3, #0
 8003158:	210b      	movs	r1, #11
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	47a0      	blx	r4
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}

08003166 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003166:	b590      	push	{r4, r7, lr}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689c      	ldr	r4, [r3, #8]
 8003172:	2300      	movs	r3, #0
 8003174:	2200      	movs	r2, #0
 8003176:	2110      	movs	r1, #16
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	47a0      	blx	r4
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}

08003184 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
 8003190:	4613      	mov	r3, r2
 8003192:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695c      	ldr	r4, [r3, #20]
 8003198:	78ba      	ldrb	r2, [r7, #2]
 800319a:	78f9      	ldrb	r1, [r7, #3]
 800319c:	2300      	movs	r3, #0
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	47a0      	blx	r4
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}

080031aa <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	72fb      	strb	r3, [r7, #11]
 80031b8:	4613      	mov	r3, r2
 80031ba:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a11      	ldr	r2, [pc, #68]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031da:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031e0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031e6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031ec:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	22ff      	movs	r2, #255	; 0xff
 8003208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	22ff      	movs	r2, #255	; 0xff
 8003210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	080031ab 	.word	0x080031ab

08003224 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff ffc8 	bl	80031c8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff ff59 	bl	8003108 <u8x8_SetupMemory>
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	70fb      	strb	r3, [r7, #3]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	741a      	strb	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	745a      	strb	r2, [r3, #17]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d802      	bhi.n	80032a0 <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	701a      	strb	r2, [r3, #0]
}
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d031      	beq.n	8003324 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d826      	bhi.n	8003316 <_ZN11ChronoTimer8setTimerEm+0x6a>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <_ZN11ChronoTimer8setTimerEm+0x24>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032e1 	.word	0x080032e1
 80032d4:	080032e9 	.word	0x080032e9
 80032d8:	080032f9 	.word	0x080032f9
 80032dc:	08003309 	.word	0x08003309
		{
		case MILLIS:
			timeDelay = SetDelay;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	605a      	str	r2, [r3, #4]
			break;
 80032e6:	e017      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032ee:	fb02 f203 	mul.w	r2, r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	605a      	str	r2, [r3, #4]
			break;
 80032f6:	e00f      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f64e 2260 	movw	r2, #60000	; 0xea60
 80032fe:	fb02 f203 	mul.w	r2, r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	605a      	str	r2, [r3, #4]
			break;
 8003306:	e007      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <_ZN11ChronoTimer8setTimerEm+0x84>)
 800330c:	fb02 f203 	mul.w	r2, r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	605a      	str	r2, [r3, #4]
			break;
 8003314:	e000      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 8003316:	bf00      	nop
		}
		isSetted = true;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	609a      	str	r2, [r3, #8]
	}

}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	0036ee80 	.word	0x0036ee80

08003334 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7c9b      	ldrb	r3, [r3, #18]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00e      	beq.n	8003362 <_ZN11ChronoTimer10startTimerEv+0x2e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7c1b      	ldrb	r3, [r3, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 8003358:	f007 fa2e 	bl	800a7b8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]
	}
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
	if(isStarted)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7c5b      	ldrb	r3, [r3, #17]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
	}
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
	stopTimer();
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffe3 	bl	800336a <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ffc5 	bl	8003334 <_ZN11ChronoTimer10startTimerEv>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	460b      	mov	r3, r1
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 80033c0:	2300      	movs	r3, #0
 80033c2:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff ff6d 	bl	80032ac <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff ffae 	bl	8003334 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 80033d8:	f007 f9ee 	bl	800a7b8 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	1ad2      	subs	r2, r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	bf2c      	ite	cs
 80033ec:	2301      	movcs	r3, #1
 80033ee:	2300      	movcc	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 80033fa:	7afb      	ldrb	r3, [r7, #11]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff ffc5 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af02      	add	r7, sp, #8
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <_ZNSt7__cxx119to_stringEi+0x24>)
 800342a:	2210      	movs	r2, #16
 800342c:	4904      	ldr	r1, [pc, #16]	; (8003440 <_ZNSt7__cxx119to_stringEi+0x28>)
 800342e:	f000 fd45 	bl	8003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	080103b0 	.word	0x080103b0
 8003440:	0800fd69 	.word	0x0800fd69

08003444 <_ZL7bcd2binh>:
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	111b      	asrs	r3, r3, #4
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	b2da      	uxtb	r2, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	4413      	add	r3, r2
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
	...

08003470 <_ZL7bin2bcdh>:
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <_ZL7bin2bcdh+0x30>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	08db      	lsrs	r3, r3, #3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	0052      	lsls	r2, r2, #1
 800348a:	4413      	add	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	b2da      	uxtb	r2, r3
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4413      	add	r3, r2
 8003494:	b2db      	uxtb	r3, r3
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	cccccccd 	.word	0xcccccccd

080034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t; // @suppress("Return with parenthesis")
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 80034ac:	23d0      	movs	r3, #208	; 0xd0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00c fb1f 	bl	800fb0a <memset>
	i2cBufferIndex = 0;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2020 	strb.w	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ffd9 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffcc 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800350c:	4603      	mov	r3, r0
 800350e:	4619      	mov	r1, r3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	2301      	movs	r3, #1
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2300      	movs	r3, #0
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <_ZN10DS1307_RTC5setupEv+0x30>)
 800351a:	f008 fdf5 	bl	800c108 <HAL_I2C_Master_Transmit>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000570 	.word	0x20000570

0800352c <_ZN10DS1307_RTC9isRunningEv>:



bool DS1307_RTC::isRunning()
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
 8003532:	6078      	str	r0, [r7, #4]
	bool Live = false;
 8003534:	2300      	movs	r3, #0
 8003536:	75fb      	strb	r3, [r7, #23]
	uint8_t RxData = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ffb1 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003542:	4603      	mov	r3, r0
 8003544:	4619      	mov	r1, r3
 8003546:	2301      	movs	r3, #1
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2301      	movs	r3, #1
 800354c:	2200      	movs	r2, #0
 800354e:	4823      	ldr	r0, [pc, #140]	; (80035dc <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 8003550:	f008 fdda 	bl	800c108 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 1, 1);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ffa5 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800355a:	4603      	mov	r3, r0
 800355c:	4619      	mov	r1, r3
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	2301      	movs	r3, #1
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2301      	movs	r3, #1
 8003566:	481d      	ldr	r0, [pc, #116]	; (80035dc <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 8003568:	f008 fecc 	bl	800c304 <HAL_I2C_Master_Receive>
	RxData = i2cBuffer[0];
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	75bb      	strb	r3, [r7, #22]
	clearI2CBuff();
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ffa0 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	if(RxData >> 7 == 0x00)
 8003578:	7dbb      	ldrb	r3, [r7, #22]
 800357a:	11db      	asrs	r3, r3, #7
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <_ZN10DS1307_RTC9isRunningEv+0x58>
	{
		Live = true;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
	}
	if(Live)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d022      	beq.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
	{
		TIME_DATE_T ReadTime;
		getTimeDate(ReadTime);
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f8cf 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		if(ReadTime.year == 0  && ReadTime.month == 0  && ReadTime.day == 0)
 8003596:	8a7b      	ldrh	r3, [r7, #18]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d119      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 800359c:	7c3b      	ldrb	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d113      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
		{
			ReadTime.hour = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73bb      	strb	r3, [r7, #14]
			ReadTime.minute = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	737b      	strb	r3, [r7, #13]
			ReadTime.second = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	733b      	strb	r3, [r7, #12]
			ReadTime.day = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
			ReadTime.month = 1;
 80035b8:	2301      	movs	r3, #1
 80035ba:	743b      	strb	r3, [r7, #16]
			ReadTime.year = 2020;
 80035bc:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80035c0:	827b      	strh	r3, [r7, #18]
			adjustTimeDate(ReadTime);
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f808 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
		}
	}
	return Live;
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000570 	.word	0x20000570

080035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>:



void DS1307_RTC::adjustTimeDate(TIME_DATE_T AdjustVar)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	e883 0006 	stmia.w	r3, {r1, r2}
	clearI2CBuff();
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff ff62 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	i2cBuffer[i2cBufferIndex++] = 0;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	b2d1      	uxtb	r1, r2
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	f882 1020 	strb.w	r1, [r2, #32]
 8003604:	461a      	mov	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.second);
 800360c:	7939      	ldrb	r1, [r7, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	b2d0      	uxtb	r0, r2
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	f882 0020 	strb.w	r0, [r2, #32]
 800361e:	461c      	mov	r4, r3
 8003620:	4608      	mov	r0, r1
 8003622:	f7ff ff25 	bl	8003470 <_ZL7bin2bcdh>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.minute);
 800362e:	7979      	ldrb	r1, [r7, #5]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	b2d0      	uxtb	r0, r2
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	f882 0020 	strb.w	r0, [r2, #32]
 8003640:	461c      	mov	r4, r3
 8003642:	4608      	mov	r0, r1
 8003644:	f7ff ff14 	bl	8003470 <_ZL7bin2bcdh>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.hour);
 8003650:	79b9      	ldrb	r1, [r7, #6]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	b2d0      	uxtb	r0, r2
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	f882 0020 	strb.w	r0, [r2, #32]
 8003662:	461c      	mov	r4, r3
 8003664:	4608      	mov	r0, r1
 8003666:	f7ff ff03 	bl	8003470 <_ZL7bin2bcdh>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(0);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	b2d1      	uxtb	r1, r2
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	f882 1020 	strb.w	r1, [r2, #32]
 8003682:	461c      	mov	r4, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f7ff fef3 	bl	8003470 <_ZL7bin2bcdh>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.day);
 8003692:	79f9      	ldrb	r1, [r7, #7]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	b2d0      	uxtb	r0, r2
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	f882 0020 	strb.w	r0, [r2, #32]
 80036a4:	461c      	mov	r4, r3
 80036a6:	4608      	mov	r0, r1
 80036a8:	f7ff fee2 	bl	8003470 <_ZL7bin2bcdh>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.month);
 80036b4:	7a39      	ldrb	r1, [r7, #8]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	b2d0      	uxtb	r0, r2
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	f882 0020 	strb.w	r0, [r2, #32]
 80036c6:	461c      	mov	r4, r3
 80036c8:	4608      	mov	r0, r1
 80036ca:	f7ff fed1 	bl	8003470 <_ZL7bin2bcdh>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.year - 2000);
 80036d6:	897b      	ldrh	r3, [r7, #10]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3330      	adds	r3, #48	; 0x30
 80036dc:	b2d9      	uxtb	r1, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	b2d0      	uxtb	r0, r2
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	f882 0020 	strb.w	r0, [r2, #32]
 80036ee:	461c      	mov	r4, r3
 80036f0:	4608      	mov	r0, r1
 80036f2:	f7ff febd 	bl	8003470 <_ZL7bin2bcdh>
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	551a      	strb	r2, [r3, r4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff fed0 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003704:	4603      	mov	r3, r0
 8003706:	4618      	mov	r0, r3
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003710:	b299      	uxth	r1, r3
 8003712:	2301      	movs	r3, #1
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	460b      	mov	r3, r1
 8003718:	4601      	mov	r1, r0
 800371a:	4805      	ldr	r0, [pc, #20]	; (8003730 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE+0x150>)
 800371c:	f008 fcf4 	bl	800c108 <HAL_I2C_Master_Transmit>
	clearI2CBuff();
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fec9 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}
 800372e:	bf00      	nop
 8003730:	20000570 	.word	0x20000570

08003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff feba 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff fead 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800374a:	4603      	mov	r3, r0
 800374c:	4619      	mov	r1, r3
 800374e:	2301      	movs	r3, #1
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2301      	movs	r3, #1
 8003754:	2200      	movs	r2, #0
 8003756:	4848      	ldr	r0, [pc, #288]	; (8003878 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8003758:	f008 fcd6 	bl	800c108 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fea1 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003762:	4603      	mov	r3, r0
 8003764:	4619      	mov	r1, r3
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	2301      	movs	r3, #1
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2307      	movs	r3, #7
 800376e:	4842      	ldr	r0, [pc, #264]	; (8003878 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8003770:	f008 fdc8 	bl	800c304 <HAL_I2C_Master_Receive>
	RetTimeDate.second = bcd2bin(i2cBuffer[i2cBufferIndex++] & 0x7F);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	b2d1      	uxtb	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	f882 1020 	strb.w	r1, [r2, #32]
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	5c9b      	ldrb	r3, [r3, r2]
 800378a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe57 	bl	8003444 <_ZL7bcd2binh>
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	b2d1      	uxtb	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	f882 1020 	strb.w	r1, [r2, #32]
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	5c9b      	ldrb	r3, [r3, r2]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fe45 	bl	8003444 <_ZL7bcd2binh>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	b2d1      	uxtb	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	f882 1020 	strb.w	r1, [r2, #32]
 80037d2:	461a      	mov	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	5c9b      	ldrb	r3, [r3, r2]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fe33 	bl	8003444 <_ZL7bcd2binh>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ec:	3301      	adds	r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	b2d1      	uxtb	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	f882 1020 	strb.w	r1, [r2, #32]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe19 	bl	8003444 <_ZL7bcd2binh>
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	b2d1      	uxtb	r1, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	f882 1020 	strb.w	r1, [r2, #32]
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	5c9b      	ldrb	r3, [r3, r2]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fe07 	bl	8003444 <_ZL7bcd2binh>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bcd2bin(i2cBuffer[i2cBufferIndex++]) + 2000;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	b2d1      	uxtb	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	f882 1020 	strb.w	r1, [r2, #32]
 800384e:	461a      	mov	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	5c9b      	ldrb	r3, [r3, r2]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fdf5 	bl	8003444 <_ZL7bcd2binh>
 800385a:	4603      	mov	r3, r0
 800385c:	b29b      	uxth	r3, r3
 800385e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003862:	b29a      	uxth	r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fe25 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000570 	.word	0x20000570

0800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 8003882:	af00      	add	r7, sp, #0
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	6018      	str	r0, [r3, #0]
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	6019      	str	r1, [r3, #0]
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003894:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003898:	4618      	mov	r0, r3
 800389a:	f00b fe5b 	bl	800f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800389e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038a2:	4618      	mov	r0, r3
 80038a4:	f00b fe56 	bl	800f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80038ac:	4618      	mov	r0, r3
 80038ae:	f00b fe51 	bl	800f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038b6:	4618      	mov	r0, r3
 80038b8:	f00b fe4c 	bl	800f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038c0:	4618      	mov	r0, r3
 80038c2:	f00b fe47 	bl	800f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038c6:	f107 031c 	add.w	r3, r7, #28
 80038ca:	4618      	mov	r0, r3
 80038cc:	f00b fe42 	bl	800f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038d4:	4618      	mov	r0, r3
 80038d6:	f00b fd33 	bl	800f340 <_ZNSaIcEC1Ev>
 80038da:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	49df      	ldr	r1, [pc, #892]	; (8003c60 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e4>)
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	f00b ffc3 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80038ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00b fd27 	bl	800f342 <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 80038f4:	f107 0214 	add.w	r2, r7, #20
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	4611      	mov	r1, r2
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	f7ff ff18 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = TimeDate.second > 9 ? std::to_string(TimeDate.second) : "0" + std::to_string(TimeDate.second);
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2400      	movs	r4, #0
 800390c:	2b09      	cmp	r3, #9
 800390e:	d90a      	bls.n	8003926 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xaa>
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fd7a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003924:	e012      	b.n	800394c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xd0>
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fd6f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800393a:	2401      	movs	r4, #1
 800393c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003940:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003944:	49c7      	ldr	r1, [pc, #796]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003946:	4618      	mov	r0, r3
 8003948:	f000 faf0 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800394c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003950:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f00b fe29 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800395c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003960:	4618      	mov	r0, r3
 8003962:	f00b fe18 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003966:	2c00      	cmp	r4, #0
 8003968:	d004      	beq.n	8003974 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xf8>
 800396a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800396e:	4618      	mov	r0, r3
 8003970:	f00b fe11 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = TimeDate.minute > 9 ? std::to_string(TimeDate.minute) : "0" + std::to_string(TimeDate.minute);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	2400      	movs	r4, #0
 800397c:	2b09      	cmp	r3, #9
 800397e:	d90a      	bls.n	8003996 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x11a>
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	461a      	mov	r2, r3
 8003988:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fd42 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003994:	e012      	b.n	80039bc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x140>
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	461a      	mov	r2, r3
 800399e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fd37 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80039aa:	2401      	movs	r4, #1
 80039ac:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039b0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80039b4:	49ab      	ldr	r1, [pc, #684]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fab8 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80039bc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80039c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f00b fdf1 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80039cc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f00b fde0 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80039d6:	2c00      	cmp	r4, #0
 80039d8:	d004      	beq.n	80039e4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x168>
 80039da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039de:	4618      	mov	r0, r3
 80039e0:	f00b fdd9 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = TimeDate.hour > 9 ? std::to_string(TimeDate.hour) : "0" + std::to_string(TimeDate.hour);
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	789b      	ldrb	r3, [r3, #2]
 80039ea:	2400      	movs	r4, #0
 80039ec:	2b09      	cmp	r3, #9
 80039ee:	d90a      	bls.n	8003a06 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x18a>
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	789b      	ldrb	r3, [r3, #2]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fd0a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a04:	e012      	b.n	8003a2c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1b0>
 8003a06:	f107 0314 	add.w	r3, r7, #20
 8003a0a:	789b      	ldrb	r3, [r3, #2]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fcff 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a1a:	2401      	movs	r4, #1
 8003a1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a20:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003a24:	498f      	ldr	r1, [pc, #572]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fa80 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003a2c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003a30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f00b fdb9 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a40:	4618      	mov	r0, r3
 8003a42:	f00b fda8 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	d004      	beq.n	8003a54 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1d8>
 8003a4a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f00b fda1 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = TimeDate.day > 9 ? std::to_string(TimeDate.day) : "0" + std::to_string(TimeDate.day);
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	78db      	ldrb	r3, [r3, #3]
 8003a5a:	2400      	movs	r4, #0
 8003a5c:	2b09      	cmp	r3, #9
 8003a5e:	d90a      	bls.n	8003a76 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1fa>
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fcd2 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a74:	e012      	b.n	8003a9c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x220>
 8003a76:	f107 0314 	add.w	r3, r7, #20
 8003a7a:	78db      	ldrb	r3, [r3, #3]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fcc7 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a8a:	2401      	movs	r4, #1
 8003a8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003a90:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003a94:	4973      	ldr	r1, [pc, #460]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fa48 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003a9c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003aa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f00b fd81 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003aac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f00b fd70 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ab6:	2c00      	cmp	r4, #0
 8003ab8:	d004      	beq.n	8003ac4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x248>
 8003aba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f00b fd69 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = TimeDate.month > 9 ? std::to_string(TimeDate.month) : "0" + std::to_string(TimeDate.month);
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	791b      	ldrb	r3, [r3, #4]
 8003aca:	2400      	movs	r4, #0
 8003acc:	2b09      	cmp	r3, #9
 8003ace:	d90a      	bls.n	8003ae6 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x26a>
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fc9a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003ae4:	e012      	b.n	8003b0c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x290>
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	791b      	ldrb	r3, [r3, #4]
 8003aec:	461a      	mov	r2, r3
 8003aee:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fc8f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003afa:	2401      	movs	r4, #1
 8003afc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003b00:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003b04:	4957      	ldr	r1, [pc, #348]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fa10 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b0c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003b10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f00b fd49 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b1c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003b20:	4618      	mov	r0, r3
 8003b22:	f00b fd38 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b26:	2c00      	cmp	r4, #0
 8003b28:	d004      	beq.n	8003b34 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x2b8>
 8003b2a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f00b fd31 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year % 100);
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	88db      	ldrh	r3, [r3, #6]
 8003b3a:	4a4b      	ldr	r2, [pc, #300]	; (8003c68 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3ec>)
 8003b3c:	fba2 1203 	umull	r1, r2, r2, r3
 8003b40:	0952      	lsrs	r2, r2, #5
 8003b42:	2164      	movs	r1, #100	; 0x64
 8003b44:	fb01 f202 	mul.w	r2, r1, r2
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fc5f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003b5a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f00b fd22 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f00b fd11 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 8003b74:	1dfb      	adds	r3, r7, #7
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	f200 816c 	bhi.w	8003e56 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5da>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x308>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003b99 	.word	0x08003b99
 8003b88:	08003c17 	.word	0x08003c17
 8003b8c:	08003c71 	.word	0x08003c71
 8003b90:	08003cef 	.word	0x08003cef
 8003b94:	08003d37 	.word	0x08003d37
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003ba0:	4a32      	ldr	r2, [pc, #200]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f9da 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003ba8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003bac:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003bb0:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f9e4 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003bba:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bbe:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f9f3 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003bca:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003bce:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003bd2:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f9d3 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003bdc:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	4611      	mov	r1, r2
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	f00b fce1 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003bec:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f00b fcd0 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003bf6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f00b fccb 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c00:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003c04:	4618      	mov	r0, r3
 8003c06:	f00b fcc6 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f00b fcc1 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003c14:	e120      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 8003c16:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003c1a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003c1e:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f99b 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003c26:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c2a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003c2e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f9a5 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003c38:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4611      	mov	r1, r2
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	f00b fcb3 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c48:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f00b fca2 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c52:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003c56:	4618      	mov	r0, r3
 8003c58:	f00b fc9d 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003c5c:	e0fc      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
 8003c5e:	bf00      	nop
 8003c60:	08010424 	.word	0x08010424
 8003c64:	08010430 	.word	0x08010430
 8003c68:	51eb851f 	.word	0x51eb851f
 8003c6c:	08010434 	.word	0x08010434
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 8003c70:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003c74:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003c78:	4a8d      	ldr	r2, [pc, #564]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f96e 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003c80:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003c84:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c88:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f978 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003c92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c96:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8003c9a:	4a85      	ldr	r2, [pc, #532]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 f987 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003ca2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003ca6:	f107 021c 	add.w	r2, r7, #28
 8003caa:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f967 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003cb4:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	f00b fc75 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003cc4:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f00b fc64 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f00b fc5f 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cd8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f00b fc5a 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ce2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f00b fc55 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003cec:	e0b4      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 8003cee:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003cf2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003cf6:	4a6e      	ldr	r2, [pc, #440]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f92f 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003cfe:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003d02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003d06:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f939 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d10:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	4611      	mov	r1, r2
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	f00b fc47 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003d20:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003d24:	4618      	mov	r0, r3
 8003d26:	f00b fc36 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d2a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f00b fc31 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003d34:	e090      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 8003d36:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003d3a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d3e:	4a5d      	ldr	r2, [pc, #372]	; (8003eb4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f90b 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d46:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003d4a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d4e:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f915 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d58:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003d5c:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8003d60:	4a54      	ldr	r2, [pc, #336]	; (8003eb4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f924 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d68:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003d6c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d70:	f507 7160 	add.w	r1, r7, #896	; 0x380
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f904 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d7a:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003d7e:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8003d82:	4a4d      	ldr	r2, [pc, #308]	; (8003eb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x63c>)
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f913 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d8a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003d8e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003d92:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f8f3 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d9c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003da0:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8003da4:	4a42      	ldr	r2, [pc, #264]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f902 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003dac:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003db0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003db4:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f8e2 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003dbe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003dc2:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8003dc6:	4a3a      	ldr	r2, [pc, #232]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f8f1 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003dce:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003dd2:	f107 021c 	add.w	r2, r7, #28
 8003dd6:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f8d1 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003de0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	4611      	mov	r1, r2
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	f00b fbdf 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003df0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003df4:	4618      	mov	r0, r3
 8003df6:	f00b fbce 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dfa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f00b fbc9 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e04:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f00b fbc4 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e0e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003e12:	4618      	mov	r0, r3
 8003e14:	f00b fbbf 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e18:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f00b fbba 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e22:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003e26:	4618      	mov	r0, r3
 8003e28:	f00b fbb5 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e2c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003e30:	4618      	mov	r0, r3
 8003e32:	f00b fbb0 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e36:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f00b fbab 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e40:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003e44:	4618      	mov	r0, r3
 8003e46:	f00b fba6 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e4a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f00b fba1 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e54:	e000      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	default:
		break;
 8003e56:	bf00      	nop
	}
	return RetStr;
 8003e58:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003e5a:	f107 031c 	add.w	r3, r7, #28
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00b fb99 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f00b fb94 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e72:	4618      	mov	r0, r3
 8003e74:	f00b fb8f 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f00b fb8a 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e86:	4618      	mov	r0, r3
 8003e88:	f00b fb85 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00b fb80 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	f107 020c 	add.w	r2, r7, #12
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	f107 030c 	add.w	r3, r7, #12
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	08010438 	.word	0x08010438
 8003eb4:	08010434 	.word	0x08010434
 8003eb8:	0801043c 	.word	0x0801043c

08003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8003ebc:	b408      	push	{r3}
 8003ebe:	b590      	push	{r4, r7, lr}
 8003ec0:	b088      	sub	sp, #32
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3307      	adds	r3, #7
 8003ece:	3307      	adds	r3, #7
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	ebad 0d03 	sub.w	sp, sp, r3
 8003ed8:	466b      	mov	r3, sp
 8003eda:	3307      	adds	r3, #7
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8003ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ee6:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8003ee8:	68bc      	ldr	r4, [r7, #8]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	69f8      	ldr	r0, [r7, #28]
 8003ef2:	47a0      	blx	r4
 8003ef4:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	18d4      	adds	r4, r2, r3
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	4618      	mov	r0, r3
 8003f02:	f00b fa1d 	bl	800f340 <_ZNSaIcEC1Ev>
 8003f06:	f107 0314 	add.w	r3, r7, #20
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	69f9      	ldr	r1, [r7, #28]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f865 	bl	8003fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f00b fa12 	bl	800f342 <_ZNSaIcED1Ev>
    }
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003f28:	b001      	add	sp, #4
 8003f2a:	4770      	bx	lr

08003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f00b fc01 	bl	800f744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f865 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f00b fb07 	bl	800f562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f00b fc4d 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f00b fc1c 	bl	800f7b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8003f78:	bf00      	nop
    }
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68b8      	ldr	r0, [r7, #8]
 8003f92:	f00b fc07 	bl	800f7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f83b 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f00b fadd 	bl	800f562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	68b8      	ldr	r0, [r7, #8]
 8003fc0:	f00b fbf6 	bl	800f7b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f824 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f00b fac6 	bl	800f562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8003fde:	b590      	push	{r4, r7, lr}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8003fec:	68fc      	ldr	r4, [r7, #12]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f00b f9d9 	bl	800f3a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f00b fc03 	bl	800f806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f80f 	bl	8004028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	bd90      	pop	{r4, r7, pc}

08004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f804 	bl	8004046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8004046:	b590      	push	{r4, r7, lr}
 8004048:	b087      	sub	sp, #28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8004054:	4623      	mov	r3, r4
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f804 	bl	8004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	bd90      	pop	{r4, r7, pc}

08004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8004076:	68b8      	ldr	r0, [r7, #8]
 8004078:	f000 f83e 	bl	80040f8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	429a      	cmp	r2, r3
 8004088:	d001      	beq.n	800408e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800408e:	2300      	movs	r3, #0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8004094:	4817      	ldr	r0, [pc, #92]	; (80040f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8004096:	f00b f958 	bl	800f34a <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	68b8      	ldr	r0, [r7, #8]
 800409e:	f000 f843 	bl	8004128 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80040a2:	4603      	mov	r3, r0
 80040a4:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d910      	bls.n	80040ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	2200      	movs	r2, #0
 80040b2:	4619      	mov	r1, r3
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f00b f97f 	bl	800f3b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4619      	mov	r1, r3
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f00b f96d 	bl	800f39e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4619      	mov	r1, r3
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f00b f96e 	bl	800f3aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f00b f967 	bl	800f3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80040d4:	4603      	mov	r3, r0
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f00b f9c9 	bl	800f472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	4619      	mov	r1, r3
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f00b f962 	bl	800f3ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80040ea:	bf00      	nop
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	08010440 	.word	0x08010440

080040f8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004128:	b5b0      	push	{r4, r5, r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004132:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ffed 	bl	8004116 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800413c:	462a      	mov	r2, r5
 800413e:	6839      	ldr	r1, [r7, #0]
 8004140:	4620      	mov	r0, r4
 8004142:	f000 f805 	bl	8004150 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8004146:	4603      	mov	r3, r0
    }
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bdb0      	pop	{r4, r5, r7, pc}

08004150 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
    }
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <_Z7DelayNsm>:
#include "Display.h"
#include "tim.h"


void DelayNs(uint32_t NsDelay)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	d801      	bhi.n	800417e <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 800417a:	2310      	movs	r3, #16
 800417c:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <_Z7DelayNsm+0x3c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <_Z7DelayNsm+0x3c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	429a      	cmp	r2, r3
 8004190:	bf8c      	ite	hi
 8004192:	2301      	movhi	r3, #1
 8004194:	2300      	movls	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d000      	beq.n	800419e <_Z7DelayNsm+0x32>
 800419c:	e7f3      	b.n	8004186 <_Z7DelayNsm+0x1a>
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	2000061c 	.word	0x2000061c

080041ac <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	72fb      	strb	r3, [r7, #11]
 80041ba:	4613      	mov	r3, r2
 80041bc:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	3b28      	subs	r3, #40	; 0x28
 80041c2:	2b23      	cmp	r3, #35	; 0x23
 80041c4:	d86b      	bhi.n	800429e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080042a9 	.word	0x080042a9
 80041d0:	0800426b 	.word	0x0800426b
 80041d4:	08004261 	.word	0x08004261
 80041d8:	0800425d 	.word	0x0800425d
 80041dc:	080042a9 	.word	0x080042a9
 80041e0:	0800429f 	.word	0x0800429f
 80041e4:	0800429f 	.word	0x0800429f
 80041e8:	0800429f 	.word	0x0800429f
 80041ec:	0800429f 	.word	0x0800429f
 80041f0:	0800429f 	.word	0x0800429f
 80041f4:	0800429f 	.word	0x0800429f
 80041f8:	0800429f 	.word	0x0800429f
 80041fc:	0800429f 	.word	0x0800429f
 8004200:	0800429f 	.word	0x0800429f
 8004204:	0800429f 	.word	0x0800429f
 8004208:	0800429f 	.word	0x0800429f
 800420c:	0800429f 	.word	0x0800429f
 8004210:	0800429f 	.word	0x0800429f
 8004214:	0800429f 	.word	0x0800429f
 8004218:	0800429f 	.word	0x0800429f
 800421c:	0800429f 	.word	0x0800429f
 8004220:	0800429f 	.word	0x0800429f
 8004224:	0800429f 	.word	0x0800429f
 8004228:	0800429f 	.word	0x0800429f
 800422c:	0800429f 	.word	0x0800429f
 8004230:	0800429f 	.word	0x0800429f
 8004234:	0800429f 	.word	0x0800429f
 8004238:	0800429f 	.word	0x0800429f
 800423c:	0800429f 	.word	0x0800429f
 8004240:	0800429f 	.word	0x0800429f
 8004244:	0800429f 	.word	0x0800429f
 8004248:	0800429f 	.word	0x0800429f
 800424c:	0800429f 	.word	0x0800429f
 8004250:	08004275 	.word	0x08004275
 8004254:	08004283 	.word	0x08004283
 8004258:	08004291 	.word	0x08004291
		case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
			//		DelayNs(arg_int);
			break;
		case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
			//		DelayNs(arg_int);
			__NOP();
 800425c:	bf00      	nop
			break;
 800425e:	e024      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
			DelayNs(10000);
 8004260:	f242 7010 	movw	r0, #10000	; 0x2710
 8004264:	f7ff ff82 	bl	800416c <_Z7DelayNsm>
			//		for (uint16_t n = 0; n < 320; n++)
			//		{
			//			__NOP();
			//		}
			break;
 8004268:	e01f      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
			HAL_Delay(arg_int);
 800426a:	7abb      	ldrb	r3, [r7, #10]
 800426c:	4618      	mov	r0, r3
 800426e:	f006 faad 	bl	800a7cc <HAL_Delay>
			break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 8004272:	e01a      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
			//	case U8X8_MSG_GPIO_SPI_DATA:
			//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
			//		break;
		case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8004274:	7abb      	ldrb	r3, [r7, #10]
 8004276:	461a      	mov	r2, r3
 8004278:	2108      	movs	r1, #8
 800427a:	480e      	ldr	r0, [pc, #56]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800427c:	f007 fd32 	bl	800bce4 <HAL_GPIO_WritePin>
			break;
 8004280:	e013      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 8004282:	7abb      	ldrb	r3, [r7, #10]
 8004284:	461a      	mov	r2, r3
 8004286:	2110      	movs	r1, #16
 8004288:	480a      	ldr	r0, [pc, #40]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800428a:	f007 fd2b 	bl	800bce4 <HAL_GPIO_WritePin>
			break;
 800428e:	e00c      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 8004290:	7abb      	ldrb	r3, [r7, #10]
 8004292:	461a      	mov	r2, r3
 8004294:	2140      	movs	r1, #64	; 0x40
 8004296:	4807      	ldr	r0, [pc, #28]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004298:	f007 fd24 	bl	800bce4 <HAL_GPIO_WritePin>
			break;
 800429c:	e005      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		default:
			u8x8_SetGPIOResult(u8x8, 1);			// default return value
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			break;
 80042a6:	e000      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			break;							// can be used to setup pins
 80042a8:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40010800 	.word	0x40010800

080042b8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	460b      	mov	r3, r1
 80042c4:	72fb      	strb	r3, [r7, #11]
 80042c6:	4613      	mov	r3, r2
 80042c8:	72bb      	strb	r3, [r7, #10]
	//	uint8_t byte;
	//	uint8_t *data;
	switch(msg)
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	3b14      	subs	r3, #20
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d848      	bhi.n	8004364 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	0800431d 	.word	0x0800431d
 80042dc:	08004365 	.word	0x08004365
 80042e0:	08004365 	.word	0x08004365
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	0800433d 	.word	0x0800433d
 80042ec:	08004351 	.word	0x08004351
 80042f0:	08004365 	.word	0x08004365
 80042f4:	08004365 	.word	0x08004365
 80042f8:	08004365 	.word	0x08004365
 80042fc:	08004365 	.word	0x08004365
 8004300:	08004365 	.word	0x08004365
 8004304:	08004365 	.word	0x08004365
 8004308:	0800432f 	.word	0x0800432f
			//			byte = *data;
			//			data++;
			//			arg_int--;
			//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
			//		}
			HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 800430c:	7abb      	ldrb	r3, [r7, #10]
 800430e:	b29a      	uxth	r2, r3
 8004310:	230a      	movs	r3, #10
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4817      	ldr	r0, [pc, #92]	; (8004374 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 8004316:	f009 fd49 	bl	800ddac <HAL_SPI_Transmit>
			break;
 800431a:	e025      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_INIT:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	785b      	ldrb	r3, [r3, #1]
 8004322:	461a      	mov	r2, r3
 8004324:	2149      	movs	r1, #73	; 0x49
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7fe ff2c 	bl	8003184 <u8x8_gpio_call>
			break;
 800432c:	e01c      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_SET_DC:
			u8x8_gpio_SetDC(u8g2, arg_int);
 800432e:	7abb      	ldrb	r3, [r7, #10]
 8004330:	461a      	mov	r2, r3
 8004332:	214a      	movs	r1, #74	; 0x4a
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7fe ff25 	bl	8003184 <u8x8_gpio_call>
			break;
 800433a:	e015      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_START_TRANSFER:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	2149      	movs	r1, #73	; 0x49
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f7fe ff1c 	bl	8003184 <u8x8_gpio_call>
			__NOP();
 800434c:	bf00      	nop
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
			break;
 800434e:	e00b      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_END_TRANSFER:
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
			__NOP();
 8004350:	bf00      	nop
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	461a      	mov	r2, r3
 800435a:	2149      	movs	r1, #73	; 0x49
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7fe ff11 	bl	8003184 <u8x8_gpio_call>
			break;
 8004362:	e001      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		default:
			return 0;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 8004368:	2301      	movs	r3, #1
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	200005c4 	.word	0x200005c4

08004378 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4618      	mov	r0, r3
 8004384:	f00b f8e6 	bl	800f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 8004394:	b5b0      	push	{r4, r5, r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ffe8 	bl	8004378 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2020 	strb.w	r2, [r3, #32]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <_ZN13NHDST7565_LCDC1Eh+0x48>)
 80043b4:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 80043b8:	4615      	mov	r5, r2
 80043ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f808 	bl	80043e0 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bdb0      	pop	{r4, r5, r7, pc}
 80043da:	bf00      	nop
 80043dc:	0801046c 	.word	0x0801046c

080043e0 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d004      	beq.n	8004408 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x28>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004404:	2b03      	cmp	r3, #3
 8004406:	d108      	bne.n	800441a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3a>
	{
		dispParams.width = 64;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2240      	movs	r2, #64	; 0x40
 800440c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 128;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8004418:	e007      	b.n	800442a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x4a>
	}
	else
	{
		dispParams.width = 128;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2280      	movs	r2, #128	; 0x80
 800441e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 64;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	}
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>:


void NHDST7565_LCD::assignTextParams(String Text, const uint8_t *Font)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
	textToWrite.textLen = 0;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	761a      	strb	r2, [r3, #24]
	textToWrite.textHigh = 0;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	765a      	strb	r2, [r3, #25]
	textToWrite.text = "";
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4930      	ldr	r1, [pc, #192]	; (8004510 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 8004450:	4618      	mov	r0, r3
 8004452:	f00b f95a 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textFont = Font;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	61da      	str	r2, [r3, #28]
	//	if(textToWrite.textFont != Font)
	//	{
	u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f7fd fdeb 	bl	8002044 <u8g2_SetFont>
	textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	765a      	strb	r2, [r3, #25]
	//	}
	if(Text != "")
 800447a:	4925      	ldr	r1, [pc, #148]	; (8004510 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 800447c:	68b8      	ldr	r0, [r7, #8]
 800447e:	f000 fd8b 	bl	8004f98 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x72>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800448e:	68b8      	ldr	r0, [r7, #8]
 8004490:	f00b f9a4 	bl	800f7dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004494:	4603      	mov	r3, r0
 8004496:	4619      	mov	r1, r3
 8004498:	4620      	mov	r0, r4
 800449a:	f7fd fe3d 	bl	8002118 <u8g2_GetStrWidth>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	761a      	strb	r2, [r3, #24]

	if(textToWrite.textLen < dispParams.width)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	7e1a      	ldrb	r2, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d205      	bcs.n	80044c0 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x8c>
	{
		textToWrite.text = Text;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f00b f872 	bl	800f5a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		textToWrite.textFont = displayFonts[W_5_H_8];
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
	}
}
 80044be:	e022      	b.n	8004506 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xd2>
		textToWrite.textFont = displayFonts[W_5_H_8];
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	61da      	str	r2, [r3, #28]
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f7fd fdb4 	bl	8002044 <u8g2_SetFont>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80044e2:	68b8      	ldr	r0, [r7, #8]
 80044e4:	f00b f97a 	bl	800f7dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80044e8:	4603      	mov	r3, r0
 80044ea:	4619      	mov	r1, r3
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7fd fe13 	bl	8002118 <u8g2_GetStrWidth>
 80044f2:	4603      	mov	r3, r0
 80044f4:	461a      	mov	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	761a      	strb	r2, [r3, #24]
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	765a      	strb	r2, [r3, #25]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bd90      	pop	{r4, r7, pc}
 800450e:	bf00      	nop
 8004510:	08010488 	.word	0x08010488

08004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>:

void NHDST7565_LCD::assignNewDrawCoord(uint8_t OldXPos, uint8_t OldYPos,
		uint8_t &NewXPos, uint8_t &NewYPos)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	72fb      	strb	r3, [r7, #11]
 8004522:	4613      	mov	r3, r2
 8004524:	72bb      	strb	r3, [r7, #10]
	if(OldXPos <= dispParams.width && OldYPos <= dispParams.high)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800452c:	7afa      	ldrb	r2, [r7, #11]
 800452e:	429a      	cmp	r2, r3
 8004530:	d80c      	bhi.n	800454c <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004538:	7aba      	ldrb	r2, [r7, #10]
 800453a:	429a      	cmp	r2, r3
 800453c:	d806      	bhi.n	800454c <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
	{
		NewXPos = OldXPos;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	7afa      	ldrb	r2, [r7, #11]
 8004542:	701a      	strb	r2, [r3, #0]
		NewYPos = OldYPos;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	7aba      	ldrb	r2, [r7, #10]
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	e0bb      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
	}
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004552:	7afa      	ldrb	r2, [r7, #11]
 8004554:	429a      	cmp	r2, r3
 8004556:	d930      	bls.n	80045ba <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800455e:	7aba      	ldrb	r2, [r7, #10]
 8004560:	429a      	cmp	r2, r3
 8004562:	d82a      	bhi.n	80045ba <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
	{
		NewYPos = OldYPos;
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	7aba      	ldrb	r2, [r7, #10]
 8004568:	701a      	strb	r2, [r3, #0]
		switch(OldXPos)
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	2b83      	cmp	r3, #131	; 0x83
 800456e:	d00b      	beq.n	8004588 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x74>
 8004570:	2b84      	cmp	r3, #132	; 0x84
 8004572:	d011      	beq.n	8004598 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x84>
 8004574:	2b82      	cmp	r3, #130	; 0x82
 8004576:	d117      	bne.n	80045a8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x94>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f901 	bl	8004780 <_ZN13NHDST7565_LCD11setTextLeftEv>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	701a      	strb	r2, [r3, #0]
				break;
 8004586:	e017      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f905 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	701a      	strb	r2, [r3, #0]
				break;
 8004596:	e00f      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f914 	bl	80047c6 <_ZN13NHDST7565_LCD12setTextRightEv>
 800459e:	4603      	mov	r3, r0
 80045a0:	461a      	mov	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	701a      	strb	r2, [r3, #0]
				break;
 80045a6:	e007      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			default:
				NewXPos = setTextCenter();
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f8f5 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	701a      	strb	r2, [r3, #0]
				break;
 80045b6:	bf00      	nop
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 80045b8:	e084      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80045c0:	7afa      	ldrb	r2, [r7, #11]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d830      	bhi.n	8004628 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80045cc:	7aba      	ldrb	r2, [r7, #10]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d92a      	bls.n	8004628 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
	{
		NewXPos = OldXPos;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7afa      	ldrb	r2, [r7, #11]
 80045d6:	701a      	strb	r2, [r3, #0]
		switch(OldYPos)
 80045d8:	7abb      	ldrb	r3, [r7, #10]
 80045da:	2b47      	cmp	r3, #71	; 0x47
 80045dc:	d00b      	beq.n	80045f6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xe2>
 80045de:	2b48      	cmp	r3, #72	; 0x48
 80045e0:	d011      	beq.n	8004606 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xf2>
 80045e2:	2b46      	cmp	r3, #70	; 0x46
 80045e4:	d117      	bne.n	8004616 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x102>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f900 	bl	80047ec <_ZN13NHDST7565_LCD10setTextTopEv>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	701a      	strb	r2, [r3, #0]
				break;
 80045f4:	e017      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f906 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	701a      	strb	r2, [r3, #0]
				break;
 8004604:	e00f      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f920 	bl	800484c <_ZN13NHDST7565_LCD13setTextBottomEv>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	701a      	strb	r2, [r3, #0]
				break;
 8004614:	e007      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			default:
				NewYPos = setTextMiddle();
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f8f6 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	701a      	strb	r2, [r3, #0]
				break;
 8004624:	bf00      	nop
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 8004626:	e04d      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else
	{
		switch(OldXPos)
 8004628:	7afb      	ldrb	r3, [r7, #11]
 800462a:	2b83      	cmp	r3, #131	; 0x83
 800462c:	d00b      	beq.n	8004646 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x132>
 800462e:	2b84      	cmp	r3, #132	; 0x84
 8004630:	d011      	beq.n	8004656 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x142>
 8004632:	2b82      	cmp	r3, #130	; 0x82
 8004634:	d117      	bne.n	8004666 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x152>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f8a2 	bl	8004780 <_ZN13NHDST7565_LCD11setTextLeftEv>
 800463c:	4603      	mov	r3, r0
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	701a      	strb	r2, [r3, #0]
				break;
 8004644:	e017      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8a6 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800464c:	4603      	mov	r3, r0
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	701a      	strb	r2, [r3, #0]
				break;
 8004654:	e00f      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f8b5 	bl	80047c6 <_ZN13NHDST7565_LCD12setTextRightEv>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	701a      	strb	r2, [r3, #0]
				break;
 8004664:	e007      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			default:
				NewXPos = setTextCenter();
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f896 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	701a      	strb	r2, [r3, #0]
				break;
 8004674:	bf00      	nop
		}
		switch(OldYPos)
 8004676:	7abb      	ldrb	r3, [r7, #10]
 8004678:	2b47      	cmp	r3, #71	; 0x47
 800467a:	d00b      	beq.n	8004694 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x180>
 800467c:	2b48      	cmp	r3, #72	; 0x48
 800467e:	d011      	beq.n	80046a4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x190>
 8004680:	2b46      	cmp	r3, #70	; 0x46
 8004682:	d117      	bne.n	80046b4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1a0>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f8b1 	bl	80047ec <_ZN13NHDST7565_LCD10setTextTopEv>
 800468a:	4603      	mov	r3, r0
 800468c:	461a      	mov	r2, r3
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	701a      	strb	r2, [r3, #0]
				break;
 8004692:	e017      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f8b7 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800469a:	4603      	mov	r3, r0
 800469c:	461a      	mov	r2, r3
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	701a      	strb	r2, [r3, #0]
				break;
 80046a2:	e00f      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f8d1 	bl	800484c <_ZN13NHDST7565_LCD13setTextBottomEv>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	701a      	strb	r2, [r3, #0]
				break;
 80046b2:	e007      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			default:
				NewYPos = setTextMiddle();
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f8a7 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	701a      	strb	r2, [r3, #0]
				break;
 80046c2:	bf00      	nop
		}
	}
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d816      	bhi.n	800470c <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	080046fb 	.word	0x080046fb
 80046ec:	08004701 	.word	0x08004701
 80046f0:	08004707 	.word	0x08004707
	{
		case LANDSCAPE_1:
			DisplayRotation = &u8g2_cb_r2;
 80046f4:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 80046f6:	60fb      	str	r3, [r7, #12]
			break;
 80046f8:	e00b      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case LANDSCAPE_2:
			DisplayRotation = &u8g2_cb_r0;
 80046fa:	4b1c      	ldr	r3, [pc, #112]	; (800476c <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 80046fc:	60fb      	str	r3, [r7, #12]
			break;
 80046fe:	e008      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_1:
			DisplayRotation = &u8g2_cb_r1;
 8004700:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <_ZN13NHDST7565_LCD8setupLcdEv+0xa4>)
 8004702:	60fb      	str	r3, [r7, #12]
			break;
 8004704:	e005      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_2:
			DisplayRotation = &u8g2_cb_r3;
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <_ZN13NHDST7565_LCD8setupLcdEv+0xa8>)
 8004708:	60fb      	str	r3, [r7, #12]
			break;
 800470a:	e002      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		default:
			DisplayRotation = &u8g2_cb_r0;
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 800470e:	60fb      	str	r3, [r7, #12]
			break;
 8004710:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <_ZN13NHDST7565_LCD8setupLcdEv+0xac>)
 800471a:	4a18      	ldr	r2, [pc, #96]	; (800477c <_ZN13NHDST7565_LCD8setupLcdEv+0xb0>)
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	f7fc febb 	bl	8001498 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3324      	adds	r3, #36	; 0x24
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fcfd 	bl	8003126 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3324      	adds	r3, #36	; 0x24
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fd06 	bl	8003144 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3324      	adds	r3, #36	; 0x24
 800473c:	2101      	movs	r1, #1
 800473e:	4618      	mov	r0, r3
 8004740:	f7fd fb24 	bl	8001d8c <u8g2_SetFontMode>
	u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f7fd fe4c 	bl	80023f0 <u8g2_SetDrawColor>
	clearScreen();
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f8a6 	bl	80048aa <_ZN13NHDST7565_LCD11clearScreenEv>
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	08013550 	.word	0x08013550
 800476c:	08013538 	.word	0x08013538
 8004770:	08013544 	.word	0x08013544
 8004774:	0801355c 	.word	0x0801355c
 8004778:	080041ad 	.word	0x080041ad
 800477c:	080042b9 	.word	0x080042b9

08004780 <_ZN13NHDST7565_LCD11setTextLeftEv>:


uint8_t NHDST7565_LCD::setTextLeft()
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]
	//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <_ZN13NHDST7565_LCD13setTextCenterEv>:

uint8_t NHDST7565_LCD::setTextCenter()
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen) / 2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80047aa:	461a      	mov	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	7e1b      	ldrb	r3, [r3, #24]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	0fda      	lsrs	r2, r3, #31
 80047b4:	4413      	add	r3, r2
 80047b6:	105b      	asrs	r3, r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <_ZN13NHDST7565_LCD12setTextRightEv>:

uint8_t NHDST7565_LCD::setTextRight()
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	7e1b      	ldrb	r3, [r3, #24]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <_ZN13NHDST7565_LCD10setTextTopEv>:

uint8_t NHDST7565_LCD::setTextTop()
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
	NewPos = 1;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>:

uint8_t NHDST7565_LCD::setTextMiddle()
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]
	NewPos = ((dispParams.high - textToWrite.textHigh + 1) / 2) + (textToWrite.textHigh / 2) - textToWrite.textHigh;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	7e5b      	ldrb	r3, [r3, #25]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	3301      	adds	r3, #1
 8004824:	0fda      	lsrs	r2, r3, #31
 8004826:	4413      	add	r3, r2
 8004828:	105b      	asrs	r3, r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7e5b      	ldrb	r3, [r3, #25]
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	b2db      	uxtb	r3, r3
 8004834:	4413      	add	r3, r2
 8004836:	b2da      	uxtb	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7e5b      	ldrb	r3, [r3, #25]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <_ZN13NHDST7565_LCD13setTextBottomEv>:

uint8_t NHDST7565_LCD::setTextBottom()
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
	//	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	NewPos = dispParams.high - 1 - textToWrite.textHigh;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7e5b      	ldrb	r3, [r3, #25]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>:



void NHDST7565_LCD::clearFrameBuffer()
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3324      	adds	r3, #36	; 0x24
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fc59 	bl	800113a <u8g2_ClearBuffer>
}
 8004888:	bf00      	nop
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3324      	adds	r3, #36	; 0x24
 800489c:	4618      	mov	r0, r3
 800489e:	f7fc fcbf 	bl	8001220 <u8g2_SendBuffer>
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ffdf 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ffe9 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>:
	if(Color != figureColorSetted)
		u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
}

void NHDST7565_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos, const uint8_t *u8g2Font)
{
 80048c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c8:	b08f      	sub	sp, #60	; 0x3c
 80048ca:	af02      	add	r7, sp, #8
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	4611      	mov	r1, r2
 80048d2:	461a      	mov	r2, r3
 80048d4:	460b      	mov	r3, r1
 80048d6:	71fb      	strb	r3, [r7, #7]
 80048d8:	4613      	mov	r3, r2
 80048da:	71bb      	strb	r3, [r7, #6]
	uint8_t NewXPos = 0, NewYPos = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]
 80048e0:	2300      	movs	r3, #0
 80048e2:	75bb      	strb	r3, [r7, #22]
	assignTextParams(Text, u8g2Font);
 80048e4:	f107 0318 	add.w	r3, r7, #24
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f00a ff8d 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80048f0:	f107 0318 	add.w	r3, r7, #24
 80048f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f6:	4619      	mov	r1, r3
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff fd9b 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 80048fe:	f107 0318 	add.w	r3, r7, #24
 8004902:	4618      	mov	r0, r3
 8004904:	f00a fe47 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004908:	f107 0017 	add.w	r0, r7, #23
 800490c:	79ba      	ldrb	r2, [r7, #6]
 800490e:	79f9      	ldrb	r1, [r7, #7]
 8004910:	f107 0316 	add.w	r3, r7, #22
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4603      	mov	r3, r0
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7ff fdfb 	bl	8004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
//				NewYPos = setTextMiddle();
//				break;
//		}
//	}

	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos + textToWrite.textHigh, textToWrite.text.c_str());
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004924:	7dfd      	ldrb	r5, [r7, #23]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	7e5a      	ldrb	r2, [r3, #25]
 800492a:	7dbb      	ldrb	r3, [r7, #22]
 800492c:	4413      	add	r3, r2
 800492e:	b2de      	uxtb	r6, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4618      	mov	r0, r3
 8004934:	f00a ff52 	bl	800f7dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004938:	4603      	mov	r3, r0
 800493a:	4632      	mov	r2, r6
 800493c:	4629      	mov	r1, r5
 800493e:	4620      	mov	r0, r4
 8004940:	f7fd fae2 	bl	8001f08 <u8g2_DrawStr>
}
 8004944:	bf00      	nop
 8004946:	3734      	adds	r7, #52	; 0x34
 8004948:	46bd      	mov	sp, r7
 800494a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800494c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>:
}


uint8_t NHDST7565_LCD::drawMenuList(uint8_t FirstItemXPos, uint8_t FirstItemYPos, uint8_t FirsListItem, uint8_t ItemSel, const char **MenuItems, uint8_t MaxItems,
		bool WithCheckBox, bool MenuSelected, bool *ItemsChecked, const uint8_t *u8g2Font)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b0a3      	sub	sp, #140	; 0x8c
 8004950:	af02      	add	r7, sp, #8
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	461a      	mov	r2, r3
 800495a:	4603      	mov	r3, r0
 800495c:	70fb      	strb	r3, [r7, #3]
 800495e:	460b      	mov	r3, r1
 8004960:	70bb      	strb	r3, [r7, #2]
 8004962:	4613      	mov	r3, r2
 8004964:	707b      	strb	r3, [r7, #1]
	assignTextParams("", u8g2Font);
 8004966:	f107 0320 	add.w	r3, r7, #32
 800496a:	4618      	mov	r0, r3
 800496c:	f00a fce8 	bl	800f340 <_ZNSaIcEC1Ev>
 8004970:	f107 0220 	add.w	r2, r7, #32
 8004974:	f107 0308 	add.w	r3, r7, #8
 8004978:	49a8      	ldr	r1, [pc, #672]	; (8004c1c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d0>)
 800497a:	4618      	mov	r0, r3
 800497c:	f00a ff78 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004980:	f107 0308 	add.w	r3, r7, #8
 8004984:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fd52 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004990:	f107 0308 	add.w	r3, r7, #8
 8004994:	4618      	mov	r0, r3
 8004996:	f00a fdfe 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800499a:	f107 0320 	add.w	r3, r7, #32
 800499e:	4618      	mov	r0, r3
 80049a0:	f00a fccf 	bl	800f342 <_ZNSaIcED1Ev>
	uint8_t MaxLines = (dispParams.high - FirstItemYPos) / (textToWrite.textHigh + MENU_ITEM_INTERLINE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80049aa:	461a      	mov	r2, r3
 80049ac:	78bb      	ldrb	r3, [r7, #2]
 80049ae:	1ad2      	subs	r2, r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	7e5b      	ldrb	r3, [r3, #25]
 80049b4:	3303      	adds	r3, #3
 80049b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80049ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t NextItem = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t MaxTexLen = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t FrameHigh = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	for(int Item = 0; Item < MaxLines; Item++)
 80049d0:	2300      	movs	r3, #0
 80049d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80049d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80049d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049da:	429a      	cmp	r2, r3
 80049dc:	f280 81bd 	bge.w	8004d5a <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40e>
	{
		NextItem = FirsListItem + Item;
 80049e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	787b      	ldrb	r3, [r7, #1]
 80049e6:	4413      	add	r3, r2
 80049e8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if(NextItem >= MaxItems)
 80049ec:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80049f0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80049f4:	429a      	cmp	r2, r3
 80049f6:	f080 81af 	bcs.w	8004d58 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40c>
			break;
		if(NextItem == ItemSel && MenuSelected)
 80049fa:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80049fe:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f040 810c 	bne.w	8004c20 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
 8004a08:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8107 	beq.w	8004c20 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
		{
			assignTextParams(MenuItems[NextItem], u8g2Font);
 8004a12:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a1c:	4413      	add	r3, r2
 8004a1e:	681c      	ldr	r4, [r3, #0]
 8004a20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a24:	4618      	mov	r0, r3
 8004a26:	f00a fc8b 	bl	800f340 <_ZNSaIcEC1Ev>
 8004a2a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a32:	4621      	mov	r1, r4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f00a ff1b 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fcf5 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f00a fda1 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004a54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f00a fc72 	bl	800f342 <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 0);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3324      	adds	r3, #36	; 0x24
 8004a62:	2100      	movs	r1, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fd f991 	bl	8001d8c <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 0);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3324      	adds	r3, #36	; 0x24
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fd fcbd 	bl	80023f0 <u8g2_SetDrawColor>
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004a76:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a80:	4413      	add	r3, r2
 8004a82:	681c      	ldr	r4, [r3, #0]
 8004a84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f00a fc59 	bl	800f340 <_ZNSaIcEC1Ev>
 8004a8e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004a92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a96:	4621      	mov	r1, r4
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f00a fee9 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	7e5b      	ldrb	r3, [r3, #25]
 8004aa2:	3303      	adds	r3, #3
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	78bb      	ldrb	r3, [r7, #2]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	b2d8      	uxtb	r0, r3
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fefe 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004aca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f00a fd61 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004ad4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f00a fc32 	bl	800f342 <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3324      	adds	r3, #36	; 0x24
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fd f951 	bl	8001d8c <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3324      	adds	r3, #36	; 0x24
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fd fc7d 	bl	80023f0 <u8g2_SetDrawColor>
			if(!WithCheckBox)
 8004af6:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004afa:	f083 0301 	eor.w	r3, r3, #1
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d033      	beq.n	8004b6c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x220>
			{
				u8g2_SetFont(&U8G2_Display, displayFonts[W_8_H_8_ICON]);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4610      	mov	r0, r2
 8004b14:	f7fd fa96 	bl	8002044 <u8g2_SetFont>
				u8g2_DrawGlyph(&U8G2_Display, FirstItemXPos + textToWrite.textLen + 1, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 1, 0x006F);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	7e1a      	ldrb	r2, [r3, #24]
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	4413      	add	r3, r2
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	b2dc      	uxtb	r4, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7e5a      	ldrb	r2, [r3, #25]
 8004b30:	78bb      	ldrb	r3, [r7, #2]
 8004b32:	4413      	add	r3, r2
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	7e5b      	ldrb	r3, [r3, #25]
 8004b3a:	3303      	adds	r3, #3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004b40:	b2c9      	uxtb	r1, r1
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	236f      	movs	r3, #111	; 0x6f
 8004b52:	4621      	mov	r1, r4
 8004b54:	f7fd f92a 	bl	8001dac <u8g2_DrawGlyph>
				u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	4619      	mov	r1, r3
 8004b64:	4610      	mov	r0, r2
 8004b66:	f7fd fa6d 	bl	8002044 <u8g2_SetFont>
			if(!WithCheckBox)
 8004b6a:	e0e7      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			}
			else
			{
				if(ItemsChecked[NextItem])
 8004b6c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004b70:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004b74:	4413      	add	r3, r2
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d034      	beq.n	8004be6 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x29a>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004b88:	3b0b      	subs	r3, #11
 8004b8a:	b2d9      	uxtb	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	7e5b      	ldrb	r3, [r3, #25]
 8004b90:	3303      	adds	r3, #3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	78bb      	ldrb	r3, [r7, #2]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2308      	movs	r3, #8
 8004baa:	f7fc f9ac 	bl	8000f06 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004bba:	3b09      	subs	r3, #9
 8004bbc:	b2d9      	uxtb	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	7e5b      	ldrb	r3, [r3, #25]
 8004bc2:	3303      	adds	r3, #3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	78bb      	ldrb	r3, [r7, #2]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	2304      	movs	r3, #4
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	2304      	movs	r3, #4
 8004be0:	f7fc f95a 	bl	8000e98 <u8g2_DrawBox>
			if(!WithCheckBox)
 8004be4:	e0aa      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004bf2:	3b0b      	subs	r3, #11
 8004bf4:	b2d9      	uxtb	r1, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	7e5b      	ldrb	r3, [r3, #25]
 8004bfa:	3303      	adds	r3, #3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	78bb      	ldrb	r3, [r7, #2]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	2308      	movs	r3, #8
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	2308      	movs	r3, #8
 8004c14:	f7fc f977 	bl	8000f06 <u8g2_DrawFrame>
			if(!WithCheckBox)
 8004c18:	e090      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
 8004c1a:	bf00      	nop
 8004c1c:	08010488 	.word	0x08010488
				}
			}
		}
		else
		{
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004c20:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c2a:	4413      	add	r3, r2
 8004c2c:	681c      	ldr	r4, [r3, #0]
 8004c2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c32:	4618      	mov	r0, r3
 8004c34:	f00a fb84 	bl	800f340 <_ZNSaIcEC1Ev>
 8004c38:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8004c3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c40:	4621      	mov	r1, r4
 8004c42:	4618      	mov	r0, r3
 8004c44:	f00a fe14 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	7e5b      	ldrb	r3, [r3, #25]
 8004c4c:	3303      	adds	r3, #3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	fb02 f303 	mul.w	r3, r2, r3
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	78bb      	ldrb	r3, [r7, #2]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	b2d8      	uxtb	r0, r3
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fe29 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004c74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f00a fc8c 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004c7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c82:	4618      	mov	r0, r3
 8004c84:	f00a fb5d 	bl	800f342 <_ZNSaIcED1Ev>
			if(WithCheckBox)
 8004c88:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d055      	beq.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			{
				if(ItemsChecked[NextItem])
 8004c90:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c94:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004c98:	4413      	add	r3, r2
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d034      	beq.n	8004d0a <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3be>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004cac:	3b0b      	subs	r3, #11
 8004cae:	b2d9      	uxtb	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7e5b      	ldrb	r3, [r3, #25]
 8004cb4:	3303      	adds	r3, #3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	78bb      	ldrb	r3, [r7, #2]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	2308      	movs	r3, #8
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f7fc f91a 	bl	8000f06 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004cde:	3b09      	subs	r3, #9
 8004ce0:	b2d9      	uxtb	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7e5b      	ldrb	r3, [r3, #25]
 8004ce6:	3303      	adds	r3, #3
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	78bb      	ldrb	r3, [r7, #2]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	2304      	movs	r3, #4
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2304      	movs	r3, #4
 8004d04:	f7fc f8c8 	bl	8000e98 <u8g2_DrawBox>
 8004d08:	e018      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d16:	3b0b      	subs	r3, #11
 8004d18:	b2d9      	uxtb	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7e5b      	ldrb	r3, [r3, #25]
 8004d1e:	3303      	adds	r3, #3
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	78bb      	ldrb	r3, [r7, #2]
 8004d2e:	4413      	add	r3, r2
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	2308      	movs	r3, #8
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	2308      	movs	r3, #8
 8004d38:	f7fc f8e5 	bl	8000f06 <u8g2_DrawFrame>
				}
			}
		}
		if(MaxTexLen < textToWrite.textLen)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7e1b      	ldrb	r3, [r3, #24]
 8004d40:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d203      	bcs.n	8004d50 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x404>
			MaxTexLen = textToWrite.textLen;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7e1b      	ldrb	r3, [r3, #24]
 8004d4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for(int Item = 0; Item < MaxLines; Item++)
 8004d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d52:	3301      	adds	r3, #1
 8004d54:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d56:	e63d      	b.n	80049d4 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x88>
			break;
 8004d58:	bf00      	nop
	}
	if((textToWrite.textHigh * (MaxItems + 1)) + 2 < dispParams.high - FirstItemYPos - 1 )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	7e5b      	ldrb	r3, [r3, #25]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004d64:	3301      	adds	r3, #1
 8004d66:	fb03 f302 	mul.w	r3, r3, r2
 8004d6a:	1c9a      	adds	r2, r3, #2
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004d72:	4619      	mov	r1, r3
 8004d74:	78bb      	ldrb	r3, [r7, #2]
 8004d76:	1acb      	subs	r3, r1, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	da0c      	bge.n	8004d98 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x44c>
		FrameHigh = (textToWrite.textHigh * (MaxItems + 1)) + 2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7e5b      	ldrb	r3, [r3, #25]
 8004d82:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8004d86:	3201      	adds	r2, #1
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3302      	adds	r3, #2
 8004d92:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004d96:	e008      	b.n	8004daa <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x45e>
	else
		FrameHigh = dispParams.high - FirstItemYPos - 1;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004d9e:	78bb      	ldrb	r3, [r7, #2]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	if(!WithCheckBox)
 8004daa:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004dae:	f083 0301 	eor.w	r3, r3, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d015      	beq.n	8004de4 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x498>
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, MaxTexLen + 10, FrameHigh, 3);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b2d9      	uxtb	r1, r3
 8004dc4:	78bb      	ldrb	r3, [r7, #2]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004dce:	330a      	adds	r3, #10
 8004dd0:	b2dc      	uxtb	r4, r3
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	4623      	mov	r3, r4
 8004dde:	f7fc f8f3 	bl	8000fc8 <u8g2_DrawRFrame>
 8004de2:	e019      	b.n	8004e18 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x4cc>
	}
	else
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, dispParams.width - FirstItemXPos - 1, FrameHigh, 3);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b2d9      	uxtb	r1, r3
 8004df0:	78bb      	ldrb	r3, [r7, #2]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b2dc      	uxtb	r4, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	2303      	movs	r3, #3
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	4622      	mov	r2, r4
 8004e14:	f7fc f8d8 	bl	8000fc8 <u8g2_DrawRFrame>
	}
	return MaxLines;
 8004e18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3784      	adds	r7, #132	; 0x84
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}

08004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>:

void NHDST7565_LCD::drawSymbol(uint8_t XPos, uint8_t YPos, const uint8_t *SymbolFont, uint16_t SymbolCode)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08e      	sub	sp, #56	; 0x38
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	72fb      	strb	r3, [r7, #11]
 8004e32:	4613      	mov	r3, r2
 8004e34:	72bb      	strb	r3, [r7, #10]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	74fb      	strb	r3, [r7, #19]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	74bb      	strb	r3, [r7, #18]
	assignTextParams("", SymbolFont);
 8004e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e42:	4618      	mov	r0, r3
 8004e44:	f00a fa7c 	bl	800f340 <_ZNSaIcEC1Ev>
 8004e48:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004e4c:	f107 0314 	add.w	r3, r7, #20
 8004e50:	4915      	ldr	r1, [pc, #84]	; (8004ea8 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht+0x84>)
 8004e52:	4618      	mov	r0, r3
 8004e54:	f00a fd0c 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff fae7 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004e66:	f107 0314 	add.w	r3, r7, #20
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f00a fb93 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e74:	4618      	mov	r0, r3
 8004e76:	f00a fa64 	bl	800f342 <_ZNSaIcED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004e7a:	f107 0013 	add.w	r0, r7, #19
 8004e7e:	7aba      	ldrb	r2, [r7, #10]
 8004e80:	7af9      	ldrb	r1, [r7, #11]
 8004e82:	f107 0312 	add.w	r3, r7, #18
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4603      	mov	r3, r0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff fb42 	bl	8004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
	u8g2_DrawGlyph(&U8G2_Display, NewXPos, NewYPos, SymbolCode);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e96:	7cf9      	ldrb	r1, [r7, #19]
 8004e98:	7cba      	ldrb	r2, [r7, #18]
 8004e9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e9c:	f7fc ff86 	bl	8001dac <u8g2_DrawGlyph>
}
 8004ea0:	bf00      	nop
 8004ea2:	3730      	adds	r7, #48	; 0x30
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	08010488 	.word	0x08010488

08004eac <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:


void NHDST7565_LCD::drawTimeDate(String Time, String Date)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b092      	sub	sp, #72	; 0x48
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
	drawString(Time, LEFT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8004eb8:	f107 0310 	add.w	r3, r7, #16
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f00a fca3 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004eca:	f107 0110 	add.w	r1, r7, #16
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	2346      	movs	r3, #70	; 0x46
 8004ed2:	2282      	movs	r2, #130	; 0x82
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff fcf6 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004eda:	f107 0310 	add.w	r3, r7, #16
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f00a fb59 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	drawString(Date, RIGHT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8004ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f00a fc8d 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ef6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	2346      	movs	r3, #70	; 0x46
 8004efe:	2284      	movs	r2, #132	; 0x84
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fce0 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f00a fb43 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004f10:	bf00      	nop
 8004f12:	3740      	adds	r7, #64	; 0x40
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

void NHDST7565_LCD::drawFullScreenPopUp(String Text, uint16_t Delay)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08c      	sub	sp, #48	; 0x30
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
	clearFrameBuffer();
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff fca5 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	u8g2_DrawRFrame(&U8G2_Display, 1, 1, dispParams.width - 1, dispParams.high - 1, 2);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b2d9      	uxtb	r1, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2202      	movs	r2, #2
 8004f48:	9201      	str	r2, [sp, #4]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2101      	movs	r1, #1
 8004f52:	f7fc f839 	bl	8000fc8 <u8g2_DrawRFrame>
	drawString(Text, CENTER_POS, MIDDLE_POS, displayFonts[W_6_H_13_B]);
 8004f56:	f107 0310 	add.w	r3, r7, #16
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f00a fc54 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f68:	f107 0110 	add.w	r1, r7, #16
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	2347      	movs	r3, #71	; 0x47
 8004f70:	2283      	movs	r2, #131	; 0x83
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff fca7 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004f78:	f107 0310 	add.w	r3, r7, #16
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f00a fb0a 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	sendFrameBuffer();
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff fc84 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
	HAL_Delay(Delay);
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f005 fc1e 	bl	800a7cc <HAL_Delay>
}
 8004f90:	bf00      	nop
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 8004fa2:	6839      	ldr	r1, [r7, #0]
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f808 	bl	8004fba <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f083 0301 	eor.w	r3, r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f00a fc0a 	bl	800f7e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bf0c      	ite	eq
 8004fd2:	2301      	moveq	r3, #1
 8004fd4:	2300      	movne	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <_ZN12STM32_EEPROM6formatEv>:

// ERASE

//##########################################################################################################
bool STM32_EEPROM::format(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	bool RetVal = false;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	77fb      	strb	r3, [r7, #31]
	uint32_t	error;
	HAL_FLASH_Unlock();
 8004fec:	f006 f9f2 	bl	800b3d4 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	617b      	str	r3, [r7, #20]
	flashErase.Banks = FLASH_BANK_1;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 8004ff8:	4b12      	ldr	r3, [pc, #72]	; (8005044 <_ZN12STM32_EEPROM6formatEv+0x64>)
 8004ffa:	613b      	str	r3, [r7, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60bb      	str	r3, [r7, #8]
	if(HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8005000:	f107 0218 	add.w	r2, r7, #24
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f006 faca 	bl	800b5a4 <HAL_FLASHEx_Erase>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <_ZN12STM32_EEPROM6formatEv+0x56>
	{
		HAL_FLASH_Lock();
 8005020:	f006 f9fe 	bl	800b420 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d002      	beq.n	8005032 <_ZN12STM32_EEPROM6formatEv+0x52>
			RetVal = false;
 800502c:	2300      	movs	r3, #0
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e001      	b.n	8005036 <_ZN12STM32_EEPROM6formatEv+0x56>
		else
			RetVal = true;
 8005032:	2301      	movs	r3, #1
 8005034:	77fb      	strb	r3, [r7, #31]
	}
	HAL_FLASH_Lock();
 8005036:	f006 f9f3 	bl	800b420 <HAL_FLASH_Lock>
	return RetVal;
 800503a:	7ffb      	ldrb	r3, [r7, #31]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3720      	adds	r7, #32
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	0801f400 	.word	0x0801f400

08005048 <_ZN12STM32_EEPROM10singleReadEtPm>:
//##########################################################################################################



bool STM32_EEPROM::singleRead(uint16_t VirtualAddress, uint32_t* Data)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	460b      	mov	r3, r1
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	817b      	strh	r3, [r7, #10]
	if(VirtualAddress >= (_EEPROM_FLASH_PAGE_SIZE/4))
 8005056:	897b      	ldrh	r3, [r7, #10]
 8005058:	2bff      	cmp	r3, #255	; 0xff
 800505a:	d901      	bls.n	8005060 <_ZN12STM32_EEPROM10singleReadEtPm+0x18>
		return false;
 800505c:	2300      	movs	r3, #0
 800505e:	e009      	b.n	8005074 <_ZN12STM32_EEPROM10singleReadEtPm+0x2c>
	*Data =  (*(uint32_t*)((VirtualAddress*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 8005060:	897b      	ldrh	r3, [r7, #10]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005068:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	601a      	str	r2, [r3, #0]
	return true;
 8005072:	2301      	movs	r3, #1
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <_ZN12STM32_EEPROM9multiReadEttPm>:


bool STM32_EEPROM::multiRead(uint16_t StartVirtualAddress,uint16_t HowMuchToRead, uint32_t* Data)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	817b      	strh	r3, [r7, #10]
 800508c:	4613      	mov	r3, r2
 800508e:	813b      	strh	r3, [r7, #8]
	bool RetVal = false;
 8005090:	2300      	movs	r3, #0
 8005092:	75fb      	strb	r3, [r7, #23]
	if((StartVirtualAddress+HowMuchToRead) <= (_EEPROM_FLASH_PAGE_SIZE/4))
 8005094:	897a      	ldrh	r2, [r7, #10]
 8005096:	893b      	ldrh	r3, [r7, #8]
 8005098:	4413      	add	r3, r2
 800509a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509e:	dc19      	bgt.n	80050d4 <_ZN12STM32_EEPROM9multiReadEttPm+0x56>
	{
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 80050a0:	897b      	ldrh	r3, [r7, #10]
 80050a2:	82bb      	strh	r3, [r7, #20]
 80050a4:	8aba      	ldrh	r2, [r7, #20]
 80050a6:	8939      	ldrh	r1, [r7, #8]
 80050a8:	897b      	ldrh	r3, [r7, #10]
 80050aa:	440b      	add	r3, r1
 80050ac:	429a      	cmp	r2, r3
 80050ae:	da0f      	bge.n	80050d0 <_ZN12STM32_EEPROM9multiReadEttPm+0x52>
		{
			*Data =  (*(uint32_t*)((i*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 80050b0:	8abb      	ldrh	r3, [r7, #20]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80050b8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
			Data++;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	607b      	str	r3, [r7, #4]
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 80050c8:	8abb      	ldrh	r3, [r7, #20]
 80050ca:	3301      	adds	r3, #1
 80050cc:	82bb      	strh	r3, [r7, #20]
 80050ce:	e7e9      	b.n	80050a4 <_ZN12STM32_EEPROM9multiReadEttPm+0x26>
		}
		RetVal = true;
 80050d0:	2301      	movs	r3, #1
 80050d2:	75fb      	strb	r3, [r7, #23]
	}
	return RetVal;
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <_ZN12STM32_EEPROM5writeEPm>:
// SCRITTURA

//##########################################################################################################

bool STM32_EEPROM::write(uint32_t Data[])
{
 80050e0:	b590      	push	{r4, r7, lr}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
    uint32_t OldValue = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60bb      	str	r3, [r7, #8]
    bool RetVal = false;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
	if(format())
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff ff74 	bl	8004fe0 <_ZN12STM32_EEPROM6formatEv>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d03c      	beq.n	8005178 <_ZN12STM32_EEPROM5writeEPm+0x98>
	{
		HAL_FLASH_Unlock();
 80050fe:	f006 f969 	bl	800b3d4 <HAL_FLASH_Unlock>
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8005102:	2300      	movs	r3, #0
 8005104:	81bb      	strh	r3, [r7, #12]
 8005106:	89bb      	ldrh	r3, [r7, #12]
 8005108:	2bff      	cmp	r3, #255	; 0xff
 800510a:	d833      	bhi.n	8005174 <_ZN12STM32_EEPROM5writeEPm+0x94>
		{
			singleRead(i, &OldValue);
 800510c:	f107 0208 	add.w	r2, r7, #8
 8005110:	89bb      	ldrh	r3, [r7, #12]
 8005112:	4619      	mov	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ff97 	bl	8005048 <_ZN12STM32_EEPROM10singleReadEtPm>
			if(Data[i] != OldValue)
 800511a:	89bb      	ldrh	r3, [r7, #12]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	4413      	add	r3, r2
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	d020      	beq.n	800516c <_ZN12STM32_EEPROM5writeEPm+0x8c>
			{
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (i*4) + _EEPROM_FLASH_PAGE_ADDRESS, (uint64_t)Data[i]) != HAL_OK)
 800512a:	89bb      	ldrh	r3, [r7, #12]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8005132:	f501 31fa 	add.w	r1, r1, #128000	; 0x1f400
 8005136:	89bb      	ldrh	r3, [r7, #12]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	4413      	add	r3, r2
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f04f 0400 	mov.w	r4, #0
 8005144:	461a      	mov	r2, r3
 8005146:	4623      	mov	r3, r4
 8005148:	2002      	movs	r0, #2
 800514a:	f006 f893 	bl	800b274 <HAL_FLASH_Program>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <_ZN12STM32_EEPROM5writeEPm+0x88>
				{
					HAL_FLASH_Lock();
 800515e:	f006 f95f 	bl	800b420 <HAL_FLASH_Lock>
					RetVal = false;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
					break;
 8005166:	e005      	b.n	8005174 <_ZN12STM32_EEPROM5writeEPm+0x94>
				}
				RetVal = true;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 800516c:	89bb      	ldrh	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	81bb      	strh	r3, [r7, #12]
 8005172:	e7c8      	b.n	8005106 <_ZN12STM32_EEPROM5writeEPm+0x26>
			}
		}
		HAL_FLASH_Lock();
 8005174:	f006 f954 	bl	800b420 <HAL_FLASH_Lock>
	}
	return RetVal;
 8005178:	7bfb      	ldrb	r3, [r7, #15]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bd90      	pop	{r4, r7, pc}

08005182 <_ZN12STM32_EEPROM16transferRamToMemEPm>:

//##########################################################################################################


void STM32_EEPROM::transferRamToMem(uint32_t *RamVector)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
    write(RamVector);
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff ffa6 	bl	80050e0 <_ZN12STM32_EEPROM5writeEPm>
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <_ZN12STM32_EEPROM15tranferMemToRamEPm>:

void STM32_EEPROM::tranferMemToRam(uint32_t *RamVector)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
    multiRead(EEPROM_VIRTUAL_ADDR_BEGIN, MAX_DIM_EEPROM_ARRAY, RamVector);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051ac:	2100      	movs	r1, #0
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff ff65 	bl	800507e <_ZN12STM32_EEPROM9multiReadEttPm>
}
 80051b4:	bf00      	nop
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <_ZN12STM32_EEPROM11eraseMemoryEv>:

void STM32_EEPROM::eraseMemory()
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	format();
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff ff0b 	bl	8004fe0 <_ZN12STM32_EEPROM6formatEv>
	tranferMemToRam(eepromArray);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4619      	mov	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff ffe3 	bl	800519c <_ZN12STM32_EEPROM15tranferMemToRamEPm>
    return;
 80051d6:	bf00      	nop
}
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <_ZN12STM32_EEPROM11memoryEmptyEv>:


bool STM32_EEPROM::memoryEmpty()
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	81fb      	strh	r3, [r7, #14]
 80051ea:	89fb      	ldrh	r3, [r7, #14]
 80051ec:	2bff      	cmp	r3, #255	; 0xff
 80051ee:	d80e      	bhi.n	800520e <_ZN12STM32_EEPROM11memoryEmptyEv+0x30>
    {
        if(eepromArray[i] != BLANK_VALUE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	89fb      	ldrh	r3, [r7, #14]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d001      	beq.n	8005206 <_ZN12STM32_EEPROM11memoryEmptyEv+0x28>
            return false;
 8005202:	2300      	movs	r3, #0
 8005204:	e004      	b.n	8005210 <_ZN12STM32_EEPROM11memoryEmptyEv+0x32>
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 8005206:	89fb      	ldrh	r3, [r7, #14]
 8005208:	3301      	adds	r3, #1
 800520a:	81fb      	strh	r3, [r7, #14]
 800520c:	e7ed      	b.n	80051ea <_ZN12STM32_EEPROM11memoryEmptyEv+0xc>
    }
    return true;
 800520e:	2301      	movs	r3, #1
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <_ZN12STM32_EEPROMC1Ev>:


STM32_EEPROM::STM32_EEPROM()
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 8005228:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800522c:	f00a f86a 	bl	800f304 <_Znaj>
 8005230:	4603      	mov	r3, r0
 8005232:	461a      	mov	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
	tranferMemToRam(eepromArray);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff ffac 	bl	800519c <_ZN12STM32_EEPROM15tranferMemToRamEPm>
}
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>:

void STM32_EEPROM::writeToMemory(uint16_t Address, uint32_t Val, bool Transfer)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	461a      	mov	r2, r3
 800525a:	460b      	mov	r3, r1
 800525c:	817b      	strh	r3, [r7, #10]
 800525e:	4613      	mov	r3, r2
 8005260:	727b      	strb	r3, [r7, #9]
	eepromArray[Address] = Val;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	897b      	ldrh	r3, [r7, #10]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	601a      	str	r2, [r3, #0]
	if(Transfer)
 8005270:	7a7b      	ldrb	r3, [r7, #9]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <_ZN12STM32_EEPROM13writeToMemoryEtmb+0x34>
	{
		transferRamToMem(eepromArray);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4619      	mov	r1, r3
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7ff ff80 	bl	8005182 <_ZN12STM32_EEPROM16transferRamToMemEPm>
	}
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>:

void STM32_EEPROM::loadMemory(uint16_t Address, uint32_t *Val)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	460b      	mov	r3, r1
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	817b      	strh	r3, [r7, #10]
	tranferMemToRam(eepromArray);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4619      	mov	r1, r3
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff ff7c 	bl	800519c <_ZN12STM32_EEPROM15tranferMemToRamEPm>
	*Val = eepromArray[Address];
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	897b      	ldrh	r3, [r7, #10]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	bool State = false;
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	889b      	ldrh	r3, [r3, #4]
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f006 fce0 	bl	800bc98 <HAL_GPIO_ReadPin>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bf0c      	ite	eq
 80052de:	2301      	moveq	r3, #1
 80052e0:	2300      	movne	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	4611      	mov	r1, r2
 8005302:	461a      	mov	r2, r3
 8005304:	460b      	mov	r3, r1
 8005306:	80fb      	strh	r3, [r7, #6]
 8005308:	4613      	mov	r3, r2
 800530a:	80bb      	strh	r3, [r7, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	609a      	str	r2, [r3, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	819a      	strh	r2, [r3, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	88fa      	ldrh	r2, [r7, #6]
 8005328:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	88ba      	ldrh	r2, [r7, #4]
 800532e:	819a      	strh	r2, [r3, #12]
}
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 8005344:	2302      	movs	r3, #2
 8005346:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 8005348:	2300      	movs	r3, #0
 800534a:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ffb5 	bl	80052bc <_ZN6BUTTON7readPinEv>
 8005352:	4603      	mov	r3, r0
 8005354:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 8005356:	7b7b      	ldrb	r3, [r7, #13]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d03c      	beq.n	80053d6 <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 800535c:	f005 fa2c 	bl	800a7b8 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 8005366:	7b7b      	ldrb	r3, [r7, #13]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d015      	beq.n	8005398 <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff ffa5 	bl	80052bc <_ZN6BUTTON7readPinEv>
 8005372:	4603      	mov	r3, r0
 8005374:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 8005376:	f005 fa1f 	bl	800a7b8 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	8992      	ldrh	r2, [r2, #12]
 8005386:	4293      	cmp	r3, r2
 8005388:	bf8c      	ite	hi
 800538a:	2301      	movhi	r3, #1
 800538c:	2300      	movls	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0e8      	beq.n	8005366 <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 8005394:	2301      	movs	r3, #1
 8005396:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 8005398:	7bbb      	ldrb	r3, [r7, #14]
 800539a:	f083 0301 	eor.w	r3, r3, #1
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	7b9b      	ldrb	r3, [r3, #14]
 80053a8:	f083 0301 	eor.w	r3, r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	e008      	b.n	80053ca <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	739a      	strb	r2, [r3, #14]
 80053be:	e004      	b.n	80053ca <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 80053d0:	200a      	movs	r0, #10
 80053d2:	f005 f9fb 	bl	800a7cc <HAL_Delay>
	}
	return Status;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 80053e0:	b590      	push	{r4, r7, lr}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 80053e8:	2010      	movs	r0, #16
 80053ea:	f009 ff8d 	bl	800f308 <_Znwj>
 80053ee:	4603      	mov	r3, r0
 80053f0:	461c      	mov	r4, r3
 80053f2:	23fa      	movs	r3, #250	; 0xfa
 80053f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053f8:	491b      	ldr	r1, [pc, #108]	; (8005468 <_ZN8DryerKeyC1Ev+0x88>)
 80053fa:	4620      	mov	r0, r4
 80053fc:	f7ff ff7b 	bl	80052f6 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 8005404:	2010      	movs	r0, #16
 8005406:	f009 ff7f 	bl	800f308 <_Znwj>
 800540a:	4603      	mov	r3, r0
 800540c:	461c      	mov	r4, r3
 800540e:	23fa      	movs	r3, #250	; 0xfa
 8005410:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005414:	4914      	ldr	r1, [pc, #80]	; (8005468 <_ZN8DryerKeyC1Ev+0x88>)
 8005416:	4620      	mov	r0, r4
 8005418:	f7ff ff6d 	bl	80052f6 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 500);
 8005420:	2010      	movs	r0, #16
 8005422:	f009 ff71 	bl	800f308 <_Znwj>
 8005426:	4603      	mov	r3, r0
 8005428:	461c      	mov	r4, r3
 800542a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800542e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005432:	490d      	ldr	r1, [pc, #52]	; (8005468 <_ZN8DryerKeyC1Ev+0x88>)
 8005434:	4620      	mov	r0, r4
 8005436:	f7ff ff5e 	bl	80052f6 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 500);
 800543e:	2010      	movs	r0, #16
 8005440:	f009 ff62 	bl	800f308 <_Znwj>
 8005444:	4603      	mov	r3, r0
 8005446:	461c      	mov	r4, r3
 8005448:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800544c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005450:	4905      	ldr	r1, [pc, #20]	; (8005468 <_ZN8DryerKeyC1Ev+0x88>)
 8005452:	4620      	mov	r0, r4
 8005454:	f7ff ff4f 	bl	80052f6 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60dc      	str	r4, [r3, #12]
}
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	bd90      	pop	{r4, r7, pc}
 8005466:	bf00      	nop
 8005468:	40010c00 	.word	0x40010c00

0800546c <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8005474:	2308      	movs	r3, #8
 8005476:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b03      	cmp	r3, #3
 8005480:	dc1d      	bgt.n	80054be <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff ff56 	bl	800533c <_ZN6BUTTON11checkButtonEv>
 8005490:	4603      	mov	r3, r0
 8005492:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	75fb      	strb	r3, [r7, #23]
 800549e:	e006      	b.n	80054ae <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d103      	bne.n	80054ae <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	3304      	adds	r3, #4
 80054ac:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d103      	bne.n	80054bc <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	3301      	adds	r3, #1
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e7df      	b.n	800547c <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 80054bc:	bf00      	nop
		}
	}
	return KeyPressed;
 80054be:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <_ZN4RELE6setPinE9PIN_STATE+0x20>
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d003      	beq.n	80054e8 <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	719a      	strb	r2, [r3, #6]
 80054e6:	e007      	b.n	80054f8 <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	799b      	ldrb	r3, [r3, #6]
 80054ec:	78fa      	ldrb	r2, [r7, #3]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d002      	beq.n	80054f8 <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	78fa      	ldrb	r2, [r7, #3]
 80054f6:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	8899      	ldrh	r1, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	799b      	ldrb	r3, [r3, #6]
 8005504:	461a      	mov	r2, r3
 8005506:	f006 fbed 	bl	800bce4 <HAL_GPIO_WritePin>
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	4611      	mov	r1, r2
 800551e:	461a      	mov	r2, r3
 8005520:	460b      	mov	r3, r1
 8005522:	80fb      	strh	r3, [r7, #6]
 8005524:	4613      	mov	r3, r2
 8005526:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	797a      	ldrb	r2, [r7, #5]
 8005538:	719a      	strb	r2, [r3, #6]

}
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	460b      	mov	r3, r1
 8005550:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ffb6 	bl	80054c8 <_ZN4RELE6setPinE9PIN_STATE>
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <_ZN11SerialDebugC1Ev>:
	uint16_t BufferLen = serialBuffer.size();
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
}


SerialDebug::SerialDebug()
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4618      	mov	r0, r3
 8005570:	f009 fff0 	bl	800f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2020 	strb.w	r2, [r3, #32]
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
}
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <_ZNSt7__cxx119to_stringEm+0x24>)
 80055ae:	2210      	movs	r2, #16
 80055b0:	4904      	ldr	r1, [pc, #16]	; (80055c4 <_ZNSt7__cxx119to_stringEm+0x28>)
 80055b2:	f7fe fc83 	bl	8003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	08010498 	.word	0x08010498
 80055c4:	0800fd69 	.word	0x0800fd69

080055c8 <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2020 	strb.w	r2, [r3, #32]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>:
		bool withChebox;
		bool *itemsChecked;
		void *paramAssociated;
		uint8_t paramType;
		bool menuSelected;
	}MENU_STRUCTURE;
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f009 ffb0 	bl	800f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>:
	}DRYER_PARAMS;
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	705a      	strb	r2, [r3, #1]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	709a      	strb	r2, [r3, #2]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a03      	ldr	r2, [pc, #12]	; (800562c <_ZN10SmartDryer12DRYER_PARAMSC1Ev+0x2c>)
 800561e:	605a      	str	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr
 800562c:	41f00000 	.word	0x41f00000

08005630 <_ZN10SmartDryerC1Ev>:
		"Programma 3",
};



SmartDryer::SmartDryer()
 8005630:	b590      	push	{r4, r7, lr}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3344      	adds	r3, #68	; 0x44
 8005644:	2248      	movs	r2, #72	; 0x48
 8005646:	2100      	movs	r1, #0
 8005648:	4618      	mov	r0, r3
 800564a:	f00a fa5e 	bl	800fb0a <memset>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3398      	adds	r3, #152	; 0x98
 800565a:	4618      	mov	r0, r3
 800565c:	f003 fe5c 	bl	8009318 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 8005680:	20c8      	movs	r0, #200	; 0xc8
 8005682:	f009 fe41 	bl	800f308 <_Znwj>
 8005686:	4603      	mov	r3, r0
 8005688:	461c      	mov	r4, r3
 800568a:	2101      	movs	r1, #1
 800568c:	4620      	mov	r0, r4
 800568e:	f7fe fe81 	bl	8004394 <_ZN13NHDST7565_LCDC1Eh>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	601c      	str	r4, [r3, #0]
	keyboard = new DryerKey();
 8005696:	2010      	movs	r0, #16
 8005698:	f009 fe36 	bl	800f308 <_Znwj>
 800569c:	4603      	mov	r3, r0
 800569e:	461c      	mov	r4, r3
 80056a0:	4620      	mov	r0, r4
 80056a2:	f7ff fe9d 	bl	80053e0 <_ZN8DryerKeyC1Ev>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 80056aa:	2021      	movs	r0, #33	; 0x21
 80056ac:	f009 fe2c 	bl	800f308 <_Znwj>
 80056b0:	4603      	mov	r3, r0
 80056b2:	461c      	mov	r4, r3
 80056b4:	4620      	mov	r0, r4
 80056b6:	2321      	movs	r3, #33	; 0x21
 80056b8:	461a      	mov	r2, r3
 80056ba:	2100      	movs	r1, #0
 80056bc:	f00a fa25 	bl	800fb0a <memset>
 80056c0:	4620      	mov	r0, r4
 80056c2:	f7ff ff81 	bl	80055c8 <_ZN13THERMO_SENSORC1Ev>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 80056ca:	2008      	movs	r0, #8
 80056cc:	f009 fe1c 	bl	800f308 <_Znwj>
 80056d0:	4603      	mov	r3, r0
 80056d2:	461c      	mov	r4, r3
 80056d4:	2300      	movs	r3, #0
 80056d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056da:	4987      	ldr	r1, [pc, #540]	; (80058f8 <_ZN10SmartDryerC1Ev+0x2c8>)
 80056dc:	4620      	mov	r0, r4
 80056de:	f7ff ff18 	bl	8005512 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 80056e6:	2008      	movs	r0, #8
 80056e8:	f009 fe0e 	bl	800f308 <_Znwj>
 80056ec:	4603      	mov	r3, r0
 80056ee:	461c      	mov	r4, r3
 80056f0:	2300      	movs	r3, #0
 80056f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f6:	4980      	ldr	r1, [pc, #512]	; (80058f8 <_ZN10SmartDryerC1Ev+0x2c8>)
 80056f8:	4620      	mov	r0, r4
 80056fa:	f7ff ff0a 	bl	8005512 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 8005702:	2008      	movs	r0, #8
 8005704:	f009 fe00 	bl	800f308 <_Znwj>
 8005708:	4603      	mov	r3, r0
 800570a:	461c      	mov	r4, r3
 800570c:	4620      	mov	r0, r4
 800570e:	f7ff fd84 	bl	800521a <_ZN12STM32_EEPROMC1Ev>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005716:	2014      	movs	r0, #20
 8005718:	f009 fdf6 	bl	800f308 <_Znwj>
 800571c:	4603      	mov	r3, r0
 800571e:	461c      	mov	r4, r3
 8005720:	2100      	movs	r1, #0
 8005722:	4620      	mov	r0, r4
 8005724:	f7fd fd9b 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800572c:	2014      	movs	r0, #20
 800572e:	f009 fdeb 	bl	800f308 <_Znwj>
 8005732:	4603      	mov	r3, r0
 8005734:	461c      	mov	r4, r3
 8005736:	2100      	movs	r1, #0
 8005738:	4620      	mov	r0, r4
 800573a:	f7fd fd90 	bl	800325e <_ZN11ChronoTimerC1Eh>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005742:	2014      	movs	r0, #20
 8005744:	f009 fde0 	bl	800f308 <_Znwj>
 8005748:	4603      	mov	r3, r0
 800574a:	461c      	mov	r4, r3
 800574c:	2100      	movs	r1, #0
 800574e:	4620      	mov	r0, r4
 8005750:	f7fd fd85 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	625c      	str	r4, [r3, #36]	; 0x24
	takeTimeTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005758:	2014      	movs	r0, #20
 800575a:	f009 fdd5 	bl	800f308 <_Znwj>
 800575e:	4603      	mov	r3, r0
 8005760:	461c      	mov	r4, r3
 8005762:	2100      	movs	r1, #0
 8005764:	4620      	mov	r0, r4
 8005766:	f7fd fd7a 	bl	800325e <_ZN11ChronoTimerC1Eh>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	629c      	str	r4, [r3, #40]	; 0x28
	showHelpMessageTimer = new ChronoTimer(ChronoTimer::SECONDS);
 800576e:	2014      	movs	r0, #20
 8005770:	f009 fdca 	bl	800f308 <_Znwj>
 8005774:	4603      	mov	r3, r0
 8005776:	461c      	mov	r4, r3
 8005778:	2101      	movs	r1, #1
 800577a:	4620      	mov	r0, r4
 800577c:	f7fd fd6f 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	62dc      	str	r4, [r3, #44]	; 0x2c
	programStartedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005784:	2014      	movs	r0, #20
 8005786:	f009 fdbf 	bl	800f308 <_Znwj>
 800578a:	4603      	mov	r3, r0
 800578c:	461c      	mov	r4, r3
 800578e:	2100      	movs	r1, #0
 8005790:	4620      	mov	r0, r4
 8005792:	f7fd fd64 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	631c      	str	r4, [r3, #48]	; 0x30

	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800579a:	2014      	movs	r0, #20
 800579c:	f009 fdb4 	bl	800f308 <_Znwj>
 80057a0:	4603      	mov	r3, r0
 80057a2:	461c      	mov	r4, r3
 80057a4:	2100      	movs	r1, #0
 80057a6:	4620      	mov	r0, r4
 80057a8:	f7fd fd59 	bl	800325e <_ZN11ChronoTimerC1Eh>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	635c      	str	r4, [r3, #52]	; 0x34

	dbgDryer = new SerialDebug();
 80057b0:	2024      	movs	r0, #36	; 0x24
 80057b2:	f009 fda9 	bl	800f308 <_Znwj>
 80057b6:	4603      	mov	r3, r0
 80057b8:	461c      	mov	r4, r3
 80057ba:	4620      	mov	r0, r4
 80057bc:	f7ff fed2 	bl	8005564 <_ZN11SerialDebugC1Ev>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	639c      	str	r4, [r3, #56]	; 0x38

	clock = new DS1307_RTC();
 80057c4:	2021      	movs	r0, #33	; 0x21
 80057c6:	f009 fd9f 	bl	800f308 <_Znwj>
 80057ca:	4603      	mov	r3, r0
 80057cc:	461c      	mov	r4, r3
 80057ce:	4620      	mov	r0, r4
 80057d0:	f7fd fe84 	bl	80034dc <_ZN10DS1307_RTCC1Ev>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	605c      	str	r4, [r3, #4]

	mainMenu = new MENU_STRUCTURE();
 80057d8:	2038      	movs	r0, #56	; 0x38
 80057da:	f009 fd95 	bl	800f308 <_Znwj>
 80057de:	4603      	mov	r3, r0
 80057e0:	461c      	mov	r4, r3
 80057e2:	4620      	mov	r0, r4
 80057e4:	2338      	movs	r3, #56	; 0x38
 80057e6:	461a      	mov	r2, r3
 80057e8:	2100      	movs	r1, #0
 80057ea:	f00a f98e 	bl	800fb0a <memset>
 80057ee:	4620      	mov	r0, r4
 80057f0:	f7ff fef8 	bl	80055e4 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	thermoMenuCtrl = new MENU_STRUCTURE();
 80057fa:	2038      	movs	r0, #56	; 0x38
 80057fc:	f009 fd84 	bl	800f308 <_Znwj>
 8005800:	4603      	mov	r3, r0
 8005802:	461c      	mov	r4, r3
 8005804:	4620      	mov	r0, r4
 8005806:	2338      	movs	r3, #56	; 0x38
 8005808:	461a      	mov	r2, r3
 800580a:	2100      	movs	r1, #0
 800580c:	f00a f97d 	bl	800fb0a <memset>
 8005810:	4620      	mov	r0, r4
 8005812:	f7ff fee7 	bl	80055e4 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	fanMenuCtrl = new MENU_STRUCTURE();
 800581c:	2038      	movs	r0, #56	; 0x38
 800581e:	f009 fd73 	bl	800f308 <_Znwj>
 8005822:	4603      	mov	r3, r0
 8005824:	461c      	mov	r4, r3
 8005826:	4620      	mov	r0, r4
 8005828:	2338      	movs	r3, #56	; 0x38
 800582a:	461a      	mov	r2, r3
 800582c:	2100      	movs	r1, #0
 800582e:	f00a f96c 	bl	800fb0a <memset>
 8005832:	4620      	mov	r0, r4
 8005834:	f7ff fed6 	bl	80055e4 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
	tempMenuCtrl = new MENU_STRUCTURE();
 800583e:	2038      	movs	r0, #56	; 0x38
 8005840:	f009 fd62 	bl	800f308 <_Znwj>
 8005844:	4603      	mov	r3, r0
 8005846:	461c      	mov	r4, r3
 8005848:	4620      	mov	r0, r4
 800584a:	2338      	movs	r3, #56	; 0x38
 800584c:	461a      	mov	r2, r3
 800584e:	2100      	movs	r1, #0
 8005850:	f00a f95b 	bl	800fb0a <memset>
 8005854:	4620      	mov	r0, r4
 8005856:	f7ff fec5 	bl	80055e4 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
	startDryerMenu = new MENU_STRUCTURE();
 8005860:	2038      	movs	r0, #56	; 0x38
 8005862:	f009 fd51 	bl	800f308 <_Znwj>
 8005866:	4603      	mov	r3, r0
 8005868:	461c      	mov	r4, r3
 800586a:	4620      	mov	r0, r4
 800586c:	2338      	movs	r3, #56	; 0x38
 800586e:	461a      	mov	r2, r3
 8005870:	2100      	movs	r1, #0
 8005872:	f00a f94a 	bl	800fb0a <memset>
 8005876:	4620      	mov	r0, r4
 8005878:	f7ff feb4 	bl	80055e4 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
	changeProgramsMenu = new MENU_STRUCTURE();
 8005882:	2038      	movs	r0, #56	; 0x38
 8005884:	f009 fd40 	bl	800f308 <_Znwj>
 8005888:	4603      	mov	r3, r0
 800588a:	461c      	mov	r4, r3
 800588c:	4620      	mov	r0, r4
 800588e:	2338      	movs	r3, #56	; 0x38
 8005890:	461a      	mov	r2, r3
 8005892:	2100      	movs	r1, #0
 8005894:	f00a f939 	bl	800fb0a <memset>
 8005898:	4620      	mov	r0, r4
 800589a:	f7ff fea3 	bl	80055e4 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
	startProgramsMenu = new MENU_STRUCTURE();
 80058a4:	2038      	movs	r0, #56	; 0x38
 80058a6:	f009 fd2f 	bl	800f308 <_Znwj>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461c      	mov	r4, r3
 80058ae:	4620      	mov	r0, r4
 80058b0:	2338      	movs	r3, #56	; 0x38
 80058b2:	461a      	mov	r2, r3
 80058b4:	2100      	movs	r1, #0
 80058b6:	f00a f928 	bl	800fb0a <memset>
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7ff fe92 	bl	80055e4 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc

	statusParam = new DRYER_PARAMS();
 80058c6:	200c      	movs	r0, #12
 80058c8:	f009 fd1e 	bl	800f308 <_Znwj>
 80058cc:	4603      	mov	r3, r0
 80058ce:	461c      	mov	r4, r3
 80058d0:	4622      	mov	r2, r4
 80058d2:	2300      	movs	r3, #0
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	6053      	str	r3, [r2, #4]
 80058d8:	6093      	str	r3, [r2, #8]
 80058da:	4620      	mov	r0, r4
 80058dc:	f7ff fe90 	bl	8005600 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	641c      	str	r4, [r3, #64]	; 0x40

	chamberTemperature.readedTemperatureInt = 0;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd90      	pop	{r4, r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40010800 	.word	0x40010800

080058fc <_ZN10SmartDryer8blinkLedEht>:


void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
 8005908:	4613      	mov	r3, r2
 800590a:	803b      	strh	r3, [r7, #0]
	//	GPIO_TypeDef *LedPort;
	//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 800590c:	883b      	ldrh	r3, [r7, #0]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d801      	bhi.n	8005916 <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 8005912:	2302      	movs	r3, #2
 8005914:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <_ZN10SmartDryer8blinkLedEht+0x26>
 800591c:	2b01      	cmp	r3, #1
 800591e:	d010      	beq.n	8005942 <_ZN10SmartDryer8blinkLedEht+0x46>
			}
			//		LedPort = GreenLed_GPIO_Port;
			//		LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005920:	e022      	b.n	8005968 <_ZN10SmartDryer8blinkLedEht+0x6c>
			if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	883a      	ldrh	r2, [r7, #0]
 8005928:	2101      	movs	r1, #1
 800592a:	4618      	mov	r0, r3
 800592c:	f7fd fd41 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d015      	beq.n	8005962 <_ZN10SmartDryer8blinkLedEht+0x66>
				toggleLed(WichLed);
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f818 	bl	8005970 <_ZN10SmartDryer9toggleLedEh>
			break;
 8005940:	e00f      	b.n	8005962 <_ZN10SmartDryer8blinkLedEht+0x66>
			if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	883a      	ldrh	r2, [r7, #0]
 8005948:	2101      	movs	r1, #1
 800594a:	4618      	mov	r0, r3
 800594c:	f7fd fd31 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <_ZN10SmartDryer8blinkLedEht+0x6a>
				toggleLed(WichLed);
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f808 	bl	8005970 <_ZN10SmartDryer9toggleLedEh>
			break;
 8005960:	e001      	b.n	8005966 <_ZN10SmartDryer8blinkLedEht+0x6a>
			break;
 8005962:	bf00      	nop
 8005964:	e000      	b.n	8005968 <_ZN10SmartDryer8blinkLedEht+0x6c>
			break;
 8005966:	bf00      	nop
	}

}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <_ZN10SmartDryer9toggleLedEh+0x1c>
 8005986:	2b01      	cmp	r3, #1
 8005988:	d006      	beq.n	8005998 <_ZN10SmartDryer9toggleLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 800598a:	e00b      	b.n	80059a4 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <_ZN10SmartDryer9toggleLedEh+0x48>)
 800598e:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8005990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005994:	817b      	strh	r3, [r7, #10]
			break;
 8005996:	e005      	b.n	80059a4 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8005998:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <_ZN10SmartDryer9toggleLedEh+0x48>)
 800599a:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 800599c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059a0:	817b      	strh	r3, [r7, #10]
			break;
 80059a2:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 80059a4:	897b      	ldrh	r3, [r7, #10]
 80059a6:	4619      	mov	r1, r3
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f006 f9cd 	bl	800bd48 <HAL_GPIO_TogglePin>
}
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40010800 	.word	0x40010800

080059bc <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <_ZN10SmartDryer9turnOnLedEh+0x1c>
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d006      	beq.n	80059e4 <_ZN10SmartDryer9turnOnLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80059d6:	e00b      	b.n	80059f0 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 80059da:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 80059dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059e0:	817b      	strh	r3, [r7, #10]
			break;
 80059e2:	e005      	b.n	80059f0 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 80059e4:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 80059e6:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 80059e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ec:	817b      	strh	r3, [r7, #10]
			break;
 80059ee:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 80059f0:	897b      	ldrh	r3, [r7, #10]
 80059f2:	2201      	movs	r2, #1
 80059f4:	4619      	mov	r1, r3
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f006 f974 	bl	800bce4 <HAL_GPIO_WritePin>
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40010800 	.word	0x40010800

08005a08 <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <_ZN10SmartDryer10turnOffLedEh+0x1c>
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d006      	beq.n	8005a30 <_ZN10SmartDryer10turnOffLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005a22:	e00b      	b.n	8005a3c <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8005a24:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 8005a26:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8005a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a2c:	817b      	strh	r3, [r7, #10]
			break;
 8005a2e:	e005      	b.n	8005a3c <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 8005a32:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8005a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a38:	817b      	strh	r3, [r7, #10]
			break;
 8005a3a:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 8005a3c:	897b      	ldrh	r3, [r7, #10]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	4619      	mov	r1, r3
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f006 f94e 	bl	800bce4 <HAL_GPIO_WritePin>
}
 8005a48:	bf00      	nop
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40010800 	.word	0x40010800

08005a54 <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d031      	beq.n	8005aca <_ZN10SmartDryer10ledControlEv+0x76>
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	dc06      	bgt.n	8005a78 <_ZN10SmartDryer10ledControlEv+0x24>
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d019      	beq.n	8005aa2 <_ZN10SmartDryer10ledControlEv+0x4e>
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	dc22      	bgt.n	8005ab8 <_ZN10SmartDryer10ledControlEv+0x64>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00b      	beq.n	8005a8e <_ZN10SmartDryer10ledControlEv+0x3a>
 8005a76:	e07b      	b.n	8005b70 <_ZN10SmartDryer10ledControlEv+0x11c>
 8005a78:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d03d      	beq.n	8005afc <_ZN10SmartDryer10ledControlEv+0xa8>
 8005a80:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005a84:	d057      	beq.n	8005b36 <_ZN10SmartDryer10ledControlEv+0xe2>
 8005a86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a8a:	d02a      	beq.n	8005ae2 <_ZN10SmartDryer10ledControlEv+0x8e>
 8005a8c:	e070      	b.n	8005b70 <_ZN10SmartDryer10ledControlEv+0x11c>
	{
		case THERMO_ON_FAN_OFF:
			blinkLed(RED_LED, 10);
 8005a8e:	220a      	movs	r2, #10
 8005a90:	2100      	movs	r1, #0
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff ff32 	bl	80058fc <_ZN10SmartDryer8blinkLedEht>
			turnOffLed(GREEN_LED);
 8005a98:	2101      	movs	r1, #1
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff ffb4 	bl	8005a08 <_ZN10SmartDryer10turnOffLedEh>
			break;
 8005aa0:	e073      	b.n	8005b8a <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_ON:
			turnOffLed(RED_LED);
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ffaf 	bl	8005a08 <_ZN10SmartDryer10turnOffLedEh>
			blinkLed(GREEN_LED, 500);
 8005aaa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005aae:	2101      	movs	r1, #1
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff ff23 	bl	80058fc <_ZN10SmartDryer8blinkLedEht>
			break;
 8005ab6:	e068      	b.n	8005b8a <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_OFF:
			turnOffLed(GREEN_LED);
 8005ab8:	2101      	movs	r1, #1
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff ffa4 	bl	8005a08 <_ZN10SmartDryer10turnOffLedEh>
			turnOffLed(RED_LED);
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff ffa0 	bl	8005a08 <_ZN10SmartDryer10turnOffLedEh>
			break;
 8005ac8:	e05f      	b.n	8005b8a <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_ON_FAN_ON:
			blinkLed(RED_LED, 10);
 8005aca:	220a      	movs	r2, #10
 8005acc:	2100      	movs	r1, #0
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff ff14 	bl	80058fc <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 500);
 8005ad4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005ad8:	2101      	movs	r1, #1
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff ff0e 	bl	80058fc <_ZN10SmartDryer8blinkLedEht>
			break;
 8005ae0:	e053      	b.n	8005b8a <_ZN10SmartDryer10ledControlEv+0x136>
		case TEMP_REACHED:
			turnOnLed(RED_LED);
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff ff69 	bl	80059bc <_ZN10SmartDryer9turnOnLedEh>
			HAL_Delay(250);
 8005aea:	20fa      	movs	r0, #250	; 0xfa
 8005aec:	f004 fe6e 	bl	800a7cc <HAL_Delay>
			ledStatus = UNKNOWN_STATE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005af6:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			break;
 8005afa:	e046      	b.n	8005b8a <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_INIT:
			for(int i = 0; i < 50*10; i++)
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005b06:	da10      	bge.n	8005b2a <_ZN10SmartDryer10ledControlEv+0xd6>
			{
				blinkLed(RED_LED, 50);
 8005b08:	2232      	movs	r2, #50	; 0x32
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff fef5 	bl	80058fc <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 8005b12:	2232      	movs	r2, #50	; 0x32
 8005b14:	2101      	movs	r1, #1
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff fef0 	bl	80058fc <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f004 fe55 	bl	800a7cc <HAL_Delay>
			for(int i = 0; i < 50*10; i++)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3301      	adds	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e7ea      	b.n	8005b00 <_ZN10SmartDryer10ledControlEv+0xac>
			};
			ledStatus = UNKNOWN_STATE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005b30:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			break;
 8005b34:	e029      	b.n	8005b8a <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_END:
			for(int i = 0; i < 50*20; i++)
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b40:	da10      	bge.n	8005b64 <_ZN10SmartDryer10ledControlEv+0x110>
			{
				blinkLed(RED_LED, 50);
 8005b42:	2232      	movs	r2, #50	; 0x32
 8005b44:	2100      	movs	r1, #0
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff fed8 	bl	80058fc <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 8005b4c:	2232      	movs	r2, #50	; 0x32
 8005b4e:	2101      	movs	r1, #1
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff fed3 	bl	80058fc <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 8005b56:	2001      	movs	r0, #1
 8005b58:	f004 fe38 	bl	800a7cc <HAL_Delay>
			for(int i = 0; i < 50*20; i++)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	e7ea      	b.n	8005b3a <_ZN10SmartDryer10ledControlEv+0xe6>
			};
			ledStatus = UNKNOWN_STATE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005b6a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			break;
 8005b6e:	e00c      	b.n	8005b8a <_ZN10SmartDryer10ledControlEv+0x136>
		case UNKNOWN_STATE:
		default:
			blinkLed(RED_LED, 1000);
 8005b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b74:	2100      	movs	r1, #0
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff fec0 	bl	80058fc <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 1000);
 8005b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b80:	2101      	movs	r1, #1
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff feba 	bl	80058fc <_ZN10SmartDryer8blinkLedEht>
			break;
 8005b88:	bf00      	nop
	}
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <_ZN10SmartDryer16thermoRegulationEf>:

void SmartDryer::thermoRegulation(float WichTemp)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
	uint32_t ReadedTemp = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
	uint32_t TempTarget = (uint32_t)roundf(WichTemp * 10);
 8005ba2:	4969      	ldr	r1, [pc, #420]	; (8005d48 <_ZN10SmartDryer16thermoRegulationEf+0x1b4>)
 8005ba4:	6838      	ldr	r0, [r7, #0]
 8005ba6:	f7fb f807 	bl	8000bb8 <__aeabi_fmul>
 8005baa:	4603      	mov	r3, r0
 8005bac:	4618      	mov	r0, r3
 8005bae:	f009 ff05 	bl	800f9bc <roundf>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fb f94f 	bl	8000e58 <__aeabi_f2uiz>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	60bb      	str	r3, [r7, #8]
	if(statusParam->dryerOn)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80b5 	beq.w	8005d34 <_ZN10SmartDryer16thermoRegulationEf+0x1a0>
	{
		if(getTempTimer->isFinished(true, 750))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	f240 22ee 	movw	r2, #750	; 0x2ee
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fd fbec 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d019      	beq.n	8005c14 <_ZN10SmartDryer16thermoRegulationEf+0x80>
		{
			chamberTemperature.readedTemperatureFL = tempSens->getTemperature();
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f004 fc42 	bl	800a46e <_ZN13THERMO_SENSOR14getTemperatureEv>
 8005bea:	4602      	mov	r2, r0
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			ReadedTemp = (uint32_t)roundf(chamberTemperature.readedTemperatureFL * 10);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf8:	4953      	ldr	r1, [pc, #332]	; (8005d48 <_ZN10SmartDryer16thermoRegulationEf+0x1b4>)
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fa ffdc 	bl	8000bb8 <__aeabi_fmul>
 8005c00:	4603      	mov	r3, r0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f009 feda 	bl	800f9bc <roundf>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fb f924 	bl	8000e58 <__aeabi_f2uiz>
 8005c10:	4603      	mov	r3, r0
 8005c12:	60fb      	str	r3, [r7, #12]
		}
		if(ReadedTemp != 0)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d06c      	beq.n	8005cf4 <_ZN10SmartDryer16thermoRegulationEf+0x160>
		{
			if(ReadedTemp >= TempTarget - TOLLERANCE_DEGREES)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	3b37      	subs	r3, #55	; 0x37
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d319      	bcc.n	8005c58 <_ZN10SmartDryer16thermoRegulationEf+0xc4>
			{
				statusParam->fanOn = true;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	2201      	movs	r2, #1
 8005c2a:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	2201      	movs	r2, #1
 8005c32:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005c3a:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d07d      	beq.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005c48:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005c4c:	d077      	beq.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
					ledStatus = THERMO_ON_FAN_ON;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2203      	movs	r2, #3
 8005c52:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	}
	else
	{
		getTempTimer->restart();
	}
}
 8005c56:	e072      	b.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
			else if(ReadedTemp >= TempTarget)
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d324      	bcc.n	8005caa <_ZN10SmartDryer16thermoRegulationEf+0x116>
				statusParam->fanOn = true;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	2201      	movs	r2, #1
 8005c66:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = false;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	705a      	strb	r2, [r3, #1]
				ledStatus = TEMP_REACHED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005c76:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005c80:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d05a      	beq.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005c8e:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005c92:	d054      	beq.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005c9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005c9e:	d04e      	beq.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
					ledStatus = THERMO_OFF_FAN_ON;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8005ca8:	e049      	b.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
			else if(ReadedTemp < TempTarget - TOLLERANCE_DEGREES)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	3b37      	subs	r3, #55	; 0x37
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d244      	bcs.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
				statusParam->fanOn = false;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	2200      	movs	r2, #0
 8005cba:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005cca:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d035      	beq.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005cd8:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005cdc:	d02f      	beq.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005ce4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005ce8:	d029      	beq.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
					ledStatus = THERMO_ON_FAN_OFF;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8005cf2:	e024      	b.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
			statusParam->fanOn = false;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	709a      	strb	r2, [r3, #2]
			statusParam->thermoOn = false;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	2200      	movs	r2, #0
 8005d02:	705a      	strb	r2, [r3, #1]
			if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005d0a:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d015      	beq.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005d18:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005d1c:	d00f      	beq.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005d24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005d28:	d009      	beq.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
				ledStatus = THERMO_OFF_FAN_OFF;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8005d32:	e004      	b.n	8005d3e <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
		getTempTimer->restart();
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fd fb2c 	bl	8003396 <_ZN11ChronoTimer7restartEv>
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	41200000 	.word	0x41200000

08005d4c <_ZN10SmartDryer16physicalReleCtrlEv>:

void SmartDryer::physicalReleCtrl()
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	if(statusParam->dryerOn)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d024      	beq.n	8005da8 <_ZN10SmartDryer16physicalReleCtrlEv+0x5c>
	{
		if(statusParam->fanOn)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	789b      	ldrb	r3, [r3, #2]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d006      	beq.n	8005d76 <_ZN10SmartDryer16physicalReleCtrlEv+0x2a>
		{
			fanCtrl->setState(HIGH);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fbe9 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
 8005d74:	e005      	b.n	8005d82 <_ZN10SmartDryer16physicalReleCtrlEv+0x36>
		}
		else
		{
			fanCtrl->setState(LOW);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff fbe2 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
		}
		if(statusParam->thermoOn)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d006      	beq.n	8005d9a <_ZN10SmartDryer16physicalReleCtrlEv+0x4e>
		{
			thermoCtrl->setState(HIGH);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	2101      	movs	r1, #1
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fbd7 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
	else
	{
		fanCtrl->setState(LOW);
		thermoCtrl->setState(LOW);
	}
}
 8005d98:	e012      	b.n	8005dc0 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
			thermoCtrl->setState(LOW);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	2100      	movs	r1, #0
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fbd0 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
}
 8005da6:	e00b      	b.n	8005dc0 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
		fanCtrl->setState(LOW);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2100      	movs	r1, #0
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fbc9 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
		thermoCtrl->setState(LOW);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff fbc3 	bl	8005546 <_ZN4RELE8setStateE9PIN_STATE>
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <_ZN10SmartDryer18peripheralsControlEv>:

void SmartDryer::peripheralsControl()
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	thermoRegulation(statusParam->temperatureSetted);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff fedb 	bl	8005b94 <_ZN10SmartDryer16thermoRegulationEf>
	physicalReleCtrl();
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff ffb4 	bl	8005d4c <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff fe35 	bl	8005a54 <_ZN10SmartDryer10ledControlEv>
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:


void SmartDryer::showTimeDate(String &Time, String &Date)
{
 8005df2:	b590      	push	{r4, r7, lr}
 8005df4:	b09d      	sub	sp, #116	; 0x74
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
	if(takeTimeTimer->isFinished(true, 500))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005e06:	2101      	movs	r1, #1
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fd fad2 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d025      	beq.n	8005e60 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x6e>
	{
		Time = clock->getTimeDateStr(DS1307_RTC::ONLY_TIME_NO_SEC);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6859      	ldr	r1, [r3, #4]
 8005e18:	f107 0310 	add.w	r3, r7, #16
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fd fd2c 	bl	800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8005e24:	f107 0310 	add.w	r3, r7, #16
 8005e28:	4619      	mov	r1, r3
 8005e2a:	68b8      	ldr	r0, [r7, #8]
 8005e2c:	f009 fbbf 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8005e30:	f107 0310 	add.w	r3, r7, #16
 8005e34:	4618      	mov	r0, r3
 8005e36:	f009 fbae 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Date = clock->getTimeDateStr(DS1307_RTC::ONLY_DATE_NO_YEAR);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6859      	ldr	r1, [r3, #4]
 8005e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e42:	2203      	movs	r2, #3
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fd fd19 	bl	800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8005e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f009 fbac 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8005e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f009 fb9b 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	display->drawTimeDate(Time, Date);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681c      	ldr	r4, [r3, #0]
 8005e64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f009 fccd 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005e70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f009 fcc7 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005e7c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005e80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e84:	4619      	mov	r1, r3
 8005e86:	4620      	mov	r0, r4
 8005e88:	f7ff f810 	bl	8004eac <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8005e8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e90:	4618      	mov	r0, r3
 8005e92:	f009 fb80 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f009 fb7b 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005ea0:	bf00      	nop
 8005ea2:	3774      	adds	r7, #116	; 0x74
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd90      	pop	{r4, r7, pc}

08005ea8 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>:

void SmartDryer::writeDefaultsDryerProgram(uint8_t WichProgram)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	70fb      	strb	r3, [r7, #3]
	dryerPrograms[WichProgram].programSetted = false;
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	4413      	add	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	440b      	add	r3, r1
 8005ec2:	3344      	adds	r3, #68	; 0x44
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.second = 0;
 8005ec8:	78fa      	ldrb	r2, [r7, #3]
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	4413      	add	r3, r2
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	440b      	add	r3, r1
 8005ed6:	3346      	adds	r3, #70	; 0x46
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.minute = 0;
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	4413      	add	r3, r2
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	440b      	add	r3, r1
 8005eea:	3347      	adds	r3, #71	; 0x47
 8005eec:	2200      	movs	r2, #0
 8005eee:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = 0;
 8005ef0:	78fa      	ldrb	r2, [r7, #3]
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	4413      	add	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	440b      	add	r3, r1
 8005efe:	3348      	adds	r3, #72	; 0x48
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.day = 1;
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	4413      	add	r3, r2
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	440b      	add	r3, r1
 8005f12:	3349      	adds	r3, #73	; 0x49
 8005f14:	2201      	movs	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.month = 1;
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	440b      	add	r3, r1
 8005f26:	334a      	adds	r3, #74	; 0x4a
 8005f28:	2201      	movs	r2, #1
 8005f2a:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.year = 2020;
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	4413      	add	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	440b      	add	r3, r1
 8005f3a:	334c      	adds	r3, #76	; 0x4c
 8005f3c:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8005f40:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.second = 0;
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	440b      	add	r3, r1
 8005f50:	334e      	adds	r3, #78	; 0x4e
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = 10;
 8005f56:	78fa      	ldrb	r2, [r7, #3]
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	4413      	add	r3, r2
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	440b      	add	r3, r1
 8005f64:	334f      	adds	r3, #79	; 0x4f
 8005f66:	220a      	movs	r2, #10
 8005f68:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = 0;
 8005f6a:	78fa      	ldrb	r2, [r7, #3]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4413      	add	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	440b      	add	r3, r1
 8005f78:	3350      	adds	r3, #80	; 0x50
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.day = 1;
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	4413      	add	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	440b      	add	r3, r1
 8005f8c:	3351      	adds	r3, #81	; 0x51
 8005f8e:	2201      	movs	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.month = 1;
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3352      	adds	r3, #82	; 0x52
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.year = 2020;
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	4413      	add	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	440b      	add	r3, r1
 8005fb4:	3354      	adds	r3, #84	; 0x54
 8005fb6:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8005fba:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].tempSetted = 30.0;
 8005fbc:	78fa      	ldrb	r2, [r7, #3]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	440b      	add	r3, r1
 8005fca:	3358      	adds	r3, #88	; 0x58
 8005fcc:	4a03      	ldr	r2, [pc, #12]	; (8005fdc <_ZN10SmartDryer25writeDefaultsDryerProgramEh+0x134>)
 8005fce:	601a      	str	r2, [r3, #0]
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	41f00000 	.word	0x41f00000

08005fe0 <_ZN10SmartDryer16saveDryerProgramEh>:

void SmartDryer::saveDryerProgram(uint8_t WichProgram)
{
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8005fec:	230e      	movs	r3, #14
 8005fee:	73fb      	strb	r3, [r7, #15]
	uint32_t TempToSave = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60bb      	str	r3, [r7, #8]
	TempToSave = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8005ff4:	78fa      	ldrb	r2, [r7, #3]
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	4413      	add	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	440b      	add	r3, r1
 8006002:	3358      	adds	r3, #88	; 0x58
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f7fa ff26 	bl	8000e58 <__aeabi_f2uiz>
 800600c:	4603      	mov	r3, r0
 800600e:	60bb      	str	r3, [r7, #8]
	memory->writeToMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].programSetted, NO_MEM_TRANSFER);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6998      	ldr	r0, [r3, #24]
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	b29b      	uxth	r3, r3
 8006018:	461a      	mov	r2, r3
 800601a:	00d2      	lsls	r2, r2, #3
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	b29b      	uxth	r3, r3
 8006022:	3301      	adds	r3, #1
 8006024:	b29c      	uxth	r4, r3
 8006026:	78fa      	ldrb	r2, [r7, #3]
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	4413      	add	r3, r2
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	440b      	add	r3, r1
 8006034:	3344      	adds	r3, #68	; 0x44
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	2300      	movs	r3, #0
 800603c:	4621      	mov	r1, r4
 800603e:	f7ff f906 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.second, NO_MEM_TRANSFER);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6998      	ldr	r0, [r3, #24]
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	b29b      	uxth	r3, r3
 800604a:	461a      	mov	r2, r3
 800604c:	00d2      	lsls	r2, r2, #3
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	b29b      	uxth	r3, r3
 8006054:	3302      	adds	r3, #2
 8006056:	b29c      	uxth	r4, r3
 8006058:	78fa      	ldrb	r2, [r7, #3]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	4613      	mov	r3, r2
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	4413      	add	r3, r2
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	440b      	add	r3, r1
 8006066:	3346      	adds	r3, #70	; 0x46
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	2300      	movs	r3, #0
 800606e:	4621      	mov	r1, r4
 8006070:	f7ff f8ed 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.minute, NO_MEM_TRANSFER);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6998      	ldr	r0, [r3, #24]
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	b29b      	uxth	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	00d2      	lsls	r2, r2, #3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	b29b      	uxth	r3, r3
 8006086:	3303      	adds	r3, #3
 8006088:	b29c      	uxth	r4, r3
 800608a:	78fa      	ldrb	r2, [r7, #3]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	4413      	add	r3, r2
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	440b      	add	r3, r1
 8006098:	3347      	adds	r3, #71	; 0x47
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	2300      	movs	r3, #0
 80060a0:	4621      	mov	r1, r4
 80060a2:	f7ff f8d4 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.hour, NO_MEM_TRANSFER);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6998      	ldr	r0, [r3, #24]
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	00d2      	lsls	r2, r2, #3
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3304      	adds	r3, #4
 80060ba:	b29c      	uxth	r4, r3
 80060bc:	78fa      	ldrb	r2, [r7, #3]
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	4413      	add	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	440b      	add	r3, r1
 80060ca:	3348      	adds	r3, #72	; 0x48
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	2300      	movs	r3, #0
 80060d2:	4621      	mov	r1, r4
 80060d4:	f7ff f8bb 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.day, NO_MEM_TRANSFER);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6998      	ldr	r0, [r3, #24]
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	00d2      	lsls	r2, r2, #3
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3305      	adds	r3, #5
 80060ec:	b29c      	uxth	r4, r3
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	4413      	add	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	440b      	add	r3, r1
 80060fc:	3349      	adds	r3, #73	; 0x49
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	2300      	movs	r3, #0
 8006104:	4621      	mov	r1, r4
 8006106:	f7ff f8a2 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.month, NO_MEM_TRANSFER);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6998      	ldr	r0, [r3, #24]
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	b29b      	uxth	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	00d2      	lsls	r2, r2, #3
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	b29b      	uxth	r3, r3
 800611c:	3306      	adds	r3, #6
 800611e:	b29c      	uxth	r4, r3
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	4413      	add	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	440b      	add	r3, r1
 800612e:	334a      	adds	r3, #74	; 0x4a
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	2300      	movs	r3, #0
 8006136:	4621      	mov	r1, r4
 8006138:	f7ff f889 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.year, NO_MEM_TRANSFER);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6998      	ldr	r0, [r3, #24]
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	b29b      	uxth	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	00d2      	lsls	r2, r2, #3
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	b29b      	uxth	r3, r3
 800614e:	3307      	adds	r3, #7
 8006150:	b29c      	uxth	r4, r3
 8006152:	78fa      	ldrb	r2, [r7, #3]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	440b      	add	r3, r1
 8006160:	334c      	adds	r3, #76	; 0x4c
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	2300      	movs	r3, #0
 8006168:	4621      	mov	r1, r4
 800616a:	f7ff f870 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.second, NO_MEM_TRANSFER);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6998      	ldr	r0, [r3, #24]
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	b29b      	uxth	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	00d2      	lsls	r2, r2, #3
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	b29b      	uxth	r3, r3
 8006180:	3308      	adds	r3, #8
 8006182:	b29c      	uxth	r4, r3
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	4413      	add	r3, r2
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	440b      	add	r3, r1
 8006192:	334e      	adds	r3, #78	; 0x4e
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	2300      	movs	r3, #0
 800619a:	4621      	mov	r1, r4
 800619c:	f7ff f857 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.minute, NO_MEM_TRANSFER);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6998      	ldr	r0, [r3, #24]
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	00d2      	lsls	r2, r2, #3
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3309      	adds	r3, #9
 80061b4:	b29c      	uxth	r4, r3
 80061b6:	78fa      	ldrb	r2, [r7, #3]
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	4413      	add	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	440b      	add	r3, r1
 80061c4:	334f      	adds	r3, #79	; 0x4f
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	2300      	movs	r3, #0
 80061cc:	4621      	mov	r1, r4
 80061ce:	f7ff f83e 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.hour, NO_MEM_TRANSFER);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6998      	ldr	r0, [r3, #24]
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	461a      	mov	r2, r3
 80061dc:	00d2      	lsls	r2, r2, #3
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	330a      	adds	r3, #10
 80061e6:	b29c      	uxth	r4, r3
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	4413      	add	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	440b      	add	r3, r1
 80061f6:	3350      	adds	r3, #80	; 0x50
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	2300      	movs	r3, #0
 80061fe:	4621      	mov	r1, r4
 8006200:	f7ff f825 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.day, NO_MEM_TRANSFER);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6998      	ldr	r0, [r3, #24]
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	b29b      	uxth	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	00d2      	lsls	r2, r2, #3
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	b29b      	uxth	r3, r3
 8006216:	330b      	adds	r3, #11
 8006218:	b29c      	uxth	r4, r3
 800621a:	78fa      	ldrb	r2, [r7, #3]
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	4613      	mov	r3, r2
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	4413      	add	r3, r2
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	440b      	add	r3, r1
 8006228:	3351      	adds	r3, #81	; 0x51
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	2300      	movs	r3, #0
 8006230:	4621      	mov	r1, r4
 8006232:	f7ff f80c 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.month, NO_MEM_TRANSFER);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6998      	ldr	r0, [r3, #24]
 800623a:	78fb      	ldrb	r3, [r7, #3]
 800623c:	b29b      	uxth	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	00d2      	lsls	r2, r2, #3
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	330c      	adds	r3, #12
 800624a:	b29c      	uxth	r4, r3
 800624c:	78fa      	ldrb	r2, [r7, #3]
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	4613      	mov	r3, r2
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	4413      	add	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	440b      	add	r3, r1
 800625a:	3352      	adds	r3, #82	; 0x52
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	2300      	movs	r3, #0
 8006262:	4621      	mov	r1, r4
 8006264:	f7fe fff3 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.year, NO_MEM_TRANSFER);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6998      	ldr	r0, [r3, #24]
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	b29b      	uxth	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	00d2      	lsls	r2, r2, #3
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	b29b      	uxth	r3, r3
 800627a:	330d      	adds	r3, #13
 800627c:	b29c      	uxth	r4, r3
 800627e:	78fa      	ldrb	r2, [r7, #3]
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	4413      	add	r3, r2
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	440b      	add	r3, r1
 800628c:	3354      	adds	r3, #84	; 0x54
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	4621      	mov	r1, r4
 8006296:	f7fe ffda 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), TempToSave, MEM_TRANSFER);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6998      	ldr	r0, [r3, #24]
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	3301      	adds	r3, #1
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	00d2      	lsls	r2, r2, #3
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	b299      	uxth	r1, r3
 80062ae:	2301      	movs	r3, #1
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	f7fe ffcc 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>

}
 80062b6:	bf00      	nop
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd90      	pop	{r4, r7, pc}

080062be <_ZN10SmartDryer16loadDryerProgramEh>:

void SmartDryer::loadDryerProgram(uint8_t WichProgram)
{
 80062be:	b590      	push	{r4, r7, lr}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 80062ca:	230e      	movs	r3, #14
 80062cc:	73fb      	strb	r3, [r7, #15]
	uint32_t TempSaved = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60bb      	str	r3, [r7, #8]
	memory->loadMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].programSetted);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6998      	ldr	r0, [r3, #24]
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	00d2      	lsls	r2, r2, #3
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3301      	adds	r3, #1
 80062e6:	b299      	uxth	r1, r3
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	4613      	mov	r3, r2
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	4413      	add	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	3340      	adds	r3, #64	; 0x40
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	4413      	add	r3, r2
 80062f8:	3304      	adds	r3, #4
 80062fa:	461a      	mov	r2, r3
 80062fc:	f7fe ffc5 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.second);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6998      	ldr	r0, [r3, #24]
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	b29b      	uxth	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	00d2      	lsls	r2, r2, #3
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	b29b      	uxth	r3, r3
 8006312:	3302      	adds	r3, #2
 8006314:	b299      	uxth	r1, r3
 8006316:	78fa      	ldrb	r2, [r7, #3]
 8006318:	4613      	mov	r3, r2
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	4413      	add	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	3340      	adds	r3, #64	; 0x40
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	4413      	add	r3, r2
 8006326:	3306      	adds	r3, #6
 8006328:	461a      	mov	r2, r3
 800632a:	f7fe ffae 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.minute);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6998      	ldr	r0, [r3, #24]
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	00d2      	lsls	r2, r2, #3
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	b29b      	uxth	r3, r3
 8006340:	3303      	adds	r3, #3
 8006342:	b299      	uxth	r1, r3
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	4613      	mov	r3, r2
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	4413      	add	r3, r2
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	3340      	adds	r3, #64	; 0x40
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	4413      	add	r3, r2
 8006354:	3307      	adds	r3, #7
 8006356:	461a      	mov	r2, r3
 8006358:	f7fe ff97 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.hour);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6998      	ldr	r0, [r3, #24]
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	b29b      	uxth	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	00d2      	lsls	r2, r2, #3
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	b29b      	uxth	r3, r3
 800636e:	3304      	adds	r3, #4
 8006370:	b299      	uxth	r1, r3
 8006372:	78fa      	ldrb	r2, [r7, #3]
 8006374:	4613      	mov	r3, r2
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	4413      	add	r3, r2
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	3340      	adds	r3, #64	; 0x40
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	4413      	add	r3, r2
 8006382:	3308      	adds	r3, #8
 8006384:	461a      	mov	r2, r3
 8006386:	f7fe ff80 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.day);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6998      	ldr	r0, [r3, #24]
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	b29b      	uxth	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	00d2      	lsls	r2, r2, #3
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	b29b      	uxth	r3, r3
 800639c:	3305      	adds	r3, #5
 800639e:	b299      	uxth	r1, r3
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	4613      	mov	r3, r2
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	4413      	add	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	3340      	adds	r3, #64	; 0x40
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	4413      	add	r3, r2
 80063b0:	3309      	adds	r3, #9
 80063b2:	461a      	mov	r2, r3
 80063b4:	f7fe ff69 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.month);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6998      	ldr	r0, [r3, #24]
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	00d2      	lsls	r2, r2, #3
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3306      	adds	r3, #6
 80063cc:	b299      	uxth	r1, r3
 80063ce:	78fa      	ldrb	r2, [r7, #3]
 80063d0:	4613      	mov	r3, r2
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	4413      	add	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	3340      	adds	r3, #64	; 0x40
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	4413      	add	r3, r2
 80063de:	330a      	adds	r3, #10
 80063e0:	461a      	mov	r2, r3
 80063e2:	f7fe ff52 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.year);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6998      	ldr	r0, [r3, #24]
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	00d2      	lsls	r2, r2, #3
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3307      	adds	r3, #7
 80063fa:	b299      	uxth	r1, r3
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	3340      	adds	r3, #64	; 0x40
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	330c      	adds	r3, #12
 800640e:	461a      	mov	r2, r3
 8006410:	f7fe ff3b 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.second);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6998      	ldr	r0, [r3, #24]
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	b29b      	uxth	r3, r3
 800641c:	461a      	mov	r2, r3
 800641e:	00d2      	lsls	r2, r2, #3
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	b29b      	uxth	r3, r3
 8006426:	3308      	adds	r3, #8
 8006428:	b299      	uxth	r1, r3
 800642a:	78fa      	ldrb	r2, [r7, #3]
 800642c:	4613      	mov	r3, r2
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	4413      	add	r3, r2
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	3348      	adds	r3, #72	; 0x48
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	4413      	add	r3, r2
 800643a:	3306      	adds	r3, #6
 800643c:	461a      	mov	r2, r3
 800643e:	f7fe ff24 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.minute);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6998      	ldr	r0, [r3, #24]
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	b29b      	uxth	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	00d2      	lsls	r2, r2, #3
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	b29b      	uxth	r3, r3
 8006454:	3309      	adds	r3, #9
 8006456:	b299      	uxth	r1, r3
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	4613      	mov	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	4413      	add	r3, r2
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	3348      	adds	r3, #72	; 0x48
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	4413      	add	r3, r2
 8006468:	3307      	adds	r3, #7
 800646a:	461a      	mov	r2, r3
 800646c:	f7fe ff0d 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.hour);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6998      	ldr	r0, [r3, #24]
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	b29b      	uxth	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	00d2      	lsls	r2, r2, #3
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	330a      	adds	r3, #10
 8006484:	b299      	uxth	r1, r3
 8006486:	78fa      	ldrb	r2, [r7, #3]
 8006488:	4613      	mov	r3, r2
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	4413      	add	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	3348      	adds	r3, #72	; 0x48
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	4413      	add	r3, r2
 8006496:	3308      	adds	r3, #8
 8006498:	461a      	mov	r2, r3
 800649a:	f7fe fef6 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.day);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6998      	ldr	r0, [r3, #24]
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	00d2      	lsls	r2, r2, #3
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	330b      	adds	r3, #11
 80064b2:	b299      	uxth	r1, r3
 80064b4:	78fa      	ldrb	r2, [r7, #3]
 80064b6:	4613      	mov	r3, r2
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	4413      	add	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	3348      	adds	r3, #72	; 0x48
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	3309      	adds	r3, #9
 80064c6:	461a      	mov	r2, r3
 80064c8:	f7fe fedf 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.month);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6998      	ldr	r0, [r3, #24]
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	00d2      	lsls	r2, r2, #3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	b29b      	uxth	r3, r3
 80064de:	330c      	adds	r3, #12
 80064e0:	b299      	uxth	r1, r3
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	4613      	mov	r3, r2
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	4413      	add	r3, r2
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	3348      	adds	r3, #72	; 0x48
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4413      	add	r3, r2
 80064f2:	330a      	adds	r3, #10
 80064f4:	461a      	mov	r2, r3
 80064f6:	f7fe fec8 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.year);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6998      	ldr	r0, [r3, #24]
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	b29b      	uxth	r3, r3
 8006502:	461a      	mov	r2, r3
 8006504:	00d2      	lsls	r2, r2, #3
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	b29b      	uxth	r3, r3
 800650c:	330d      	adds	r3, #13
 800650e:	b299      	uxth	r1, r3
 8006510:	78fa      	ldrb	r2, [r7, #3]
 8006512:	4613      	mov	r3, r2
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	4413      	add	r3, r2
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	3348      	adds	r3, #72	; 0x48
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4413      	add	r3, r2
 8006520:	330c      	adds	r3, #12
 8006522:	461a      	mov	r2, r3
 8006524:	f7fe feb1 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&TempSaved);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6998      	ldr	r0, [r3, #24]
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	3301      	adds	r3, #1
 8006530:	b29b      	uxth	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	00d2      	lsls	r2, r2, #3
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	b29b      	uxth	r3, r3
 800653c:	f107 0208 	add.w	r2, r7, #8
 8006540:	4619      	mov	r1, r3
 8006542:	f7fe fea2 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
	dryerPrograms[WichProgram].tempSetted = (float)TempSaved;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	78fc      	ldrb	r4, [r7, #3]
 800654a:	4618      	mov	r0, r3
 800654c:	f7fa fadc 	bl	8000b08 <__aeabi_ui2f>
 8006550:	4601      	mov	r1, r0
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4623      	mov	r3, r4
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4423      	add	r3, r4
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4413      	add	r3, r2
 800655e:	3358      	adds	r3, #88	; 0x58
 8006560:	6019      	str	r1, [r3, #0]
}
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	bd90      	pop	{r4, r7, pc}
	...

0800656c <_ZN10SmartDryer7navMenuEv>:


void SmartDryer::navMenu()
{
 800656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006570:	b0a6      	sub	sp, #152	; 0x98
 8006572:	af08      	add	r7, sp, #32
 8006574:	6078      	str	r0, [r7, #4]
	bool ExitNavMenu = false;
 8006576:	2300      	movs	r3, #0
 8006578:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	MENU_STRUCTURE *ActualMenu = mainMenu;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006582:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t MenuSel = MAIN_MENU;
 8006584:	2300      	movs	r3, #0
 8006586:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	showHelpMessageTimer->restart();
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	4618      	mov	r0, r3
 8006590:	f7fc ff01 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	String Time = "", Date = "";
 8006594:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006598:	4618      	mov	r0, r3
 800659a:	f008 fed1 	bl	800f340 <_ZNSaIcEC1Ev>
 800659e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80065a2:	f107 0320 	add.w	r3, r7, #32
 80065a6:	49be      	ldr	r1, [pc, #760]	; (80068a0 <_ZN10SmartDryer7navMenuEv+0x334>)
 80065a8:	4618      	mov	r0, r3
 80065aa:	f009 f961 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80065ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065b2:	4618      	mov	r0, r3
 80065b4:	f008 fec5 	bl	800f342 <_ZNSaIcED1Ev>
 80065b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065bc:	4618      	mov	r0, r3
 80065be:	f008 febf 	bl	800f340 <_ZNSaIcEC1Ev>
 80065c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80065c6:	f107 0308 	add.w	r3, r7, #8
 80065ca:	49b5      	ldr	r1, [pc, #724]	; (80068a0 <_ZN10SmartDryer7navMenuEv+0x334>)
 80065cc:	4618      	mov	r0, r3
 80065ce:	f009 f94f 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80065d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065d6:	4618      	mov	r0, r3
 80065d8:	f008 feb3 	bl	800f342 <_ZNSaIcED1Ev>
	while(!ExitNavMenu)
 80065dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 8293 	bne.w	8006b0c <_ZN10SmartDryer7navMenuEv+0x5a0>
	{
		uint8_t WichKey = DryerKey::NO_KEY;
 80065e6:	2308      	movs	r3, #8
 80065e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		display->clearFrameBuffer();
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe f940 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80065f6:	f107 0208 	add.w	r2, r7, #8
 80065fa:	f107 0320 	add.w	r3, r7, #32
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff fbf6 	bl	8005df2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(ActualMenu->menuTitle, NHDST7565_LCD::CENTER_POS, MENU_TITLE_YPOS, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681c      	ldr	r4, [r3, #0]
 800660a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800660c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006610:	4611      	mov	r1, r2
 8006612:	4618      	mov	r0, r3
 8006614:	f009 f8f9 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006620:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	2307      	movs	r3, #7
 8006628:	2283      	movs	r2, #131	; 0x83
 800662a:	4620      	mov	r0, r4
 800662c:	f7fe f94b 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8006630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006634:	4618      	mov	r0, r3
 8006636:	f008 ffae 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ActualMenu->maxMenuLines = display->drawMenuList(ActualMenu->XPos, ActualMenu->YPos, ActualMenu->topItemPos,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006642:	f893 c01c 	ldrb.w	ip, [r3, #28]
 8006646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006648:	f893 e01d 	ldrb.w	lr, [r3, #29]
 800664c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800664e:	f893 8024 	ldrb.w	r8, [r3, #36]	; 0x24
 8006652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006654:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006658:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800665a:	6992      	ldr	r2, [r2, #24]
 800665c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800665e:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8006662:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006664:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 8006668:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800666a:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 800666e:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8006670:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8006672:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8006674:	6a36      	ldr	r6, [r6, #32]
 8006676:	9606      	str	r6, [sp, #24]
 8006678:	9505      	str	r5, [sp, #20]
 800667a:	9404      	str	r4, [sp, #16]
 800667c:	9003      	str	r0, [sp, #12]
 800667e:	9102      	str	r1, [sp, #8]
 8006680:	9201      	str	r2, [sp, #4]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	4643      	mov	r3, r8
 8006686:	4672      	mov	r2, lr
 8006688:	4661      	mov	r1, ip
 800668a:	6838      	ldr	r0, [r7, #0]
 800668c:	f7fe f95e 	bl	800494c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>
 8006690:	4603      	mov	r3, r0
 8006692:	461a      	mov	r2, r3
 8006694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006696:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
//			{
//				showHelpMessageTimer->restart();
//			}
//		}

		display->sendFrameBuffer();
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe f8f6 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		WichKey = keyboard->checkKey();
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fe fedf 	bl	800546c <_ZN8DryerKey8checkKeyEv>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		switch(WichKey)
 80066b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066b8:	2b07      	cmp	r3, #7
 80066ba:	f200 81c3 	bhi.w	8006a44 <_ZN10SmartDryer7navMenuEv+0x4d8>
 80066be:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <_ZN10SmartDryer7navMenuEv+0x158>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066e5 	.word	0x080066e5
 80066c8:	08006713 	.word	0x08006713
 80066cc:	08006743 	.word	0x08006743
 80066d0:	08006957 	.word	0x08006957
 80066d4:	080066e5 	.word	0x080066e5
 80066d8:	08006713 	.word	0x08006713
 80066dc:	08006a01 	.word	0x08006a01
 80066e0:	08006a45 	.word	0x08006a45
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(ActualMenu->itemSelected > 0)
 80066e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d008      	beq.n	8006700 <_ZN10SmartDryer7navMenuEv+0x194>
					ActualMenu->itemSelected--;
 80066ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
				break;
 80066fe:	e1a4      	b.n	8006a4a <_ZN10SmartDryer7navMenuEv+0x4de>
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
 8006700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006702:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006706:	3b01      	subs	r3, #1
 8006708:	b2da      	uxtb	r2, r3
 800670a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800670c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8006710:	e19b      	b.n	8006a4a <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(ActualMenu->itemSelected < ActualMenu->maxMenuItems - 1)
 8006712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006714:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006718:	461a      	mov	r2, r3
 800671a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800671c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006720:	3b01      	subs	r3, #1
 8006722:	429a      	cmp	r2, r3
 8006724:	da08      	bge.n	8006738 <_ZN10SmartDryer7navMenuEv+0x1cc>
					ActualMenu->itemSelected++;
 8006726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006728:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800672c:	3301      	adds	r3, #1
 800672e:	b2da      	uxtb	r2, r3
 8006730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006732:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = 0;
				break;
 8006736:	e188      	b.n	8006a4a <_ZN10SmartDryer7navMenuEv+0x4de>
					ActualMenu->itemSelected = 0;
 8006738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8006740:	e183      	b.n	8006a4a <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::LEFT_KEY:
				switch(MenuSel)
 8006742:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006746:	2b07      	cmp	r3, #7
 8006748:	f000 80db 	beq.w	8006902 <_ZN10SmartDryer7navMenuEv+0x396>
 800674c:	2b08      	cmp	r3, #8
 800674e:	f000 80e4 	beq.w	800691a <_ZN10SmartDryer7navMenuEv+0x3ae>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d000      	beq.n	8006758 <_ZN10SmartDryer7navMenuEv+0x1ec>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
							ExitNavMenu = true;
						}
						break;
					default:
						break;
 8006756:	e0fd      	b.n	8006954 <_ZN10SmartDryer7navMenuEv+0x3e8>
						switch(ActualMenu->itemSelected + 1)
 8006758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800675a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800675e:	3301      	adds	r3, #1
 8006760:	3b01      	subs	r3, #1
 8006762:	2b08      	cmp	r3, #8
 8006764:	d85c      	bhi.n	8006820 <_ZN10SmartDryer7navMenuEv+0x2b4>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <_ZN10SmartDryer7navMenuEv+0x200>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	08006791 	.word	0x08006791
 8006770:	080067a1 	.word	0x080067a1
 8006774:	080067b1 	.word	0x080067b1
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067d1 	.word	0x080067d1
 8006780:	080067e1 	.word	0x080067e1
 8006784:	080067f1 	.word	0x080067f1
 8006788:	08006801 	.word	0x08006801
 800678c:	08006811 	.word	0x08006811
								MenuSel = THERMO_CTRL;
 8006790:	2301      	movs	r3, #1
 8006792:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = thermoMenuCtrl;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800679c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 800679e:	e040      	b.n	8006822 <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = FAN_CTRL;
 80067a0:	2302      	movs	r3, #2
 80067a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = fanMenuCtrl;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067ac:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 80067ae:	e038      	b.n	8006822 <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = TEMP_CTRL;
 80067b0:	2303      	movs	r3, #3
 80067b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = tempMenuCtrl;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067bc:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 80067be:	e030      	b.n	8006822 <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = START_DRYER_CTRL;
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startDryerMenu;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067cc:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 80067ce:	e028      	b.n	8006822 <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = CHANGE_TIME;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
								ExitNavMenu = true;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 80067de:	e020      	b.n	8006822 <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = CHANGE_DATE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
								ExitNavMenu = true;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 80067ee:	e018      	b.n	8006822 <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = CHANGE_PROGRAMS_LIST;
 80067f0:	2307      	movs	r3, #7
 80067f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = changeProgramsMenu;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80067fc:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 80067fe:	e010      	b.n	8006822 <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = START_PROGRAMS_LIST;
 8006800:	2308      	movs	r3, #8
 8006802:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startProgramsMenu;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800680c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 800680e:	e008      	b.n	8006822 <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = SHOW_INFO;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2203      	movs	r2, #3
 8006814:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
								ExitNavMenu = true;
 8006818:	2301      	movs	r3, #1
 800681a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 800681e:	e000      	b.n	8006822 <_ZN10SmartDryer7navMenuEv+0x2b6>
								break;
 8006820:	bf00      	nop
						if(ActualMenu->withChebox)
 8006822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8090 	beq.w	800694e <_ZN10SmartDryer7navMenuEv+0x3e2>
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 800682e:	2300      	movs	r3, #0
 8006830:	66bb      	str	r3, [r7, #104]	; 0x68
 8006832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006834:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006838:	461a      	mov	r2, r3
 800683a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800683c:	4293      	cmp	r3, r2
 800683e:	da09      	bge.n	8006854 <_ZN10SmartDryer7navMenuEv+0x2e8>
								ActualMenu->itemsChecked[i] = false;
 8006840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006846:	4413      	add	r3, r2
 8006848:	2200      	movs	r2, #0
 800684a:	701a      	strb	r2, [r3, #0]
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 800684c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800684e:	3301      	adds	r3, #1
 8006850:	66bb      	str	r3, [r7, #104]	; 0x68
 8006852:	e7ee      	b.n	8006832 <_ZN10SmartDryer7navMenuEv+0x2c6>
							switch(ActualMenu->paramType)
 8006854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800685a:	2b01      	cmp	r3, #1
 800685c:	d002      	beq.n	8006864 <_ZN10SmartDryer7navMenuEv+0x2f8>
 800685e:	2b04      	cmp	r3, #4
 8006860:	d019      	beq.n	8006896 <_ZN10SmartDryer7navMenuEv+0x32a>
									break;
 8006862:	e04d      	b.n	8006900 <_ZN10SmartDryer7navMenuEv+0x394>
									if(*(bool *)ActualMenu->paramAssociated)
 8006864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d009      	beq.n	8006882 <_ZN10SmartDryer7navMenuEv+0x316>
										ActualMenu->itemsChecked[0] = false;
 800686e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	2200      	movs	r2, #0
 8006874:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = true;
 8006876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	3301      	adds	r3, #1
 800687c:	2201      	movs	r2, #1
 800687e:	701a      	strb	r2, [r3, #0]
									break;
 8006880:	e03e      	b.n	8006900 <_ZN10SmartDryer7navMenuEv+0x394>
										ActualMenu->itemsChecked[0] = true;
 8006882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	2201      	movs	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = false;
 800688a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	3301      	adds	r3, #1
 8006890:	2200      	movs	r2, #0
 8006892:	701a      	strb	r2, [r3, #0]
									break;
 8006894:	e034      	b.n	8006900 <_ZN10SmartDryer7navMenuEv+0x394>
									switch(MenuSel)
 8006896:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800689a:	2b03      	cmp	r3, #3
 800689c:	d002      	beq.n	80068a4 <_ZN10SmartDryer7navMenuEv+0x338>
											break;
 800689e:	e02e      	b.n	80068fe <_ZN10SmartDryer7navMenuEv+0x392>
 80068a0:	08010574 	.word	0x08010574
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 80068a4:	2300      	movs	r3, #0
 80068a6:	667b      	str	r3, [r7, #100]	; 0x64
 80068a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068aa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80068ae:	461a      	mov	r2, r3
 80068b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068b2:	4293      	cmp	r3, r2
 80068b4:	da22      	bge.n	80068fc <_ZN10SmartDryer7navMenuEv+0x390>
												uint32_t TempSetted = (uint32_t)*(float *)ActualMenu->paramAssociated;
 80068b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fa facb 	bl	8000e58 <__aeabi_f2uiz>
 80068c2:	4603      	mov	r3, r0
 80068c4:	65bb      	str	r3, [r7, #88]	; 0x58
												if(TempSetted == (uint32_t)paramTemperatures[i])
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80068cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ce:	4413      	add	r3, r2
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d106      	bne.n	80068e8 <_ZN10SmartDryer7navMenuEv+0x37c>
													ActualMenu->itemsChecked[i] = true;
 80068da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068e0:	4413      	add	r3, r2
 80068e2:	2201      	movs	r2, #1
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	e005      	b.n	80068f4 <_ZN10SmartDryer7navMenuEv+0x388>
													ActualMenu->itemsChecked[i] = false;
 80068e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ee:	4413      	add	r3, r2
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 80068f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f6:	3301      	adds	r3, #1
 80068f8:	667b      	str	r3, [r7, #100]	; 0x64
 80068fa:	e7d5      	b.n	80068a8 <_ZN10SmartDryer7navMenuEv+0x33c>
											break;
 80068fc:	bf00      	nop
									break;
 80068fe:	bf00      	nop
						break; // case MAIN_MENU
 8006900:	e025      	b.n	800694e <_ZN10SmartDryer7navMenuEv+0x3e2>
						screen = ActualMenu->itemSelected + CHANGE_PROGRAM_1;
 8006902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006904:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006908:	3304      	adds	r3, #4
 800690a:	b2da      	uxtb	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
						ExitNavMenu = true;
 8006912:	2301      	movs	r3, #1
 8006914:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8006918:	e01c      	b.n	8006954 <_ZN10SmartDryer7navMenuEv+0x3e8>
						if(dryerPrograms[ ActualMenu->itemSelected].programSetted)
 800691a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800691c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006920:	4619      	mov	r1, r3
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	440b      	add	r3, r1
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	4413      	add	r3, r2
 800692e:	3344      	adds	r3, #68	; 0x44
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00d      	beq.n	8006952 <_ZN10SmartDryer7navMenuEv+0x3e6>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
 8006936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006938:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800693c:	3307      	adds	r3, #7
 800693e:	b2da      	uxtb	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
							ExitNavMenu = true;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 800694c:	e001      	b.n	8006952 <_ZN10SmartDryer7navMenuEv+0x3e6>
						break; // case MAIN_MENU
 800694e:	bf00      	nop
 8006950:	e07b      	b.n	8006a4a <_ZN10SmartDryer7navMenuEv+0x4de>
						break;
 8006952:	bf00      	nop
				}
			break;// case LEFT_KEY
 8006954:	e079      	b.n	8006a4a <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::OK_KEY:
				if(ActualMenu->withChebox)
 8006956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800695c:	2b00      	cmp	r3, #0
 800695e:	d073      	beq.n	8006a48 <_ZN10SmartDryer7navMenuEv+0x4dc>
				{
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006960:	2300      	movs	r3, #0
 8006962:	663b      	str	r3, [r7, #96]	; 0x60
 8006964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006966:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800696a:	461a      	mov	r2, r3
 800696c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800696e:	4293      	cmp	r3, r2
 8006970:	da09      	bge.n	8006986 <_ZN10SmartDryer7navMenuEv+0x41a>
						ActualMenu->itemsChecked[i] = false;
 8006972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006978:	4413      	add	r3, r2
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 800697e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006980:	3301      	adds	r3, #1
 8006982:	663b      	str	r3, [r7, #96]	; 0x60
 8006984:	e7ee      	b.n	8006964 <_ZN10SmartDryer7navMenuEv+0x3f8>
					ActualMenu->itemsChecked[ActualMenu->itemSelected] = true;
 8006986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800698c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006990:	4413      	add	r3, r2
 8006992:	2201      	movs	r2, #1
 8006994:	701a      	strb	r2, [r3, #0]
					switch(ActualMenu->paramType)
 8006996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006998:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800699c:	2b01      	cmp	r3, #1
 800699e:	d002      	beq.n	80069a6 <_ZN10SmartDryer7navMenuEv+0x43a>
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d00f      	beq.n	80069c4 <_ZN10SmartDryer7navMenuEv+0x458>
								default:
									break;
							}
							break;
						default:
							break;
 80069a4:	e024      	b.n	80069f0 <_ZN10SmartDryer7navMenuEv+0x484>
							if(ActualMenu->itemSelected == 0)
 80069a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <_ZN10SmartDryer7navMenuEv+0x44e>
								*(bool *)ActualMenu->paramAssociated = false;
 80069b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	2200      	movs	r2, #0
 80069b6:	701a      	strb	r2, [r3, #0]
							break;
 80069b8:	e01a      	b.n	80069f0 <_ZN10SmartDryer7navMenuEv+0x484>
								*(bool *)ActualMenu->paramAssociated = true;
 80069ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	2201      	movs	r2, #1
 80069c0:	701a      	strb	r2, [r3, #0]
							break;
 80069c2:	e015      	b.n	80069f0 <_ZN10SmartDryer7navMenuEv+0x484>
							switch(MenuSel)
 80069c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d000      	beq.n	80069ce <_ZN10SmartDryer7navMenuEv+0x462>
									break;
 80069cc:	e00f      	b.n	80069ee <_ZN10SmartDryer7navMenuEv+0x482>
									*(float *)ActualMenu->paramAssociated = (float)paramTemperatures[ActualMenu->itemSelected];
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80069d6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80069da:	4413      	add	r3, r2
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069e0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80069e2:	4610      	mov	r0, r2
 80069e4:	f7fa f890 	bl	8000b08 <__aeabi_ui2f>
 80069e8:	4603      	mov	r3, r0
 80069ea:	6023      	str	r3, [r4, #0]
									break;
 80069ec:	bf00      	nop
							break;
 80069ee:	bf00      	nop
					}
					MenuSel = MAIN_MENU;
 80069f0:	2300      	movs	r3, #0
 80069f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					ActualMenu = mainMenu;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069fc:	673b      	str	r3, [r7, #112]	; 0x70
				}
				break;
 80069fe:	e023      	b.n	8006a48 <_ZN10SmartDryer7navMenuEv+0x4dc>
			case DryerKey::LONG_LEFT_KEY:
				switch(MenuSel)
 8006a00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006a04:	3b01      	subs	r3, #1
 8006a06:	2b07      	cmp	r3, #7
 8006a08:	d81a      	bhi.n	8006a40 <_ZN10SmartDryer7navMenuEv+0x4d4>
 8006a0a:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <_ZN10SmartDryer7navMenuEv+0x4a4>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a31 	.word	0x08006a31
 8006a14:	08006a31 	.word	0x08006a31
 8006a18:	08006a31 	.word	0x08006a31
 8006a1c:	08006a31 	.word	0x08006a31
 8006a20:	08006a41 	.word	0x08006a41
 8006a24:	08006a41 	.word	0x08006a41
 8006a28:	08006a31 	.word	0x08006a31
 8006a2c:	08006a31 	.word	0x08006a31
					case FAN_CTRL:
					case TEMP_CTRL:
					case START_DRYER_CTRL:
					case CHANGE_PROGRAMS_LIST:
					case START_PROGRAMS_LIST:
						MenuSel = MAIN_MENU;
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						ActualMenu = mainMenu;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a3c:	673b      	str	r3, [r7, #112]	; 0x70
						break;
 8006a3e:	e000      	b.n	8006a42 <_ZN10SmartDryer7navMenuEv+0x4d6>
					default:
						break;
 8006a40:	bf00      	nop
				}
				break;
 8006a42:	e002      	b.n	8006a4a <_ZN10SmartDryer7navMenuEv+0x4de>
			case DryerKey::LONG_OK_KEY:
				break;
			default:
				break;
 8006a44:	bf00      	nop
 8006a46:	e000      	b.n	8006a4a <_ZN10SmartDryer7navMenuEv+0x4de>
				break;
 8006a48:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 8006a4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a4e:	2b08      	cmp	r3, #8
 8006a50:	d04d      	beq.n	8006aee <_ZN10SmartDryer7navMenuEv+0x582>
 8006a52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d049      	beq.n	8006aee <_ZN10SmartDryer7navMenuEv+0x582>
		{
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a60:	461a      	mov	r2, r3
 8006a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a64:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006a68:	3b02      	subs	r3, #2
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	dd3a      	ble.n	8006ae4 <_ZN10SmartDryer7navMenuEv+0x578>
			{
				if(ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2) < ActualMenu->maxMenuItems - 1)
 8006a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a74:	461a      	mov	r2, r3
 8006a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a78:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006a7c:	3b02      	subs	r3, #2
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a82:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006a86:	3b01      	subs	r3, #1
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	da0d      	bge.n	8006aa8 <_ZN10SmartDryer7navMenuEv+0x53c>
					ActualMenu->topItemPos = ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2);
 8006a8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a8e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8006a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a94:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006aa6:	e003      	b.n	8006ab0 <_ZN10SmartDryer7navMenuEv+0x544>
				else
					ActualMenu->topItemPos = 0;
 8006aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if(ActualMenu->itemSelected >= ActualMenu->maxMenuItems - ActualMenu->maxMenuLines)
 8006ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ab2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ac2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006ac6:	1acb      	subs	r3, r1, r3
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	db1a      	blt.n	8006b02 <_ZN10SmartDryer7navMenuEv+0x596>
				{
					ActualMenu->topItemPos = ActualMenu->maxMenuItems - ActualMenu->maxMenuLines;
 8006acc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ace:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8006ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ad4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006ae2:	e00e      	b.n	8006b02 <_ZN10SmartDryer7navMenuEv+0x596>
				}
			}
			else
				ActualMenu->topItemPos = 0;
 8006ae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006aec:	e009      	b.n	8006b02 <_ZN10SmartDryer7navMenuEv+0x596>

		}
		else if(WichKey != DryerKey::NO_KEY)
 8006aee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d006      	beq.n	8006b04 <_ZN10SmartDryer7navMenuEv+0x598>
		{
			showHelpMessageTimer->restart();
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fc fc4b 	bl	8003396 <_ZN11ChronoTimer7restartEv>
 8006b00:	e000      	b.n	8006b04 <_ZN10SmartDryer7navMenuEv+0x598>
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006b02:	bf00      	nop
		}
		peripheralsControl();
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff f95f 	bl	8005dc8 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitNavMenu)
 8006b0a:	e567      	b.n	80065dc <_ZN10SmartDryer7navMenuEv+0x70>
	String Time = "", Date = "";
 8006b0c:	f107 0308 	add.w	r3, r7, #8
 8006b10:	4618      	mov	r0, r3
 8006b12:	f008 fd40 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b16:	f107 0320 	add.w	r3, r7, #32
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f008 fd3b 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}

}
 8006b20:	bf00      	nop
 8006b22:	3778      	adds	r7, #120	; 0x78
 8006b24:	46bd      	mov	sp, r7
 8006b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2a:	bf00      	nop

08006b2c <_ZN10SmartDryer4testEv>:



void SmartDryer::test()
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]

}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr
	...

08006b40 <_ZN10SmartDryer5setupEv>:

void SmartDryer::setup()
{
 8006b40:	b590      	push	{r4, r7, lr}
 8006b42:	b0d1      	sub	sp, #324	; 0x144
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	6018      	str	r0, [r3, #0]
	uint32_t FirstBootVal = 0;
 8006b4a:	f107 0308 	add.w	r3, r7, #8
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
	display->setupLcd();
 8006b52:	1d3b      	adds	r3, r7, #4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fd fdb7 	bl	80046cc <_ZN13NHDST7565_LCD8setupLcdEv>
	clock->setup();
 8006b5e:	1d3b      	adds	r3, r7, #4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fc fcc7 	bl	80034f8 <_ZN10DS1307_RTC5setupEv>
	rtcRunning = clock->isRunning();
 8006b6a:	1d3b      	adds	r3, r7, #4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fc fcdb 	bl	800352c <_ZN10DS1307_RTC9isRunningEv>
 8006b76:	4603      	mov	r3, r0
 8006b78:	461a      	mov	r2, r3
 8006b7a:	1d3b      	adds	r3, r7, #4
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	const uint8_t NTemps =  sizeof(Temps)/sizeof(Temps[0]);
 8006b82:	230d      	movs	r3, #13
 8006b84:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	paramTemperatures = new uint8_t[NTemps];
 8006b88:	200d      	movs	r0, #13
 8006b8a:	f008 fbbb 	bl	800f304 <_Znaj>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	461a      	mov	r2, r3
 8006b92:	1d3b      	adds	r3, r7, #4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	for(int i = 0; i < NTemps; i++)
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006ba0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	dc16      	bgt.n	8006bd6 <_ZN10SmartDryer5setupEv+0x96>
	{
		paramTemperatures[i] = 30 + (i * 5);
 8006ba8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	0092      	lsls	r2, r2, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	1d3b      	adds	r3, r7, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006bbe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006bc2:	440b      	add	r3, r1
 8006bc4:	321e      	adds	r2, #30
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NTemps; i++)
 8006bca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006bce:	3301      	adds	r3, #1
 8006bd0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006bd4:	e7e4      	b.n	8006ba0 <_ZN10SmartDryer5setupEv+0x60>
	}

	physicalReleCtrl();
 8006bd6:	1d3b      	adds	r3, r7, #4
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	f7ff f8b7 	bl	8005d4c <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	f7fe ff37 	bl	8005a54 <_ZN10SmartDryer10ledControlEv>


	mainMenuHelpMsgs.push_back("Accende o spegne la resistenza");
 8006be6:	1d3b      	adds	r3, r7, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f008 fba4 	bl	800f340 <_ZNSaIcEC1Ev>
 8006bf8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006bfc:	f107 030c 	add.w	r3, r7, #12
 8006c00:	49ae      	ldr	r1, [pc, #696]	; (8006ebc <_ZN10SmartDryer5setupEv+0x37c>)
 8006c02:	4618      	mov	r0, r3
 8006c04:	f008 fe34 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006c08:	f107 030c 	add.w	r3, r7, #12
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f002 fb8f 	bl	8009332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006c14:	f107 030c 	add.w	r3, r7, #12
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f008 fcbc 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c22:	4618      	mov	r0, r3
 8006c24:	f008 fb8d 	bl	800f342 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Accende o spegne la ventola");
 8006c28:	1d3b      	adds	r3, r7, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006c30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c34:	4618      	mov	r0, r3
 8006c36:	f008 fb83 	bl	800f340 <_ZNSaIcEC1Ev>
 8006c3a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c42:	499f      	ldr	r1, [pc, #636]	; (8006ec0 <_ZN10SmartDryer5setupEv+0x380>)
 8006c44:	4618      	mov	r0, r3
 8006c46:	f008 fe13 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4620      	mov	r0, r4
 8006c52:	f002 fb6e 	bl	8009332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f008 fc9b 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c64:	4618      	mov	r0, r3
 8006c66:	f008 fb6c 	bl	800f342 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta la temperatura di servizio");
 8006c6a:	1d3b      	adds	r3, r7, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006c72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006c76:	4618      	mov	r0, r3
 8006c78:	f008 fb62 	bl	800f340 <_ZNSaIcEC1Ev>
 8006c7c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006c80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c84:	498f      	ldr	r1, [pc, #572]	; (8006ec4 <_ZN10SmartDryer5setupEv+0x384>)
 8006c86:	4618      	mov	r0, r3
 8006c88:	f008 fdf2 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006c8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c90:	4619      	mov	r1, r3
 8006c92:	4620      	mov	r0, r4
 8006c94:	f002 fb4d 	bl	8009332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006c98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f008 fc7a 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ca2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f008 fb4b 	bl	800f342 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Avvia il dryer manualmente");
 8006cac:	1d3b      	adds	r3, r7, #4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006cb4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f008 fb41 	bl	800f340 <_ZNSaIcEC1Ev>
 8006cbe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8006cc2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006cc6:	4980      	ldr	r1, [pc, #512]	; (8006ec8 <_ZN10SmartDryer5setupEv+0x388>)
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f008 fdd1 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006cce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f002 fb2c 	bl	8009332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006cda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f008 fc59 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ce4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f008 fb2a 	bl	800f342 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica l'ora di sistema");
 8006cee:	1d3b      	adds	r3, r7, #4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006cf6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f008 fb20 	bl	800f340 <_ZNSaIcEC1Ev>
 8006d00:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8006d04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d08:	4970      	ldr	r1, [pc, #448]	; (8006ecc <_ZN10SmartDryer5setupEv+0x38c>)
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f008 fdb0 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006d10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d14:	4619      	mov	r1, r3
 8006d16:	4620      	mov	r0, r4
 8006d18:	f002 fb0b 	bl	8009332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006d1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d20:	4618      	mov	r0, r3
 8006d22:	f008 fc38 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006d26:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f008 fb09 	bl	800f342 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica la data di sistema");
 8006d30:	1d3b      	adds	r3, r7, #4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006d38:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f008 faff 	bl	800f340 <_ZNSaIcEC1Ev>
 8006d42:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006d46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d4a:	4961      	ldr	r1, [pc, #388]	; (8006ed0 <_ZN10SmartDryer5setupEv+0x390>)
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f008 fd8f 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006d52:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d56:	4619      	mov	r1, r3
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f002 faea 	bl	8009332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006d5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d62:	4618      	mov	r0, r3
 8006d64:	f008 fc17 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006d68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f008 fae8 	bl	800f342 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta i programmi");
 8006d72:	1d3b      	adds	r3, r7, #4
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006d7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f008 fade 	bl	800f340 <_ZNSaIcEC1Ev>
 8006d84:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8006d88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006d8c:	4951      	ldr	r1, [pc, #324]	; (8006ed4 <_ZN10SmartDryer5setupEv+0x394>)
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f008 fd6e 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006d94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f002 fac9 	bl	8009332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006da0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006da4:	4618      	mov	r0, r3
 8006da6:	f008 fbf6 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006daa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006dae:	4618      	mov	r0, r3
 8006db0:	f008 fac7 	bl	800f342 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Seleziona il programma da avviare");
 8006db4:	1d3b      	adds	r3, r7, #4
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006dbc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f008 fabd 	bl	800f340 <_ZNSaIcEC1Ev>
 8006dc6:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8006dca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006dce:	4942      	ldr	r1, [pc, #264]	; (8006ed8 <_ZN10SmartDryer5setupEv+0x398>)
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f008 fd4d 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006dd6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f002 faa8 	bl	8009332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006de2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006de6:	4618      	mov	r0, r3
 8006de8:	f008 fbd5 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006dec:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006df0:	4618      	mov	r0, r3
 8006df2:	f008 faa6 	bl	800f342 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Mostra info sistema");
 8006df6:	1d3b      	adds	r3, r7, #4
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006dfe:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006e02:	4618      	mov	r0, r3
 8006e04:	f008 fa9c 	bl	800f340 <_ZNSaIcEC1Ev>
 8006e08:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8006e0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006e10:	4932      	ldr	r1, [pc, #200]	; (8006edc <_ZN10SmartDryer5setupEv+0x39c>)
 8006e12:	4618      	mov	r0, r3
 8006e14:	f008 fd2c 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006e18:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f002 fa87 	bl	8009332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006e24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f008 fbb4 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006e2e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006e32:	4618      	mov	r0, r3
 8006e34:	f008 fa85 	bl	800f342 <_ZNSaIcED1Ev>
	if(mainMenuHelpMsgs.size() < MAX_MENU_ITEMS)
 8006e38:	1d3b      	adds	r3, r7, #4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3398      	adds	r3, #152	; 0x98
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f002 fa88 	bl	8009354 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	bf94      	ite	ls
 8006e4a:	2301      	movls	r3, #1
 8006e4c:	2300      	movhi	r3, #0
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d047      	beq.n	8006ee4 <_ZN10SmartDryer5setupEv+0x3a4>
	{
		mainMenuHelpMsgs.clear();
 8006e54:	1d3b      	adds	r3, r7, #4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3398      	adds	r3, #152	; 0x98
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f002 fa90 	bl	8009380 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 8006e60:	2300      	movs	r3, #0
 8006e62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006e66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006e6a:	2b09      	cmp	r3, #9
 8006e6c:	dc3a      	bgt.n	8006ee4 <_ZN10SmartDryer5setupEv+0x3a4>
		{
			mainMenuHelpMsgs.push_back("");
 8006e6e:	1d3b      	adds	r3, r7, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8006e76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f008 fa60 	bl	800f340 <_ZNSaIcEC1Ev>
 8006e80:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e88:	4915      	ldr	r1, [pc, #84]	; (8006ee0 <_ZN10SmartDryer5setupEv+0x3a0>)
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f008 fcf0 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e94:	4619      	mov	r1, r3
 8006e96:	4620      	mov	r0, r4
 8006e98:	f002 fa4b 	bl	8009332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f008 fb78 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ea6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f008 fa49 	bl	800f342 <_ZNSaIcED1Ev>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 8006eb0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006eba:	e7d4      	b.n	8006e66 <_ZN10SmartDryer5setupEv+0x326>
 8006ebc:	08010578 	.word	0x08010578
 8006ec0:	08010598 	.word	0x08010598
 8006ec4:	080105b4 	.word	0x080105b4
 8006ec8:	080105d8 	.word	0x080105d8
 8006ecc:	080105f4 	.word	0x080105f4
 8006ed0:	08010610 	.word	0x08010610
 8006ed4:	0801062c 	.word	0x0801062c
 8006ed8:	08010640 	.word	0x08010640
 8006edc:	08010664 	.word	0x08010664
 8006ee0:	08010574 	.word	0x08010574
		}
	}


	mainMenu->menuTitle = "Menu principale";
 8006ee4:	1d3b      	adds	r3, r7, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006eec:	49cc      	ldr	r1, [pc, #816]	; (8007220 <_ZN10SmartDryer5setupEv+0x6e0>)
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f008 fc0b 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	mainMenu->menuVoices = mainMenuVoices;
 8006ef4:	1d3b      	adds	r3, r7, #4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006efc:	4ac9      	ldr	r2, [pc, #804]	; (8007224 <_ZN10SmartDryer5setupEv+0x6e4>)
 8006efe:	619a      	str	r2, [r3, #24]
	mainMenu->XPos = MENU_LEFT_LIST_XPOS;
 8006f00:	1d3b      	adds	r3, r7, #4
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f08:	2205      	movs	r2, #5
 8006f0a:	771a      	strb	r2, [r3, #28]
	mainMenu->YPos = MENU_LIST_YPOS;
 8006f0c:	1d3b      	adds	r3, r7, #4
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f14:	2214      	movs	r2, #20
 8006f16:	775a      	strb	r2, [r3, #29]
	mainMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8006f18:	1d3b      	adds	r3, r7, #4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	1d3b      	adds	r3, r7, #4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f26:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8006f2a:	621a      	str	r2, [r3, #32]
	mainMenu->topItemPos = 0;
 8006f2c:	1d3b      	adds	r3, r7, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainMenu->itemSelected = 0;
 8006f3a:	1d3b      	adds	r3, r7, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	mainMenu->maxMenuLines = 0;
 8006f48:	1d3b      	adds	r3, r7, #4
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	mainMenu->maxMenuItems = sizeof(mainMenuVoices)/sizeof(mainMenuVoices[0]);
 8006f56:	1d3b      	adds	r3, r7, #4
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f5e:	2209      	movs	r2, #9
 8006f60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	mainMenu->withChebox = false;
 8006f64:	1d3b      	adds	r3, r7, #4
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	mainMenu->itemsChecked = NULL;
 8006f72:	1d3b      	adds	r3, r7, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu->paramAssociated = NULL;
 8006f7e:	1d3b      	adds	r3, r7, #4
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f86:	2200      	movs	r2, #0
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
	mainMenu->paramType = NO_TYPE;
 8006f8a:	1d3b      	adds	r3, r7, #4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mainMenu->menuSelected = true;
 8006f98:	1d3b      	adds	r3, r7, #4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	thermoMenuCtrl->menuTitle = "Ctrl. thermo";
 8006fa6:	1d3b      	adds	r3, r7, #4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fae:	499e      	ldr	r1, [pc, #632]	; (8007228 <_ZN10SmartDryer5setupEv+0x6e8>)
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f008 fbaa 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	thermoMenuCtrl->menuVoices = OnOff;
 8006fb6:	1d3b      	adds	r3, r7, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fbe:	4a9b      	ldr	r2, [pc, #620]	; (800722c <_ZN10SmartDryer5setupEv+0x6ec>)
 8006fc0:	619a      	str	r2, [r3, #24]
	thermoMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8006fc2:	1d3b      	adds	r3, r7, #4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fca:	223c      	movs	r2, #60	; 0x3c
 8006fcc:	771a      	strb	r2, [r3, #28]
	thermoMenuCtrl->YPos = MENU_LIST_YPOS;
 8006fce:	1d3b      	adds	r3, r7, #4
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fd6:	2214      	movs	r2, #20
 8006fd8:	775a      	strb	r2, [r3, #29]
	thermoMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8006fda:	1d3b      	adds	r3, r7, #4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	1d3b      	adds	r3, r7, #4
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fe8:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8006fec:	621a      	str	r2, [r3, #32]
	thermoMenuCtrl->topItemPos = 0;
 8006fee:	1d3b      	adds	r3, r7, #4
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	thermoMenuCtrl->itemSelected = 0;
 8006ffc:	1d3b      	adds	r3, r7, #4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	thermoMenuCtrl->maxMenuLines = 0;
 800700a:	1d3b      	adds	r3, r7, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	thermoMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8007018:	1d3b      	adds	r3, r7, #4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007020:	2202      	movs	r2, #2
 8007022:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	thermoMenuCtrl->withChebox = true;
 8007026:	1d3b      	adds	r3, r7, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	thermoMenuCtrl->itemsChecked = new bool(thermoMenuCtrl->maxMenuItems);
 8007034:	2001      	movs	r0, #1
 8007036:	f008 f967 	bl	800f308 <_Znwj>
 800703a:	4603      	mov	r3, r0
 800703c:	1d3a      	adds	r2, r7, #4
 800703e:	6812      	ldr	r2, [r2, #0]
 8007040:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8007044:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007048:	2a00      	cmp	r2, #0
 800704a:	bf14      	ite	ne
 800704c:	2201      	movne	r2, #1
 800704e:	2200      	moveq	r2, #0
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	1d3a      	adds	r2, r7, #4
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 800705c:	62d3      	str	r3, [r2, #44]	; 0x2c
	thermoMenuCtrl->paramAssociated = (bool *)&statusParam->thermoOn;
 800705e:	1d3b      	adds	r3, r7, #4
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007064:	1d3b      	adds	r3, r7, #4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800706c:	3201      	adds	r2, #1
 800706e:	631a      	str	r2, [r3, #48]	; 0x30
	thermoMenuCtrl->paramType = PARAM_BOOL_TYPE;
 8007070:	1d3b      	adds	r3, r7, #4
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	thermoMenuCtrl->menuSelected = true;
 800707e:	1d3b      	adds	r3, r7, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	fanMenuCtrl->menuTitle = "Ctrl. ventola";
 800708c:	1d3b      	adds	r3, r7, #4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007094:	4966      	ldr	r1, [pc, #408]	; (8007230 <_ZN10SmartDryer5setupEv+0x6f0>)
 8007096:	4618      	mov	r0, r3
 8007098:	f008 fb37 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	fanMenuCtrl->menuVoices = OnOff;
 800709c:	1d3b      	adds	r3, r7, #4
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070a4:	4a61      	ldr	r2, [pc, #388]	; (800722c <_ZN10SmartDryer5setupEv+0x6ec>)
 80070a6:	619a      	str	r2, [r3, #24]
	fanMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 80070a8:	1d3b      	adds	r3, r7, #4
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070b0:	223c      	movs	r2, #60	; 0x3c
 80070b2:	771a      	strb	r2, [r3, #28]
	fanMenuCtrl->YPos = MENU_LIST_YPOS;
 80070b4:	1d3b      	adds	r3, r7, #4
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070bc:	2214      	movs	r2, #20
 80070be:	775a      	strb	r2, [r3, #29]
	fanMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80070c0:	1d3b      	adds	r3, r7, #4
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	1d3b      	adds	r3, r7, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070ce:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80070d2:	621a      	str	r2, [r3, #32]
	fanMenuCtrl->topItemPos = 0;
 80070d4:	1d3b      	adds	r3, r7, #4
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	fanMenuCtrl->itemSelected = 0;
 80070e2:	1d3b      	adds	r3, r7, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	fanMenuCtrl->maxMenuLines = 0;
 80070f0:	1d3b      	adds	r3, r7, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	fanMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 80070fe:	1d3b      	adds	r3, r7, #4
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007106:	2202      	movs	r2, #2
 8007108:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	fanMenuCtrl->withChebox = true;
 800710c:	1d3b      	adds	r3, r7, #4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	fanMenuCtrl->itemsChecked = new bool(fanMenuCtrl->maxMenuItems);
 800711a:	2001      	movs	r0, #1
 800711c:	f008 f8f4 	bl	800f308 <_Znwj>
 8007120:	4603      	mov	r3, r0
 8007122:	1d3a      	adds	r2, r7, #4
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800712a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800712e:	2a00      	cmp	r2, #0
 8007130:	bf14      	ite	ne
 8007132:	2201      	movne	r2, #1
 8007134:	2200      	moveq	r2, #0
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	1d3a      	adds	r2, r7, #4
 800713c:	6812      	ldr	r2, [r2, #0]
 800713e:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8007142:	62d3      	str	r3, [r2, #44]	; 0x2c
	fanMenuCtrl->paramAssociated = (bool *)&statusParam->fanOn;
 8007144:	1d3b      	adds	r3, r7, #4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800714a:	1d3b      	adds	r3, r7, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007152:	3202      	adds	r2, #2
 8007154:	631a      	str	r2, [r3, #48]	; 0x30
	fanMenuCtrl->paramType = PARAM_BOOL_TYPE;
 8007156:	1d3b      	adds	r3, r7, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fanMenuCtrl->menuSelected = true;
 8007164:	1d3b      	adds	r3, r7, #4
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startDryerMenu->menuTitle = "Avvia dryer";
 8007172:	1d3b      	adds	r3, r7, #4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800717a:	492e      	ldr	r1, [pc, #184]	; (8007234 <_ZN10SmartDryer5setupEv+0x6f4>)
 800717c:	4618      	mov	r0, r3
 800717e:	f008 fac4 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startDryerMenu->menuVoices = OnOff;
 8007182:	1d3b      	adds	r3, r7, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800718a:	4a28      	ldr	r2, [pc, #160]	; (800722c <_ZN10SmartDryer5setupEv+0x6ec>)
 800718c:	619a      	str	r2, [r3, #24]
	startDryerMenu->XPos = MENU_RIGHT_LIST_XPOS;
 800718e:	1d3b      	adds	r3, r7, #4
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007196:	223c      	movs	r2, #60	; 0x3c
 8007198:	771a      	strb	r2, [r3, #28]
	startDryerMenu->YPos = MENU_LIST_YPOS;
 800719a:	1d3b      	adds	r3, r7, #4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071a2:	2214      	movs	r2, #20
 80071a4:	775a      	strb	r2, [r3, #29]
	startDryerMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80071a6:	1d3b      	adds	r3, r7, #4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	1d3b      	adds	r3, r7, #4
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071b4:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80071b8:	621a      	str	r2, [r3, #32]
	startDryerMenu->topItemPos = 0;
 80071ba:	1d3b      	adds	r3, r7, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startDryerMenu->itemSelected = 0;
 80071c8:	1d3b      	adds	r3, r7, #4
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startDryerMenu->maxMenuLines = 0;
 80071d6:	1d3b      	adds	r3, r7, #4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startDryerMenu->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 80071e4:	1d3b      	adds	r3, r7, #4
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071ec:	2202      	movs	r2, #2
 80071ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startDryerMenu->withChebox = true;
 80071f2:	1d3b      	adds	r3, r7, #4
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startDryerMenu->itemsChecked = new bool(startDryerMenu->maxMenuItems);
 8007200:	2001      	movs	r0, #1
 8007202:	f008 f881 	bl	800f308 <_Znwj>
 8007206:	4603      	mov	r3, r0
 8007208:	1d3a      	adds	r2, r7, #4
 800720a:	6812      	ldr	r2, [r2, #0]
 800720c:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8007210:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007214:	2a00      	cmp	r2, #0
 8007216:	bf14      	ite	ne
 8007218:	2201      	movne	r2, #1
 800721a:	2200      	moveq	r2, #0
 800721c:	e00c      	b.n	8007238 <_ZN10SmartDryer5setupEv+0x6f8>
 800721e:	bf00      	nop
 8007220:	08010678 	.word	0x08010678
 8007224:	20000030 	.word	0x20000030
 8007228:	08010688 	.word	0x08010688
 800722c:	20000054 	.word	0x20000054
 8007230:	08010698 	.word	0x08010698
 8007234:	080104bc 	.word	0x080104bc
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	1d3a      	adds	r2, r7, #4
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8007244:	62d3      	str	r3, [r2, #44]	; 0x2c
	startDryerMenu->paramAssociated = (bool *)&statusParam->dryerOn;
 8007246:	1d3b      	adds	r3, r7, #4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800724c:	1d3b      	adds	r3, r7, #4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
	startDryerMenu->paramType = PARAM_BOOL_TYPE;
 8007256:	1d3b      	adds	r3, r7, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startDryerMenu->menuSelected = true;
 8007264:	1d3b      	adds	r3, r7, #4
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	tempMenuCtrl->menuTitle = "Imposta temp.";
 8007272:	1d3b      	adds	r3, r7, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800727a:	49cc      	ldr	r1, [pc, #816]	; (80075ac <_ZN10SmartDryer5setupEv+0xa6c>)
 800727c:	4618      	mov	r0, r3
 800727e:	f008 fa44 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	tempMenuCtrl->menuVoices = Temps;
 8007282:	1d3b      	adds	r3, r7, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800728a:	4ac9      	ldr	r2, [pc, #804]	; (80075b0 <_ZN10SmartDryer5setupEv+0xa70>)
 800728c:	619a      	str	r2, [r3, #24]
	tempMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 800728e:	1d3b      	adds	r3, r7, #4
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007296:	223c      	movs	r2, #60	; 0x3c
 8007298:	771a      	strb	r2, [r3, #28]
	tempMenuCtrl->YPos = MENU_LIST_YPOS;
 800729a:	1d3b      	adds	r3, r7, #4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072a2:	2214      	movs	r2, #20
 80072a4:	775a      	strb	r2, [r3, #29]
	tempMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80072a6:	1d3b      	adds	r3, r7, #4
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	1d3b      	adds	r3, r7, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072b4:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80072b8:	621a      	str	r2, [r3, #32]
	tempMenuCtrl->topItemPos = 0;
 80072ba:	1d3b      	adds	r3, r7, #4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	tempMenuCtrl->itemSelected = 0;
 80072c8:	1d3b      	adds	r3, r7, #4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	tempMenuCtrl->maxMenuLines = 0;
 80072d6:	1d3b      	adds	r3, r7, #4
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	tempMenuCtrl->maxMenuItems = sizeof(Temps)/sizeof(Temps[0]);;
 80072e4:	1d3b      	adds	r3, r7, #4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072ec:	220d      	movs	r2, #13
 80072ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	tempMenuCtrl->withChebox = true;
 80072f2:	1d3b      	adds	r3, r7, #4
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tempMenuCtrl->itemsChecked = new bool(tempMenuCtrl->maxMenuItems);
 8007300:	2001      	movs	r0, #1
 8007302:	f008 f801 	bl	800f308 <_Znwj>
 8007306:	4603      	mov	r3, r0
 8007308:	1d3a      	adds	r2, r7, #4
 800730a:	6812      	ldr	r2, [r2, #0]
 800730c:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8007310:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007314:	2a00      	cmp	r2, #0
 8007316:	bf14      	ite	ne
 8007318:	2201      	movne	r2, #1
 800731a:	2200      	moveq	r2, #0
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	1d3a      	adds	r2, r7, #4
 8007322:	6812      	ldr	r2, [r2, #0]
 8007324:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8007328:	62d3      	str	r3, [r2, #44]	; 0x2c
	tempMenuCtrl->paramAssociated = (float *)&statusParam->temperatureSetted;
 800732a:	1d3b      	adds	r3, r7, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007330:	1d3b      	adds	r3, r7, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007338:	3204      	adds	r2, #4
 800733a:	631a      	str	r2, [r3, #48]	; 0x30
	tempMenuCtrl->paramType = PARAM_FLOAT_TYPE;
 800733c:	1d3b      	adds	r3, r7, #4
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007344:	2204      	movs	r2, #4
 8007346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tempMenuCtrl->menuSelected = true;
 800734a:	1d3b      	adds	r3, r7, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	changeProgramsMenu->menuTitle = "Modifica programma";
 8007358:	1d3b      	adds	r3, r7, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007360:	4994      	ldr	r1, [pc, #592]	; (80075b4 <_ZN10SmartDryer5setupEv+0xa74>)
 8007362:	4618      	mov	r0, r3
 8007364:	f008 f9d1 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	changeProgramsMenu->menuVoices = programsMenuVoices;
 8007368:	1d3b      	adds	r3, r7, #4
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007370:	4a91      	ldr	r2, [pc, #580]	; (80075b8 <_ZN10SmartDryer5setupEv+0xa78>)
 8007372:	619a      	str	r2, [r3, #24]
	changeProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8007374:	1d3b      	adds	r3, r7, #4
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800737c:	2205      	movs	r2, #5
 800737e:	771a      	strb	r2, [r3, #28]
	changeProgramsMenu->YPos = MENU_LIST_YPOS;
 8007380:	1d3b      	adds	r3, r7, #4
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007388:	2214      	movs	r2, #20
 800738a:	775a      	strb	r2, [r3, #29]
	changeProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800738c:	1d3b      	adds	r3, r7, #4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	1d3b      	adds	r3, r7, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800739a:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800739e:	621a      	str	r2, [r3, #32]
	changeProgramsMenu->topItemPos = 0;
 80073a0:	1d3b      	adds	r3, r7, #4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	changeProgramsMenu->itemSelected = 0;
 80073ae:	1d3b      	adds	r3, r7, #4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	changeProgramsMenu->maxMenuLines = 0;
 80073bc:	1d3b      	adds	r3, r7, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	changeProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 80073ca:	1d3b      	adds	r3, r7, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073d2:	2203      	movs	r2, #3
 80073d4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	changeProgramsMenu->withChebox = false;
 80073d8:	1d3b      	adds	r3, r7, #4
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	changeProgramsMenu->itemsChecked = NULL;
 80073e6:	1d3b      	adds	r3, r7, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073ee:	2200      	movs	r2, #0
 80073f0:	62da      	str	r2, [r3, #44]	; 0x2c
	changeProgramsMenu->paramAssociated = NULL;
 80073f2:	1d3b      	adds	r3, r7, #4
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80073fa:	2200      	movs	r2, #0
 80073fc:	631a      	str	r2, [r3, #48]	; 0x30
	changeProgramsMenu->paramType = NO_TYPE;
 80073fe:	1d3b      	adds	r3, r7, #4
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	changeProgramsMenu->menuSelected = true;
 800740c:	1d3b      	adds	r3, r7, #4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startProgramsMenu->menuTitle = "Avvia programma";
 800741a:	1d3b      	adds	r3, r7, #4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007422:	4966      	ldr	r1, [pc, #408]	; (80075bc <_ZN10SmartDryer5setupEv+0xa7c>)
 8007424:	4618      	mov	r0, r3
 8007426:	f008 f970 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startProgramsMenu->menuVoices = programsMenuVoices;
 800742a:	1d3b      	adds	r3, r7, #4
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007432:	4a61      	ldr	r2, [pc, #388]	; (80075b8 <_ZN10SmartDryer5setupEv+0xa78>)
 8007434:	619a      	str	r2, [r3, #24]
	startProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8007436:	1d3b      	adds	r3, r7, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800743e:	2205      	movs	r2, #5
 8007440:	771a      	strb	r2, [r3, #28]
	startProgramsMenu->YPos = MENU_LIST_YPOS;
 8007442:	1d3b      	adds	r3, r7, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800744a:	2214      	movs	r2, #20
 800744c:	775a      	strb	r2, [r3, #29]
	startProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800744e:	1d3b      	adds	r3, r7, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	1d3b      	adds	r3, r7, #4
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800745c:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8007460:	621a      	str	r2, [r3, #32]
	startProgramsMenu->topItemPos = 0;
 8007462:	1d3b      	adds	r3, r7, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startProgramsMenu->itemSelected = 0;
 8007470:	1d3b      	adds	r3, r7, #4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startProgramsMenu->maxMenuLines = 0;
 800747e:	1d3b      	adds	r3, r7, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 800748c:	1d3b      	adds	r3, r7, #4
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007494:	2203      	movs	r2, #3
 8007496:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startProgramsMenu->withChebox = false;
 800749a:	1d3b      	adds	r3, r7, #4
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startProgramsMenu->itemsChecked = NULL;
 80074a8:	1d3b      	adds	r3, r7, #4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80074b0:	2200      	movs	r2, #0
 80074b2:	62da      	str	r2, [r3, #44]	; 0x2c
	startProgramsMenu->paramAssociated = NULL;
 80074b4:	1d3b      	adds	r3, r7, #4
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80074bc:	2200      	movs	r2, #0
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
	startProgramsMenu->paramType = NO_TYPE;
 80074c0:	1d3b      	adds	r3, r7, #4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startProgramsMenu->menuSelected = true;
 80074ce:	1d3b      	adds	r3, r7, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	// TODO Caricare dalla eeprom se abilitata, i programmi nelle rispettive variabili in ram
	if(eepromEnabled)
 80074dc:	1d3b      	adds	r3, r7, #4
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80d5 	beq.w	8007694 <_ZN10SmartDryer5setupEv+0xb54>
	{
		if(resetMemory)
 80074ea:	1d3b      	adds	r3, r7, #4
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d010      	beq.n	8007518 <_ZN10SmartDryer5setupEv+0x9d8>
		{
			FirstBootVal = 500;
 80074f6:	f107 0308 	add.w	r3, r7, #8
 80074fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80074fe:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, MEM_TRANSFER);
 8007500:	1d3b      	adds	r3, r7, #4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6998      	ldr	r0, [r3, #24]
 8007506:	f107 0308 	add.w	r3, r7, #8
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	2301      	movs	r3, #1
 800750e:	2100      	movs	r1, #0
 8007510:	f7fd fe9d 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			ResetSystem;
 8007514:	f003 fe28 	bl	800b168 <HAL_NVIC_SystemReset>
		}
		if(!memory->memoryEmpty())
 8007518:	1d3b      	adds	r3, r7, #4
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	4618      	mov	r0, r3
 8007520:	f7fd fe5d 	bl	80051de <_ZN12STM32_EEPROM11memoryEmptyEv>
 8007524:	4603      	mov	r3, r0
 8007526:	f083 0301 	eor.w	r3, r3, #1
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d073      	beq.n	8007618 <_ZN10SmartDryer5setupEv+0xad8>
		{
			memory->loadMemory(FIRST_BOOT, &FirstBootVal);
 8007530:	1d3b      	adds	r3, r7, #4
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	f107 0208 	add.w	r2, r7, #8
 800753a:	2100      	movs	r1, #0
 800753c:	4618      	mov	r0, r3
 800753e:	f7fd fea4 	bl	800528a <_ZN12STM32_EEPROM10loadMemoryEtPm>
			if(FirstBootVal == 200)
 8007542:	f107 0308 	add.w	r3, r7, #8
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2bc8      	cmp	r3, #200	; 0xc8
 800754a:	d115      	bne.n	8007578 <_ZN10SmartDryer5setupEv+0xa38>
			{
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 800754c:	2300      	movs	r3, #0
 800754e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8007552:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007556:	2b02      	cmp	r3, #2
 8007558:	f300 809c 	bgt.w	8007694 <_ZN10SmartDryer5setupEv+0xb54>
				{
					loadDryerProgram(i);
 800755c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007560:	b2da      	uxtb	r2, r3
 8007562:	1d3b      	adds	r3, r7, #4
 8007564:	4611      	mov	r1, r2
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	f7fe fea9 	bl	80062be <_ZN10SmartDryer16loadDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 800756c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007570:	3301      	adds	r3, #1
 8007572:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8007576:	e7ec      	b.n	8007552 <_ZN10SmartDryer5setupEv+0xa12>
				}
			}
			else
			{
				FirstBootVal = 200;
 8007578:	f107 0308 	add.w	r3, r7, #8
 800757c:	22c8      	movs	r2, #200	; 0xc8
 800757e:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8007580:	2300      	movs	r3, #0
 8007582:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007586:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800758a:	2b02      	cmp	r3, #2
 800758c:	dc18      	bgt.n	80075c0 <_ZN10SmartDryer5setupEv+0xa80>
				{
					writeDefaultsDryerProgram(i);
 800758e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007592:	b2da      	uxtb	r2, r3
 8007594:	1d3b      	adds	r3, r7, #4
 8007596:	4611      	mov	r1, r2
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	f7fe fc85 	bl	8005ea8 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 800759e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075a2:	3301      	adds	r3, #1
 80075a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80075a8:	e7ed      	b.n	8007586 <_ZN10SmartDryer5setupEv+0xa46>
 80075aa:	bf00      	nop
 80075ac:	080104ac 	.word	0x080104ac
 80075b0:	2000005c 	.word	0x2000005c
 80075b4:	080106a8 	.word	0x080106a8
 80075b8:	20000090 	.word	0x20000090
 80075bc:	080104f8 	.word	0x080104f8
				}
				memory->eraseMemory();
 80075c0:	1d3b      	adds	r3, r7, #4
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fd fdf8 	bl	80051bc <_ZN12STM32_EEPROM11eraseMemoryEv>
				memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 80075cc:	1d3b      	adds	r3, r7, #4
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6998      	ldr	r0, [r3, #24]
 80075d2:	f107 0308 	add.w	r3, r7, #8
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	2300      	movs	r3, #0
 80075da:	2100      	movs	r1, #0
 80075dc:	f7fd fe37 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80075e0:	2300      	movs	r3, #0
 80075e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80075e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	dc11      	bgt.n	8007612 <_ZN10SmartDryer5setupEv+0xad2>
				{
					saveDryerProgram(i);
 80075ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	1d3b      	adds	r3, r7, #4
 80075f6:	4611      	mov	r1, r2
 80075f8:	6818      	ldr	r0, [r3, #0]
 80075fa:	f7fe fcf1 	bl	8005fe0 <_ZN10SmartDryer16saveDryerProgramEh>
					HAL_Delay(500);
 80075fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007602:	f003 f8e3 	bl	800a7cc <HAL_Delay>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8007606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760a:	3301      	adds	r3, #1
 800760c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007610:	e7e9      	b.n	80075e6 <_ZN10SmartDryer5setupEv+0xaa6>
				}
				ResetSystem;
 8007612:	f003 fda9 	bl	800b168 <HAL_NVIC_SystemReset>
			}
			ResetSystem;
		}
	}

}
 8007616:	e03d      	b.n	8007694 <_ZN10SmartDryer5setupEv+0xb54>
			FirstBootVal = 200;
 8007618:	f107 0308 	add.w	r3, r7, #8
 800761c:	22c8      	movs	r2, #200	; 0xc8
 800761e:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8007620:	1d3b      	adds	r3, r7, #4
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6998      	ldr	r0, [r3, #24]
 8007626:	f107 0308 	add.w	r3, r7, #8
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	2100      	movs	r1, #0
 8007630:	f7fd fe0d 	bl	800524e <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8007634:	2300      	movs	r3, #0
 8007636:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800763a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800763e:	2b02      	cmp	r3, #2
 8007640:	dc0d      	bgt.n	800765e <_ZN10SmartDryer5setupEv+0xb1e>
				writeDefaultsDryerProgram(i);
 8007642:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007646:	b2da      	uxtb	r2, r3
 8007648:	1d3b      	adds	r3, r7, #4
 800764a:	4611      	mov	r1, r2
 800764c:	6818      	ldr	r0, [r3, #0]
 800764e:	f7fe fc2b 	bl	8005ea8 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8007652:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007656:	3301      	adds	r3, #1
 8007658:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800765c:	e7ed      	b.n	800763a <_ZN10SmartDryer5setupEv+0xafa>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 800765e:	2300      	movs	r3, #0
 8007660:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007664:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007668:	2b02      	cmp	r3, #2
 800766a:	dc11      	bgt.n	8007690 <_ZN10SmartDryer5setupEv+0xb50>
				saveDryerProgram(i);
 800766c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007670:	b2da      	uxtb	r2, r3
 8007672:	1d3b      	adds	r3, r7, #4
 8007674:	4611      	mov	r1, r2
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	f7fe fcb2 	bl	8005fe0 <_ZN10SmartDryer16saveDryerProgramEh>
				HAL_Delay(500);
 800767c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007680:	f003 f8a4 	bl	800a7cc <HAL_Delay>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8007684:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007688:	3301      	adds	r3, #1
 800768a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800768e:	e7e9      	b.n	8007664 <_ZN10SmartDryer5setupEv+0xb24>
			ResetSystem;
 8007690:	f003 fd6a 	bl	800b168 <HAL_NVIC_SystemReset>
}
 8007694:	bf00      	nop
 8007696:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800769a:	46bd      	mov	sp, r7
 800769c:	bd90      	pop	{r4, r7, pc}
 800769e:	bf00      	nop

080076a0 <_ZN10SmartDryer10changeTimeEv>:


void SmartDryer::changeTime()
{
 80076a0:	b590      	push	{r4, r7, lr}
 80076a2:	b0bd      	sub	sp, #244	; 0xf4
 80076a4:	af02      	add	r7, sp, #8
 80076a6:	6078      	str	r0, [r7, #4]
	bool ExitChangeTime = false;
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t Hour = 0, Minute = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 80076b4:	2300      	movs	r3, #0
 80076b6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	bool IsHours = true;
 80076ba:	2301      	movs	r3, #1
 80076bc:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	String Title = "", Number = "";
 80076c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80076c4:	4618      	mov	r0, r3
 80076c6:	f007 fe3b 	bl	800f340 <_ZNSaIcEC1Ev>
 80076ca:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80076ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80076d2:	49cb      	ldr	r1, [pc, #812]	; (8007a00 <_ZN10SmartDryer10changeTimeEv+0x360>)
 80076d4:	4618      	mov	r0, r3
 80076d6:	f008 f8cb 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80076da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80076de:	4618      	mov	r0, r3
 80076e0:	f007 fe2f 	bl	800f342 <_ZNSaIcED1Ev>
 80076e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80076e8:	4618      	mov	r0, r3
 80076ea:	f007 fe29 	bl	800f340 <_ZNSaIcEC1Ev>
 80076ee:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80076f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076f6:	49c2      	ldr	r1, [pc, #776]	; (8007a00 <_ZN10SmartDryer10changeTimeEv+0x360>)
 80076f8:	4618      	mov	r0, r3
 80076fa:	f008 f8b9 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80076fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007702:	4618      	mov	r0, r3
 8007704:	f007 fe1d 	bl	800f342 <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8007708:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800770c:	4618      	mov	r0, r3
 800770e:	f007 fe17 	bl	800f340 <_ZNSaIcEC1Ev>
 8007712:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800771a:	49b9      	ldr	r1, [pc, #740]	; (8007a00 <_ZN10SmartDryer10changeTimeEv+0x360>)
 800771c:	4618      	mov	r0, r3
 800771e:	f008 f8a7 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007722:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007726:	4618      	mov	r0, r3
 8007728:	f007 fe0b 	bl	800f342 <_ZNSaIcED1Ev>
 800772c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007730:	4618      	mov	r0, r3
 8007732:	f007 fe05 	bl	800f340 <_ZNSaIcEC1Ev>
 8007736:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800773a:	f107 0310 	add.w	r3, r7, #16
 800773e:	49b0      	ldr	r1, [pc, #704]	; (8007a00 <_ZN10SmartDryer10changeTimeEv+0x360>)
 8007740:	4618      	mov	r0, r3
 8007742:	f008 f895 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007746:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800774a:	4618      	mov	r0, r3
 800774c:	f007 fdf9 	bl	800f342 <_ZNSaIcED1Ev>
	while(!ExitChangeTime)
 8007750:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8007754:	2b00      	cmp	r3, #0
 8007756:	f040 813b 	bne.w	80079d0 <_ZN10SmartDryer10changeTimeEv+0x330>
	{
		display->clearFrameBuffer();
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f7fd f889 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8007764:	f107 0210 	add.w	r2, r7, #16
 8007768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fe fb3f 	bl	8005df2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(IsHours)
 8007774:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01b      	beq.n	80077b4 <_ZN10SmartDryer10changeTimeEv+0x114>
		{
			Title = "Imposta ora";
 800777c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007780:	49a0      	ldr	r1, [pc, #640]	; (8007a04 <_ZN10SmartDryer10changeTimeEv+0x364>)
 8007782:	4618      	mov	r0, r3
 8007784:	f007 ffc1 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Hour);
 8007788:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 800778c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007790:	4611      	mov	r1, r2
 8007792:	4618      	mov	r0, r3
 8007794:	f7fb fe40 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8007798:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800779c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077a0:	4611      	mov	r1, r2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f007 ff03 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80077a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80077ac:	4618      	mov	r0, r3
 80077ae:	f007 fef2 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80077b2:	e01a      	b.n	80077ea <_ZN10SmartDryer10changeTimeEv+0x14a>
		}
		else
		{
			Title = "Imposta minuto";
 80077b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80077b8:	4993      	ldr	r1, [pc, #588]	; (8007a08 <_ZN10SmartDryer10changeTimeEv+0x368>)
 80077ba:	4618      	mov	r0, r3
 80077bc:	f007 ffa5 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Minute);
 80077c0:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 80077c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80077c8:	4611      	mov	r1, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fb fe24 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80077d0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80077d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077d8:	4611      	mov	r1, r2
 80077da:	4618      	mov	r0, r3
 80077dc:	f007 fee7 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80077e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80077e4:	4618      	mov	r0, r3
 80077e6:	f007 fed6 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681c      	ldr	r4, [r3, #0]
 80077ee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80077f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f008 f806 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007806:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	2305      	movs	r3, #5
 800780e:	2283      	movs	r2, #131	; 0x83
 8007810:	4620      	mov	r0, r4
 8007812:	f7fd f858 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007816:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800781a:	4618      	mov	r0, r3
 800781c:	f007 febb 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681c      	ldr	r4, [r3, #0]
 8007824:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007828:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800782c:	4611      	mov	r1, r2
 800782e:	4618      	mov	r0, r3
 8007830:	f007 ffeb 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800783c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	231e      	movs	r3, #30
 8007844:	2283      	movs	r2, #131	; 0x83
 8007846:	4620      	mov	r0, r4
 8007848:	f7fd f83d 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800784c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007850:	4618      	mov	r0, r3
 8007852:	f007 fea0 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007862:	2370      	movs	r3, #112	; 0x70
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	221e      	movs	r2, #30
 800786a:	213c      	movs	r1, #60	; 0x3c
 800786c:	f7fd fada 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6818      	ldr	r0, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800787c:	236d      	movs	r3, #109	; 0x6d
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	4613      	mov	r3, r2
 8007882:	2237      	movs	r2, #55	; 0x37
 8007884:	213c      	movs	r1, #60	; 0x3c
 8007886:	f7fd facd 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		// TODO scrivere che si preme ok per andare avanti o long ok per tornare indietro
		display->sendFrameBuffer();
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4618      	mov	r0, r3
 8007890:	f7fc fffe 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8007894:	2308      	movs	r3, #8
 8007896:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		WichKey = keyboard->checkKey();
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fd fde4 	bl	800546c <_ZN8DryerKey8checkKeyEv>
 80078a4:	4603      	mov	r3, r0
 80078a6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		switch(WichKey)
 80078aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80078ae:	2b07      	cmp	r3, #7
 80078b0:	f200 8087 	bhi.w	80079c2 <_ZN10SmartDryer10changeTimeEv+0x322>
 80078b4:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <_ZN10SmartDryer10changeTimeEv+0x21c>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078dd 	.word	0x080078dd
 80078c0:	0800791d 	.word	0x0800791d
 80078c4:	080079c3 	.word	0x080079c3
 80078c8:	0800795d 	.word	0x0800795d
 80078cc:	080078dd 	.word	0x080078dd
 80078d0:	0800791d 	.word	0x0800791d
 80078d4:	080079bb 	.word	0x080079bb
 80078d8:	080079a5 	.word	0x080079a5
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(IsHours)
 80078dc:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00d      	beq.n	8007900 <_ZN10SmartDryer10changeTimeEv+0x260>
				{
					if(Hour > 0)
 80078e4:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d005      	beq.n	80078f8 <_ZN10SmartDryer10changeTimeEv+0x258>
						Hour--;
 80078ec:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80078f0:	3b01      	subs	r3, #1
 80078f2:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute > 0)
						Minute--;
					else
						Minute = 59;
				}
				break;
 80078f6:	e067      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 23;
 80078f8:	2317      	movs	r3, #23
 80078fa:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 80078fe:	e063      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute > 0)
 8007900:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <_ZN10SmartDryer10changeTimeEv+0x274>
						Minute--;
 8007908:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800790c:	3b01      	subs	r3, #1
 800790e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8007912:	e059      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 59;
 8007914:	233b      	movs	r3, #59	; 0x3b
 8007916:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 800791a:	e055      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(IsHours)
 800791c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00d      	beq.n	8007940 <_ZN10SmartDryer10changeTimeEv+0x2a0>
				{
					if(Hour < 23)
 8007924:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007928:	2b16      	cmp	r3, #22
 800792a:	d805      	bhi.n	8007938 <_ZN10SmartDryer10changeTimeEv+0x298>
						Hour++;
 800792c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007930:	3301      	adds	r3, #1
 8007932:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute < 59)
						Minute++;
					else
						Minute = 0;
				}
				break;
 8007936:	e047      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 800793e:	e043      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute < 59)
 8007940:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007944:	2b3a      	cmp	r3, #58	; 0x3a
 8007946:	d805      	bhi.n	8007954 <_ZN10SmartDryer10changeTimeEv+0x2b4>
						Minute++;
 8007948:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800794c:	3301      	adds	r3, #1
 800794e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8007952:	e039      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 800795a:	e035      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::OK_KEY:
				if(IsHours)
 800795c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <_ZN10SmartDryer10changeTimeEv+0x2cc>
				{
					IsHours = false;
 8007964:	2300      	movs	r3, #0
 8007966:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
					NewTime.minute = Minute;
					NewTime.second = 0;
					clock->adjustTimeDate(NewTime);
					ExitChangeTime = true;
				}
				break;
 800796a:	e02d      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
					clock->getTimeDate(NewTime);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f107 0208 	add.w	r2, r7, #8
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f7fb fedc 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewTime.hour = Hour;
 800797c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007980:	72bb      	strb	r3, [r7, #10]
					NewTime.minute = Minute;
 8007982:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007986:	727b      	strb	r3, [r7, #9]
					NewTime.second = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	723b      	strb	r3, [r7, #8]
					clock->adjustTimeDate(NewTime);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6858      	ldr	r0, [r3, #4]
 8007990:	f107 0308 	add.w	r3, r7, #8
 8007994:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007998:	f7fb fe22 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeTime = true;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 80079a2:	e011      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::LONG_OK_KEY:
				if(!IsHours)
 80079a4:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80079a8:	f083 0301 	eor.w	r3, r3, #1
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d009      	beq.n	80079c6 <_ZN10SmartDryer10changeTimeEv+0x326>
				{
					IsHours = true;
 80079b2:	2301      	movs	r3, #1
 80079b4:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
				}
				break;
 80079b8:	e005      	b.n	80079c6 <_ZN10SmartDryer10changeTimeEv+0x326>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeTime = true;
 80079ba:	2301      	movs	r3, #1
 80079bc:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 80079c0:	e002      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
			default:
				break;
 80079c2:	bf00      	nop
 80079c4:	e000      	b.n	80079c8 <_ZN10SmartDryer10changeTimeEv+0x328>
				break;
 80079c6:	bf00      	nop
		}
		peripheralsControl();
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7fe f9fd 	bl	8005dc8 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeTime)
 80079ce:	e6bf      	b.n	8007750 <_ZN10SmartDryer10changeTimeEv+0xb0>
	String Time = "", Date = "";
 80079d0:	f107 0310 	add.w	r3, r7, #16
 80079d4:	4618      	mov	r0, r3
 80079d6:	f007 fdde 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80079da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80079de:	4618      	mov	r0, r3
 80079e0:	f007 fdd9 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 80079e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079e8:	4618      	mov	r0, r3
 80079ea:	f007 fdd4 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80079ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079f2:	4618      	mov	r0, r3
 80079f4:	f007 fdcf 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 80079f8:	bf00      	nop
 80079fa:	37ec      	adds	r7, #236	; 0xec
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}
 8007a00:	08010574 	.word	0x08010574
 8007a04:	080104c8 	.word	0x080104c8
 8007a08:	080106bc 	.word	0x080106bc

08007a0c <_ZN10SmartDryer10changeDateEv>:

void SmartDryer::changeDate()
{
 8007a0c:	b590      	push	{r4, r7, lr}
 8007a0e:	b0c5      	sub	sp, #276	; 0x114
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	1d3b      	adds	r3, r7, #4
 8007a14:	6018      	str	r0, [r3, #0]
	bool ExitChangeDate = false;
 8007a16:	2300      	movs	r3, #0
 8007a18:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t Day = 1, Month = 1, Year = 20;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8007a28:	2314      	movs	r3, #20
 8007a2a:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t WichDateVar = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	String Title = "", Number = "";
 8007a34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f007 fc81 	bl	800f340 <_ZNSaIcEC1Ev>
 8007a3e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8007a42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007a46:	49db      	ldr	r1, [pc, #876]	; (8007db4 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f007 ff11 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007a4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007a52:	4618      	mov	r0, r3
 8007a54:	f007 fc75 	bl	800f342 <_ZNSaIcED1Ev>
 8007a58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f007 fc6f 	bl	800f340 <_ZNSaIcEC1Ev>
 8007a62:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007a66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007a6a:	49d2      	ldr	r1, [pc, #840]	; (8007db4 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f007 feff 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007a72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007a76:	4618      	mov	r0, r3
 8007a78:	f007 fc63 	bl	800f342 <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8007a7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007a80:	4618      	mov	r0, r3
 8007a82:	f007 fc5d 	bl	800f340 <_ZNSaIcEC1Ev>
 8007a86:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a8e:	49c9      	ldr	r1, [pc, #804]	; (8007db4 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007a90:	4618      	mov	r0, r3
 8007a92:	f007 feed 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007a96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f007 fc51 	bl	800f342 <_ZNSaIcED1Ev>
 8007aa0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f007 fc4b 	bl	800f340 <_ZNSaIcEC1Ev>
 8007aaa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007aae:	f107 0314 	add.w	r3, r7, #20
 8007ab2:	49c0      	ldr	r1, [pc, #768]	; (8007db4 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f007 fedb 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007aba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f007 fc3f 	bl	800f342 <_ZNSaIcED1Ev>
	while(!ExitChangeDate)
 8007ac4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f040 81b8 	bne.w	8007e3e <_ZN10SmartDryer10changeDateEv+0x432>
	{
		display->clearFrameBuffer();
 8007ace:	1d3b      	adds	r3, r7, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fc fece 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8007ada:	f107 0214 	add.w	r2, r7, #20
 8007ade:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007ae2:	1d3b      	adds	r3, r7, #4
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	f7fe f984 	bl	8005df2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(WichDateVar == 0)
 8007aea:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d12b      	bne.n	8007b4a <_ZN10SmartDryer10changeDateEv+0x13e>
		{
			Title = "Imposta mese";
 8007af2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007af6:	49b0      	ldr	r1, [pc, #704]	; (8007db8 <_ZN10SmartDryer10changeDateEv+0x3ac>)
 8007af8:	4618      	mov	r0, r3
 8007afa:	f007 fe06 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = String(monthNames[Month - 1]);
 8007afe:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007b02:	3b01      	subs	r3, #1
 8007b04:	4aad      	ldr	r2, [pc, #692]	; (8007dbc <_ZN10SmartDryer10changeDateEv+0x3b0>)
 8007b06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f007 fc16 	bl	800f340 <_ZNSaIcEC1Ev>
 8007b14:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8007b18:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f007 fea6 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007b24:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007b28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f007 fd3d 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007b34:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f007 fd2c 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007b3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007b42:	4618      	mov	r0, r3
 8007b44:	f007 fbfd 	bl	800f342 <_ZNSaIcED1Ev>
 8007b48:	e03a      	b.n	8007bc0 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else if(WichDateVar == 1)
 8007b4a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d11b      	bne.n	8007b8a <_ZN10SmartDryer10changeDateEv+0x17e>
		{
			Title = "Imposta giorno";
 8007b52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007b56:	499a      	ldr	r1, [pc, #616]	; (8007dc0 <_ZN10SmartDryer10changeDateEv+0x3b4>)
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f007 fdd6 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Day);
 8007b5e:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8007b62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007b66:	4611      	mov	r1, r2
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fb fc55 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8007b6e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8007b72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007b76:	4611      	mov	r1, r2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f007 fd18 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007b7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f007 fd07 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007b88:	e01a      	b.n	8007bc0 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else
		{
			Title = "Imposta anno";
 8007b8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007b8e:	498d      	ldr	r1, [pc, #564]	; (8007dc4 <_ZN10SmartDryer10changeDateEv+0x3b8>)
 8007b90:	4618      	mov	r0, r3
 8007b92:	f007 fdba 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Year);
 8007b96:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 8007b9a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fb fc39 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8007ba6:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007baa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007bae:	4611      	mov	r1, r2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f007 fcfc 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007bb6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f007 fceb 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8007bc0:	1d3b      	adds	r3, r7, #4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681c      	ldr	r4, [r3, #0]
 8007bc6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007bca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007bce:	4611      	mov	r1, r2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f007 fe1a 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007bd6:	1d3b      	adds	r3, r7, #4
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007be0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	2305      	movs	r3, #5
 8007be8:	2283      	movs	r2, #131	; 0x83
 8007bea:	4620      	mov	r0, r4
 8007bec:	f7fc fe6b 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007bf0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f007 fcce 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8007bfa:	1d3b      	adds	r3, r7, #4
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681c      	ldr	r4, [r3, #0]
 8007c00:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007c04:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007c08:	4611      	mov	r1, r2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f007 fdfd 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007c10:	1d3b      	adds	r3, r7, #4
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007c1a:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	231e      	movs	r3, #30
 8007c22:	2283      	movs	r2, #131	; 0x83
 8007c24:	4620      	mov	r0, r4
 8007c26:	f7fc fe4e 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007c2a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f007 fcb1 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8007c34:	1d3b      	adds	r3, r7, #4
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	1d3b      	adds	r3, r7, #4
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007c44:	2370      	movs	r3, #112	; 0x70
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	221e      	movs	r2, #30
 8007c4c:	213c      	movs	r1, #60	; 0x3c
 8007c4e:	f7fd f8e9 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8007c52:	1d3b      	adds	r3, r7, #4
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	1d3b      	adds	r3, r7, #4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007c62:	236d      	movs	r3, #109	; 0x6d
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	4613      	mov	r3, r2
 8007c68:	2237      	movs	r2, #55	; 0x37
 8007c6a:	213c      	movs	r1, #60	; 0x3c
 8007c6c:	f7fd f8da 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		// TODO scrivere che si preme ok per andare avanti o long ok per tornare indietro
		display->sendFrameBuffer();
 8007c70:	1d3b      	adds	r3, r7, #4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fc fe0a 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8007c7c:	2308      	movs	r3, #8
 8007c7e:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		WichKey = keyboard->checkKey();
 8007c82:	1d3b      	adds	r3, r7, #4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fd fbef 	bl	800546c <_ZN8DryerKey8checkKeyEv>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		switch(WichKey)
 8007c94:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8007c98:	2b07      	cmp	r3, #7
 8007c9a:	f200 80c8 	bhi.w	8007e2e <_ZN10SmartDryer10changeDateEv+0x422>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <_ZN10SmartDryer10changeDateEv+0x298>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cc5 	.word	0x08007cc5
 8007ca8:	08007d31 	.word	0x08007d31
 8007cac:	08007e2f 	.word	0x08007e2f
 8007cb0:	08007d9f 	.word	0x08007d9f
 8007cb4:	08007cc5 	.word	0x08007cc5
 8007cb8:	08007d31 	.word	0x08007d31
 8007cbc:	08007e27 	.word	0x08007e27
 8007cc0:	08007e13 	.word	0x08007e13
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(WichDateVar == 1)
 8007cc4:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d111      	bne.n	8007cf0 <_ZN10SmartDryer10changeDateEv+0x2e4>
				{
					if(Day > 1)
 8007ccc:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d905      	bls.n	8007ce0 <_ZN10SmartDryer10changeDateEv+0x2d4>
						Day--;
 8007cd4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year > 20)
						Year--;
					else
						Year = 99;
				}
				break;
 8007cde:	e0a9      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
						Day = daysInMonth[Month - 1];
 8007ce0:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	4a38      	ldr	r2, [pc, #224]	; (8007dc8 <_ZN10SmartDryer10changeDateEv+0x3bc>)
 8007ce8:	5cd3      	ldrb	r3, [r2, r3]
 8007cea:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8007cee:	e0a1      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 8007cf0:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10d      	bne.n	8007d14 <_ZN10SmartDryer10changeDateEv+0x308>
					if(Month > 1)
 8007cf8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d905      	bls.n	8007d0c <_ZN10SmartDryer10changeDateEv+0x300>
						Month--;
 8007d00:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007d04:	3b01      	subs	r3, #1
 8007d06:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8007d0a:	e093      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 12;
 8007d0c:	230c      	movs	r3, #12
 8007d0e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8007d12:	e08f      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year > 20)
 8007d14:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007d18:	2b14      	cmp	r3, #20
 8007d1a:	d905      	bls.n	8007d28 <_ZN10SmartDryer10changeDateEv+0x31c>
						Year--;
 8007d1c:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007d20:	3b01      	subs	r3, #1
 8007d22:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007d26:	e085      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 99;
 8007d28:	2363      	movs	r3, #99	; 0x63
 8007d2a:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007d2e:	e081      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(WichDateVar == 1)
 8007d30:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d112      	bne.n	8007d5e <_ZN10SmartDryer10changeDateEv+0x352>
				{
					if(Day < daysInMonth[Month - 1])
 8007d38:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	4a22      	ldr	r2, [pc, #136]	; (8007dc8 <_ZN10SmartDryer10changeDateEv+0x3bc>)
 8007d40:	5cd3      	ldrb	r3, [r2, r3]
 8007d42:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d205      	bcs.n	8007d56 <_ZN10SmartDryer10changeDateEv+0x34a>
						Day++;
 8007d4a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007d4e:	3301      	adds	r3, #1
 8007d50:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year < 99)
						Year++;
					else
						Year = 20;
				}
				break;
 8007d54:	e06e      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
						Day = 1;
 8007d56:	2301      	movs	r3, #1
 8007d58:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8007d5c:	e06a      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 8007d5e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10d      	bne.n	8007d82 <_ZN10SmartDryer10changeDateEv+0x376>
					if(Month < 12)
 8007d66:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007d6a:	2b0b      	cmp	r3, #11
 8007d6c:	d805      	bhi.n	8007d7a <_ZN10SmartDryer10changeDateEv+0x36e>
						Month++;
 8007d6e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007d72:	3301      	adds	r3, #1
 8007d74:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8007d78:	e05c      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 1;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8007d80:	e058      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year < 99)
 8007d82:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007d86:	2b62      	cmp	r3, #98	; 0x62
 8007d88:	d805      	bhi.n	8007d96 <_ZN10SmartDryer10changeDateEv+0x38a>
						Year++;
 8007d8a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007d8e:	3301      	adds	r3, #1
 8007d90:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007d94:	e04e      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 20;
 8007d96:	2314      	movs	r3, #20
 8007d98:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007d9c:	e04a      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::OK_KEY:
				if(WichDateVar < 2)
 8007d9e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d812      	bhi.n	8007dcc <_ZN10SmartDryer10changeDateEv+0x3c0>
				{
					WichDateVar++;
 8007da6:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007daa:	3301      	adds	r3, #1
 8007dac:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
					NewDate.month = Month;
					NewDate.year = Year + 2000;
					clock->adjustTimeDate(NewDate);
					ExitChangeDate = true;
				}
				break;
 8007db0:	e040      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
 8007db2:	bf00      	nop
 8007db4:	08010574 	.word	0x08010574
 8007db8:	080106cc 	.word	0x080106cc
 8007dbc:	20000000 	.word	0x20000000
 8007dc0:	080106dc 	.word	0x080106dc
 8007dc4:	080106ec 	.word	0x080106ec
 8007dc8:	080135c4 	.word	0x080135c4
					clock->getTimeDate(NewDate);
 8007dcc:	1d3b      	adds	r3, r7, #4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f107 020c 	add.w	r2, r7, #12
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fb fcab 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewDate.day = Day;
 8007dde:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8007de2:	73fb      	strb	r3, [r7, #15]
					NewDate.month = Month;
 8007de4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007de8:	743b      	strb	r3, [r7, #16]
					NewDate.year = Year + 2000;
 8007dea:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	827b      	strh	r3, [r7, #18]
					clock->adjustTimeDate(NewDate);
 8007df8:	1d3b      	adds	r3, r7, #4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6858      	ldr	r0, [r3, #4]
 8007dfe:	f107 030c 	add.w	r3, r7, #12
 8007e02:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007e06:	f7fb fbeb 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeDate = true;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8007e10:	e010      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::LONG_OK_KEY:
				if(WichDateVar > 0)
 8007e12:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <_ZN10SmartDryer10changeDateEv+0x426>
				{
					WichDateVar--;
 8007e1a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				}
				break;
 8007e24:	e005      	b.n	8007e32 <_ZN10SmartDryer10changeDateEv+0x426>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeDate = true;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8007e2c:	e002      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
			default:
				break;
 8007e2e:	bf00      	nop
 8007e30:	e000      	b.n	8007e34 <_ZN10SmartDryer10changeDateEv+0x428>
				break;
 8007e32:	bf00      	nop
		}
		peripheralsControl();
 8007e34:	1d3b      	adds	r3, r7, #4
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	f7fd ffc6 	bl	8005dc8 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeDate)
 8007e3c:	e642      	b.n	8007ac4 <_ZN10SmartDryer10changeDateEv+0xb8>
	String Time = "", Date = "";
 8007e3e:	f107 0314 	add.w	r3, r7, #20
 8007e42:	4618      	mov	r0, r3
 8007e44:	f007 fba7 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f007 fba2 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 8007e52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007e56:	4618      	mov	r0, r3
 8007e58:	f007 fb9d 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007e5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e60:	4618      	mov	r0, r3
 8007e62:	f007 fb98 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8007e66:	bf00      	nop
 8007e68:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd90      	pop	{r4, r7, pc}

08007e70 <_ZN10SmartDryer8showInfoEv>:

void SmartDryer::showInfo()
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bc80      	pop	{r7}
 8007e80:	4770      	bx	lr
	...

08007e84 <_ZN10SmartDryer13changeProgramEh>:

void SmartDryer::changeProgram(uint8_t WichProgram)
{
 8007e84:	b590      	push	{r4, r7, lr}
 8007e86:	b0e9      	sub	sp, #420	; 0x1a4
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	1d3b      	adds	r3, r7, #4
 8007e8c:	6018      	str	r0, [r3, #0]
 8007e8e:	460a      	mov	r2, r1
 8007e90:	1cfb      	adds	r3, r7, #3
 8007e92:	701a      	strb	r2, [r3, #0]
	bool ExitChangeProgram = false;
 8007e94:	2300      	movs	r3, #0
 8007e96:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	uint8_t WichSetting = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
	const uint8_t MAX_SETTINGS = 5;
 8007ea0:	2305      	movs	r3, #5
 8007ea2:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
	uint8_t StartHour = dryerPrograms[WichProgram].startTime.hour, StartMinute = dryerPrograms[WichProgram].startTime.minute;
 8007ea6:	1cfb      	adds	r3, r7, #3
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	1d3b      	adds	r3, r7, #4
 8007eac:	6819      	ldr	r1, [r3, #0]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	4413      	add	r3, r2
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3348      	adds	r3, #72	; 0x48
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
 8007ec0:	1cfb      	adds	r3, r7, #3
 8007ec2:	781a      	ldrb	r2, [r3, #0]
 8007ec4:	1d3b      	adds	r3, r7, #4
 8007ec6:	6819      	ldr	r1, [r3, #0]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	4413      	add	r3, r2
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	440b      	add	r3, r1
 8007ed2:	3347      	adds	r3, #71	; 0x47
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
	uint8_t EndHour = dryerPrograms[WichProgram].endTime.hour, EndMinute = dryerPrograms[WichProgram].endTime.minute;
 8007eda:	1cfb      	adds	r3, r7, #3
 8007edc:	781a      	ldrb	r2, [r3, #0]
 8007ede:	1d3b      	adds	r3, r7, #4
 8007ee0:	6819      	ldr	r1, [r3, #0]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	4413      	add	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	440b      	add	r3, r1
 8007eec:	3350      	adds	r3, #80	; 0x50
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
 8007ef4:	1cfb      	adds	r3, r7, #3
 8007ef6:	781a      	ldrb	r2, [r3, #0]
 8007ef8:	1d3b      	adds	r3, r7, #4
 8007efa:	6819      	ldr	r1, [r3, #0]
 8007efc:	4613      	mov	r3, r2
 8007efe:	005b      	lsls	r3, r3, #1
 8007f00:	4413      	add	r3, r2
 8007f02:	00db      	lsls	r3, r3, #3
 8007f04:	440b      	add	r3, r1
 8007f06:	334f      	adds	r3, #79	; 0x4f
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
	uint32_t TemperatureSetted = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8007f0e:	1cfb      	adds	r3, r7, #3
 8007f10:	781a      	ldrb	r2, [r3, #0]
 8007f12:	1d3b      	adds	r3, r7, #4
 8007f14:	6819      	ldr	r1, [r3, #0]
 8007f16:	4613      	mov	r3, r2
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	4413      	add	r3, r2
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	440b      	add	r3, r1
 8007f20:	3358      	adds	r3, #88	; 0x58
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7f8 ff97 	bl	8000e58 <__aeabi_f2uiz>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	String Time = "", Date = "";
 8007f30:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007f34:	4618      	mov	r0, r3
 8007f36:	f007 fa03 	bl	800f340 <_ZNSaIcEC1Ev>
 8007f3a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007f3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007f42:	49e2      	ldr	r1, [pc, #904]	; (80082cc <_ZN10SmartDryer13changeProgramEh+0x448>)
 8007f44:	4618      	mov	r0, r3
 8007f46:	f007 fc93 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007f4a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f007 f9f7 	bl	800f342 <_ZNSaIcED1Ev>
 8007f54:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f007 f9f1 	bl	800f340 <_ZNSaIcEC1Ev>
 8007f5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007f62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007f66:	49d9      	ldr	r1, [pc, #868]	; (80082cc <_ZN10SmartDryer13changeProgramEh+0x448>)
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f007 fc81 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007f6e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007f72:	4618      	mov	r0, r3
 8007f74:	f007 f9e5 	bl	800f342 <_ZNSaIcED1Ev>
	String Title = "", SubTitle = "", Number = "";
 8007f78:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f007 f9df 	bl	800f340 <_ZNSaIcEC1Ev>
 8007f82:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8007f86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007f8a:	49d0      	ldr	r1, [pc, #832]	; (80082cc <_ZN10SmartDryer13changeProgramEh+0x448>)
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f007 fc6f 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007f92:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007f96:	4618      	mov	r0, r3
 8007f98:	f007 f9d3 	bl	800f342 <_ZNSaIcED1Ev>
 8007f9c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f007 f9cd 	bl	800f340 <_ZNSaIcEC1Ev>
 8007fa6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fae:	49c7      	ldr	r1, [pc, #796]	; (80082cc <_ZN10SmartDryer13changeProgramEh+0x448>)
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f007 fc5d 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007fb6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f007 f9c1 	bl	800f342 <_ZNSaIcED1Ev>
 8007fc0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f007 f9bb 	bl	800f340 <_ZNSaIcEC1Ev>
 8007fca:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8007fce:	f107 030c 	add.w	r3, r7, #12
 8007fd2:	49be      	ldr	r1, [pc, #760]	; (80082cc <_ZN10SmartDryer13changeProgramEh+0x448>)
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f007 fc4b 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007fda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f007 f9af 	bl	800f342 <_ZNSaIcED1Ev>
	while(!ExitChangeProgram)
 8007fe4:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f040 83d4 	bne.w	8008796 <_ZN10SmartDryer13changeProgramEh+0x912>
	{
		Title = "Programma " + std::to_string(WichProgram + 1);
 8007fee:	1cfb      	adds	r3, r7, #3
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fb fa0c 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008000:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008004:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008008:	49b1      	ldr	r1, [pc, #708]	; (80082d0 <_ZN10SmartDryer13changeProgramEh+0x44c>)
 800800a:	4618      	mov	r0, r3
 800800c:	f7fb ff8e 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008010:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008014:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008018:	4611      	mov	r1, r2
 800801a:	4618      	mov	r0, r3
 800801c:	f007 fac7 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008020:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008024:	4618      	mov	r0, r3
 8008026:	f007 fab6 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800802a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800802e:	4618      	mov	r0, r3
 8008030:	f007 fab1 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		switch(WichSetting)
 8008034:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008038:	2b04      	cmp	r3, #4
 800803a:	f200 8098 	bhi.w	800816e <_ZN10SmartDryer13changeProgramEh+0x2ea>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <_ZN10SmartDryer13changeProgramEh+0x1c0>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008059 	.word	0x08008059
 8008048:	08008091 	.word	0x08008091
 800804c:	080080c9 	.word	0x080080c9
 8008050:	08008101 	.word	0x08008101
 8008054:	08008139 	.word	0x08008139
		{
			case 0:
				SubTitle = "Ora di inizio";
 8008058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800805c:	499d      	ldr	r1, [pc, #628]	; (80082d4 <_ZN10SmartDryer13changeProgramEh+0x450>)
 800805e:	4618      	mov	r0, r3
 8008060:	f007 fb53 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(StartHour);
 8008064:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008068:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f7fb f9d2 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008074:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8008078:	f107 030c 	add.w	r3, r7, #12
 800807c:	4611      	mov	r1, r2
 800807e:	4618      	mov	r0, r3
 8008080:	f007 fa95 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008084:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008088:	4618      	mov	r0, r3
 800808a:	f007 fa84 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 800808e:	e06f      	b.n	8008170 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 1:
				SubTitle = "Minuto di inizio";
 8008090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008094:	4990      	ldr	r1, [pc, #576]	; (80082d8 <_ZN10SmartDryer13changeProgramEh+0x454>)
 8008096:	4618      	mov	r0, r3
 8008098:	f007 fb37 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(StartMinute);
 800809c:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 80080a0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fb f9b6 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80080ac:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80080b0:	f107 030c 	add.w	r3, r7, #12
 80080b4:	4611      	mov	r1, r2
 80080b6:	4618      	mov	r0, r3
 80080b8:	f007 fa79 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80080bc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f007 fa68 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 80080c6:	e053      	b.n	8008170 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 2:
				SubTitle = "Ora di fine";
 80080c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080cc:	4983      	ldr	r1, [pc, #524]	; (80082dc <_ZN10SmartDryer13changeProgramEh+0x458>)
 80080ce:	4618      	mov	r0, r3
 80080d0:	f007 fb1b 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(EndHour);
 80080d4:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80080d8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80080dc:	4611      	mov	r1, r2
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fb f99a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80080e4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80080e8:	f107 030c 	add.w	r3, r7, #12
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f007 fa5d 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80080f4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80080f8:	4618      	mov	r0, r3
 80080fa:	f007 fa4c 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 80080fe:	e037      	b.n	8008170 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 3:
				SubTitle = "Minuto di fine";
 8008100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008104:	4976      	ldr	r1, [pc, #472]	; (80082e0 <_ZN10SmartDryer13changeProgramEh+0x45c>)
 8008106:	4618      	mov	r0, r3
 8008108:	f007 faff 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(EndMinute);
 800810c:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 8008110:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008114:	4611      	mov	r1, r2
 8008116:	4618      	mov	r0, r3
 8008118:	f7fb f97e 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800811c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008120:	f107 030c 	add.w	r3, r7, #12
 8008124:	4611      	mov	r1, r2
 8008126:	4618      	mov	r0, r3
 8008128:	f007 fa41 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800812c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008130:	4618      	mov	r0, r3
 8008132:	f007 fa30 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8008136:	e01b      	b.n	8008170 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			case 4:
				SubTitle = "Temperatura";
 8008138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800813c:	4969      	ldr	r1, [pc, #420]	; (80082e4 <_ZN10SmartDryer13changeProgramEh+0x460>)
 800813e:	4618      	mov	r0, r3
 8008140:	f007 fae3 	bl	800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(TemperatureSetted);
 8008144:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008148:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800814c:	4618      	mov	r0, r3
 800814e:	f7fd fa25 	bl	800559c <_ZNSt7__cxx119to_stringEm>
 8008152:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008156:	f107 030c 	add.w	r3, r7, #12
 800815a:	4611      	mov	r1, r2
 800815c:	4618      	mov	r0, r3
 800815e:	f007 fa26 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008162:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008166:	4618      	mov	r0, r3
 8008168:	f007 fa15 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 800816c:	e000      	b.n	8008170 <_ZN10SmartDryer13changeProgramEh+0x2ec>
			default:
				break;
 800816e:	bf00      	nop
		}
		display->clearFrameBuffer();
 8008170:	1d3b      	adds	r3, r7, #4
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f7fc fb7d 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800817c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8008180:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8008184:	1d3b      	adds	r3, r7, #4
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	f7fd fe33 	bl	8005df2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 7, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800818c:	1d3b      	adds	r3, r7, #4
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681c      	ldr	r4, [r3, #0]
 8008192:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008196:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800819a:	4611      	mov	r1, r2
 800819c:	4618      	mov	r0, r3
 800819e:	f007 fb34 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80081a2:	1d3b      	adds	r3, r7, #4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80081ac:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	2307      	movs	r3, #7
 80081b4:	2283      	movs	r2, #131	; 0x83
 80081b6:	4620      	mov	r0, r4
 80081b8:	f7fc fb85 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80081bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80081c0:	4618      	mov	r0, r3
 80081c2:	f007 f9e8 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(SubTitle, NHDST7565_LCD::CENTER_POS, 22, display->displayFonts[NHDST7565_LCD::W_6_H_10]);
 80081c6:	1d3b      	adds	r3, r7, #4
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681c      	ldr	r4, [r3, #0]
 80081cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80081d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f007 fb17 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80081dc:	1d3b      	adds	r3, r7, #4
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081e6:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	2316      	movs	r3, #22
 80081ee:	2283      	movs	r2, #131	; 0x83
 80081f0:	4620      	mov	r0, r4
 80081f2:	f7fc fb68 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80081f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80081fa:	4618      	mov	r0, r3
 80081fc:	f007 f9cb 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 39, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008200:	1d3b      	adds	r3, r7, #4
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681c      	ldr	r4, [r3, #0]
 8008206:	f107 020c 	add.w	r2, r7, #12
 800820a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800820e:	4611      	mov	r1, r2
 8008210:	4618      	mov	r0, r3
 8008212:	f007 fafa 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008216:	1d3b      	adds	r3, r7, #4
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008220:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	2327      	movs	r3, #39	; 0x27
 8008228:	2283      	movs	r2, #131	; 0x83
 800822a:	4620      	mov	r0, r4
 800822c:	f7fc fb4b 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008230:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008234:	4618      	mov	r0, r3
 8008236:	f007 f9ae 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 40, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 800823a:	1d3b      	adds	r3, r7, #4
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6818      	ldr	r0, [r3, #0]
 8008240:	1d3b      	adds	r3, r7, #4
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800824a:	2370      	movs	r3, #112	; 0x70
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	4613      	mov	r3, r2
 8008250:	2228      	movs	r2, #40	; 0x28
 8008252:	213c      	movs	r1, #60	; 0x3c
 8008254:	f7fc fde6 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 60, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8008258:	1d3b      	adds	r3, r7, #4
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	1d3b      	adds	r3, r7, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008268:	236d      	movs	r3, #109	; 0x6d
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	4613      	mov	r3, r2
 800826e:	223c      	movs	r2, #60	; 0x3c
 8008270:	213c      	movs	r1, #60	; 0x3c
 8008272:	f7fc fdd7 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8008276:	1d3b      	adds	r3, r7, #4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4618      	mov	r0, r3
 800827e:	f7fc fb07 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8008282:	2308      	movs	r3, #8
 8008284:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
		WichKey = keyboard->checkKey();
 8008288:	1d3b      	adds	r3, r7, #4
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	4618      	mov	r0, r3
 8008290:	f7fd f8ec 	bl	800546c <_ZN8DryerKey8checkKeyEv>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
		switch(WichKey)
 800829a:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800829e:	2b07      	cmp	r3, #7
 80082a0:	f200 8271 	bhi.w	8008786 <_ZN10SmartDryer13changeProgramEh+0x902>
 80082a4:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <_ZN10SmartDryer13changeProgramEh+0x428>)
 80082a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082aa:	bf00      	nop
 80082ac:	080082e9 	.word	0x080082e9
 80082b0:	0800839d 	.word	0x0800839d
 80082b4:	0800876b 	.word	0x0800876b
 80082b8:	08008451 	.word	0x08008451
 80082bc:	080082e9 	.word	0x080082e9
 80082c0:	0800839d 	.word	0x0800839d
 80082c4:	0800877f 	.word	0x0800877f
 80082c8:	08008787 	.word	0x08008787
 80082cc:	08010574 	.word	0x08010574
 80082d0:	080106fc 	.word	0x080106fc
 80082d4:	08010708 	.word	0x08010708
 80082d8:	08010718 	.word	0x08010718
 80082dc:	0801072c 	.word	0x0801072c
 80082e0:	08010738 	.word	0x08010738
 80082e4:	08010748 	.word	0x08010748
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				switch(WichSetting)
 80082e8:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d853      	bhi.n	8008398 <_ZN10SmartDryer13changeProgramEh+0x514>
 80082f0:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <_ZN10SmartDryer13changeProgramEh+0x474>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	0800830d 	.word	0x0800830d
 80082fc:	08008329 	.word	0x08008329
 8008300:	08008345 	.word	0x08008345
 8008304:	08008361 	.word	0x08008361
 8008308:	0800837d 	.word	0x0800837d
				{
					case 0:
						if(StartHour > 0)
 800830c:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8008310:	2b00      	cmp	r3, #0
 8008312:	d005      	beq.n	8008320 <_ZN10SmartDryer13changeProgramEh+0x49c>
							StartHour--;
 8008314:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8008318:	3b01      	subs	r3, #1
 800831a:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						else
							StartHour = 23;
						break;
 800831e:	e03c      	b.n	800839a <_ZN10SmartDryer13changeProgramEh+0x516>
							StartHour = 23;
 8008320:	2317      	movs	r3, #23
 8008322:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						break;
 8008326:	e038      	b.n	800839a <_ZN10SmartDryer13changeProgramEh+0x516>
					case 1:
						if(StartMinute > 0)
 8008328:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800832c:	2b00      	cmp	r3, #0
 800832e:	d005      	beq.n	800833c <_ZN10SmartDryer13changeProgramEh+0x4b8>
							StartMinute -= 10;
 8008330:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8008334:	3b0a      	subs	r3, #10
 8008336:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						else
							StartMinute = 50;
						break;
 800833a:	e02e      	b.n	800839a <_ZN10SmartDryer13changeProgramEh+0x516>
							StartMinute = 50;
 800833c:	2332      	movs	r3, #50	; 0x32
 800833e:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						break;
 8008342:	e02a      	b.n	800839a <_ZN10SmartDryer13changeProgramEh+0x516>
					case 2:
						if(EndHour > 0)
 8008344:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <_ZN10SmartDryer13changeProgramEh+0x4d4>
							EndHour--;
 800834c:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008350:	3b01      	subs	r3, #1
 8008352:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						else
							EndHour = 23;
						break;
 8008356:	e020      	b.n	800839a <_ZN10SmartDryer13changeProgramEh+0x516>
							EndHour = 23;
 8008358:	2317      	movs	r3, #23
 800835a:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						break;
 800835e:	e01c      	b.n	800839a <_ZN10SmartDryer13changeProgramEh+0x516>
					case 3:
						if(EndMinute > 0)
 8008360:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8008364:	2b00      	cmp	r3, #0
 8008366:	d005      	beq.n	8008374 <_ZN10SmartDryer13changeProgramEh+0x4f0>
							EndMinute -= 10;
 8008368:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800836c:	3b0a      	subs	r3, #10
 800836e:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						else
							EndMinute = 50;
						break;
 8008372:	e012      	b.n	800839a <_ZN10SmartDryer13changeProgramEh+0x516>
							EndMinute = 50;
 8008374:	2332      	movs	r3, #50	; 0x32
 8008376:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						break;
 800837a:	e00e      	b.n	800839a <_ZN10SmartDryer13changeProgramEh+0x516>
					case 4:
						if(TemperatureSetted > 30)
 800837c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008380:	2b1e      	cmp	r3, #30
 8008382:	d905      	bls.n	8008390 <_ZN10SmartDryer13changeProgramEh+0x50c>
							TemperatureSetted -= 5;
 8008384:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008388:	3b05      	subs	r3, #5
 800838a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						else
							TemperatureSetted = 90;
						break;
 800838e:	e004      	b.n	800839a <_ZN10SmartDryer13changeProgramEh+0x516>
							TemperatureSetted = 90;
 8008390:	235a      	movs	r3, #90	; 0x5a
 8008392:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						break;
 8008396:	e000      	b.n	800839a <_ZN10SmartDryer13changeProgramEh+0x516>
					default:
						break;
 8008398:	bf00      	nop
				}
				break;
 800839a:	e1f7      	b.n	800878c <_ZN10SmartDryer13changeProgramEh+0x908>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				switch(WichSetting)
 800839c:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d853      	bhi.n	800844c <_ZN10SmartDryer13changeProgramEh+0x5c8>
 80083a4:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <_ZN10SmartDryer13changeProgramEh+0x528>)
 80083a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083aa:	bf00      	nop
 80083ac:	080083c1 	.word	0x080083c1
 80083b0:	080083dd 	.word	0x080083dd
 80083b4:	080083f9 	.word	0x080083f9
 80083b8:	08008415 	.word	0x08008415
 80083bc:	08008431 	.word	0x08008431
				{
					case 0:
						if(StartHour < 23)
 80083c0:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80083c4:	2b16      	cmp	r3, #22
 80083c6:	d805      	bhi.n	80083d4 <_ZN10SmartDryer13changeProgramEh+0x550>
							StartHour++;
 80083c8:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80083cc:	3301      	adds	r3, #1
 80083ce:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						else
							StartHour = 0;
						break;
 80083d2:	e03c      	b.n	800844e <_ZN10SmartDryer13changeProgramEh+0x5ca>
							StartHour = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						break;
 80083da:	e038      	b.n	800844e <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 1:
						if(StartMinute < 50)
 80083dc:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 80083e0:	2b31      	cmp	r3, #49	; 0x31
 80083e2:	d805      	bhi.n	80083f0 <_ZN10SmartDryer13changeProgramEh+0x56c>
							StartMinute += 10;
 80083e4:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 80083e8:	330a      	adds	r3, #10
 80083ea:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						else
							StartMinute = 0;
						break;
 80083ee:	e02e      	b.n	800844e <_ZN10SmartDryer13changeProgramEh+0x5ca>
							StartMinute = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						break;
 80083f6:	e02a      	b.n	800844e <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 2:
						if(EndHour < 23)
 80083f8:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 80083fc:	2b16      	cmp	r3, #22
 80083fe:	d805      	bhi.n	800840c <_ZN10SmartDryer13changeProgramEh+0x588>
							EndHour++;
 8008400:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008404:	3301      	adds	r3, #1
 8008406:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						else
							EndHour = 0;
						break;
 800840a:	e020      	b.n	800844e <_ZN10SmartDryer13changeProgramEh+0x5ca>
							EndHour = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						break;
 8008412:	e01c      	b.n	800844e <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 3:
						if(EndMinute < 50)
 8008414:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8008418:	2b31      	cmp	r3, #49	; 0x31
 800841a:	d805      	bhi.n	8008428 <_ZN10SmartDryer13changeProgramEh+0x5a4>
							EndMinute += 10;
 800841c:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8008420:	330a      	adds	r3, #10
 8008422:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						else
							EndMinute = 0;
						break;
 8008426:	e012      	b.n	800844e <_ZN10SmartDryer13changeProgramEh+0x5ca>
							EndMinute = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						break;
 800842e:	e00e      	b.n	800844e <_ZN10SmartDryer13changeProgramEh+0x5ca>
					case 4:
						if(TemperatureSetted < 90)
 8008430:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008434:	2b59      	cmp	r3, #89	; 0x59
 8008436:	d805      	bhi.n	8008444 <_ZN10SmartDryer13changeProgramEh+0x5c0>
							TemperatureSetted += 5;
 8008438:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800843c:	3305      	adds	r3, #5
 800843e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						else
							TemperatureSetted = 30;
						break;
 8008442:	e004      	b.n	800844e <_ZN10SmartDryer13changeProgramEh+0x5ca>
							TemperatureSetted = 30;
 8008444:	231e      	movs	r3, #30
 8008446:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						break;
 800844a:	e000      	b.n	800844e <_ZN10SmartDryer13changeProgramEh+0x5ca>
					default:
						break;
 800844c:	bf00      	nop
				}
				break;
 800844e:	e19d      	b.n	800878c <_ZN10SmartDryer13changeProgramEh+0x908>
			case DryerKey::OK_KEY:
				if(WichSetting < MAX_SETTINGS - 1)
 8008450:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008454:	2b03      	cmp	r3, #3
 8008456:	d805      	bhi.n	8008464 <_ZN10SmartDryer13changeProgramEh+0x5e0>
					WichSetting++;
 8008458:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 800845c:	3301      	adds	r3, #1
 800845e:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
					{
						saveDryerProgram(WichProgram);
					}
					ExitChangeProgram = true;
				}
				break;
 8008462:	e193      	b.n	800878c <_ZN10SmartDryer13changeProgramEh+0x908>
					clock->getTimeDate(dryerPrograms[WichProgram].startTime);
 8008464:	1d3b      	adds	r3, r7, #4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6858      	ldr	r0, [r3, #4]
 800846a:	1cfb      	adds	r3, r7, #3
 800846c:	781a      	ldrb	r2, [r3, #0]
 800846e:	1d39      	adds	r1, r7, #4
 8008470:	4613      	mov	r3, r2
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	4413      	add	r3, r2
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	3340      	adds	r3, #64	; 0x40
 800847a:	680a      	ldr	r2, [r1, #0]
 800847c:	4413      	add	r3, r2
 800847e:	3306      	adds	r3, #6
 8008480:	4619      	mov	r1, r3
 8008482:	f7fb f957 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					clock->getTimeDate(dryerPrograms[WichProgram].endTime);
 8008486:	1d3b      	adds	r3, r7, #4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6858      	ldr	r0, [r3, #4]
 800848c:	1cfb      	adds	r3, r7, #3
 800848e:	781a      	ldrb	r2, [r3, #0]
 8008490:	1d39      	adds	r1, r7, #4
 8008492:	4613      	mov	r3, r2
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	4413      	add	r3, r2
 8008498:	00db      	lsls	r3, r3, #3
 800849a:	3348      	adds	r3, #72	; 0x48
 800849c:	680a      	ldr	r2, [r1, #0]
 800849e:	4413      	add	r3, r2
 80084a0:	3306      	adds	r3, #6
 80084a2:	4619      	mov	r1, r3
 80084a4:	f7fb f946 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					dryerPrograms[WichProgram].tempSetted = (float)TemperatureSetted;
 80084a8:	1cfb      	adds	r3, r7, #3
 80084aa:	781c      	ldrb	r4, [r3, #0]
 80084ac:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 80084b0:	f7f8 fb2a 	bl	8000b08 <__aeabi_ui2f>
 80084b4:	4601      	mov	r1, r0
 80084b6:	1d3b      	adds	r3, r7, #4
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	4623      	mov	r3, r4
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	4423      	add	r3, r4
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	4413      	add	r3, r2
 80084c4:	3358      	adds	r3, #88	; 0x58
 80084c6:	6019      	str	r1, [r3, #0]
					dryerPrograms[WichProgram].startTime.minute = StartMinute;
 80084c8:	1cfb      	adds	r3, r7, #3
 80084ca:	781a      	ldrb	r2, [r3, #0]
 80084cc:	1d3b      	adds	r3, r7, #4
 80084ce:	6819      	ldr	r1, [r3, #0]
 80084d0:	4613      	mov	r3, r2
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	4413      	add	r3, r2
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	440b      	add	r3, r1
 80084da:	3347      	adds	r3, #71	; 0x47
 80084dc:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 80084e0:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].endTime.minute = EndMinute;
 80084e2:	1cfb      	adds	r3, r7, #3
 80084e4:	781a      	ldrb	r2, [r3, #0]
 80084e6:	1d3b      	adds	r3, r7, #4
 80084e8:	6819      	ldr	r1, [r3, #0]
 80084ea:	4613      	mov	r3, r2
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	4413      	add	r3, r2
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	440b      	add	r3, r1
 80084f4:	334f      	adds	r3, #79	; 0x4f
 80084f6:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 80084fa:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].startTime.hour = StartHour;
 80084fc:	1cfb      	adds	r3, r7, #3
 80084fe:	781a      	ldrb	r2, [r3, #0]
 8008500:	1d3b      	adds	r3, r7, #4
 8008502:	6819      	ldr	r1, [r3, #0]
 8008504:	4613      	mov	r3, r2
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	4413      	add	r3, r2
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	440b      	add	r3, r1
 800850e:	3348      	adds	r3, #72	; 0x48
 8008510:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008514:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].endTime.hour = EndHour;
 8008516:	1cfb      	adds	r3, r7, #3
 8008518:	781a      	ldrb	r2, [r3, #0]
 800851a:	1d3b      	adds	r3, r7, #4
 800851c:	6819      	ldr	r1, [r3, #0]
 800851e:	4613      	mov	r3, r2
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	4413      	add	r3, r2
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	440b      	add	r3, r1
 8008528:	3350      	adds	r3, #80	; 0x50
 800852a:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 800852e:	701a      	strb	r2, [r3, #0]
					if(StartHour > EndHour)
 8008530:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008534:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008538:	429a      	cmp	r2, r3
 800853a:	d95b      	bls.n	80085f4 <_ZN10SmartDryer13changeProgramEh+0x770>
						if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 800853c:	1cfb      	adds	r3, r7, #3
 800853e:	781a      	ldrb	r2, [r3, #0]
 8008540:	1d3b      	adds	r3, r7, #4
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	4613      	mov	r3, r2
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	4413      	add	r3, r2
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	440b      	add	r3, r1
 800854e:	3351      	adds	r3, #81	; 0x51
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	1c59      	adds	r1, r3, #1
 8008554:	1cfb      	adds	r3, r7, #3
 8008556:	781a      	ldrb	r2, [r3, #0]
 8008558:	1d3b      	adds	r3, r7, #4
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	4613      	mov	r3, r2
 800855e:	005b      	lsls	r3, r3, #1
 8008560:	4413      	add	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	4403      	add	r3, r0
 8008566:	3352      	adds	r3, #82	; 0x52
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	3b01      	subs	r3, #1
 800856c:	4a99      	ldr	r2, [pc, #612]	; (80087d4 <_ZN10SmartDryer13changeProgramEh+0x950>)
 800856e:	5cd3      	ldrb	r3, [r2, r3]
 8008570:	4299      	cmp	r1, r3
 8008572:	da19      	bge.n	80085a8 <_ZN10SmartDryer13changeProgramEh+0x724>
							dryerPrograms[WichProgram].endTime.day += 1;
 8008574:	1cfb      	adds	r3, r7, #3
 8008576:	781a      	ldrb	r2, [r3, #0]
 8008578:	1d3b      	adds	r3, r7, #4
 800857a:	6819      	ldr	r1, [r3, #0]
 800857c:	4613      	mov	r3, r2
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	4413      	add	r3, r2
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	440b      	add	r3, r1
 8008586:	3351      	adds	r3, #81	; 0x51
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	1cfa      	adds	r2, r7, #3
 800858c:	7812      	ldrb	r2, [r2, #0]
 800858e:	3301      	adds	r3, #1
 8008590:	b2d8      	uxtb	r0, r3
 8008592:	1d3b      	adds	r3, r7, #4
 8008594:	6819      	ldr	r1, [r3, #0]
 8008596:	4613      	mov	r3, r2
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	4413      	add	r3, r2
 800859c:	00db      	lsls	r3, r3, #3
 800859e:	440b      	add	r3, r1
 80085a0:	3351      	adds	r3, #81	; 0x51
 80085a2:	4602      	mov	r2, r0
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	e0c3      	b.n	8008730 <_ZN10SmartDryer13changeProgramEh+0x8ac>
							dryerPrograms[WichProgram].endTime.day = 1;
 80085a8:	1cfb      	adds	r3, r7, #3
 80085aa:	781a      	ldrb	r2, [r3, #0]
 80085ac:	1d3b      	adds	r3, r7, #4
 80085ae:	6819      	ldr	r1, [r3, #0]
 80085b0:	4613      	mov	r3, r2
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	4413      	add	r3, r2
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	440b      	add	r3, r1
 80085ba:	3351      	adds	r3, #81	; 0x51
 80085bc:	2201      	movs	r2, #1
 80085be:	701a      	strb	r2, [r3, #0]
							dryerPrograms[WichProgram].endTime.month += 1;
 80085c0:	1cfb      	adds	r3, r7, #3
 80085c2:	781a      	ldrb	r2, [r3, #0]
 80085c4:	1d3b      	adds	r3, r7, #4
 80085c6:	6819      	ldr	r1, [r3, #0]
 80085c8:	4613      	mov	r3, r2
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	4413      	add	r3, r2
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	440b      	add	r3, r1
 80085d2:	3352      	adds	r3, #82	; 0x52
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	1cfa      	adds	r2, r7, #3
 80085d8:	7812      	ldrb	r2, [r2, #0]
 80085da:	3301      	adds	r3, #1
 80085dc:	b2d8      	uxtb	r0, r3
 80085de:	1d3b      	adds	r3, r7, #4
 80085e0:	6819      	ldr	r1, [r3, #0]
 80085e2:	4613      	mov	r3, r2
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	4413      	add	r3, r2
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	440b      	add	r3, r1
 80085ec:	3352      	adds	r3, #82	; 0x52
 80085ee:	4602      	mov	r2, r0
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	e09d      	b.n	8008730 <_ZN10SmartDryer13changeProgramEh+0x8ac>
					else if(EndHour == StartHour)
 80085f4:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 80085f8:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80085fc:	429a      	cmp	r2, r3
 80085fe:	f040 8097 	bne.w	8008730 <_ZN10SmartDryer13changeProgramEh+0x8ac>
						if(StartMinute > EndMinute)
 8008602:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8008606:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800860a:	429a      	cmp	r2, r3
 800860c:	f240 8090 	bls.w	8008730 <_ZN10SmartDryer13changeProgramEh+0x8ac>
							if(EndMinute + (StartMinute  - EndMinute) < 50)
 8008610:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8008614:	2b31      	cmp	r3, #49	; 0x31
 8008616:	d80d      	bhi.n	8008634 <_ZN10SmartDryer13changeProgramEh+0x7b0>
								dryerPrograms[WichProgram].endTime.minute = EndMinute + (StartMinute  - EndMinute);
 8008618:	1cfb      	adds	r3, r7, #3
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	1d3b      	adds	r3, r7, #4
 800861e:	6819      	ldr	r1, [r3, #0]
 8008620:	4613      	mov	r3, r2
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	4413      	add	r3, r2
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	440b      	add	r3, r1
 800862a:	334f      	adds	r3, #79	; 0x4f
 800862c:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	e07d      	b.n	8008730 <_ZN10SmartDryer13changeProgramEh+0x8ac>
								dryerPrograms[WichProgram].endTime.minute = EndMinute;
 8008634:	1cfb      	adds	r3, r7, #3
 8008636:	781a      	ldrb	r2, [r3, #0]
 8008638:	1d3b      	adds	r3, r7, #4
 800863a:	6819      	ldr	r1, [r3, #0]
 800863c:	4613      	mov	r3, r2
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	4413      	add	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	440b      	add	r3, r1
 8008646:	334f      	adds	r3, #79	; 0x4f
 8008648:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 800864c:	701a      	strb	r2, [r3, #0]
								dryerPrograms[WichProgram].endTime.hour = EndHour + 1;
 800864e:	1cfb      	adds	r3, r7, #3
 8008650:	781a      	ldrb	r2, [r3, #0]
 8008652:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008656:	3301      	adds	r3, #1
 8008658:	b2d8      	uxtb	r0, r3
 800865a:	1d3b      	adds	r3, r7, #4
 800865c:	6819      	ldr	r1, [r3, #0]
 800865e:	4613      	mov	r3, r2
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	4413      	add	r3, r2
 8008664:	00db      	lsls	r3, r3, #3
 8008666:	440b      	add	r3, r1
 8008668:	3350      	adds	r3, #80	; 0x50
 800866a:	4602      	mov	r2, r0
 800866c:	701a      	strb	r2, [r3, #0]
								if(StartHour > EndHour)
 800866e:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8008672:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8008676:	429a      	cmp	r2, r3
 8008678:	d95a      	bls.n	8008730 <_ZN10SmartDryer13changeProgramEh+0x8ac>
									if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 800867a:	1cfb      	adds	r3, r7, #3
 800867c:	781a      	ldrb	r2, [r3, #0]
 800867e:	1d3b      	adds	r3, r7, #4
 8008680:	6819      	ldr	r1, [r3, #0]
 8008682:	4613      	mov	r3, r2
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	4413      	add	r3, r2
 8008688:	00db      	lsls	r3, r3, #3
 800868a:	440b      	add	r3, r1
 800868c:	3351      	adds	r3, #81	; 0x51
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	1c59      	adds	r1, r3, #1
 8008692:	1cfb      	adds	r3, r7, #3
 8008694:	781a      	ldrb	r2, [r3, #0]
 8008696:	1d3b      	adds	r3, r7, #4
 8008698:	6818      	ldr	r0, [r3, #0]
 800869a:	4613      	mov	r3, r2
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	4413      	add	r3, r2
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	4403      	add	r3, r0
 80086a4:	3352      	adds	r3, #82	; 0x52
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	4a4a      	ldr	r2, [pc, #296]	; (80087d4 <_ZN10SmartDryer13changeProgramEh+0x950>)
 80086ac:	5cd3      	ldrb	r3, [r2, r3]
 80086ae:	4299      	cmp	r1, r3
 80086b0:	da19      	bge.n	80086e6 <_ZN10SmartDryer13changeProgramEh+0x862>
										dryerPrograms[WichProgram].endTime.day += 1;
 80086b2:	1cfb      	adds	r3, r7, #3
 80086b4:	781a      	ldrb	r2, [r3, #0]
 80086b6:	1d3b      	adds	r3, r7, #4
 80086b8:	6819      	ldr	r1, [r3, #0]
 80086ba:	4613      	mov	r3, r2
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	4413      	add	r3, r2
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	440b      	add	r3, r1
 80086c4:	3351      	adds	r3, #81	; 0x51
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	1cfa      	adds	r2, r7, #3
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	3301      	adds	r3, #1
 80086ce:	b2d8      	uxtb	r0, r3
 80086d0:	1d3b      	adds	r3, r7, #4
 80086d2:	6819      	ldr	r1, [r3, #0]
 80086d4:	4613      	mov	r3, r2
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	4413      	add	r3, r2
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	440b      	add	r3, r1
 80086de:	3351      	adds	r3, #81	; 0x51
 80086e0:	4602      	mov	r2, r0
 80086e2:	701a      	strb	r2, [r3, #0]
 80086e4:	e024      	b.n	8008730 <_ZN10SmartDryer13changeProgramEh+0x8ac>
										dryerPrograms[WichProgram].endTime.day = 1;
 80086e6:	1cfb      	adds	r3, r7, #3
 80086e8:	781a      	ldrb	r2, [r3, #0]
 80086ea:	1d3b      	adds	r3, r7, #4
 80086ec:	6819      	ldr	r1, [r3, #0]
 80086ee:	4613      	mov	r3, r2
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	4413      	add	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	440b      	add	r3, r1
 80086f8:	3351      	adds	r3, #81	; 0x51
 80086fa:	2201      	movs	r2, #1
 80086fc:	701a      	strb	r2, [r3, #0]
										dryerPrograms[WichProgram].endTime.month += 1;
 80086fe:	1cfb      	adds	r3, r7, #3
 8008700:	781a      	ldrb	r2, [r3, #0]
 8008702:	1d3b      	adds	r3, r7, #4
 8008704:	6819      	ldr	r1, [r3, #0]
 8008706:	4613      	mov	r3, r2
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4413      	add	r3, r2
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	440b      	add	r3, r1
 8008710:	3352      	adds	r3, #82	; 0x52
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	1cfa      	adds	r2, r7, #3
 8008716:	7812      	ldrb	r2, [r2, #0]
 8008718:	3301      	adds	r3, #1
 800871a:	b2d8      	uxtb	r0, r3
 800871c:	1d3b      	adds	r3, r7, #4
 800871e:	6819      	ldr	r1, [r3, #0]
 8008720:	4613      	mov	r3, r2
 8008722:	005b      	lsls	r3, r3, #1
 8008724:	4413      	add	r3, r2
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	440b      	add	r3, r1
 800872a:	3352      	adds	r3, #82	; 0x52
 800872c:	4602      	mov	r2, r0
 800872e:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].programSetted = true;
 8008730:	1cfb      	adds	r3, r7, #3
 8008732:	781a      	ldrb	r2, [r3, #0]
 8008734:	1d3b      	adds	r3, r7, #4
 8008736:	6819      	ldr	r1, [r3, #0]
 8008738:	4613      	mov	r3, r2
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	4413      	add	r3, r2
 800873e:	00db      	lsls	r3, r3, #3
 8008740:	440b      	add	r3, r1
 8008742:	3344      	adds	r3, #68	; 0x44
 8008744:	2201      	movs	r2, #1
 8008746:	701a      	strb	r2, [r3, #0]
					if(eepromEnabled)
 8008748:	1d3b      	adds	r3, r7, #4
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d006      	beq.n	8008762 <_ZN10SmartDryer13changeProgramEh+0x8de>
						saveDryerProgram(WichProgram);
 8008754:	1cfb      	adds	r3, r7, #3
 8008756:	781a      	ldrb	r2, [r3, #0]
 8008758:	1d3b      	adds	r3, r7, #4
 800875a:	4611      	mov	r1, r2
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	f7fd fc3f 	bl	8005fe0 <_ZN10SmartDryer16saveDryerProgramEh>
					ExitChangeProgram = true;
 8008762:	2301      	movs	r3, #1
 8008764:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				break;
 8008768:	e010      	b.n	800878c <_ZN10SmartDryer13changeProgramEh+0x908>
			case DryerKey::LEFT_KEY:
				if(WichSetting > 0)
 800876a:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00b      	beq.n	800878a <_ZN10SmartDryer13changeProgramEh+0x906>
					WichSetting--;
 8008772:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8008776:	3b01      	subs	r3, #1
 8008778:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
				break;
 800877c:	e005      	b.n	800878a <_ZN10SmartDryer13changeProgramEh+0x906>
			case DryerKey::LONG_OK_KEY:

				break;
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeProgram = true;
 800877e:	2301      	movs	r3, #1
 8008780:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				break;
 8008784:	e002      	b.n	800878c <_ZN10SmartDryer13changeProgramEh+0x908>
			default:
				break;
 8008786:	bf00      	nop
 8008788:	e000      	b.n	800878c <_ZN10SmartDryer13changeProgramEh+0x908>
				break;
 800878a:	bf00      	nop
		}
		peripheralsControl();
 800878c:	1d3b      	adds	r3, r7, #4
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	f7fd fb1a 	bl	8005dc8 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeProgram)
 8008794:	e426      	b.n	8007fe4 <_ZN10SmartDryer13changeProgramEh+0x160>
	String Title = "", SubTitle = "", Number = "";
 8008796:	f107 030c 	add.w	r3, r7, #12
 800879a:	4618      	mov	r0, r3
 800879c:	f006 fefb 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80087a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f006 fef6 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80087aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80087ae:	4618      	mov	r0, r3
 80087b0:	f006 fef1 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 80087b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80087b8:	4618      	mov	r0, r3
 80087ba:	f006 feec 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80087be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80087c2:	4618      	mov	r0, r3
 80087c4:	f006 fee7 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 80087c8:	bf00      	nop
 80087ca:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd90      	pop	{r4, r7, pc}
 80087d2:	bf00      	nop
 80087d4:	080135c4 	.word	0x080135c4

080087d8 <_ZN10SmartDryer12startProgramEh>:

void SmartDryer::startProgram(uint8_t WichProgram)
{
 80087d8:	b590      	push	{r4, r7, lr}
 80087da:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 80087de:	af02      	add	r7, sp, #8
 80087e0:	1d3b      	adds	r3, r7, #4
 80087e2:	6018      	str	r0, [r3, #0]
 80087e4:	460a      	mov	r2, r1
 80087e6:	1cfb      	adds	r3, r7, #3
 80087e8:	701a      	strb	r2, [r3, #0]
	bool ExitStartProgram = false;
 80087ea:	2300      	movs	r3, #0
 80087ec:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	bool ProgramEnd = false;
 80087f0:	2300      	movs	r3, #0
 80087f2:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	String Time = "", Date = "";
 80087f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80087fa:	4618      	mov	r0, r3
 80087fc:	f006 fda0 	bl	800f340 <_ZNSaIcEC1Ev>
 8008800:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8008804:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008808:	49cb      	ldr	r1, [pc, #812]	; (8008b38 <_ZN10SmartDryer12startProgramEh+0x360>)
 800880a:	4618      	mov	r0, r3
 800880c:	f007 f830 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008810:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008814:	4618      	mov	r0, r3
 8008816:	f006 fd94 	bl	800f342 <_ZNSaIcED1Ev>
 800881a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800881e:	4618      	mov	r0, r3
 8008820:	f006 fd8e 	bl	800f340 <_ZNSaIcEC1Ev>
 8008824:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8008828:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800882c:	49c2      	ldr	r1, [pc, #776]	; (8008b38 <_ZN10SmartDryer12startProgramEh+0x360>)
 800882e:	4618      	mov	r0, r3
 8008830:	f007 f81e 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008834:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008838:	4618      	mov	r0, r3
 800883a:	f006 fd82 	bl	800f342 <_ZNSaIcED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 800883e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008842:	4618      	mov	r0, r3
 8008844:	f006 fd7c 	bl	800f340 <_ZNSaIcEC1Ev>
 8008848:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800884c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008850:	49b9      	ldr	r1, [pc, #740]	; (8008b38 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008852:	4618      	mov	r0, r3
 8008854:	f007 f80c 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008858:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800885c:	4618      	mov	r0, r3
 800885e:	f006 fd70 	bl	800f342 <_ZNSaIcED1Ev>
 8008862:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008866:	4618      	mov	r0, r3
 8008868:	f006 fd6a 	bl	800f340 <_ZNSaIcEC1Ev>
 800886c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8008870:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008874:	49b0      	ldr	r1, [pc, #704]	; (8008b38 <_ZN10SmartDryer12startProgramEh+0x360>)
 8008876:	4618      	mov	r0, r3
 8008878:	f006 fffa 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800887c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008880:	4618      	mov	r0, r3
 8008882:	f006 fd5e 	bl	800f342 <_ZNSaIcED1Ev>
 8008886:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800888a:	4618      	mov	r0, r3
 800888c:	f006 fd58 	bl	800f340 <_ZNSaIcEC1Ev>
 8008890:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8008894:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008898:	49a7      	ldr	r1, [pc, #668]	; (8008b38 <_ZN10SmartDryer12startProgramEh+0x360>)
 800889a:	4618      	mov	r0, r3
 800889c:	f006 ffe8 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80088a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80088a4:	4618      	mov	r0, r3
 80088a6:	f006 fd4c 	bl	800f342 <_ZNSaIcED1Ev>
 80088aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80088ae:	4618      	mov	r0, r3
 80088b0:	f006 fd46 	bl	800f340 <_ZNSaIcEC1Ev>
 80088b4:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80088b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80088bc:	499e      	ldr	r1, [pc, #632]	; (8008b38 <_ZN10SmartDryer12startProgramEh+0x360>)
 80088be:	4618      	mov	r0, r3
 80088c0:	f006 ffd6 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80088c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80088c8:	4618      	mov	r0, r3
 80088ca:	f006 fd3a 	bl	800f342 <_ZNSaIcED1Ev>
	String TempRead = "0°C", TempSet = "0";
 80088ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80088d2:	4618      	mov	r0, r3
 80088d4:	f006 fd34 	bl	800f340 <_ZNSaIcEC1Ev>
 80088d8:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80088dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088e0:	4996      	ldr	r1, [pc, #600]	; (8008b3c <_ZN10SmartDryer12startProgramEh+0x364>)
 80088e2:	4618      	mov	r0, r3
 80088e4:	f006 ffc4 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80088e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80088ec:	4618      	mov	r0, r3
 80088ee:	f006 fd28 	bl	800f342 <_ZNSaIcED1Ev>
 80088f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f006 fd22 	bl	800f340 <_ZNSaIcEC1Ev>
 80088fc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8008900:	f107 0314 	add.w	r3, r7, #20
 8008904:	498e      	ldr	r1, [pc, #568]	; (8008b40 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008906:	4618      	mov	r0, r3
 8008908:	f006 ffb2 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800890c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008910:	4618      	mov	r0, r3
 8008912:	f006 fd16 	bl	800f342 <_ZNSaIcED1Ev>
	DS1307_RTC::TIME_DATE_T ActualTime;
	StartHour = dryerPrograms[WichProgram].startTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.hour);
 8008916:	1cfb      	adds	r3, r7, #3
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	1d3b      	adds	r3, r7, #4
 800891c:	6819      	ldr	r1, [r3, #0]
 800891e:	4613      	mov	r3, r2
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4413      	add	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	440b      	add	r3, r1
 8008928:	3348      	adds	r3, #72	; 0x48
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2400      	movs	r4, #0
 800892e:	2b09      	cmp	r3, #9
 8008930:	d912      	bls.n	8008958 <_ZN10SmartDryer12startProgramEh+0x180>
 8008932:	1cfb      	adds	r3, r7, #3
 8008934:	781a      	ldrb	r2, [r3, #0]
 8008936:	1d3b      	adds	r3, r7, #4
 8008938:	6819      	ldr	r1, [r3, #0]
 800893a:	4613      	mov	r3, r2
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	4413      	add	r3, r2
 8008940:	00db      	lsls	r3, r3, #3
 8008942:	440b      	add	r3, r1
 8008944:	3348      	adds	r3, #72	; 0x48
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	461a      	mov	r2, r3
 800894a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800894e:	4611      	mov	r1, r2
 8008950:	4618      	mov	r0, r3
 8008952:	f7fa fd61 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008956:	e01a      	b.n	800898e <_ZN10SmartDryer12startProgramEh+0x1b6>
 8008958:	1cfb      	adds	r3, r7, #3
 800895a:	781a      	ldrb	r2, [r3, #0]
 800895c:	1d3b      	adds	r3, r7, #4
 800895e:	6819      	ldr	r1, [r3, #0]
 8008960:	4613      	mov	r3, r2
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	4413      	add	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	440b      	add	r3, r1
 800896a:	3348      	adds	r3, #72	; 0x48
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008974:	4611      	mov	r1, r2
 8008976:	4618      	mov	r0, r3
 8008978:	f7fa fd4e 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800897c:	2401      	movs	r4, #1
 800897e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008982:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8008986:	496e      	ldr	r1, [pc, #440]	; (8008b40 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008988:	4618      	mov	r0, r3
 800898a:	f7fb facf 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800898e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8008992:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008996:	4611      	mov	r1, r2
 8008998:	4618      	mov	r0, r3
 800899a:	f006 fe08 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800899e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80089a2:	4618      	mov	r0, r3
 80089a4:	f006 fdf7 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80089a8:	2c00      	cmp	r4, #0
 80089aa:	d004      	beq.n	80089b6 <_ZN10SmartDryer12startProgramEh+0x1de>
 80089ac:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80089b0:	4618      	mov	r0, r3
 80089b2:	f006 fdf0 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	StartMinute = dryerPrograms[WichProgram].startTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.minute);
 80089b6:	1cfb      	adds	r3, r7, #3
 80089b8:	781a      	ldrb	r2, [r3, #0]
 80089ba:	1d3b      	adds	r3, r7, #4
 80089bc:	6819      	ldr	r1, [r3, #0]
 80089be:	4613      	mov	r3, r2
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	4413      	add	r3, r2
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	440b      	add	r3, r1
 80089c8:	3347      	adds	r3, #71	; 0x47
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2400      	movs	r4, #0
 80089ce:	2b09      	cmp	r3, #9
 80089d0:	d912      	bls.n	80089f8 <_ZN10SmartDryer12startProgramEh+0x220>
 80089d2:	1cfb      	adds	r3, r7, #3
 80089d4:	781a      	ldrb	r2, [r3, #0]
 80089d6:	1d3b      	adds	r3, r7, #4
 80089d8:	6819      	ldr	r1, [r3, #0]
 80089da:	4613      	mov	r3, r2
 80089dc:	005b      	lsls	r3, r3, #1
 80089de:	4413      	add	r3, r2
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	440b      	add	r3, r1
 80089e4:	3347      	adds	r3, #71	; 0x47
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	461a      	mov	r2, r3
 80089ea:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fa fd11 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80089f6:	e01a      	b.n	8008a2e <_ZN10SmartDryer12startProgramEh+0x256>
 80089f8:	1cfb      	adds	r3, r7, #3
 80089fa:	781a      	ldrb	r2, [r3, #0]
 80089fc:	1d3b      	adds	r3, r7, #4
 80089fe:	6819      	ldr	r1, [r3, #0]
 8008a00:	4613      	mov	r3, r2
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	4413      	add	r3, r2
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	440b      	add	r3, r1
 8008a0a:	3347      	adds	r3, #71	; 0x47
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fa fcfe 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008a1c:	2401      	movs	r4, #1
 8008a1e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008a22:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8008a26:	4946      	ldr	r1, [pc, #280]	; (8008b40 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fb fa7f 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008a2e:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8008a32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008a36:	4611      	mov	r1, r2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f006 fdb8 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008a3e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008a42:	4618      	mov	r0, r3
 8008a44:	f006 fda7 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008a48:	2c00      	cmp	r4, #0
 8008a4a:	d004      	beq.n	8008a56 <_ZN10SmartDryer12startProgramEh+0x27e>
 8008a4c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8008a50:	4618      	mov	r0, r3
 8008a52:	f006 fda0 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndHour = dryerPrograms[WichProgram].endTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.hour);
 8008a56:	1cfb      	adds	r3, r7, #3
 8008a58:	781a      	ldrb	r2, [r3, #0]
 8008a5a:	1d3b      	adds	r3, r7, #4
 8008a5c:	6819      	ldr	r1, [r3, #0]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4413      	add	r3, r2
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	440b      	add	r3, r1
 8008a68:	3350      	adds	r3, #80	; 0x50
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2400      	movs	r4, #0
 8008a6e:	2b09      	cmp	r3, #9
 8008a70:	d912      	bls.n	8008a98 <_ZN10SmartDryer12startProgramEh+0x2c0>
 8008a72:	1cfb      	adds	r3, r7, #3
 8008a74:	781a      	ldrb	r2, [r3, #0]
 8008a76:	1d3b      	adds	r3, r7, #4
 8008a78:	6819      	ldr	r1, [r3, #0]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	4413      	add	r3, r2
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	440b      	add	r3, r1
 8008a84:	3350      	adds	r3, #80	; 0x50
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008a8e:	4611      	mov	r1, r2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fa fcc1 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008a96:	e01a      	b.n	8008ace <_ZN10SmartDryer12startProgramEh+0x2f6>
 8008a98:	1cfb      	adds	r3, r7, #3
 8008a9a:	781a      	ldrb	r2, [r3, #0]
 8008a9c:	1d3b      	adds	r3, r7, #4
 8008a9e:	6819      	ldr	r1, [r3, #0]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	4413      	add	r3, r2
 8008aa6:	00db      	lsls	r3, r3, #3
 8008aa8:	440b      	add	r3, r1
 8008aaa:	3350      	adds	r3, #80	; 0x50
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fa fcae 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008abc:	2401      	movs	r4, #1
 8008abe:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008ac2:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8008ac6:	491e      	ldr	r1, [pc, #120]	; (8008b40 <_ZN10SmartDryer12startProgramEh+0x368>)
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fb fa2f 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008ace:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008ad2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f006 fd68 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008ade:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f006 fd57 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008ae8:	2c00      	cmp	r4, #0
 8008aea:	d004      	beq.n	8008af6 <_ZN10SmartDryer12startProgramEh+0x31e>
 8008aec:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8008af0:	4618      	mov	r0, r3
 8008af2:	f006 fd50 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndMinute = dryerPrograms[WichProgram].endTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.minute);
 8008af6:	1cfb      	adds	r3, r7, #3
 8008af8:	781a      	ldrb	r2, [r3, #0]
 8008afa:	1d3b      	adds	r3, r7, #4
 8008afc:	6819      	ldr	r1, [r3, #0]
 8008afe:	4613      	mov	r3, r2
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	4413      	add	r3, r2
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	440b      	add	r3, r1
 8008b08:	334f      	adds	r3, #79	; 0x4f
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2400      	movs	r4, #0
 8008b0e:	2b09      	cmp	r3, #9
 8008b10:	d918      	bls.n	8008b44 <_ZN10SmartDryer12startProgramEh+0x36c>
 8008b12:	1cfb      	adds	r3, r7, #3
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	1d3b      	adds	r3, r7, #4
 8008b18:	6819      	ldr	r1, [r3, #0]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	4413      	add	r3, r2
 8008b20:	00db      	lsls	r3, r3, #3
 8008b22:	440b      	add	r3, r1
 8008b24:	334f      	adds	r3, #79	; 0x4f
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fa fc71 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008b36:	e020      	b.n	8008b7a <_ZN10SmartDryer12startProgramEh+0x3a2>
 8008b38:	08010574 	.word	0x08010574
 8008b3c:	08010754 	.word	0x08010754
 8008b40:	0801075c 	.word	0x0801075c
 8008b44:	1cfb      	adds	r3, r7, #3
 8008b46:	781a      	ldrb	r2, [r3, #0]
 8008b48:	1d3b      	adds	r3, r7, #4
 8008b4a:	6819      	ldr	r1, [r3, #0]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	005b      	lsls	r3, r3, #1
 8008b50:	4413      	add	r3, r2
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	440b      	add	r3, r1
 8008b56:	334f      	adds	r3, #79	; 0x4f
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fa fc58 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008b68:	2401      	movs	r4, #1
 8008b6a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8008b6e:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8008b72:	49da      	ldr	r1, [pc, #872]	; (8008edc <_ZN10SmartDryer12startProgramEh+0x704>)
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fb f9d9 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8008b7a:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8008b7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008b82:	4611      	mov	r1, r2
 8008b84:	4618      	mov	r0, r3
 8008b86:	f006 fd12 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008b8a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f006 fd01 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008b94:	2c00      	cmp	r4, #0
 8008b96:	d004      	beq.n	8008ba2 <_ZN10SmartDryer12startProgramEh+0x3ca>
 8008b98:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f006 fcfa 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	TempSet = std::to_string((uint32_t)dryerPrograms[WichProgram].tempSetted) + "°C";
 8008ba2:	1cfb      	adds	r3, r7, #3
 8008ba4:	781a      	ldrb	r2, [r3, #0]
 8008ba6:	1d3b      	adds	r3, r7, #4
 8008ba8:	6819      	ldr	r1, [r3, #0]
 8008baa:	4613      	mov	r3, r2
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	4413      	add	r3, r2
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	440b      	add	r3, r1
 8008bb4:	3358      	adds	r3, #88	; 0x58
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7f8 f94d 	bl	8000e58 <__aeabi_f2uiz>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fc fce8 	bl	800559c <_ZNSt7__cxx119to_stringEm>
 8008bcc:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008bd0:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8008bd4:	4ac2      	ldr	r2, [pc, #776]	; (8008ee0 <_ZN10SmartDryer12startProgramEh+0x708>)
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fb f9ea 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8008bdc:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8008be0:	f107 0314 	add.w	r3, r7, #20
 8008be4:	4611      	mov	r1, r2
 8008be6:	4618      	mov	r0, r3
 8008be8:	f006 fce1 	bl	800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008bec:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f006 fcd0 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008bf6:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f006 fccb 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitStartProgram)
 8008c00:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f040 82d8 	bne.w	80091ba <_ZN10SmartDryer12startProgramEh+0x9e2>
	{
		if(programStartedTimer->isFinished(true, 500))
 8008c0a:	1d3b      	adds	r3, r7, #4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008c14:	2101      	movs	r1, #1
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fa fbcb 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d008      	beq.n	8008c34 <_ZN10SmartDryer12startProgramEh+0x45c>
		{
			clock->getTimeDate(ActualTime);
 8008c22:	1d3b      	adds	r3, r7, #4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f107 020c 	add.w	r2, r7, #12
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fa fd80 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		}
//		TempRead = std::to_string(chamberTemperature.readedTemperatureFL);
		display->clearFrameBuffer();
 8008c34:	1d3b      	adds	r3, r7, #4
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fb fe1b 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8008c40:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8008c44:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8008c48:	1d3b      	adds	r3, r7, #4
 8008c4a:	6818      	ldr	r0, [r3, #0]
 8008c4c:	f7fd f8d1 	bl	8005df2 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Temp. letta", NHDST7565_LCD::LEFT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 8008c50:	1d3b      	adds	r3, r7, #4
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681c      	ldr	r4, [r3, #0]
 8008c56:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f006 fb70 	bl	800f340 <_ZNSaIcEC1Ev>
 8008c60:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8008c64:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8008c68:	499e      	ldr	r1, [pc, #632]	; (8008ee4 <_ZN10SmartDryer12startProgramEh+0x70c>)
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f006 fe00 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008c70:	1d3b      	adds	r3, r7, #4
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c7a:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	230a      	movs	r3, #10
 8008c82:	2282      	movs	r2, #130	; 0x82
 8008c84:	4620      	mov	r0, r4
 8008c86:	f7fb fe1e 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008c8a:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f006 fc81 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008c94:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f006 fb52 	bl	800f342 <_ZNSaIcED1Ev>
		display->drawString("Temp. target", NHDST7565_LCD::RIGHT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 8008c9e:	1d3b      	adds	r3, r7, #4
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681c      	ldr	r4, [r3, #0]
 8008ca4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f006 fb49 	bl	800f340 <_ZNSaIcEC1Ev>
 8008cae:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8008cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008cb6:	498c      	ldr	r1, [pc, #560]	; (8008ee8 <_ZN10SmartDryer12startProgramEh+0x710>)
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f006 fdd9 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008cbe:	1d3b      	adds	r3, r7, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008cc8:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	230a      	movs	r3, #10
 8008cd0:	2284      	movs	r2, #132	; 0x84
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f7fb fdf7 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f006 fc5a 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008ce2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f006 fb2b 	bl	800f342 <_ZNSaIcED1Ev>
		display->drawString(TempRead, NHDST7565_LCD::LEFT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008cec:	1d3b      	adds	r3, r7, #4
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681c      	ldr	r4, [r3, #0]
 8008cf2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008cf6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f006 fd84 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008d02:	1d3b      	adds	r3, r7, #4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008d0c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	2314      	movs	r3, #20
 8008d14:	2282      	movs	r2, #130	; 0x82
 8008d16:	4620      	mov	r0, r4
 8008d18:	f7fb fdd5 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008d1c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d20:	4618      	mov	r0, r3
 8008d22:	f006 fc38 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(TempSet, NHDST7565_LCD::RIGHT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008d26:	1d3b      	adds	r3, r7, #4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681c      	ldr	r4, [r3, #0]
 8008d2c:	f107 0214 	add.w	r2, r7, #20
 8008d30:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8008d34:	4611      	mov	r1, r2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f006 fd67 	bl	800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008d3c:	1d3b      	adds	r3, r7, #4
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008d46:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	2314      	movs	r3, #20
 8008d4e:	2284      	movs	r2, #132	; 0x84
 8008d50:	4620      	mov	r0, r4
 8008d52:	f7fb fdb8 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008d56:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f006 fc1b 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Inizio programma", NHDST7565_LCD::LEFT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 8008d60:	1d3b      	adds	r3, r7, #4
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681c      	ldr	r4, [r3, #0]
 8008d66:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f006 fae8 	bl	800f340 <_ZNSaIcEC1Ev>
 8008d70:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8008d74:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8008d78:	495c      	ldr	r1, [pc, #368]	; (8008eec <_ZN10SmartDryer12startProgramEh+0x714>)
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f006 fd78 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d80:	1d3b      	adds	r3, r7, #4
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d8a:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	2328      	movs	r3, #40	; 0x28
 8008d92:	2282      	movs	r2, #130	; 0x82
 8008d94:	4620      	mov	r0, r4
 8008d96:	f7fb fd96 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008d9a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f006 fbf9 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008da4:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8008da8:	4618      	mov	r0, r3
 8008daa:	f006 faca 	bl	800f342 <_ZNSaIcED1Ev>
		display->drawString("Fine programma", NHDST7565_LCD::RIGHT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 8008dae:	1d3b      	adds	r3, r7, #4
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681c      	ldr	r4, [r3, #0]
 8008db4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8008db8:	4618      	mov	r0, r3
 8008dba:	f006 fac1 	bl	800f340 <_ZNSaIcEC1Ev>
 8008dbe:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8008dc2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008dc6:	494a      	ldr	r1, [pc, #296]	; (8008ef0 <_ZN10SmartDryer12startProgramEh+0x718>)
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f006 fd51 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008dce:	1d3b      	adds	r3, r7, #4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008dd8:	f507 711a 	add.w	r1, r7, #616	; 0x268
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	2328      	movs	r3, #40	; 0x28
 8008de0:	2284      	movs	r2, #132	; 0x84
 8008de2:	4620      	mov	r0, r4
 8008de4:	f7fb fd6f 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008de8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008dec:	4618      	mov	r0, r3
 8008dee:	f006 fbd2 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008df2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8008df6:	4618      	mov	r0, r3
 8008df8:	f006 faa3 	bl	800f342 <_ZNSaIcED1Ev>
		display->drawString(StartHour + ":" + StartMinute, NHDST7565_LCD::LEFT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008dfc:	1d3b      	adds	r3, r7, #4
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681c      	ldr	r4, [r3, #0]
 8008e02:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8008e06:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8008e0a:	4a3a      	ldr	r2, [pc, #232]	; (8008ef4 <_ZN10SmartDryer12startProgramEh+0x71c>)
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fb f8a5 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8008e12:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8008e16:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8008e1a:	f507 7127 	add.w	r1, r7, #668	; 0x29c
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fb f8af 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8008e24:	1d3b      	adds	r3, r7, #4
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008e2e:	f507 7121 	add.w	r1, r7, #644	; 0x284
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	2332      	movs	r3, #50	; 0x32
 8008e36:	2282      	movs	r2, #130	; 0x82
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f7fb fd44 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008e3e:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8008e42:	4618      	mov	r0, r3
 8008e44:	f006 fba7 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008e48:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f006 fba2 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(EndHour + ":" + EndMinute, NHDST7565_LCD::RIGHT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008e52:	1d3b      	adds	r3, r7, #4
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681c      	ldr	r4, [r3, #0]
 8008e58:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8008e5c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8008e60:	4a24      	ldr	r2, [pc, #144]	; (8008ef4 <_ZN10SmartDryer12startProgramEh+0x71c>)
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fb f87a 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8008e68:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8008e6c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008e70:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fb f884 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8008e7a:	1d3b      	adds	r3, r7, #4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008e84:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	2332      	movs	r3, #50	; 0x32
 8008e8c:	2284      	movs	r2, #132	; 0x84
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7fb fd19 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008e94:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f006 fb7c 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008e9e:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f006 fb77 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->sendFrameBuffer();
 8008ea8:	1d3b      	adds	r3, r7, #4
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fb fcee 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8008eb4:	2308      	movs	r3, #8
 8008eb6:	f887 3335 	strb.w	r3, [r7, #821]	; 0x335
		WichKey = keyboard->checkKey();
 8008eba:	1d3b      	adds	r3, r7, #4
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fc fad3 	bl	800546c <_ZN8DryerKey8checkKeyEv>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 3335 	strb.w	r3, [r7, #821]	; 0x335
		switch(WichKey)
 8008ecc:	f897 3335 	ldrb.w	r3, [r7, #821]	; 0x335
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d050      	beq.n	8008f76 <_ZN10SmartDryer12startProgramEh+0x79e>
 8008ed4:	2b06      	cmp	r3, #6
 8008ed6:	d00f      	beq.n	8008ef8 <_ZN10SmartDryer12startProgramEh+0x720>
				programStartedTimer->stopTimer();
				ProgramEnd = true;
				ExitStartProgram = true;
				break;
			default:
				break;
 8008ed8:	e04e      	b.n	8008f78 <_ZN10SmartDryer12startProgramEh+0x7a0>
 8008eda:	bf00      	nop
 8008edc:	0801075c 	.word	0x0801075c
 8008ee0:	08010760 	.word	0x08010760
 8008ee4:	08010764 	.word	0x08010764
 8008ee8:	08010770 	.word	0x08010770
 8008eec:	08010780 	.word	0x08010780
 8008ef0:	08010794 	.word	0x08010794
 8008ef4:	080107a4 	.word	0x080107a4
				statusParam->dryerOn = false;
 8008ef8:	1d3b      	adds	r3, r7, #4
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	2200      	movs	r2, #0
 8008f00:	701a      	strb	r2, [r3, #0]
				statusParam->programStarted = false;
 8008f02:	1d3b      	adds	r3, r7, #4
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f08:	2200      	movs	r2, #0
 8008f0a:	721a      	strb	r2, [r3, #8]
				ledStatus = PROGRAM_END;
 8008f0c:	1d3b      	adds	r3, r7, #4
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8008f14:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
				display->drawFullScreenPopUp("Programma terminato", 2000);
 8008f18:	1d3b      	adds	r3, r7, #4
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681c      	ldr	r4, [r3, #0]
 8008f1e:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8008f22:	4618      	mov	r0, r3
 8008f24:	f006 fa0c 	bl	800f340 <_ZNSaIcEC1Ev>
 8008f28:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 8008f2c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8008f30:	49b8      	ldr	r1, [pc, #736]	; (8009214 <_ZN10SmartDryer12startProgramEh+0xa3c>)
 8008f32:	4618      	mov	r0, r3
 8008f34:	f006 fc9c 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f38:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8008f3c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008f40:	4619      	mov	r1, r3
 8008f42:	4620      	mov	r0, r4
 8008f44:	f7fb ffe8 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 8008f48:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f006 fb22 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008f52:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8008f56:	4618      	mov	r0, r3
 8008f58:	f006 f9f3 	bl	800f342 <_ZNSaIcED1Ev>
				programStartedTimer->stopTimer();
 8008f5c:	1d3b      	adds	r3, r7, #4
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fa fa01 	bl	800336a <_ZN11ChronoTimer9stopTimerEv>
				ProgramEnd = true;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
				ExitStartProgram = true;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
				break;
 8008f74:	e000      	b.n	8008f78 <_ZN10SmartDryer12startProgramEh+0x7a0>
				break;
 8008f76:	bf00      	nop
		}

		if(!statusParam->programStarted && !ProgramEnd)
 8008f78:	1d3b      	adds	r3, r7, #4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	7a1b      	ldrb	r3, [r3, #8]
 8008f80:	f083 0301 	eor.w	r3, r3, #1
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 80a1 	beq.w	80090ce <_ZN10SmartDryer12startProgramEh+0x8f6>
 8008f8c:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
 8008f90:	f083 0301 	eor.w	r3, r3, #1
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 8099 	beq.w	80090ce <_ZN10SmartDryer12startProgramEh+0x8f6>
		{
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour && ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 8008f9c:	f107 030c 	add.w	r3, r7, #12
 8008fa0:	7899      	ldrb	r1, [r3, #2]
 8008fa2:	1cfb      	adds	r3, r7, #3
 8008fa4:	781a      	ldrb	r2, [r3, #0]
 8008fa6:	1d3b      	adds	r3, r7, #4
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	4613      	mov	r3, r2
 8008fac:	005b      	lsls	r3, r3, #1
 8008fae:	4413      	add	r3, r2
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	4403      	add	r3, r0
 8008fb4:	3348      	adds	r3, #72	; 0x48
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	4299      	cmp	r1, r3
 8008fba:	f0c0 80f8 	bcc.w	80091ae <_ZN10SmartDryer12startProgramEh+0x9d6>
 8008fbe:	f107 030c 	add.w	r3, r7, #12
 8008fc2:	7859      	ldrb	r1, [r3, #1]
 8008fc4:	1cfb      	adds	r3, r7, #3
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	1d3b      	adds	r3, r7, #4
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	4413      	add	r3, r2
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	4403      	add	r3, r0
 8008fd6:	3347      	adds	r3, #71	; 0x47
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	4299      	cmp	r1, r3
 8008fdc:	f0c0 80e7 	bcc.w	80091ae <_ZN10SmartDryer12startProgramEh+0x9d6>
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day && ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour && ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	78d9      	ldrb	r1, [r3, #3]
 8008fe6:	1cfb      	adds	r3, r7, #3
 8008fe8:	781a      	ldrb	r2, [r3, #0]
 8008fea:	1d3b      	adds	r3, r7, #4
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	4413      	add	r3, r2
 8008ff4:	00db      	lsls	r3, r3, #3
 8008ff6:	4403      	add	r3, r0
 8008ff8:	3349      	adds	r3, #73	; 0x49
 8008ffa:	781b      	ldrb	r3, [r3, #0]
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour && ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 8008ffc:	4299      	cmp	r1, r3
 8008ffe:	f0c0 80d6 	bcc.w	80091ae <_ZN10SmartDryer12startProgramEh+0x9d6>
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day && ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour && ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 8009002:	f107 030c 	add.w	r3, r7, #12
 8009006:	7899      	ldrb	r1, [r3, #2]
 8009008:	1cfb      	adds	r3, r7, #3
 800900a:	781a      	ldrb	r2, [r3, #0]
 800900c:	1d3b      	adds	r3, r7, #4
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	4613      	mov	r3, r2
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	4413      	add	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4403      	add	r3, r0
 800901a:	3350      	adds	r3, #80	; 0x50
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	4299      	cmp	r1, r3
 8009020:	f200 80c5 	bhi.w	80091ae <_ZN10SmartDryer12startProgramEh+0x9d6>
 8009024:	f107 030c 	add.w	r3, r7, #12
 8009028:	7859      	ldrb	r1, [r3, #1]
 800902a:	1cfb      	adds	r3, r7, #3
 800902c:	781a      	ldrb	r2, [r3, #0]
 800902e:	1d3b      	adds	r3, r7, #4
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	4613      	mov	r3, r2
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	4413      	add	r3, r2
 8009038:	00db      	lsls	r3, r3, #3
 800903a:	4403      	add	r3, r0
 800903c:	334f      	adds	r3, #79	; 0x4f
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	4299      	cmp	r1, r3
 8009042:	f200 80b4 	bhi.w	80091ae <_ZN10SmartDryer12startProgramEh+0x9d6>
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day)
 8009046:	f107 030c 	add.w	r3, r7, #12
 800904a:	78d9      	ldrb	r1, [r3, #3]
 800904c:	1cfb      	adds	r3, r7, #3
 800904e:	781a      	ldrb	r2, [r3, #0]
 8009050:	1d3b      	adds	r3, r7, #4
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	4613      	mov	r3, r2
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	4413      	add	r3, r2
 800905a:	00db      	lsls	r3, r3, #3
 800905c:	4403      	add	r3, r0
 800905e:	3351      	adds	r3, #81	; 0x51
 8009060:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day && ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour && ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 8009062:	4299      	cmp	r1, r3
 8009064:	f200 80a3 	bhi.w	80091ae <_ZN10SmartDryer12startProgramEh+0x9d6>
			{
				statusParam->programStarted = true;
 8009068:	1d3b      	adds	r3, r7, #4
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906e:	2201      	movs	r2, #1
 8009070:	721a      	strb	r2, [r3, #8]
				statusParam->dryerOn = true;
 8009072:	1d3b      	adds	r3, r7, #4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009078:	2201      	movs	r2, #1
 800907a:	701a      	strb	r2, [r3, #0]
				ledStatus = PROGRAM_INIT;
 800907c:	1d3b      	adds	r3, r7, #4
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f240 12f5 	movw	r2, #501	; 0x1f5
 8009084:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
				display->drawFullScreenPopUp("Programma iniziato", 2000);
 8009088:	1d3b      	adds	r3, r7, #4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681c      	ldr	r4, [r3, #0]
 800908e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8009092:	4618      	mov	r0, r3
 8009094:	f006 f954 	bl	800f340 <_ZNSaIcEC1Ev>
 8009098:	f507 7246 	add.w	r2, r7, #792	; 0x318
 800909c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80090a0:	495d      	ldr	r1, [pc, #372]	; (8009218 <_ZN10SmartDryer12startProgramEh+0xa40>)
 80090a2:	4618      	mov	r0, r3
 80090a4:	f006 fbe4 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80090a8:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80090ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80090b0:	4619      	mov	r1, r3
 80090b2:	4620      	mov	r0, r4
 80090b4:	f7fb ff30 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 80090b8:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80090bc:	4618      	mov	r0, r3
 80090be:	f006 fa6a 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80090c2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80090c6:	4618      	mov	r0, r3
 80090c8:	f006 f93b 	bl	800f342 <_ZNSaIcED1Ev>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour && ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 80090cc:	e06f      	b.n	80091ae <_ZN10SmartDryer12startProgramEh+0x9d6>
			}
		}
		else
		{
			if(!ProgramEnd)
 80090ce:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
 80090d2:	f083 0301 	eor.w	r3, r3, #1
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d069      	beq.n	80091b0 <_ZN10SmartDryer12startProgramEh+0x9d8>
			{
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour && ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 80090dc:	f107 030c 	add.w	r3, r7, #12
 80090e0:	7899      	ldrb	r1, [r3, #2]
 80090e2:	1cfb      	adds	r3, r7, #3
 80090e4:	781a      	ldrb	r2, [r3, #0]
 80090e6:	1d3b      	adds	r3, r7, #4
 80090e8:	6818      	ldr	r0, [r3, #0]
 80090ea:	4613      	mov	r3, r2
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	4413      	add	r3, r2
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	4403      	add	r3, r0
 80090f4:	3350      	adds	r3, #80	; 0x50
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	4299      	cmp	r1, r3
 80090fa:	d159      	bne.n	80091b0 <_ZN10SmartDryer12startProgramEh+0x9d8>
 80090fc:	f107 030c 	add.w	r3, r7, #12
 8009100:	7859      	ldrb	r1, [r3, #1]
 8009102:	1cfb      	adds	r3, r7, #3
 8009104:	781a      	ldrb	r2, [r3, #0]
 8009106:	1d3b      	adds	r3, r7, #4
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	4613      	mov	r3, r2
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	4413      	add	r3, r2
 8009110:	00db      	lsls	r3, r3, #3
 8009112:	4403      	add	r3, r0
 8009114:	334f      	adds	r3, #79	; 0x4f
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	4299      	cmp	r1, r3
 800911a:	d149      	bne.n	80091b0 <_ZN10SmartDryer12startProgramEh+0x9d8>
						ActualTime.day == dryerPrograms[WichProgram].endTime.day)
 800911c:	f107 030c 	add.w	r3, r7, #12
 8009120:	78d9      	ldrb	r1, [r3, #3]
 8009122:	1cfb      	adds	r3, r7, #3
 8009124:	781a      	ldrb	r2, [r3, #0]
 8009126:	1d3b      	adds	r3, r7, #4
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	4613      	mov	r3, r2
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	4413      	add	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	4403      	add	r3, r0
 8009134:	3351      	adds	r3, #81	; 0x51
 8009136:	781b      	ldrb	r3, [r3, #0]
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour && ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 8009138:	4299      	cmp	r1, r3
 800913a:	d139      	bne.n	80091b0 <_ZN10SmartDryer12startProgramEh+0x9d8>
				{
					statusParam->programStarted = false;
 800913c:	1d3b      	adds	r3, r7, #4
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	2200      	movs	r2, #0
 8009144:	721a      	strb	r2, [r3, #8]
					statusParam->dryerOn = false;
 8009146:	1d3b      	adds	r3, r7, #4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]
					ledStatus = PROGRAM_END;
 8009150:	1d3b      	adds	r3, r7, #4
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8009158:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
					ProgramEnd = true;
 800915c:	2301      	movs	r3, #1
 800915e:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
					display->drawFullScreenPopUp("Programma terminato", 2000);
 8009162:	1d3b      	adds	r3, r7, #4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681c      	ldr	r4, [r3, #0]
 8009168:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800916c:	4618      	mov	r0, r3
 800916e:	f006 f8e7 	bl	800f340 <_ZNSaIcEC1Ev>
 8009172:	f507 724d 	add.w	r2, r7, #820	; 0x334
 8009176:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800917a:	4926      	ldr	r1, [pc, #152]	; (8009214 <_ZN10SmartDryer12startProgramEh+0xa3c>)
 800917c:	4618      	mov	r0, r3
 800917e:	f006 fb77 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009182:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8009186:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800918a:	4619      	mov	r1, r3
 800918c:	4620      	mov	r0, r4
 800918e:	f7fb fec3 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 8009192:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8009196:	4618      	mov	r0, r3
 8009198:	f006 f9fd 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800919c:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80091a0:	4618      	mov	r0, r3
 80091a2:	f006 f8ce 	bl	800f342 <_ZNSaIcED1Ev>
					ExitStartProgram = true;
 80091a6:	2301      	movs	r3, #1
 80091a8:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
 80091ac:	e000      	b.n	80091b0 <_ZN10SmartDryer12startProgramEh+0x9d8>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour && ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 80091ae:	bf00      	nop
				}
			}
		}
		peripheralsControl();
 80091b0:	1d3b      	adds	r3, r7, #4
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	f7fc fe08 	bl	8005dc8 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitStartProgram)
 80091b8:	e522      	b.n	8008c00 <_ZN10SmartDryer12startProgramEh+0x428>
	String TempRead = "0°C", TempSet = "0";
 80091ba:	f107 0314 	add.w	r3, r7, #20
 80091be:	4618      	mov	r0, r3
 80091c0:	f006 f9e9 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80091c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091c8:	4618      	mov	r0, r3
 80091ca:	f006 f9e4 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 80091ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80091d2:	4618      	mov	r0, r3
 80091d4:	f006 f9df 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80091d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80091dc:	4618      	mov	r0, r3
 80091de:	f006 f9da 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80091e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80091e6:	4618      	mov	r0, r3
 80091e8:	f006 f9d5 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80091ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80091f0:	4618      	mov	r0, r3
 80091f2:	f006 f9d0 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 80091f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80091fa:	4618      	mov	r0, r3
 80091fc:	f006 f9cb 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009200:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009204:	4618      	mov	r0, r3
 8009206:	f006 f9c6 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800920a:	bf00      	nop
 800920c:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8009210:	46bd      	mov	sp, r7
 8009212:	bd90      	pop	{r4, r7, pc}
 8009214:	080107a8 	.word	0x080107a8
 8009218:	080107bc 	.word	0x080107bc

0800921c <_ZN10SmartDryer3runEv>:

void SmartDryer::run()
{
 800921c:	b590      	push	{r4, r7, lr}
 800921e:	b08b      	sub	sp, #44	; 0x2c
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	display->drawFullScreenPopUp("Smart Dryer", 1000);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681c      	ldr	r4, [r3, #0]
 8009228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800922c:	4618      	mov	r0, r3
 800922e:	f006 f887 	bl	800f340 <_ZNSaIcEC1Ev>
 8009232:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009236:	f107 030c 	add.w	r3, r7, #12
 800923a:	4936      	ldr	r1, [pc, #216]	; (8009314 <_ZN10SmartDryer3runEv+0xf8>)
 800923c:	4618      	mov	r0, r3
 800923e:	f006 fb17 	bl	800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009242:	f107 030c 	add.w	r3, r7, #12
 8009246:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800924a:	4619      	mov	r1, r3
 800924c:	4620      	mov	r0, r4
 800924e:	f7fb fe63 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 8009252:	f107 030c 	add.w	r3, r7, #12
 8009256:	4618      	mov	r0, r3
 8009258:	f006 f99d 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800925c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009260:	4618      	mov	r0, r3
 8009262:	f006 f86e 	bl	800f342 <_ZNSaIcED1Ev>
	while(1)
	{
		switch(screen)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800926c:	2b09      	cmp	r3, #9
 800926e:	d84f      	bhi.n	8009310 <_ZN10SmartDryer3runEv+0xf4>
 8009270:	a201      	add	r2, pc, #4	; (adr r2, 8009278 <_ZN10SmartDryer3runEv+0x5c>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	080092a1 	.word	0x080092a1
 800927c:	080092a9 	.word	0x080092a9
 8009280:	080092b9 	.word	0x080092b9
 8009284:	080092c9 	.word	0x080092c9
 8009288:	080092d9 	.word	0x080092d9
 800928c:	080092d9 	.word	0x080092d9
 8009290:	080092d9 	.word	0x080092d9
 8009294:	080092f5 	.word	0x080092f5
 8009298:	080092f5 	.word	0x080092f5
 800929c:	080092f5 	.word	0x080092f5
		{
			case NAV_MENU:
				navMenu();
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7fd f963 	bl	800656c <_ZN10SmartDryer7navMenuEv>
				break;
 80092a6:	e034      	b.n	8009312 <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_TIME:
				changeTime();
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7fe f9f9 	bl	80076a0 <_ZN10SmartDryer10changeTimeEv>
				screen = NAV_MENU;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
				break;
 80092b6:	e02c      	b.n	8009312 <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_DATE:
				changeDate();
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7fe fba7 	bl	8007a0c <_ZN10SmartDryer10changeDateEv>
				screen = NAV_MENU;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
				break;
 80092c6:	e024      	b.n	8009312 <_ZN10SmartDryer3runEv+0xf6>
			case SHOW_INFO:
				//TODO aggiungere schermata con info su: temperatura camera, ora, data, stato dryer, numero versione
				showInfo();
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7fe fdd1 	bl	8007e70 <_ZN10SmartDryer8showInfoEv>
				screen = NAV_MENU;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
				break;
 80092d6:	e01c      	b.n	8009312 <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_PROGRAM_1:
			case CHANGE_PROGRAM_2:
			case CHANGE_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				changeProgram(screen - CHANGE_PROGRAM_1);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80092de:	3b04      	subs	r3, #4
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7fe fdcd 	bl	8007e84 <_ZN10SmartDryer13changeProgramEh>
				screen = NAV_MENU;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
				break;
 80092f2:	e00e      	b.n	8009312 <_ZN10SmartDryer3runEv+0xf6>
			case START_PROGRAM_1:
			case START_PROGRAM_2:
			case START_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				startProgram(screen - START_PROGRAM_1);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80092fa:	3b07      	subs	r3, #7
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff fa69 	bl	80087d8 <_ZN10SmartDryer12startProgramEh>
				screen = NAV_MENU;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
				break;
 800930e:	e000      	b.n	8009312 <_ZN10SmartDryer3runEv+0xf6>
			default:
				break;
 8009310:	bf00      	nop
		switch(screen)
 8009312:	e7a8      	b.n	8009266 <_ZN10SmartDryer3runEv+0x4a>
 8009314:	080107d0 	.word	0x080107d0

08009318 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4618      	mov	r0, r3
 8009324:	f000 f83a 	bl	800939c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800933c:	6838      	ldr	r0, [r7, #0]
 800933e:	f7fa fe69 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8009342:	4603      	mov	r3, r0
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f857 	bl	80093fa <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	461a      	mov	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	10db      	asrs	r3, r3, #3
 800936a:	4a04      	ldr	r2, [pc, #16]	; (800937c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800936c:	fb02 f303 	mul.w	r3, r2, r3
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	bc80      	pop	{r7}
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	aaaaaaab 	.word	0xaaaaaaab

08009380 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f862 	bl	8009458 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 f86e 	bl	8009488 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4618      	mov	r0, r3
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4618      	mov	r0, r3
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bc80      	pop	{r7}
 80093c8:	4770      	bx	lr

080093ca <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 f87d 	bl	80094d8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr

080093fa <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 80093fa:	b5b0      	push	{r4, r5, r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	429a      	cmp	r2, r3
 800940e:	d012      	beq.n	8009436 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009410:	687c      	ldr	r4, [r7, #4]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	685d      	ldr	r5, [r3, #4]
 8009416:	6838      	ldr	r0, [r7, #0]
 8009418:	f7ff ffe5 	bl	80093e6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800941c:	4603      	mov	r3, r0
 800941e:	461a      	mov	r2, r3
 8009420:	4629      	mov	r1, r5
 8009422:	4620      	mov	r0, r4
 8009424:	f000 f865 	bl	80094f2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f103 0218 	add.w	r2, r3, #24
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8009434:	e00c      	b.n	8009450 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f86e 	bl	8009518 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800943c:	4604      	mov	r4, r0
 800943e:	6838      	ldr	r0, [r7, #0]
 8009440:	f7ff ffd1 	bl	80093e6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009444:	4603      	mov	r3, r0
 8009446:	461a      	mov	r2, r3
 8009448:	4621      	mov	r1, r4
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f876 	bl	800953c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bdb0      	pop	{r4, r5, r7, pc}

08009458 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8009458:	b590      	push	{r4, r7, lr}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685c      	ldr	r4, [r3, #4]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4618      	mov	r0, r3
 800946a:	f7ff ffa4 	bl	80093b6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800946e:	4603      	mov	r3, r0
 8009470:	461a      	mov	r2, r3
 8009472:	4621      	mov	r1, r4
 8009474:	6838      	ldr	r0, [r7, #0]
 8009476:	f7ff ffa8 	bl	80093ca <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	605a      	str	r2, [r3, #4]
      }
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	bd90      	pop	{r4, r7, pc}

08009488 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f8eb 	bl	800966c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	605a      	str	r2, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	609a      	str	r2, [r3, #8]
	{ }
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	607a      	str	r2, [r7, #4]
	if (__p)
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	68b9      	ldr	r1, [r7, #8]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 f8da 	bl	8009684 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 80094d0:	bf00      	nop
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f8e6 	bl	80096b6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	60b9      	str	r1, [r7, #8]
 80094fc:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7ff ff71 	bl	80093e6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009504:	4603      	mov	r3, r0
 8009506:	461a      	mov	r2, r3
 8009508:	68b9      	ldr	r1, [r7, #8]
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 f8eb 	bl	80096e6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 8009510:	bf00      	nop
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	1d1a      	adds	r2, r3, #4
 8009524:	f107 030c 	add.w	r3, r7, #12
 8009528:	4611      	mov	r1, r2
 800952a:	4618      	mov	r0, r3
 800952c:	f000 f8f5 	bl	800971a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800953c:	b5b0      	push	{r4, r5, r7, lr}
 800953e:	b08a      	sub	sp, #40	; 0x28
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8009548:	4a46      	ldr	r2, [pc, #280]	; (8009664 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 800954a:	2101      	movs	r1, #1
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f8f3 	bl	8009738 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8009552:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 f937 	bl	80097c8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800955a:	4603      	mov	r3, r0
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	f107 0214 	add.w	r2, r7, #20
 8009562:	f107 0308 	add.w	r3, r7, #8
 8009566:	4611      	mov	r1, r2
 8009568:	4618      	mov	r0, r3
 800956a:	f000 f93d 	bl	80097e8 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 800956e:	4603      	mov	r3, r0
 8009570:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009576:	4618      	mov	r0, r3
 8009578:	f000 f952 	bl	8009820 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800957c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8009582:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009584:	6a3a      	ldr	r2, [r7, #32]
 8009586:	4613      	mov	r3, r2
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	4413      	add	r3, r2
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	189d      	adds	r5, r3, r2
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7ff ff26 	bl	80093e6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800959a:	4603      	mov	r3, r0
 800959c:	461a      	mov	r2, r3
 800959e:	4629      	mov	r1, r5
 80095a0:	4620      	mov	r0, r4
 80095a2:	f7ff ffa6 	bl	80094f2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80095a6:	2300      	movs	r3, #0
 80095a8:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681c      	ldr	r4, [r3, #0]
 80095ae:	f107 0308 	add.w	r3, r7, #8
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 f948 	bl	8009848 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80095b8:	4603      	mov	r3, r0
 80095ba:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff fef9 	bl	80093b6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80095c4:	4603      	mov	r3, r0
	  __new_finish
 80095c6:	69fa      	ldr	r2, [r7, #28]
 80095c8:	4629      	mov	r1, r5
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 f946 	bl	800985c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80095d0:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	3318      	adds	r3, #24
 80095d6:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 80095d8:	f107 0308 	add.w	r3, r7, #8
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 f933 	bl	8009848 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80095e2:	4603      	mov	r3, r0
 80095e4:	681c      	ldr	r4, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff fee2 	bl	80093b6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80095f2:	4603      	mov	r3, r0
	  __new_finish
 80095f4:	69ba      	ldr	r2, [r7, #24]
 80095f6:	4629      	mov	r1, r5
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 f92f 	bl	800985c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80095fe:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681c      	ldr	r4, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4618      	mov	r0, r3
 800960c:	f7ff fed3 	bl	80093b6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8009610:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009612:	461a      	mov	r2, r3
 8009614:	4629      	mov	r1, r5
 8009616:	4620      	mov	r0, r4
 8009618:	f7ff fed7 	bl	80093ca <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8009626:	461a      	mov	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	10db      	asrs	r3, r3, #3
 8009630:	4a0d      	ldr	r2, [pc, #52]	; (8009668 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 8009632:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8009636:	461a      	mov	r2, r3
 8009638:	f7ff ff3b 	bl	80094b2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	69fa      	ldr	r2, [r7, #28]
 8009640:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	69ba      	ldr	r2, [r7, #24]
 8009646:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964a:	4613      	mov	r3, r2
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	4413      	add	r3, r2
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	461a      	mov	r2, r3
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	441a      	add	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	609a      	str	r2, [r3, #8]
    }
 800965c:	bf00      	nop
 800965e:	3728      	adds	r7, #40	; 0x28
 8009660:	46bd      	mov	sp, r7
 8009662:	bdb0      	pop	{r4, r5, r7, pc}
 8009664:	080107dc 	.word	0x080107dc
 8009668:	aaaaaaab 	.word	0xaaaaaaab

0800966c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f90a 	bl	800988e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	68b9      	ldr	r1, [r7, #8]
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 f904 	bl	80098a2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 800969a:	bf00      	nop
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80096a2:	b480      	push	{r7}
 80096a4:	b083      	sub	sp, #12
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bc80      	pop	{r7}
 80096b4:	4770      	bx	lr

080096b6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d00a      	beq.n	80096de <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7ff ffea 	bl	80096a2 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80096ce:	4603      	mov	r3, r0
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 f8f3 	bl	80098bc <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3318      	adds	r3, #24
 80096da:	607b      	str	r3, [r7, #4]
 80096dc:	e7f0      	b.n	80096c0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80096e6:	b590      	push	{r4, r7, lr}
 80096e8:	b085      	sub	sp, #20
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff fe77 	bl	80093e6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80096f8:	4604      	mov	r4, r0
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	4619      	mov	r1, r3
 80096fe:	2018      	movs	r0, #24
 8009700:	f7fb ff41 	bl	8005586 <_ZnwjPv>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x2c>
 800970a:	4621      	mov	r1, r4
 800970c:	4618      	mov	r0, r3
 800970e:	f005 ff28 	bl	800f562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8009712:	bf00      	nop
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	bd90      	pop	{r4, r7, pc}

0800971a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800971a:	b480      	push	{r7}
 800971c:	b083      	sub	sp, #12
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4618      	mov	r0, r3
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	bc80      	pop	{r7}
 8009736:	4770      	bx	lr

08009738 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009738:	b590      	push	{r4, r7, lr}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 f8c4 	bl	80098d2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800974a:	4604      	mov	r4, r0
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f7ff fe01 	bl	8009354 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009752:	4603      	mov	r3, r0
 8009754:	1ae2      	subs	r2, r4, r3
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	429a      	cmp	r2, r3
 800975a:	bf34      	ite	cc
 800975c:	2301      	movcc	r3, #1
 800975e:	2300      	movcs	r3, #0
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4618      	mov	r0, r3
 800976a:	f005 fdf1 	bl	800f350 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff fdf0 	bl	8009354 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8009774:	4604      	mov	r4, r0
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f7ff fdec 	bl	8009354 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800977c:	4603      	mov	r3, r0
 800977e:	613b      	str	r3, [r7, #16]
 8009780:	f107 0208 	add.w	r2, r7, #8
 8009784:	f107 0310 	add.w	r3, r7, #16
 8009788:	4611      	mov	r1, r2
 800978a:	4618      	mov	r0, r3
 800978c:	f000 f8b2 	bl	80098f4 <_ZSt3maxIjERKT_S2_S2_>
 8009790:	4603      	mov	r3, r0
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4423      	add	r3, r4
 8009796:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fddb 	bl	8009354 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800979e:	4602      	mov	r2, r0
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d306      	bcc.n	80097b4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 f893 	bl	80098d2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 80097ac:	4602      	mov	r2, r0
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d904      	bls.n	80097be <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f000 f88c 	bl	80098d2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 80097ba:	4603      	mov	r3, r0
 80097bc:	e000      	b.n	80097c0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 80097be:	697b      	ldr	r3, [r7, #20]
      }
 80097c0:	4618      	mov	r0, r3
 80097c2:	371c      	adds	r7, #28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd90      	pop	{r4, r7, pc}

080097c8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	f107 030c 	add.w	r3, r7, #12
 80097d6:	4611      	mov	r1, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff ff9e 	bl	800971a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80097e8:	b590      	push	{r4, r7, lr}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f828 	bl	8009848 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 80097f8:	4603      	mov	r3, r0
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	461c      	mov	r4, r3
 80097fe:	6838      	ldr	r0, [r7, #0]
 8009800:	f000 f822 	bl	8009848 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8009804:	4603      	mov	r3, r0
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	1ae3      	subs	r3, r4, r3
 800980a:	10db      	asrs	r3, r3, #3
 800980c:	4a03      	ldr	r2, [pc, #12]	; (800981c <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 800980e:	fb02 f303 	mul.w	r3, r2, r3
 8009812:	4618      	mov	r0, r3
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	bd90      	pop	{r4, r7, pc}
 800981a:	bf00      	nop
 800981c:	aaaaaaab 	.word	0xaaaaaaab

08009820 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d006      	beq.n	800983e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	4618      	mov	r0, r3
 8009836:	f000 f870 	bl	800991a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 800983a:	4603      	mov	r3, r0
 800983c:	e000      	b.n	8009840 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 800983e:	2300      	movs	r3, #0
      }
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	bc80      	pop	{r7}
 800985a:	4770      	bx	lr

0800985c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800985c:	b590      	push	{r4, r7, lr}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f864 	bl	8009938 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009870:	4604      	mov	r4, r0
 8009872:	68b8      	ldr	r0, [r7, #8]
 8009874:	f000 f860 	bl	8009938 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8009878:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	4620      	mov	r0, r4
 8009880:	f000 f869 	bl	8009956 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 8009884:	4603      	mov	r3, r0
    }
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	bd90      	pop	{r4, r7, pc}

0800988e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800988e:	b480      	push	{r7}
 8009890:	b083      	sub	sp, #12
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4618      	mov	r0, r3
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	bc80      	pop	{r7}
 80098a0:	4770      	bx	lr

080098a2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b084      	sub	sp, #16
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80098ae:	68b8      	ldr	r0, [r7, #8]
 80098b0:	f005 fd44 	bl	800f33c <_ZdlPv>
      }
 80098b4:	bf00      	nop
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f005 fe66 	bl	800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b082      	sub	sp, #8
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f857 	bl	8009990 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80098e2:	4603      	mov	r3, r0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 f847 	bl	8009978 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 80098ea:	4603      	mov	r3, r0
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d201      	bcs.n	800990e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	e000      	b.n	8009910 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800990e:	687b      	ldr	r3, [r7, #4]
    }
 8009910:	4618      	mov	r0, r3
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	bc80      	pop	{r7}
 8009918:	4770      	bx	lr

0800991a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009924:	2200      	movs	r2, #0
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f83b 	bl	80099a4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800992e:	4603      	mov	r3, r0
 8009930:	4618      	mov	r0, r3
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8009940:	f107 030c 	add.w	r3, r7, #12
 8009944:	6879      	ldr	r1, [r7, #4]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f84d 	bl	80099e6 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	60f8      	str	r0, [r7, #12]
 800995e:	60b9      	str	r1, [r7, #8]
 8009960:	607a      	str	r2, [r7, #4]
 8009962:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	68b9      	ldr	r1, [r7, #8]
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 f84a 	bl	8009a02 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800996e:	4603      	mov	r3, r0
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f851 	bl	8009a28 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8009986:	4603      	mov	r3, r0
 8009988:	4618      	mov	r0, r3
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4618      	mov	r0, r3
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	bc80      	pop	{r7}
 80099a2:	4770      	bx	lr

080099a4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f839 	bl	8009a28 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 80099b6:	4602      	mov	r2, r0
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	4293      	cmp	r3, r2
 80099bc:	bf8c      	ite	hi
 80099be:	2301      	movhi	r3, #1
 80099c0:	2300      	movls	r3, #0
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80099c8:	f005 fcbc 	bl	800f344 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	005b      	lsls	r3, r3, #1
 80099d2:	4413      	add	r3, r2
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	4618      	mov	r0, r3
 80099d8:	f005 fc96 	bl	800f308 <_Znwj>
 80099dc:	4603      	mov	r3, r0
      }
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	601a      	str	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bc80      	pop	{r7}
 8009a00:	4770      	bx	lr

08009a02 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b086      	sub	sp, #24
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	68b9      	ldr	r1, [r7, #8]
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f000 f812 	bl	8009a40 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 8009a1c:	4603      	mov	r3, r0
    }
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3718      	adds	r7, #24
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
	...

08009a28 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8009a30:	4b02      	ldr	r3, [pc, #8]	; (8009a3c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 8009a32:	4618      	mov	r0, r3
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bc80      	pop	{r7}
 8009a3a:	4770      	bx	lr
 8009a3c:	0aaaaaaa 	.word	0x0aaaaaaa

08009a40 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009a40:	b590      	push	{r4, r7, lr}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8009a50:	f107 0208 	add.w	r2, r7, #8
 8009a54:	f107 030c 	add.w	r3, r7, #12
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f81f 	bl	8009a9e <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d016      	beq.n	8009a94 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8009a66:	6978      	ldr	r0, [r7, #20]
 8009a68:	f7ff fe1b 	bl	80096a2 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	f107 030c 	add.w	r3, r7, #12
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 f834 	bl	8009ae0 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 f83a 	bl	8009af6 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8009a82:	f107 030c 	add.w	r3, r7, #12
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 f81a 	bl	8009ac0 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	3318      	adds	r3, #24
 8009a90:	617b      	str	r3, [r7, #20]
 8009a92:	e7dd      	b.n	8009a50 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 8009a94:	697b      	ldr	r3, [r7, #20]
	}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd90      	pop	{r4, r7, pc}

08009a9e <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f83c 	bl	8009b28 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f083 0301 	eor.w	r3, r3, #1
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f103 0218 	add.w	r2, r3, #24
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	601a      	str	r2, [r3, #0]
	return *this;
 8009ad4:	687b      	ldr	r3, [r7, #4]
      }
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bc80      	pop	{r7}
 8009ade:	4770      	bx	lr

08009ae0 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bc80      	pop	{r7}
 8009af4:	4770      	bx	lr

08009af6 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8009af6:	b590      	push	{r4, r7, lr}
 8009af8:	b083      	sub	sp, #12
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8009b00:	6838      	ldr	r0, [r7, #0]
 8009b02:	f7ff fc70 	bl	80093e6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009b06:	4604      	mov	r4, r0
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	2018      	movs	r0, #24
 8009b0e:	f7fb fd3a 	bl	8005586 <_ZnwjPv>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d003      	beq.n	8009b20 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f005 fd21 	bl	800f562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd90      	pop	{r4, r7, pc}

08009b28 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 8009b28:	b590      	push	{r4, r7, lr}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f80e 	bl	8009b54 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8009b38:	4604      	mov	r4, r0
 8009b3a:	6838      	ldr	r0, [r7, #0]
 8009b3c:	f000 f80a 	bl	8009b54 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8009b40:	4603      	mov	r3, r0
 8009b42:	429c      	cmp	r4, r3
 8009b44:	bf0c      	ite	eq
 8009b46:	2301      	moveq	r3, #1
 8009b48:	2300      	movne	r3, #0
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd90      	pop	{r4, r7, pc}

08009b54 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4618      	mov	r0, r3
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bc80      	pop	{r7}
 8009b68:	4770      	bx	lr
	...

08009b6c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8009b72:	1d3b      	adds	r3, r7, #4
 8009b74:	2200      	movs	r2, #0
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	605a      	str	r2, [r3, #4]
 8009b7a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8009b7c:	4b18      	ldr	r3, [pc, #96]	; (8009be0 <MX_ADC1_Init+0x74>)
 8009b7e:	4a19      	ldr	r2, [pc, #100]	; (8009be4 <MX_ADC1_Init+0x78>)
 8009b80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009b82:	4b17      	ldr	r3, [pc, #92]	; (8009be0 <MX_ADC1_Init+0x74>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009b88:	4b15      	ldr	r3, [pc, #84]	; (8009be0 <MX_ADC1_Init+0x74>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009b8e:	4b14      	ldr	r3, [pc, #80]	; (8009be0 <MX_ADC1_Init+0x74>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009b94:	4b12      	ldr	r3, [pc, #72]	; (8009be0 <MX_ADC1_Init+0x74>)
 8009b96:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8009b9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009b9c:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <MX_ADC1_Init+0x74>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8009ba2:	4b0f      	ldr	r3, [pc, #60]	; (8009be0 <MX_ADC1_Init+0x74>)
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009ba8:	480d      	ldr	r0, [pc, #52]	; (8009be0 <MX_ADC1_Init+0x74>)
 8009baa:	f000 fe31 	bl	800a810 <HAL_ADC_Init>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8009bb4:	f000 f9d4 	bl	8009f60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009bc4:	1d3b      	adds	r3, r7, #4
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4805      	ldr	r0, [pc, #20]	; (8009be0 <MX_ADC1_Init+0x74>)
 8009bca:	f000 ff8b 	bl	800aae4 <HAL_ADC_ConfigChannel>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8009bd4:	f000 f9c4 	bl	8009f60 <Error_Handler>
  }

}
 8009bd8:	bf00      	nop
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	20000540 	.word	0x20000540
 8009be4:	40012400 	.word	0x40012400

08009be8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bf0:	f107 0310 	add.w	r3, r7, #16
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	605a      	str	r2, [r3, #4]
 8009bfa:	609a      	str	r2, [r3, #8]
 8009bfc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a14      	ldr	r2, [pc, #80]	; (8009c54 <HAL_ADC_MspInit+0x6c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d121      	bne.n	8009c4c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009c08:	4b13      	ldr	r3, [pc, #76]	; (8009c58 <HAL_ADC_MspInit+0x70>)
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	4a12      	ldr	r2, [pc, #72]	; (8009c58 <HAL_ADC_MspInit+0x70>)
 8009c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c12:	6193      	str	r3, [r2, #24]
 8009c14:	4b10      	ldr	r3, [pc, #64]	; (8009c58 <HAL_ADC_MspInit+0x70>)
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c20:	4b0d      	ldr	r3, [pc, #52]	; (8009c58 <HAL_ADC_MspInit+0x70>)
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	4a0c      	ldr	r2, [pc, #48]	; (8009c58 <HAL_ADC_MspInit+0x70>)
 8009c26:	f043 0304 	orr.w	r3, r3, #4
 8009c2a:	6193      	str	r3, [r2, #24]
 8009c2c:	4b0a      	ldr	r3, [pc, #40]	; (8009c58 <HAL_ADC_MspInit+0x70>)
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	f003 0304 	and.w	r3, r3, #4
 8009c34:	60bb      	str	r3, [r7, #8]
 8009c36:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 8009c40:	f107 0310 	add.w	r3, r7, #16
 8009c44:	4619      	mov	r1, r3
 8009c46:	4805      	ldr	r0, [pc, #20]	; (8009c5c <HAL_ADC_MspInit+0x74>)
 8009c48:	f001 fdec 	bl	800b824 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8009c4c:	bf00      	nop
 8009c4e:	3720      	adds	r7, #32
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	40012400 	.word	0x40012400
 8009c58:	40021000 	.word	0x40021000
 8009c5c:	40010800 	.word	0x40010800

08009c60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c66:	f107 0308 	add.w	r3, r7, #8
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	605a      	str	r2, [r3, #4]
 8009c70:	609a      	str	r2, [r3, #8]
 8009c72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c74:	4b28      	ldr	r3, [pc, #160]	; (8009d18 <MX_GPIO_Init+0xb8>)
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	4a27      	ldr	r2, [pc, #156]	; (8009d18 <MX_GPIO_Init+0xb8>)
 8009c7a:	f043 0304 	orr.w	r3, r3, #4
 8009c7e:	6193      	str	r3, [r2, #24]
 8009c80:	4b25      	ldr	r3, [pc, #148]	; (8009d18 <MX_GPIO_Init+0xb8>)
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	607b      	str	r3, [r7, #4]
 8009c8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c8c:	4b22      	ldr	r3, [pc, #136]	; (8009d18 <MX_GPIO_Init+0xb8>)
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	4a21      	ldr	r2, [pc, #132]	; (8009d18 <MX_GPIO_Init+0xb8>)
 8009c92:	f043 0308 	orr.w	r3, r3, #8
 8009c96:	6193      	str	r3, [r2, #24]
 8009c98:	4b1f      	ldr	r3, [pc, #124]	; (8009d18 <MX_GPIO_Init+0xb8>)
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	f003 0308 	and.w	r3, r3, #8
 8009ca0:	603b      	str	r3, [r7, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	210c      	movs	r1, #12
 8009ca8:	481c      	ldr	r0, [pc, #112]	; (8009d1c <MX_GPIO_Init+0xbc>)
 8009caa:	f002 f81b 	bl	800bce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f641 6150 	movw	r1, #7760	; 0x1e50
 8009cb4:	4819      	ldr	r0, [pc, #100]	; (8009d1c <MX_GPIO_Init+0xbc>)
 8009cb6:	f002 f815 	bl	800bce4 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 8009cba:	f240 435c 	movw	r3, #1116	; 0x45c
 8009cbe:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ccc:	f107 0308 	add.w	r3, r7, #8
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4812      	ldr	r0, [pc, #72]	; (8009d1c <MX_GPIO_Init+0xbc>)
 8009cd4:	f001 fda6 	bl	800b824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 8009cd8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009cdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ce6:	f107 0308 	add.w	r3, r7, #8
 8009cea:	4619      	mov	r1, r3
 8009cec:	480c      	ldr	r0, [pc, #48]	; (8009d20 <MX_GPIO_Init+0xc0>)
 8009cee:	f001 fd99 	bl	800b824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 8009cf2:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8009cf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d00:	2302      	movs	r3, #2
 8009d02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d04:	f107 0308 	add.w	r3, r7, #8
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4804      	ldr	r0, [pc, #16]	; (8009d1c <MX_GPIO_Init+0xbc>)
 8009d0c:	f001 fd8a 	bl	800b824 <HAL_GPIO_Init>

}
 8009d10:	bf00      	nop
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	40021000 	.word	0x40021000
 8009d1c:	40010800 	.word	0x40010800
 8009d20:	40010c00 	.word	0x40010c00

08009d24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8009d28:	4b12      	ldr	r3, [pc, #72]	; (8009d74 <MX_I2C1_Init+0x50>)
 8009d2a:	4a13      	ldr	r2, [pc, #76]	; (8009d78 <MX_I2C1_Init+0x54>)
 8009d2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009d2e:	4b11      	ldr	r3, [pc, #68]	; (8009d74 <MX_I2C1_Init+0x50>)
 8009d30:	4a12      	ldr	r2, [pc, #72]	; (8009d7c <MX_I2C1_Init+0x58>)
 8009d32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009d34:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <MX_I2C1_Init+0x50>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009d3a:	4b0e      	ldr	r3, [pc, #56]	; (8009d74 <MX_I2C1_Init+0x50>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d40:	4b0c      	ldr	r3, [pc, #48]	; (8009d74 <MX_I2C1_Init+0x50>)
 8009d42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009d46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d48:	4b0a      	ldr	r3, [pc, #40]	; (8009d74 <MX_I2C1_Init+0x50>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009d4e:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <MX_I2C1_Init+0x50>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009d54:	4b07      	ldr	r3, [pc, #28]	; (8009d74 <MX_I2C1_Init+0x50>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009d5a:	4b06      	ldr	r3, [pc, #24]	; (8009d74 <MX_I2C1_Init+0x50>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009d60:	4804      	ldr	r0, [pc, #16]	; (8009d74 <MX_I2C1_Init+0x50>)
 8009d62:	f002 f817 	bl	800bd94 <HAL_I2C_Init>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009d6c:	f000 f8f8 	bl	8009f60 <Error_Handler>
  }

}
 8009d70:	bf00      	nop
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	20000570 	.word	0x20000570
 8009d78:	40005400 	.word	0x40005400
 8009d7c:	000186a0 	.word	0x000186a0

08009d80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b08a      	sub	sp, #40	; 0x28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d88:	f107 0314 	add.w	r3, r7, #20
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	601a      	str	r2, [r3, #0]
 8009d90:	605a      	str	r2, [r3, #4]
 8009d92:	609a      	str	r2, [r3, #8]
 8009d94:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a1d      	ldr	r2, [pc, #116]	; (8009e10 <HAL_I2C_MspInit+0x90>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d132      	bne.n	8009e06 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009da0:	4b1c      	ldr	r3, [pc, #112]	; (8009e14 <HAL_I2C_MspInit+0x94>)
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	4a1b      	ldr	r2, [pc, #108]	; (8009e14 <HAL_I2C_MspInit+0x94>)
 8009da6:	f043 0308 	orr.w	r3, r3, #8
 8009daa:	6193      	str	r3, [r2, #24]
 8009dac:	4b19      	ldr	r3, [pc, #100]	; (8009e14 <HAL_I2C_MspInit+0x94>)
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	613b      	str	r3, [r7, #16]
 8009db6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8009db8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009dbe:	2312      	movs	r3, #18
 8009dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009dc6:	f107 0314 	add.w	r3, r7, #20
 8009dca:	4619      	mov	r1, r3
 8009dcc:	4812      	ldr	r0, [pc, #72]	; (8009e18 <HAL_I2C_MspInit+0x98>)
 8009dce:	f001 fd29 	bl	800b824 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8009dd2:	4b12      	ldr	r3, [pc, #72]	; (8009e1c <HAL_I2C_MspInit+0x9c>)
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8009dde:	627b      	str	r3, [r7, #36]	; 0x24
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	f043 0302 	orr.w	r3, r3, #2
 8009de6:	627b      	str	r3, [r7, #36]	; 0x24
 8009de8:	4a0c      	ldr	r2, [pc, #48]	; (8009e1c <HAL_I2C_MspInit+0x9c>)
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009dee:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <HAL_I2C_MspInit+0x94>)
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	4a08      	ldr	r2, [pc, #32]	; (8009e14 <HAL_I2C_MspInit+0x94>)
 8009df4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009df8:	61d3      	str	r3, [r2, #28]
 8009dfa:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <HAL_I2C_MspInit+0x94>)
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8009e06:	bf00      	nop
 8009e08:	3728      	adds	r7, #40	; 0x28
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	40005400 	.word	0x40005400
 8009e14:	40021000 	.word	0x40021000
 8009e18:	40010c00 	.word	0x40010c00
 8009e1c:	40010000 	.word	0x40010000

08009e20 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8009e20:	b598      	push	{r3, r4, r7, lr}
 8009e22:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009e24:	f000 fc70 	bl	800a708 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 8009e28:	f000 f836 	bl	8009e98 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8009e2c:	f7ff ff18 	bl	8009c60 <MX_GPIO_Init>
	MX_ADC1_Init();
 8009e30:	f7ff fe9c 	bl	8009b6c <MX_ADC1_Init>
	MX_I2C1_Init();
 8009e34:	f7ff ff76 	bl	8009d24 <MX_I2C1_Init>
	MX_SPI1_Init();
 8009e38:	f000 f8a2 	bl	8009f80 <MX_SPI1_Init>
	MX_TIM2_Init();
 8009e3c:	f000 fb4a 	bl	800a4d4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8009e40:	f000 fbb0 	bl	800a5a4 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 8009e44:	4812      	ldr	r0, [pc, #72]	; (8009e90 <main+0x70>)
 8009e46:	f004 fa03 	bl	800e250 <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 8009e4a:	20c4      	movs	r0, #196	; 0xc4
 8009e4c:	f005 fa5c 	bl	800f308 <_Znwj>
 8009e50:	4603      	mov	r3, r0
 8009e52:	461c      	mov	r4, r3
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7fb fbeb 	bl	8005630 <_ZN10SmartDryerC1Ev>
 8009e5a:	4b0e      	ldr	r3, [pc, #56]	; (8009e94 <main+0x74>)
 8009e5c:	601c      	str	r4, [r3, #0]

	DryerApplication->setup();
 8009e5e:	4b0d      	ldr	r3, [pc, #52]	; (8009e94 <main+0x74>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fc fe6c 	bl	8006b40 <_ZN10SmartDryer5setupEv>

	if(DryerApplication->enableTest)
 8009e68:	4b0a      	ldr	r3, [pc, #40]	; (8009e94 <main+0x74>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d005      	beq.n	8009e80 <main+0x60>
	{
		DryerApplication->test();
 8009e74:	4b07      	ldr	r3, [pc, #28]	; (8009e94 <main+0x74>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fc fe57 	bl	8006b2c <_ZN10SmartDryer4testEv>
 8009e7e:	e004      	b.n	8009e8a <main+0x6a>
	}
	else
	{
		DryerApplication->run();
 8009e80:	4b04      	ldr	r3, [pc, #16]	; (8009e94 <main+0x74>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7ff f9c9 	bl	800921c <_ZN10SmartDryer3runEv>
	}
}
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	bd98      	pop	{r3, r4, r7, pc}
 8009e90:	2000061c 	.word	0x2000061c
 8009e94:	2000052c 	.word	0x2000052c

08009e98 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b094      	sub	sp, #80	; 0x50
 8009e9c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ea2:	2228      	movs	r2, #40	; 0x28
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f005 fe2f 	bl	800fb0a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009eac:	f107 0314 	add.w	r3, r7, #20
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	605a      	str	r2, [r3, #4]
 8009eb6:	609a      	str	r2, [r3, #8]
 8009eb8:	60da      	str	r2, [r3, #12]
 8009eba:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009ebc:	1d3b      	adds	r3, r7, #4
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	605a      	str	r2, [r3, #4]
 8009ec4:	609a      	str	r2, [r3, #8]
 8009ec6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009ec8:	2302      	movs	r3, #2
 8009eca:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009edc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f002 ff92 	bl	800ce10 <HAL_RCC_OscConfig>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	bf14      	ite	ne
 8009ef2:	2301      	movne	r3, #1
 8009ef4:	2300      	moveq	r3, #0
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 8009efc:	f000 f830 	bl	8009f60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009f00:	230f      	movs	r3, #15
 8009f02:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009f04:	2302      	movs	r3, #2
 8009f06:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009f10:	2300      	movs	r3, #0
 8009f12:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8009f14:	f107 0314 	add.w	r3, r7, #20
 8009f18:	2100      	movs	r1, #0
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f003 fae8 	bl	800d4f0 <HAL_RCC_ClockConfig>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	bf14      	ite	ne
 8009f26:	2301      	movne	r3, #1
 8009f28:	2300      	moveq	r3, #0
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 8009f30:	f000 f816 	bl	8009f60 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8009f34:	2302      	movs	r3, #2
 8009f36:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f3c:	1d3b      	adds	r3, r7, #4
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f003 fd18 	bl	800d974 <HAL_RCCEx_PeriphCLKConfig>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	bf14      	ite	ne
 8009f4a:	2301      	movne	r3, #1
 8009f4c:	2300      	moveq	r3, #0
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 8009f54:	f000 f804 	bl	8009f60 <Error_Handler>
	}
}
 8009f58:	bf00      	nop
 8009f5a:	3750      	adds	r7, #80	; 0x50
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8009f60:	b480      	push	{r7}
 8009f62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8009f64:	bf00      	nop
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bc80      	pop	{r7}
 8009f6a:	4770      	bx	lr

08009f6c <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bc80      	pop	{r7}
 8009f7e:	4770      	bx	lr

08009f80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8009f84:	4b18      	ldr	r3, [pc, #96]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009f86:	4a19      	ldr	r2, [pc, #100]	; (8009fec <MX_SPI1_Init+0x6c>)
 8009f88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009f8a:	4b17      	ldr	r3, [pc, #92]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009f90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8009f92:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009f94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009f98:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009f9a:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009fa0:	4b11      	ldr	r3, [pc, #68]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009fa6:	4b10      	ldr	r3, [pc, #64]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009fac:	4b0e      	ldr	r3, [pc, #56]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fb2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009fb4:	4b0c      	ldr	r3, [pc, #48]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009fb6:	2228      	movs	r2, #40	; 0x28
 8009fb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009fba:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009fc0:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fc6:	4b08      	ldr	r3, [pc, #32]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009fcc:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009fce:	220a      	movs	r2, #10
 8009fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009fd2:	4805      	ldr	r0, [pc, #20]	; (8009fe8 <MX_SPI1_Init+0x68>)
 8009fd4:	f003 fdd8 	bl	800db88 <HAL_SPI_Init>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8009fde:	f7ff ffbf 	bl	8009f60 <Error_Handler>
  }

}
 8009fe2:	bf00      	nop
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	200005c4 	.word	0x200005c4
 8009fec:	40013000 	.word	0x40013000

08009ff0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff8:	f107 0310 	add.w	r3, r7, #16
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	605a      	str	r2, [r3, #4]
 800a002:	609a      	str	r2, [r3, #8]
 800a004:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a15      	ldr	r2, [pc, #84]	; (800a060 <HAL_SPI_MspInit+0x70>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d123      	bne.n	800a058 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a010:	4b14      	ldr	r3, [pc, #80]	; (800a064 <HAL_SPI_MspInit+0x74>)
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	4a13      	ldr	r2, [pc, #76]	; (800a064 <HAL_SPI_MspInit+0x74>)
 800a016:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a01a:	6193      	str	r3, [r2, #24]
 800a01c:	4b11      	ldr	r3, [pc, #68]	; (800a064 <HAL_SPI_MspInit+0x74>)
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a028:	4b0e      	ldr	r3, [pc, #56]	; (800a064 <HAL_SPI_MspInit+0x74>)
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	4a0d      	ldr	r2, [pc, #52]	; (800a064 <HAL_SPI_MspInit+0x74>)
 800a02e:	f043 0304 	orr.w	r3, r3, #4
 800a032:	6193      	str	r3, [r2, #24]
 800a034:	4b0b      	ldr	r3, [pc, #44]	; (800a064 <HAL_SPI_MspInit+0x74>)
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	f003 0304 	and.w	r3, r3, #4
 800a03c:	60bb      	str	r3, [r7, #8]
 800a03e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 800a040:	23a0      	movs	r3, #160	; 0xa0
 800a042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a044:	2302      	movs	r3, #2
 800a046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a048:	2303      	movs	r3, #3
 800a04a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a04c:	f107 0310 	add.w	r3, r7, #16
 800a050:	4619      	mov	r1, r3
 800a052:	4805      	ldr	r0, [pc, #20]	; (800a068 <HAL_SPI_MspInit+0x78>)
 800a054:	f001 fbe6 	bl	800b824 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800a058:	bf00      	nop
 800a05a:	3720      	adds	r7, #32
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	40013000 	.word	0x40013000
 800a064:	40021000 	.word	0x40021000
 800a068:	40010800 	.word	0x40010800

0800a06c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a072:	4b15      	ldr	r3, [pc, #84]	; (800a0c8 <HAL_MspInit+0x5c>)
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	4a14      	ldr	r2, [pc, #80]	; (800a0c8 <HAL_MspInit+0x5c>)
 800a078:	f043 0301 	orr.w	r3, r3, #1
 800a07c:	6193      	str	r3, [r2, #24]
 800a07e:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <HAL_MspInit+0x5c>)
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	f003 0301 	and.w	r3, r3, #1
 800a086:	60bb      	str	r3, [r7, #8]
 800a088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a08a:	4b0f      	ldr	r3, [pc, #60]	; (800a0c8 <HAL_MspInit+0x5c>)
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	4a0e      	ldr	r2, [pc, #56]	; (800a0c8 <HAL_MspInit+0x5c>)
 800a090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a094:	61d3      	str	r3, [r2, #28]
 800a096:	4b0c      	ldr	r3, [pc, #48]	; (800a0c8 <HAL_MspInit+0x5c>)
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a09e:	607b      	str	r3, [r7, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a0a2:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <HAL_MspInit+0x60>)
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	60fb      	str	r3, [r7, #12]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800a0ae:	60fb      	str	r3, [r7, #12]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	4a04      	ldr	r2, [pc, #16]	; (800a0cc <HAL_MspInit+0x60>)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a0be:	bf00      	nop
 800a0c0:	3714      	adds	r7, #20
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bc80      	pop	{r7}
 800a0c6:	4770      	bx	lr
 800a0c8:	40021000 	.word	0x40021000
 800a0cc:	40010000 	.word	0x40010000

0800a0d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a0d4:	bf00      	nop
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bc80      	pop	{r7}
 800a0da:	4770      	bx	lr

0800a0dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800a0e0:	f001 f842 	bl	800b168 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a0e4:	e7fe      	b.n	800a0e4 <HardFault_Handler+0x8>

0800a0e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a0ea:	e7fe      	b.n	800a0ea <MemManage_Handler+0x4>

0800a0ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a0f0:	e7fe      	b.n	800a0f0 <BusFault_Handler+0x4>

0800a0f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a0f6:	e7fe      	b.n	800a0f6 <UsageFault_Handler+0x4>

0800a0f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a0fc:	bf00      	nop
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bc80      	pop	{r7}
 800a102:	4770      	bx	lr

0800a104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a104:	b480      	push	{r7}
 800a106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a108:	bf00      	nop
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bc80      	pop	{r7}
 800a10e:	4770      	bx	lr

0800a110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a110:	b480      	push	{r7}
 800a112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a114:	bf00      	nop
 800a116:	46bd      	mov	sp, r7
 800a118:	bc80      	pop	{r7}
 800a11a:	4770      	bx	lr

0800a11c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a120:	f000 fb38 	bl	800a794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a124:	bf00      	nop
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a12c:	4802      	ldr	r0, [pc, #8]	; (800a138 <USART1_IRQHandler+0x10>)
 800a12e:	f004 fd9b 	bl	800ec68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a132:	bf00      	nop
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	2000065c 	.word	0x2000065c

0800a13c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a13c:	b480      	push	{r7}
 800a13e:	af00      	add	r7, sp, #0
	return 1;
 800a140:	2301      	movs	r3, #1
}
 800a142:	4618      	mov	r0, r3
 800a144:	46bd      	mov	sp, r7
 800a146:	bc80      	pop	{r7}
 800a148:	4770      	bx	lr

0800a14a <_kill>:

int _kill(int pid, int sig)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b082      	sub	sp, #8
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a154:	f005 fc5e 	bl	800fa14 <__errno>
 800a158:	4602      	mov	r2, r0
 800a15a:	2316      	movs	r3, #22
 800a15c:	6013      	str	r3, [r2, #0]
	return -1;
 800a15e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <_exit>:

void _exit (int status)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a172:	f04f 31ff 	mov.w	r1, #4294967295
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7ff ffe7 	bl	800a14a <_kill>
	while (1) {}		/* Make sure we hang here */
 800a17c:	e7fe      	b.n	800a17c <_exit+0x12>
	...

0800a180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a188:	4a14      	ldr	r2, [pc, #80]	; (800a1dc <_sbrk+0x5c>)
 800a18a:	4b15      	ldr	r3, [pc, #84]	; (800a1e0 <_sbrk+0x60>)
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a194:	4b13      	ldr	r3, [pc, #76]	; (800a1e4 <_sbrk+0x64>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d102      	bne.n	800a1a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a19c:	4b11      	ldr	r3, [pc, #68]	; (800a1e4 <_sbrk+0x64>)
 800a19e:	4a12      	ldr	r2, [pc, #72]	; (800a1e8 <_sbrk+0x68>)
 800a1a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a1a2:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <_sbrk+0x64>)
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d207      	bcs.n	800a1c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a1b0:	f005 fc30 	bl	800fa14 <__errno>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	230c      	movs	r3, #12
 800a1b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800a1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a1be:	e009      	b.n	800a1d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a1c0:	4b08      	ldr	r3, [pc, #32]	; (800a1e4 <_sbrk+0x64>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a1c6:	4b07      	ldr	r3, [pc, #28]	; (800a1e4 <_sbrk+0x64>)
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	4a05      	ldr	r2, [pc, #20]	; (800a1e4 <_sbrk+0x64>)
 800a1d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20005000 	.word	0x20005000
 800a1e0:	00000400 	.word	0x00000400
 800a1e4:	20000530 	.word	0x20000530
 800a1e8:	200006c8 	.word	0x200006c8

0800a1ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800a1f0:	4b15      	ldr	r3, [pc, #84]	; (800a248 <SystemInit+0x5c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a14      	ldr	r2, [pc, #80]	; (800a248 <SystemInit+0x5c>)
 800a1f6:	f043 0301 	orr.w	r3, r3, #1
 800a1fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800a1fc:	4b12      	ldr	r3, [pc, #72]	; (800a248 <SystemInit+0x5c>)
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	4911      	ldr	r1, [pc, #68]	; (800a248 <SystemInit+0x5c>)
 800a202:	4b12      	ldr	r3, [pc, #72]	; (800a24c <SystemInit+0x60>)
 800a204:	4013      	ands	r3, r2
 800a206:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800a208:	4b0f      	ldr	r3, [pc, #60]	; (800a248 <SystemInit+0x5c>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a0e      	ldr	r2, [pc, #56]	; (800a248 <SystemInit+0x5c>)
 800a20e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a216:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a218:	4b0b      	ldr	r3, [pc, #44]	; (800a248 <SystemInit+0x5c>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a0a      	ldr	r2, [pc, #40]	; (800a248 <SystemInit+0x5c>)
 800a21e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a222:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800a224:	4b08      	ldr	r3, [pc, #32]	; (800a248 <SystemInit+0x5c>)
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	4a07      	ldr	r2, [pc, #28]	; (800a248 <SystemInit+0x5c>)
 800a22a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800a22e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800a230:	4b05      	ldr	r3, [pc, #20]	; (800a248 <SystemInit+0x5c>)
 800a232:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800a236:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800a238:	4b05      	ldr	r3, [pc, #20]	; (800a250 <SystemInit+0x64>)
 800a23a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a23e:	609a      	str	r2, [r3, #8]
#endif 
}
 800a240:	bf00      	nop
 800a242:	46bd      	mov	sp, r7
 800a244:	bc80      	pop	{r7}
 800a246:	4770      	bx	lr
 800a248:	40021000 	.word	0x40021000
 800a24c:	f8ff0000 	.word	0xf8ff0000
 800a250:	e000ed00 	.word	0xe000ed00

0800a254 <_ZN13THERMO_SENSOR12clearI2CBuffEv>:
// HOLD MASTER - SCL line is blocked (controlled by sensor) during measurement
// NO HOLD MASTER - allows other I2C communication tasks while sensor performing
// measurements.

void THERMO_SENSOR::clearI2CBuff()
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2220      	movs	r2, #32
 800a260:	2100      	movs	r1, #0
 800a262:	4618      	mov	r0, r3
 800a264:	f005 fc51 	bl	800fb0a <memset>
	i2cBufferIndex = 0;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2020 	strb.w	r2, [r3, #32]
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <_ZN13THERMO_SENSOR13readSensor_hmEh>:

uint16_t THERMO_SENSOR::readSensor_hm(uint8_t command)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	uint16_t result;
//	uint8_t n = 0;
	uint8_t d;

	if(command == TRIGGER_RH_MEASUREMENT_HM || command == TRIGGER_RH_MEASUREMENT_NHM)
 800a284:	78fb      	ldrb	r3, [r7, #3]
 800a286:	2be5      	cmp	r3, #229	; 0xe5
 800a288:	d002      	beq.n	800a290 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x18>
 800a28a:	78fb      	ldrb	r3, [r7, #3]
 800a28c:	2bf5      	cmp	r3, #245	; 0xf5
 800a28e:	d101      	bne.n	800a294 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x1c>
		d = 30;
 800a290:	231e      	movs	r3, #30
 800a292:	737b      	strb	r3, [r7, #13]
	if(command == TRIGGER_T_MEASUREMENT_HM || command == TRIGGER_T_MEASUREMENT_NHM)
 800a294:	78fb      	ldrb	r3, [r7, #3]
 800a296:	2be3      	cmp	r3, #227	; 0xe3
 800a298:	d002      	beq.n	800a2a0 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x28>
 800a29a:	78fb      	ldrb	r3, [r7, #3]
 800a29c:	2bf3      	cmp	r3, #243	; 0xf3
 800a29e:	d101      	bne.n	800a2a4 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x2c>
		d = 85;
 800a2a0:	2355      	movs	r3, #85	; 0x55
 800a2a2:	737b      	strb	r3, [r7, #13]

	clearI2CBuff();
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff ffd5 	bl	800a254 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = command;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	78fa      	ldrb	r2, [r7, #3]
 800a2ae:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	230a      	movs	r3, #10
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	2180      	movs	r1, #128	; 0x80
 800a2ba:	482d      	ldr	r0, [pc, #180]	; (800a370 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800a2bc:	f001 ff24 	bl	800c108 <HAL_I2C_Master_Transmit>
	HAL_Delay(d);
 800a2c0:	7b7b      	ldrb	r3, [r7, #13]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f000 fa82 	bl	800a7cc <HAL_Delay>
	clearI2CBuff();
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7ff ffc3 	bl	800a254 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	HAL_I2C_Master_Receive(&hi2c1, I2CTEMPADDR, i2cBuffer, 3, 10);
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	230a      	movs	r3, #10
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	2180      	movs	r1, #128	; 0x80
 800a2d8:	4825      	ldr	r0, [pc, #148]	; (800a370 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800a2da:	f002 f813 	bl	800c304 <HAL_I2C_Master_Receive>
	data[0] = i2cBuffer[i2cBufferIndex++]; 	// read data (MSB)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2e4:	1c5a      	adds	r2, r3, #1
 800a2e6:	b2d1      	uxtb	r1, r2
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	f882 1020 	strb.w	r1, [r2, #32]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	5c9b      	ldrb	r3, [r3, r2]
 800a2f4:	723b      	strb	r3, [r7, #8]
	data[1] = i2cBuffer[i2cBufferIndex++]; 	// read data (LSB)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	b2d1      	uxtb	r1, r2
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	f882 1020 	strb.w	r1, [r2, #32]
 800a306:	461a      	mov	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	5c9b      	ldrb	r3, [r3, r2]
 800a30c:	727b      	strb	r3, [r7, #9]
	checksum = i2cBuffer[i2cBufferIndex++];	// read checksum
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	b2d1      	uxtb	r1, r2
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	f882 1020 	strb.w	r1, [r2, #32]
 800a31e:	461a      	mov	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	5c9b      	ldrb	r3, [r3, r2]
 800a324:	733b      	strb	r3, [r7, #12]
	result = (data[0] << 8);
 800a326:	7a3b      	ldrb	r3, [r7, #8]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	021b      	lsls	r3, r3, #8
 800a32c:	81fb      	strh	r3, [r7, #14]
	result += data[1];
 800a32e:	7a7b      	ldrb	r3, [r7, #9]
 800a330:	b29a      	uxth	r2, r3
 800a332:	89fb      	ldrh	r3, [r7, #14]
 800a334:	4413      	add	r3, r2
 800a336:	81fb      	strh	r3, [r7, #14]
	if(CRC_Checksum (data, 2, checksum))
 800a338:	7b3b      	ldrb	r3, [r7, #12]
 800a33a:	f107 0108 	add.w	r1, r7, #8
 800a33e:	2202      	movs	r2, #2
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f84d 	bl	800a3e0 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	bf14      	ite	ne
 800a34c:	2301      	movne	r3, #1
 800a34e:	2300      	moveq	r3, #0
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d004      	beq.n	800a360 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xe8>
	{
		reset();
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f89e 	bl	800a498 <_ZN13THERMO_SENSOR5resetEv>
		result = 1;
 800a35c:	2301      	movs	r3, #1
 800a35e:	81fb      	strh	r3, [r7, #14]
	}
	clearI2CBuff();
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff ff77 	bl	800a254 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	return result; // @suppress("Return with parenthesis")
 800a366:	89fb      	ldrh	r3, [r7, #14]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	20000570 	.word	0x20000570
 800a374:	00000000 	.word	0x00000000

0800a378 <_ZN13THERMO_SENSOR5CalcTEt>:
	rh &= ~0x0003;	// clean last two bits
  	return (-6.0 + 125.0/65536 * (float)rh); // return relative humidity
}

float THERMO_SENSOR::CalcT(uint16_t t)
{
 800a378:	b590      	push	{r4, r7, lr}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	807b      	strh	r3, [r7, #2]
	t &= ~0x0003;	// clean last two bits
 800a384:	887b      	ldrh	r3, [r7, #2]
 800a386:	f023 0303 	bic.w	r3, r3, #3
 800a38a:	807b      	strh	r3, [r7, #2]
	return (-46.85 + 175.72/65536 * (float)t);
 800a38c:	887b      	ldrh	r3, [r7, #2]
 800a38e:	4618      	mov	r0, r3
 800a390:	f7f6 fbba 	bl	8000b08 <__aeabi_ui2f>
 800a394:	4603      	mov	r3, r0
 800a396:	4618      	mov	r0, r3
 800a398:	f7f6 f846 	bl	8000428 <__aeabi_f2d>
 800a39c:	a30c      	add	r3, pc, #48	; (adr r3, 800a3d0 <_ZN13THERMO_SENSOR5CalcTEt+0x58>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f6 f899 	bl	80004d8 <__aeabi_dmul>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	a30a      	add	r3, pc, #40	; (adr r3, 800a3d8 <_ZN13THERMO_SENSOR5CalcTEt+0x60>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7f5 fed8 	bl	8000168 <__aeabi_dsub>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	4618      	mov	r0, r3
 800a3be:	4621      	mov	r1, r4
 800a3c0:	f7f6 fa9c 	bl	80008fc <__aeabi_d2f>
 800a3c4:	4603      	mov	r3, r0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd90      	pop	{r4, r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	3d70a3d7 	.word	0x3d70a3d7
 800a3d4:	3f65f70a 	.word	0x3f65f70a
 800a3d8:	cccccccd 	.word	0xcccccccd
 800a3dc:	40476ccc 	.word	0x40476ccc

0800a3e0 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>:

uint8_t THERMO_SENSOR::CRC_Checksum(uint8_t data[], uint8_t no_of_bytes, uint8_t checksum)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	71fb      	strb	r3, [r7, #7]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	75fb      	strb	r3, [r7, #23]
  	uint8_t byteCtr;
  	uint8_t ret = 0;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	757b      	strb	r3, [r7, #21]

 	 //calculates 8-Bit checksum with given polynomial
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800a3fe:	2300      	movs	r3, #0
 800a400:	75bb      	strb	r3, [r7, #22]
 800a402:	7dba      	ldrb	r2, [r7, #22]
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	429a      	cmp	r2, r3
 800a408:	d222      	bcs.n	800a450 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x70>
 	 {
		crc ^= (data[byteCtr]);
 800a40a:	7dbb      	ldrb	r3, [r7, #22]
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	4413      	add	r3, r2
 800a410:	781a      	ldrb	r2, [r3, #0]
 800a412:	7dfb      	ldrb	r3, [r7, #23]
 800a414:	4053      	eors	r3, r2
 800a416:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800a418:	2308      	movs	r3, #8
 800a41a:	753b      	strb	r3, [r7, #20]
 800a41c:	7d3b      	ldrb	r3, [r7, #20]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d012      	beq.n	800a448 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x68>
		{
		   if (crc & 0x80)
 800a422:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a426:	2b00      	cmp	r3, #0
 800a428:	da07      	bge.n	800a43a <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x5a>
			   crc = (crc << 1) ^ POLYNOMIAL;
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	b25b      	sxtb	r3, r3
 800a430:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800a434:	b25b      	sxtb	r3, r3
 800a436:	75fb      	strb	r3, [r7, #23]
 800a438:	e002      	b.n	800a440 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x60>
		   else
			   crc = (crc << 1);
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800a440:	7d3b      	ldrb	r3, [r7, #20]
 800a442:	3b01      	subs	r3, #1
 800a444:	753b      	strb	r3, [r7, #20]
 800a446:	e7e9      	b.n	800a41c <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x3c>
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800a448:	7dbb      	ldrb	r3, [r7, #22]
 800a44a:	3301      	adds	r3, #1
 800a44c:	75bb      	strb	r3, [r7, #22]
 800a44e:	e7d8      	b.n	800a402 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x22>
		}
 	 }
 	 if (crc != checksum)
 800a450:	7dfa      	ldrb	r2, [r7, #23]
 800a452:	79bb      	ldrb	r3, [r7, #6]
 800a454:	429a      	cmp	r2, r3
 800a456:	d002      	beq.n	800a45e <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x7e>
 		 ret = 1;
 800a458:	2301      	movs	r3, #1
 800a45a:	757b      	strb	r3, [r7, #21]
 800a45c:	e001      	b.n	800a462 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x82>
 	 else
 		 ret = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	757b      	strb	r3, [r7, #21]
 	 return ret;
 800a462:	7d7b      	ldrb	r3, [r7, #21]
}
 800a464:	4618      	mov	r0, r3
 800a466:	371c      	adds	r7, #28
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr

0800a46e <_ZN13THERMO_SENSOR14getTemperatureEv>:

	return CalcRH(result);
}

float THERMO_SENSOR::getTemperature(void)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_T_MEASUREMENT_NHM);
 800a476:	21f3      	movs	r1, #243	; 0xf3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7ff fefd 	bl	800a278 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800a47e:	4603      	mov	r3, r0
 800a480:	81fb      	strh	r3, [r7, #14]

	return CalcT(result);
 800a482:	89fb      	ldrh	r3, [r7, #14]
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff ff76 	bl	800a378 <_ZN13THERMO_SENSOR5CalcTEt>
 800a48c:	4603      	mov	r3, r0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
	...

0800a498 <_ZN13THERMO_SENSOR5resetEv>:

void THERMO_SENSOR::reset()
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af02      	add	r7, sp, #8
 800a49e:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff fed7 	bl	800a254 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = SOFT_RESET;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	22fe      	movs	r2, #254	; 0xfe
 800a4aa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	230a      	movs	r3, #10
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	2180      	movs	r1, #128	; 0x80
 800a4b6:	4806      	ldr	r0, [pc, #24]	; (800a4d0 <_ZN13THERMO_SENSOR5resetEv+0x38>)
 800a4b8:	f001 fe26 	bl	800c108 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 800a4bc:	200f      	movs	r0, #15
 800a4be:	f000 f985 	bl	800a7cc <HAL_Delay>
	clearI2CBuff();
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7ff fec6 	bl	800a254 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
}
 800a4c8:	bf00      	nop
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	20000570 	.word	0x20000570

0800a4d4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a4da:	f107 0308 	add.w	r3, r7, #8
 800a4de:	2200      	movs	r2, #0
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	605a      	str	r2, [r3, #4]
 800a4e4:	609a      	str	r2, [r3, #8]
 800a4e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a4e8:	463b      	mov	r3, r7
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800a4f0:	4b1d      	ldr	r3, [pc, #116]	; (800a568 <MX_TIM2_Init+0x94>)
 800a4f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a4f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a4f8:	4b1b      	ldr	r3, [pc, #108]	; (800a568 <MX_TIM2_Init+0x94>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a4fe:	4b1a      	ldr	r3, [pc, #104]	; (800a568 <MX_TIM2_Init+0x94>)
 800a500:	2200      	movs	r2, #0
 800a502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 800a504:	4b18      	ldr	r3, [pc, #96]	; (800a568 <MX_TIM2_Init+0x94>)
 800a506:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a50a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a50c:	4b16      	ldr	r3, [pc, #88]	; (800a568 <MX_TIM2_Init+0x94>)
 800a50e:	2200      	movs	r2, #0
 800a510:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a512:	4b15      	ldr	r3, [pc, #84]	; (800a568 <MX_TIM2_Init+0x94>)
 800a514:	2200      	movs	r2, #0
 800a516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a518:	4813      	ldr	r0, [pc, #76]	; (800a568 <MX_TIM2_Init+0x94>)
 800a51a:	f003 fe13 	bl	800e144 <HAL_TIM_Base_Init>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d001      	beq.n	800a528 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800a524:	f7ff fd1c 	bl	8009f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a52c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a52e:	f107 0308 	add.w	r3, r7, #8
 800a532:	4619      	mov	r1, r3
 800a534:	480c      	ldr	r0, [pc, #48]	; (800a568 <MX_TIM2_Init+0x94>)
 800a536:	f003 fecf 	bl	800e2d8 <HAL_TIM_ConfigClockSource>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800a540:	f7ff fd0e 	bl	8009f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a544:	2300      	movs	r3, #0
 800a546:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a548:	2300      	movs	r3, #0
 800a54a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a54c:	463b      	mov	r3, r7
 800a54e:	4619      	mov	r1, r3
 800a550:	4805      	ldr	r0, [pc, #20]	; (800a568 <MX_TIM2_Init+0x94>)
 800a552:	f004 fa4b 	bl	800e9ec <HAL_TIMEx_MasterConfigSynchronization>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d001      	beq.n	800a560 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800a55c:	f7ff fd00 	bl	8009f60 <Error_Handler>
  }

}
 800a560:	bf00      	nop
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	2000061c 	.word	0x2000061c

0800a56c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a57c:	d10b      	bne.n	800a596 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a57e:	4b08      	ldr	r3, [pc, #32]	; (800a5a0 <HAL_TIM_Base_MspInit+0x34>)
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	4a07      	ldr	r2, [pc, #28]	; (800a5a0 <HAL_TIM_Base_MspInit+0x34>)
 800a584:	f043 0301 	orr.w	r3, r3, #1
 800a588:	61d3      	str	r3, [r2, #28]
 800a58a:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <HAL_TIM_Base_MspInit+0x34>)
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	f003 0301 	and.w	r3, r3, #1
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800a596:	bf00      	nop
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bc80      	pop	{r7}
 800a59e:	4770      	bx	lr
 800a5a0:	40021000 	.word	0x40021000

0800a5a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a5a8:	4b11      	ldr	r3, [pc, #68]	; (800a5f0 <MX_USART1_UART_Init+0x4c>)
 800a5aa:	4a12      	ldr	r2, [pc, #72]	; (800a5f4 <MX_USART1_UART_Init+0x50>)
 800a5ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800a5ae:	4b10      	ldr	r3, [pc, #64]	; (800a5f0 <MX_USART1_UART_Init+0x4c>)
 800a5b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a5b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a5b6:	4b0e      	ldr	r3, [pc, #56]	; (800a5f0 <MX_USART1_UART_Init+0x4c>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a5bc:	4b0c      	ldr	r3, [pc, #48]	; (800a5f0 <MX_USART1_UART_Init+0x4c>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a5c2:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <MX_USART1_UART_Init+0x4c>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a5c8:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <MX_USART1_UART_Init+0x4c>)
 800a5ca:	220c      	movs	r2, #12
 800a5cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a5ce:	4b08      	ldr	r3, [pc, #32]	; (800a5f0 <MX_USART1_UART_Init+0x4c>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a5d4:	4b06      	ldr	r3, [pc, #24]	; (800a5f0 <MX_USART1_UART_Init+0x4c>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a5da:	4805      	ldr	r0, [pc, #20]	; (800a5f0 <MX_USART1_UART_Init+0x4c>)
 800a5dc:	f004 fa9c 	bl	800eb18 <HAL_UART_Init>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a5e6:	f7ff fcbb 	bl	8009f60 <Error_Handler>
  }

}
 800a5ea:	bf00      	nop
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	2000065c 	.word	0x2000065c
 800a5f4:	40013800 	.word	0x40013800

0800a5f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b08a      	sub	sp, #40	; 0x28
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a600:	f107 0314 	add.w	r3, r7, #20
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	605a      	str	r2, [r3, #4]
 800a60a:	609a      	str	r2, [r3, #8]
 800a60c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a26      	ldr	r2, [pc, #152]	; (800a6ac <HAL_UART_MspInit+0xb4>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d145      	bne.n	800a6a4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a618:	4b25      	ldr	r3, [pc, #148]	; (800a6b0 <HAL_UART_MspInit+0xb8>)
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	4a24      	ldr	r2, [pc, #144]	; (800a6b0 <HAL_UART_MspInit+0xb8>)
 800a61e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a622:	6193      	str	r3, [r2, #24]
 800a624:	4b22      	ldr	r3, [pc, #136]	; (800a6b0 <HAL_UART_MspInit+0xb8>)
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a62c:	613b      	str	r3, [r7, #16]
 800a62e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a630:	4b1f      	ldr	r3, [pc, #124]	; (800a6b0 <HAL_UART_MspInit+0xb8>)
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	4a1e      	ldr	r2, [pc, #120]	; (800a6b0 <HAL_UART_MspInit+0xb8>)
 800a636:	f043 0308 	orr.w	r3, r3, #8
 800a63a:	6193      	str	r3, [r2, #24]
 800a63c:	4b1c      	ldr	r3, [pc, #112]	; (800a6b0 <HAL_UART_MspInit+0xb8>)
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	f003 0308 	and.w	r3, r3, #8
 800a644:	60fb      	str	r3, [r7, #12]
 800a646:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 800a648:	2340      	movs	r3, #64	; 0x40
 800a64a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a64c:	2302      	movs	r3, #2
 800a64e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a650:	2303      	movs	r3, #3
 800a652:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800a654:	f107 0314 	add.w	r3, r7, #20
 800a658:	4619      	mov	r1, r3
 800a65a:	4816      	ldr	r0, [pc, #88]	; (800a6b4 <HAL_UART_MspInit+0xbc>)
 800a65c:	f001 f8e2 	bl	800b824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800a660:	2380      	movs	r3, #128	; 0x80
 800a662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a664:	2300      	movs	r3, #0
 800a666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a668:	2300      	movs	r3, #0
 800a66a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800a66c:	f107 0314 	add.w	r3, r7, #20
 800a670:	4619      	mov	r1, r3
 800a672:	4810      	ldr	r0, [pc, #64]	; (800a6b4 <HAL_UART_MspInit+0xbc>)
 800a674:	f001 f8d6 	bl	800b824 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800a678:	4b0f      	ldr	r3, [pc, #60]	; (800a6b8 <HAL_UART_MspInit+0xc0>)
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800a684:	627b      	str	r3, [r7, #36]	; 0x24
 800a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a688:	f043 0304 	orr.w	r3, r3, #4
 800a68c:	627b      	str	r3, [r7, #36]	; 0x24
 800a68e:	4a0a      	ldr	r2, [pc, #40]	; (800a6b8 <HAL_UART_MspInit+0xc0>)
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a694:	2200      	movs	r2, #0
 800a696:	2100      	movs	r1, #0
 800a698:	2025      	movs	r0, #37	; 0x25
 800a69a:	f000 fd21 	bl	800b0e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a69e:	2025      	movs	r0, #37	; 0x25
 800a6a0:	f000 fd4a 	bl	800b138 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a6a4:	bf00      	nop
 800a6a6:	3728      	adds	r7, #40	; 0x28
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	40013800 	.word	0x40013800
 800a6b0:	40021000 	.word	0x40021000
 800a6b4:	40010c00 	.word	0x40010c00
 800a6b8:	40010000 	.word	0x40010000

0800a6bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800a6bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800a6be:	e003      	b.n	800a6c8 <LoopCopyDataInit>

0800a6c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800a6c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800a6c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800a6c6:	3104      	adds	r1, #4

0800a6c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800a6c8:	480a      	ldr	r0, [pc, #40]	; (800a6f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800a6ca:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800a6cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800a6ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800a6d0:	d3f6      	bcc.n	800a6c0 <CopyDataInit>
  ldr r2, =_sbss
 800a6d2:	4a0a      	ldr	r2, [pc, #40]	; (800a6fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800a6d4:	e002      	b.n	800a6dc <LoopFillZerobss>

0800a6d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800a6d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 800a6d8:	f842 3b04 	str.w	r3, [r2], #4

0800a6dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800a6dc:	4b08      	ldr	r3, [pc, #32]	; (800a700 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800a6de:	429a      	cmp	r2, r3
  bcc FillZerobss
 800a6e0:	d3f9      	bcc.n	800a6d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a6e2:	f7ff fd83 	bl	800a1ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a6e6:	f005 f99b 	bl	800fa20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a6ea:	f7ff fb99 	bl	8009e20 <main>
  bx lr
 800a6ee:	4770      	bx	lr
  ldr r3, =_sidata
 800a6f0:	080137b8 	.word	0x080137b8
  ldr r0, =_sdata
 800a6f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800a6f8:	2000010c 	.word	0x2000010c
  ldr r2, =_sbss
 800a6fc:	20000110 	.word	0x20000110
  ldr r3, = _ebss
 800a700:	200006c4 	.word	0x200006c4

0800a704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a704:	e7fe      	b.n	800a704 <ADC1_2_IRQHandler>
	...

0800a708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a70c:	4b08      	ldr	r3, [pc, #32]	; (800a730 <HAL_Init+0x28>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a07      	ldr	r2, [pc, #28]	; (800a730 <HAL_Init+0x28>)
 800a712:	f043 0310 	orr.w	r3, r3, #16
 800a716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a718:	2003      	movs	r0, #3
 800a71a:	f000 fcc1 	bl	800b0a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a71e:	2000      	movs	r0, #0
 800a720:	f000 f808 	bl	800a734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a724:	f7ff fca2 	bl	800a06c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	40022000 	.word	0x40022000

0800a734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a73c:	4b12      	ldr	r3, [pc, #72]	; (800a788 <HAL_InitTick+0x54>)
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	4b12      	ldr	r3, [pc, #72]	; (800a78c <HAL_InitTick+0x58>)
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	4619      	mov	r1, r3
 800a746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a74a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a74e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fd0c 	bl	800b170 <HAL_SYSTICK_Config>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e00e      	b.n	800a780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b0f      	cmp	r3, #15
 800a766:	d80a      	bhi.n	800a77e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a768:	2200      	movs	r2, #0
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295
 800a770:	f000 fcb6 	bl	800b0e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a774:	4a06      	ldr	r2, [pc, #24]	; (800a790 <HAL_InitTick+0x5c>)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	e000      	b.n	800a780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
}
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	2000009c 	.word	0x2000009c
 800a78c:	200000a4 	.word	0x200000a4
 800a790:	200000a0 	.word	0x200000a0

0800a794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a794:	b480      	push	{r7}
 800a796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a798:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <HAL_IncTick+0x1c>)
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	461a      	mov	r2, r3
 800a79e:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <HAL_IncTick+0x20>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	4a03      	ldr	r2, [pc, #12]	; (800a7b4 <HAL_IncTick+0x20>)
 800a7a6:	6013      	str	r3, [r2, #0]
}
 800a7a8:	bf00      	nop
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bc80      	pop	{r7}
 800a7ae:	4770      	bx	lr
 800a7b0:	200000a4 	.word	0x200000a4
 800a7b4:	2000069c 	.word	0x2000069c

0800a7b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	af00      	add	r7, sp, #0
  return uwTick;
 800a7bc:	4b02      	ldr	r3, [pc, #8]	; (800a7c8 <HAL_GetTick+0x10>)
 800a7be:	681b      	ldr	r3, [r3, #0]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bc80      	pop	{r7}
 800a7c6:	4770      	bx	lr
 800a7c8:	2000069c 	.word	0x2000069c

0800a7cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a7d4:	f7ff fff0 	bl	800a7b8 <HAL_GetTick>
 800a7d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e4:	d005      	beq.n	800a7f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a7e6:	4b09      	ldr	r3, [pc, #36]	; (800a80c <HAL_Delay+0x40>)
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a7f2:	bf00      	nop
 800a7f4:	f7ff ffe0 	bl	800a7b8 <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	429a      	cmp	r2, r3
 800a802:	d8f7      	bhi.n	800a7f4 <HAL_Delay+0x28>
  {
  }
}
 800a804:	bf00      	nop
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	200000a4 	.word	0x200000a4

0800a810 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800a820:	2300      	movs	r3, #0
 800a822:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800a824:	2300      	movs	r3, #0
 800a826:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e153      	b.n	800aada <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a9f      	ldr	r2, [pc, #636]	; (800aab4 <HAL_ADC_Init+0x2a4>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d009      	beq.n	800a850 <HAL_ADC_Init+0x40>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a9d      	ldr	r2, [pc, #628]	; (800aab8 <HAL_ADC_Init+0x2a8>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d004      	beq.n	800a850 <HAL_ADC_Init+0x40>
 800a846:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a84a:	489c      	ldr	r0, [pc, #624]	; (800aabc <HAL_ADC_Init+0x2ac>)
 800a84c:	f7ff fb8e 	bl	8009f6c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d009      	beq.n	800a86c <HAL_ADC_Init+0x5c>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a860:	d004      	beq.n	800a86c <HAL_ADC_Init+0x5c>
 800a862:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800a866:	4895      	ldr	r0, [pc, #596]	; (800aabc <HAL_ADC_Init+0x2ac>)
 800a868:	f7ff fb80 	bl	8009f6c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d009      	beq.n	800a888 <HAL_ADC_Init+0x78>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a87c:	d004      	beq.n	800a888 <HAL_ADC_Init+0x78>
 800a87e:	f240 11b5 	movw	r1, #437	; 0x1b5
 800a882:	488e      	ldr	r0, [pc, #568]	; (800aabc <HAL_ADC_Init+0x2ac>)
 800a884:	f7ff fb72 	bl	8009f6c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	7b1b      	ldrb	r3, [r3, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d008      	beq.n	800a8a2 <HAL_ADC_Init+0x92>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	7b1b      	ldrb	r3, [r3, #12]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d004      	beq.n	800a8a2 <HAL_ADC_Init+0x92>
 800a898:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800a89c:	4887      	ldr	r0, [pc, #540]	; (800aabc <HAL_ADC_Init+0x2ac>)
 800a89e:	f7ff fb65 	bl	8009f6c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	69db      	ldr	r3, [r3, #28]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d022      	beq.n	800a8f0 <HAL_ADC_Init+0xe0>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8b2:	d01d      	beq.n	800a8f0 <HAL_ADC_Init+0xe0>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a8bc:	d018      	beq.n	800a8f0 <HAL_ADC_Init+0xe0>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a8c6:	d013      	beq.n	800a8f0 <HAL_ADC_Init+0xe0>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800a8d0:	d00e      	beq.n	800a8f0 <HAL_ADC_Init+0xe0>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a8da:	d009      	beq.n	800a8f0 <HAL_ADC_Init+0xe0>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	69db      	ldr	r3, [r3, #28]
 800a8e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800a8e4:	d004      	beq.n	800a8f0 <HAL_ADC_Init+0xe0>
 800a8e6:	f240 11b7 	movw	r1, #439	; 0x1b7
 800a8ea:	4874      	ldr	r0, [pc, #464]	; (800aabc <HAL_ADC_Init+0x2ac>)
 800a8ec:	f7ff fb3e 	bl	8009f6c <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d02a      	beq.n	800a94e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <HAL_ADC_Init+0xf8>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	2b10      	cmp	r3, #16
 800a906:	d904      	bls.n	800a912 <HAL_ADC_Init+0x102>
 800a908:	f240 11bb 	movw	r1, #443	; 0x1bb
 800a90c:	486b      	ldr	r0, [pc, #428]	; (800aabc <HAL_ADC_Init+0x2ac>)
 800a90e:	f7ff fb2d 	bl	8009f6c <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	7d1b      	ldrb	r3, [r3, #20]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d008      	beq.n	800a92c <HAL_ADC_Init+0x11c>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	7d1b      	ldrb	r3, [r3, #20]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d004      	beq.n	800a92c <HAL_ADC_Init+0x11c>
 800a922:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800a926:	4865      	ldr	r0, [pc, #404]	; (800aabc <HAL_ADC_Init+0x2ac>)
 800a928:	f7ff fb20 	bl	8009f6c <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	7d1b      	ldrb	r3, [r3, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00c      	beq.n	800a94e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d003      	beq.n	800a944 <HAL_ADC_Init+0x134>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	2b08      	cmp	r3, #8
 800a942:	d904      	bls.n	800a94e <HAL_ADC_Init+0x13e>
 800a944:	f240 11bf 	movw	r1, #447	; 0x1bf
 800a948:	485c      	ldr	r0, [pc, #368]	; (800aabc <HAL_ADC_Init+0x2ac>)
 800a94a:	f7ff fb0f 	bl	8009f6c <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a952:	2b00      	cmp	r3, #0
 800a954:	d109      	bne.n	800a96a <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f7ff f93f 	bl	8009be8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fa7e 	bl	800ae6c <ADC_ConversionStop_Disable>
 800a970:	4603      	mov	r3, r0
 800a972:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a978:	f003 0310 	and.w	r3, r3, #16
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f040 80a3 	bne.w	800aac8 <HAL_ADC_Init+0x2b8>
 800a982:	7dfb      	ldrb	r3, [r7, #23]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f040 809f 	bne.w	800aac8 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a992:	f023 0302 	bic.w	r3, r3, #2
 800a996:	f043 0202 	orr.w	r2, r3, #2
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800a9a6:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	7b1b      	ldrb	r3, [r3, #12]
 800a9ac:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800a9ae:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9be:	d003      	beq.n	800a9c8 <HAL_ADC_Init+0x1b8>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d102      	bne.n	800a9ce <HAL_ADC_Init+0x1be>
 800a9c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9cc:	e000      	b.n	800a9d0 <HAL_ADC_Init+0x1c0>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	7d1b      	ldrb	r3, [r3, #20]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d119      	bne.n	800aa12 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	7b1b      	ldrb	r3, [r3, #12]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d109      	bne.n	800a9fa <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	035a      	lsls	r2, r3, #13
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a9f6:	613b      	str	r3, [r7, #16]
 800a9f8:	e00b      	b.n	800aa12 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fe:	f043 0220 	orr.w	r2, r3, #32
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0a:	f043 0201 	orr.w	r2, r3, #1
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	430a      	orrs	r2, r1
 800aa24:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	689a      	ldr	r2, [r3, #8]
 800aa2c:	4b24      	ldr	r3, [pc, #144]	; (800aac0 <HAL_ADC_Init+0x2b0>)
 800aa2e:	4013      	ands	r3, r2
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	6812      	ldr	r2, [r2, #0]
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	430b      	orrs	r3, r1
 800aa38:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa42:	d003      	beq.n	800aa4c <HAL_ADC_Init+0x23c>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d104      	bne.n	800aa56 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	051b      	lsls	r3, r3, #20
 800aa54:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	430a      	orrs	r2, r1
 800aa68:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	689a      	ldr	r2, [r3, #8]
 800aa70:	4b14      	ldr	r3, [pc, #80]	; (800aac4 <HAL_ADC_Init+0x2b4>)
 800aa72:	4013      	ands	r3, r2
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d10b      	bne.n	800aa92 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa84:	f023 0303 	bic.w	r3, r3, #3
 800aa88:	f043 0201 	orr.w	r2, r3, #1
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800aa90:	e022      	b.n	800aad8 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa96:	f023 0312 	bic.w	r3, r3, #18
 800aa9a:	f043 0210 	orr.w	r2, r3, #16
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa6:	f043 0201 	orr.w	r2, r3, #1
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800aab2:	e011      	b.n	800aad8 <HAL_ADC_Init+0x2c8>
 800aab4:	40012400 	.word	0x40012400
 800aab8:	40012800 	.word	0x40012800
 800aabc:	08010824 	.word	0x08010824
 800aac0:	ffe1f7fd 	.word	0xffe1f7fd
 800aac4:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aacc:	f043 0210 	orr.w	r2, r3, #16
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop

0800aae4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a88      	ldr	r2, [pc, #544]	; (800ad1c <HAL_ADC_ConfigChannel+0x238>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d009      	beq.n	800ab14 <HAL_ADC_ConfigChannel+0x30>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a86      	ldr	r2, [pc, #536]	; (800ad20 <HAL_ADC_ConfigChannel+0x23c>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d004      	beq.n	800ab14 <HAL_ADC_ConfigChannel+0x30>
 800ab0a:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800ab0e:	4885      	ldr	r0, [pc, #532]	; (800ad24 <HAL_ADC_ConfigChannel+0x240>)
 800ab10:	f7ff fa2c 	bl	8009f6c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d048      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d044      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d040      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b03      	cmp	r3, #3
 800ab32:	d03c      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b04      	cmp	r3, #4
 800ab3a:	d038      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b05      	cmp	r3, #5
 800ab42:	d034      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b06      	cmp	r3, #6
 800ab4a:	d030      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b07      	cmp	r3, #7
 800ab52:	d02c      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b08      	cmp	r3, #8
 800ab5a:	d028      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b09      	cmp	r3, #9
 800ab62:	d024      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b0a      	cmp	r3, #10
 800ab6a:	d020      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b0b      	cmp	r3, #11
 800ab72:	d01c      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b0c      	cmp	r3, #12
 800ab7a:	d018      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b0d      	cmp	r3, #13
 800ab82:	d014      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b0e      	cmp	r3, #14
 800ab8a:	d010      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b0f      	cmp	r3, #15
 800ab92:	d00c      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2b10      	cmp	r3, #16
 800ab9a:	d008      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b11      	cmp	r3, #17
 800aba2:	d004      	beq.n	800abae <HAL_ADC_ConfigChannel+0xca>
 800aba4:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800aba8:	485e      	ldr	r0, [pc, #376]	; (800ad24 <HAL_ADC_ConfigChannel+0x240>)
 800abaa:	f7ff f9df 	bl	8009f6c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d040      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d03c      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	2b03      	cmp	r3, #3
 800abc4:	d038      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	2b04      	cmp	r3, #4
 800abcc:	d034      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	2b05      	cmp	r3, #5
 800abd4:	d030      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	2b06      	cmp	r3, #6
 800abdc:	d02c      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	2b07      	cmp	r3, #7
 800abe4:	d028      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	2b08      	cmp	r3, #8
 800abec:	d024      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	2b09      	cmp	r3, #9
 800abf4:	d020      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	2b0a      	cmp	r3, #10
 800abfc:	d01c      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	2b0b      	cmp	r3, #11
 800ac04:	d018      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	2b0c      	cmp	r3, #12
 800ac0c:	d014      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	2b0d      	cmp	r3, #13
 800ac14:	d010      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	2b0e      	cmp	r3, #14
 800ac1c:	d00c      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	2b0f      	cmp	r3, #15
 800ac24:	d008      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	2b10      	cmp	r3, #16
 800ac2c:	d004      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x154>
 800ac2e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ac32:	483c      	ldr	r0, [pc, #240]	; (800ad24 <HAL_ADC_ConfigChannel+0x240>)
 800ac34:	f7ff f99a 	bl	8009f6c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d020      	beq.n	800ac82 <HAL_ADC_ConfigChannel+0x19e>
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d01c      	beq.n	800ac82 <HAL_ADC_ConfigChannel+0x19e>
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d018      	beq.n	800ac82 <HAL_ADC_ConfigChannel+0x19e>
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d014      	beq.n	800ac82 <HAL_ADC_ConfigChannel+0x19e>
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	d010      	beq.n	800ac82 <HAL_ADC_ConfigChannel+0x19e>
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	2b05      	cmp	r3, #5
 800ac66:	d00c      	beq.n	800ac82 <HAL_ADC_ConfigChannel+0x19e>
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	2b06      	cmp	r3, #6
 800ac6e:	d008      	beq.n	800ac82 <HAL_ADC_ConfigChannel+0x19e>
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	2b07      	cmp	r3, #7
 800ac76:	d004      	beq.n	800ac82 <HAL_ADC_ConfigChannel+0x19e>
 800ac78:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800ac7c:	4829      	ldr	r0, [pc, #164]	; (800ad24 <HAL_ADC_ConfigChannel+0x240>)
 800ac7e:	f7ff f975 	bl	8009f6c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d101      	bne.n	800ac90 <HAL_ADC_ConfigChannel+0x1ac>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	e0e2      	b.n	800ae56 <HAL_ADC_ConfigChannel+0x372>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	2b06      	cmp	r3, #6
 800ac9e:	d81c      	bhi.n	800acda <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	3b05      	subs	r3, #5
 800acb2:	221f      	movs	r2, #31
 800acb4:	fa02 f303 	lsl.w	r3, r2, r3
 800acb8:	43db      	mvns	r3, r3
 800acba:	4019      	ands	r1, r3
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	6818      	ldr	r0, [r3, #0]
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	4613      	mov	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	3b05      	subs	r3, #5
 800accc:	fa00 f203 	lsl.w	r2, r0, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	430a      	orrs	r2, r1
 800acd6:	635a      	str	r2, [r3, #52]	; 0x34
 800acd8:	e042      	b.n	800ad60 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	2b0c      	cmp	r3, #12
 800ace0:	d822      	bhi.n	800ad28 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	4613      	mov	r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	3b23      	subs	r3, #35	; 0x23
 800acf4:	221f      	movs	r2, #31
 800acf6:	fa02 f303 	lsl.w	r3, r2, r3
 800acfa:	43db      	mvns	r3, r3
 800acfc:	4019      	ands	r1, r3
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	685a      	ldr	r2, [r3, #4]
 800ad06:	4613      	mov	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	3b23      	subs	r3, #35	; 0x23
 800ad0e:	fa00 f203 	lsl.w	r2, r0, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	631a      	str	r2, [r3, #48]	; 0x30
 800ad1a:	e021      	b.n	800ad60 <HAL_ADC_ConfigChannel+0x27c>
 800ad1c:	40012400 	.word	0x40012400
 800ad20:	40012800 	.word	0x40012800
 800ad24:	08010824 	.word	0x08010824
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	685a      	ldr	r2, [r3, #4]
 800ad32:	4613      	mov	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4413      	add	r3, r2
 800ad38:	3b41      	subs	r3, #65	; 0x41
 800ad3a:	221f      	movs	r2, #31
 800ad3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad40:	43db      	mvns	r3, r3
 800ad42:	4019      	ands	r1, r3
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	6818      	ldr	r0, [r3, #0]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	3b41      	subs	r3, #65	; 0x41
 800ad54:	fa00 f203 	lsl.w	r2, r0, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b09      	cmp	r3, #9
 800ad66:	d91c      	bls.n	800ada2 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68d9      	ldr	r1, [r3, #12]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	4613      	mov	r3, r2
 800ad74:	005b      	lsls	r3, r3, #1
 800ad76:	4413      	add	r3, r2
 800ad78:	3b1e      	subs	r3, #30
 800ad7a:	2207      	movs	r2, #7
 800ad7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad80:	43db      	mvns	r3, r3
 800ad82:	4019      	ands	r1, r3
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	6898      	ldr	r0, [r3, #8]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	4413      	add	r3, r2
 800ad92:	3b1e      	subs	r3, #30
 800ad94:	fa00 f203 	lsl.w	r2, r0, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	430a      	orrs	r2, r1
 800ad9e:	60da      	str	r2, [r3, #12]
 800ada0:	e019      	b.n	800add6 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6919      	ldr	r1, [r3, #16]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	4613      	mov	r3, r2
 800adae:	005b      	lsls	r3, r3, #1
 800adb0:	4413      	add	r3, r2
 800adb2:	2207      	movs	r2, #7
 800adb4:	fa02 f303 	lsl.w	r3, r2, r3
 800adb8:	43db      	mvns	r3, r3
 800adba:	4019      	ands	r1, r3
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	6898      	ldr	r0, [r3, #8]
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	4613      	mov	r3, r2
 800adc6:	005b      	lsls	r3, r3, #1
 800adc8:	4413      	add	r3, r2
 800adca:	fa00 f203 	lsl.w	r2, r0, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	430a      	orrs	r2, r1
 800add4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b10      	cmp	r3, #16
 800addc:	d003      	beq.n	800ade6 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800ade2:	2b11      	cmp	r3, #17
 800ade4:	d132      	bne.n	800ae4c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a1d      	ldr	r2, [pc, #116]	; (800ae60 <HAL_ADC_ConfigChannel+0x37c>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d125      	bne.n	800ae3c <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d126      	bne.n	800ae4c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689a      	ldr	r2, [r3, #8]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ae0c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b10      	cmp	r3, #16
 800ae14:	d11a      	bne.n	800ae4c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ae16:	4b13      	ldr	r3, [pc, #76]	; (800ae64 <HAL_ADC_ConfigChannel+0x380>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a13      	ldr	r2, [pc, #76]	; (800ae68 <HAL_ADC_ConfigChannel+0x384>)
 800ae1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae20:	0c9a      	lsrs	r2, r3, #18
 800ae22:	4613      	mov	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	005b      	lsls	r3, r3, #1
 800ae2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800ae2c:	e002      	b.n	800ae34 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	3b01      	subs	r3, #1
 800ae32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1f9      	bne.n	800ae2e <HAL_ADC_ConfigChannel+0x34a>
 800ae3a:	e007      	b.n	800ae4c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae40:	f043 0220 	orr.w	r2, r3, #32
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	40012400 	.word	0x40012400
 800ae64:	2000009c 	.word	0x2000009c
 800ae68:	431bde83 	.word	0x431bde83

0800ae6c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d127      	bne.n	800aed6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689a      	ldr	r2, [r3, #8]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f022 0201 	bic.w	r2, r2, #1
 800ae94:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ae96:	f7ff fc8f 	bl	800a7b8 <HAL_GetTick>
 800ae9a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800ae9c:	e014      	b.n	800aec8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ae9e:	f7ff fc8b 	bl	800a7b8 <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d90d      	bls.n	800aec8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb0:	f043 0210 	orr.w	r2, r3, #16
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebc:	f043 0201 	orr.w	r2, r3, #1
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e007      	b.n	800aed8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d0e3      	beq.n	800ae9e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aef0:	4b0c      	ldr	r3, [pc, #48]	; (800af24 <__NVIC_SetPriorityGrouping+0x44>)
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800aefc:	4013      	ands	r3, r2
 800aefe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800af08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800af0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800af12:	4a04      	ldr	r2, [pc, #16]	; (800af24 <__NVIC_SetPriorityGrouping+0x44>)
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	60d3      	str	r3, [r2, #12]
}
 800af18:	bf00      	nop
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bc80      	pop	{r7}
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	e000ed00 	.word	0xe000ed00

0800af28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800af2c:	4b04      	ldr	r3, [pc, #16]	; (800af40 <__NVIC_GetPriorityGrouping+0x18>)
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	0a1b      	lsrs	r3, r3, #8
 800af32:	f003 0307 	and.w	r3, r3, #7
}
 800af36:	4618      	mov	r0, r3
 800af38:	46bd      	mov	sp, r7
 800af3a:	bc80      	pop	{r7}
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	e000ed00 	.word	0xe000ed00

0800af44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af52:	2b00      	cmp	r3, #0
 800af54:	db0b      	blt.n	800af6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	f003 021f 	and.w	r2, r3, #31
 800af5c:	4906      	ldr	r1, [pc, #24]	; (800af78 <__NVIC_EnableIRQ+0x34>)
 800af5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af62:	095b      	lsrs	r3, r3, #5
 800af64:	2001      	movs	r0, #1
 800af66:	fa00 f202 	lsl.w	r2, r0, r2
 800af6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800af6e:	bf00      	nop
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	bc80      	pop	{r7}
 800af76:	4770      	bx	lr
 800af78:	e000e100 	.word	0xe000e100

0800af7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	6039      	str	r1, [r7, #0]
 800af86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	db0a      	blt.n	800afa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	b2da      	uxtb	r2, r3
 800af94:	490c      	ldr	r1, [pc, #48]	; (800afc8 <__NVIC_SetPriority+0x4c>)
 800af96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af9a:	0112      	lsls	r2, r2, #4
 800af9c:	b2d2      	uxtb	r2, r2
 800af9e:	440b      	add	r3, r1
 800afa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800afa4:	e00a      	b.n	800afbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	4908      	ldr	r1, [pc, #32]	; (800afcc <__NVIC_SetPriority+0x50>)
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	f003 030f 	and.w	r3, r3, #15
 800afb2:	3b04      	subs	r3, #4
 800afb4:	0112      	lsls	r2, r2, #4
 800afb6:	b2d2      	uxtb	r2, r2
 800afb8:	440b      	add	r3, r1
 800afba:	761a      	strb	r2, [r3, #24]
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bc80      	pop	{r7}
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	e000e100 	.word	0xe000e100
 800afcc:	e000ed00 	.word	0xe000ed00

0800afd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b089      	sub	sp, #36	; 0x24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f003 0307 	and.w	r3, r3, #7
 800afe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	f1c3 0307 	rsb	r3, r3, #7
 800afea:	2b04      	cmp	r3, #4
 800afec:	bf28      	it	cs
 800afee:	2304      	movcs	r3, #4
 800aff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	3304      	adds	r3, #4
 800aff6:	2b06      	cmp	r3, #6
 800aff8:	d902      	bls.n	800b000 <NVIC_EncodePriority+0x30>
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	3b03      	subs	r3, #3
 800affe:	e000      	b.n	800b002 <NVIC_EncodePriority+0x32>
 800b000:	2300      	movs	r3, #0
 800b002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b004:	f04f 32ff 	mov.w	r2, #4294967295
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	fa02 f303 	lsl.w	r3, r2, r3
 800b00e:	43da      	mvns	r2, r3
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	401a      	ands	r2, r3
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b018:	f04f 31ff 	mov.w	r1, #4294967295
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	fa01 f303 	lsl.w	r3, r1, r3
 800b022:	43d9      	mvns	r1, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b028:	4313      	orrs	r3, r2
         );
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3724      	adds	r7, #36	; 0x24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bc80      	pop	{r7}
 800b032:	4770      	bx	lr

0800b034 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b034:	b480      	push	{r7}
 800b036:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b038:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b03c:	4b05      	ldr	r3, [pc, #20]	; (800b054 <__NVIC_SystemReset+0x20>)
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b044:	4903      	ldr	r1, [pc, #12]	; (800b054 <__NVIC_SystemReset+0x20>)
 800b046:	4b04      	ldr	r3, [pc, #16]	; (800b058 <__NVIC_SystemReset+0x24>)
 800b048:	4313      	orrs	r3, r2
 800b04a:	60cb      	str	r3, [r1, #12]
 800b04c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b050:	bf00      	nop
 800b052:	e7fd      	b.n	800b050 <__NVIC_SystemReset+0x1c>
 800b054:	e000ed00 	.word	0xe000ed00
 800b058:	05fa0004 	.word	0x05fa0004

0800b05c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3b01      	subs	r3, #1
 800b068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b06c:	d301      	bcc.n	800b072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b06e:	2301      	movs	r3, #1
 800b070:	e00f      	b.n	800b092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b072:	4a0a      	ldr	r2, [pc, #40]	; (800b09c <SysTick_Config+0x40>)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3b01      	subs	r3, #1
 800b078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b07a:	210f      	movs	r1, #15
 800b07c:	f04f 30ff 	mov.w	r0, #4294967295
 800b080:	f7ff ff7c 	bl	800af7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b084:	4b05      	ldr	r3, [pc, #20]	; (800b09c <SysTick_Config+0x40>)
 800b086:	2200      	movs	r2, #0
 800b088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b08a:	4b04      	ldr	r3, [pc, #16]	; (800b09c <SysTick_Config+0x40>)
 800b08c:	2207      	movs	r2, #7
 800b08e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	e000e010 	.word	0xe000e010

0800b0a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b07      	cmp	r3, #7
 800b0ac:	d00f      	beq.n	800b0ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b06      	cmp	r3, #6
 800b0b2:	d00c      	beq.n	800b0ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b05      	cmp	r3, #5
 800b0b8:	d009      	beq.n	800b0ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d006      	beq.n	800b0ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	d003      	beq.n	800b0ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 800b0c6:	2192      	movs	r1, #146	; 0x92
 800b0c8:	4804      	ldr	r0, [pc, #16]	; (800b0dc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800b0ca:	f7fe ff4f 	bl	8009f6c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7ff ff06 	bl	800aee0 <__NVIC_SetPriorityGrouping>
}
 800b0d4:	bf00      	nop
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	0801085c 	.word	0x0801085c

0800b0e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2b0f      	cmp	r3, #15
 800b0f6:	d903      	bls.n	800b100 <HAL_NVIC_SetPriority+0x20>
 800b0f8:	21aa      	movs	r1, #170	; 0xaa
 800b0fa:	480e      	ldr	r0, [pc, #56]	; (800b134 <HAL_NVIC_SetPriority+0x54>)
 800b0fc:	f7fe ff36 	bl	8009f6c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2b0f      	cmp	r3, #15
 800b104:	d903      	bls.n	800b10e <HAL_NVIC_SetPriority+0x2e>
 800b106:	21ab      	movs	r1, #171	; 0xab
 800b108:	480a      	ldr	r0, [pc, #40]	; (800b134 <HAL_NVIC_SetPriority+0x54>)
 800b10a:	f7fe ff2f 	bl	8009f6c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b10e:	f7ff ff0b 	bl	800af28 <__NVIC_GetPriorityGrouping>
 800b112:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	68b9      	ldr	r1, [r7, #8]
 800b118:	6978      	ldr	r0, [r7, #20]
 800b11a:	f7ff ff59 	bl	800afd0 <NVIC_EncodePriority>
 800b11e:	4602      	mov	r2, r0
 800b120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b124:	4611      	mov	r1, r2
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff ff28 	bl	800af7c <__NVIC_SetPriority>
}
 800b12c:	bf00      	nop
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	0801085c 	.word	0x0801085c

0800b138 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	4603      	mov	r3, r0
 800b140:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800b142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b146:	2b00      	cmp	r3, #0
 800b148:	da03      	bge.n	800b152 <HAL_NVIC_EnableIRQ+0x1a>
 800b14a:	21be      	movs	r1, #190	; 0xbe
 800b14c:	4805      	ldr	r0, [pc, #20]	; (800b164 <HAL_NVIC_EnableIRQ+0x2c>)
 800b14e:	f7fe ff0d 	bl	8009f6c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff fef4 	bl	800af44 <__NVIC_EnableIRQ>
}
 800b15c:	bf00      	nop
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	0801085c 	.word	0x0801085c

0800b168 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800b16c:	f7ff ff62 	bl	800b034 <__NVIC_SystemReset>

0800b170 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f7ff ff6f 	bl	800b05c <SysTick_Config>
 800b17e:	4603      	mov	r3, r0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d005      	beq.n	800b1aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2204      	movs	r2, #4
 800b1a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	73fb      	strb	r3, [r7, #15]
 800b1a8:	e051      	b.n	800b24e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f022 020e 	bic.w	r2, r2, #14
 800b1b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f022 0201 	bic.w	r2, r2, #1
 800b1c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a22      	ldr	r2, [pc, #136]	; (800b258 <HAL_DMA_Abort_IT+0xd0>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d029      	beq.n	800b228 <HAL_DMA_Abort_IT+0xa0>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a20      	ldr	r2, [pc, #128]	; (800b25c <HAL_DMA_Abort_IT+0xd4>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d022      	beq.n	800b224 <HAL_DMA_Abort_IT+0x9c>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a1f      	ldr	r2, [pc, #124]	; (800b260 <HAL_DMA_Abort_IT+0xd8>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d01a      	beq.n	800b21e <HAL_DMA_Abort_IT+0x96>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a1d      	ldr	r2, [pc, #116]	; (800b264 <HAL_DMA_Abort_IT+0xdc>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d012      	beq.n	800b218 <HAL_DMA_Abort_IT+0x90>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a1c      	ldr	r2, [pc, #112]	; (800b268 <HAL_DMA_Abort_IT+0xe0>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d00a      	beq.n	800b212 <HAL_DMA_Abort_IT+0x8a>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a1a      	ldr	r2, [pc, #104]	; (800b26c <HAL_DMA_Abort_IT+0xe4>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d102      	bne.n	800b20c <HAL_DMA_Abort_IT+0x84>
 800b206:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b20a:	e00e      	b.n	800b22a <HAL_DMA_Abort_IT+0xa2>
 800b20c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b210:	e00b      	b.n	800b22a <HAL_DMA_Abort_IT+0xa2>
 800b212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b216:	e008      	b.n	800b22a <HAL_DMA_Abort_IT+0xa2>
 800b218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b21c:	e005      	b.n	800b22a <HAL_DMA_Abort_IT+0xa2>
 800b21e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b222:	e002      	b.n	800b22a <HAL_DMA_Abort_IT+0xa2>
 800b224:	2310      	movs	r3, #16
 800b226:	e000      	b.n	800b22a <HAL_DMA_Abort_IT+0xa2>
 800b228:	2301      	movs	r3, #1
 800b22a:	4a11      	ldr	r2, [pc, #68]	; (800b270 <HAL_DMA_Abort_IT+0xe8>)
 800b22c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	4798      	blx	r3
    } 
  }
  return status;
 800b24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	40020008 	.word	0x40020008
 800b25c:	4002001c 	.word	0x4002001c
 800b260:	40020030 	.word	0x40020030
 800b264:	40020044 	.word	0x40020044
 800b268:	40020058 	.word	0x40020058
 800b26c:	4002006c 	.word	0x4002006c
 800b270:	40020000 	.word	0x40020000

0800b274 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800b274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b276:	b087      	sub	sp, #28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b28e:	4b49      	ldr	r3, [pc, #292]	; (800b3b4 <HAL_FLASH_Program+0x140>)
 800b290:	7e1b      	ldrb	r3, [r3, #24]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d101      	bne.n	800b29a <HAL_FLASH_Program+0x26>
 800b296:	2302      	movs	r3, #2
 800b298:	e088      	b.n	800b3ac <HAL_FLASH_Program+0x138>
 800b29a:	4b46      	ldr	r3, [pc, #280]	; (800b3b4 <HAL_FLASH_Program+0x140>)
 800b29c:	2201      	movs	r2, #1
 800b29e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d009      	beq.n	800b2ba <HAL_FLASH_Program+0x46>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d006      	beq.n	800b2ba <HAL_FLASH_Program+0x46>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	d003      	beq.n	800b2ba <HAL_FLASH_Program+0x46>
 800b2b2:	21b2      	movs	r1, #178	; 0xb2
 800b2b4:	4840      	ldr	r0, [pc, #256]	; (800b3b8 <HAL_FLASH_Program+0x144>)
 800b2b6:	f7fe fe59 	bl	8009f6c <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2c0:	d31e      	bcc.n	800b300 <HAL_FLASH_Program+0x8c>
 800b2c2:	4b3e      	ldr	r3, [pc, #248]	; (800b3bc <HAL_FLASH_Program+0x148>)
 800b2c4:	881b      	ldrh	r3, [r3, #0]
 800b2c6:	2b80      	cmp	r3, #128	; 0x80
 800b2c8:	d104      	bne.n	800b2d4 <HAL_FLASH_Program+0x60>
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	4a3c      	ldr	r2, [pc, #240]	; (800b3c0 <HAL_FLASH_Program+0x14c>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d816      	bhi.n	800b300 <HAL_FLASH_Program+0x8c>
 800b2d2:	e019      	b.n	800b308 <HAL_FLASH_Program+0x94>
 800b2d4:	4b39      	ldr	r3, [pc, #228]	; (800b3bc <HAL_FLASH_Program+0x148>)
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	2b40      	cmp	r3, #64	; 0x40
 800b2da:	d104      	bne.n	800b2e6 <HAL_FLASH_Program+0x72>
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	4a39      	ldr	r2, [pc, #228]	; (800b3c4 <HAL_FLASH_Program+0x150>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d80d      	bhi.n	800b300 <HAL_FLASH_Program+0x8c>
 800b2e4:	e010      	b.n	800b308 <HAL_FLASH_Program+0x94>
 800b2e6:	4b35      	ldr	r3, [pc, #212]	; (800b3bc <HAL_FLASH_Program+0x148>)
 800b2e8:	881b      	ldrh	r3, [r3, #0]
 800b2ea:	2b20      	cmp	r3, #32
 800b2ec:	d104      	bne.n	800b2f8 <HAL_FLASH_Program+0x84>
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	4a35      	ldr	r2, [pc, #212]	; (800b3c8 <HAL_FLASH_Program+0x154>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d804      	bhi.n	800b300 <HAL_FLASH_Program+0x8c>
 800b2f6:	e007      	b.n	800b308 <HAL_FLASH_Program+0x94>
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	4a34      	ldr	r2, [pc, #208]	; (800b3cc <HAL_FLASH_Program+0x158>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d903      	bls.n	800b308 <HAL_FLASH_Program+0x94>
 800b300:	21b3      	movs	r1, #179	; 0xb3
 800b302:	482d      	ldr	r0, [pc, #180]	; (800b3b8 <HAL_FLASH_Program+0x144>)
 800b304:	f7fe fe32 	bl	8009f6c <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b308:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b30c:	f000 f8b4 	bl	800b478 <FLASH_WaitForLastOperation>
 800b310:	4603      	mov	r3, r0
 800b312:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800b314:	7dfb      	ldrb	r3, [r7, #23]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d144      	bne.n	800b3a4 <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d102      	bne.n	800b326 <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800b320:	2301      	movs	r3, #1
 800b322:	757b      	strb	r3, [r7, #21]
 800b324:	e007      	b.n	800b336 <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d102      	bne.n	800b332 <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800b32c:	2302      	movs	r3, #2
 800b32e:	757b      	strb	r3, [r7, #21]
 800b330:	e001      	b.n	800b336 <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800b332:	2304      	movs	r3, #4
 800b334:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800b336:	2300      	movs	r3, #0
 800b338:	75bb      	strb	r3, [r7, #22]
 800b33a:	e02d      	b.n	800b398 <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800b33c:	7dbb      	ldrb	r3, [r7, #22]
 800b33e:	005a      	lsls	r2, r3, #1
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	eb02 0c03 	add.w	ip, r2, r3
 800b346:	7dbb      	ldrb	r3, [r7, #22]
 800b348:	0119      	lsls	r1, r3, #4
 800b34a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b34e:	f1c1 0620 	rsb	r6, r1, #32
 800b352:	f1a1 0020 	sub.w	r0, r1, #32
 800b356:	fa22 f401 	lsr.w	r4, r2, r1
 800b35a:	fa03 f606 	lsl.w	r6, r3, r6
 800b35e:	4334      	orrs	r4, r6
 800b360:	fa23 f000 	lsr.w	r0, r3, r0
 800b364:	4304      	orrs	r4, r0
 800b366:	fa23 f501 	lsr.w	r5, r3, r1
 800b36a:	b2a3      	uxth	r3, r4
 800b36c:	4619      	mov	r1, r3
 800b36e:	4660      	mov	r0, ip
 800b370:	f000 f866 	bl	800b440 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b374:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b378:	f000 f87e 	bl	800b478 <FLASH_WaitForLastOperation>
 800b37c:	4603      	mov	r3, r0
 800b37e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b380:	4b13      	ldr	r3, [pc, #76]	; (800b3d0 <HAL_FLASH_Program+0x15c>)
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	4a12      	ldr	r2, [pc, #72]	; (800b3d0 <HAL_FLASH_Program+0x15c>)
 800b386:	f023 0301 	bic.w	r3, r3, #1
 800b38a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800b38c:	7dfb      	ldrb	r3, [r7, #23]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d107      	bne.n	800b3a2 <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 800b392:	7dbb      	ldrb	r3, [r7, #22]
 800b394:	3301      	adds	r3, #1
 800b396:	75bb      	strb	r3, [r7, #22]
 800b398:	7dba      	ldrb	r2, [r7, #22]
 800b39a:	7d7b      	ldrb	r3, [r7, #21]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d3cd      	bcc.n	800b33c <HAL_FLASH_Program+0xc8>
 800b3a0:	e000      	b.n	800b3a4 <HAL_FLASH_Program+0x130>
      {
        break;
 800b3a2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b3a4:	4b03      	ldr	r3, [pc, #12]	; (800b3b4 <HAL_FLASH_Program+0x140>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	761a      	strb	r2, [r3, #24]

  return status;
 800b3aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	371c      	adds	r7, #28
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3b4:	200006a0 	.word	0x200006a0
 800b3b8:	08010898 	.word	0x08010898
 800b3bc:	1ffff7e0 	.word	0x1ffff7e0
 800b3c0:	0801ffff 	.word	0x0801ffff
 800b3c4:	0800ffff 	.word	0x0800ffff
 800b3c8:	08007fff 	.word	0x08007fff
 800b3cc:	08003fff 	.word	0x08003fff
 800b3d0:	40022000 	.word	0x40022000

0800b3d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b3de:	4b0d      	ldr	r3, [pc, #52]	; (800b414 <HAL_FLASH_Unlock+0x40>)
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00d      	beq.n	800b406 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800b3ea:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <HAL_FLASH_Unlock+0x40>)
 800b3ec:	4a0a      	ldr	r2, [pc, #40]	; (800b418 <HAL_FLASH_Unlock+0x44>)
 800b3ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800b3f0:	4b08      	ldr	r3, [pc, #32]	; (800b414 <HAL_FLASH_Unlock+0x40>)
 800b3f2:	4a0a      	ldr	r2, [pc, #40]	; (800b41c <HAL_FLASH_Unlock+0x48>)
 800b3f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b3f6:	4b07      	ldr	r3, [pc, #28]	; (800b414 <HAL_FLASH_Unlock+0x40>)
 800b3f8:	691b      	ldr	r3, [r3, #16]
 800b3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800b406:	79fb      	ldrb	r3, [r7, #7]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bc80      	pop	{r7}
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	40022000 	.word	0x40022000
 800b418:	45670123 	.word	0x45670123
 800b41c:	cdef89ab 	.word	0xcdef89ab

0800b420 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800b420:	b480      	push	{r7}
 800b422:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800b424:	4b05      	ldr	r3, [pc, #20]	; (800b43c <HAL_FLASH_Lock+0x1c>)
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	4a04      	ldr	r2, [pc, #16]	; (800b43c <HAL_FLASH_Lock+0x1c>)
 800b42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b42e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	46bd      	mov	sp, r7
 800b436:	bc80      	pop	{r7}
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	40022000 	.word	0x40022000

0800b440 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	460b      	mov	r3, r1
 800b44a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b44c:	4b08      	ldr	r3, [pc, #32]	; (800b470 <FLASH_Program_HalfWord+0x30>)
 800b44e:	2200      	movs	r2, #0
 800b450:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800b452:	4b08      	ldr	r3, [pc, #32]	; (800b474 <FLASH_Program_HalfWord+0x34>)
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	4a07      	ldr	r2, [pc, #28]	; (800b474 <FLASH_Program_HalfWord+0x34>)
 800b458:	f043 0301 	orr.w	r3, r3, #1
 800b45c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	887a      	ldrh	r2, [r7, #2]
 800b462:	801a      	strh	r2, [r3, #0]
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	bc80      	pop	{r7}
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	200006a0 	.word	0x200006a0
 800b474:	40022000 	.word	0x40022000

0800b478 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800b480:	f7ff f99a 	bl	800a7b8 <HAL_GetTick>
 800b484:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b486:	e010      	b.n	800b4aa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48e:	d00c      	beq.n	800b4aa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d007      	beq.n	800b4a6 <FLASH_WaitForLastOperation+0x2e>
 800b496:	f7ff f98f 	bl	800a7b8 <HAL_GetTick>
 800b49a:	4602      	mov	r2, r0
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d201      	bcs.n	800b4aa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e025      	b.n	800b4f6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b4aa:	4b15      	ldr	r3, [pc, #84]	; (800b500 <FLASH_WaitForLastOperation+0x88>)
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1e8      	bne.n	800b488 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800b4b6:	4b12      	ldr	r3, [pc, #72]	; (800b500 <FLASH_WaitForLastOperation+0x88>)
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	f003 0320 	and.w	r3, r3, #32
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b4c2:	4b0f      	ldr	r3, [pc, #60]	; (800b500 <FLASH_WaitForLastOperation+0x88>)
 800b4c4:	2220      	movs	r2, #32
 800b4c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800b4c8:	4b0d      	ldr	r3, [pc, #52]	; (800b500 <FLASH_WaitForLastOperation+0x88>)
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	f003 0310 	and.w	r3, r3, #16
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10b      	bne.n	800b4ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800b4d4:	4b0a      	ldr	r3, [pc, #40]	; (800b500 <FLASH_WaitForLastOperation+0x88>)
 800b4d6:	69db      	ldr	r3, [r3, #28]
 800b4d8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d105      	bne.n	800b4ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800b4e0:	4b07      	ldr	r3, [pc, #28]	; (800b500 <FLASH_WaitForLastOperation+0x88>)
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d003      	beq.n	800b4f4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800b4ec:	f000 f80a 	bl	800b504 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e000      	b.n	800b4f6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	40022000 	.word	0x40022000

0800b504 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800b50a:	2300      	movs	r3, #0
 800b50c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800b50e:	4b23      	ldr	r3, [pc, #140]	; (800b59c <FLASH_SetErrorCode+0x98>)
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	f003 0310 	and.w	r3, r3, #16
 800b516:	2b00      	cmp	r3, #0
 800b518:	d009      	beq.n	800b52e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b51a:	4b21      	ldr	r3, [pc, #132]	; (800b5a0 <FLASH_SetErrorCode+0x9c>)
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	f043 0302 	orr.w	r3, r3, #2
 800b522:	4a1f      	ldr	r2, [pc, #124]	; (800b5a0 <FLASH_SetErrorCode+0x9c>)
 800b524:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f043 0310 	orr.w	r3, r3, #16
 800b52c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800b52e:	4b1b      	ldr	r3, [pc, #108]	; (800b59c <FLASH_SetErrorCode+0x98>)
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	f003 0304 	and.w	r3, r3, #4
 800b536:	2b00      	cmp	r3, #0
 800b538:	d009      	beq.n	800b54e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800b53a:	4b19      	ldr	r3, [pc, #100]	; (800b5a0 <FLASH_SetErrorCode+0x9c>)
 800b53c:	69db      	ldr	r3, [r3, #28]
 800b53e:	f043 0301 	orr.w	r3, r3, #1
 800b542:	4a17      	ldr	r2, [pc, #92]	; (800b5a0 <FLASH_SetErrorCode+0x9c>)
 800b544:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f043 0304 	orr.w	r3, r3, #4
 800b54c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800b54e:	4b13      	ldr	r3, [pc, #76]	; (800b59c <FLASH_SetErrorCode+0x98>)
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	f003 0301 	and.w	r3, r3, #1
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00b      	beq.n	800b572 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800b55a:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <FLASH_SetErrorCode+0x9c>)
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	f043 0304 	orr.w	r3, r3, #4
 800b562:	4a0f      	ldr	r2, [pc, #60]	; (800b5a0 <FLASH_SetErrorCode+0x9c>)
 800b564:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800b566:	4b0d      	ldr	r3, [pc, #52]	; (800b59c <FLASH_SetErrorCode+0x98>)
 800b568:	69db      	ldr	r3, [r3, #28]
 800b56a:	4a0c      	ldr	r2, [pc, #48]	; (800b59c <FLASH_SetErrorCode+0x98>)
 800b56c:	f023 0301 	bic.w	r3, r3, #1
 800b570:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f240 1201 	movw	r2, #257	; 0x101
 800b578:	4293      	cmp	r3, r2
 800b57a:	d106      	bne.n	800b58a <FLASH_SetErrorCode+0x86>
 800b57c:	4b07      	ldr	r3, [pc, #28]	; (800b59c <FLASH_SetErrorCode+0x98>)
 800b57e:	69db      	ldr	r3, [r3, #28]
 800b580:	4a06      	ldr	r2, [pc, #24]	; (800b59c <FLASH_SetErrorCode+0x98>)
 800b582:	f023 0301 	bic.w	r3, r3, #1
 800b586:	61d3      	str	r3, [r2, #28]
}  
 800b588:	e002      	b.n	800b590 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800b58a:	4a04      	ldr	r2, [pc, #16]	; (800b59c <FLASH_SetErrorCode+0x98>)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	60d3      	str	r3, [r2, #12]
}  
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	bc80      	pop	{r7}
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	40022000 	.word	0x40022000
 800b5a0:	200006a0 	.word	0x200006a0

0800b5a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b5b6:	4b70      	ldr	r3, [pc, #448]	; (800b778 <HAL_FLASHEx_Erase+0x1d4>)
 800b5b8:	7e1b      	ldrb	r3, [r3, #24]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d101      	bne.n	800b5c2 <HAL_FLASHEx_Erase+0x1e>
 800b5be:	2302      	movs	r3, #2
 800b5c0:	e0d5      	b.n	800b76e <HAL_FLASHEx_Erase+0x1ca>
 800b5c2:	4b6d      	ldr	r3, [pc, #436]	; (800b778 <HAL_FLASHEx_Erase+0x1d4>)
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d007      	beq.n	800b5e0 <HAL_FLASHEx_Erase+0x3c>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d003      	beq.n	800b5e0 <HAL_FLASHEx_Erase+0x3c>
 800b5d8:	21a8      	movs	r1, #168	; 0xa8
 800b5da:	4868      	ldr	r0, [pc, #416]	; (800b77c <HAL_FLASHEx_Erase+0x1d8>)
 800b5dc:	f7fe fcc6 	bl	8009f6c <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d117      	bne.n	800b618 <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800b5e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b5ec:	f7ff ff44 	bl	800b478 <FLASH_WaitForLastOperation>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f040 80b7 	bne.w	800b766 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800b5f8:	2001      	movs	r0, #1
 800b5fa:	f000 f8cd 	bl	800b798 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b5fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b602:	f7ff ff39 	bl	800b478 <FLASH_WaitForLastOperation>
 800b606:	4603      	mov	r3, r0
 800b608:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800b60a:	4b5d      	ldr	r3, [pc, #372]	; (800b780 <HAL_FLASHEx_Erase+0x1dc>)
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	4a5c      	ldr	r2, [pc, #368]	; (800b780 <HAL_FLASHEx_Erase+0x1dc>)
 800b610:	f023 0304 	bic.w	r3, r3, #4
 800b614:	6113      	str	r3, [r2, #16]
 800b616:	e0a6      	b.n	800b766 <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b620:	d322      	bcc.n	800b668 <HAL_FLASHEx_Erase+0xc4>
 800b622:	4b58      	ldr	r3, [pc, #352]	; (800b784 <HAL_FLASHEx_Erase+0x1e0>)
 800b624:	881b      	ldrh	r3, [r3, #0]
 800b626:	2b80      	cmp	r3, #128	; 0x80
 800b628:	d105      	bne.n	800b636 <HAL_FLASHEx_Erase+0x92>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	4a56      	ldr	r2, [pc, #344]	; (800b788 <HAL_FLASHEx_Erase+0x1e4>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d819      	bhi.n	800b668 <HAL_FLASHEx_Erase+0xc4>
 800b634:	e01c      	b.n	800b670 <HAL_FLASHEx_Erase+0xcc>
 800b636:	4b53      	ldr	r3, [pc, #332]	; (800b784 <HAL_FLASHEx_Erase+0x1e0>)
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	2b40      	cmp	r3, #64	; 0x40
 800b63c:	d105      	bne.n	800b64a <HAL_FLASHEx_Erase+0xa6>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	4a52      	ldr	r2, [pc, #328]	; (800b78c <HAL_FLASHEx_Erase+0x1e8>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d80f      	bhi.n	800b668 <HAL_FLASHEx_Erase+0xc4>
 800b648:	e012      	b.n	800b670 <HAL_FLASHEx_Erase+0xcc>
 800b64a:	4b4e      	ldr	r3, [pc, #312]	; (800b784 <HAL_FLASHEx_Erase+0x1e0>)
 800b64c:	881b      	ldrh	r3, [r3, #0]
 800b64e:	2b20      	cmp	r3, #32
 800b650:	d105      	bne.n	800b65e <HAL_FLASHEx_Erase+0xba>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	4a4e      	ldr	r2, [pc, #312]	; (800b790 <HAL_FLASHEx_Erase+0x1ec>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d805      	bhi.n	800b668 <HAL_FLASHEx_Erase+0xc4>
 800b65c:	e008      	b.n	800b670 <HAL_FLASHEx_Erase+0xcc>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	4a4c      	ldr	r2, [pc, #304]	; (800b794 <HAL_FLASHEx_Erase+0x1f0>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d903      	bls.n	800b670 <HAL_FLASHEx_Erase+0xcc>
 800b668:	21e9      	movs	r1, #233	; 0xe9
 800b66a:	4844      	ldr	r0, [pc, #272]	; (800b77c <HAL_FLASHEx_Erase+0x1d8>)
 800b66c:	f7fe fc7e 	bl	8009f6c <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 800b670:	4b44      	ldr	r3, [pc, #272]	; (800b784 <HAL_FLASHEx_Erase+0x1e0>)
 800b672:	881b      	ldrh	r3, [r3, #0]
 800b674:	2b80      	cmp	r3, #128	; 0x80
 800b676:	d10d      	bne.n	800b694 <HAL_FLASHEx_Erase+0xf0>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	689a      	ldr	r2, [r3, #8]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	029b      	lsls	r3, r3, #10
 800b682:	4413      	add	r3, r2
 800b684:	3b01      	subs	r3, #1
 800b686:	4a40      	ldr	r2, [pc, #256]	; (800b788 <HAL_FLASHEx_Erase+0x1e4>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	bf94      	ite	ls
 800b68c:	2301      	movls	r3, #1
 800b68e:	2300      	movhi	r3, #0
 800b690:	b2db      	uxtb	r3, r3
 800b692:	e030      	b.n	800b6f6 <HAL_FLASHEx_Erase+0x152>
 800b694:	4b3b      	ldr	r3, [pc, #236]	; (800b784 <HAL_FLASHEx_Erase+0x1e0>)
 800b696:	881b      	ldrh	r3, [r3, #0]
 800b698:	2b40      	cmp	r3, #64	; 0x40
 800b69a:	d10d      	bne.n	800b6b8 <HAL_FLASHEx_Erase+0x114>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	029b      	lsls	r3, r3, #10
 800b6a6:	4413      	add	r3, r2
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	4a38      	ldr	r2, [pc, #224]	; (800b78c <HAL_FLASHEx_Erase+0x1e8>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	bf94      	ite	ls
 800b6b0:	2301      	movls	r3, #1
 800b6b2:	2300      	movhi	r3, #0
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	e01e      	b.n	800b6f6 <HAL_FLASHEx_Erase+0x152>
 800b6b8:	4b32      	ldr	r3, [pc, #200]	; (800b784 <HAL_FLASHEx_Erase+0x1e0>)
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	2b20      	cmp	r3, #32
 800b6be:	d10d      	bne.n	800b6dc <HAL_FLASHEx_Erase+0x138>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	689a      	ldr	r2, [r3, #8]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	029b      	lsls	r3, r3, #10
 800b6ca:	4413      	add	r3, r2
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	4a30      	ldr	r2, [pc, #192]	; (800b790 <HAL_FLASHEx_Erase+0x1ec>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	bf94      	ite	ls
 800b6d4:	2301      	movls	r3, #1
 800b6d6:	2300      	movhi	r3, #0
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	e00c      	b.n	800b6f6 <HAL_FLASHEx_Erase+0x152>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689a      	ldr	r2, [r3, #8]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	029b      	lsls	r3, r3, #10
 800b6e6:	4413      	add	r3, r2
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	4a2a      	ldr	r2, [pc, #168]	; (800b794 <HAL_FLASHEx_Erase+0x1f0>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	bf94      	ite	ls
 800b6f0:	2301      	movls	r3, #1
 800b6f2:	2300      	movhi	r3, #0
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d103      	bne.n	800b702 <HAL_FLASHEx_Erase+0x15e>
 800b6fa:	21ea      	movs	r1, #234	; 0xea
 800b6fc:	481f      	ldr	r0, [pc, #124]	; (800b77c <HAL_FLASHEx_Erase+0x1d8>)
 800b6fe:	f7fe fc35 	bl	8009f6c <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800b702:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b706:	f7ff feb7 	bl	800b478 <FLASH_WaitForLastOperation>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d12a      	bne.n	800b766 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	f04f 32ff 	mov.w	r2, #4294967295
 800b716:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	60bb      	str	r3, [r7, #8]
 800b71e:	e019      	b.n	800b754 <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800b720:	68b8      	ldr	r0, [r7, #8]
 800b722:	f000 f85f 	bl	800b7e4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b726:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b72a:	f7ff fea5 	bl	800b478 <FLASH_WaitForLastOperation>
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b732:	4b13      	ldr	r3, [pc, #76]	; (800b780 <HAL_FLASHEx_Erase+0x1dc>)
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	4a12      	ldr	r2, [pc, #72]	; (800b780 <HAL_FLASHEx_Erase+0x1dc>)
 800b738:	f023 0302 	bic.w	r3, r3, #2
 800b73c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d003      	beq.n	800b74c <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	601a      	str	r2, [r3, #0]
            break;
 800b74a:	e00c      	b.n	800b766 <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b752:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	029a      	lsls	r2, r3, #10
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	429a      	cmp	r2, r3
 800b764:	d3dc      	bcc.n	800b720 <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b766:	4b04      	ldr	r3, [pc, #16]	; (800b778 <HAL_FLASHEx_Erase+0x1d4>)
 800b768:	2200      	movs	r2, #0
 800b76a:	761a      	strb	r2, [r3, #24]

  return status;
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	200006a0 	.word	0x200006a0
 800b77c:	080108d4 	.word	0x080108d4
 800b780:	40022000 	.word	0x40022000
 800b784:	1ffff7e0 	.word	0x1ffff7e0
 800b788:	0801ffff 	.word	0x0801ffff
 800b78c:	0800ffff 	.word	0x0800ffff
 800b790:	08007fff 	.word	0x08007fff
 800b794:	08003fff 	.word	0x08003fff

0800b798 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d004      	beq.n	800b7b0 <FLASH_MassErase+0x18>
 800b7a6:	f240 2156 	movw	r1, #598	; 0x256
 800b7aa:	480b      	ldr	r0, [pc, #44]	; (800b7d8 <FLASH_MassErase+0x40>)
 800b7ac:	f7fe fbde 	bl	8009f6c <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b7b0:	4b0a      	ldr	r3, [pc, #40]	; (800b7dc <FLASH_MassErase+0x44>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800b7b6:	4b0a      	ldr	r3, [pc, #40]	; (800b7e0 <FLASH_MassErase+0x48>)
 800b7b8:	691b      	ldr	r3, [r3, #16]
 800b7ba:	4a09      	ldr	r2, [pc, #36]	; (800b7e0 <FLASH_MassErase+0x48>)
 800b7bc:	f043 0304 	orr.w	r3, r3, #4
 800b7c0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800b7c2:	4b07      	ldr	r3, [pc, #28]	; (800b7e0 <FLASH_MassErase+0x48>)
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	4a06      	ldr	r2, [pc, #24]	; (800b7e0 <FLASH_MassErase+0x48>)
 800b7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7cc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	080108d4 	.word	0x080108d4
 800b7dc:	200006a0 	.word	0x200006a0
 800b7e0:	40022000 	.word	0x40022000

0800b7e4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b7ec:	4b0b      	ldr	r3, [pc, #44]	; (800b81c <FLASH_PageErase+0x38>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800b7f2:	4b0b      	ldr	r3, [pc, #44]	; (800b820 <FLASH_PageErase+0x3c>)
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	4a0a      	ldr	r2, [pc, #40]	; (800b820 <FLASH_PageErase+0x3c>)
 800b7f8:	f043 0302 	orr.w	r3, r3, #2
 800b7fc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800b7fe:	4a08      	ldr	r2, [pc, #32]	; (800b820 <FLASH_PageErase+0x3c>)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800b804:	4b06      	ldr	r3, [pc, #24]	; (800b820 <FLASH_PageErase+0x3c>)
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	4a05      	ldr	r2, [pc, #20]	; (800b820 <FLASH_PageErase+0x3c>)
 800b80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b80e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	bc80      	pop	{r7}
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	200006a0 	.word	0x200006a0
 800b820:	40022000 	.word	0x40022000

0800b824 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b08a      	sub	sp, #40	; 0x28
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b82e:	2300      	movs	r3, #0
 800b830:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800b832:	2300      	movs	r3, #0
 800b834:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a9c      	ldr	r2, [pc, #624]	; (800baac <HAL_GPIO_Init+0x288>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d013      	beq.n	800b866 <HAL_GPIO_Init+0x42>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a9b      	ldr	r2, [pc, #620]	; (800bab0 <HAL_GPIO_Init+0x28c>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d00f      	beq.n	800b866 <HAL_GPIO_Init+0x42>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a9a      	ldr	r2, [pc, #616]	; (800bab4 <HAL_GPIO_Init+0x290>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d00b      	beq.n	800b866 <HAL_GPIO_Init+0x42>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a99      	ldr	r2, [pc, #612]	; (800bab8 <HAL_GPIO_Init+0x294>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d007      	beq.n	800b866 <HAL_GPIO_Init+0x42>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a98      	ldr	r2, [pc, #608]	; (800babc <HAL_GPIO_Init+0x298>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d003      	beq.n	800b866 <HAL_GPIO_Init+0x42>
 800b85e:	21bd      	movs	r1, #189	; 0xbd
 800b860:	4897      	ldr	r0, [pc, #604]	; (800bac0 <HAL_GPIO_Init+0x29c>)
 800b862:	f7fe fb83 	bl	8009f6c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d005      	beq.n	800b87c <HAL_GPIO_Init+0x58>
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	0c1b      	lsrs	r3, r3, #16
 800b876:	041b      	lsls	r3, r3, #16
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d003      	beq.n	800b884 <HAL_GPIO_Init+0x60>
 800b87c:	21be      	movs	r1, #190	; 0xbe
 800b87e:	4890      	ldr	r0, [pc, #576]	; (800bac0 <HAL_GPIO_Init+0x29c>)
 800b880:	f7fe fb74 	bl	8009f6c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 81eb 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	2b01      	cmp	r3, #1
 800b894:	f000 81e6 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	2b11      	cmp	r3, #17
 800b89e:	f000 81e1 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	f000 81dc 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	2b12      	cmp	r3, #18
 800b8b2:	f000 81d7 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	4a82      	ldr	r2, [pc, #520]	; (800bac4 <HAL_GPIO_Init+0x2a0>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	f000 81d1 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	4a80      	ldr	r2, [pc, #512]	; (800bac8 <HAL_GPIO_Init+0x2a4>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	f000 81cb 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	4a7e      	ldr	r2, [pc, #504]	; (800bacc <HAL_GPIO_Init+0x2a8>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	f000 81c5 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	4a7c      	ldr	r2, [pc, #496]	; (800bad0 <HAL_GPIO_Init+0x2ac>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	f000 81bf 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	4a7a      	ldr	r2, [pc, #488]	; (800bad4 <HAL_GPIO_Init+0x2b0>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	f000 81b9 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	4a78      	ldr	r2, [pc, #480]	; (800bad8 <HAL_GPIO_Init+0x2b4>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	f000 81b3 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	2b03      	cmp	r3, #3
 800b904:	f000 81ae 	beq.w	800bc64 <HAL_GPIO_Init+0x440>
 800b908:	21bf      	movs	r1, #191	; 0xbf
 800b90a:	486d      	ldr	r0, [pc, #436]	; (800bac0 <HAL_GPIO_Init+0x29c>)
 800b90c:	f7fe fb2e 	bl	8009f6c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b910:	e1a8      	b.n	800bc64 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800b912:	2201      	movs	r2, #1
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	fa02 f303 	lsl.w	r3, r2, r3
 800b91a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	69fa      	ldr	r2, [r7, #28]
 800b922:	4013      	ands	r3, r2
 800b924:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800b926:	69ba      	ldr	r2, [r7, #24]
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	f040 8197 	bne.w	800bc5e <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a5e      	ldr	r2, [pc, #376]	; (800baac <HAL_GPIO_Init+0x288>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d013      	beq.n	800b960 <HAL_GPIO_Init+0x13c>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a5d      	ldr	r2, [pc, #372]	; (800bab0 <HAL_GPIO_Init+0x28c>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d00f      	beq.n	800b960 <HAL_GPIO_Init+0x13c>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a5c      	ldr	r2, [pc, #368]	; (800bab4 <HAL_GPIO_Init+0x290>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d00b      	beq.n	800b960 <HAL_GPIO_Init+0x13c>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a5b      	ldr	r2, [pc, #364]	; (800bab8 <HAL_GPIO_Init+0x294>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d007      	beq.n	800b960 <HAL_GPIO_Init+0x13c>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a5a      	ldr	r2, [pc, #360]	; (800babc <HAL_GPIO_Init+0x298>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d003      	beq.n	800b960 <HAL_GPIO_Init+0x13c>
 800b958:	21cd      	movs	r1, #205	; 0xcd
 800b95a:	4859      	ldr	r0, [pc, #356]	; (800bac0 <HAL_GPIO_Init+0x29c>)
 800b95c:	f7fe fb06 	bl	8009f6c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	2b12      	cmp	r3, #18
 800b966:	d065      	beq.n	800ba34 <HAL_GPIO_Init+0x210>
 800b968:	2b12      	cmp	r3, #18
 800b96a:	d80e      	bhi.n	800b98a <HAL_GPIO_Init+0x166>
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d04c      	beq.n	800ba0a <HAL_GPIO_Init+0x1e6>
 800b970:	2b02      	cmp	r3, #2
 800b972:	d804      	bhi.n	800b97e <HAL_GPIO_Init+0x15a>
 800b974:	2b00      	cmp	r3, #0
 800b976:	d072      	beq.n	800ba5e <HAL_GPIO_Init+0x23a>
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d01d      	beq.n	800b9b8 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800b97c:	e0b1      	b.n	800bae2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800b97e:	2b03      	cmp	r3, #3
 800b980:	f000 80ac 	beq.w	800badc <HAL_GPIO_Init+0x2b8>
 800b984:	2b11      	cmp	r3, #17
 800b986:	d02b      	beq.n	800b9e0 <HAL_GPIO_Init+0x1bc>
          break;
 800b988:	e0ab      	b.n	800bae2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800b98a:	4a4f      	ldr	r2, [pc, #316]	; (800bac8 <HAL_GPIO_Init+0x2a4>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d066      	beq.n	800ba5e <HAL_GPIO_Init+0x23a>
 800b990:	4a4d      	ldr	r2, [pc, #308]	; (800bac8 <HAL_GPIO_Init+0x2a4>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d806      	bhi.n	800b9a4 <HAL_GPIO_Init+0x180>
 800b996:	4a4b      	ldr	r2, [pc, #300]	; (800bac4 <HAL_GPIO_Init+0x2a0>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d060      	beq.n	800ba5e <HAL_GPIO_Init+0x23a>
 800b99c:	4a4c      	ldr	r2, [pc, #304]	; (800bad0 <HAL_GPIO_Init+0x2ac>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d05d      	beq.n	800ba5e <HAL_GPIO_Init+0x23a>
          break;
 800b9a2:	e09e      	b.n	800bae2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800b9a4:	4a49      	ldr	r2, [pc, #292]	; (800bacc <HAL_GPIO_Init+0x2a8>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d059      	beq.n	800ba5e <HAL_GPIO_Init+0x23a>
 800b9aa:	4a4b      	ldr	r2, [pc, #300]	; (800bad8 <HAL_GPIO_Init+0x2b4>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d056      	beq.n	800ba5e <HAL_GPIO_Init+0x23a>
 800b9b0:	4a48      	ldr	r2, [pc, #288]	; (800bad4 <HAL_GPIO_Init+0x2b0>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d053      	beq.n	800ba5e <HAL_GPIO_Init+0x23a>
          break;
 800b9b6:	e094      	b.n	800bae2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d00b      	beq.n	800b9d8 <HAL_GPIO_Init+0x1b4>
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d007      	beq.n	800b9d8 <HAL_GPIO_Init+0x1b4>
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	2b03      	cmp	r3, #3
 800b9ce:	d003      	beq.n	800b9d8 <HAL_GPIO_Init+0x1b4>
 800b9d0:	21d5      	movs	r1, #213	; 0xd5
 800b9d2:	483b      	ldr	r0, [pc, #236]	; (800bac0 <HAL_GPIO_Init+0x29c>)
 800b9d4:	f7fe faca 	bl	8009f6c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	623b      	str	r3, [r7, #32]
          break;
 800b9de:	e080      	b.n	800bae2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d00b      	beq.n	800ba00 <HAL_GPIO_Init+0x1dc>
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d007      	beq.n	800ba00 <HAL_GPIO_Init+0x1dc>
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	2b03      	cmp	r3, #3
 800b9f6:	d003      	beq.n	800ba00 <HAL_GPIO_Init+0x1dc>
 800b9f8:	21dc      	movs	r1, #220	; 0xdc
 800b9fa:	4831      	ldr	r0, [pc, #196]	; (800bac0 <HAL_GPIO_Init+0x29c>)
 800b9fc:	f7fe fab6 	bl	8009f6c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	3304      	adds	r3, #4
 800ba06:	623b      	str	r3, [r7, #32]
          break;
 800ba08:	e06b      	b.n	800bae2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d00b      	beq.n	800ba2a <HAL_GPIO_Init+0x206>
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d007      	beq.n	800ba2a <HAL_GPIO_Init+0x206>
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d003      	beq.n	800ba2a <HAL_GPIO_Init+0x206>
 800ba22:	21e3      	movs	r1, #227	; 0xe3
 800ba24:	4826      	ldr	r0, [pc, #152]	; (800bac0 <HAL_GPIO_Init+0x29c>)
 800ba26:	f7fe faa1 	bl	8009f6c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	3308      	adds	r3, #8
 800ba30:	623b      	str	r3, [r7, #32]
          break;
 800ba32:	e056      	b.n	800bae2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d00b      	beq.n	800ba54 <HAL_GPIO_Init+0x230>
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d007      	beq.n	800ba54 <HAL_GPIO_Init+0x230>
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	2b03      	cmp	r3, #3
 800ba4a:	d003      	beq.n	800ba54 <HAL_GPIO_Init+0x230>
 800ba4c:	21ea      	movs	r1, #234	; 0xea
 800ba4e:	481c      	ldr	r0, [pc, #112]	; (800bac0 <HAL_GPIO_Init+0x29c>)
 800ba50:	f7fe fa8c 	bl	8009f6c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	330c      	adds	r3, #12
 800ba5a:	623b      	str	r3, [r7, #32]
          break;
 800ba5c:	e041      	b.n	800bae2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00b      	beq.n	800ba7e <HAL_GPIO_Init+0x25a>
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d007      	beq.n	800ba7e <HAL_GPIO_Init+0x25a>
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d003      	beq.n	800ba7e <HAL_GPIO_Init+0x25a>
 800ba76:	21f7      	movs	r1, #247	; 0xf7
 800ba78:	4811      	ldr	r0, [pc, #68]	; (800bac0 <HAL_GPIO_Init+0x29c>)
 800ba7a:	f7fe fa77 	bl	8009f6c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d102      	bne.n	800ba8c <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800ba86:	2304      	movs	r3, #4
 800ba88:	623b      	str	r3, [r7, #32]
          break;
 800ba8a:	e02a      	b.n	800bae2 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d105      	bne.n	800baa0 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800ba94:	2308      	movs	r3, #8
 800ba96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	69fa      	ldr	r2, [r7, #28]
 800ba9c:	611a      	str	r2, [r3, #16]
          break;
 800ba9e:	e020      	b.n	800bae2 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800baa0:	2308      	movs	r3, #8
 800baa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	69fa      	ldr	r2, [r7, #28]
 800baa8:	615a      	str	r2, [r3, #20]
          break;
 800baaa:	e01a      	b.n	800bae2 <HAL_GPIO_Init+0x2be>
 800baac:	40010800 	.word	0x40010800
 800bab0:	40010c00 	.word	0x40010c00
 800bab4:	40011000 	.word	0x40011000
 800bab8:	40011400 	.word	0x40011400
 800babc:	40011800 	.word	0x40011800
 800bac0:	08010914 	.word	0x08010914
 800bac4:	10110000 	.word	0x10110000
 800bac8:	10210000 	.word	0x10210000
 800bacc:	10310000 	.word	0x10310000
 800bad0:	10120000 	.word	0x10120000
 800bad4:	10220000 	.word	0x10220000
 800bad8:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800badc:	2300      	movs	r3, #0
 800bade:	623b      	str	r3, [r7, #32]
          break;
 800bae0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	2bff      	cmp	r3, #255	; 0xff
 800bae6:	d801      	bhi.n	800baec <HAL_GPIO_Init+0x2c8>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	e001      	b.n	800baf0 <HAL_GPIO_Init+0x2cc>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	3304      	adds	r3, #4
 800baf0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	2bff      	cmp	r3, #255	; 0xff
 800baf6:	d802      	bhi.n	800bafe <HAL_GPIO_Init+0x2da>
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	e002      	b.n	800bb04 <HAL_GPIO_Init+0x2e0>
 800bafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb00:	3b08      	subs	r3, #8
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	210f      	movs	r1, #15
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	fa01 f303 	lsl.w	r3, r1, r3
 800bb12:	43db      	mvns	r3, r3
 800bb14:	401a      	ands	r2, r3
 800bb16:	6a39      	ldr	r1, [r7, #32]
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb1e:	431a      	orrs	r2, r3
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 8096 	beq.w	800bc5e <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800bb32:	4b52      	ldr	r3, [pc, #328]	; (800bc7c <HAL_GPIO_Init+0x458>)
 800bb34:	699b      	ldr	r3, [r3, #24]
 800bb36:	4a51      	ldr	r2, [pc, #324]	; (800bc7c <HAL_GPIO_Init+0x458>)
 800bb38:	f043 0301 	orr.w	r3, r3, #1
 800bb3c:	6193      	str	r3, [r2, #24]
 800bb3e:	4b4f      	ldr	r3, [pc, #316]	; (800bc7c <HAL_GPIO_Init+0x458>)
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	60bb      	str	r3, [r7, #8]
 800bb48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800bb4a:	4a4d      	ldr	r2, [pc, #308]	; (800bc80 <HAL_GPIO_Init+0x45c>)
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	089b      	lsrs	r3, r3, #2
 800bb50:	3302      	adds	r3, #2
 800bb52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	f003 0303 	and.w	r3, r3, #3
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	220f      	movs	r2, #15
 800bb62:	fa02 f303 	lsl.w	r3, r2, r3
 800bb66:	43db      	mvns	r3, r3
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4a44      	ldr	r2, [pc, #272]	; (800bc84 <HAL_GPIO_Init+0x460>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d013      	beq.n	800bb9e <HAL_GPIO_Init+0x37a>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4a43      	ldr	r2, [pc, #268]	; (800bc88 <HAL_GPIO_Init+0x464>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d00d      	beq.n	800bb9a <HAL_GPIO_Init+0x376>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	4a42      	ldr	r2, [pc, #264]	; (800bc8c <HAL_GPIO_Init+0x468>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d007      	beq.n	800bb96 <HAL_GPIO_Init+0x372>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a41      	ldr	r2, [pc, #260]	; (800bc90 <HAL_GPIO_Init+0x46c>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d101      	bne.n	800bb92 <HAL_GPIO_Init+0x36e>
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e006      	b.n	800bba0 <HAL_GPIO_Init+0x37c>
 800bb92:	2304      	movs	r3, #4
 800bb94:	e004      	b.n	800bba0 <HAL_GPIO_Init+0x37c>
 800bb96:	2302      	movs	r3, #2
 800bb98:	e002      	b.n	800bba0 <HAL_GPIO_Init+0x37c>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e000      	b.n	800bba0 <HAL_GPIO_Init+0x37c>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bba2:	f002 0203 	and.w	r2, r2, #3
 800bba6:	0092      	lsls	r2, r2, #2
 800bba8:	4093      	lsls	r3, r2
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800bbb0:	4933      	ldr	r1, [pc, #204]	; (800bc80 <HAL_GPIO_Init+0x45c>)
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	089b      	lsrs	r3, r3, #2
 800bbb6:	3302      	adds	r3, #2
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d006      	beq.n	800bbd8 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800bbca:	4b32      	ldr	r3, [pc, #200]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	4931      	ldr	r1, [pc, #196]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	600b      	str	r3, [r1, #0]
 800bbd6:	e006      	b.n	800bbe6 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800bbd8:	4b2e      	ldr	r3, [pc, #184]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	43db      	mvns	r3, r3
 800bbe0:	492c      	ldr	r1, [pc, #176]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d006      	beq.n	800bc00 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800bbf2:	4b28      	ldr	r3, [pc, #160]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bbf4:	685a      	ldr	r2, [r3, #4]
 800bbf6:	4927      	ldr	r1, [pc, #156]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	604b      	str	r3, [r1, #4]
 800bbfe:	e006      	b.n	800bc0e <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800bc00:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	43db      	mvns	r3, r3
 800bc08:	4922      	ldr	r1, [pc, #136]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d006      	beq.n	800bc28 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800bc1a:	4b1e      	ldr	r3, [pc, #120]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bc1c:	689a      	ldr	r2, [r3, #8]
 800bc1e:	491d      	ldr	r1, [pc, #116]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	608b      	str	r3, [r1, #8]
 800bc26:	e006      	b.n	800bc36 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800bc28:	4b1a      	ldr	r3, [pc, #104]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bc2a:	689a      	ldr	r2, [r3, #8]
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	43db      	mvns	r3, r3
 800bc30:	4918      	ldr	r1, [pc, #96]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bc32:	4013      	ands	r3, r2
 800bc34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d006      	beq.n	800bc50 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800bc42:	4b14      	ldr	r3, [pc, #80]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bc44:	68da      	ldr	r2, [r3, #12]
 800bc46:	4913      	ldr	r1, [pc, #76]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	60cb      	str	r3, [r1, #12]
 800bc4e:	e006      	b.n	800bc5e <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800bc50:	4b10      	ldr	r3, [pc, #64]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	43db      	mvns	r3, r3
 800bc58:	490e      	ldr	r1, [pc, #56]	; (800bc94 <HAL_GPIO_Init+0x470>)
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc60:	3301      	adds	r3, #1
 800bc62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f47f ae4f 	bne.w	800b912 <HAL_GPIO_Init+0xee>
  }
}
 800bc74:	bf00      	nop
 800bc76:	3728      	adds	r7, #40	; 0x28
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	40021000 	.word	0x40021000
 800bc80:	40010000 	.word	0x40010000
 800bc84:	40010800 	.word	0x40010800
 800bc88:	40010c00 	.word	0x40010c00
 800bc8c:	40011000 	.word	0x40011000
 800bc90:	40011400 	.word	0x40011400
 800bc94:	40010400 	.word	0x40010400

0800bc98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bca4:	887b      	ldrh	r3, [r7, #2]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d004      	beq.n	800bcb4 <HAL_GPIO_ReadPin+0x1c>
 800bcaa:	887b      	ldrh	r3, [r7, #2]
 800bcac:	0c1b      	lsrs	r3, r3, #16
 800bcae:	041b      	lsls	r3, r3, #16
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d004      	beq.n	800bcbe <HAL_GPIO_ReadPin+0x26>
 800bcb4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800bcb8:	4809      	ldr	r0, [pc, #36]	; (800bce0 <HAL_GPIO_ReadPin+0x48>)
 800bcba:	f7fe f957 	bl	8009f6c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	689a      	ldr	r2, [r3, #8]
 800bcc2:	887b      	ldrh	r3, [r7, #2]
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d002      	beq.n	800bcd0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800bcca:	2301      	movs	r3, #1
 800bccc:	73fb      	strb	r3, [r7, #15]
 800bcce:	e001      	b.n	800bcd4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	08010914 	.word	0x08010914

0800bce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	807b      	strh	r3, [r7, #2]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bcf4:	887b      	ldrh	r3, [r7, #2]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d004      	beq.n	800bd04 <HAL_GPIO_WritePin+0x20>
 800bcfa:	887b      	ldrh	r3, [r7, #2]
 800bcfc:	0c1b      	lsrs	r3, r3, #16
 800bcfe:	041b      	lsls	r3, r3, #16
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d004      	beq.n	800bd0e <HAL_GPIO_WritePin+0x2a>
 800bd04:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800bd08:	480e      	ldr	r0, [pc, #56]	; (800bd44 <HAL_GPIO_WritePin+0x60>)
 800bd0a:	f7fe f92f 	bl	8009f6c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800bd0e:	787b      	ldrb	r3, [r7, #1]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d007      	beq.n	800bd24 <HAL_GPIO_WritePin+0x40>
 800bd14:	787b      	ldrb	r3, [r7, #1]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d004      	beq.n	800bd24 <HAL_GPIO_WritePin+0x40>
 800bd1a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800bd1e:	4809      	ldr	r0, [pc, #36]	; (800bd44 <HAL_GPIO_WritePin+0x60>)
 800bd20:	f7fe f924 	bl	8009f6c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800bd24:	787b      	ldrb	r3, [r7, #1]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bd2a:	887a      	ldrh	r2, [r7, #2]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800bd30:	e003      	b.n	800bd3a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800bd32:	887b      	ldrh	r3, [r7, #2]
 800bd34:	041a      	lsls	r2, r3, #16
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	611a      	str	r2, [r3, #16]
}
 800bd3a:	bf00      	nop
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	08010914 	.word	0x08010914

0800bd48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	460b      	mov	r3, r1
 800bd52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bd54:	887b      	ldrh	r3, [r7, #2]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d004      	beq.n	800bd64 <HAL_GPIO_TogglePin+0x1c>
 800bd5a:	887b      	ldrh	r3, [r7, #2]
 800bd5c:	0c1b      	lsrs	r3, r3, #16
 800bd5e:	041b      	lsls	r3, r3, #16
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d004      	beq.n	800bd6e <HAL_GPIO_TogglePin+0x26>
 800bd64:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800bd68:	4809      	ldr	r0, [pc, #36]	; (800bd90 <HAL_GPIO_TogglePin+0x48>)
 800bd6a:	f7fe f8ff 	bl	8009f6c <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	68da      	ldr	r2, [r3, #12]
 800bd72:	887b      	ldrh	r3, [r7, #2]
 800bd74:	4013      	ands	r3, r2
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d003      	beq.n	800bd82 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bd7a:	887a      	ldrh	r2, [r7, #2]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800bd80:	e002      	b.n	800bd88 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bd82:	887a      	ldrh	r2, [r7, #2]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	611a      	str	r2, [r3, #16]
}
 800bd88:	bf00      	nop
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	08010914 	.word	0x08010914

0800bd94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d101      	bne.n	800bda6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e1ab      	b.n	800c0fe <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4aa0      	ldr	r2, [pc, #640]	; (800c02c <HAL_I2C_Init+0x298>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d009      	beq.n	800bdc4 <HAL_I2C_Init+0x30>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a9e      	ldr	r2, [pc, #632]	; (800c030 <HAL_I2C_Init+0x29c>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d004      	beq.n	800bdc4 <HAL_I2C_Init+0x30>
 800bdba:	f240 11d1 	movw	r1, #465	; 0x1d1
 800bdbe:	489d      	ldr	r0, [pc, #628]	; (800c034 <HAL_I2C_Init+0x2a0>)
 800bdc0:	f7fe f8d4 	bl	8009f6c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d004      	beq.n	800bdd6 <HAL_I2C_Init+0x42>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	4a99      	ldr	r2, [pc, #612]	; (800c038 <HAL_I2C_Init+0x2a4>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d904      	bls.n	800bde0 <HAL_I2C_Init+0x4c>
 800bdd6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800bdda:	4896      	ldr	r0, [pc, #600]	; (800c034 <HAL_I2C_Init+0x2a0>)
 800bddc:	f7fe f8c6 	bl	8009f6c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d009      	beq.n	800bdfc <HAL_I2C_Init+0x68>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdf0:	d004      	beq.n	800bdfc <HAL_I2C_Init+0x68>
 800bdf2:	f240 11d3 	movw	r1, #467	; 0x1d3
 800bdf6:	488f      	ldr	r0, [pc, #572]	; (800c034 <HAL_I2C_Init+0x2a0>)
 800bdf8:	f7fe f8b8 	bl	8009f6c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800be04:	f023 0303 	bic.w	r3, r3, #3
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d004      	beq.n	800be16 <HAL_I2C_Init+0x82>
 800be0c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800be10:	4888      	ldr	r0, [pc, #544]	; (800c034 <HAL_I2C_Init+0x2a0>)
 800be12:	f7fe f8ab 	bl	8009f6c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	691b      	ldr	r3, [r3, #16]
 800be1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be1e:	d009      	beq.n	800be34 <HAL_I2C_Init+0xa0>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be28:	d004      	beq.n	800be34 <HAL_I2C_Init+0xa0>
 800be2a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800be2e:	4881      	ldr	r0, [pc, #516]	; (800c034 <HAL_I2C_Init+0x2a0>)
 800be30:	f7fe f89c 	bl	8009f6c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d008      	beq.n	800be4e <HAL_I2C_Init+0xba>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d004      	beq.n	800be4e <HAL_I2C_Init+0xba>
 800be44:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800be48:	487a      	ldr	r0, [pc, #488]	; (800c034 <HAL_I2C_Init+0x2a0>)
 800be4a:	f7fe f88f 	bl	8009f6c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	699b      	ldr	r3, [r3, #24]
 800be52:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800be56:	2b00      	cmp	r3, #0
 800be58:	d004      	beq.n	800be64 <HAL_I2C_Init+0xd0>
 800be5a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800be5e:	4875      	ldr	r0, [pc, #468]	; (800c034 <HAL_I2C_Init+0x2a0>)
 800be60:	f7fe f884 	bl	8009f6c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	69db      	ldr	r3, [r3, #28]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d008      	beq.n	800be7e <HAL_I2C_Init+0xea>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	69db      	ldr	r3, [r3, #28]
 800be70:	2b40      	cmp	r3, #64	; 0x40
 800be72:	d004      	beq.n	800be7e <HAL_I2C_Init+0xea>
 800be74:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800be78:	486e      	ldr	r0, [pc, #440]	; (800c034 <HAL_I2C_Init+0x2a0>)
 800be7a:	f7fe f877 	bl	8009f6c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d008      	beq.n	800be98 <HAL_I2C_Init+0x104>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a1b      	ldr	r3, [r3, #32]
 800be8a:	2b80      	cmp	r3, #128	; 0x80
 800be8c:	d004      	beq.n	800be98 <HAL_I2C_Init+0x104>
 800be8e:	f240 11d9 	movw	r1, #473	; 0x1d9
 800be92:	4868      	ldr	r0, [pc, #416]	; (800c034 <HAL_I2C_Init+0x2a0>)
 800be94:	f7fe f86a 	bl	8009f6c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d106      	bne.n	800beb2 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7fd ff67 	bl	8009d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2224      	movs	r2, #36	; 0x24
 800beb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f022 0201 	bic.w	r2, r2, #1
 800bec8:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bed8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bee8:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800beea:	f001 fcfd 	bl	800d8e8 <HAL_RCC_GetPCLK1Freq>
 800beee:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	4a51      	ldr	r2, [pc, #324]	; (800c03c <HAL_I2C_Init+0x2a8>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d807      	bhi.n	800bf0a <HAL_I2C_Init+0x176>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	4a50      	ldr	r2, [pc, #320]	; (800c040 <HAL_I2C_Init+0x2ac>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	bf94      	ite	ls
 800bf02:	2301      	movls	r3, #1
 800bf04:	2300      	movhi	r3, #0
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	e006      	b.n	800bf18 <HAL_I2C_Init+0x184>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	4a4d      	ldr	r2, [pc, #308]	; (800c044 <HAL_I2C_Init+0x2b0>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	bf94      	ite	ls
 800bf12:	2301      	movls	r3, #1
 800bf14:	2300      	movhi	r3, #0
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e0ee      	b.n	800c0fe <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	4a49      	ldr	r2, [pc, #292]	; (800c048 <HAL_I2C_Init+0x2b4>)
 800bf24:	fba2 2303 	umull	r2, r3, r2, r3
 800bf28:	0c9b      	lsrs	r3, r3, #18
 800bf2a:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68ba      	ldr	r2, [r7, #8]
 800bf3c:	430a      	orrs	r2, r1
 800bf3e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	4a3b      	ldr	r2, [pc, #236]	; (800c03c <HAL_I2C_Init+0x2a8>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d802      	bhi.n	800bf5a <HAL_I2C_Init+0x1c6>
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	3301      	adds	r3, #1
 800bf58:	e009      	b.n	800bf6e <HAL_I2C_Init+0x1da>
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bf60:	fb02 f303 	mul.w	r3, r2, r3
 800bf64:	4a39      	ldr	r2, [pc, #228]	; (800c04c <HAL_I2C_Init+0x2b8>)
 800bf66:	fba2 2303 	umull	r2, r3, r2, r3
 800bf6a:	099b      	lsrs	r3, r3, #6
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	6812      	ldr	r2, [r2, #0]
 800bf72:	430b      	orrs	r3, r1
 800bf74:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	69db      	ldr	r3, [r3, #28]
 800bf7c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800bf80:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	492c      	ldr	r1, [pc, #176]	; (800c03c <HAL_I2C_Init+0x2a8>)
 800bf8a:	428b      	cmp	r3, r1
 800bf8c:	d80d      	bhi.n	800bfaa <HAL_I2C_Init+0x216>
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	1e59      	subs	r1, r3, #1
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	005b      	lsls	r3, r3, #1
 800bf98:	fbb1 f3f3 	udiv	r3, r1, r3
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	bf38      	it	cc
 800bfa6:	2304      	movcc	r3, #4
 800bfa8:	e062      	b.n	800c070 <HAL_I2C_Init+0x2dc>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d111      	bne.n	800bfd6 <HAL_I2C_Init+0x242>
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	1e58      	subs	r0, r3, #1
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6859      	ldr	r1, [r3, #4]
 800bfba:	460b      	mov	r3, r1
 800bfbc:	005b      	lsls	r3, r3, #1
 800bfbe:	440b      	add	r3, r1
 800bfc0:	fbb0 f3f3 	udiv	r3, r0, r3
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	bf0c      	ite	eq
 800bfce:	2301      	moveq	r3, #1
 800bfd0:	2300      	movne	r3, #0
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	e012      	b.n	800bffc <HAL_I2C_Init+0x268>
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	1e58      	subs	r0, r3, #1
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6859      	ldr	r1, [r3, #4]
 800bfde:	460b      	mov	r3, r1
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	440b      	add	r3, r1
 800bfe4:	0099      	lsls	r1, r3, #2
 800bfe6:	440b      	add	r3, r1
 800bfe8:	fbb0 f3f3 	udiv	r3, r0, r3
 800bfec:	3301      	adds	r3, #1
 800bfee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	bf0c      	ite	eq
 800bff6:	2301      	moveq	r3, #1
 800bff8:	2300      	movne	r3, #0
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d001      	beq.n	800c004 <HAL_I2C_Init+0x270>
 800c000:	2301      	movs	r3, #1
 800c002:	e035      	b.n	800c070 <HAL_I2C_Init+0x2dc>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d121      	bne.n	800c050 <HAL_I2C_Init+0x2bc>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	1e58      	subs	r0, r3, #1
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6859      	ldr	r1, [r3, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	440b      	add	r3, r1
 800c01a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c01e:	3301      	adds	r3, #1
 800c020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c028:	e022      	b.n	800c070 <HAL_I2C_Init+0x2dc>
 800c02a:	bf00      	nop
 800c02c:	40005400 	.word	0x40005400
 800c030:	40005800 	.word	0x40005800
 800c034:	08010950 	.word	0x08010950
 800c038:	00061a80 	.word	0x00061a80
 800c03c:	000186a0 	.word	0x000186a0
 800c040:	001e847f 	.word	0x001e847f
 800c044:	003d08ff 	.word	0x003d08ff
 800c048:	431bde83 	.word	0x431bde83
 800c04c:	10624dd3 	.word	0x10624dd3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	1e58      	subs	r0, r3, #1
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6859      	ldr	r1, [r3, #4]
 800c058:	460b      	mov	r3, r1
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	440b      	add	r3, r1
 800c05e:	0099      	lsls	r1, r3, #2
 800c060:	440b      	add	r3, r1
 800c062:	fbb0 f3f3 	udiv	r3, r0, r3
 800c066:	3301      	adds	r3, #1
 800c068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c06c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	6809      	ldr	r1, [r1, #0]
 800c074:	4313      	orrs	r3, r2
 800c076:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	69da      	ldr	r2, [r3, #28]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	431a      	orrs	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	430a      	orrs	r2, r1
 800c092:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c09e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	6911      	ldr	r1, [r2, #16]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	68d2      	ldr	r2, [r2, #12]
 800c0aa:	4311      	orrs	r1, r2
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	6812      	ldr	r2, [r2, #0]
 800c0b0:	430b      	orrs	r3, r1
 800c0b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	695a      	ldr	r2, [r3, #20]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	699b      	ldr	r3, [r3, #24]
 800c0c6:	431a      	orrs	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	430a      	orrs	r2, r1
 800c0ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f042 0201 	orr.w	r2, r2, #1
 800c0de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2220      	movs	r2, #32
 800c0ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop

0800c108 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b088      	sub	sp, #32
 800c10c:	af02      	add	r7, sp, #8
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	607a      	str	r2, [r7, #4]
 800c112:	461a      	mov	r2, r3
 800c114:	460b      	mov	r3, r1
 800c116:	817b      	strh	r3, [r7, #10]
 800c118:	4613      	mov	r3, r2
 800c11a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c11c:	f7fe fb4c 	bl	800a7b8 <HAL_GetTick>
 800c120:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b20      	cmp	r3, #32
 800c12c:	f040 80e0 	bne.w	800c2f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	2319      	movs	r3, #25
 800c136:	2201      	movs	r2, #1
 800c138:	4970      	ldr	r1, [pc, #448]	; (800c2fc <HAL_I2C_Master_Transmit+0x1f4>)
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f000 fc8c 	bl	800ca58 <I2C_WaitOnFlagUntilTimeout>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800c146:	2302      	movs	r3, #2
 800c148:	e0d3      	b.n	800c2f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c150:	2b01      	cmp	r3, #1
 800c152:	d101      	bne.n	800c158 <HAL_I2C_Master_Transmit+0x50>
 800c154:	2302      	movs	r3, #2
 800c156:	e0cc      	b.n	800c2f2 <HAL_I2C_Master_Transmit+0x1ea>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f003 0301 	and.w	r3, r3, #1
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d007      	beq.n	800c17e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f042 0201 	orr.w	r2, r2, #1
 800c17c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c18c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2221      	movs	r2, #33	; 0x21
 800c192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2210      	movs	r2, #16
 800c19a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	893a      	ldrh	r2, [r7, #8]
 800c1ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	4a50      	ldr	r2, [pc, #320]	; (800c300 <HAL_I2C_Master_Transmit+0x1f8>)
 800c1be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c1c0:	8979      	ldrh	r1, [r7, #10]
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	6a3a      	ldr	r2, [r7, #32]
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f000 faf6 	bl	800c7b8 <I2C_MasterRequestWrite>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d001      	beq.n	800c1d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e08d      	b.n	800c2f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	613b      	str	r3, [r7, #16]
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	695b      	ldr	r3, [r3, #20]
 800c1e0:	613b      	str	r3, [r7, #16]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	613b      	str	r3, [r7, #16]
 800c1ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800c1ec:	e066      	b.n	800c2bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	6a39      	ldr	r1, [r7, #32]
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	f000 fd06 	bl	800cc04 <I2C_WaitOnTXEFlagUntilTimeout>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00d      	beq.n	800c21a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c202:	2b04      	cmp	r3, #4
 800c204:	d107      	bne.n	800c216 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c214:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	e06b      	b.n	800c2f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21e:	781a      	ldrb	r2, [r3, #0]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22a:	1c5a      	adds	r2, r3, #1
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c234:	b29b      	uxth	r3, r3
 800c236:	3b01      	subs	r3, #1
 800c238:	b29a      	uxth	r2, r3
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c242:	3b01      	subs	r3, #1
 800c244:	b29a      	uxth	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	695b      	ldr	r3, [r3, #20]
 800c250:	f003 0304 	and.w	r3, r3, #4
 800c254:	2b04      	cmp	r3, #4
 800c256:	d11b      	bne.n	800c290 <HAL_I2C_Master_Transmit+0x188>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d017      	beq.n	800c290 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c264:	781a      	ldrb	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c270:	1c5a      	adds	r2, r3, #1
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	3b01      	subs	r3, #1
 800c27e:	b29a      	uxth	r2, r3
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c288:	3b01      	subs	r3, #1
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c290:	697a      	ldr	r2, [r7, #20]
 800c292:	6a39      	ldr	r1, [r7, #32]
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f000 fcf6 	bl	800cc86 <I2C_WaitOnBTFFlagUntilTimeout>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00d      	beq.n	800c2bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a4:	2b04      	cmp	r3, #4
 800c2a6:	d107      	bne.n	800c2b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e01a      	b.n	800c2f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d194      	bne.n	800c1ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e000      	b.n	800c2f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c2f0:	2302      	movs	r3, #2
  }
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3718      	adds	r7, #24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	00100002 	.word	0x00100002
 800c300:	ffff0000 	.word	0xffff0000

0800c304 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b08c      	sub	sp, #48	; 0x30
 800c308:	af02      	add	r7, sp, #8
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	607a      	str	r2, [r7, #4]
 800c30e:	461a      	mov	r2, r3
 800c310:	460b      	mov	r3, r1
 800c312:	817b      	strh	r3, [r7, #10]
 800c314:	4613      	mov	r3, r2
 800c316:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c318:	2300      	movs	r3, #0
 800c31a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c31c:	f7fe fa4c 	bl	800a7b8 <HAL_GetTick>
 800c320:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b20      	cmp	r3, #32
 800c32c:	f040 8238 	bne.w	800c7a0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	2319      	movs	r3, #25
 800c336:	2201      	movs	r2, #1
 800c338:	497e      	ldr	r1, [pc, #504]	; (800c534 <HAL_I2C_Master_Receive+0x230>)
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f000 fb8c 	bl	800ca58 <I2C_WaitOnFlagUntilTimeout>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800c346:	2302      	movs	r3, #2
 800c348:	e22b      	b.n	800c7a2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c350:	2b01      	cmp	r3, #1
 800c352:	d101      	bne.n	800c358 <HAL_I2C_Master_Receive+0x54>
 800c354:	2302      	movs	r3, #2
 800c356:	e224      	b.n	800c7a2 <HAL_I2C_Master_Receive+0x49e>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 0301 	and.w	r3, r3, #1
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d007      	beq.n	800c37e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f042 0201 	orr.w	r2, r2, #1
 800c37c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c38c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2222      	movs	r2, #34	; 0x22
 800c392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2210      	movs	r2, #16
 800c39a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	893a      	ldrh	r2, [r7, #8]
 800c3ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	4a5e      	ldr	r2, [pc, #376]	; (800c538 <HAL_I2C_Master_Receive+0x234>)
 800c3be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c3c0:	8979      	ldrh	r1, [r7, #10]
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f000 fa78 	bl	800c8bc <I2C_MasterRequestRead>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d001      	beq.n	800c3d6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e1e5      	b.n	800c7a2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d113      	bne.n	800c406 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c3de:	2300      	movs	r3, #0
 800c3e0:	61fb      	str	r3, [r7, #28]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	695b      	ldr	r3, [r3, #20]
 800c3e8:	61fb      	str	r3, [r7, #28]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	699b      	ldr	r3, [r3, #24]
 800c3f0:	61fb      	str	r3, [r7, #28]
 800c3f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	e1b9      	b.n	800c77a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d11d      	bne.n	800c44a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c41c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c41e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c420:	2300      	movs	r3, #0
 800c422:	61bb      	str	r3, [r7, #24]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	61bb      	str	r3, [r7, #24]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	61bb      	str	r3, [r7, #24]
 800c434:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c444:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800c446:	b662      	cpsie	i
 800c448:	e197      	b.n	800c77a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d11d      	bne.n	800c48e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c460:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c462:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c464:	2300      	movs	r3, #0
 800c466:	617b      	str	r3, [r7, #20]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	617b      	str	r3, [r7, #20]
 800c478:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c488:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800c48a:	b662      	cpsie	i
 800c48c:	e175      	b.n	800c77a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c49c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c49e:	2300      	movs	r3, #0
 800c4a0:	613b      	str	r3, [r7, #16]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	695b      	ldr	r3, [r3, #20]
 800c4a8:	613b      	str	r3, [r7, #16]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	699b      	ldr	r3, [r3, #24]
 800c4b0:	613b      	str	r3, [r7, #16]
 800c4b2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800c4b4:	e161      	b.n	800c77a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4ba:	2b03      	cmp	r3, #3
 800c4bc:	f200 811a 	bhi.w	800c6f4 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d123      	bne.n	800c510 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 fc1b 	bl	800cd08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d001      	beq.n	800c4dc <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e162      	b.n	800c7a2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	691a      	ldr	r2, [r3, #16]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e6:	b2d2      	uxtb	r2, r2
 800c4e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ee:	1c5a      	adds	r2, r3, #1
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c504:	b29b      	uxth	r3, r3
 800c506:	3b01      	subs	r3, #1
 800c508:	b29a      	uxth	r2, r3
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c50e:	e134      	b.n	800c77a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c514:	2b02      	cmp	r3, #2
 800c516:	d150      	bne.n	800c5ba <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	2200      	movs	r2, #0
 800c520:	4906      	ldr	r1, [pc, #24]	; (800c53c <HAL_I2C_Master_Receive+0x238>)
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	f000 fa98 	bl	800ca58 <I2C_WaitOnFlagUntilTimeout>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d008      	beq.n	800c540 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800c52e:	2301      	movs	r3, #1
 800c530:	e137      	b.n	800c7a2 <HAL_I2C_Master_Receive+0x49e>
 800c532:	bf00      	nop
 800c534:	00100002 	.word	0x00100002
 800c538:	ffff0000 	.word	0xffff0000
 800c53c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800c540:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c550:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	691a      	ldr	r2, [r3, #16]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55c:	b2d2      	uxtb	r2, r2
 800c55e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c564:	1c5a      	adds	r2, r3, #1
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c56e:	3b01      	subs	r3, #1
 800c570:	b29a      	uxth	r2, r3
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	3b01      	subs	r3, #1
 800c57e:	b29a      	uxth	r2, r3
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800c584:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	691a      	ldr	r2, [r3, #16]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c590:	b2d2      	uxtb	r2, r2
 800c592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c5b8:	e0df      	b.n	800c77a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	497a      	ldr	r1, [pc, #488]	; (800c7ac <HAL_I2C_Master_Receive+0x4a8>)
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f000 fa47 	bl	800ca58 <I2C_WaitOnFlagUntilTimeout>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d001      	beq.n	800c5d4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e0e6      	b.n	800c7a2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5e4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	691a      	ldr	r2, [r3, #16]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f0:	b2d2      	uxtb	r2, r2
 800c5f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f8:	1c5a      	adds	r2, r3, #1
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c602:	3b01      	subs	r3, #1
 800c604:	b29a      	uxth	r2, r3
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c60e:	b29b      	uxth	r3, r3
 800c610:	3b01      	subs	r3, #1
 800c612:	b29a      	uxth	r2, r3
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800c618:	4b65      	ldr	r3, [pc, #404]	; (800c7b0 <HAL_I2C_Master_Receive+0x4ac>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	08db      	lsrs	r3, r3, #3
 800c61e:	4a65      	ldr	r2, [pc, #404]	; (800c7b4 <HAL_I2C_Master_Receive+0x4b0>)
 800c620:	fba2 2303 	umull	r2, r3, r2, r3
 800c624:	0a1a      	lsrs	r2, r3, #8
 800c626:	4613      	mov	r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4413      	add	r3, r2
 800c62c:	00da      	lsls	r2, r3, #3
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800c632:	6a3b      	ldr	r3, [r7, #32]
 800c634:	3b01      	subs	r3, #1
 800c636:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800c638:	6a3b      	ldr	r3, [r7, #32]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d117      	bne.n	800c66e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2200      	movs	r2, #0
 800c642:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2220      	movs	r2, #32
 800c648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c658:	f043 0220 	orr.w	r2, r3, #32
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800c660:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	e099      	b.n	800c7a2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	695b      	ldr	r3, [r3, #20]
 800c674:	f003 0304 	and.w	r3, r3, #4
 800c678:	2b04      	cmp	r3, #4
 800c67a:	d1da      	bne.n	800c632 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c68a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	691a      	ldr	r2, [r3, #16]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c696:	b2d2      	uxtb	r2, r2
 800c698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69e:	1c5a      	adds	r2, r3, #1
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c6be:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	691a      	ldr	r2, [r3, #16]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ca:	b2d2      	uxtb	r2, r2
 800c6cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6dc:	3b01      	subs	r3, #1
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c6f2:	e042      	b.n	800c77a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c6f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f000 fb05 	bl	800cd08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	e04c      	b.n	800c7a2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	691a      	ldr	r2, [r3, #16]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c712:	b2d2      	uxtb	r2, r2
 800c714:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71a:	1c5a      	adds	r2, r3, #1
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c724:	3b01      	subs	r3, #1
 800c726:	b29a      	uxth	r2, r3
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c730:	b29b      	uxth	r3, r3
 800c732:	3b01      	subs	r3, #1
 800c734:	b29a      	uxth	r2, r3
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	695b      	ldr	r3, [r3, #20]
 800c740:	f003 0304 	and.w	r3, r3, #4
 800c744:	2b04      	cmp	r3, #4
 800c746:	d118      	bne.n	800c77a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	691a      	ldr	r2, [r3, #16]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c752:	b2d2      	uxtb	r2, r2
 800c754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75a:	1c5a      	adds	r2, r3, #1
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c764:	3b01      	subs	r3, #1
 800c766:	b29a      	uxth	r2, r3
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c770:	b29b      	uxth	r3, r3
 800c772:	3b01      	subs	r3, #1
 800c774:	b29a      	uxth	r2, r3
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f47f ae99 	bne.w	800c4b6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2220      	movs	r2, #32
 800c788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2200      	movs	r2, #0
 800c790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2200      	movs	r2, #0
 800c798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	e000      	b.n	800c7a2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800c7a0:	2302      	movs	r3, #2
  }
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3728      	adds	r7, #40	; 0x28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	00010004 	.word	0x00010004
 800c7b0:	2000009c 	.word	0x2000009c
 800c7b4:	14f8b589 	.word	0x14f8b589

0800c7b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b088      	sub	sp, #32
 800c7bc:	af02      	add	r7, sp, #8
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	607a      	str	r2, [r7, #4]
 800c7c2:	603b      	str	r3, [r7, #0]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2b08      	cmp	r3, #8
 800c7d2:	d006      	beq.n	800c7e2 <I2C_MasterRequestWrite+0x2a>
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d003      	beq.n	800c7e2 <I2C_MasterRequestWrite+0x2a>
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c7e0:	d108      	bne.n	800c7f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7f0:	601a      	str	r2, [r3, #0]
 800c7f2:	e00b      	b.n	800c80c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7f8:	2b12      	cmp	r3, #18
 800c7fa:	d107      	bne.n	800c80c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c80a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f000 f91d 	bl	800ca58 <I2C_WaitOnFlagUntilTimeout>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00d      	beq.n	800c840 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c832:	d103      	bne.n	800c83c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c83a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c83c:	2303      	movs	r3, #3
 800c83e:	e035      	b.n	800c8ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c848:	d108      	bne.n	800c85c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c84a:	897b      	ldrh	r3, [r7, #10]
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	461a      	mov	r2, r3
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c858:	611a      	str	r2, [r3, #16]
 800c85a:	e01b      	b.n	800c894 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c85c:	897b      	ldrh	r3, [r7, #10]
 800c85e:	11db      	asrs	r3, r3, #7
 800c860:	b2db      	uxtb	r3, r3
 800c862:	f003 0306 	and.w	r3, r3, #6
 800c866:	b2db      	uxtb	r3, r3
 800c868:	f063 030f 	orn	r3, r3, #15
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	490e      	ldr	r1, [pc, #56]	; (800c8b4 <I2C_MasterRequestWrite+0xfc>)
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f000 f943 	bl	800cb06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d001      	beq.n	800c88a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	e010      	b.n	800c8ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c88a:	897b      	ldrh	r3, [r7, #10]
 800c88c:	b2da      	uxtb	r2, r3
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	4907      	ldr	r1, [pc, #28]	; (800c8b8 <I2C_MasterRequestWrite+0x100>)
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f000 f933 	bl	800cb06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e000      	b.n	800c8ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3718      	adds	r7, #24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	00010008 	.word	0x00010008
 800c8b8:	00010002 	.word	0x00010002

0800c8bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b088      	sub	sp, #32
 800c8c0:	af02      	add	r7, sp, #8
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	607a      	str	r2, [r7, #4]
 800c8c6:	603b      	str	r3, [r7, #0]
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c8e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	2b08      	cmp	r3, #8
 800c8e6:	d006      	beq.n	800c8f6 <I2C_MasterRequestRead+0x3a>
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d003      	beq.n	800c8f6 <I2C_MasterRequestRead+0x3a>
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c8f4:	d108      	bne.n	800c908 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c904:	601a      	str	r2, [r3, #0]
 800c906:	e00b      	b.n	800c920 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90c:	2b11      	cmp	r3, #17
 800c90e:	d107      	bne.n	800c920 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c91e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f000 f893 	bl	800ca58 <I2C_WaitOnFlagUntilTimeout>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00d      	beq.n	800c954 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c946:	d103      	bne.n	800c950 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c94e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c950:	2303      	movs	r3, #3
 800c952:	e079      	b.n	800ca48 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c95c:	d108      	bne.n	800c970 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c95e:	897b      	ldrh	r3, [r7, #10]
 800c960:	b2db      	uxtb	r3, r3
 800c962:	f043 0301 	orr.w	r3, r3, #1
 800c966:	b2da      	uxtb	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	611a      	str	r2, [r3, #16]
 800c96e:	e05f      	b.n	800ca30 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c970:	897b      	ldrh	r3, [r7, #10]
 800c972:	11db      	asrs	r3, r3, #7
 800c974:	b2db      	uxtb	r3, r3
 800c976:	f003 0306 	and.w	r3, r3, #6
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f063 030f 	orn	r3, r3, #15
 800c980:	b2da      	uxtb	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	4930      	ldr	r1, [pc, #192]	; (800ca50 <I2C_MasterRequestRead+0x194>)
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f000 f8b9 	bl	800cb06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d001      	beq.n	800c99e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800c99a:	2301      	movs	r3, #1
 800c99c:	e054      	b.n	800ca48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c99e:	897b      	ldrh	r3, [r7, #10]
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	4929      	ldr	r1, [pc, #164]	; (800ca54 <I2C_MasterRequestRead+0x198>)
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f000 f8a9 	bl	800cb06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e044      	b.n	800ca48 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c9be:	2300      	movs	r3, #0
 800c9c0:	613b      	str	r3, [r7, #16]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	695b      	ldr	r3, [r3, #20]
 800c9c8:	613b      	str	r3, [r7, #16]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	699b      	ldr	r3, [r3, #24]
 800c9d0:	613b      	str	r3, [r7, #16]
 800c9d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c9e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f000 f831 	bl	800ca58 <I2C_WaitOnFlagUntilTimeout>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00d      	beq.n	800ca18 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca0a:	d103      	bne.n	800ca14 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca12:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ca14:	2303      	movs	r3, #3
 800ca16:	e017      	b.n	800ca48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ca18:	897b      	ldrh	r3, [r7, #10]
 800ca1a:	11db      	asrs	r3, r3, #7
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	f003 0306 	and.w	r3, r3, #6
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	f063 030e 	orn	r3, r3, #14
 800ca28:	b2da      	uxtb	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	4907      	ldr	r1, [pc, #28]	; (800ca54 <I2C_MasterRequestRead+0x198>)
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f000 f865 	bl	800cb06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e000      	b.n	800ca48 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3718      	adds	r7, #24
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	00010008 	.word	0x00010008
 800ca54:	00010002 	.word	0x00010002

0800ca58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	4613      	mov	r3, r2
 800ca66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ca68:	e025      	b.n	800cab6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca70:	d021      	beq.n	800cab6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca72:	f7fd fea1 	bl	800a7b8 <HAL_GetTick>
 800ca76:	4602      	mov	r2, r0
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d302      	bcc.n	800ca88 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d116      	bne.n	800cab6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2220      	movs	r2, #32
 800ca92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa2:	f043 0220 	orr.w	r2, r3, #32
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	e023      	b.n	800cafe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	0c1b      	lsrs	r3, r3, #16
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d10d      	bne.n	800cadc <I2C_WaitOnFlagUntilTimeout+0x84>
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	695b      	ldr	r3, [r3, #20]
 800cac6:	43da      	mvns	r2, r3
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	4013      	ands	r3, r2
 800cacc:	b29b      	uxth	r3, r3
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bf0c      	ite	eq
 800cad2:	2301      	moveq	r3, #1
 800cad4:	2300      	movne	r3, #0
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	461a      	mov	r2, r3
 800cada:	e00c      	b.n	800caf6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	699b      	ldr	r3, [r3, #24]
 800cae2:	43da      	mvns	r2, r3
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	4013      	ands	r3, r2
 800cae8:	b29b      	uxth	r3, r3
 800caea:	2b00      	cmp	r3, #0
 800caec:	bf0c      	ite	eq
 800caee:	2301      	moveq	r3, #1
 800caf0:	2300      	movne	r3, #0
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	461a      	mov	r2, r3
 800caf6:	79fb      	ldrb	r3, [r7, #7]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d0b6      	beq.n	800ca6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b084      	sub	sp, #16
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	60f8      	str	r0, [r7, #12]
 800cb0e:	60b9      	str	r1, [r7, #8]
 800cb10:	607a      	str	r2, [r7, #4]
 800cb12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cb14:	e051      	b.n	800cbba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	695b      	ldr	r3, [r3, #20]
 800cb1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb24:	d123      	bne.n	800cb6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cb3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2200      	movs	r2, #0
 800cb44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2220      	movs	r2, #32
 800cb4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2200      	movs	r2, #0
 800cb52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5a:	f043 0204 	orr.w	r2, r3, #4
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e046      	b.n	800cbfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb74:	d021      	beq.n	800cbba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb76:	f7fd fe1f 	bl	800a7b8 <HAL_GetTick>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	1ad3      	subs	r3, r2, r3
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d302      	bcc.n	800cb8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d116      	bne.n	800cbba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2220      	movs	r2, #32
 800cb96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba6:	f043 0220 	orr.w	r2, r3, #32
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e020      	b.n	800cbfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	0c1b      	lsrs	r3, r3, #16
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d10c      	bne.n	800cbde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	695b      	ldr	r3, [r3, #20]
 800cbca:	43da      	mvns	r2, r3
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	4013      	ands	r3, r2
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	bf14      	ite	ne
 800cbd6:	2301      	movne	r3, #1
 800cbd8:	2300      	moveq	r3, #0
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	e00b      	b.n	800cbf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	699b      	ldr	r3, [r3, #24]
 800cbe4:	43da      	mvns	r2, r3
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	4013      	ands	r3, r2
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	bf14      	ite	ne
 800cbf0:	2301      	movne	r3, #1
 800cbf2:	2300      	moveq	r3, #0
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d18d      	bne.n	800cb16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cc10:	e02d      	b.n	800cc6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f000 f8ce 	bl	800cdb4 <I2C_IsAcknowledgeFailed>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d001      	beq.n	800cc22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e02d      	b.n	800cc7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc28:	d021      	beq.n	800cc6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc2a:	f7fd fdc5 	bl	800a7b8 <HAL_GetTick>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	68ba      	ldr	r2, [r7, #8]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d302      	bcc.n	800cc40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d116      	bne.n	800cc6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2220      	movs	r2, #32
 800cc4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc5a:	f043 0220 	orr.w	r2, r3, #32
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e007      	b.n	800cc7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc78:	2b80      	cmp	r3, #128	; 0x80
 800cc7a:	d1ca      	bne.n	800cc12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b084      	sub	sp, #16
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	60f8      	str	r0, [r7, #12]
 800cc8e:	60b9      	str	r1, [r7, #8]
 800cc90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cc92:	e02d      	b.n	800ccf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f000 f88d 	bl	800cdb4 <I2C_IsAcknowledgeFailed>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d001      	beq.n	800cca4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	e02d      	b.n	800cd00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccaa:	d021      	beq.n	800ccf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccac:	f7fd fd84 	bl	800a7b8 <HAL_GetTick>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	1ad3      	subs	r3, r2, r3
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d302      	bcc.n	800ccc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d116      	bne.n	800ccf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2220      	movs	r2, #32
 800cccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccdc:	f043 0220 	orr.w	r2, r3, #32
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ccec:	2301      	movs	r3, #1
 800ccee:	e007      	b.n	800cd00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	695b      	ldr	r3, [r3, #20]
 800ccf6:	f003 0304 	and.w	r3, r3, #4
 800ccfa:	2b04      	cmp	r3, #4
 800ccfc:	d1ca      	bne.n	800cc94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cd14:	e042      	b.n	800cd9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	695b      	ldr	r3, [r3, #20]
 800cd1c:	f003 0310 	and.w	r3, r3, #16
 800cd20:	2b10      	cmp	r3, #16
 800cd22:	d119      	bne.n	800cd58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f06f 0210 	mvn.w	r2, #16
 800cd2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2200      	movs	r2, #0
 800cd32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2220      	movs	r2, #32
 800cd38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cd54:	2301      	movs	r3, #1
 800cd56:	e029      	b.n	800cdac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd58:	f7fd fd2e 	bl	800a7b8 <HAL_GetTick>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	68ba      	ldr	r2, [r7, #8]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d302      	bcc.n	800cd6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d116      	bne.n	800cd9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2200      	movs	r2, #0
 800cd72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2220      	movs	r2, #32
 800cd78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd88:	f043 0220 	orr.w	r2, r3, #32
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e007      	b.n	800cdac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda6:	2b40      	cmp	r3, #64	; 0x40
 800cda8:	d1b5      	bne.n	800cd16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	695b      	ldr	r3, [r3, #20]
 800cdc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdca:	d11b      	bne.n	800ce04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cdd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2220      	movs	r2, #32
 800cde0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf0:	f043 0204 	orr.w	r2, r3, #4
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	e000      	b.n	800ce06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bc80      	pop	{r7}
 800ce0e:	4770      	bx	lr

0800ce10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d101      	bne.n	800ce22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e35c      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d01c      	beq.n	800ce64 <HAL_RCC_OscConfig+0x54>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f003 0301 	and.w	r3, r3, #1
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d116      	bne.n	800ce64 <HAL_RCC_OscConfig+0x54>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f003 0302 	and.w	r3, r3, #2
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d110      	bne.n	800ce64 <HAL_RCC_OscConfig+0x54>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f003 0308 	and.w	r3, r3, #8
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10a      	bne.n	800ce64 <HAL_RCC_OscConfig+0x54>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f003 0304 	and.w	r3, r3, #4
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d104      	bne.n	800ce64 <HAL_RCC_OscConfig+0x54>
 800ce5a:	f240 1167 	movw	r1, #359	; 0x167
 800ce5e:	48a5      	ldr	r0, [pc, #660]	; (800d0f4 <HAL_RCC_OscConfig+0x2e4>)
 800ce60:	f7fd f884 	bl	8009f6c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 809a 	beq.w	800cfa6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00e      	beq.n	800ce98 <HAL_RCC_OscConfig+0x88>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce82:	d009      	beq.n	800ce98 <HAL_RCC_OscConfig+0x88>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ce8c:	d004      	beq.n	800ce98 <HAL_RCC_OscConfig+0x88>
 800ce8e:	f240 116d 	movw	r1, #365	; 0x16d
 800ce92:	4898      	ldr	r0, [pc, #608]	; (800d0f4 <HAL_RCC_OscConfig+0x2e4>)
 800ce94:	f7fd f86a 	bl	8009f6c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ce98:	4b97      	ldr	r3, [pc, #604]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	f003 030c 	and.w	r3, r3, #12
 800cea0:	2b04      	cmp	r3, #4
 800cea2:	d00c      	beq.n	800cebe <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800cea4:	4b94      	ldr	r3, [pc, #592]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	f003 030c 	and.w	r3, r3, #12
 800ceac:	2b08      	cmp	r3, #8
 800ceae:	d112      	bne.n	800ced6 <HAL_RCC_OscConfig+0xc6>
 800ceb0:	4b91      	ldr	r3, [pc, #580]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ceb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cebc:	d10b      	bne.n	800ced6 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cebe:	4b8e      	ldr	r3, [pc, #568]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d06c      	beq.n	800cfa4 <HAL_RCC_OscConfig+0x194>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d168      	bne.n	800cfa4 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	e302      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cede:	d106      	bne.n	800ceee <HAL_RCC_OscConfig+0xde>
 800cee0:	4b85      	ldr	r3, [pc, #532]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a84      	ldr	r2, [pc, #528]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ceea:	6013      	str	r3, [r2, #0]
 800ceec:	e02e      	b.n	800cf4c <HAL_RCC_OscConfig+0x13c>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10c      	bne.n	800cf10 <HAL_RCC_OscConfig+0x100>
 800cef6:	4b80      	ldr	r3, [pc, #512]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a7f      	ldr	r2, [pc, #508]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cefc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf00:	6013      	str	r3, [r2, #0]
 800cf02:	4b7d      	ldr	r3, [pc, #500]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a7c      	ldr	r2, [pc, #496]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf0c:	6013      	str	r3, [r2, #0]
 800cf0e:	e01d      	b.n	800cf4c <HAL_RCC_OscConfig+0x13c>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf18:	d10c      	bne.n	800cf34 <HAL_RCC_OscConfig+0x124>
 800cf1a:	4b77      	ldr	r3, [pc, #476]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a76      	ldr	r2, [pc, #472]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cf24:	6013      	str	r3, [r2, #0]
 800cf26:	4b74      	ldr	r3, [pc, #464]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a73      	ldr	r2, [pc, #460]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf30:	6013      	str	r3, [r2, #0]
 800cf32:	e00b      	b.n	800cf4c <HAL_RCC_OscConfig+0x13c>
 800cf34:	4b70      	ldr	r3, [pc, #448]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a6f      	ldr	r2, [pc, #444]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf3e:	6013      	str	r3, [r2, #0]
 800cf40:	4b6d      	ldr	r3, [pc, #436]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a6c      	ldr	r2, [pc, #432]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d013      	beq.n	800cf7c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf54:	f7fd fc30 	bl	800a7b8 <HAL_GetTick>
 800cf58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf5a:	e008      	b.n	800cf6e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf5c:	f7fd fc2c 	bl	800a7b8 <HAL_GetTick>
 800cf60:	4602      	mov	r2, r0
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	1ad3      	subs	r3, r2, r3
 800cf66:	2b64      	cmp	r3, #100	; 0x64
 800cf68:	d901      	bls.n	800cf6e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800cf6a:	2303      	movs	r3, #3
 800cf6c:	e2b6      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf6e:	4b62      	ldr	r3, [pc, #392]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d0f0      	beq.n	800cf5c <HAL_RCC_OscConfig+0x14c>
 800cf7a:	e014      	b.n	800cfa6 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf7c:	f7fd fc1c 	bl	800a7b8 <HAL_GetTick>
 800cf80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cf82:	e008      	b.n	800cf96 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf84:	f7fd fc18 	bl	800a7b8 <HAL_GetTick>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	2b64      	cmp	r3, #100	; 0x64
 800cf90:	d901      	bls.n	800cf96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800cf92:	2303      	movs	r3, #3
 800cf94:	e2a2      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cf96:	4b58      	ldr	r3, [pc, #352]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d1f0      	bne.n	800cf84 <HAL_RCC_OscConfig+0x174>
 800cfa2:	e000      	b.n	800cfa6 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cfa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f003 0302 	and.w	r3, r3, #2
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d079      	beq.n	800d0a6 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d008      	beq.n	800cfcc <HAL_RCC_OscConfig+0x1bc>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d004      	beq.n	800cfcc <HAL_RCC_OscConfig+0x1bc>
 800cfc2:	f240 11a1 	movw	r1, #417	; 0x1a1
 800cfc6:	484b      	ldr	r0, [pc, #300]	; (800d0f4 <HAL_RCC_OscConfig+0x2e4>)
 800cfc8:	f7fc ffd0 	bl	8009f6c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	695b      	ldr	r3, [r3, #20]
 800cfd0:	2b1f      	cmp	r3, #31
 800cfd2:	d904      	bls.n	800cfde <HAL_RCC_OscConfig+0x1ce>
 800cfd4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800cfd8:	4846      	ldr	r0, [pc, #280]	; (800d0f4 <HAL_RCC_OscConfig+0x2e4>)
 800cfda:	f7fc ffc7 	bl	8009f6c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cfde:	4b46      	ldr	r3, [pc, #280]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	f003 030c 	and.w	r3, r3, #12
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00b      	beq.n	800d002 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800cfea:	4b43      	ldr	r3, [pc, #268]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	f003 030c 	and.w	r3, r3, #12
 800cff2:	2b08      	cmp	r3, #8
 800cff4:	d11c      	bne.n	800d030 <HAL_RCC_OscConfig+0x220>
 800cff6:	4b40      	ldr	r3, [pc, #256]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d116      	bne.n	800d030 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d002:	4b3d      	ldr	r3, [pc, #244]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f003 0302 	and.w	r3, r3, #2
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d005      	beq.n	800d01a <HAL_RCC_OscConfig+0x20a>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d001      	beq.n	800d01a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	e260      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d01a:	4b37      	ldr	r3, [pc, #220]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	695b      	ldr	r3, [r3, #20]
 800d026:	00db      	lsls	r3, r3, #3
 800d028:	4933      	ldr	r1, [pc, #204]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800d02a:	4313      	orrs	r3, r2
 800d02c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d02e:	e03a      	b.n	800d0a6 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	691b      	ldr	r3, [r3, #16]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d020      	beq.n	800d07a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d038:	4b30      	ldr	r3, [pc, #192]	; (800d0fc <HAL_RCC_OscConfig+0x2ec>)
 800d03a:	2201      	movs	r2, #1
 800d03c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d03e:	f7fd fbbb 	bl	800a7b8 <HAL_GetTick>
 800d042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d044:	e008      	b.n	800d058 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d046:	f7fd fbb7 	bl	800a7b8 <HAL_GetTick>
 800d04a:	4602      	mov	r2, r0
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	1ad3      	subs	r3, r2, r3
 800d050:	2b02      	cmp	r3, #2
 800d052:	d901      	bls.n	800d058 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d054:	2303      	movs	r3, #3
 800d056:	e241      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d058:	4b27      	ldr	r3, [pc, #156]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f003 0302 	and.w	r3, r3, #2
 800d060:	2b00      	cmp	r3, #0
 800d062:	d0f0      	beq.n	800d046 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d064:	4b24      	ldr	r3, [pc, #144]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	695b      	ldr	r3, [r3, #20]
 800d070:	00db      	lsls	r3, r3, #3
 800d072:	4921      	ldr	r1, [pc, #132]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800d074:	4313      	orrs	r3, r2
 800d076:	600b      	str	r3, [r1, #0]
 800d078:	e015      	b.n	800d0a6 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d07a:	4b20      	ldr	r3, [pc, #128]	; (800d0fc <HAL_RCC_OscConfig+0x2ec>)
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d080:	f7fd fb9a 	bl	800a7b8 <HAL_GetTick>
 800d084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d086:	e008      	b.n	800d09a <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d088:	f7fd fb96 	bl	800a7b8 <HAL_GetTick>
 800d08c:	4602      	mov	r2, r0
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	2b02      	cmp	r3, #2
 800d094:	d901      	bls.n	800d09a <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800d096:	2303      	movs	r3, #3
 800d098:	e220      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d09a:	4b17      	ldr	r3, [pc, #92]	; (800d0f8 <HAL_RCC_OscConfig+0x2e8>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f003 0302 	and.w	r3, r3, #2
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1f0      	bne.n	800d088 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f003 0308 	and.w	r3, r3, #8
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d048      	beq.n	800d144 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	699b      	ldr	r3, [r3, #24]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d008      	beq.n	800d0cc <HAL_RCC_OscConfig+0x2bc>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d004      	beq.n	800d0cc <HAL_RCC_OscConfig+0x2bc>
 800d0c2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800d0c6:	480b      	ldr	r0, [pc, #44]	; (800d0f4 <HAL_RCC_OscConfig+0x2e4>)
 800d0c8:	f7fc ff50 	bl	8009f6c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	699b      	ldr	r3, [r3, #24]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d021      	beq.n	800d118 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d0d4:	4b0a      	ldr	r3, [pc, #40]	; (800d100 <HAL_RCC_OscConfig+0x2f0>)
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d0da:	f7fd fb6d 	bl	800a7b8 <HAL_GetTick>
 800d0de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d0e0:	e010      	b.n	800d104 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d0e2:	f7fd fb69 	bl	800a7b8 <HAL_GetTick>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d909      	bls.n	800d104 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800d0f0:	2303      	movs	r3, #3
 800d0f2:	e1f3      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
 800d0f4:	08010988 	.word	0x08010988
 800d0f8:	40021000 	.word	0x40021000
 800d0fc:	42420000 	.word	0x42420000
 800d100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d104:	4b67      	ldr	r3, [pc, #412]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d108:	f003 0302 	and.w	r3, r3, #2
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d0e8      	beq.n	800d0e2 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800d110:	2001      	movs	r0, #1
 800d112:	f000 fc11 	bl	800d938 <RCC_Delay>
 800d116:	e015      	b.n	800d144 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d118:	4b63      	ldr	r3, [pc, #396]	; (800d2a8 <HAL_RCC_OscConfig+0x498>)
 800d11a:	2200      	movs	r2, #0
 800d11c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d11e:	f7fd fb4b 	bl	800a7b8 <HAL_GetTick>
 800d122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d124:	e008      	b.n	800d138 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d126:	f7fd fb47 	bl	800a7b8 <HAL_GetTick>
 800d12a:	4602      	mov	r2, r0
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	2b02      	cmp	r3, #2
 800d132:	d901      	bls.n	800d138 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800d134:	2303      	movs	r3, #3
 800d136:	e1d1      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d138:	4b5a      	ldr	r3, [pc, #360]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13c:	f003 0302 	and.w	r3, r3, #2
 800d140:	2b00      	cmp	r3, #0
 800d142:	d1f0      	bne.n	800d126 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f003 0304 	and.w	r3, r3, #4
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 80c0 	beq.w	800d2d2 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d152:	2300      	movs	r3, #0
 800d154:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00c      	beq.n	800d178 <HAL_RCC_OscConfig+0x368>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d008      	beq.n	800d178 <HAL_RCC_OscConfig+0x368>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	2b05      	cmp	r3, #5
 800d16c:	d004      	beq.n	800d178 <HAL_RCC_OscConfig+0x368>
 800d16e:	f240 2111 	movw	r1, #529	; 0x211
 800d172:	484e      	ldr	r0, [pc, #312]	; (800d2ac <HAL_RCC_OscConfig+0x49c>)
 800d174:	f7fc fefa 	bl	8009f6c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d178:	4b4a      	ldr	r3, [pc, #296]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d17a:	69db      	ldr	r3, [r3, #28]
 800d17c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10d      	bne.n	800d1a0 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d184:	4b47      	ldr	r3, [pc, #284]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d186:	69db      	ldr	r3, [r3, #28]
 800d188:	4a46      	ldr	r2, [pc, #280]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d18a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d18e:	61d3      	str	r3, [r2, #28]
 800d190:	4b44      	ldr	r3, [pc, #272]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d192:	69db      	ldr	r3, [r3, #28]
 800d194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d198:	60bb      	str	r3, [r7, #8]
 800d19a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d19c:	2301      	movs	r3, #1
 800d19e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d1a0:	4b43      	ldr	r3, [pc, #268]	; (800d2b0 <HAL_RCC_OscConfig+0x4a0>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d118      	bne.n	800d1de <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d1ac:	4b40      	ldr	r3, [pc, #256]	; (800d2b0 <HAL_RCC_OscConfig+0x4a0>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a3f      	ldr	r2, [pc, #252]	; (800d2b0 <HAL_RCC_OscConfig+0x4a0>)
 800d1b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d1b8:	f7fd fafe 	bl	800a7b8 <HAL_GetTick>
 800d1bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d1be:	e008      	b.n	800d1d2 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d1c0:	f7fd fafa 	bl	800a7b8 <HAL_GetTick>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	2b64      	cmp	r3, #100	; 0x64
 800d1cc:	d901      	bls.n	800d1d2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	e184      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d1d2:	4b37      	ldr	r3, [pc, #220]	; (800d2b0 <HAL_RCC_OscConfig+0x4a0>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d0f0      	beq.n	800d1c0 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d106      	bne.n	800d1f4 <HAL_RCC_OscConfig+0x3e4>
 800d1e6:	4b2f      	ldr	r3, [pc, #188]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	4a2e      	ldr	r2, [pc, #184]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d1ec:	f043 0301 	orr.w	r3, r3, #1
 800d1f0:	6213      	str	r3, [r2, #32]
 800d1f2:	e02d      	b.n	800d250 <HAL_RCC_OscConfig+0x440>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10c      	bne.n	800d216 <HAL_RCC_OscConfig+0x406>
 800d1fc:	4b29      	ldr	r3, [pc, #164]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d1fe:	6a1b      	ldr	r3, [r3, #32]
 800d200:	4a28      	ldr	r2, [pc, #160]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d202:	f023 0301 	bic.w	r3, r3, #1
 800d206:	6213      	str	r3, [r2, #32]
 800d208:	4b26      	ldr	r3, [pc, #152]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d20a:	6a1b      	ldr	r3, [r3, #32]
 800d20c:	4a25      	ldr	r2, [pc, #148]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d20e:	f023 0304 	bic.w	r3, r3, #4
 800d212:	6213      	str	r3, [r2, #32]
 800d214:	e01c      	b.n	800d250 <HAL_RCC_OscConfig+0x440>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	2b05      	cmp	r3, #5
 800d21c:	d10c      	bne.n	800d238 <HAL_RCC_OscConfig+0x428>
 800d21e:	4b21      	ldr	r3, [pc, #132]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d220:	6a1b      	ldr	r3, [r3, #32]
 800d222:	4a20      	ldr	r2, [pc, #128]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d224:	f043 0304 	orr.w	r3, r3, #4
 800d228:	6213      	str	r3, [r2, #32]
 800d22a:	4b1e      	ldr	r3, [pc, #120]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d22c:	6a1b      	ldr	r3, [r3, #32]
 800d22e:	4a1d      	ldr	r2, [pc, #116]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d230:	f043 0301 	orr.w	r3, r3, #1
 800d234:	6213      	str	r3, [r2, #32]
 800d236:	e00b      	b.n	800d250 <HAL_RCC_OscConfig+0x440>
 800d238:	4b1a      	ldr	r3, [pc, #104]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d23a:	6a1b      	ldr	r3, [r3, #32]
 800d23c:	4a19      	ldr	r2, [pc, #100]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d23e:	f023 0301 	bic.w	r3, r3, #1
 800d242:	6213      	str	r3, [r2, #32]
 800d244:	4b17      	ldr	r3, [pc, #92]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d246:	6a1b      	ldr	r3, [r3, #32]
 800d248:	4a16      	ldr	r2, [pc, #88]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d24a:	f023 0304 	bic.w	r3, r3, #4
 800d24e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d015      	beq.n	800d284 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d258:	f7fd faae 	bl	800a7b8 <HAL_GetTick>
 800d25c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d25e:	e00a      	b.n	800d276 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d260:	f7fd faaa 	bl	800a7b8 <HAL_GetTick>
 800d264:	4602      	mov	r2, r0
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d26e:	4293      	cmp	r3, r2
 800d270:	d901      	bls.n	800d276 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800d272:	2303      	movs	r3, #3
 800d274:	e132      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d276:	4b0b      	ldr	r3, [pc, #44]	; (800d2a4 <HAL_RCC_OscConfig+0x494>)
 800d278:	6a1b      	ldr	r3, [r3, #32]
 800d27a:	f003 0302 	and.w	r3, r3, #2
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0ee      	beq.n	800d260 <HAL_RCC_OscConfig+0x450>
 800d282:	e01d      	b.n	800d2c0 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d284:	f7fd fa98 	bl	800a7b8 <HAL_GetTick>
 800d288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d28a:	e013      	b.n	800d2b4 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d28c:	f7fd fa94 	bl	800a7b8 <HAL_GetTick>
 800d290:	4602      	mov	r2, r0
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	f241 3288 	movw	r2, #5000	; 0x1388
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d90a      	bls.n	800d2b4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800d29e:	2303      	movs	r3, #3
 800d2a0:	e11c      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
 800d2a2:	bf00      	nop
 800d2a4:	40021000 	.word	0x40021000
 800d2a8:	42420480 	.word	0x42420480
 800d2ac:	08010988 	.word	0x08010988
 800d2b0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d2b4:	4b8b      	ldr	r3, [pc, #556]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d2b6:	6a1b      	ldr	r3, [r3, #32]
 800d2b8:	f003 0302 	and.w	r3, r3, #2
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1e5      	bne.n	800d28c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800d2c0:	7dfb      	ldrb	r3, [r7, #23]
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d105      	bne.n	800d2d2 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d2c6:	4b87      	ldr	r3, [pc, #540]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d2c8:	69db      	ldr	r3, [r3, #28]
 800d2ca:	4a86      	ldr	r2, [pc, #536]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d2cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2d0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	69db      	ldr	r3, [r3, #28]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00c      	beq.n	800d2f4 <HAL_RCC_OscConfig+0x4e4>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	69db      	ldr	r3, [r3, #28]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d008      	beq.n	800d2f4 <HAL_RCC_OscConfig+0x4e4>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	69db      	ldr	r3, [r3, #28]
 800d2e6:	2b02      	cmp	r3, #2
 800d2e8:	d004      	beq.n	800d2f4 <HAL_RCC_OscConfig+0x4e4>
 800d2ea:	f240 21af 	movw	r1, #687	; 0x2af
 800d2ee:	487e      	ldr	r0, [pc, #504]	; (800d4e8 <HAL_RCC_OscConfig+0x6d8>)
 800d2f0:	f7fc fe3c 	bl	8009f6c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	69db      	ldr	r3, [r3, #28]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f000 80ee 	beq.w	800d4da <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d2fe:	4b79      	ldr	r3, [pc, #484]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	f003 030c 	and.w	r3, r3, #12
 800d306:	2b08      	cmp	r3, #8
 800d308:	f000 80ce 	beq.w	800d4a8 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	69db      	ldr	r3, [r3, #28]
 800d310:	2b02      	cmp	r3, #2
 800d312:	f040 80b2 	bne.w	800d47a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6a1b      	ldr	r3, [r3, #32]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d009      	beq.n	800d332 <HAL_RCC_OscConfig+0x522>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d326:	d004      	beq.n	800d332 <HAL_RCC_OscConfig+0x522>
 800d328:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800d32c:	486e      	ldr	r0, [pc, #440]	; (800d4e8 <HAL_RCC_OscConfig+0x6d8>)
 800d32e:	f7fc fe1d 	bl	8009f6c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d336:	2b00      	cmp	r3, #0
 800d338:	d04a      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d342:	d045      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d348:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d34c:	d040      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d352:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800d356:	d03b      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d360:	d036      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d366:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800d36a:	d031      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d370:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800d374:	d02c      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800d37e:	d027      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d388:	d022      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800d392:	d01d      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d398:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800d39c:	d018      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800d3a6:	d013      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d3b0:	d00e      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800d3ba:	d009      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800d3c4:	d004      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x5c0>
 800d3c6:	f240 21b9 	movw	r1, #697	; 0x2b9
 800d3ca:	4847      	ldr	r0, [pc, #284]	; (800d4e8 <HAL_RCC_OscConfig+0x6d8>)
 800d3cc:	f7fc fdce 	bl	8009f6c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d3d0:	4b46      	ldr	r3, [pc, #280]	; (800d4ec <HAL_RCC_OscConfig+0x6dc>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3d6:	f7fd f9ef 	bl	800a7b8 <HAL_GetTick>
 800d3da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d3dc:	e008      	b.n	800d3f0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d3de:	f7fd f9eb 	bl	800a7b8 <HAL_GetTick>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	1ad3      	subs	r3, r2, r3
 800d3e8:	2b02      	cmp	r3, #2
 800d3ea:	d901      	bls.n	800d3f0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800d3ec:	2303      	movs	r3, #3
 800d3ee:	e075      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d3f0:	4b3c      	ldr	r3, [pc, #240]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1f0      	bne.n	800d3de <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a1b      	ldr	r3, [r3, #32]
 800d400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d404:	d116      	bne.n	800d434 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d009      	beq.n	800d422 <HAL_RCC_OscConfig+0x612>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d416:	d004      	beq.n	800d422 <HAL_RCC_OscConfig+0x612>
 800d418:	f240 21cf 	movw	r1, #719	; 0x2cf
 800d41c:	4832      	ldr	r0, [pc, #200]	; (800d4e8 <HAL_RCC_OscConfig+0x6d8>)
 800d41e:	f7fc fda5 	bl	8009f6c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800d422:	4b30      	ldr	r3, [pc, #192]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	492d      	ldr	r1, [pc, #180]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d430:	4313      	orrs	r3, r2
 800d432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d434:	4b2b      	ldr	r3, [pc, #172]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6a19      	ldr	r1, [r3, #32]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d444:	430b      	orrs	r3, r1
 800d446:	4927      	ldr	r1, [pc, #156]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d448:	4313      	orrs	r3, r2
 800d44a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d44c:	4b27      	ldr	r3, [pc, #156]	; (800d4ec <HAL_RCC_OscConfig+0x6dc>)
 800d44e:	2201      	movs	r2, #1
 800d450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d452:	f7fd f9b1 	bl	800a7b8 <HAL_GetTick>
 800d456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d458:	e008      	b.n	800d46c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d45a:	f7fd f9ad 	bl	800a7b8 <HAL_GetTick>
 800d45e:	4602      	mov	r2, r0
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	1ad3      	subs	r3, r2, r3
 800d464:	2b02      	cmp	r3, #2
 800d466:	d901      	bls.n	800d46c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800d468:	2303      	movs	r3, #3
 800d46a:	e037      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d46c:	4b1d      	ldr	r3, [pc, #116]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d474:	2b00      	cmp	r3, #0
 800d476:	d0f0      	beq.n	800d45a <HAL_RCC_OscConfig+0x64a>
 800d478:	e02f      	b.n	800d4da <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d47a:	4b1c      	ldr	r3, [pc, #112]	; (800d4ec <HAL_RCC_OscConfig+0x6dc>)
 800d47c:	2200      	movs	r2, #0
 800d47e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d480:	f7fd f99a 	bl	800a7b8 <HAL_GetTick>
 800d484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d486:	e008      	b.n	800d49a <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d488:	f7fd f996 	bl	800a7b8 <HAL_GetTick>
 800d48c:	4602      	mov	r2, r0
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	2b02      	cmp	r3, #2
 800d494:	d901      	bls.n	800d49a <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800d496:	2303      	movs	r3, #3
 800d498:	e020      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d49a:	4b12      	ldr	r3, [pc, #72]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1f0      	bne.n	800d488 <HAL_RCC_OscConfig+0x678>
 800d4a6:	e018      	b.n	800d4da <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	69db      	ldr	r3, [r3, #28]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d101      	bne.n	800d4b4 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e013      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d4b4:	4b0b      	ldr	r3, [pc, #44]	; (800d4e4 <HAL_RCC_OscConfig+0x6d4>)
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6a1b      	ldr	r3, [r3, #32]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d106      	bne.n	800d4d6 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d001      	beq.n	800d4da <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e000      	b.n	800d4dc <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3718      	adds	r7, #24
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	40021000 	.word	0x40021000
 800d4e8:	08010988 	.word	0x08010988
 800d4ec:	42420060 	.word	0x42420060

0800d4f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d500:	2301      	movs	r3, #1
 800d502:	e176      	b.n	800d7f2 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f003 0301 	and.w	r3, r3, #1
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d116      	bne.n	800d53e <HAL_RCC_ClockConfig+0x4e>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f003 0302 	and.w	r3, r3, #2
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d110      	bne.n	800d53e <HAL_RCC_ClockConfig+0x4e>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f003 0304 	and.w	r3, r3, #4
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10a      	bne.n	800d53e <HAL_RCC_ClockConfig+0x4e>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f003 0308 	and.w	r3, r3, #8
 800d530:	2b00      	cmp	r3, #0
 800d532:	d104      	bne.n	800d53e <HAL_RCC_ClockConfig+0x4e>
 800d534:	f44f 714e 	mov.w	r1, #824	; 0x338
 800d538:	4874      	ldr	r0, [pc, #464]	; (800d70c <HAL_RCC_ClockConfig+0x21c>)
 800d53a:	f7fc fd17 	bl	8009f6c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00a      	beq.n	800d55a <HAL_RCC_ClockConfig+0x6a>
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2b01      	cmp	r3, #1
 800d548:	d007      	beq.n	800d55a <HAL_RCC_ClockConfig+0x6a>
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d004      	beq.n	800d55a <HAL_RCC_ClockConfig+0x6a>
 800d550:	f240 3139 	movw	r1, #825	; 0x339
 800d554:	486d      	ldr	r0, [pc, #436]	; (800d70c <HAL_RCC_ClockConfig+0x21c>)
 800d556:	f7fc fd09 	bl	8009f6c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d55a:	4b6d      	ldr	r3, [pc, #436]	; (800d710 <HAL_RCC_ClockConfig+0x220>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f003 0307 	and.w	r3, r3, #7
 800d562:	683a      	ldr	r2, [r7, #0]
 800d564:	429a      	cmp	r2, r3
 800d566:	d910      	bls.n	800d58a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d568:	4b69      	ldr	r3, [pc, #420]	; (800d710 <HAL_RCC_ClockConfig+0x220>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f023 0207 	bic.w	r2, r3, #7
 800d570:	4967      	ldr	r1, [pc, #412]	; (800d710 <HAL_RCC_ClockConfig+0x220>)
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	4313      	orrs	r3, r2
 800d576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d578:	4b65      	ldr	r3, [pc, #404]	; (800d710 <HAL_RCC_ClockConfig+0x220>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f003 0307 	and.w	r3, r3, #7
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	429a      	cmp	r2, r3
 800d584:	d001      	beq.n	800d58a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e133      	b.n	800d7f2 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f003 0302 	and.w	r3, r3, #2
 800d592:	2b00      	cmp	r3, #0
 800d594:	d049      	beq.n	800d62a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f003 0304 	and.w	r3, r3, #4
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d005      	beq.n	800d5ae <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d5a2:	4b5c      	ldr	r3, [pc, #368]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	4a5b      	ldr	r2, [pc, #364]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d5a8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d5ac:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f003 0308 	and.w	r3, r3, #8
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d005      	beq.n	800d5c6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d5ba:	4b56      	ldr	r3, [pc, #344]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	4a55      	ldr	r2, [pc, #340]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d5c0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800d5c4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d024      	beq.n	800d618 <HAL_RCC_ClockConfig+0x128>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	2b80      	cmp	r3, #128	; 0x80
 800d5d4:	d020      	beq.n	800d618 <HAL_RCC_ClockConfig+0x128>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	2b90      	cmp	r3, #144	; 0x90
 800d5dc:	d01c      	beq.n	800d618 <HAL_RCC_ClockConfig+0x128>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	2ba0      	cmp	r3, #160	; 0xa0
 800d5e4:	d018      	beq.n	800d618 <HAL_RCC_ClockConfig+0x128>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	2bb0      	cmp	r3, #176	; 0xb0
 800d5ec:	d014      	beq.n	800d618 <HAL_RCC_ClockConfig+0x128>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	2bc0      	cmp	r3, #192	; 0xc0
 800d5f4:	d010      	beq.n	800d618 <HAL_RCC_ClockConfig+0x128>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	2bd0      	cmp	r3, #208	; 0xd0
 800d5fc:	d00c      	beq.n	800d618 <HAL_RCC_ClockConfig+0x128>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	2be0      	cmp	r3, #224	; 0xe0
 800d604:	d008      	beq.n	800d618 <HAL_RCC_ClockConfig+0x128>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	689b      	ldr	r3, [r3, #8]
 800d60a:	2bf0      	cmp	r3, #240	; 0xf0
 800d60c:	d004      	beq.n	800d618 <HAL_RCC_ClockConfig+0x128>
 800d60e:	f240 315f 	movw	r1, #863	; 0x35f
 800d612:	483e      	ldr	r0, [pc, #248]	; (800d70c <HAL_RCC_ClockConfig+0x21c>)
 800d614:	f7fc fcaa 	bl	8009f6c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d618:	4b3e      	ldr	r3, [pc, #248]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	493b      	ldr	r1, [pc, #236]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d626:	4313      	orrs	r3, r2
 800d628:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	2b00      	cmp	r3, #0
 800d634:	d051      	beq.n	800d6da <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00c      	beq.n	800d658 <HAL_RCC_ClockConfig+0x168>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d008      	beq.n	800d658 <HAL_RCC_ClockConfig+0x168>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	2b02      	cmp	r3, #2
 800d64c:	d004      	beq.n	800d658 <HAL_RCC_ClockConfig+0x168>
 800d64e:	f240 3166 	movw	r1, #870	; 0x366
 800d652:	482e      	ldr	r0, [pc, #184]	; (800d70c <HAL_RCC_ClockConfig+0x21c>)
 800d654:	f7fc fc8a 	bl	8009f6c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d107      	bne.n	800d670 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d660:	4b2c      	ldr	r3, [pc, #176]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d115      	bne.n	800d698 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	e0c0      	b.n	800d7f2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	2b02      	cmp	r3, #2
 800d676:	d107      	bne.n	800d688 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d678:	4b26      	ldr	r3, [pc, #152]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d680:	2b00      	cmp	r3, #0
 800d682:	d109      	bne.n	800d698 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	e0b4      	b.n	800d7f2 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d688:	4b22      	ldr	r3, [pc, #136]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f003 0302 	and.w	r3, r3, #2
 800d690:	2b00      	cmp	r3, #0
 800d692:	d101      	bne.n	800d698 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800d694:	2301      	movs	r3, #1
 800d696:	e0ac      	b.n	800d7f2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d698:	4b1e      	ldr	r3, [pc, #120]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	f023 0203 	bic.w	r2, r3, #3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	491b      	ldr	r1, [pc, #108]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d6aa:	f7fd f885 	bl	800a7b8 <HAL_GetTick>
 800d6ae:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6b0:	e00a      	b.n	800d6c8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d6b2:	f7fd f881 	bl	800a7b8 <HAL_GetTick>
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	1ad3      	subs	r3, r2, r3
 800d6bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d901      	bls.n	800d6c8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	e094      	b.n	800d7f2 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6c8:	4b12      	ldr	r3, [pc, #72]	; (800d714 <HAL_RCC_ClockConfig+0x224>)
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	f003 020c 	and.w	r2, r3, #12
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d1eb      	bne.n	800d6b2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d6da:	4b0d      	ldr	r3, [pc, #52]	; (800d710 <HAL_RCC_ClockConfig+0x220>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f003 0307 	and.w	r3, r3, #7
 800d6e2:	683a      	ldr	r2, [r7, #0]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d217      	bcs.n	800d718 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6e8:	4b09      	ldr	r3, [pc, #36]	; (800d710 <HAL_RCC_ClockConfig+0x220>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f023 0207 	bic.w	r2, r3, #7
 800d6f0:	4907      	ldr	r1, [pc, #28]	; (800d710 <HAL_RCC_ClockConfig+0x220>)
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6f8:	4b05      	ldr	r3, [pc, #20]	; (800d710 <HAL_RCC_ClockConfig+0x220>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f003 0307 	and.w	r3, r3, #7
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	429a      	cmp	r2, r3
 800d704:	d008      	beq.n	800d718 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	e073      	b.n	800d7f2 <HAL_RCC_ClockConfig+0x302>
 800d70a:	bf00      	nop
 800d70c:	08010988 	.word	0x08010988
 800d710:	40022000 	.word	0x40022000
 800d714:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f003 0304 	and.w	r3, r3, #4
 800d720:	2b00      	cmp	r3, #0
 800d722:	d025      	beq.n	800d770 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d018      	beq.n	800d75e <HAL_RCC_ClockConfig+0x26e>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d734:	d013      	beq.n	800d75e <HAL_RCC_ClockConfig+0x26e>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800d73e:	d00e      	beq.n	800d75e <HAL_RCC_ClockConfig+0x26e>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d748:	d009      	beq.n	800d75e <HAL_RCC_ClockConfig+0x26e>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d752:	d004      	beq.n	800d75e <HAL_RCC_ClockConfig+0x26e>
 800d754:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800d758:	4828      	ldr	r0, [pc, #160]	; (800d7fc <HAL_RCC_ClockConfig+0x30c>)
 800d75a:	f7fc fc07 	bl	8009f6c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d75e:	4b28      	ldr	r3, [pc, #160]	; (800d800 <HAL_RCC_ClockConfig+0x310>)
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	4925      	ldr	r1, [pc, #148]	; (800d800 <HAL_RCC_ClockConfig+0x310>)
 800d76c:	4313      	orrs	r3, r2
 800d76e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f003 0308 	and.w	r3, r3, #8
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d026      	beq.n	800d7ca <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	691b      	ldr	r3, [r3, #16]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d018      	beq.n	800d7b6 <HAL_RCC_ClockConfig+0x2c6>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	691b      	ldr	r3, [r3, #16]
 800d788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d78c:	d013      	beq.n	800d7b6 <HAL_RCC_ClockConfig+0x2c6>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	691b      	ldr	r3, [r3, #16]
 800d792:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800d796:	d00e      	beq.n	800d7b6 <HAL_RCC_ClockConfig+0x2c6>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d7a0:	d009      	beq.n	800d7b6 <HAL_RCC_ClockConfig+0x2c6>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	691b      	ldr	r3, [r3, #16]
 800d7a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d7aa:	d004      	beq.n	800d7b6 <HAL_RCC_ClockConfig+0x2c6>
 800d7ac:	f240 31ab 	movw	r1, #939	; 0x3ab
 800d7b0:	4812      	ldr	r0, [pc, #72]	; (800d7fc <HAL_RCC_ClockConfig+0x30c>)
 800d7b2:	f7fc fbdb 	bl	8009f6c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d7b6:	4b12      	ldr	r3, [pc, #72]	; (800d800 <HAL_RCC_ClockConfig+0x310>)
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	00db      	lsls	r3, r3, #3
 800d7c4:	490e      	ldr	r1, [pc, #56]	; (800d800 <HAL_RCC_ClockConfig+0x310>)
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d7ca:	f000 f821 	bl	800d810 <HAL_RCC_GetSysClockFreq>
 800d7ce:	4601      	mov	r1, r0
 800d7d0:	4b0b      	ldr	r3, [pc, #44]	; (800d800 <HAL_RCC_ClockConfig+0x310>)
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	091b      	lsrs	r3, r3, #4
 800d7d6:	f003 030f 	and.w	r3, r3, #15
 800d7da:	4a0a      	ldr	r2, [pc, #40]	; (800d804 <HAL_RCC_ClockConfig+0x314>)
 800d7dc:	5cd3      	ldrb	r3, [r2, r3]
 800d7de:	fa21 f303 	lsr.w	r3, r1, r3
 800d7e2:	4a09      	ldr	r2, [pc, #36]	; (800d808 <HAL_RCC_ClockConfig+0x318>)
 800d7e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d7e6:	4b09      	ldr	r3, [pc, #36]	; (800d80c <HAL_RCC_ClockConfig+0x31c>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fc ffa2 	bl	800a734 <HAL_InitTick>

  return HAL_OK;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	08010988 	.word	0x08010988
 800d800:	40021000 	.word	0x40021000
 800d804:	080135d0 	.word	0x080135d0
 800d808:	2000009c 	.word	0x2000009c
 800d80c:	200000a0 	.word	0x200000a0

0800d810 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d810:	b490      	push	{r4, r7}
 800d812:	b08a      	sub	sp, #40	; 0x28
 800d814:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800d816:	4b2a      	ldr	r3, [pc, #168]	; (800d8c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800d818:	1d3c      	adds	r4, r7, #4
 800d81a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d81c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800d820:	4b28      	ldr	r3, [pc, #160]	; (800d8c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800d826:	2300      	movs	r3, #0
 800d828:	61fb      	str	r3, [r7, #28]
 800d82a:	2300      	movs	r3, #0
 800d82c:	61bb      	str	r3, [r7, #24]
 800d82e:	2300      	movs	r3, #0
 800d830:	627b      	str	r3, [r7, #36]	; 0x24
 800d832:	2300      	movs	r3, #0
 800d834:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800d836:	2300      	movs	r3, #0
 800d838:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800d83a:	4b23      	ldr	r3, [pc, #140]	; (800d8c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	f003 030c 	and.w	r3, r3, #12
 800d846:	2b04      	cmp	r3, #4
 800d848:	d002      	beq.n	800d850 <HAL_RCC_GetSysClockFreq+0x40>
 800d84a:	2b08      	cmp	r3, #8
 800d84c:	d003      	beq.n	800d856 <HAL_RCC_GetSysClockFreq+0x46>
 800d84e:	e02d      	b.n	800d8ac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d850:	4b1e      	ldr	r3, [pc, #120]	; (800d8cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800d852:	623b      	str	r3, [r7, #32]
      break;
 800d854:	e02d      	b.n	800d8b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	0c9b      	lsrs	r3, r3, #18
 800d85a:	f003 030f 	and.w	r3, r3, #15
 800d85e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d862:	4413      	add	r3, r2
 800d864:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800d868:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d870:	2b00      	cmp	r3, #0
 800d872:	d013      	beq.n	800d89c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800d874:	4b14      	ldr	r3, [pc, #80]	; (800d8c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	0c5b      	lsrs	r3, r3, #17
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d882:	4413      	add	r3, r2
 800d884:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d888:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	4a0f      	ldr	r2, [pc, #60]	; (800d8cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800d88e:	fb02 f203 	mul.w	r2, r2, r3
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	fbb2 f3f3 	udiv	r3, r2, r3
 800d898:	627b      	str	r3, [r7, #36]	; 0x24
 800d89a:	e004      	b.n	800d8a6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	4a0c      	ldr	r2, [pc, #48]	; (800d8d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d8a0:	fb02 f303 	mul.w	r3, r2, r3
 800d8a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a8:	623b      	str	r3, [r7, #32]
      break;
 800d8aa:	e002      	b.n	800d8b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800d8ac:	4b07      	ldr	r3, [pc, #28]	; (800d8cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800d8ae:	623b      	str	r3, [r7, #32]
      break;
 800d8b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d8b2:	6a3b      	ldr	r3, [r7, #32]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3728      	adds	r7, #40	; 0x28
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bc90      	pop	{r4, r7}
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	080109c0 	.word	0x080109c0
 800d8c4:	080109d0 	.word	0x080109d0
 800d8c8:	40021000 	.word	0x40021000
 800d8cc:	007a1200 	.word	0x007a1200
 800d8d0:	003d0900 	.word	0x003d0900

0800d8d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d8d8:	4b02      	ldr	r3, [pc, #8]	; (800d8e4 <HAL_RCC_GetHCLKFreq+0x10>)
 800d8da:	681b      	ldr	r3, [r3, #0]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bc80      	pop	{r7}
 800d8e2:	4770      	bx	lr
 800d8e4:	2000009c 	.word	0x2000009c

0800d8e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d8ec:	f7ff fff2 	bl	800d8d4 <HAL_RCC_GetHCLKFreq>
 800d8f0:	4601      	mov	r1, r0
 800d8f2:	4b05      	ldr	r3, [pc, #20]	; (800d908 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	0a1b      	lsrs	r3, r3, #8
 800d8f8:	f003 0307 	and.w	r3, r3, #7
 800d8fc:	4a03      	ldr	r2, [pc, #12]	; (800d90c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d8fe:	5cd3      	ldrb	r3, [r2, r3]
 800d900:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d904:	4618      	mov	r0, r3
 800d906:	bd80      	pop	{r7, pc}
 800d908:	40021000 	.word	0x40021000
 800d90c:	080135e0 	.word	0x080135e0

0800d910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d914:	f7ff ffde 	bl	800d8d4 <HAL_RCC_GetHCLKFreq>
 800d918:	4601      	mov	r1, r0
 800d91a:	4b05      	ldr	r3, [pc, #20]	; (800d930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	0adb      	lsrs	r3, r3, #11
 800d920:	f003 0307 	and.w	r3, r3, #7
 800d924:	4a03      	ldr	r2, [pc, #12]	; (800d934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d926:	5cd3      	ldrb	r3, [r2, r3]
 800d928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	40021000 	.word	0x40021000
 800d934:	080135e0 	.word	0x080135e0

0800d938 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800d940:	4b0a      	ldr	r3, [pc, #40]	; (800d96c <RCC_Delay+0x34>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a0a      	ldr	r2, [pc, #40]	; (800d970 <RCC_Delay+0x38>)
 800d946:	fba2 2303 	umull	r2, r3, r2, r3
 800d94a:	0a5b      	lsrs	r3, r3, #9
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	fb02 f303 	mul.w	r3, r2, r3
 800d952:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800d954:	bf00      	nop
  }
  while (Delay --);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	1e5a      	subs	r2, r3, #1
 800d95a:	60fa      	str	r2, [r7, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d1f9      	bne.n	800d954 <RCC_Delay+0x1c>
}
 800d960:	bf00      	nop
 800d962:	3714      	adds	r7, #20
 800d964:	46bd      	mov	sp, r7
 800d966:	bc80      	pop	{r7}
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	2000009c 	.word	0x2000009c
 800d970:	10624dd3 	.word	0x10624dd3

0800d974 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b086      	sub	sp, #24
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800d97c:	2300      	movs	r3, #0
 800d97e:	613b      	str	r3, [r7, #16]
 800d980:	2300      	movs	r3, #0
 800d982:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 0301 	and.w	r3, r3, #1
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d10f      	bne.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f003 0302 	and.w	r3, r3, #2
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d109      	bne.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f003 0310 	and.w	r3, r3, #16
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d103      	bne.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800d9a8:	216c      	movs	r1, #108	; 0x6c
 800d9aa:	4873      	ldr	r0, [pc, #460]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800d9ac:	f7fc fade 	bl	8009f6c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	f000 8095 	beq.w	800dae8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d012      	beq.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9ce:	d00d      	beq.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9d8:	d008      	beq.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d9e2:	d003      	beq.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 800d9e4:	2172      	movs	r1, #114	; 0x72
 800d9e6:	4864      	ldr	r0, [pc, #400]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800d9e8:	f7fc fac0 	bl	8009f6c <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d9f0:	4b62      	ldr	r3, [pc, #392]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800d9f2:	69db      	ldr	r3, [r3, #28]
 800d9f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d10d      	bne.n	800da18 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d9fc:	4b5f      	ldr	r3, [pc, #380]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800d9fe:	69db      	ldr	r3, [r3, #28]
 800da00:	4a5e      	ldr	r2, [pc, #376]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800da02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da06:	61d3      	str	r3, [r2, #28]
 800da08:	4b5c      	ldr	r3, [pc, #368]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800da0a:	69db      	ldr	r3, [r3, #28]
 800da0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da10:	60bb      	str	r3, [r7, #8]
 800da12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800da14:	2301      	movs	r3, #1
 800da16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800da18:	4b59      	ldr	r3, [pc, #356]	; (800db80 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da20:	2b00      	cmp	r3, #0
 800da22:	d118      	bne.n	800da56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800da24:	4b56      	ldr	r3, [pc, #344]	; (800db80 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a55      	ldr	r2, [pc, #340]	; (800db80 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800da2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800da30:	f7fc fec2 	bl	800a7b8 <HAL_GetTick>
 800da34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800da36:	e008      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800da38:	f7fc febe 	bl	800a7b8 <HAL_GetTick>
 800da3c:	4602      	mov	r2, r0
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	2b64      	cmp	r3, #100	; 0x64
 800da44:	d901      	bls.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800da46:	2303      	movs	r3, #3
 800da48:	e092      	b.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800da4a:	4b4d      	ldr	r3, [pc, #308]	; (800db80 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da52:	2b00      	cmp	r3, #0
 800da54:	d0f0      	beq.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800da56:	4b49      	ldr	r3, [pc, #292]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800da58:	6a1b      	ldr	r3, [r3, #32]
 800da5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d02e      	beq.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da6e:	68fa      	ldr	r2, [r7, #12]
 800da70:	429a      	cmp	r2, r3
 800da72:	d027      	beq.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800da74:	4b41      	ldr	r3, [pc, #260]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800da76:	6a1b      	ldr	r3, [r3, #32]
 800da78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800da7e:	4b41      	ldr	r3, [pc, #260]	; (800db84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800da80:	2201      	movs	r2, #1
 800da82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800da84:	4b3f      	ldr	r3, [pc, #252]	; (800db84 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800da86:	2200      	movs	r2, #0
 800da88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800da8a:	4a3c      	ldr	r2, [pc, #240]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f003 0301 	and.w	r3, r3, #1
 800da96:	2b00      	cmp	r3, #0
 800da98:	d014      	beq.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da9a:	f7fc fe8d 	bl	800a7b8 <HAL_GetTick>
 800da9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800daa0:	e00a      	b.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800daa2:	f7fc fe89 	bl	800a7b8 <HAL_GetTick>
 800daa6:	4602      	mov	r2, r0
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	f241 3288 	movw	r2, #5000	; 0x1388
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d901      	bls.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800dab4:	2303      	movs	r3, #3
 800dab6:	e05b      	b.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dab8:	4b30      	ldr	r3, [pc, #192]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800daba:	6a1b      	ldr	r3, [r3, #32]
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d0ee      	beq.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dac4:	4b2d      	ldr	r3, [pc, #180]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800dac6:	6a1b      	ldr	r3, [r3, #32]
 800dac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	492a      	ldr	r1, [pc, #168]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800dad2:	4313      	orrs	r3, r2
 800dad4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d105      	bne.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dadc:	4b27      	ldr	r3, [pc, #156]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800dade:	69db      	ldr	r3, [r3, #28]
 800dae0:	4a26      	ldr	r2, [pc, #152]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800dae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dae6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f003 0302 	and.w	r3, r3, #2
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d01f      	beq.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d012      	beq.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db04:	d00d      	beq.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db0e:	d008      	beq.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	689b      	ldr	r3, [r3, #8]
 800db14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800db18:	d003      	beq.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800db1a:	21b9      	movs	r1, #185	; 0xb9
 800db1c:	4816      	ldr	r0, [pc, #88]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800db1e:	f7fc fa25 	bl	8009f6c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800db22:	4b16      	ldr	r3, [pc, #88]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	4913      	ldr	r1, [pc, #76]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800db30:	4313      	orrs	r3, r2
 800db32:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f003 0310 	and.w	r3, r3, #16
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d016      	beq.n	800db6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db48:	d008      	beq.n	800db5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d004      	beq.n	800db5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800db52:	f240 1115 	movw	r1, #277	; 0x115
 800db56:	4808      	ldr	r0, [pc, #32]	; (800db78 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800db58:	f7fc fa08 	bl	8009f6c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800db5c:	4b07      	ldr	r3, [pc, #28]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	4904      	ldr	r1, [pc, #16]	; (800db7c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800db6a:	4313      	orrs	r3, r2
 800db6c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800db6e:	2300      	movs	r3, #0
}
 800db70:	4618      	mov	r0, r3
 800db72:	3718      	adds	r7, #24
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	080109d4 	.word	0x080109d4
 800db7c:	40021000 	.word	0x40021000
 800db80:	40007000 	.word	0x40007000
 800db84:	42420440 	.word	0x42420440

0800db88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800db96:	2301      	movs	r3, #1
 800db98:	e0fd      	b.n	800dd96 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a80      	ldr	r2, [pc, #512]	; (800dda0 <HAL_SPI_Init+0x218>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d009      	beq.n	800dbb8 <HAL_SPI_Init+0x30>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a7e      	ldr	r2, [pc, #504]	; (800dda4 <HAL_SPI_Init+0x21c>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d004      	beq.n	800dbb8 <HAL_SPI_Init+0x30>
 800dbae:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800dbb2:	487d      	ldr	r0, [pc, #500]	; (800dda8 <HAL_SPI_Init+0x220>)
 800dbb4:	f7fc f9da 	bl	8009f6c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d009      	beq.n	800dbd4 <HAL_SPI_Init+0x4c>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dbc8:	d004      	beq.n	800dbd4 <HAL_SPI_Init+0x4c>
 800dbca:	f240 1159 	movw	r1, #345	; 0x159
 800dbce:	4876      	ldr	r0, [pc, #472]	; (800dda8 <HAL_SPI_Init+0x220>)
 800dbd0:	f7fc f9cc 	bl	8009f6c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d00e      	beq.n	800dbfa <HAL_SPI_Init+0x72>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbe4:	d009      	beq.n	800dbfa <HAL_SPI_Init+0x72>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dbee:	d004      	beq.n	800dbfa <HAL_SPI_Init+0x72>
 800dbf0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800dbf4:	486c      	ldr	r0, [pc, #432]	; (800dda8 <HAL_SPI_Init+0x220>)
 800dbf6:	f7fc f9b9 	bl	8009f6c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	68db      	ldr	r3, [r3, #12]
 800dbfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc02:	d008      	beq.n	800dc16 <HAL_SPI_Init+0x8e>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d004      	beq.n	800dc16 <HAL_SPI_Init+0x8e>
 800dc0c:	f240 115b 	movw	r1, #347	; 0x15b
 800dc10:	4865      	ldr	r0, [pc, #404]	; (800dda8 <HAL_SPI_Init+0x220>)
 800dc12:	f7fc f9ab 	bl	8009f6c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	699b      	ldr	r3, [r3, #24]
 800dc1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc1e:	d00d      	beq.n	800dc3c <HAL_SPI_Init+0xb4>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	699b      	ldr	r3, [r3, #24]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d009      	beq.n	800dc3c <HAL_SPI_Init+0xb4>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	699b      	ldr	r3, [r3, #24]
 800dc2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dc30:	d004      	beq.n	800dc3c <HAL_SPI_Init+0xb4>
 800dc32:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800dc36:	485c      	ldr	r0, [pc, #368]	; (800dda8 <HAL_SPI_Init+0x220>)
 800dc38:	f7fc f998 	bl	8009f6c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	69db      	ldr	r3, [r3, #28]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d020      	beq.n	800dc86 <HAL_SPI_Init+0xfe>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	69db      	ldr	r3, [r3, #28]
 800dc48:	2b08      	cmp	r3, #8
 800dc4a:	d01c      	beq.n	800dc86 <HAL_SPI_Init+0xfe>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	69db      	ldr	r3, [r3, #28]
 800dc50:	2b10      	cmp	r3, #16
 800dc52:	d018      	beq.n	800dc86 <HAL_SPI_Init+0xfe>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	69db      	ldr	r3, [r3, #28]
 800dc58:	2b18      	cmp	r3, #24
 800dc5a:	d014      	beq.n	800dc86 <HAL_SPI_Init+0xfe>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	69db      	ldr	r3, [r3, #28]
 800dc60:	2b20      	cmp	r3, #32
 800dc62:	d010      	beq.n	800dc86 <HAL_SPI_Init+0xfe>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	69db      	ldr	r3, [r3, #28]
 800dc68:	2b28      	cmp	r3, #40	; 0x28
 800dc6a:	d00c      	beq.n	800dc86 <HAL_SPI_Init+0xfe>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	69db      	ldr	r3, [r3, #28]
 800dc70:	2b30      	cmp	r3, #48	; 0x30
 800dc72:	d008      	beq.n	800dc86 <HAL_SPI_Init+0xfe>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	69db      	ldr	r3, [r3, #28]
 800dc78:	2b38      	cmp	r3, #56	; 0x38
 800dc7a:	d004      	beq.n	800dc86 <HAL_SPI_Init+0xfe>
 800dc7c:	f240 115d 	movw	r1, #349	; 0x15d
 800dc80:	4849      	ldr	r0, [pc, #292]	; (800dda8 <HAL_SPI_Init+0x220>)
 800dc82:	f7fc f973 	bl	8009f6c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6a1b      	ldr	r3, [r3, #32]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d008      	beq.n	800dca0 <HAL_SPI_Init+0x118>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6a1b      	ldr	r3, [r3, #32]
 800dc92:	2b80      	cmp	r3, #128	; 0x80
 800dc94:	d004      	beq.n	800dca0 <HAL_SPI_Init+0x118>
 800dc96:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800dc9a:	4843      	ldr	r0, [pc, #268]	; (800dda8 <HAL_SPI_Init+0x220>)
 800dc9c:	f7fc f966 	bl	8009f6c <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d004      	beq.n	800dcb2 <HAL_SPI_Init+0x12a>
 800dca8:	f240 1161 	movw	r1, #353	; 0x161
 800dcac:	483e      	ldr	r0, [pc, #248]	; (800dda8 <HAL_SPI_Init+0x220>)
 800dcae:	f7fc f95d 	bl	8009f6c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d119      	bne.n	800dcee <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d008      	beq.n	800dcd4 <HAL_SPI_Init+0x14c>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d004      	beq.n	800dcd4 <HAL_SPI_Init+0x14c>
 800dcca:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800dcce:	4836      	ldr	r0, [pc, #216]	; (800dda8 <HAL_SPI_Init+0x220>)
 800dcd0:	f7fc f94c 	bl	8009f6c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	695b      	ldr	r3, [r3, #20]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d008      	beq.n	800dcee <HAL_SPI_Init+0x166>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	695b      	ldr	r3, [r3, #20]
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d004      	beq.n	800dcee <HAL_SPI_Init+0x166>
 800dce4:	f240 1165 	movw	r1, #357	; 0x165
 800dce8:	482f      	ldr	r0, [pc, #188]	; (800dda8 <HAL_SPI_Init+0x220>)
 800dcea:	f7fc f93f 	bl	8009f6c <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d106      	bne.n	800dd0e <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f7fc f971 	bl	8009ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2202      	movs	r2, #2
 800dd12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	685a      	ldr	r2, [r3, #4]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	431a      	orrs	r2, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	431a      	orrs	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	431a      	orrs	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	695b      	ldr	r3, [r3, #20]
 800dd40:	431a      	orrs	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	699b      	ldr	r3, [r3, #24]
 800dd46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd4a:	431a      	orrs	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	69db      	ldr	r3, [r3, #28]
 800dd50:	431a      	orrs	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	ea42 0103 	orr.w	r1, r2, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	430a      	orrs	r2, r1
 800dd64:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	699b      	ldr	r3, [r3, #24]
 800dd6a:	0c1a      	lsrs	r2, r3, #16
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f002 0204 	and.w	r2, r2, #4
 800dd74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	69da      	ldr	r2, [r3, #28]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800dd94:	2300      	movs	r3, #0
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3708      	adds	r7, #8
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	40013000 	.word	0x40013000
 800dda4:	40003800 	.word	0x40003800
 800dda8:	08010a24 	.word	0x08010a24

0800ddac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	603b      	str	r3, [r7, #0]
 800ddb8:	4613      	mov	r3, r2
 800ddba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d009      	beq.n	800dddc <HAL_SPI_Transmit+0x30>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	689b      	ldr	r3, [r3, #8]
 800ddcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddd0:	d004      	beq.n	800dddc <HAL_SPI_Transmit+0x30>
 800ddd2:	f240 310a 	movw	r1, #778	; 0x30a
 800ddd6:	4896      	ldr	r0, [pc, #600]	; (800e030 <HAL_SPI_Transmit+0x284>)
 800ddd8:	f7fc f8c8 	bl	8009f6c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d101      	bne.n	800ddea <HAL_SPI_Transmit+0x3e>
 800dde6:	2302      	movs	r3, #2
 800dde8:	e11e      	b.n	800e028 <HAL_SPI_Transmit+0x27c>
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2201      	movs	r2, #1
 800ddee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ddf2:	f7fc fce1 	bl	800a7b8 <HAL_GetTick>
 800ddf6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ddf8:	88fb      	ldrh	r3, [r7, #6]
 800ddfa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de02:	b2db      	uxtb	r3, r3
 800de04:	2b01      	cmp	r3, #1
 800de06:	d002      	beq.n	800de0e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800de08:	2302      	movs	r3, #2
 800de0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de0c:	e103      	b.n	800e016 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d002      	beq.n	800de1a <HAL_SPI_Transmit+0x6e>
 800de14:	88fb      	ldrh	r3, [r7, #6]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d102      	bne.n	800de20 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de1e:	e0fa      	b.n	800e016 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2203      	movs	r2, #3
 800de24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2200      	movs	r2, #0
 800de2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	68ba      	ldr	r2, [r7, #8]
 800de32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	88fa      	ldrh	r2, [r7, #6]
 800de38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	88fa      	ldrh	r2, [r7, #6]
 800de3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2200      	movs	r2, #0
 800de44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2200      	movs	r2, #0
 800de4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2200      	movs	r2, #0
 800de50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2200      	movs	r2, #0
 800de56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2200      	movs	r2, #0
 800de5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de66:	d107      	bne.n	800de78 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800de76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de82:	2b40      	cmp	r3, #64	; 0x40
 800de84:	d007      	beq.n	800de96 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de9e:	d14b      	bne.n	800df38 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d002      	beq.n	800deae <HAL_SPI_Transmit+0x102>
 800dea8:	8afb      	ldrh	r3, [r7, #22]
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d13e      	bne.n	800df2c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deb2:	881a      	ldrh	r2, [r3, #0]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800debe:	1c9a      	adds	r2, r3, #2
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dec8:	b29b      	uxth	r3, r3
 800deca:	3b01      	subs	r3, #1
 800decc:	b29a      	uxth	r2, r3
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ded2:	e02b      	b.n	800df2c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	f003 0302 	and.w	r3, r3, #2
 800dede:	2b02      	cmp	r3, #2
 800dee0:	d112      	bne.n	800df08 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dee6:	881a      	ldrh	r2, [r3, #0]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800def2:	1c9a      	adds	r2, r3, #2
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800defc:	b29b      	uxth	r3, r3
 800defe:	3b01      	subs	r3, #1
 800df00:	b29a      	uxth	r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	86da      	strh	r2, [r3, #54]	; 0x36
 800df06:	e011      	b.n	800df2c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df08:	f7fc fc56 	bl	800a7b8 <HAL_GetTick>
 800df0c:	4602      	mov	r2, r0
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	683a      	ldr	r2, [r7, #0]
 800df14:	429a      	cmp	r2, r3
 800df16:	d803      	bhi.n	800df20 <HAL_SPI_Transmit+0x174>
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df1e:	d102      	bne.n	800df26 <HAL_SPI_Transmit+0x17a>
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d102      	bne.n	800df2c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800df26:	2303      	movs	r3, #3
 800df28:	77fb      	strb	r3, [r7, #31]
          goto error;
 800df2a:	e074      	b.n	800e016 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df30:	b29b      	uxth	r3, r3
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1ce      	bne.n	800ded4 <HAL_SPI_Transmit+0x128>
 800df36:	e04c      	b.n	800dfd2 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d002      	beq.n	800df46 <HAL_SPI_Transmit+0x19a>
 800df40:	8afb      	ldrh	r3, [r7, #22]
 800df42:	2b01      	cmp	r3, #1
 800df44:	d140      	bne.n	800dfc8 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	330c      	adds	r3, #12
 800df50:	7812      	ldrb	r2, [r2, #0]
 800df52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df58:	1c5a      	adds	r2, r3, #1
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df62:	b29b      	uxth	r3, r3
 800df64:	3b01      	subs	r3, #1
 800df66:	b29a      	uxth	r2, r3
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800df6c:	e02c      	b.n	800dfc8 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	f003 0302 	and.w	r3, r3, #2
 800df78:	2b02      	cmp	r3, #2
 800df7a:	d113      	bne.n	800dfa4 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	330c      	adds	r3, #12
 800df86:	7812      	ldrb	r2, [r2, #0]
 800df88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df8e:	1c5a      	adds	r2, r3, #1
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df98:	b29b      	uxth	r3, r3
 800df9a:	3b01      	subs	r3, #1
 800df9c:	b29a      	uxth	r2, r3
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	86da      	strh	r2, [r3, #54]	; 0x36
 800dfa2:	e011      	b.n	800dfc8 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfa4:	f7fc fc08 	bl	800a7b8 <HAL_GetTick>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d803      	bhi.n	800dfbc <HAL_SPI_Transmit+0x210>
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfba:	d102      	bne.n	800dfc2 <HAL_SPI_Transmit+0x216>
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d102      	bne.n	800dfc8 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800dfc2:	2303      	movs	r3, #3
 800dfc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dfc6:	e026      	b.n	800e016 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1cd      	bne.n	800df6e <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dfd2:	69ba      	ldr	r2, [r7, #24]
 800dfd4:	6839      	ldr	r1, [r7, #0]
 800dfd6:	68f8      	ldr	r0, [r7, #12]
 800dfd8:	f000 f896 	bl	800e108 <SPI_EndRxTxTransaction>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d002      	beq.n	800dfe8 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2220      	movs	r2, #32
 800dfe6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d10a      	bne.n	800e006 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dff0:	2300      	movs	r3, #0
 800dff2:	613b      	str	r3, [r7, #16]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	613b      	str	r3, [r7, #16]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	613b      	str	r3, [r7, #16]
 800e004:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	77fb      	strb	r3, [r7, #31]
 800e012:	e000      	b.n	800e016 <HAL_SPI_Transmit+0x26a>
  }

error:
 800e014:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2201      	movs	r2, #1
 800e01a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2200      	movs	r2, #0
 800e022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e026:	7ffb      	ldrb	r3, [r7, #31]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3720      	adds	r7, #32
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	08010a24 	.word	0x08010a24

0800e034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	603b      	str	r3, [r7, #0]
 800e040:	4613      	mov	r3, r2
 800e042:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e044:	e04c      	b.n	800e0e0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e04c:	d048      	beq.n	800e0e0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e04e:	f7fc fbb3 	bl	800a7b8 <HAL_GetTick>
 800e052:	4602      	mov	r2, r0
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	1ad3      	subs	r3, r2, r3
 800e058:	683a      	ldr	r2, [r7, #0]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d902      	bls.n	800e064 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d13d      	bne.n	800e0e0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	685a      	ldr	r2, [r3, #4]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e072:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e07c:	d111      	bne.n	800e0a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e086:	d004      	beq.n	800e092 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e090:	d107      	bne.n	800e0a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e0a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0aa:	d10f      	bne.n	800e0cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e0ba:	601a      	str	r2, [r3, #0]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e0ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	e00f      	b.n	800e100 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	689a      	ldr	r2, [r3, #8]
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	68ba      	ldr	r2, [r7, #8]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	bf0c      	ite	eq
 800e0f0:	2301      	moveq	r3, #1
 800e0f2:	2300      	movne	r3, #0
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	79fb      	ldrb	r3, [r7, #7]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d1a3      	bne.n	800e046 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3710      	adds	r7, #16
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af02      	add	r7, sp, #8
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	2200      	movs	r2, #0
 800e11c:	2180      	movs	r1, #128	; 0x80
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f7ff ff88 	bl	800e034 <SPI_WaitFlagStateUntilTimeout>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d007      	beq.n	800e13a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e12e:	f043 0220 	orr.w	r2, r3, #32
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800e136:	2303      	movs	r3, #3
 800e138:	e000      	b.n	800e13c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800e13a:	2300      	movs	r3, #0
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3710      	adds	r7, #16
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	e06f      	b.n	800e236 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a39      	ldr	r2, [pc, #228]	; (800e240 <HAL_TIM_Base_Init+0xfc>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d013      	beq.n	800e188 <HAL_TIM_Base_Init+0x44>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e168:	d00e      	beq.n	800e188 <HAL_TIM_Base_Init+0x44>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4a35      	ldr	r2, [pc, #212]	; (800e244 <HAL_TIM_Base_Init+0x100>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d009      	beq.n	800e188 <HAL_TIM_Base_Init+0x44>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4a33      	ldr	r2, [pc, #204]	; (800e248 <HAL_TIM_Base_Init+0x104>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d004      	beq.n	800e188 <HAL_TIM_Base_Init+0x44>
 800e17e:	f44f 7189 	mov.w	r1, #274	; 0x112
 800e182:	4832      	ldr	r0, [pc, #200]	; (800e24c <HAL_TIM_Base_Init+0x108>)
 800e184:	f7fb fef2 	bl	8009f6c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d014      	beq.n	800e1ba <HAL_TIM_Base_Init+0x76>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	689b      	ldr	r3, [r3, #8]
 800e194:	2b10      	cmp	r3, #16
 800e196:	d010      	beq.n	800e1ba <HAL_TIM_Base_Init+0x76>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	2b20      	cmp	r3, #32
 800e19e:	d00c      	beq.n	800e1ba <HAL_TIM_Base_Init+0x76>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	689b      	ldr	r3, [r3, #8]
 800e1a4:	2b40      	cmp	r3, #64	; 0x40
 800e1a6:	d008      	beq.n	800e1ba <HAL_TIM_Base_Init+0x76>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	2b60      	cmp	r3, #96	; 0x60
 800e1ae:	d004      	beq.n	800e1ba <HAL_TIM_Base_Init+0x76>
 800e1b0:	f240 1113 	movw	r1, #275	; 0x113
 800e1b4:	4825      	ldr	r0, [pc, #148]	; (800e24c <HAL_TIM_Base_Init+0x108>)
 800e1b6:	f7fb fed9 	bl	8009f6c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	691b      	ldr	r3, [r3, #16]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00e      	beq.n	800e1e0 <HAL_TIM_Base_Init+0x9c>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1ca:	d009      	beq.n	800e1e0 <HAL_TIM_Base_Init+0x9c>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1d4:	d004      	beq.n	800e1e0 <HAL_TIM_Base_Init+0x9c>
 800e1d6:	f44f 718a 	mov.w	r1, #276	; 0x114
 800e1da:	481c      	ldr	r0, [pc, #112]	; (800e24c <HAL_TIM_Base_Init+0x108>)
 800e1dc:	f7fb fec6 	bl	8009f6c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	699b      	ldr	r3, [r3, #24]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d008      	beq.n	800e1fa <HAL_TIM_Base_Init+0xb6>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	699b      	ldr	r3, [r3, #24]
 800e1ec:	2b80      	cmp	r3, #128	; 0x80
 800e1ee:	d004      	beq.n	800e1fa <HAL_TIM_Base_Init+0xb6>
 800e1f0:	f240 1115 	movw	r1, #277	; 0x115
 800e1f4:	4815      	ldr	r0, [pc, #84]	; (800e24c <HAL_TIM_Base_Init+0x108>)
 800e1f6:	f7fb feb9 	bl	8009f6c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e200:	b2db      	uxtb	r3, r3
 800e202:	2b00      	cmp	r3, #0
 800e204:	d106      	bne.n	800e214 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7fc f9ac 	bl	800a56c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2202      	movs	r2, #2
 800e218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	3304      	adds	r3, #4
 800e224:	4619      	mov	r1, r3
 800e226:	4610      	mov	r0, r2
 800e228:	f000 fae8 	bl	800e7fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	40012c00 	.word	0x40012c00
 800e244:	40000400 	.word	0x40000400
 800e248:	40000800 	.word	0x40000800
 800e24c:	08010a5c 	.word	0x08010a5c

0800e250 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a1a      	ldr	r2, [pc, #104]	; (800e2c8 <HAL_TIM_Base_Start+0x78>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d013      	beq.n	800e28a <HAL_TIM_Base_Start+0x3a>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e26a:	d00e      	beq.n	800e28a <HAL_TIM_Base_Start+0x3a>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a16      	ldr	r2, [pc, #88]	; (800e2cc <HAL_TIM_Base_Start+0x7c>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d009      	beq.n	800e28a <HAL_TIM_Base_Start+0x3a>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4a15      	ldr	r2, [pc, #84]	; (800e2d0 <HAL_TIM_Base_Start+0x80>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d004      	beq.n	800e28a <HAL_TIM_Base_Start+0x3a>
 800e280:	f240 1185 	movw	r1, #389	; 0x185
 800e284:	4813      	ldr	r0, [pc, #76]	; (800e2d4 <HAL_TIM_Base_Start+0x84>)
 800e286:	f7fb fe71 	bl	8009f6c <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2202      	movs	r2, #2
 800e28e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	f003 0307 	and.w	r3, r3, #7
 800e29c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2b06      	cmp	r3, #6
 800e2a2:	d007      	beq.n	800e2b4 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f042 0201 	orr.w	r2, r2, #1
 800e2b2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e2bc:	2300      	movs	r3, #0
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	40012c00 	.word	0x40012c00
 800e2cc:	40000400 	.word	0x40000400
 800e2d0:	40000800 	.word	0x40000800
 800e2d4:	08010a5c 	.word	0x08010a5c

0800e2d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d101      	bne.n	800e2f0 <HAL_TIM_ConfigClockSource+0x18>
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	e279      	b.n	800e7e4 <HAL_TIM_ConfigClockSource+0x50c>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2202      	movs	r2, #2
 800e2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e308:	d029      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x86>
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e312:	d024      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x86>
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d020      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x86>
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2b10      	cmp	r3, #16
 800e322:	d01c      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x86>
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b20      	cmp	r3, #32
 800e32a:	d018      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x86>
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b30      	cmp	r3, #48	; 0x30
 800e332:	d014      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x86>
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2b40      	cmp	r3, #64	; 0x40
 800e33a:	d010      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x86>
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b50      	cmp	r3, #80	; 0x50
 800e342:	d00c      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x86>
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b60      	cmp	r3, #96	; 0x60
 800e34a:	d008      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x86>
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b70      	cmp	r3, #112	; 0x70
 800e352:	d004      	beq.n	800e35e <HAL_TIM_ConfigClockSource+0x86>
 800e354:	f241 118a 	movw	r1, #4490	; 0x118a
 800e358:	4896      	ldr	r0, [pc, #600]	; (800e5b4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800e35a:	f7fb fe07 	bl	8009f6c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e36c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e374:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b40      	cmp	r3, #64	; 0x40
 800e384:	f000 81b6 	beq.w	800e6f4 <HAL_TIM_ConfigClockSource+0x41c>
 800e388:	2b40      	cmp	r3, #64	; 0x40
 800e38a:	d80f      	bhi.n	800e3ac <HAL_TIM_ConfigClockSource+0xd4>
 800e38c:	2b10      	cmp	r3, #16
 800e38e:	f000 81fd 	beq.w	800e78c <HAL_TIM_ConfigClockSource+0x4b4>
 800e392:	2b10      	cmp	r3, #16
 800e394:	d803      	bhi.n	800e39e <HAL_TIM_ConfigClockSource+0xc6>
 800e396:	2b00      	cmp	r3, #0
 800e398:	f000 81f8 	beq.w	800e78c <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e39c:	e219      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800e39e:	2b20      	cmp	r3, #32
 800e3a0:	f000 81f4 	beq.w	800e78c <HAL_TIM_ConfigClockSource+0x4b4>
 800e3a4:	2b30      	cmp	r3, #48	; 0x30
 800e3a6:	f000 81f1 	beq.w	800e78c <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 800e3aa:	e212      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800e3ac:	2b70      	cmp	r3, #112	; 0x70
 800e3ae:	d02e      	beq.n	800e40e <HAL_TIM_ConfigClockSource+0x136>
 800e3b0:	2b70      	cmp	r3, #112	; 0x70
 800e3b2:	d806      	bhi.n	800e3c2 <HAL_TIM_ConfigClockSource+0xea>
 800e3b4:	2b50      	cmp	r3, #80	; 0x50
 800e3b6:	f000 8105 	beq.w	800e5c4 <HAL_TIM_ConfigClockSource+0x2ec>
 800e3ba:	2b60      	cmp	r3, #96	; 0x60
 800e3bc:	f000 814e 	beq.w	800e65c <HAL_TIM_ConfigClockSource+0x384>
      break;
 800e3c0:	e207      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800e3c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3c6:	d004      	beq.n	800e3d2 <HAL_TIM_ConfigClockSource+0xfa>
 800e3c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3cc:	f000 808a 	beq.w	800e4e4 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800e3d0:	e1ff      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4a78      	ldr	r2, [pc, #480]	; (800e5b8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	f000 81f9 	beq.w	800e7d0 <HAL_TIM_ConfigClockSource+0x4f8>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3e6:	f000 81f3 	beq.w	800e7d0 <HAL_TIM_ConfigClockSource+0x4f8>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	4a73      	ldr	r2, [pc, #460]	; (800e5bc <HAL_TIM_ConfigClockSource+0x2e4>)
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	f000 81ed 	beq.w	800e7d0 <HAL_TIM_ConfigClockSource+0x4f8>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4a71      	ldr	r2, [pc, #452]	; (800e5c0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	f000 81e7 	beq.w	800e7d0 <HAL_TIM_ConfigClockSource+0x4f8>
 800e402:	f241 1196 	movw	r1, #4502	; 0x1196
 800e406:	486b      	ldr	r0, [pc, #428]	; (800e5b4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800e408:	f7fb fdb0 	bl	8009f6c <assert_failed>
      break;
 800e40c:	e1e0      	b.n	800e7d0 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	4a69      	ldr	r2, [pc, #420]	; (800e5b8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800e414:	4293      	cmp	r3, r2
 800e416:	d013      	beq.n	800e440 <HAL_TIM_ConfigClockSource+0x168>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e420:	d00e      	beq.n	800e440 <HAL_TIM_ConfigClockSource+0x168>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a65      	ldr	r2, [pc, #404]	; (800e5bc <HAL_TIM_ConfigClockSource+0x2e4>)
 800e428:	4293      	cmp	r3, r2
 800e42a:	d009      	beq.n	800e440 <HAL_TIM_ConfigClockSource+0x168>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a63      	ldr	r2, [pc, #396]	; (800e5c0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d004      	beq.n	800e440 <HAL_TIM_ConfigClockSource+0x168>
 800e436:	f241 119d 	movw	r1, #4509	; 0x119d
 800e43a:	485e      	ldr	r0, [pc, #376]	; (800e5b4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800e43c:	f7fb fd96 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d013      	beq.n	800e470 <HAL_TIM_ConfigClockSource+0x198>
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	689b      	ldr	r3, [r3, #8]
 800e44c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e450:	d00e      	beq.n	800e470 <HAL_TIM_ConfigClockSource+0x198>
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	689b      	ldr	r3, [r3, #8]
 800e456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e45a:	d009      	beq.n	800e470 <HAL_TIM_ConfigClockSource+0x198>
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	689b      	ldr	r3, [r3, #8]
 800e460:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e464:	d004      	beq.n	800e470 <HAL_TIM_ConfigClockSource+0x198>
 800e466:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 800e46a:	4852      	ldr	r0, [pc, #328]	; (800e5b4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800e46c:	f7fb fd7e 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e478:	d014      	beq.n	800e4a4 <HAL_TIM_ConfigClockSource+0x1cc>
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d010      	beq.n	800e4a4 <HAL_TIM_ConfigClockSource+0x1cc>
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d00c      	beq.n	800e4a4 <HAL_TIM_ConfigClockSource+0x1cc>
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d008      	beq.n	800e4a4 <HAL_TIM_ConfigClockSource+0x1cc>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	2b0a      	cmp	r3, #10
 800e498:	d004      	beq.n	800e4a4 <HAL_TIM_ConfigClockSource+0x1cc>
 800e49a:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800e49e:	4845      	ldr	r0, [pc, #276]	; (800e5b4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800e4a0:	f7fb fd64 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	68db      	ldr	r3, [r3, #12]
 800e4a8:	2b0f      	cmp	r3, #15
 800e4aa:	d904      	bls.n	800e4b6 <HAL_TIM_ConfigClockSource+0x1de>
 800e4ac:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800e4b0:	4840      	ldr	r0, [pc, #256]	; (800e5b4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800e4b2:	f7fb fd5b 	bl	8009f6c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6818      	ldr	r0, [r3, #0]
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	6899      	ldr	r1, [r3, #8]
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	685a      	ldr	r2, [r3, #4]
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	68db      	ldr	r3, [r3, #12]
 800e4c6:	f000 fa72 	bl	800e9ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e4d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	609a      	str	r2, [r3, #8]
      break;
 800e4e2:	e176      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a33      	ldr	r2, [pc, #204]	; (800e5b8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d013      	beq.n	800e516 <HAL_TIM_ConfigClockSource+0x23e>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4f6:	d00e      	beq.n	800e516 <HAL_TIM_ConfigClockSource+0x23e>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a2f      	ldr	r2, [pc, #188]	; (800e5bc <HAL_TIM_ConfigClockSource+0x2e4>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d009      	beq.n	800e516 <HAL_TIM_ConfigClockSource+0x23e>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a2e      	ldr	r2, [pc, #184]	; (800e5c0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d004      	beq.n	800e516 <HAL_TIM_ConfigClockSource+0x23e>
 800e50c:	f241 11b5 	movw	r1, #4533	; 0x11b5
 800e510:	4828      	ldr	r0, [pc, #160]	; (800e5b4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800e512:	f7fb fd2b 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	689b      	ldr	r3, [r3, #8]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d013      	beq.n	800e546 <HAL_TIM_ConfigClockSource+0x26e>
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e526:	d00e      	beq.n	800e546 <HAL_TIM_ConfigClockSource+0x26e>
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	689b      	ldr	r3, [r3, #8]
 800e52c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e530:	d009      	beq.n	800e546 <HAL_TIM_ConfigClockSource+0x26e>
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e53a:	d004      	beq.n	800e546 <HAL_TIM_ConfigClockSource+0x26e>
 800e53c:	f241 11b8 	movw	r1, #4536	; 0x11b8
 800e540:	481c      	ldr	r0, [pc, #112]	; (800e5b4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800e542:	f7fb fd13 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e54e:	d014      	beq.n	800e57a <HAL_TIM_ConfigClockSource+0x2a2>
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d010      	beq.n	800e57a <HAL_TIM_ConfigClockSource+0x2a2>
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00c      	beq.n	800e57a <HAL_TIM_ConfigClockSource+0x2a2>
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	2b02      	cmp	r3, #2
 800e566:	d008      	beq.n	800e57a <HAL_TIM_ConfigClockSource+0x2a2>
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	2b0a      	cmp	r3, #10
 800e56e:	d004      	beq.n	800e57a <HAL_TIM_ConfigClockSource+0x2a2>
 800e570:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800e574:	480f      	ldr	r0, [pc, #60]	; (800e5b4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800e576:	f7fb fcf9 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	2b0f      	cmp	r3, #15
 800e580:	d904      	bls.n	800e58c <HAL_TIM_ConfigClockSource+0x2b4>
 800e582:	f241 11ba 	movw	r1, #4538	; 0x11ba
 800e586:	480b      	ldr	r0, [pc, #44]	; (800e5b4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800e588:	f7fb fcf0 	bl	8009f6c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6818      	ldr	r0, [r3, #0]
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	6899      	ldr	r1, [r3, #8]
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	685a      	ldr	r2, [r3, #4]
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	f000 fa07 	bl	800e9ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	689a      	ldr	r2, [r3, #8]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e5ae:	609a      	str	r2, [r3, #8]
      break;
 800e5b0:	e10f      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x4fa>
 800e5b2:	bf00      	nop
 800e5b4:	08010a5c 	.word	0x08010a5c
 800e5b8:	40012c00 	.word	0x40012c00
 800e5bc:	40000400 	.word	0x40000400
 800e5c0:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a88      	ldr	r2, [pc, #544]	; (800e7ec <HAL_TIM_ConfigClockSource+0x514>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d013      	beq.n	800e5f6 <HAL_TIM_ConfigClockSource+0x31e>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5d6:	d00e      	beq.n	800e5f6 <HAL_TIM_ConfigClockSource+0x31e>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a84      	ldr	r2, [pc, #528]	; (800e7f0 <HAL_TIM_ConfigClockSource+0x518>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d009      	beq.n	800e5f6 <HAL_TIM_ConfigClockSource+0x31e>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a83      	ldr	r2, [pc, #524]	; (800e7f4 <HAL_TIM_ConfigClockSource+0x51c>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d004      	beq.n	800e5f6 <HAL_TIM_ConfigClockSource+0x31e>
 800e5ec:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800e5f0:	4881      	ldr	r0, [pc, #516]	; (800e7f8 <HAL_TIM_ConfigClockSource+0x520>)
 800e5f2:	f7fb fcbb 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5fe:	d014      	beq.n	800e62a <HAL_TIM_ConfigClockSource+0x352>
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d010      	beq.n	800e62a <HAL_TIM_ConfigClockSource+0x352>
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d00c      	beq.n	800e62a <HAL_TIM_ConfigClockSource+0x352>
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	2b02      	cmp	r3, #2
 800e616:	d008      	beq.n	800e62a <HAL_TIM_ConfigClockSource+0x352>
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	2b0a      	cmp	r3, #10
 800e61e:	d004      	beq.n	800e62a <HAL_TIM_ConfigClockSource+0x352>
 800e620:	f241 11cc 	movw	r1, #4556	; 0x11cc
 800e624:	4874      	ldr	r0, [pc, #464]	; (800e7f8 <HAL_TIM_ConfigClockSource+0x520>)
 800e626:	f7fb fca1 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	2b0f      	cmp	r3, #15
 800e630:	d904      	bls.n	800e63c <HAL_TIM_ConfigClockSource+0x364>
 800e632:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800e636:	4870      	ldr	r0, [pc, #448]	; (800e7f8 <HAL_TIM_ConfigClockSource+0x520>)
 800e638:	f7fb fc98 	bl	8009f6c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6818      	ldr	r0, [r3, #0]
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	6859      	ldr	r1, [r3, #4]
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	461a      	mov	r2, r3
 800e64a:	f000 f939 	bl	800e8c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2150      	movs	r1, #80	; 0x50
 800e654:	4618      	mov	r0, r3
 800e656:	f000 f990 	bl	800e97a <TIM_ITRx_SetConfig>
      break;
 800e65a:	e0ba      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a62      	ldr	r2, [pc, #392]	; (800e7ec <HAL_TIM_ConfigClockSource+0x514>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d013      	beq.n	800e68e <HAL_TIM_ConfigClockSource+0x3b6>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e66e:	d00e      	beq.n	800e68e <HAL_TIM_ConfigClockSource+0x3b6>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4a5e      	ldr	r2, [pc, #376]	; (800e7f0 <HAL_TIM_ConfigClockSource+0x518>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d009      	beq.n	800e68e <HAL_TIM_ConfigClockSource+0x3b6>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4a5d      	ldr	r2, [pc, #372]	; (800e7f4 <HAL_TIM_ConfigClockSource+0x51c>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d004      	beq.n	800e68e <HAL_TIM_ConfigClockSource+0x3b6>
 800e684:	f241 11d9 	movw	r1, #4569	; 0x11d9
 800e688:	485b      	ldr	r0, [pc, #364]	; (800e7f8 <HAL_TIM_ConfigClockSource+0x520>)
 800e68a:	f7fb fc6f 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e696:	d014      	beq.n	800e6c2 <HAL_TIM_ConfigClockSource+0x3ea>
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d010      	beq.n	800e6c2 <HAL_TIM_ConfigClockSource+0x3ea>
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00c      	beq.n	800e6c2 <HAL_TIM_ConfigClockSource+0x3ea>
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	2b02      	cmp	r3, #2
 800e6ae:	d008      	beq.n	800e6c2 <HAL_TIM_ConfigClockSource+0x3ea>
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	2b0a      	cmp	r3, #10
 800e6b6:	d004      	beq.n	800e6c2 <HAL_TIM_ConfigClockSource+0x3ea>
 800e6b8:	f241 11dc 	movw	r1, #4572	; 0x11dc
 800e6bc:	484e      	ldr	r0, [pc, #312]	; (800e7f8 <HAL_TIM_ConfigClockSource+0x520>)
 800e6be:	f7fb fc55 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	68db      	ldr	r3, [r3, #12]
 800e6c6:	2b0f      	cmp	r3, #15
 800e6c8:	d904      	bls.n	800e6d4 <HAL_TIM_ConfigClockSource+0x3fc>
 800e6ca:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800e6ce:	484a      	ldr	r0, [pc, #296]	; (800e7f8 <HAL_TIM_ConfigClockSource+0x520>)
 800e6d0:	f7fb fc4c 	bl	8009f6c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6818      	ldr	r0, [r3, #0]
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	6859      	ldr	r1, [r3, #4]
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	f000 f91b 	bl	800e91c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2160      	movs	r1, #96	; 0x60
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f000 f944 	bl	800e97a <TIM_ITRx_SetConfig>
      break;
 800e6f2:	e06e      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a3c      	ldr	r2, [pc, #240]	; (800e7ec <HAL_TIM_ConfigClockSource+0x514>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d013      	beq.n	800e726 <HAL_TIM_ConfigClockSource+0x44e>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e706:	d00e      	beq.n	800e726 <HAL_TIM_ConfigClockSource+0x44e>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a38      	ldr	r2, [pc, #224]	; (800e7f0 <HAL_TIM_ConfigClockSource+0x518>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d009      	beq.n	800e726 <HAL_TIM_ConfigClockSource+0x44e>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4a37      	ldr	r2, [pc, #220]	; (800e7f4 <HAL_TIM_ConfigClockSource+0x51c>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d004      	beq.n	800e726 <HAL_TIM_ConfigClockSource+0x44e>
 800e71c:	f241 11e9 	movw	r1, #4585	; 0x11e9
 800e720:	4835      	ldr	r0, [pc, #212]	; (800e7f8 <HAL_TIM_ConfigClockSource+0x520>)
 800e722:	f7fb fc23 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e72e:	d014      	beq.n	800e75a <HAL_TIM_ConfigClockSource+0x482>
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d010      	beq.n	800e75a <HAL_TIM_ConfigClockSource+0x482>
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00c      	beq.n	800e75a <HAL_TIM_ConfigClockSource+0x482>
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	2b02      	cmp	r3, #2
 800e746:	d008      	beq.n	800e75a <HAL_TIM_ConfigClockSource+0x482>
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	2b0a      	cmp	r3, #10
 800e74e:	d004      	beq.n	800e75a <HAL_TIM_ConfigClockSource+0x482>
 800e750:	f241 11ec 	movw	r1, #4588	; 0x11ec
 800e754:	4828      	ldr	r0, [pc, #160]	; (800e7f8 <HAL_TIM_ConfigClockSource+0x520>)
 800e756:	f7fb fc09 	bl	8009f6c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	68db      	ldr	r3, [r3, #12]
 800e75e:	2b0f      	cmp	r3, #15
 800e760:	d904      	bls.n	800e76c <HAL_TIM_ConfigClockSource+0x494>
 800e762:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800e766:	4824      	ldr	r0, [pc, #144]	; (800e7f8 <HAL_TIM_ConfigClockSource+0x520>)
 800e768:	f7fb fc00 	bl	8009f6c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6818      	ldr	r0, [r3, #0]
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	6859      	ldr	r1, [r3, #4]
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	461a      	mov	r2, r3
 800e77a:	f000 f8a1 	bl	800e8c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2140      	movs	r1, #64	; 0x40
 800e784:	4618      	mov	r0, r3
 800e786:	f000 f8f8 	bl	800e97a <TIM_ITRx_SetConfig>
      break;
 800e78a:	e022      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a16      	ldr	r2, [pc, #88]	; (800e7ec <HAL_TIM_ConfigClockSource+0x514>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d013      	beq.n	800e7be <HAL_TIM_ConfigClockSource+0x4e6>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e79e:	d00e      	beq.n	800e7be <HAL_TIM_ConfigClockSource+0x4e6>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4a12      	ldr	r2, [pc, #72]	; (800e7f0 <HAL_TIM_ConfigClockSource+0x518>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d009      	beq.n	800e7be <HAL_TIM_ConfigClockSource+0x4e6>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a11      	ldr	r2, [pc, #68]	; (800e7f4 <HAL_TIM_ConfigClockSource+0x51c>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d004      	beq.n	800e7be <HAL_TIM_ConfigClockSource+0x4e6>
 800e7b4:	f241 11fc 	movw	r1, #4604	; 0x11fc
 800e7b8:	480f      	ldr	r0, [pc, #60]	; (800e7f8 <HAL_TIM_ConfigClockSource+0x520>)
 800e7ba:	f7fb fbd7 	bl	8009f6c <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	f000 f8d6 	bl	800e97a <TIM_ITRx_SetConfig>
      break;
 800e7ce:	e000      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 800e7d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	40012c00 	.word	0x40012c00
 800e7f0:	40000400 	.word	0x40000400
 800e7f4:	40000800 	.word	0x40000800
 800e7f8:	08010a5c 	.word	0x08010a5c

0800e7fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b085      	sub	sp, #20
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	4a29      	ldr	r2, [pc, #164]	; (800e8b4 <TIM_Base_SetConfig+0xb8>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d00b      	beq.n	800e82c <TIM_Base_SetConfig+0x30>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e81a:	d007      	beq.n	800e82c <TIM_Base_SetConfig+0x30>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4a26      	ldr	r2, [pc, #152]	; (800e8b8 <TIM_Base_SetConfig+0xbc>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d003      	beq.n	800e82c <TIM_Base_SetConfig+0x30>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	4a25      	ldr	r2, [pc, #148]	; (800e8bc <TIM_Base_SetConfig+0xc0>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d108      	bne.n	800e83e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	4313      	orrs	r3, r2
 800e83c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	4a1c      	ldr	r2, [pc, #112]	; (800e8b4 <TIM_Base_SetConfig+0xb8>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d00b      	beq.n	800e85e <TIM_Base_SetConfig+0x62>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e84c:	d007      	beq.n	800e85e <TIM_Base_SetConfig+0x62>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4a19      	ldr	r2, [pc, #100]	; (800e8b8 <TIM_Base_SetConfig+0xbc>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d003      	beq.n	800e85e <TIM_Base_SetConfig+0x62>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4a18      	ldr	r2, [pc, #96]	; (800e8bc <TIM_Base_SetConfig+0xc0>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d108      	bne.n	800e870 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	4313      	orrs	r3, r2
 800e86e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	695b      	ldr	r3, [r3, #20]
 800e87a:	4313      	orrs	r3, r2
 800e87c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	689a      	ldr	r2, [r3, #8]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	4a07      	ldr	r2, [pc, #28]	; (800e8b4 <TIM_Base_SetConfig+0xb8>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d103      	bne.n	800e8a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	691a      	ldr	r2, [r3, #16]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	615a      	str	r2, [r3, #20]
}
 800e8aa:	bf00      	nop
 800e8ac:	3714      	adds	r7, #20
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bc80      	pop	{r7}
 800e8b2:	4770      	bx	lr
 800e8b4:	40012c00 	.word	0x40012c00
 800e8b8:	40000400 	.word	0x40000400
 800e8bc:	40000800 	.word	0x40000800

0800e8c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6a1b      	ldr	r3, [r3, #32]
 800e8d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6a1b      	ldr	r3, [r3, #32]
 800e8d6:	f023 0201 	bic.w	r2, r3, #1
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	699b      	ldr	r3, [r3, #24]
 800e8e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e8ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	011b      	lsls	r3, r3, #4
 800e8f0:	693a      	ldr	r2, [r7, #16]
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	f023 030a 	bic.w	r3, r3, #10
 800e8fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e8fe:	697a      	ldr	r2, [r7, #20]
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	4313      	orrs	r3, r2
 800e904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	693a      	ldr	r2, [r7, #16]
 800e90a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	697a      	ldr	r2, [r7, #20]
 800e910:	621a      	str	r2, [r3, #32]
}
 800e912:	bf00      	nop
 800e914:	371c      	adds	r7, #28
 800e916:	46bd      	mov	sp, r7
 800e918:	bc80      	pop	{r7}
 800e91a:	4770      	bx	lr

0800e91c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b087      	sub	sp, #28
 800e920:	af00      	add	r7, sp, #0
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	60b9      	str	r1, [r7, #8]
 800e926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6a1b      	ldr	r3, [r3, #32]
 800e92c:	f023 0210 	bic.w	r2, r3, #16
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	699b      	ldr	r3, [r3, #24]
 800e938:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6a1b      	ldr	r3, [r3, #32]
 800e93e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e946:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	031b      	lsls	r3, r3, #12
 800e94c:	697a      	ldr	r2, [r7, #20]
 800e94e:	4313      	orrs	r3, r2
 800e950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e958:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	011b      	lsls	r3, r3, #4
 800e95e:	693a      	ldr	r2, [r7, #16]
 800e960:	4313      	orrs	r3, r2
 800e962:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	697a      	ldr	r2, [r7, #20]
 800e968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	693a      	ldr	r2, [r7, #16]
 800e96e:	621a      	str	r2, [r3, #32]
}
 800e970:	bf00      	nop
 800e972:	371c      	adds	r7, #28
 800e974:	46bd      	mov	sp, r7
 800e976:	bc80      	pop	{r7}
 800e978:	4770      	bx	lr

0800e97a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e97a:	b480      	push	{r7}
 800e97c:	b085      	sub	sp, #20
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
 800e982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	4313      	orrs	r3, r2
 800e998:	f043 0307 	orr.w	r3, r3, #7
 800e99c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	68fa      	ldr	r2, [r7, #12]
 800e9a2:	609a      	str	r2, [r3, #8]
}
 800e9a4:	bf00      	nop
 800e9a6:	3714      	adds	r7, #20
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bc80      	pop	{r7}
 800e9ac:	4770      	bx	lr

0800e9ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e9ae:	b480      	push	{r7}
 800e9b0:	b087      	sub	sp, #28
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	60f8      	str	r0, [r7, #12]
 800e9b6:	60b9      	str	r1, [r7, #8]
 800e9b8:	607a      	str	r2, [r7, #4]
 800e9ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e9c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	021a      	lsls	r2, r3, #8
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	431a      	orrs	r2, r3
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	697a      	ldr	r2, [r7, #20]
 800e9d8:	4313      	orrs	r3, r2
 800e9da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	697a      	ldr	r2, [r7, #20]
 800e9e0:	609a      	str	r2, [r3, #8]
}
 800e9e2:	bf00      	nop
 800e9e4:	371c      	adds	r7, #28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bc80      	pop	{r7}
 800e9ea:	4770      	bx	lr

0800e9ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a43      	ldr	r2, [pc, #268]	; (800eb08 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d013      	beq.n	800ea28 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea08:	d00e      	beq.n	800ea28 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a3f      	ldr	r2, [pc, #252]	; (800eb0c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d009      	beq.n	800ea28 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a3d      	ldr	r2, [pc, #244]	; (800eb10 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d004      	beq.n	800ea28 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800ea1e:	f240 6164 	movw	r1, #1636	; 0x664
 800ea22:	483c      	ldr	r0, [pc, #240]	; (800eb14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ea24:	f7fb faa2 	bl	8009f6c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d020      	beq.n	800ea72 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2b10      	cmp	r3, #16
 800ea36:	d01c      	beq.n	800ea72 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b20      	cmp	r3, #32
 800ea3e:	d018      	beq.n	800ea72 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2b30      	cmp	r3, #48	; 0x30
 800ea46:	d014      	beq.n	800ea72 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2b40      	cmp	r3, #64	; 0x40
 800ea4e:	d010      	beq.n	800ea72 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b50      	cmp	r3, #80	; 0x50
 800ea56:	d00c      	beq.n	800ea72 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b60      	cmp	r3, #96	; 0x60
 800ea5e:	d008      	beq.n	800ea72 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2b70      	cmp	r3, #112	; 0x70
 800ea66:	d004      	beq.n	800ea72 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800ea68:	f240 6165 	movw	r1, #1637	; 0x665
 800ea6c:	4829      	ldr	r0, [pc, #164]	; (800eb14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ea6e:	f7fb fa7d 	bl	8009f6c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	2b80      	cmp	r3, #128	; 0x80
 800ea78:	d008      	beq.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d004      	beq.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800ea82:	f240 6166 	movw	r1, #1638	; 0x666
 800ea86:	4823      	ldr	r0, [pc, #140]	; (800eb14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ea88:	f7fb fa70 	bl	8009f6c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d101      	bne.n	800ea9a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ea96:	2302      	movs	r3, #2
 800ea98:	e032      	b.n	800eb00 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2202      	movs	r2, #2
 800eaa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	689b      	ldr	r3, [r3, #8]
 800eab8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eac0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	68fa      	ldr	r2, [r7, #12]
 800eac8:	4313      	orrs	r3, r2
 800eaca:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ead2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	4313      	orrs	r3, r2
 800eadc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	68fa      	ldr	r2, [r7, #12]
 800eae4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	68ba      	ldr	r2, [r7, #8]
 800eaec:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eafe:	2300      	movs	r3, #0
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	40012c00 	.word	0x40012c00
 800eb0c:	40000400 	.word	0x40000400
 800eb10:	40000800 	.word	0x40000800
 800eb14:	08010a94 	.word	0x08010a94

0800eb18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d101      	bne.n	800eb2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eb26:	2301      	movs	r3, #1
 800eb28:	e092      	b.n	800ec50 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	699b      	ldr	r3, [r3, #24]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d02c      	beq.n	800eb8c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4a48      	ldr	r2, [pc, #288]	; (800ec58 <HAL_UART_Init+0x140>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d00e      	beq.n	800eb5a <HAL_UART_Init+0x42>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a46      	ldr	r2, [pc, #280]	; (800ec5c <HAL_UART_Init+0x144>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d009      	beq.n	800eb5a <HAL_UART_Init+0x42>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4a45      	ldr	r2, [pc, #276]	; (800ec60 <HAL_UART_Init+0x148>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d004      	beq.n	800eb5a <HAL_UART_Init+0x42>
 800eb50:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800eb54:	4843      	ldr	r0, [pc, #268]	; (800ec64 <HAL_UART_Init+0x14c>)
 800eb56:	f7fb fa09 	bl	8009f6c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	699b      	ldr	r3, [r3, #24]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d028      	beq.n	800ebb4 <HAL_UART_Init+0x9c>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	699b      	ldr	r3, [r3, #24]
 800eb66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb6a:	d023      	beq.n	800ebb4 <HAL_UART_Init+0x9c>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	699b      	ldr	r3, [r3, #24]
 800eb70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb74:	d01e      	beq.n	800ebb4 <HAL_UART_Init+0x9c>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb7e:	d019      	beq.n	800ebb4 <HAL_UART_Init+0x9c>
 800eb80:	f240 1147 	movw	r1, #327	; 0x147
 800eb84:	4837      	ldr	r0, [pc, #220]	; (800ec64 <HAL_UART_Init+0x14c>)
 800eb86:	f7fb f9f1 	bl	8009f6c <assert_failed>
 800eb8a:	e013      	b.n	800ebb4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a31      	ldr	r2, [pc, #196]	; (800ec58 <HAL_UART_Init+0x140>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d00e      	beq.n	800ebb4 <HAL_UART_Init+0x9c>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a30      	ldr	r2, [pc, #192]	; (800ec5c <HAL_UART_Init+0x144>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d009      	beq.n	800ebb4 <HAL_UART_Init+0x9c>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4a2e      	ldr	r2, [pc, #184]	; (800ec60 <HAL_UART_Init+0x148>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d004      	beq.n	800ebb4 <HAL_UART_Init+0x9c>
 800ebaa:	f240 114b 	movw	r1, #331	; 0x14b
 800ebae:	482d      	ldr	r0, [pc, #180]	; (800ec64 <HAL_UART_Init+0x14c>)
 800ebb0:	f7fb f9dc 	bl	8009f6c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	689b      	ldr	r3, [r3, #8]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d009      	beq.n	800ebd0 <HAL_UART_Init+0xb8>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebc4:	d004      	beq.n	800ebd0 <HAL_UART_Init+0xb8>
 800ebc6:	f240 114d 	movw	r1, #333	; 0x14d
 800ebca:	4826      	ldr	r0, [pc, #152]	; (800ec64 <HAL_UART_Init+0x14c>)
 800ebcc:	f7fb f9ce 	bl	8009f6c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d106      	bne.n	800ebea <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f7fb fd07 	bl	800a5f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2224      	movs	r2, #36	; 0x24
 800ebee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68da      	ldr	r2, [r3, #12]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ec00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 fa66 	bl	800f0d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	691a      	ldr	r2, [r3, #16]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ec16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	695a      	ldr	r2, [r3, #20]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ec26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	68da      	ldr	r2, [r3, #12]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ec36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2220      	movs	r2, #32
 800ec42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2220      	movs	r2, #32
 800ec4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3708      	adds	r7, #8
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	40013800 	.word	0x40013800
 800ec5c:	40004400 	.word	0x40004400
 800ec60:	40004800 	.word	0x40004800
 800ec64:	08010ad0 	.word	0x08010ad0

0800ec68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	695b      	ldr	r3, [r3, #20]
 800ec86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	f003 030f 	and.w	r3, r3, #15
 800ec96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10d      	bne.n	800ecba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ec9e:	69fb      	ldr	r3, [r7, #28]
 800eca0:	f003 0320 	and.w	r3, r3, #32
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d008      	beq.n	800ecba <HAL_UART_IRQHandler+0x52>
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	f003 0320 	and.w	r3, r3, #32
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d003      	beq.n	800ecba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f98d 	bl	800efd2 <UART_Receive_IT>
      return;
 800ecb8:	e0cc      	b.n	800ee54 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f000 80ab 	beq.w	800ee18 <HAL_UART_IRQHandler+0x1b0>
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	f003 0301 	and.w	r3, r3, #1
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d105      	bne.n	800ecd8 <HAL_UART_IRQHandler+0x70>
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f000 80a0 	beq.w	800ee18 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	f003 0301 	and.w	r3, r3, #1
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00a      	beq.n	800ecf8 <HAL_UART_IRQHandler+0x90>
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d005      	beq.n	800ecf8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecf0:	f043 0201 	orr.w	r2, r3, #1
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	f003 0304 	and.w	r3, r3, #4
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d00a      	beq.n	800ed18 <HAL_UART_IRQHandler+0xb0>
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	f003 0301 	and.w	r3, r3, #1
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d005      	beq.n	800ed18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed10:	f043 0202 	orr.w	r2, r3, #2
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	f003 0302 	and.w	r3, r3, #2
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00a      	beq.n	800ed38 <HAL_UART_IRQHandler+0xd0>
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	f003 0301 	and.w	r3, r3, #1
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d005      	beq.n	800ed38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed30:	f043 0204 	orr.w	r2, r3, #4
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	f003 0308 	and.w	r3, r3, #8
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00a      	beq.n	800ed58 <HAL_UART_IRQHandler+0xf0>
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	f003 0301 	and.w	r3, r3, #1
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d005      	beq.n	800ed58 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed50:	f043 0208 	orr.w	r2, r3, #8
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d078      	beq.n	800ee52 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	f003 0320 	and.w	r3, r3, #32
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d007      	beq.n	800ed7a <HAL_UART_IRQHandler+0x112>
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	f003 0320 	and.w	r3, r3, #32
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d002      	beq.n	800ed7a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f000 f92c 	bl	800efd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	695b      	ldr	r3, [r3, #20]
 800ed80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	bf14      	ite	ne
 800ed88:	2301      	movne	r3, #1
 800ed8a:	2300      	moveq	r3, #0
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed94:	f003 0308 	and.w	r3, r3, #8
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d102      	bne.n	800eda2 <HAL_UART_IRQHandler+0x13a>
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d031      	beq.n	800ee06 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 f877 	bl	800ee96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	695b      	ldr	r3, [r3, #20]
 800edae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d023      	beq.n	800edfe <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	695a      	ldr	r2, [r3, #20]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800edc4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d013      	beq.n	800edf6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd2:	4a22      	ldr	r2, [pc, #136]	; (800ee5c <HAL_UART_IRQHandler+0x1f4>)
 800edd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fc f9d4 	bl	800b188 <HAL_DMA_Abort_IT>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d016      	beq.n	800ee14 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800edf0:	4610      	mov	r0, r2
 800edf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edf4:	e00e      	b.n	800ee14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 f844 	bl	800ee84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edfc:	e00a      	b.n	800ee14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 f840 	bl	800ee84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee04:	e006      	b.n	800ee14 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 f83c 	bl	800ee84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ee12:	e01e      	b.n	800ee52 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee14:	bf00      	nop
    return;
 800ee16:	e01c      	b.n	800ee52 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d008      	beq.n	800ee34 <HAL_UART_IRQHandler+0x1cc>
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d003      	beq.n	800ee34 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f000 f863 	bl	800eef8 <UART_Transmit_IT>
    return;
 800ee32:	e00f      	b.n	800ee54 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00a      	beq.n	800ee54 <HAL_UART_IRQHandler+0x1ec>
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d005      	beq.n	800ee54 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 f8aa 	bl	800efa2 <UART_EndTransmit_IT>
    return;
 800ee4e:	bf00      	nop
 800ee50:	e000      	b.n	800ee54 <HAL_UART_IRQHandler+0x1ec>
    return;
 800ee52:	bf00      	nop
  }
}
 800ee54:	3720      	adds	r7, #32
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	0800eed1 	.word	0x0800eed1

0800ee60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ee68:	bf00      	nop
 800ee6a:	370c      	adds	r7, #12
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bc80      	pop	{r7}
 800ee70:	4770      	bx	lr

0800ee72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ee72:	b480      	push	{r7}
 800ee74:	b083      	sub	sp, #12
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ee7a:	bf00      	nop
 800ee7c:	370c      	adds	r7, #12
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bc80      	pop	{r7}
 800ee82:	4770      	bx	lr

0800ee84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ee8c:	bf00      	nop
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bc80      	pop	{r7}
 800ee94:	4770      	bx	lr

0800ee96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ee96:	b480      	push	{r7}
 800ee98:	b083      	sub	sp, #12
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	68da      	ldr	r2, [r3, #12]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800eeac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	695a      	ldr	r2, [r3, #20]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f022 0201 	bic.w	r2, r2, #1
 800eebc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2220      	movs	r2, #32
 800eec2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800eec6:	bf00      	nop
 800eec8:	370c      	adds	r7, #12
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bc80      	pop	{r7}
 800eece:	4770      	bx	lr

0800eed0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eedc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2200      	movs	r2, #0
 800eee2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2200      	movs	r2, #0
 800eee8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f7ff ffca 	bl	800ee84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eef0:	bf00      	nop
 800eef2:	3710      	adds	r7, #16
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b085      	sub	sp, #20
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	2b21      	cmp	r3, #33	; 0x21
 800ef0a:	d144      	bne.n	800ef96 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef14:	d11a      	bne.n	800ef4c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6a1b      	ldr	r3, [r3, #32]
 800ef1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	881b      	ldrh	r3, [r3, #0]
 800ef20:	461a      	mov	r2, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ef2a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	691b      	ldr	r3, [r3, #16]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d105      	bne.n	800ef40 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6a1b      	ldr	r3, [r3, #32]
 800ef38:	1c9a      	adds	r2, r3, #2
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	621a      	str	r2, [r3, #32]
 800ef3e:	e00e      	b.n	800ef5e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6a1b      	ldr	r3, [r3, #32]
 800ef44:	1c5a      	adds	r2, r3, #1
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	621a      	str	r2, [r3, #32]
 800ef4a:	e008      	b.n	800ef5e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6a1b      	ldr	r3, [r3, #32]
 800ef50:	1c59      	adds	r1, r3, #1
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	6211      	str	r1, [r2, #32]
 800ef56:	781a      	ldrb	r2, [r3, #0]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	3b01      	subs	r3, #1
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d10f      	bne.n	800ef92 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	68da      	ldr	r2, [r3, #12]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	68da      	ldr	r2, [r3, #12]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ef92:	2300      	movs	r3, #0
 800ef94:	e000      	b.n	800ef98 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ef96:	2302      	movs	r3, #2
  }
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3714      	adds	r7, #20
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bc80      	pop	{r7}
 800efa0:	4770      	bx	lr

0800efa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b082      	sub	sp, #8
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68da      	ldr	r2, [r3, #12]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800efb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2220      	movs	r2, #32
 800efbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7ff ff4c 	bl	800ee60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3708      	adds	r7, #8
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b084      	sub	sp, #16
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	2b22      	cmp	r3, #34	; 0x22
 800efe4:	d171      	bne.n	800f0ca <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	689b      	ldr	r3, [r3, #8]
 800efea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efee:	d123      	bne.n	800f038 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eff4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	691b      	ldr	r3, [r3, #16]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d10e      	bne.n	800f01c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	b29b      	uxth	r3, r3
 800f006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f014:	1c9a      	adds	r2, r3, #2
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	629a      	str	r2, [r3, #40]	; 0x28
 800f01a:	e029      	b.n	800f070 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	b29b      	uxth	r3, r3
 800f024:	b2db      	uxtb	r3, r3
 800f026:	b29a      	uxth	r2, r3
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f030:	1c5a      	adds	r2, r3, #1
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	629a      	str	r2, [r3, #40]	; 0x28
 800f036:	e01b      	b.n	800f070 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	691b      	ldr	r3, [r3, #16]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10a      	bne.n	800f056 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	6858      	ldr	r0, [r3, #4]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f04a:	1c59      	adds	r1, r3, #1
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	6291      	str	r1, [r2, #40]	; 0x28
 800f050:	b2c2      	uxtb	r2, r0
 800f052:	701a      	strb	r2, [r3, #0]
 800f054:	e00c      	b.n	800f070 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	b2da      	uxtb	r2, r3
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f062:	1c58      	adds	r0, r3, #1
 800f064:	6879      	ldr	r1, [r7, #4]
 800f066:	6288      	str	r0, [r1, #40]	; 0x28
 800f068:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f06c:	b2d2      	uxtb	r2, r2
 800f06e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f074:	b29b      	uxth	r3, r3
 800f076:	3b01      	subs	r3, #1
 800f078:	b29b      	uxth	r3, r3
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	4619      	mov	r1, r3
 800f07e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f080:	2b00      	cmp	r3, #0
 800f082:	d120      	bne.n	800f0c6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68da      	ldr	r2, [r3, #12]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f022 0220 	bic.w	r2, r2, #32
 800f092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	68da      	ldr	r2, [r3, #12]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f0a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	695a      	ldr	r2, [r3, #20]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f022 0201 	bic.w	r2, r2, #1
 800f0b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2220      	movs	r2, #32
 800f0b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7ff fed8 	bl	800ee72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	e002      	b.n	800f0cc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	e000      	b.n	800f0cc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800f0ca:	2302      	movs	r3, #2
  }
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	4a84      	ldr	r2, [pc, #528]	; (800f2f4 <UART_SetConfig+0x220>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d904      	bls.n	800f0f0 <UART_SetConfig+0x1c>
 800f0e6:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800f0ea:	4883      	ldr	r0, [pc, #524]	; (800f2f8 <UART_SetConfig+0x224>)
 800f0ec:	f7fa ff3e 	bl	8009f6c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d009      	beq.n	800f10c <UART_SetConfig+0x38>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f100:	d004      	beq.n	800f10c <UART_SetConfig+0x38>
 800f102:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800f106:	487c      	ldr	r0, [pc, #496]	; (800f2f8 <UART_SetConfig+0x224>)
 800f108:	f7fa ff30 	bl	8009f6c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	691b      	ldr	r3, [r3, #16]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00e      	beq.n	800f132 <UART_SetConfig+0x5e>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	691b      	ldr	r3, [r3, #16]
 800f118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f11c:	d009      	beq.n	800f132 <UART_SetConfig+0x5e>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f126:	d004      	beq.n	800f132 <UART_SetConfig+0x5e>
 800f128:	f640 31ff 	movw	r1, #3071	; 0xbff
 800f12c:	4872      	ldr	r0, [pc, #456]	; (800f2f8 <UART_SetConfig+0x224>)
 800f12e:	f7fa ff1d 	bl	8009f6c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	695a      	ldr	r2, [r3, #20]
 800f136:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800f13a:	4013      	ands	r3, r2
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d103      	bne.n	800f148 <UART_SetConfig+0x74>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	695b      	ldr	r3, [r3, #20]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d104      	bne.n	800f152 <UART_SetConfig+0x7e>
 800f148:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800f14c:	486a      	ldr	r0, [pc, #424]	; (800f2f8 <UART_SetConfig+0x224>)
 800f14e:	f7fa ff0d 	bl	8009f6c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	68da      	ldr	r2, [r3, #12]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	430a      	orrs	r2, r1
 800f166:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	689a      	ldr	r2, [r3, #8]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	691b      	ldr	r3, [r3, #16]
 800f170:	431a      	orrs	r2, r3
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	695b      	ldr	r3, [r3, #20]
 800f176:	4313      	orrs	r3, r2
 800f178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	68db      	ldr	r3, [r3, #12]
 800f180:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800f184:	f023 030c 	bic.w	r3, r3, #12
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	6812      	ldr	r2, [r2, #0]
 800f18c:	68f9      	ldr	r1, [r7, #12]
 800f18e:	430b      	orrs	r3, r1
 800f190:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	695b      	ldr	r3, [r3, #20]
 800f198:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	699a      	ldr	r2, [r3, #24]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	430a      	orrs	r2, r1
 800f1a6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4a53      	ldr	r2, [pc, #332]	; (800f2fc <UART_SetConfig+0x228>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d14e      	bne.n	800f250 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800f1b2:	f7fe fbad 	bl	800d910 <HAL_RCC_GetPCLK2Freq>
 800f1b6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f1b8:	68ba      	ldr	r2, [r7, #8]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	4413      	add	r3, r2
 800f1c0:	009a      	lsls	r2, r3, #2
 800f1c2:	441a      	add	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1ce:	4a4c      	ldr	r2, [pc, #304]	; (800f300 <UART_SetConfig+0x22c>)
 800f1d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f1d4:	095b      	lsrs	r3, r3, #5
 800f1d6:	0119      	lsls	r1, r3, #4
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	4613      	mov	r3, r2
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	4413      	add	r3, r2
 800f1e0:	009a      	lsls	r2, r3, #2
 800f1e2:	441a      	add	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	009b      	lsls	r3, r3, #2
 800f1ea:	fbb2 f2f3 	udiv	r2, r2, r3
 800f1ee:	4b44      	ldr	r3, [pc, #272]	; (800f300 <UART_SetConfig+0x22c>)
 800f1f0:	fba3 0302 	umull	r0, r3, r3, r2
 800f1f4:	095b      	lsrs	r3, r3, #5
 800f1f6:	2064      	movs	r0, #100	; 0x64
 800f1f8:	fb00 f303 	mul.w	r3, r0, r3
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	011b      	lsls	r3, r3, #4
 800f200:	3332      	adds	r3, #50	; 0x32
 800f202:	4a3f      	ldr	r2, [pc, #252]	; (800f300 <UART_SetConfig+0x22c>)
 800f204:	fba2 2303 	umull	r2, r3, r2, r3
 800f208:	095b      	lsrs	r3, r3, #5
 800f20a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f20e:	4419      	add	r1, r3
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	4613      	mov	r3, r2
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	4413      	add	r3, r2
 800f218:	009a      	lsls	r2, r3, #2
 800f21a:	441a      	add	r2, r3
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	fbb2 f2f3 	udiv	r2, r2, r3
 800f226:	4b36      	ldr	r3, [pc, #216]	; (800f300 <UART_SetConfig+0x22c>)
 800f228:	fba3 0302 	umull	r0, r3, r3, r2
 800f22c:	095b      	lsrs	r3, r3, #5
 800f22e:	2064      	movs	r0, #100	; 0x64
 800f230:	fb00 f303 	mul.w	r3, r0, r3
 800f234:	1ad3      	subs	r3, r2, r3
 800f236:	011b      	lsls	r3, r3, #4
 800f238:	3332      	adds	r3, #50	; 0x32
 800f23a:	4a31      	ldr	r2, [pc, #196]	; (800f300 <UART_SetConfig+0x22c>)
 800f23c:	fba2 2303 	umull	r2, r3, r2, r3
 800f240:	095b      	lsrs	r3, r3, #5
 800f242:	f003 020f 	and.w	r2, r3, #15
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	440a      	add	r2, r1
 800f24c:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800f24e:	e04d      	b.n	800f2ec <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 800f250:	f7fe fb4a 	bl	800d8e8 <HAL_RCC_GetPCLK1Freq>
 800f254:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f256:	68ba      	ldr	r2, [r7, #8]
 800f258:	4613      	mov	r3, r2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4413      	add	r3, r2
 800f25e:	009a      	lsls	r2, r3, #2
 800f260:	441a      	add	r2, r3
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	fbb2 f3f3 	udiv	r3, r2, r3
 800f26c:	4a24      	ldr	r2, [pc, #144]	; (800f300 <UART_SetConfig+0x22c>)
 800f26e:	fba2 2303 	umull	r2, r3, r2, r3
 800f272:	095b      	lsrs	r3, r3, #5
 800f274:	0119      	lsls	r1, r3, #4
 800f276:	68ba      	ldr	r2, [r7, #8]
 800f278:	4613      	mov	r3, r2
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	4413      	add	r3, r2
 800f27e:	009a      	lsls	r2, r3, #2
 800f280:	441a      	add	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	fbb2 f2f3 	udiv	r2, r2, r3
 800f28c:	4b1c      	ldr	r3, [pc, #112]	; (800f300 <UART_SetConfig+0x22c>)
 800f28e:	fba3 0302 	umull	r0, r3, r3, r2
 800f292:	095b      	lsrs	r3, r3, #5
 800f294:	2064      	movs	r0, #100	; 0x64
 800f296:	fb00 f303 	mul.w	r3, r0, r3
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	011b      	lsls	r3, r3, #4
 800f29e:	3332      	adds	r3, #50	; 0x32
 800f2a0:	4a17      	ldr	r2, [pc, #92]	; (800f300 <UART_SetConfig+0x22c>)
 800f2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2a6:	095b      	lsrs	r3, r3, #5
 800f2a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2ac:	4419      	add	r1, r3
 800f2ae:	68ba      	ldr	r2, [r7, #8]
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	4413      	add	r3, r2
 800f2b6:	009a      	lsls	r2, r3, #2
 800f2b8:	441a      	add	r2, r3
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	fbb2 f2f3 	udiv	r2, r2, r3
 800f2c4:	4b0e      	ldr	r3, [pc, #56]	; (800f300 <UART_SetConfig+0x22c>)
 800f2c6:	fba3 0302 	umull	r0, r3, r3, r2
 800f2ca:	095b      	lsrs	r3, r3, #5
 800f2cc:	2064      	movs	r0, #100	; 0x64
 800f2ce:	fb00 f303 	mul.w	r3, r0, r3
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	011b      	lsls	r3, r3, #4
 800f2d6:	3332      	adds	r3, #50	; 0x32
 800f2d8:	4a09      	ldr	r2, [pc, #36]	; (800f300 <UART_SetConfig+0x22c>)
 800f2da:	fba2 2303 	umull	r2, r3, r2, r3
 800f2de:	095b      	lsrs	r3, r3, #5
 800f2e0:	f003 020f 	and.w	r2, r3, #15
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	440a      	add	r2, r1
 800f2ea:	609a      	str	r2, [r3, #8]
}
 800f2ec:	bf00      	nop
 800f2ee:	3710      	adds	r7, #16
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	0044aa20 	.word	0x0044aa20
 800f2f8:	08010ad0 	.word	0x08010ad0
 800f2fc:	40013800 	.word	0x40013800
 800f300:	51eb851f 	.word	0x51eb851f

0800f304 <_Znaj>:
 800f304:	f000 b800 	b.w	800f308 <_Znwj>

0800f308 <_Znwj>:
 800f308:	b510      	push	{r4, lr}
 800f30a:	2800      	cmp	r0, #0
 800f30c:	bf14      	ite	ne
 800f30e:	4604      	movne	r4, r0
 800f310:	2401      	moveq	r4, #1
 800f312:	4620      	mov	r0, r4
 800f314:	f000 fba8 	bl	800fa68 <malloc>
 800f318:	b930      	cbnz	r0, 800f328 <_Znwj+0x20>
 800f31a:	f000 f807 	bl	800f32c <_ZSt15get_new_handlerv>
 800f31e:	b908      	cbnz	r0, 800f324 <_Znwj+0x1c>
 800f320:	f000 fb70 	bl	800fa04 <abort>
 800f324:	4780      	blx	r0
 800f326:	e7f4      	b.n	800f312 <_Znwj+0xa>
 800f328:	bd10      	pop	{r4, pc}
	...

0800f32c <_ZSt15get_new_handlerv>:
 800f32c:	4b02      	ldr	r3, [pc, #8]	; (800f338 <_ZSt15get_new_handlerv+0xc>)
 800f32e:	6818      	ldr	r0, [r3, #0]
 800f330:	f3bf 8f5b 	dmb	ish
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	20000534 	.word	0x20000534

0800f33c <_ZdlPv>:
 800f33c:	f000 bb9c 	b.w	800fa78 <free>

0800f340 <_ZNSaIcEC1Ev>:
 800f340:	4770      	bx	lr

0800f342 <_ZNSaIcED1Ev>:
 800f342:	4770      	bx	lr

0800f344 <_ZSt17__throw_bad_allocv>:
 800f344:	b508      	push	{r3, lr}
 800f346:	f000 fb5d 	bl	800fa04 <abort>

0800f34a <_ZSt19__throw_logic_errorPKc>:
 800f34a:	b508      	push	{r3, lr}
 800f34c:	f000 fb5a 	bl	800fa04 <abort>

0800f350 <_ZSt20__throw_length_errorPKc>:
 800f350:	b508      	push	{r3, lr}
 800f352:	f000 fb57 	bl	800fa04 <abort>

0800f356 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800f356:	b40f      	push	{r0, r1, r2, r3}
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	f107 0410 	add.w	r4, r7, #16
 800f362:	f854 5b04 	ldr.w	r5, [r4], #4
 800f366:	4628      	mov	r0, r5
 800f368:	f7f0 fef2 	bl	8000150 <strlen>
 800f36c:	f200 230e 	addw	r3, r0, #526	; 0x20e
 800f370:	f023 0307 	bic.w	r3, r3, #7
 800f374:	ebad 0d03 	sub.w	sp, sp, r3
 800f378:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800f37c:	4623      	mov	r3, r4
 800f37e:	462a      	mov	r2, r5
 800f380:	4668      	mov	r0, sp
 800f382:	607c      	str	r4, [r7, #4]
 800f384:	f000 fad8 	bl	800f938 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800f388:	f000 fb3c 	bl	800fa04 <abort>

0800f38c <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800f38c:	b10a      	cbz	r2, 800f392 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800f38e:	f000 bb89 	b.w	800faa4 <memcmp>
 800f392:	4610      	mov	r0, r2
 800f394:	4770      	bx	lr

0800f396 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800f396:	b10a      	cbz	r2, 800f39c <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800f398:	f000 bb93 	b.w	800fac2 <memcpy>
 800f39c:	4770      	bx	lr

0800f39e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800f39e:	6001      	str	r1, [r0, #0]
 800f3a0:	4770      	bx	lr

0800f3a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800f3a2:	6800      	ldr	r0, [r0, #0]
 800f3a4:	4770      	bx	lr

0800f3a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800f3a6:	3008      	adds	r0, #8
 800f3a8:	4770      	bx	lr

0800f3aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800f3aa:	6081      	str	r1, [r0, #8]
 800f3ac:	4770      	bx	lr

0800f3ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	6803      	ldr	r3, [r0, #0]
 800f3b2:	6041      	str	r1, [r0, #4]
 800f3b4:	545a      	strb	r2, [r3, r1]
 800f3b6:	4770      	bx	lr

0800f3b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800f3b8:	b508      	push	{r3, lr}
 800f3ba:	680b      	ldr	r3, [r1, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	da02      	bge.n	800f3c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800f3c0:	4809      	ldr	r0, [pc, #36]	; (800f3e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800f3c2:	f7ff ffc5 	bl	800f350 <_ZSt20__throw_length_errorPKc>
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d908      	bls.n	800f3dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800f3ca:	0052      	lsls	r2, r2, #1
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d205      	bcs.n	800f3dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800f3d0:	2a00      	cmp	r2, #0
 800f3d2:	bfb6      	itet	lt
 800f3d4:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800f3d8:	600a      	strge	r2, [r1, #0]
 800f3da:	600b      	strlt	r3, [r1, #0]
 800f3dc:	6808      	ldr	r0, [r1, #0]
 800f3de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f3e2:	3001      	adds	r0, #1
 800f3e4:	f7ff bf90 	b.w	800f308 <_Znwj>
 800f3e8:	0801368d 	.word	0x0801368d

0800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	f853 0b08 	ldr.w	r0, [r3], #8
 800f3f2:	4298      	cmp	r0, r3
 800f3f4:	d001      	beq.n	800f3fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800f3f6:	f7ff bfa1 	b.w	800f33c <_ZdlPv>
 800f3fa:	4770      	bx	lr

0800f3fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800f3fc:	b510      	push	{r4, lr}
 800f3fe:	6843      	ldr	r3, [r0, #4]
 800f400:	4614      	mov	r4, r2
 800f402:	4299      	cmp	r1, r3
 800f404:	d904      	bls.n	800f410 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 800f406:	460a      	mov	r2, r1
 800f408:	4802      	ldr	r0, [pc, #8]	; (800f414 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800f40a:	4621      	mov	r1, r4
 800f40c:	f7ff ffa3 	bl	800f356 <_ZSt24__throw_out_of_range_fmtPKcz>
 800f410:	4608      	mov	r0, r1
 800f412:	bd10      	pop	{r4, pc}
 800f414:	080135e8 	.word	0x080135e8

0800f418 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800f418:	b508      	push	{r3, lr}
 800f41a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800f41e:	6840      	ldr	r0, [r0, #4]
 800f420:	3901      	subs	r1, #1
 800f422:	1a09      	subs	r1, r1, r0
 800f424:	4291      	cmp	r1, r2
 800f426:	d202      	bcs.n	800f42e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800f428:	4618      	mov	r0, r3
 800f42a:	f7ff ff91 	bl	800f350 <_ZSt20__throw_length_errorPKc>
 800f42e:	bd08      	pop	{r3, pc}

0800f430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800f430:	6803      	ldr	r3, [r0, #0]
 800f432:	428b      	cmp	r3, r1
 800f434:	d806      	bhi.n	800f444 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800f436:	6840      	ldr	r0, [r0, #4]
 800f438:	4418      	add	r0, r3
 800f43a:	4281      	cmp	r1, r0
 800f43c:	bf94      	ite	ls
 800f43e:	2000      	movls	r0, #0
 800f440:	2001      	movhi	r0, #1
 800f442:	4770      	bx	lr
 800f444:	2001      	movs	r0, #1
 800f446:	4770      	bx	lr

0800f448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800f448:	2a01      	cmp	r2, #1
 800f44a:	b510      	push	{r4, lr}
 800f44c:	d102      	bne.n	800f454 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800f44e:	780a      	ldrb	r2, [r1, #0]
 800f450:	7002      	strb	r2, [r0, #0]
 800f452:	bd10      	pop	{r4, pc}
 800f454:	f7ff ff9f 	bl	800f396 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800f458:	e7fb      	b.n	800f452 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800f45a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800f45a:	2a01      	cmp	r2, #1
 800f45c:	b430      	push	{r4, r5}
 800f45e:	d103      	bne.n	800f468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800f460:	780b      	ldrb	r3, [r1, #0]
 800f462:	7003      	strb	r3, [r0, #0]
 800f464:	bc30      	pop	{r4, r5}
 800f466:	4770      	bx	lr
 800f468:	2a00      	cmp	r2, #0
 800f46a:	d0fb      	beq.n	800f464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800f46c:	bc30      	pop	{r4, r5}
 800f46e:	f000 bb33 	b.w	800fad8 <memmove>

0800f472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800f472:	b508      	push	{r3, lr}
 800f474:	1a52      	subs	r2, r2, r1
 800f476:	f7ff ffe7 	bl	800f448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f47a:	bd08      	pop	{r3, pc}

0800f47c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800f47c:	b508      	push	{r3, lr}
 800f47e:	1a52      	subs	r2, r2, r1
 800f480:	f7ff ffe2 	bl	800f448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f484:	bd08      	pop	{r3, pc}

0800f486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800f486:	4288      	cmp	r0, r1
 800f488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f48a:	4604      	mov	r4, r0
 800f48c:	460e      	mov	r6, r1
 800f48e:	d020      	beq.n	800f4d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 800f490:	6802      	ldr	r2, [r0, #0]
 800f492:	f100 0308 	add.w	r3, r0, #8
 800f496:	429a      	cmp	r2, r3
 800f498:	bf08      	it	eq
 800f49a:	220f      	moveq	r2, #15
 800f49c:	684d      	ldr	r5, [r1, #4]
 800f49e:	bf18      	it	ne
 800f4a0:	6882      	ldrne	r2, [r0, #8]
 800f4a2:	42aa      	cmp	r2, r5
 800f4a4:	d20b      	bcs.n	800f4be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 800f4a6:	a902      	add	r1, sp, #8
 800f4a8:	f841 5d04 	str.w	r5, [r1, #-4]!
 800f4ac:	f7ff ff84 	bl	800f3b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800f4b0:	4607      	mov	r7, r0
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	f7ff ff9a 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800f4b8:	9b01      	ldr	r3, [sp, #4]
 800f4ba:	6027      	str	r7, [r4, #0]
 800f4bc:	60a3      	str	r3, [r4, #8]
 800f4be:	b125      	cbz	r5, 800f4ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 800f4c0:	462a      	mov	r2, r5
 800f4c2:	6831      	ldr	r1, [r6, #0]
 800f4c4:	6820      	ldr	r0, [r4, #0]
 800f4c6:	f7ff ffbf 	bl	800f448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	6823      	ldr	r3, [r4, #0]
 800f4ce:	6065      	str	r5, [r4, #4]
 800f4d0:	555a      	strb	r2, [r3, r5]
 800f4d2:	b003      	add	sp, #12
 800f4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f4d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800f4d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4da:	4616      	mov	r6, r2
 800f4dc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800f4e0:	6842      	ldr	r2, [r0, #4]
 800f4e2:	469a      	mov	sl, r3
 800f4e4:	eba8 0306 	sub.w	r3, r8, r6
 800f4e8:	1a57      	subs	r7, r2, r1
 800f4ea:	4413      	add	r3, r2
 800f4ec:	6802      	ldr	r2, [r0, #0]
 800f4ee:	9301      	str	r3, [sp, #4]
 800f4f0:	f100 0308 	add.w	r3, r0, #8
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	460d      	mov	r5, r1
 800f4f8:	bf14      	ite	ne
 800f4fa:	6882      	ldrne	r2, [r0, #8]
 800f4fc:	220f      	moveq	r2, #15
 800f4fe:	a901      	add	r1, sp, #4
 800f500:	4604      	mov	r4, r0
 800f502:	f7ff ff59 	bl	800f3b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800f506:	1bbf      	subs	r7, r7, r6
 800f508:	4681      	mov	r9, r0
 800f50a:	b11d      	cbz	r5, 800f514 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800f50c:	462a      	mov	r2, r5
 800f50e:	6821      	ldr	r1, [r4, #0]
 800f510:	f7ff ff9a 	bl	800f448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f514:	f1ba 0f00 	cmp.w	sl, #0
 800f518:	d008      	beq.n	800f52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800f51a:	f1b8 0f00 	cmp.w	r8, #0
 800f51e:	d005      	beq.n	800f52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800f520:	4642      	mov	r2, r8
 800f522:	4651      	mov	r1, sl
 800f524:	eb09 0005 	add.w	r0, r9, r5
 800f528:	f7ff ff8e 	bl	800f448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f52c:	b147      	cbz	r7, 800f540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800f52e:	6821      	ldr	r1, [r4, #0]
 800f530:	442e      	add	r6, r5
 800f532:	eb05 0008 	add.w	r0, r5, r8
 800f536:	463a      	mov	r2, r7
 800f538:	4431      	add	r1, r6
 800f53a:	4448      	add	r0, r9
 800f53c:	f7ff ff84 	bl	800f448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f540:	4620      	mov	r0, r4
 800f542:	f7ff ff53 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800f546:	9b01      	ldr	r3, [sp, #4]
 800f548:	f8c4 9000 	str.w	r9, [r4]
 800f54c:	60a3      	str	r3, [r4, #8]
 800f54e:	b002      	add	sp, #8
 800f550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800f554:	f100 0208 	add.w	r2, r0, #8
 800f558:	6002      	str	r2, [r0, #0]
 800f55a:	2200      	movs	r2, #0
 800f55c:	6042      	str	r2, [r0, #4]
 800f55e:	7202      	strb	r2, [r0, #8]
 800f560:	4770      	bx	lr

0800f562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800f562:	b570      	push	{r4, r5, r6, lr}
 800f564:	4604      	mov	r4, r0
 800f566:	460e      	mov	r6, r1
 800f568:	3008      	adds	r0, #8
 800f56a:	6020      	str	r0, [r4, #0]
 800f56c:	f856 3b08 	ldr.w	r3, [r6], #8
 800f570:	460d      	mov	r5, r1
 800f572:	429e      	cmp	r6, r3
 800f574:	d10b      	bne.n	800f58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800f576:	2210      	movs	r2, #16
 800f578:	4631      	mov	r1, r6
 800f57a:	f7ff ff0c 	bl	800f396 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800f57e:	686b      	ldr	r3, [r5, #4]
 800f580:	4620      	mov	r0, r4
 800f582:	6063      	str	r3, [r4, #4]
 800f584:	2300      	movs	r3, #0
 800f586:	602e      	str	r6, [r5, #0]
 800f588:	606b      	str	r3, [r5, #4]
 800f58a:	722b      	strb	r3, [r5, #8]
 800f58c:	bd70      	pop	{r4, r5, r6, pc}
 800f58e:	6023      	str	r3, [r4, #0]
 800f590:	688b      	ldr	r3, [r1, #8]
 800f592:	60a3      	str	r3, [r4, #8]
 800f594:	e7f3      	b.n	800f57e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800f596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800f596:	b510      	push	{r4, lr}
 800f598:	4604      	mov	r4, r0
 800f59a:	f7ff ff27 	bl	800f3ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800f59e:	4620      	mov	r0, r4
 800f5a0:	bd10      	pop	{r4, pc}

0800f5a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800f5a2:	b510      	push	{r4, lr}
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	f7ff ff6e 	bl	800f486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	bd10      	pop	{r4, pc}

0800f5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800f5ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	4606      	mov	r6, r0
 800f5b4:	f853 7b08 	ldr.w	r7, [r3], #8
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	42bb      	cmp	r3, r7
 800f5bc:	460c      	mov	r4, r1
 800f5be:	f856 2b08 	ldr.w	r2, [r6], #8
 800f5c2:	d016      	beq.n	800f5f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 800f5c4:	4296      	cmp	r6, r2
 800f5c6:	bf08      	it	eq
 800f5c8:	2200      	moveq	r2, #0
 800f5ca:	6007      	str	r7, [r0, #0]
 800f5cc:	6849      	ldr	r1, [r1, #4]
 800f5ce:	bf18      	it	ne
 800f5d0:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 800f5d4:	6041      	str	r1, [r0, #4]
 800f5d6:	68a1      	ldr	r1, [r4, #8]
 800f5d8:	6081      	str	r1, [r0, #8]
 800f5da:	b142      	cbz	r2, 800f5ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 800f5dc:	6022      	str	r2, [r4, #0]
 800f5de:	f8c4 c008 	str.w	ip, [r4, #8]
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	6822      	ldr	r2, [r4, #0]
 800f5e6:	6063      	str	r3, [r4, #4]
 800f5e8:	7013      	strb	r3, [r2, #0]
 800f5ea:	4628      	mov	r0, r5
 800f5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5ee:	6023      	str	r3, [r4, #0]
 800f5f0:	e7f7      	b.n	800f5e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 800f5f2:	f7ff ff48 	bl	800f486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800f5f6:	e7f4      	b.n	800f5e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

0800f5f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800f5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5fc:	4614      	mov	r4, r2
 800f5fe:	4681      	mov	r9, r0
 800f600:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f602:	460f      	mov	r7, r1
 800f604:	462a      	mov	r2, r5
 800f606:	4698      	mov	r8, r3
 800f608:	4621      	mov	r1, r4
 800f60a:	4b37      	ldr	r3, [pc, #220]	; (800f6e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 800f60c:	f7ff ff04 	bl	800f418 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800f610:	464a      	mov	r2, r9
 800f612:	f852 6b08 	ldr.w	r6, [r2], #8
 800f616:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f61a:	4296      	cmp	r6, r2
 800f61c:	bf08      	it	eq
 800f61e:	220f      	moveq	r2, #15
 800f620:	eba5 0b04 	sub.w	fp, r5, r4
 800f624:	bf18      	it	ne
 800f626:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 800f62a:	eb03 0a0b 	add.w	sl, r3, fp
 800f62e:	4552      	cmp	r2, sl
 800f630:	d34e      	bcc.n	800f6d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 800f632:	443e      	add	r6, r7
 800f634:	4641      	mov	r1, r8
 800f636:	1bdf      	subs	r7, r3, r7
 800f638:	4648      	mov	r0, r9
 800f63a:	1b3f      	subs	r7, r7, r4
 800f63c:	f7ff fef8 	bl	800f430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800f640:	b170      	cbz	r0, 800f660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800f642:	b137      	cbz	r7, 800f652 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800f644:	42ac      	cmp	r4, r5
 800f646:	d004      	beq.n	800f652 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800f648:	463a      	mov	r2, r7
 800f64a:	1931      	adds	r1, r6, r4
 800f64c:	1970      	adds	r0, r6, r5
 800f64e:	f7ff ff04 	bl	800f45a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800f652:	b30d      	cbz	r5, 800f698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800f654:	462a      	mov	r2, r5
 800f656:	4641      	mov	r1, r8
 800f658:	4630      	mov	r0, r6
 800f65a:	f7ff fef5 	bl	800f448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f65e:	e01b      	b.n	800f698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800f660:	b135      	cbz	r5, 800f670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 800f662:	42ac      	cmp	r4, r5
 800f664:	d33c      	bcc.n	800f6e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 800f666:	462a      	mov	r2, r5
 800f668:	4641      	mov	r1, r8
 800f66a:	4630      	mov	r0, r6
 800f66c:	f7ff fef5 	bl	800f45a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800f670:	b197      	cbz	r7, 800f698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800f672:	42ac      	cmp	r4, r5
 800f674:	d010      	beq.n	800f698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800f676:	463a      	mov	r2, r7
 800f678:	1931      	adds	r1, r6, r4
 800f67a:	1970      	adds	r0, r6, r5
 800f67c:	f7ff feed 	bl	800f45a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800f680:	42ac      	cmp	r4, r5
 800f682:	d209      	bcs.n	800f698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800f684:	4434      	add	r4, r6
 800f686:	eb08 0305 	add.w	r3, r8, r5
 800f68a:	429c      	cmp	r4, r3
 800f68c:	d30f      	bcc.n	800f6ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 800f68e:	462a      	mov	r2, r5
 800f690:	4641      	mov	r1, r8
 800f692:	4630      	mov	r0, r6
 800f694:	f7ff fee1 	bl	800f45a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800f698:	2200      	movs	r2, #0
 800f69a:	4648      	mov	r0, r9
 800f69c:	f8d9 3000 	ldr.w	r3, [r9]
 800f6a0:	f8c9 a004 	str.w	sl, [r9, #4]
 800f6a4:	f803 200a 	strb.w	r2, [r3, sl]
 800f6a8:	b003      	add	sp, #12
 800f6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ae:	4544      	cmp	r4, r8
 800f6b0:	d803      	bhi.n	800f6ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800f6b2:	462a      	mov	r2, r5
 800f6b4:	eb08 010b 	add.w	r1, r8, fp
 800f6b8:	e7ce      	b.n	800f658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800f6ba:	eba4 0408 	sub.w	r4, r4, r8
 800f6be:	4622      	mov	r2, r4
 800f6c0:	4641      	mov	r1, r8
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	f7ff fec9 	bl	800f45a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800f6c8:	1b2a      	subs	r2, r5, r4
 800f6ca:	1971      	adds	r1, r6, r5
 800f6cc:	1930      	adds	r0, r6, r4
 800f6ce:	e7c4      	b.n	800f65a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 800f6d0:	9500      	str	r5, [sp, #0]
 800f6d2:	4643      	mov	r3, r8
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	4639      	mov	r1, r7
 800f6d8:	4648      	mov	r0, r9
 800f6da:	f7ff fefc 	bl	800f4d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800f6de:	e7db      	b.n	800f698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800f6e0:	2f00      	cmp	r7, #0
 800f6e2:	d0cf      	beq.n	800f684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 800f6e4:	e7c7      	b.n	800f676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800f6e6:	bf00      	nop
 800f6e8:	0801361f 	.word	0x0801361f

0800f6ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800f6ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	4608      	mov	r0, r1
 800f6f2:	460d      	mov	r5, r1
 800f6f4:	f7f0 fd2c 	bl	8000150 <strlen>
 800f6f8:	462b      	mov	r3, r5
 800f6fa:	9000      	str	r0, [sp, #0]
 800f6fc:	6862      	ldr	r2, [r4, #4]
 800f6fe:	2100      	movs	r1, #0
 800f700:	4620      	mov	r0, r4
 800f702:	f7ff ff79 	bl	800f5f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800f706:	b003      	add	sp, #12
 800f708:	bd30      	pop	{r4, r5, pc}

0800f70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800f70a:	b508      	push	{r3, lr}
 800f70c:	f7ff ffee 	bl	800f6ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800f710:	bd08      	pop	{r3, pc}
	...

0800f714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 800f714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f716:	4604      	mov	r4, r0
 800f718:	460f      	mov	r7, r1
 800f71a:	4615      	mov	r5, r2
 800f71c:	4a08      	ldr	r2, [pc, #32]	; (800f740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 800f71e:	461e      	mov	r6, r3
 800f720:	f7ff fe6c 	bl	800f3fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800f724:	6862      	ldr	r2, [r4, #4]
 800f726:	9b08      	ldr	r3, [sp, #32]
 800f728:	1bd2      	subs	r2, r2, r7
 800f72a:	42aa      	cmp	r2, r5
 800f72c:	9300      	str	r3, [sp, #0]
 800f72e:	4601      	mov	r1, r0
 800f730:	4633      	mov	r3, r6
 800f732:	bf28      	it	cs
 800f734:	462a      	movcs	r2, r5
 800f736:	4620      	mov	r0, r4
 800f738:	f7ff ff5e 	bl	800f5f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800f73c:	b003      	add	sp, #12
 800f73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f740:	08013677 	.word	0x08013677

0800f744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 800f744:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f746:	4605      	mov	r5, r0
 800f748:	4610      	mov	r0, r2
 800f74a:	4614      	mov	r4, r2
 800f74c:	460e      	mov	r6, r1
 800f74e:	f7f0 fcff 	bl	8000150 <strlen>
 800f752:	4623      	mov	r3, r4
 800f754:	9000      	str	r0, [sp, #0]
 800f756:	2200      	movs	r2, #0
 800f758:	4631      	mov	r1, r6
 800f75a:	4628      	mov	r0, r5
 800f75c:	f7ff ffda 	bl	800f714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800f760:	b002      	add	sp, #8
 800f762:	bd70      	pop	{r4, r5, r6, pc}

0800f764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800f764:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f766:	4604      	mov	r4, r0
 800f768:	4626      	mov	r6, r4
 800f76a:	f856 3b08 	ldr.w	r3, [r6], #8
 800f76e:	6840      	ldr	r0, [r0, #4]
 800f770:	42b3      	cmp	r3, r6
 800f772:	bf0c      	ite	eq
 800f774:	260f      	moveq	r6, #15
 800f776:	68a6      	ldrne	r6, [r4, #8]
 800f778:	1885      	adds	r5, r0, r2
 800f77a:	42b5      	cmp	r5, r6
 800f77c:	d80a      	bhi.n	800f794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 800f77e:	b112      	cbz	r2, 800f786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 800f780:	4418      	add	r0, r3
 800f782:	f7ff fe61 	bl	800f448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800f786:	2200      	movs	r2, #0
 800f788:	4620      	mov	r0, r4
 800f78a:	6823      	ldr	r3, [r4, #0]
 800f78c:	6065      	str	r5, [r4, #4]
 800f78e:	555a      	strb	r2, [r3, r5]
 800f790:	b002      	add	sp, #8
 800f792:	bd70      	pop	{r4, r5, r6, pc}
 800f794:	9200      	str	r2, [sp, #0]
 800f796:	460b      	mov	r3, r1
 800f798:	2200      	movs	r2, #0
 800f79a:	4601      	mov	r1, r0
 800f79c:	4620      	mov	r0, r4
 800f79e:	f7ff fe9a 	bl	800f4d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800f7a2:	e7f0      	b.n	800f786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

0800f7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800f7a4:	b508      	push	{r3, lr}
 800f7a6:	e9d1 1200 	ldrd	r1, r2, [r1]
 800f7aa:	f7ff ffdb 	bl	800f764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800f7ae:	bd08      	pop	{r3, pc}

0800f7b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800f7b0:	b570      	push	{r4, r5, r6, lr}
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	4608      	mov	r0, r1
 800f7b6:	460d      	mov	r5, r1
 800f7b8:	f7f0 fcca 	bl	8000150 <strlen>
 800f7bc:	4606      	mov	r6, r0
 800f7be:	4602      	mov	r2, r0
 800f7c0:	4b05      	ldr	r3, [pc, #20]	; (800f7d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	f7ff fe27 	bl	800f418 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800f7ca:	4632      	mov	r2, r6
 800f7cc:	4629      	mov	r1, r5
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	f7ff ffc8 	bl	800f764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800f7d4:	bd70      	pop	{r4, r5, r6, pc}
 800f7d6:	bf00      	nop
 800f7d8:	08013662 	.word	0x08013662

0800f7dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800f7dc:	6800      	ldr	r0, [r0, #0]
 800f7de:	4770      	bx	lr

0800f7e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 800f7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e2:	4606      	mov	r6, r0
 800f7e4:	6845      	ldr	r5, [r0, #4]
 800f7e6:	4608      	mov	r0, r1
 800f7e8:	460f      	mov	r7, r1
 800f7ea:	f7f0 fcb1 	bl	8000150 <strlen>
 800f7ee:	4285      	cmp	r5, r0
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	462a      	mov	r2, r5
 800f7f4:	4639      	mov	r1, r7
 800f7f6:	bf28      	it	cs
 800f7f8:	4602      	movcs	r2, r0
 800f7fa:	6830      	ldr	r0, [r6, #0]
 800f7fc:	f7ff fdc6 	bl	800f38c <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800f800:	b900      	cbnz	r0, 800f804 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 800f802:	1b28      	subs	r0, r5, r4
 800f804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800f806:	6001      	str	r1, [r0, #0]
 800f808:	4770      	bx	lr

0800f80a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800f80a:	b510      	push	{r4, lr}
 800f80c:	4604      	mov	r4, r0
 800f80e:	f100 0208 	add.w	r2, r0, #8
 800f812:	6002      	str	r2, [r0, #0]
 800f814:	e9d1 1200 	ldrd	r1, r2, [r1]
 800f818:	f04f 0300 	mov.w	r3, #0
 800f81c:	440a      	add	r2, r1
 800f81e:	f7f4 fc23 	bl	8004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800f822:	4620      	mov	r0, r4
 800f824:	bd10      	pop	{r4, pc}
	...

0800f828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800f828:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f82a:	4604      	mov	r4, r0
 800f82c:	4616      	mov	r6, r2
 800f82e:	460d      	mov	r5, r1
 800f830:	b919      	cbnz	r1, 800f83a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800f832:	b112      	cbz	r2, 800f83a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800f834:	480d      	ldr	r0, [pc, #52]	; (800f86c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800f836:	f7ff fd88 	bl	800f34a <_ZSt19__throw_logic_errorPKc>
 800f83a:	1b73      	subs	r3, r6, r5
 800f83c:	2b0f      	cmp	r3, #15
 800f83e:	9301      	str	r3, [sp, #4]
 800f840:	d907      	bls.n	800f852 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800f842:	2200      	movs	r2, #0
 800f844:	a901      	add	r1, sp, #4
 800f846:	4620      	mov	r0, r4
 800f848:	f7ff fdb6 	bl	800f3b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800f84c:	9b01      	ldr	r3, [sp, #4]
 800f84e:	6020      	str	r0, [r4, #0]
 800f850:	60a3      	str	r3, [r4, #8]
 800f852:	4632      	mov	r2, r6
 800f854:	4629      	mov	r1, r5
 800f856:	6820      	ldr	r0, [r4, #0]
 800f858:	f7ff fe10 	bl	800f47c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800f85c:	2100      	movs	r1, #0
 800f85e:	9b01      	ldr	r3, [sp, #4]
 800f860:	6822      	ldr	r2, [r4, #0]
 800f862:	6063      	str	r3, [r4, #4]
 800f864:	54d1      	strb	r1, [r2, r3]
 800f866:	b002      	add	sp, #8
 800f868:	bd70      	pop	{r4, r5, r6, pc}
 800f86a:	bf00      	nop
 800f86c:	08013638 	.word	0x08013638

0800f870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800f870:	b538      	push	{r3, r4, r5, lr}
 800f872:	f100 0308 	add.w	r3, r0, #8
 800f876:	4604      	mov	r4, r0
 800f878:	6003      	str	r3, [r0, #0]
 800f87a:	460d      	mov	r5, r1
 800f87c:	b159      	cbz	r1, 800f896 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800f87e:	4608      	mov	r0, r1
 800f880:	f7f0 fc66 	bl	8000150 <strlen>
 800f884:	182a      	adds	r2, r5, r0
 800f886:	4620      	mov	r0, r4
 800f888:	f04f 0300 	mov.w	r3, #0
 800f88c:	4629      	mov	r1, r5
 800f88e:	f7ff ffcb 	bl	800f828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800f892:	4620      	mov	r0, r4
 800f894:	bd38      	pop	{r3, r4, r5, pc}
 800f896:	f04f 32ff 	mov.w	r2, #4294967295
 800f89a:	e7f4      	b.n	800f886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800f89c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b09c      	sub	sp, #112	; 0x70
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	1a0e      	subs	r6, r1, r0
 800f8a4:	4680      	mov	r8, r0
 800f8a6:	2269      	movs	r2, #105	; 0x69
 800f8a8:	490e      	ldr	r1, [pc, #56]	; (800f8e4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800f8aa:	1d38      	adds	r0, r7, #4
 800f8ac:	f000 f909 	bl	800fac2 <memcpy>
 800f8b0:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800f8b4:	f023 0307 	bic.w	r3, r3, #7
 800f8b8:	ebad 0d03 	sub.w	sp, sp, r3
 800f8bc:	466c      	mov	r4, sp
 800f8be:	2268      	movs	r2, #104	; 0x68
 800f8c0:	1d39      	adds	r1, r7, #4
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f000 f8fd 	bl	800fac2 <memcpy>
 800f8c8:	4632      	mov	r2, r6
 800f8ca:	4641      	mov	r1, r8
 800f8cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f8d0:	f000 f8f7 	bl	800fac2 <memcpy>
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	1c75      	adds	r5, r6, #1
 800f8d8:	4425      	add	r5, r4
 800f8da:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 800f8de:	4620      	mov	r0, r4
 800f8e0:	f7ff fd33 	bl	800f34a <_ZSt19__throw_logic_errorPKc>
 800f8e4:	080136b0 	.word	0x080136b0

0800f8e8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800f8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	b086      	sub	sp, #24
 800f8ee:	466d      	mov	r5, sp
 800f8f0:	f105 040c 	add.w	r4, r5, #12
 800f8f4:	4623      	mov	r3, r4
 800f8f6:	f04f 0c0a 	mov.w	ip, #10
 800f8fa:	f8df e038 	ldr.w	lr, [pc, #56]	; 800f934 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800f8fe:	fbb2 f6fc 	udiv	r6, r2, ip
 800f902:	fb0c 2216 	mls	r2, ip, r6, r2
 800f906:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800f90a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800f90e:	4632      	mov	r2, r6
 800f910:	2e00      	cmp	r6, #0
 800f912:	d1f4      	bne.n	800f8fe <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 800f914:	1ae4      	subs	r4, r4, r3
 800f916:	428c      	cmp	r4, r1
 800f918:	d808      	bhi.n	800f92c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800f91a:	f1c4 010c 	rsb	r1, r4, #12
 800f91e:	4622      	mov	r2, r4
 800f920:	4429      	add	r1, r5
 800f922:	f000 f8ce 	bl	800fac2 <memcpy>
 800f926:	4620      	mov	r0, r4
 800f928:	46bd      	mov	sp, r7
 800f92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f92c:	f04f 34ff 	mov.w	r4, #4294967295
 800f930:	e7f9      	b.n	800f926 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 800f932:	bf00      	nop
 800f934:	080136a5 	.word	0x080136a5

0800f938 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800f938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f93c:	4606      	mov	r6, r0
 800f93e:	4615      	mov	r5, r2
 800f940:	4604      	mov	r4, r0
 800f942:	3901      	subs	r1, #1
 800f944:	1847      	adds	r7, r0, r1
 800f946:	782a      	ldrb	r2, [r5, #0]
 800f948:	b39a      	cbz	r2, 800f9b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 800f94a:	42bc      	cmp	r4, r7
 800f94c:	d22d      	bcs.n	800f9aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 800f94e:	2a25      	cmp	r2, #37	; 0x25
 800f950:	d107      	bne.n	800f962 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800f952:	786a      	ldrb	r2, [r5, #1]
 800f954:	2a73      	cmp	r2, #115	; 0x73
 800f956:	d00a      	beq.n	800f96e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800f958:	2a7a      	cmp	r2, #122	; 0x7a
 800f95a:	d013      	beq.n	800f984 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800f95c:	2a25      	cmp	r2, #37	; 0x25
 800f95e:	d100      	bne.n	800f962 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800f960:	3501      	adds	r5, #1
 800f962:	782a      	ldrb	r2, [r5, #0]
 800f964:	3401      	adds	r4, #1
 800f966:	f804 2c01 	strb.w	r2, [r4, #-1]
 800f96a:	3501      	adds	r5, #1
 800f96c:	e7eb      	b.n	800f946 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800f96e:	1d19      	adds	r1, r3, #4
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	3b01      	subs	r3, #1
 800f974:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800f978:	b1a2      	cbz	r2, 800f9a4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 800f97a:	42bc      	cmp	r4, r7
 800f97c:	d015      	beq.n	800f9aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 800f97e:	f804 2b01 	strb.w	r2, [r4], #1
 800f982:	e7f7      	b.n	800f974 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800f984:	78aa      	ldrb	r2, [r5, #2]
 800f986:	2a75      	cmp	r2, #117	; 0x75
 800f988:	d1eb      	bne.n	800f962 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	1b39      	subs	r1, r7, r4
 800f98e:	4620      	mov	r0, r4
 800f990:	f103 0804 	add.w	r8, r3, #4
 800f994:	f7ff ffa8 	bl	800f8e8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800f998:	2800      	cmp	r0, #0
 800f99a:	dd06      	ble.n	800f9aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 800f99c:	4404      	add	r4, r0
 800f99e:	3503      	adds	r5, #3
 800f9a0:	4643      	mov	r3, r8
 800f9a2:	e7d0      	b.n	800f946 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800f9a4:	3502      	adds	r5, #2
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	e7cd      	b.n	800f946 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800f9aa:	4621      	mov	r1, r4
 800f9ac:	4630      	mov	r0, r6
 800f9ae:	f7ff ff75 	bl	800f89c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800f9b2:	7022      	strb	r2, [r4, #0]
 800f9b4:	1ba0      	subs	r0, r4, r6
 800f9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f9bc <roundf>:
 800f9bc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f9c0:	3b7f      	subs	r3, #127	; 0x7f
 800f9c2:	2b16      	cmp	r3, #22
 800f9c4:	b510      	push	{r4, lr}
 800f9c6:	4601      	mov	r1, r0
 800f9c8:	dc14      	bgt.n	800f9f4 <roundf+0x38>
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	da07      	bge.n	800f9de <roundf+0x22>
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800f9d4:	d101      	bne.n	800f9da <roundf+0x1e>
 800f9d6:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800f9da:	4608      	mov	r0, r1
 800f9dc:	bd10      	pop	{r4, pc}
 800f9de:	4a08      	ldr	r2, [pc, #32]	; (800fa00 <roundf+0x44>)
 800f9e0:	411a      	asrs	r2, r3
 800f9e2:	4210      	tst	r0, r2
 800f9e4:	d0f9      	beq.n	800f9da <roundf+0x1e>
 800f9e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f9ea:	4119      	asrs	r1, r3
 800f9ec:	4401      	add	r1, r0
 800f9ee:	ea21 0102 	bic.w	r1, r1, r2
 800f9f2:	e7f2      	b.n	800f9da <roundf+0x1e>
 800f9f4:	2b80      	cmp	r3, #128	; 0x80
 800f9f6:	d1f0      	bne.n	800f9da <roundf+0x1e>
 800f9f8:	f7f0 ffd6 	bl	80009a8 <__addsf3>
 800f9fc:	4601      	mov	r1, r0
 800f9fe:	e7ec      	b.n	800f9da <roundf+0x1e>
 800fa00:	007fffff 	.word	0x007fffff

0800fa04 <abort>:
 800fa04:	b508      	push	{r3, lr}
 800fa06:	2006      	movs	r0, #6
 800fa08:	f000 f966 	bl	800fcd8 <raise>
 800fa0c:	2001      	movs	r0, #1
 800fa0e:	f7fa fbac 	bl	800a16a <_exit>
	...

0800fa14 <__errno>:
 800fa14:	4b01      	ldr	r3, [pc, #4]	; (800fa1c <__errno+0x8>)
 800fa16:	6818      	ldr	r0, [r3, #0]
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	200000a8 	.word	0x200000a8

0800fa20 <__libc_init_array>:
 800fa20:	b570      	push	{r4, r5, r6, lr}
 800fa22:	2500      	movs	r5, #0
 800fa24:	4e0c      	ldr	r6, [pc, #48]	; (800fa58 <__libc_init_array+0x38>)
 800fa26:	4c0d      	ldr	r4, [pc, #52]	; (800fa5c <__libc_init_array+0x3c>)
 800fa28:	1ba4      	subs	r4, r4, r6
 800fa2a:	10a4      	asrs	r4, r4, #2
 800fa2c:	42a5      	cmp	r5, r4
 800fa2e:	d109      	bne.n	800fa44 <__libc_init_array+0x24>
 800fa30:	f000 fcb2 	bl	8010398 <_init>
 800fa34:	2500      	movs	r5, #0
 800fa36:	4e0a      	ldr	r6, [pc, #40]	; (800fa60 <__libc_init_array+0x40>)
 800fa38:	4c0a      	ldr	r4, [pc, #40]	; (800fa64 <__libc_init_array+0x44>)
 800fa3a:	1ba4      	subs	r4, r4, r6
 800fa3c:	10a4      	asrs	r4, r4, #2
 800fa3e:	42a5      	cmp	r5, r4
 800fa40:	d105      	bne.n	800fa4e <__libc_init_array+0x2e>
 800fa42:	bd70      	pop	{r4, r5, r6, pc}
 800fa44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fa48:	4798      	blx	r3
 800fa4a:	3501      	adds	r5, #1
 800fa4c:	e7ee      	b.n	800fa2c <__libc_init_array+0xc>
 800fa4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fa52:	4798      	blx	r3
 800fa54:	3501      	adds	r5, #1
 800fa56:	e7f2      	b.n	800fa3e <__libc_init_array+0x1e>
 800fa58:	080137b0 	.word	0x080137b0
 800fa5c:	080137b0 	.word	0x080137b0
 800fa60:	080137b0 	.word	0x080137b0
 800fa64:	080137b4 	.word	0x080137b4

0800fa68 <malloc>:
 800fa68:	4b02      	ldr	r3, [pc, #8]	; (800fa74 <malloc+0xc>)
 800fa6a:	4601      	mov	r1, r0
 800fa6c:	6818      	ldr	r0, [r3, #0]
 800fa6e:	f000 b8a1 	b.w	800fbb4 <_malloc_r>
 800fa72:	bf00      	nop
 800fa74:	200000a8 	.word	0x200000a8

0800fa78 <free>:
 800fa78:	4b02      	ldr	r3, [pc, #8]	; (800fa84 <free+0xc>)
 800fa7a:	4601      	mov	r1, r0
 800fa7c:	6818      	ldr	r0, [r3, #0]
 800fa7e:	f000 b84d 	b.w	800fb1c <_free_r>
 800fa82:	bf00      	nop
 800fa84:	200000a8 	.word	0x200000a8

0800fa88 <memchr>:
 800fa88:	b510      	push	{r4, lr}
 800fa8a:	b2c9      	uxtb	r1, r1
 800fa8c:	4402      	add	r2, r0
 800fa8e:	4290      	cmp	r0, r2
 800fa90:	4603      	mov	r3, r0
 800fa92:	d101      	bne.n	800fa98 <memchr+0x10>
 800fa94:	2300      	movs	r3, #0
 800fa96:	e003      	b.n	800faa0 <memchr+0x18>
 800fa98:	781c      	ldrb	r4, [r3, #0]
 800fa9a:	3001      	adds	r0, #1
 800fa9c:	428c      	cmp	r4, r1
 800fa9e:	d1f6      	bne.n	800fa8e <memchr+0x6>
 800faa0:	4618      	mov	r0, r3
 800faa2:	bd10      	pop	{r4, pc}

0800faa4 <memcmp>:
 800faa4:	b530      	push	{r4, r5, lr}
 800faa6:	2400      	movs	r4, #0
 800faa8:	42a2      	cmp	r2, r4
 800faaa:	d101      	bne.n	800fab0 <memcmp+0xc>
 800faac:	2000      	movs	r0, #0
 800faae:	e007      	b.n	800fac0 <memcmp+0x1c>
 800fab0:	5d03      	ldrb	r3, [r0, r4]
 800fab2:	3401      	adds	r4, #1
 800fab4:	190d      	adds	r5, r1, r4
 800fab6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800faba:	42ab      	cmp	r3, r5
 800fabc:	d0f4      	beq.n	800faa8 <memcmp+0x4>
 800fabe:	1b58      	subs	r0, r3, r5
 800fac0:	bd30      	pop	{r4, r5, pc}

0800fac2 <memcpy>:
 800fac2:	b510      	push	{r4, lr}
 800fac4:	1e43      	subs	r3, r0, #1
 800fac6:	440a      	add	r2, r1
 800fac8:	4291      	cmp	r1, r2
 800faca:	d100      	bne.n	800face <memcpy+0xc>
 800facc:	bd10      	pop	{r4, pc}
 800face:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fad6:	e7f7      	b.n	800fac8 <memcpy+0x6>

0800fad8 <memmove>:
 800fad8:	4288      	cmp	r0, r1
 800fada:	b510      	push	{r4, lr}
 800fadc:	eb01 0302 	add.w	r3, r1, r2
 800fae0:	d807      	bhi.n	800faf2 <memmove+0x1a>
 800fae2:	1e42      	subs	r2, r0, #1
 800fae4:	4299      	cmp	r1, r3
 800fae6:	d00a      	beq.n	800fafe <memmove+0x26>
 800fae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800faec:	f802 4f01 	strb.w	r4, [r2, #1]!
 800faf0:	e7f8      	b.n	800fae4 <memmove+0xc>
 800faf2:	4283      	cmp	r3, r0
 800faf4:	d9f5      	bls.n	800fae2 <memmove+0xa>
 800faf6:	1881      	adds	r1, r0, r2
 800faf8:	1ad2      	subs	r2, r2, r3
 800fafa:	42d3      	cmn	r3, r2
 800fafc:	d100      	bne.n	800fb00 <memmove+0x28>
 800fafe:	bd10      	pop	{r4, pc}
 800fb00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fb08:	e7f7      	b.n	800fafa <memmove+0x22>

0800fb0a <memset>:
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	4402      	add	r2, r0
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d100      	bne.n	800fb14 <memset+0xa>
 800fb12:	4770      	bx	lr
 800fb14:	f803 1b01 	strb.w	r1, [r3], #1
 800fb18:	e7f9      	b.n	800fb0e <memset+0x4>
	...

0800fb1c <_free_r>:
 800fb1c:	b538      	push	{r3, r4, r5, lr}
 800fb1e:	4605      	mov	r5, r0
 800fb20:	2900      	cmp	r1, #0
 800fb22:	d043      	beq.n	800fbac <_free_r+0x90>
 800fb24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb28:	1f0c      	subs	r4, r1, #4
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	bfb8      	it	lt
 800fb2e:	18e4      	addlt	r4, r4, r3
 800fb30:	f000 f928 	bl	800fd84 <__malloc_lock>
 800fb34:	4a1e      	ldr	r2, [pc, #120]	; (800fbb0 <_free_r+0x94>)
 800fb36:	6813      	ldr	r3, [r2, #0]
 800fb38:	4610      	mov	r0, r2
 800fb3a:	b933      	cbnz	r3, 800fb4a <_free_r+0x2e>
 800fb3c:	6063      	str	r3, [r4, #4]
 800fb3e:	6014      	str	r4, [r2, #0]
 800fb40:	4628      	mov	r0, r5
 800fb42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb46:	f000 b91e 	b.w	800fd86 <__malloc_unlock>
 800fb4a:	42a3      	cmp	r3, r4
 800fb4c:	d90b      	bls.n	800fb66 <_free_r+0x4a>
 800fb4e:	6821      	ldr	r1, [r4, #0]
 800fb50:	1862      	adds	r2, r4, r1
 800fb52:	4293      	cmp	r3, r2
 800fb54:	bf01      	itttt	eq
 800fb56:	681a      	ldreq	r2, [r3, #0]
 800fb58:	685b      	ldreq	r3, [r3, #4]
 800fb5a:	1852      	addeq	r2, r2, r1
 800fb5c:	6022      	streq	r2, [r4, #0]
 800fb5e:	6063      	str	r3, [r4, #4]
 800fb60:	6004      	str	r4, [r0, #0]
 800fb62:	e7ed      	b.n	800fb40 <_free_r+0x24>
 800fb64:	4613      	mov	r3, r2
 800fb66:	685a      	ldr	r2, [r3, #4]
 800fb68:	b10a      	cbz	r2, 800fb6e <_free_r+0x52>
 800fb6a:	42a2      	cmp	r2, r4
 800fb6c:	d9fa      	bls.n	800fb64 <_free_r+0x48>
 800fb6e:	6819      	ldr	r1, [r3, #0]
 800fb70:	1858      	adds	r0, r3, r1
 800fb72:	42a0      	cmp	r0, r4
 800fb74:	d10b      	bne.n	800fb8e <_free_r+0x72>
 800fb76:	6820      	ldr	r0, [r4, #0]
 800fb78:	4401      	add	r1, r0
 800fb7a:	1858      	adds	r0, r3, r1
 800fb7c:	4282      	cmp	r2, r0
 800fb7e:	6019      	str	r1, [r3, #0]
 800fb80:	d1de      	bne.n	800fb40 <_free_r+0x24>
 800fb82:	6810      	ldr	r0, [r2, #0]
 800fb84:	6852      	ldr	r2, [r2, #4]
 800fb86:	4401      	add	r1, r0
 800fb88:	6019      	str	r1, [r3, #0]
 800fb8a:	605a      	str	r2, [r3, #4]
 800fb8c:	e7d8      	b.n	800fb40 <_free_r+0x24>
 800fb8e:	d902      	bls.n	800fb96 <_free_r+0x7a>
 800fb90:	230c      	movs	r3, #12
 800fb92:	602b      	str	r3, [r5, #0]
 800fb94:	e7d4      	b.n	800fb40 <_free_r+0x24>
 800fb96:	6820      	ldr	r0, [r4, #0]
 800fb98:	1821      	adds	r1, r4, r0
 800fb9a:	428a      	cmp	r2, r1
 800fb9c:	bf01      	itttt	eq
 800fb9e:	6811      	ldreq	r1, [r2, #0]
 800fba0:	6852      	ldreq	r2, [r2, #4]
 800fba2:	1809      	addeq	r1, r1, r0
 800fba4:	6021      	streq	r1, [r4, #0]
 800fba6:	6062      	str	r2, [r4, #4]
 800fba8:	605c      	str	r4, [r3, #4]
 800fbaa:	e7c9      	b.n	800fb40 <_free_r+0x24>
 800fbac:	bd38      	pop	{r3, r4, r5, pc}
 800fbae:	bf00      	nop
 800fbb0:	20000538 	.word	0x20000538

0800fbb4 <_malloc_r>:
 800fbb4:	b570      	push	{r4, r5, r6, lr}
 800fbb6:	1ccd      	adds	r5, r1, #3
 800fbb8:	f025 0503 	bic.w	r5, r5, #3
 800fbbc:	3508      	adds	r5, #8
 800fbbe:	2d0c      	cmp	r5, #12
 800fbc0:	bf38      	it	cc
 800fbc2:	250c      	movcc	r5, #12
 800fbc4:	2d00      	cmp	r5, #0
 800fbc6:	4606      	mov	r6, r0
 800fbc8:	db01      	blt.n	800fbce <_malloc_r+0x1a>
 800fbca:	42a9      	cmp	r1, r5
 800fbcc:	d903      	bls.n	800fbd6 <_malloc_r+0x22>
 800fbce:	230c      	movs	r3, #12
 800fbd0:	6033      	str	r3, [r6, #0]
 800fbd2:	2000      	movs	r0, #0
 800fbd4:	bd70      	pop	{r4, r5, r6, pc}
 800fbd6:	f000 f8d5 	bl	800fd84 <__malloc_lock>
 800fbda:	4a21      	ldr	r2, [pc, #132]	; (800fc60 <_malloc_r+0xac>)
 800fbdc:	6814      	ldr	r4, [r2, #0]
 800fbde:	4621      	mov	r1, r4
 800fbe0:	b991      	cbnz	r1, 800fc08 <_malloc_r+0x54>
 800fbe2:	4c20      	ldr	r4, [pc, #128]	; (800fc64 <_malloc_r+0xb0>)
 800fbe4:	6823      	ldr	r3, [r4, #0]
 800fbe6:	b91b      	cbnz	r3, 800fbf0 <_malloc_r+0x3c>
 800fbe8:	4630      	mov	r0, r6
 800fbea:	f000 f83d 	bl	800fc68 <_sbrk_r>
 800fbee:	6020      	str	r0, [r4, #0]
 800fbf0:	4629      	mov	r1, r5
 800fbf2:	4630      	mov	r0, r6
 800fbf4:	f000 f838 	bl	800fc68 <_sbrk_r>
 800fbf8:	1c43      	adds	r3, r0, #1
 800fbfa:	d124      	bne.n	800fc46 <_malloc_r+0x92>
 800fbfc:	230c      	movs	r3, #12
 800fbfe:	4630      	mov	r0, r6
 800fc00:	6033      	str	r3, [r6, #0]
 800fc02:	f000 f8c0 	bl	800fd86 <__malloc_unlock>
 800fc06:	e7e4      	b.n	800fbd2 <_malloc_r+0x1e>
 800fc08:	680b      	ldr	r3, [r1, #0]
 800fc0a:	1b5b      	subs	r3, r3, r5
 800fc0c:	d418      	bmi.n	800fc40 <_malloc_r+0x8c>
 800fc0e:	2b0b      	cmp	r3, #11
 800fc10:	d90f      	bls.n	800fc32 <_malloc_r+0x7e>
 800fc12:	600b      	str	r3, [r1, #0]
 800fc14:	18cc      	adds	r4, r1, r3
 800fc16:	50cd      	str	r5, [r1, r3]
 800fc18:	4630      	mov	r0, r6
 800fc1a:	f000 f8b4 	bl	800fd86 <__malloc_unlock>
 800fc1e:	f104 000b 	add.w	r0, r4, #11
 800fc22:	1d23      	adds	r3, r4, #4
 800fc24:	f020 0007 	bic.w	r0, r0, #7
 800fc28:	1ac3      	subs	r3, r0, r3
 800fc2a:	d0d3      	beq.n	800fbd4 <_malloc_r+0x20>
 800fc2c:	425a      	negs	r2, r3
 800fc2e:	50e2      	str	r2, [r4, r3]
 800fc30:	e7d0      	b.n	800fbd4 <_malloc_r+0x20>
 800fc32:	684b      	ldr	r3, [r1, #4]
 800fc34:	428c      	cmp	r4, r1
 800fc36:	bf16      	itet	ne
 800fc38:	6063      	strne	r3, [r4, #4]
 800fc3a:	6013      	streq	r3, [r2, #0]
 800fc3c:	460c      	movne	r4, r1
 800fc3e:	e7eb      	b.n	800fc18 <_malloc_r+0x64>
 800fc40:	460c      	mov	r4, r1
 800fc42:	6849      	ldr	r1, [r1, #4]
 800fc44:	e7cc      	b.n	800fbe0 <_malloc_r+0x2c>
 800fc46:	1cc4      	adds	r4, r0, #3
 800fc48:	f024 0403 	bic.w	r4, r4, #3
 800fc4c:	42a0      	cmp	r0, r4
 800fc4e:	d005      	beq.n	800fc5c <_malloc_r+0xa8>
 800fc50:	1a21      	subs	r1, r4, r0
 800fc52:	4630      	mov	r0, r6
 800fc54:	f000 f808 	bl	800fc68 <_sbrk_r>
 800fc58:	3001      	adds	r0, #1
 800fc5a:	d0cf      	beq.n	800fbfc <_malloc_r+0x48>
 800fc5c:	6025      	str	r5, [r4, #0]
 800fc5e:	e7db      	b.n	800fc18 <_malloc_r+0x64>
 800fc60:	20000538 	.word	0x20000538
 800fc64:	2000053c 	.word	0x2000053c

0800fc68 <_sbrk_r>:
 800fc68:	b538      	push	{r3, r4, r5, lr}
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	4c05      	ldr	r4, [pc, #20]	; (800fc84 <_sbrk_r+0x1c>)
 800fc6e:	4605      	mov	r5, r0
 800fc70:	4608      	mov	r0, r1
 800fc72:	6023      	str	r3, [r4, #0]
 800fc74:	f7fa fa84 	bl	800a180 <_sbrk>
 800fc78:	1c43      	adds	r3, r0, #1
 800fc7a:	d102      	bne.n	800fc82 <_sbrk_r+0x1a>
 800fc7c:	6823      	ldr	r3, [r4, #0]
 800fc7e:	b103      	cbz	r3, 800fc82 <_sbrk_r+0x1a>
 800fc80:	602b      	str	r3, [r5, #0]
 800fc82:	bd38      	pop	{r3, r4, r5, pc}
 800fc84:	200006c0 	.word	0x200006c0

0800fc88 <_raise_r>:
 800fc88:	291f      	cmp	r1, #31
 800fc8a:	b538      	push	{r3, r4, r5, lr}
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	460d      	mov	r5, r1
 800fc90:	d904      	bls.n	800fc9c <_raise_r+0x14>
 800fc92:	2316      	movs	r3, #22
 800fc94:	6003      	str	r3, [r0, #0]
 800fc96:	f04f 30ff 	mov.w	r0, #4294967295
 800fc9a:	bd38      	pop	{r3, r4, r5, pc}
 800fc9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fc9e:	b112      	cbz	r2, 800fca6 <_raise_r+0x1e>
 800fca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fca4:	b94b      	cbnz	r3, 800fcba <_raise_r+0x32>
 800fca6:	4620      	mov	r0, r4
 800fca8:	f000 f830 	bl	800fd0c <_getpid_r>
 800fcac:	462a      	mov	r2, r5
 800fcae:	4601      	mov	r1, r0
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcb6:	f000 b817 	b.w	800fce8 <_kill_r>
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d00a      	beq.n	800fcd4 <_raise_r+0x4c>
 800fcbe:	1c59      	adds	r1, r3, #1
 800fcc0:	d103      	bne.n	800fcca <_raise_r+0x42>
 800fcc2:	2316      	movs	r3, #22
 800fcc4:	6003      	str	r3, [r0, #0]
 800fcc6:	2001      	movs	r0, #1
 800fcc8:	e7e7      	b.n	800fc9a <_raise_r+0x12>
 800fcca:	2400      	movs	r4, #0
 800fccc:	4628      	mov	r0, r5
 800fcce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fcd2:	4798      	blx	r3
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	e7e0      	b.n	800fc9a <_raise_r+0x12>

0800fcd8 <raise>:
 800fcd8:	4b02      	ldr	r3, [pc, #8]	; (800fce4 <raise+0xc>)
 800fcda:	4601      	mov	r1, r0
 800fcdc:	6818      	ldr	r0, [r3, #0]
 800fcde:	f7ff bfd3 	b.w	800fc88 <_raise_r>
 800fce2:	bf00      	nop
 800fce4:	200000a8 	.word	0x200000a8

0800fce8 <_kill_r>:
 800fce8:	b538      	push	{r3, r4, r5, lr}
 800fcea:	2300      	movs	r3, #0
 800fcec:	4c06      	ldr	r4, [pc, #24]	; (800fd08 <_kill_r+0x20>)
 800fcee:	4605      	mov	r5, r0
 800fcf0:	4608      	mov	r0, r1
 800fcf2:	4611      	mov	r1, r2
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	f7fa fa28 	bl	800a14a <_kill>
 800fcfa:	1c43      	adds	r3, r0, #1
 800fcfc:	d102      	bne.n	800fd04 <_kill_r+0x1c>
 800fcfe:	6823      	ldr	r3, [r4, #0]
 800fd00:	b103      	cbz	r3, 800fd04 <_kill_r+0x1c>
 800fd02:	602b      	str	r3, [r5, #0]
 800fd04:	bd38      	pop	{r3, r4, r5, pc}
 800fd06:	bf00      	nop
 800fd08:	200006c0 	.word	0x200006c0

0800fd0c <_getpid_r>:
 800fd0c:	f7fa ba16 	b.w	800a13c <_getpid>

0800fd10 <_vsniprintf_r>:
 800fd10:	b530      	push	{r4, r5, lr}
 800fd12:	1e14      	subs	r4, r2, #0
 800fd14:	4605      	mov	r5, r0
 800fd16:	b09b      	sub	sp, #108	; 0x6c
 800fd18:	4618      	mov	r0, r3
 800fd1a:	da05      	bge.n	800fd28 <_vsniprintf_r+0x18>
 800fd1c:	238b      	movs	r3, #139	; 0x8b
 800fd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd22:	602b      	str	r3, [r5, #0]
 800fd24:	b01b      	add	sp, #108	; 0x6c
 800fd26:	bd30      	pop	{r4, r5, pc}
 800fd28:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fd2c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fd30:	bf0c      	ite	eq
 800fd32:	4623      	moveq	r3, r4
 800fd34:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fd38:	9302      	str	r3, [sp, #8]
 800fd3a:	9305      	str	r3, [sp, #20]
 800fd3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd40:	9100      	str	r1, [sp, #0]
 800fd42:	9104      	str	r1, [sp, #16]
 800fd44:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fd48:	4602      	mov	r2, r0
 800fd4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fd4c:	4669      	mov	r1, sp
 800fd4e:	4628      	mov	r0, r5
 800fd50:	f000 f874 	bl	800fe3c <_svfiprintf_r>
 800fd54:	1c43      	adds	r3, r0, #1
 800fd56:	bfbc      	itt	lt
 800fd58:	238b      	movlt	r3, #139	; 0x8b
 800fd5a:	602b      	strlt	r3, [r5, #0]
 800fd5c:	2c00      	cmp	r4, #0
 800fd5e:	d0e1      	beq.n	800fd24 <_vsniprintf_r+0x14>
 800fd60:	2200      	movs	r2, #0
 800fd62:	9b00      	ldr	r3, [sp, #0]
 800fd64:	701a      	strb	r2, [r3, #0]
 800fd66:	e7dd      	b.n	800fd24 <_vsniprintf_r+0x14>

0800fd68 <vsniprintf>:
 800fd68:	b507      	push	{r0, r1, r2, lr}
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	4613      	mov	r3, r2
 800fd6e:	460a      	mov	r2, r1
 800fd70:	4601      	mov	r1, r0
 800fd72:	4803      	ldr	r0, [pc, #12]	; (800fd80 <vsniprintf+0x18>)
 800fd74:	6800      	ldr	r0, [r0, #0]
 800fd76:	f7ff ffcb 	bl	800fd10 <_vsniprintf_r>
 800fd7a:	b003      	add	sp, #12
 800fd7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd80:	200000a8 	.word	0x200000a8

0800fd84 <__malloc_lock>:
 800fd84:	4770      	bx	lr

0800fd86 <__malloc_unlock>:
 800fd86:	4770      	bx	lr

0800fd88 <__ssputs_r>:
 800fd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd8c:	688e      	ldr	r6, [r1, #8]
 800fd8e:	4682      	mov	sl, r0
 800fd90:	429e      	cmp	r6, r3
 800fd92:	460c      	mov	r4, r1
 800fd94:	4690      	mov	r8, r2
 800fd96:	4699      	mov	r9, r3
 800fd98:	d837      	bhi.n	800fe0a <__ssputs_r+0x82>
 800fd9a:	898a      	ldrh	r2, [r1, #12]
 800fd9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fda0:	d031      	beq.n	800fe06 <__ssputs_r+0x7e>
 800fda2:	2302      	movs	r3, #2
 800fda4:	6825      	ldr	r5, [r4, #0]
 800fda6:	6909      	ldr	r1, [r1, #16]
 800fda8:	1a6f      	subs	r7, r5, r1
 800fdaa:	6965      	ldr	r5, [r4, #20]
 800fdac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdb0:	fb95 f5f3 	sdiv	r5, r5, r3
 800fdb4:	f109 0301 	add.w	r3, r9, #1
 800fdb8:	443b      	add	r3, r7
 800fdba:	429d      	cmp	r5, r3
 800fdbc:	bf38      	it	cc
 800fdbe:	461d      	movcc	r5, r3
 800fdc0:	0553      	lsls	r3, r2, #21
 800fdc2:	d530      	bpl.n	800fe26 <__ssputs_r+0x9e>
 800fdc4:	4629      	mov	r1, r5
 800fdc6:	f7ff fef5 	bl	800fbb4 <_malloc_r>
 800fdca:	4606      	mov	r6, r0
 800fdcc:	b950      	cbnz	r0, 800fde4 <__ssputs_r+0x5c>
 800fdce:	230c      	movs	r3, #12
 800fdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd4:	f8ca 3000 	str.w	r3, [sl]
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdde:	81a3      	strh	r3, [r4, #12]
 800fde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fde4:	463a      	mov	r2, r7
 800fde6:	6921      	ldr	r1, [r4, #16]
 800fde8:	f7ff fe6b 	bl	800fac2 <memcpy>
 800fdec:	89a3      	ldrh	r3, [r4, #12]
 800fdee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fdf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdf6:	81a3      	strh	r3, [r4, #12]
 800fdf8:	6126      	str	r6, [r4, #16]
 800fdfa:	443e      	add	r6, r7
 800fdfc:	6026      	str	r6, [r4, #0]
 800fdfe:	464e      	mov	r6, r9
 800fe00:	6165      	str	r5, [r4, #20]
 800fe02:	1bed      	subs	r5, r5, r7
 800fe04:	60a5      	str	r5, [r4, #8]
 800fe06:	454e      	cmp	r6, r9
 800fe08:	d900      	bls.n	800fe0c <__ssputs_r+0x84>
 800fe0a:	464e      	mov	r6, r9
 800fe0c:	4632      	mov	r2, r6
 800fe0e:	4641      	mov	r1, r8
 800fe10:	6820      	ldr	r0, [r4, #0]
 800fe12:	f7ff fe61 	bl	800fad8 <memmove>
 800fe16:	68a3      	ldr	r3, [r4, #8]
 800fe18:	2000      	movs	r0, #0
 800fe1a:	1b9b      	subs	r3, r3, r6
 800fe1c:	60a3      	str	r3, [r4, #8]
 800fe1e:	6823      	ldr	r3, [r4, #0]
 800fe20:	441e      	add	r6, r3
 800fe22:	6026      	str	r6, [r4, #0]
 800fe24:	e7dc      	b.n	800fde0 <__ssputs_r+0x58>
 800fe26:	462a      	mov	r2, r5
 800fe28:	f000 fa88 	bl	801033c <_realloc_r>
 800fe2c:	4606      	mov	r6, r0
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d1e2      	bne.n	800fdf8 <__ssputs_r+0x70>
 800fe32:	6921      	ldr	r1, [r4, #16]
 800fe34:	4650      	mov	r0, sl
 800fe36:	f7ff fe71 	bl	800fb1c <_free_r>
 800fe3a:	e7c8      	b.n	800fdce <__ssputs_r+0x46>

0800fe3c <_svfiprintf_r>:
 800fe3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe40:	461d      	mov	r5, r3
 800fe42:	898b      	ldrh	r3, [r1, #12]
 800fe44:	b09d      	sub	sp, #116	; 0x74
 800fe46:	061f      	lsls	r7, r3, #24
 800fe48:	4680      	mov	r8, r0
 800fe4a:	460c      	mov	r4, r1
 800fe4c:	4616      	mov	r6, r2
 800fe4e:	d50f      	bpl.n	800fe70 <_svfiprintf_r+0x34>
 800fe50:	690b      	ldr	r3, [r1, #16]
 800fe52:	b96b      	cbnz	r3, 800fe70 <_svfiprintf_r+0x34>
 800fe54:	2140      	movs	r1, #64	; 0x40
 800fe56:	f7ff fead 	bl	800fbb4 <_malloc_r>
 800fe5a:	6020      	str	r0, [r4, #0]
 800fe5c:	6120      	str	r0, [r4, #16]
 800fe5e:	b928      	cbnz	r0, 800fe6c <_svfiprintf_r+0x30>
 800fe60:	230c      	movs	r3, #12
 800fe62:	f8c8 3000 	str.w	r3, [r8]
 800fe66:	f04f 30ff 	mov.w	r0, #4294967295
 800fe6a:	e0c8      	b.n	800fffe <_svfiprintf_r+0x1c2>
 800fe6c:	2340      	movs	r3, #64	; 0x40
 800fe6e:	6163      	str	r3, [r4, #20]
 800fe70:	2300      	movs	r3, #0
 800fe72:	9309      	str	r3, [sp, #36]	; 0x24
 800fe74:	2320      	movs	r3, #32
 800fe76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe7a:	2330      	movs	r3, #48	; 0x30
 800fe7c:	f04f 0b01 	mov.w	fp, #1
 800fe80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe84:	9503      	str	r5, [sp, #12]
 800fe86:	4637      	mov	r7, r6
 800fe88:	463d      	mov	r5, r7
 800fe8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fe8e:	b10b      	cbz	r3, 800fe94 <_svfiprintf_r+0x58>
 800fe90:	2b25      	cmp	r3, #37	; 0x25
 800fe92:	d13e      	bne.n	800ff12 <_svfiprintf_r+0xd6>
 800fe94:	ebb7 0a06 	subs.w	sl, r7, r6
 800fe98:	d00b      	beq.n	800feb2 <_svfiprintf_r+0x76>
 800fe9a:	4653      	mov	r3, sl
 800fe9c:	4632      	mov	r2, r6
 800fe9e:	4621      	mov	r1, r4
 800fea0:	4640      	mov	r0, r8
 800fea2:	f7ff ff71 	bl	800fd88 <__ssputs_r>
 800fea6:	3001      	adds	r0, #1
 800fea8:	f000 80a4 	beq.w	800fff4 <_svfiprintf_r+0x1b8>
 800feac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feae:	4453      	add	r3, sl
 800feb0:	9309      	str	r3, [sp, #36]	; 0x24
 800feb2:	783b      	ldrb	r3, [r7, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f000 809d 	beq.w	800fff4 <_svfiprintf_r+0x1b8>
 800feba:	2300      	movs	r3, #0
 800febc:	f04f 32ff 	mov.w	r2, #4294967295
 800fec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fec4:	9304      	str	r3, [sp, #16]
 800fec6:	9307      	str	r3, [sp, #28]
 800fec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fecc:	931a      	str	r3, [sp, #104]	; 0x68
 800fece:	462f      	mov	r7, r5
 800fed0:	2205      	movs	r2, #5
 800fed2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fed6:	4850      	ldr	r0, [pc, #320]	; (8010018 <_svfiprintf_r+0x1dc>)
 800fed8:	f7ff fdd6 	bl	800fa88 <memchr>
 800fedc:	9b04      	ldr	r3, [sp, #16]
 800fede:	b9d0      	cbnz	r0, 800ff16 <_svfiprintf_r+0xda>
 800fee0:	06d9      	lsls	r1, r3, #27
 800fee2:	bf44      	itt	mi
 800fee4:	2220      	movmi	r2, #32
 800fee6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800feea:	071a      	lsls	r2, r3, #28
 800feec:	bf44      	itt	mi
 800feee:	222b      	movmi	r2, #43	; 0x2b
 800fef0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fef4:	782a      	ldrb	r2, [r5, #0]
 800fef6:	2a2a      	cmp	r2, #42	; 0x2a
 800fef8:	d015      	beq.n	800ff26 <_svfiprintf_r+0xea>
 800fefa:	462f      	mov	r7, r5
 800fefc:	2000      	movs	r0, #0
 800fefe:	250a      	movs	r5, #10
 800ff00:	9a07      	ldr	r2, [sp, #28]
 800ff02:	4639      	mov	r1, r7
 800ff04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff08:	3b30      	subs	r3, #48	; 0x30
 800ff0a:	2b09      	cmp	r3, #9
 800ff0c:	d94d      	bls.n	800ffaa <_svfiprintf_r+0x16e>
 800ff0e:	b1b8      	cbz	r0, 800ff40 <_svfiprintf_r+0x104>
 800ff10:	e00f      	b.n	800ff32 <_svfiprintf_r+0xf6>
 800ff12:	462f      	mov	r7, r5
 800ff14:	e7b8      	b.n	800fe88 <_svfiprintf_r+0x4c>
 800ff16:	4a40      	ldr	r2, [pc, #256]	; (8010018 <_svfiprintf_r+0x1dc>)
 800ff18:	463d      	mov	r5, r7
 800ff1a:	1a80      	subs	r0, r0, r2
 800ff1c:	fa0b f000 	lsl.w	r0, fp, r0
 800ff20:	4318      	orrs	r0, r3
 800ff22:	9004      	str	r0, [sp, #16]
 800ff24:	e7d3      	b.n	800fece <_svfiprintf_r+0x92>
 800ff26:	9a03      	ldr	r2, [sp, #12]
 800ff28:	1d11      	adds	r1, r2, #4
 800ff2a:	6812      	ldr	r2, [r2, #0]
 800ff2c:	9103      	str	r1, [sp, #12]
 800ff2e:	2a00      	cmp	r2, #0
 800ff30:	db01      	blt.n	800ff36 <_svfiprintf_r+0xfa>
 800ff32:	9207      	str	r2, [sp, #28]
 800ff34:	e004      	b.n	800ff40 <_svfiprintf_r+0x104>
 800ff36:	4252      	negs	r2, r2
 800ff38:	f043 0302 	orr.w	r3, r3, #2
 800ff3c:	9207      	str	r2, [sp, #28]
 800ff3e:	9304      	str	r3, [sp, #16]
 800ff40:	783b      	ldrb	r3, [r7, #0]
 800ff42:	2b2e      	cmp	r3, #46	; 0x2e
 800ff44:	d10c      	bne.n	800ff60 <_svfiprintf_r+0x124>
 800ff46:	787b      	ldrb	r3, [r7, #1]
 800ff48:	2b2a      	cmp	r3, #42	; 0x2a
 800ff4a:	d133      	bne.n	800ffb4 <_svfiprintf_r+0x178>
 800ff4c:	9b03      	ldr	r3, [sp, #12]
 800ff4e:	3702      	adds	r7, #2
 800ff50:	1d1a      	adds	r2, r3, #4
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	9203      	str	r2, [sp, #12]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	bfb8      	it	lt
 800ff5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff5e:	9305      	str	r3, [sp, #20]
 800ff60:	4d2e      	ldr	r5, [pc, #184]	; (801001c <_svfiprintf_r+0x1e0>)
 800ff62:	2203      	movs	r2, #3
 800ff64:	7839      	ldrb	r1, [r7, #0]
 800ff66:	4628      	mov	r0, r5
 800ff68:	f7ff fd8e 	bl	800fa88 <memchr>
 800ff6c:	b138      	cbz	r0, 800ff7e <_svfiprintf_r+0x142>
 800ff6e:	2340      	movs	r3, #64	; 0x40
 800ff70:	1b40      	subs	r0, r0, r5
 800ff72:	fa03 f000 	lsl.w	r0, r3, r0
 800ff76:	9b04      	ldr	r3, [sp, #16]
 800ff78:	3701      	adds	r7, #1
 800ff7a:	4303      	orrs	r3, r0
 800ff7c:	9304      	str	r3, [sp, #16]
 800ff7e:	7839      	ldrb	r1, [r7, #0]
 800ff80:	2206      	movs	r2, #6
 800ff82:	4827      	ldr	r0, [pc, #156]	; (8010020 <_svfiprintf_r+0x1e4>)
 800ff84:	1c7e      	adds	r6, r7, #1
 800ff86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff8a:	f7ff fd7d 	bl	800fa88 <memchr>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	d038      	beq.n	8010004 <_svfiprintf_r+0x1c8>
 800ff92:	4b24      	ldr	r3, [pc, #144]	; (8010024 <_svfiprintf_r+0x1e8>)
 800ff94:	bb13      	cbnz	r3, 800ffdc <_svfiprintf_r+0x1a0>
 800ff96:	9b03      	ldr	r3, [sp, #12]
 800ff98:	3307      	adds	r3, #7
 800ff9a:	f023 0307 	bic.w	r3, r3, #7
 800ff9e:	3308      	adds	r3, #8
 800ffa0:	9303      	str	r3, [sp, #12]
 800ffa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa4:	444b      	add	r3, r9
 800ffa6:	9309      	str	r3, [sp, #36]	; 0x24
 800ffa8:	e76d      	b.n	800fe86 <_svfiprintf_r+0x4a>
 800ffaa:	fb05 3202 	mla	r2, r5, r2, r3
 800ffae:	2001      	movs	r0, #1
 800ffb0:	460f      	mov	r7, r1
 800ffb2:	e7a6      	b.n	800ff02 <_svfiprintf_r+0xc6>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	250a      	movs	r5, #10
 800ffb8:	4619      	mov	r1, r3
 800ffba:	3701      	adds	r7, #1
 800ffbc:	9305      	str	r3, [sp, #20]
 800ffbe:	4638      	mov	r0, r7
 800ffc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffc4:	3a30      	subs	r2, #48	; 0x30
 800ffc6:	2a09      	cmp	r2, #9
 800ffc8:	d903      	bls.n	800ffd2 <_svfiprintf_r+0x196>
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d0c8      	beq.n	800ff60 <_svfiprintf_r+0x124>
 800ffce:	9105      	str	r1, [sp, #20]
 800ffd0:	e7c6      	b.n	800ff60 <_svfiprintf_r+0x124>
 800ffd2:	fb05 2101 	mla	r1, r5, r1, r2
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	4607      	mov	r7, r0
 800ffda:	e7f0      	b.n	800ffbe <_svfiprintf_r+0x182>
 800ffdc:	ab03      	add	r3, sp, #12
 800ffde:	9300      	str	r3, [sp, #0]
 800ffe0:	4622      	mov	r2, r4
 800ffe2:	4b11      	ldr	r3, [pc, #68]	; (8010028 <_svfiprintf_r+0x1ec>)
 800ffe4:	a904      	add	r1, sp, #16
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	f3af 8000 	nop.w
 800ffec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fff0:	4681      	mov	r9, r0
 800fff2:	d1d6      	bne.n	800ffa2 <_svfiprintf_r+0x166>
 800fff4:	89a3      	ldrh	r3, [r4, #12]
 800fff6:	065b      	lsls	r3, r3, #25
 800fff8:	f53f af35 	bmi.w	800fe66 <_svfiprintf_r+0x2a>
 800fffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fffe:	b01d      	add	sp, #116	; 0x74
 8010000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010004:	ab03      	add	r3, sp, #12
 8010006:	9300      	str	r3, [sp, #0]
 8010008:	4622      	mov	r2, r4
 801000a:	4b07      	ldr	r3, [pc, #28]	; (8010028 <_svfiprintf_r+0x1ec>)
 801000c:	a904      	add	r1, sp, #16
 801000e:	4640      	mov	r0, r8
 8010010:	f000 f882 	bl	8010118 <_printf_i>
 8010014:	e7ea      	b.n	800ffec <_svfiprintf_r+0x1b0>
 8010016:	bf00      	nop
 8010018:	0801377c 	.word	0x0801377c
 801001c:	08013782 	.word	0x08013782
 8010020:	08013786 	.word	0x08013786
 8010024:	00000000 	.word	0x00000000
 8010028:	0800fd89 	.word	0x0800fd89

0801002c <_printf_common>:
 801002c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010030:	4691      	mov	r9, r2
 8010032:	461f      	mov	r7, r3
 8010034:	688a      	ldr	r2, [r1, #8]
 8010036:	690b      	ldr	r3, [r1, #16]
 8010038:	4606      	mov	r6, r0
 801003a:	4293      	cmp	r3, r2
 801003c:	bfb8      	it	lt
 801003e:	4613      	movlt	r3, r2
 8010040:	f8c9 3000 	str.w	r3, [r9]
 8010044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010048:	460c      	mov	r4, r1
 801004a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801004e:	b112      	cbz	r2, 8010056 <_printf_common+0x2a>
 8010050:	3301      	adds	r3, #1
 8010052:	f8c9 3000 	str.w	r3, [r9]
 8010056:	6823      	ldr	r3, [r4, #0]
 8010058:	0699      	lsls	r1, r3, #26
 801005a:	bf42      	ittt	mi
 801005c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010060:	3302      	addmi	r3, #2
 8010062:	f8c9 3000 	strmi.w	r3, [r9]
 8010066:	6825      	ldr	r5, [r4, #0]
 8010068:	f015 0506 	ands.w	r5, r5, #6
 801006c:	d107      	bne.n	801007e <_printf_common+0x52>
 801006e:	f104 0a19 	add.w	sl, r4, #25
 8010072:	68e3      	ldr	r3, [r4, #12]
 8010074:	f8d9 2000 	ldr.w	r2, [r9]
 8010078:	1a9b      	subs	r3, r3, r2
 801007a:	42ab      	cmp	r3, r5
 801007c:	dc29      	bgt.n	80100d2 <_printf_common+0xa6>
 801007e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010082:	6822      	ldr	r2, [r4, #0]
 8010084:	3300      	adds	r3, #0
 8010086:	bf18      	it	ne
 8010088:	2301      	movne	r3, #1
 801008a:	0692      	lsls	r2, r2, #26
 801008c:	d42e      	bmi.n	80100ec <_printf_common+0xc0>
 801008e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010092:	4639      	mov	r1, r7
 8010094:	4630      	mov	r0, r6
 8010096:	47c0      	blx	r8
 8010098:	3001      	adds	r0, #1
 801009a:	d021      	beq.n	80100e0 <_printf_common+0xb4>
 801009c:	6823      	ldr	r3, [r4, #0]
 801009e:	68e5      	ldr	r5, [r4, #12]
 80100a0:	f003 0306 	and.w	r3, r3, #6
 80100a4:	2b04      	cmp	r3, #4
 80100a6:	bf18      	it	ne
 80100a8:	2500      	movne	r5, #0
 80100aa:	f8d9 2000 	ldr.w	r2, [r9]
 80100ae:	f04f 0900 	mov.w	r9, #0
 80100b2:	bf08      	it	eq
 80100b4:	1aad      	subeq	r5, r5, r2
 80100b6:	68a3      	ldr	r3, [r4, #8]
 80100b8:	6922      	ldr	r2, [r4, #16]
 80100ba:	bf08      	it	eq
 80100bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100c0:	4293      	cmp	r3, r2
 80100c2:	bfc4      	itt	gt
 80100c4:	1a9b      	subgt	r3, r3, r2
 80100c6:	18ed      	addgt	r5, r5, r3
 80100c8:	341a      	adds	r4, #26
 80100ca:	454d      	cmp	r5, r9
 80100cc:	d11a      	bne.n	8010104 <_printf_common+0xd8>
 80100ce:	2000      	movs	r0, #0
 80100d0:	e008      	b.n	80100e4 <_printf_common+0xb8>
 80100d2:	2301      	movs	r3, #1
 80100d4:	4652      	mov	r2, sl
 80100d6:	4639      	mov	r1, r7
 80100d8:	4630      	mov	r0, r6
 80100da:	47c0      	blx	r8
 80100dc:	3001      	adds	r0, #1
 80100de:	d103      	bne.n	80100e8 <_printf_common+0xbc>
 80100e0:	f04f 30ff 	mov.w	r0, #4294967295
 80100e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100e8:	3501      	adds	r5, #1
 80100ea:	e7c2      	b.n	8010072 <_printf_common+0x46>
 80100ec:	2030      	movs	r0, #48	; 0x30
 80100ee:	18e1      	adds	r1, r4, r3
 80100f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80100f4:	1c5a      	adds	r2, r3, #1
 80100f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80100fa:	4422      	add	r2, r4
 80100fc:	3302      	adds	r3, #2
 80100fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010102:	e7c4      	b.n	801008e <_printf_common+0x62>
 8010104:	2301      	movs	r3, #1
 8010106:	4622      	mov	r2, r4
 8010108:	4639      	mov	r1, r7
 801010a:	4630      	mov	r0, r6
 801010c:	47c0      	blx	r8
 801010e:	3001      	adds	r0, #1
 8010110:	d0e6      	beq.n	80100e0 <_printf_common+0xb4>
 8010112:	f109 0901 	add.w	r9, r9, #1
 8010116:	e7d8      	b.n	80100ca <_printf_common+0x9e>

08010118 <_printf_i>:
 8010118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801011c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010120:	460c      	mov	r4, r1
 8010122:	7e09      	ldrb	r1, [r1, #24]
 8010124:	b085      	sub	sp, #20
 8010126:	296e      	cmp	r1, #110	; 0x6e
 8010128:	4617      	mov	r7, r2
 801012a:	4606      	mov	r6, r0
 801012c:	4698      	mov	r8, r3
 801012e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010130:	f000 80b3 	beq.w	801029a <_printf_i+0x182>
 8010134:	d822      	bhi.n	801017c <_printf_i+0x64>
 8010136:	2963      	cmp	r1, #99	; 0x63
 8010138:	d036      	beq.n	80101a8 <_printf_i+0x90>
 801013a:	d80a      	bhi.n	8010152 <_printf_i+0x3a>
 801013c:	2900      	cmp	r1, #0
 801013e:	f000 80b9 	beq.w	80102b4 <_printf_i+0x19c>
 8010142:	2958      	cmp	r1, #88	; 0x58
 8010144:	f000 8083 	beq.w	801024e <_printf_i+0x136>
 8010148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801014c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010150:	e032      	b.n	80101b8 <_printf_i+0xa0>
 8010152:	2964      	cmp	r1, #100	; 0x64
 8010154:	d001      	beq.n	801015a <_printf_i+0x42>
 8010156:	2969      	cmp	r1, #105	; 0x69
 8010158:	d1f6      	bne.n	8010148 <_printf_i+0x30>
 801015a:	6820      	ldr	r0, [r4, #0]
 801015c:	6813      	ldr	r3, [r2, #0]
 801015e:	0605      	lsls	r5, r0, #24
 8010160:	f103 0104 	add.w	r1, r3, #4
 8010164:	d52a      	bpl.n	80101bc <_printf_i+0xa4>
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	6011      	str	r1, [r2, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	da03      	bge.n	8010176 <_printf_i+0x5e>
 801016e:	222d      	movs	r2, #45	; 0x2d
 8010170:	425b      	negs	r3, r3
 8010172:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010176:	486f      	ldr	r0, [pc, #444]	; (8010334 <_printf_i+0x21c>)
 8010178:	220a      	movs	r2, #10
 801017a:	e039      	b.n	80101f0 <_printf_i+0xd8>
 801017c:	2973      	cmp	r1, #115	; 0x73
 801017e:	f000 809d 	beq.w	80102bc <_printf_i+0x1a4>
 8010182:	d808      	bhi.n	8010196 <_printf_i+0x7e>
 8010184:	296f      	cmp	r1, #111	; 0x6f
 8010186:	d020      	beq.n	80101ca <_printf_i+0xb2>
 8010188:	2970      	cmp	r1, #112	; 0x70
 801018a:	d1dd      	bne.n	8010148 <_printf_i+0x30>
 801018c:	6823      	ldr	r3, [r4, #0]
 801018e:	f043 0320 	orr.w	r3, r3, #32
 8010192:	6023      	str	r3, [r4, #0]
 8010194:	e003      	b.n	801019e <_printf_i+0x86>
 8010196:	2975      	cmp	r1, #117	; 0x75
 8010198:	d017      	beq.n	80101ca <_printf_i+0xb2>
 801019a:	2978      	cmp	r1, #120	; 0x78
 801019c:	d1d4      	bne.n	8010148 <_printf_i+0x30>
 801019e:	2378      	movs	r3, #120	; 0x78
 80101a0:	4865      	ldr	r0, [pc, #404]	; (8010338 <_printf_i+0x220>)
 80101a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80101a6:	e055      	b.n	8010254 <_printf_i+0x13c>
 80101a8:	6813      	ldr	r3, [r2, #0]
 80101aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101ae:	1d19      	adds	r1, r3, #4
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	6011      	str	r1, [r2, #0]
 80101b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80101b8:	2301      	movs	r3, #1
 80101ba:	e08c      	b.n	80102d6 <_printf_i+0x1be>
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80101c2:	6011      	str	r1, [r2, #0]
 80101c4:	bf18      	it	ne
 80101c6:	b21b      	sxthne	r3, r3
 80101c8:	e7cf      	b.n	801016a <_printf_i+0x52>
 80101ca:	6813      	ldr	r3, [r2, #0]
 80101cc:	6825      	ldr	r5, [r4, #0]
 80101ce:	1d18      	adds	r0, r3, #4
 80101d0:	6010      	str	r0, [r2, #0]
 80101d2:	0628      	lsls	r0, r5, #24
 80101d4:	d501      	bpl.n	80101da <_printf_i+0xc2>
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	e002      	b.n	80101e0 <_printf_i+0xc8>
 80101da:	0668      	lsls	r0, r5, #25
 80101dc:	d5fb      	bpl.n	80101d6 <_printf_i+0xbe>
 80101de:	881b      	ldrh	r3, [r3, #0]
 80101e0:	296f      	cmp	r1, #111	; 0x6f
 80101e2:	bf14      	ite	ne
 80101e4:	220a      	movne	r2, #10
 80101e6:	2208      	moveq	r2, #8
 80101e8:	4852      	ldr	r0, [pc, #328]	; (8010334 <_printf_i+0x21c>)
 80101ea:	2100      	movs	r1, #0
 80101ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80101f0:	6865      	ldr	r5, [r4, #4]
 80101f2:	2d00      	cmp	r5, #0
 80101f4:	60a5      	str	r5, [r4, #8]
 80101f6:	f2c0 8095 	blt.w	8010324 <_printf_i+0x20c>
 80101fa:	6821      	ldr	r1, [r4, #0]
 80101fc:	f021 0104 	bic.w	r1, r1, #4
 8010200:	6021      	str	r1, [r4, #0]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d13d      	bne.n	8010282 <_printf_i+0x16a>
 8010206:	2d00      	cmp	r5, #0
 8010208:	f040 808e 	bne.w	8010328 <_printf_i+0x210>
 801020c:	4665      	mov	r5, ip
 801020e:	2a08      	cmp	r2, #8
 8010210:	d10b      	bne.n	801022a <_printf_i+0x112>
 8010212:	6823      	ldr	r3, [r4, #0]
 8010214:	07db      	lsls	r3, r3, #31
 8010216:	d508      	bpl.n	801022a <_printf_i+0x112>
 8010218:	6923      	ldr	r3, [r4, #16]
 801021a:	6862      	ldr	r2, [r4, #4]
 801021c:	429a      	cmp	r2, r3
 801021e:	bfde      	ittt	le
 8010220:	2330      	movle	r3, #48	; 0x30
 8010222:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010226:	f105 35ff 	addle.w	r5, r5, #4294967295
 801022a:	ebac 0305 	sub.w	r3, ip, r5
 801022e:	6123      	str	r3, [r4, #16]
 8010230:	f8cd 8000 	str.w	r8, [sp]
 8010234:	463b      	mov	r3, r7
 8010236:	aa03      	add	r2, sp, #12
 8010238:	4621      	mov	r1, r4
 801023a:	4630      	mov	r0, r6
 801023c:	f7ff fef6 	bl	801002c <_printf_common>
 8010240:	3001      	adds	r0, #1
 8010242:	d14d      	bne.n	80102e0 <_printf_i+0x1c8>
 8010244:	f04f 30ff 	mov.w	r0, #4294967295
 8010248:	b005      	add	sp, #20
 801024a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801024e:	4839      	ldr	r0, [pc, #228]	; (8010334 <_printf_i+0x21c>)
 8010250:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010254:	6813      	ldr	r3, [r2, #0]
 8010256:	6821      	ldr	r1, [r4, #0]
 8010258:	1d1d      	adds	r5, r3, #4
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	6015      	str	r5, [r2, #0]
 801025e:	060a      	lsls	r2, r1, #24
 8010260:	d50b      	bpl.n	801027a <_printf_i+0x162>
 8010262:	07ca      	lsls	r2, r1, #31
 8010264:	bf44      	itt	mi
 8010266:	f041 0120 	orrmi.w	r1, r1, #32
 801026a:	6021      	strmi	r1, [r4, #0]
 801026c:	b91b      	cbnz	r3, 8010276 <_printf_i+0x15e>
 801026e:	6822      	ldr	r2, [r4, #0]
 8010270:	f022 0220 	bic.w	r2, r2, #32
 8010274:	6022      	str	r2, [r4, #0]
 8010276:	2210      	movs	r2, #16
 8010278:	e7b7      	b.n	80101ea <_printf_i+0xd2>
 801027a:	064d      	lsls	r5, r1, #25
 801027c:	bf48      	it	mi
 801027e:	b29b      	uxthmi	r3, r3
 8010280:	e7ef      	b.n	8010262 <_printf_i+0x14a>
 8010282:	4665      	mov	r5, ip
 8010284:	fbb3 f1f2 	udiv	r1, r3, r2
 8010288:	fb02 3311 	mls	r3, r2, r1, r3
 801028c:	5cc3      	ldrb	r3, [r0, r3]
 801028e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010292:	460b      	mov	r3, r1
 8010294:	2900      	cmp	r1, #0
 8010296:	d1f5      	bne.n	8010284 <_printf_i+0x16c>
 8010298:	e7b9      	b.n	801020e <_printf_i+0xf6>
 801029a:	6813      	ldr	r3, [r2, #0]
 801029c:	6825      	ldr	r5, [r4, #0]
 801029e:	1d18      	adds	r0, r3, #4
 80102a0:	6961      	ldr	r1, [r4, #20]
 80102a2:	6010      	str	r0, [r2, #0]
 80102a4:	0628      	lsls	r0, r5, #24
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	d501      	bpl.n	80102ae <_printf_i+0x196>
 80102aa:	6019      	str	r1, [r3, #0]
 80102ac:	e002      	b.n	80102b4 <_printf_i+0x19c>
 80102ae:	066a      	lsls	r2, r5, #25
 80102b0:	d5fb      	bpl.n	80102aa <_printf_i+0x192>
 80102b2:	8019      	strh	r1, [r3, #0]
 80102b4:	2300      	movs	r3, #0
 80102b6:	4665      	mov	r5, ip
 80102b8:	6123      	str	r3, [r4, #16]
 80102ba:	e7b9      	b.n	8010230 <_printf_i+0x118>
 80102bc:	6813      	ldr	r3, [r2, #0]
 80102be:	1d19      	adds	r1, r3, #4
 80102c0:	6011      	str	r1, [r2, #0]
 80102c2:	681d      	ldr	r5, [r3, #0]
 80102c4:	6862      	ldr	r2, [r4, #4]
 80102c6:	2100      	movs	r1, #0
 80102c8:	4628      	mov	r0, r5
 80102ca:	f7ff fbdd 	bl	800fa88 <memchr>
 80102ce:	b108      	cbz	r0, 80102d4 <_printf_i+0x1bc>
 80102d0:	1b40      	subs	r0, r0, r5
 80102d2:	6060      	str	r0, [r4, #4]
 80102d4:	6863      	ldr	r3, [r4, #4]
 80102d6:	6123      	str	r3, [r4, #16]
 80102d8:	2300      	movs	r3, #0
 80102da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102de:	e7a7      	b.n	8010230 <_printf_i+0x118>
 80102e0:	6923      	ldr	r3, [r4, #16]
 80102e2:	462a      	mov	r2, r5
 80102e4:	4639      	mov	r1, r7
 80102e6:	4630      	mov	r0, r6
 80102e8:	47c0      	blx	r8
 80102ea:	3001      	adds	r0, #1
 80102ec:	d0aa      	beq.n	8010244 <_printf_i+0x12c>
 80102ee:	6823      	ldr	r3, [r4, #0]
 80102f0:	079b      	lsls	r3, r3, #30
 80102f2:	d413      	bmi.n	801031c <_printf_i+0x204>
 80102f4:	68e0      	ldr	r0, [r4, #12]
 80102f6:	9b03      	ldr	r3, [sp, #12]
 80102f8:	4298      	cmp	r0, r3
 80102fa:	bfb8      	it	lt
 80102fc:	4618      	movlt	r0, r3
 80102fe:	e7a3      	b.n	8010248 <_printf_i+0x130>
 8010300:	2301      	movs	r3, #1
 8010302:	464a      	mov	r2, r9
 8010304:	4639      	mov	r1, r7
 8010306:	4630      	mov	r0, r6
 8010308:	47c0      	blx	r8
 801030a:	3001      	adds	r0, #1
 801030c:	d09a      	beq.n	8010244 <_printf_i+0x12c>
 801030e:	3501      	adds	r5, #1
 8010310:	68e3      	ldr	r3, [r4, #12]
 8010312:	9a03      	ldr	r2, [sp, #12]
 8010314:	1a9b      	subs	r3, r3, r2
 8010316:	42ab      	cmp	r3, r5
 8010318:	dcf2      	bgt.n	8010300 <_printf_i+0x1e8>
 801031a:	e7eb      	b.n	80102f4 <_printf_i+0x1dc>
 801031c:	2500      	movs	r5, #0
 801031e:	f104 0919 	add.w	r9, r4, #25
 8010322:	e7f5      	b.n	8010310 <_printf_i+0x1f8>
 8010324:	2b00      	cmp	r3, #0
 8010326:	d1ac      	bne.n	8010282 <_printf_i+0x16a>
 8010328:	7803      	ldrb	r3, [r0, #0]
 801032a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801032e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010332:	e76c      	b.n	801020e <_printf_i+0xf6>
 8010334:	0801378d 	.word	0x0801378d
 8010338:	0801379e 	.word	0x0801379e

0801033c <_realloc_r>:
 801033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801033e:	4607      	mov	r7, r0
 8010340:	4614      	mov	r4, r2
 8010342:	460e      	mov	r6, r1
 8010344:	b921      	cbnz	r1, 8010350 <_realloc_r+0x14>
 8010346:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801034a:	4611      	mov	r1, r2
 801034c:	f7ff bc32 	b.w	800fbb4 <_malloc_r>
 8010350:	b922      	cbnz	r2, 801035c <_realloc_r+0x20>
 8010352:	f7ff fbe3 	bl	800fb1c <_free_r>
 8010356:	4625      	mov	r5, r4
 8010358:	4628      	mov	r0, r5
 801035a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801035c:	f000 f814 	bl	8010388 <_malloc_usable_size_r>
 8010360:	42a0      	cmp	r0, r4
 8010362:	d20f      	bcs.n	8010384 <_realloc_r+0x48>
 8010364:	4621      	mov	r1, r4
 8010366:	4638      	mov	r0, r7
 8010368:	f7ff fc24 	bl	800fbb4 <_malloc_r>
 801036c:	4605      	mov	r5, r0
 801036e:	2800      	cmp	r0, #0
 8010370:	d0f2      	beq.n	8010358 <_realloc_r+0x1c>
 8010372:	4631      	mov	r1, r6
 8010374:	4622      	mov	r2, r4
 8010376:	f7ff fba4 	bl	800fac2 <memcpy>
 801037a:	4631      	mov	r1, r6
 801037c:	4638      	mov	r0, r7
 801037e:	f7ff fbcd 	bl	800fb1c <_free_r>
 8010382:	e7e9      	b.n	8010358 <_realloc_r+0x1c>
 8010384:	4635      	mov	r5, r6
 8010386:	e7e7      	b.n	8010358 <_realloc_r+0x1c>

08010388 <_malloc_usable_size_r>:
 8010388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801038c:	1f18      	subs	r0, r3, #4
 801038e:	2b00      	cmp	r3, #0
 8010390:	bfbc      	itt	lt
 8010392:	580b      	ldrlt	r3, [r1, r0]
 8010394:	18c0      	addlt	r0, r0, r3
 8010396:	4770      	bx	lr

08010398 <_init>:
 8010398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801039a:	bf00      	nop
 801039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801039e:	bc08      	pop	{r3}
 80103a0:	469e      	mov	lr, r3
 80103a2:	4770      	bx	lr

080103a4 <_fini>:
 80103a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103a6:	bf00      	nop
 80103a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103aa:	bc08      	pop	{r3}
 80103ac:	469e      	mov	lr, r3
 80103ae:	4770      	bx	lr

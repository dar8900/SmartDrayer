
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b74  08005b74  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005b74  08005b74  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b74  08005b74  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005b7c  08005b7c  00015b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000070  08005bf4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08005bf4  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008490b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000509c  00000000  00000000  000a49a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001768  00000000  00000000  000a9a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015a0  00000000  00000000  000ab1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b0cf  00000000  00000000  000ac748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018c28  00000000  00000000  000c7817  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099567  00000000  00000000  000e043f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001799a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007828  00000000  00000000  00179a24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080057e0 	.word	0x080057e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080057e0 	.word	0x080057e0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	7c1b      	ldrb	r3, [r3, #16]
 800016a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000172:	461a      	mov	r2, r3
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	fb02 f303 	mul.w	r3, r2, r3
 800017a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	00db      	lsls	r3, r3, #3
 8000180:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f005 fa24 	bl	80055d8 <memset>
}
 8000190:	bf00      	nop
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af02      	add	r7, sp, #8
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	70fb      	strb	r3, [r7, #3]
 80001a4:	4613      	mov	r3, r2
 80001a6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	7c1b      	ldrb	r3, [r3, #16]
 80001ae:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80001b0:	78fb      	ldrb	r3, [r7, #3]
 80001b2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001b8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	b29b      	uxth	r3, r3
 80001be:	89ba      	ldrh	r2, [r7, #12]
 80001c0:	fb02 f303 	mul.w	r3, r2, r3
 80001c4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80001c6:	89bb      	ldrh	r3, [r7, #12]
 80001c8:	00db      	lsls	r3, r3, #3
 80001ca:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80001cc:	89bb      	ldrh	r3, [r7, #12]
 80001ce:	68ba      	ldr	r2, [r7, #8]
 80001d0:	4413      	add	r3, r2
 80001d2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80001d4:	7bf9      	ldrb	r1, [r7, #15]
 80001d6:	78ba      	ldrb	r2, [r7, #2]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	460b      	mov	r3, r1
 80001de:	2100      	movs	r1, #0
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	f000 fe50 	bl	8000e86 <u8x8_DrawTile>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b084      	sub	sp, #16
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000200:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000208:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	7c5b      	ldrb	r3, [r3, #17]
 8000210:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000212:	7bba      	ldrb	r2, [r7, #14]
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	4619      	mov	r1, r3
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f7ff ffbd 	bl	8000198 <u8g2_send_tile_row>
    src_row++;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	3301      	adds	r3, #1
 8000222:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000224:	7bbb      	ldrb	r3, [r7, #14]
 8000226:	3301      	adds	r3, #1
 8000228:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800022a:	7bfa      	ldrb	r2, [r7, #15]
 800022c:	7b7b      	ldrb	r3, [r7, #13]
 800022e:	429a      	cmp	r2, r3
 8000230:	d203      	bcs.n	800023a <u8g2_send_buffer+0x4c>
 8000232:	7bba      	ldrb	r2, [r7, #14]
 8000234:	7b3b      	ldrb	r3, [r7, #12]
 8000236:	429a      	cmp	r2, r3
 8000238:	d3eb      	bcc.n	8000212 <u8g2_send_buffer+0x24>
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000242:	b580      	push	{r7, lr}
 8000244:	b082      	sub	sp, #8
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ffcf 	bl	80001ee <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f000 fe3a 	bl	8000eca <u8x8_RefreshDisplay>
}
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}

0800025e <u8g2_font_get_word>:
  return u8x8_pgm_read( font );  
}

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800025e:	b480      	push	{r7}
 8000260:	b085      	sub	sp, #20
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]
 8000266:	460b      	mov	r3, r1
 8000268:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800026a:	78fb      	ldrb	r3, [r7, #3]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	4413      	add	r3, r2
 8000270:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	81fb      	strh	r3, [r7, #14]
    font++;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800027e:	89fb      	ldrh	r3, [r7, #14]
 8000280:	021b      	lsls	r3, r3, #8
 8000282:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	b29a      	uxth	r2, r3
 800028a:	89fb      	ldrh	r3, [r7, #14]
 800028c:	4413      	add	r3, r2
 800028e:	81fb      	strh	r3, [r7, #14]
    return pos;
 8000290:	89fb      	ldrh	r3, [r7, #14]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	460b      	mov	r3, r1
 80002a6:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	7a9b      	ldrb	r3, [r3, #10]
 80002ac:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80002b6:	7bfa      	ldrb	r2, [r7, #15]
 80002b8:	7b7b      	ldrb	r3, [r7, #13]
 80002ba:	fa42 f303 	asr.w	r3, r2, r3
 80002be:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80002c0:	7b7b      	ldrb	r3, [r7, #13]
 80002c2:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80002c4:	7bba      	ldrb	r2, [r7, #14]
 80002c6:	78fb      	ldrb	r3, [r7, #3]
 80002c8:	4413      	add	r3, r2
 80002ca:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80002cc:	7bbb      	ldrb	r3, [r7, #14]
 80002ce:	2b07      	cmp	r3, #7
 80002d0:	d91a      	bls.n	8000308 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80002d2:	2308      	movs	r3, #8
 80002d4:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80002d6:	7b3a      	ldrb	r2, [r7, #12]
 80002d8:	7b7b      	ldrb	r3, [r7, #13]
 80002da:	1ad3      	subs	r3, r2, r3
 80002dc:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	461a      	mov	r2, r3
 80002f0:	7b3b      	ldrb	r3, [r7, #12]
 80002f2:	fa02 f303 	lsl.w	r3, r2, r3
 80002f6:	b25a      	sxtb	r2, r3
 80002f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	b25b      	sxtb	r3, r3
 8000300:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8000302:	7bbb      	ldrb	r3, [r7, #14]
 8000304:	3b08      	subs	r3, #8
 8000306:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	f04f 32ff 	mov.w	r2, #4294967295
 800030e:	fa02 f303 	lsl.w	r3, r2, r3
 8000312:	b2db      	uxtb	r3, r3
 8000314:	43db      	mvns	r3, r3
 8000316:	b2da      	uxtb	r2, r3
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	4013      	ands	r3, r2
 800031c:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	7bba      	ldrb	r2, [r7, #14]
 8000322:	729a      	strb	r2, [r3, #10]
  return val;
 8000324:	7bfb      	ldrb	r3, [r7, #15]
}
 8000326:	4618      	mov	r0, r3
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	4619      	mov	r1, r3
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f7ff ffab 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 8000346:	4603      	mov	r3, r0
 8000348:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800034a:	2301      	movs	r3, #1
 800034c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800034e:	78fb      	ldrb	r3, [r7, #3]
 8000350:	3b01      	subs	r3, #1
 8000352:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8000354:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	fa02 f303 	lsl.w	r3, r2, r3
 800035e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8000360:	7bfa      	ldrb	r2, [r7, #15]
 8000362:	7bbb      	ldrb	r3, [r7, #14]
 8000364:	1ad3      	subs	r3, r2, r3
 8000366:	b2db      	uxtb	r3, r3
 8000368:	73fb      	strb	r3, [r7, #15]
  return v;
 800036a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8000376:	b490      	push	{r4, r7}
 8000378:	b082      	sub	sp, #8
 800037a:	af00      	add	r7, sp, #0
 800037c:	4604      	mov	r4, r0
 800037e:	4608      	mov	r0, r1
 8000380:	4611      	mov	r1, r2
 8000382:	461a      	mov	r2, r3
 8000384:	4623      	mov	r3, r4
 8000386:	71fb      	strb	r3, [r7, #7]
 8000388:	4603      	mov	r3, r0
 800038a:	71bb      	strb	r3, [r7, #6]
 800038c:	460b      	mov	r3, r1
 800038e:	717b      	strb	r3, [r7, #5]
 8000390:	4613      	mov	r3, r2
 8000392:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8000394:	793b      	ldrb	r3, [r7, #4]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d008      	beq.n	80003ac <u8g2_add_vector_y+0x36>
 800039a:	2b02      	cmp	r3, #2
 800039c:	d00b      	beq.n	80003b6 <u8g2_add_vector_y+0x40>
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d10e      	bne.n	80003c0 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 80003a2:	797a      	ldrb	r2, [r7, #5]
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	4413      	add	r3, r2
 80003a8:	71fb      	strb	r3, [r7, #7]
      break;
 80003aa:	e00e      	b.n	80003ca <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 80003ac:	79ba      	ldrb	r2, [r7, #6]
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	4413      	add	r3, r2
 80003b2:	71fb      	strb	r3, [r7, #7]
      break;
 80003b4:	e009      	b.n	80003ca <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 80003b6:	797b      	ldrb	r3, [r7, #5]
 80003b8:	79fa      	ldrb	r2, [r7, #7]
 80003ba:	1ad3      	subs	r3, r2, r3
 80003bc:	71fb      	strb	r3, [r7, #7]
      break;
 80003be:	e004      	b.n	80003ca <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	79fa      	ldrb	r2, [r7, #7]
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	71fb      	strb	r3, [r7, #7]
      break;      
 80003c8:	bf00      	nop
  }
  return dy;
 80003ca:	79fb      	ldrb	r3, [r7, #7]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc90      	pop	{r4, r7}
 80003d4:	4770      	bx	lr

080003d6 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80003d6:	b490      	push	{r4, r7}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	4604      	mov	r4, r0
 80003de:	4608      	mov	r0, r1
 80003e0:	4611      	mov	r1, r2
 80003e2:	461a      	mov	r2, r3
 80003e4:	4623      	mov	r3, r4
 80003e6:	71fb      	strb	r3, [r7, #7]
 80003e8:	4603      	mov	r3, r0
 80003ea:	71bb      	strb	r3, [r7, #6]
 80003ec:	460b      	mov	r3, r1
 80003ee:	717b      	strb	r3, [r7, #5]
 80003f0:	4613      	mov	r3, r2
 80003f2:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80003f4:	793b      	ldrb	r3, [r7, #4]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d008      	beq.n	800040c <u8g2_add_vector_x+0x36>
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	d00b      	beq.n	8000416 <u8g2_add_vector_x+0x40>
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d10e      	bne.n	8000420 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8000402:	79ba      	ldrb	r2, [r7, #6]
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4413      	add	r3, r2
 8000408:	71fb      	strb	r3, [r7, #7]
      break;
 800040a:	e00e      	b.n	800042a <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 800040c:	797b      	ldrb	r3, [r7, #5]
 800040e:	79fa      	ldrb	r2, [r7, #7]
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	71fb      	strb	r3, [r7, #7]
      break;
 8000414:	e009      	b.n	800042a <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	79fa      	ldrb	r2, [r7, #7]
 800041a:	1ad3      	subs	r3, r2, r3
 800041c:	71fb      	strb	r3, [r7, #7]
      break;
 800041e:	e004      	b.n	800042a <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 8000420:	797a      	ldrb	r2, [r7, #5]
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	4413      	add	r3, r2
 8000426:	71fb      	strb	r3, [r7, #7]
      break;      
 8000428:	bf00      	nop
  }
  return dx;
 800042a:	79fb      	ldrb	r3, [r7, #7]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bc90      	pop	{r4, r7}
 8000434:	4770      	bx	lr

08000436 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b088      	sub	sp, #32
 800043a:	af02      	add	r7, sp, #8
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	70fb      	strb	r3, [r7, #3]
 8000442:	4613      	mov	r3, r2
 8000444:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	3354      	adds	r3, #84	; 0x54
 800044a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000456:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800045e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000466:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8000468:	7bfa      	ldrb	r2, [r7, #15]
 800046a:	7d7b      	ldrb	r3, [r7, #21]
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8000474:	7dfa      	ldrb	r2, [r7, #23]
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	429a      	cmp	r2, r3
 800047a:	d201      	bcs.n	8000480 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800047c:	7dfb      	ldrb	r3, [r7, #23]
 800047e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8000480:	693b      	ldr	r3, [r7, #16]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	795b      	ldrb	r3, [r3, #5]
 800048a:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800048c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000490:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	7b9b      	ldrb	r3, [r3, #14]
 8000498:	7bb8      	ldrb	r0, [r7, #14]
 800049a:	f7ff ff9c 	bl	80003d6 <u8g2_add_vector_x>
 800049e:	4603      	mov	r3, r0
 80004a0:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80004a2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80004a6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	7b9b      	ldrb	r3, [r3, #14]
 80004ae:	7b78      	ldrb	r0, [r7, #13]
 80004b0:	f7ff ff61 	bl	8000376 <u8g2_add_vector_y>
 80004b4:	4603      	mov	r3, r0
 80004b6:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80004b8:	78bb      	ldrb	r3, [r7, #2]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d00f      	beq.n	80004de <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	7b1a      	ldrb	r2, [r3, #12]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80004c8:	693b      	ldr	r3, [r7, #16]
 80004ca:	7b9b      	ldrb	r3, [r3, #14]
 80004cc:	7db8      	ldrb	r0, [r7, #22]
 80004ce:	7b7a      	ldrb	r2, [r7, #13]
 80004d0:	7bb9      	ldrb	r1, [r7, #14]
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	4603      	mov	r3, r0
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f000 fbd1 	bl	8000c7e <u8g2_DrawHVLine>
 80004dc:	e012      	b.n	8000504 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	7adb      	ldrb	r3, [r3, #11]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10e      	bne.n	8000504 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	7b5a      	ldrb	r2, [r3, #13]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	7b9b      	ldrb	r3, [r3, #14]
 80004f4:	7db8      	ldrb	r0, [r7, #22]
 80004f6:	7b7a      	ldrb	r2, [r7, #13]
 80004f8:	7bb9      	ldrb	r1, [r7, #14]
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	4603      	mov	r3, r0
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 fbbd 	bl	8000c7e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8000504:	7dfa      	ldrb	r2, [r7, #23]
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	429a      	cmp	r2, r3
 800050a:	d309      	bcc.n	8000520 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 800050c:	7dfa      	ldrb	r2, [r7, #23]
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	757b      	strb	r3, [r7, #21]
    ly++;
 8000518:	7d3b      	ldrb	r3, [r7, #20]
 800051a:	3301      	adds	r3, #1
 800051c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800051e:	e79f      	b.n	8000460 <u8g2_font_decode_len+0x2a>
      break;
 8000520:	bf00      	nop
  }
  lx += cnt;
 8000522:	7d7a      	ldrb	r2, [r7, #21]
 8000524:	7dfb      	ldrb	r3, [r7, #23]
 8000526:	4413      	add	r3, r2
 8000528:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800052a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8000532:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	71da      	strb	r2, [r3, #7]
  
}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b084      	sub	sp, #16
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
 800054a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3354      	adds	r3, #84	; 0x54
 8000550:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2200      	movs	r2, #0
 800055c:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000564:	4619      	mov	r1, r3
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f7ff fe98 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 800056c:	4603      	mov	r3, r0
 800056e:	b25a      	sxtb	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800057a:	4619      	mov	r1, r3
 800057c:	68f8      	ldr	r0, [r7, #12]
 800057e:	f7ff fe8d 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 8000582:	4603      	mov	r3, r0
 8000584:	b25a      	sxtb	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	7b1b      	ldrb	r3, [r3, #12]
 8000598:	2b00      	cmp	r3, #0
 800059a:	bf0c      	ite	eq
 800059c:	2301      	moveq	r3, #1
 800059e:	2300      	movne	r3, #0
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	461a      	mov	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	735a      	strb	r2, [r3, #13]
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3354      	adds	r3, #84	; 0x54
 80005be:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80005c0:	6839      	ldr	r1, [r7, #0]
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff ffbd 	bl	8000542 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80005ce:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80005d6:	4619      	mov	r1, r3
 80005d8:	6938      	ldr	r0, [r7, #16]
 80005da:	f7ff fea9 	bl	8000330 <u8g2_font_decode_get_signed_bits>
 80005de:	4603      	mov	r3, r0
 80005e0:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80005e8:	4619      	mov	r1, r3
 80005ea:	6938      	ldr	r0, [r7, #16]
 80005ec:	f7ff fea0 	bl	8000330 <u8g2_font_decode_get_signed_bits>
 80005f0:	4603      	mov	r3, r0
 80005f2:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80005fa:	4619      	mov	r1, r3
 80005fc:	6938      	ldr	r0, [r7, #16]
 80005fe:	f7ff fe97 	bl	8000330 <u8g2_font_decode_get_signed_bits>
 8000602:	4603      	mov	r3, r0
 8000604:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	f340 80cf 	ble.w	80007b0 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	7918      	ldrb	r0, [r3, #4]
 8000616:	7bfa      	ldrb	r2, [r7, #15]
 8000618:	7b7b      	ldrb	r3, [r7, #13]
 800061a:	4413      	add	r3, r2
 800061c:	b2db      	uxtb	r3, r3
 800061e:	425b      	negs	r3, r3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	b25a      	sxtb	r2, r3
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	7b9b      	ldrb	r3, [r3, #14]
 8000628:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800062c:	f7ff fed3 	bl	80003d6 <u8g2_add_vector_x>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	7958      	ldrb	r0, [r3, #5]
 800063c:	7bfa      	ldrb	r2, [r7, #15]
 800063e:	7b7b      	ldrb	r3, [r7, #13]
 8000640:	4413      	add	r3, r2
 8000642:	b2db      	uxtb	r3, r3
 8000644:	425b      	negs	r3, r3
 8000646:	b2db      	uxtb	r3, r3
 8000648:	b25a      	sxtb	r2, r3
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	7b9b      	ldrb	r3, [r3, #14]
 800064e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000652:	f7ff fe90 	bl	8000376 <u8g2_add_vector_y>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	795b      	ldrb	r3, [r3, #5]
 8000668:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 800066a:	7dfb      	ldrb	r3, [r7, #23]
 800066c:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 800066e:	7d7b      	ldrb	r3, [r7, #21]
 8000670:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	7b9b      	ldrb	r3, [r3, #14]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d852      	bhi.n	8000720 <u8g2_font_decode_glyph+0x170>
 800067a:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <u8g2_font_decode_glyph+0xd0>)
 800067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000680:	08000691 	.word	0x08000691
 8000684:	080006a9 	.word	0x080006a9
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006fd 	.word	0x080006fd
      {
	case 0:
	    x1 += decode->glyph_width;
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	7dbb      	ldrb	r3, [r7, #22]
 800069a:	4413      	add	r3, r2
 800069c:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 800069e:	7bfa      	ldrb	r2, [r7, #15]
 80006a0:	7d3b      	ldrb	r3, [r7, #20]
 80006a2:	4413      	add	r3, r2
 80006a4:	753b      	strb	r3, [r7, #20]
	    break;
 80006a6:	e03b      	b.n	8000720 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	7dfa      	ldrb	r2, [r7, #23]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	3301      	adds	r3, #1
 80006b4:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80006b6:	7dbb      	ldrb	r3, [r7, #22]
 80006b8:	3301      	adds	r3, #1
 80006ba:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	7d3b      	ldrb	r3, [r7, #20]
 80006c6:	4413      	add	r3, r2
 80006c8:	753b      	strb	r3, [r7, #20]
	    break;
 80006ca:	e029      	b.n	8000720 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	7dfa      	ldrb	r2, [r7, #23]
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	3301      	adds	r3, #1
 80006de:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80006e0:	7dbb      	ldrb	r3, [r7, #22]
 80006e2:	3301      	adds	r3, #1
 80006e4:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	7d7a      	ldrb	r2, [r7, #21]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80006ee:	7d7b      	ldrb	r3, [r7, #21]
 80006f0:	3301      	adds	r3, #1
 80006f2:	757b      	strb	r3, [r7, #21]
	    y1++;
 80006f4:	7d3b      	ldrb	r3, [r7, #20]
 80006f6:	3301      	adds	r3, #1
 80006f8:	753b      	strb	r3, [r7, #20]
	    break;	  
 80006fa:	e011      	b.n	8000720 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 80006fc:	7bfa      	ldrb	r2, [r7, #15]
 80006fe:	7dbb      	ldrb	r3, [r7, #22]
 8000700:	4413      	add	r3, r2
 8000702:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	7d7a      	ldrb	r2, [r7, #21]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000712:	7d7b      	ldrb	r3, [r7, #21]
 8000714:	3301      	adds	r3, #1
 8000716:	757b      	strb	r3, [r7, #21]
	    y1++;
 8000718:	7d3b      	ldrb	r3, [r7, #20]
 800071a:	3301      	adds	r3, #1
 800071c:	753b      	strb	r3, [r7, #20]
	    break;	  
 800071e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8000720:	7db8      	ldrb	r0, [r7, #22]
 8000722:	7d7a      	ldrb	r2, [r7, #21]
 8000724:	7df9      	ldrb	r1, [r7, #23]
 8000726:	7d3b      	ldrb	r3, [r7, #20]
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	4603      	mov	r3, r0
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 fb5c 	bl	8000dea <u8g2_IsIntersection>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d102      	bne.n	800073e <u8g2_font_decode_glyph+0x18e>
	return d;
 8000738:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800073c:	e03a      	b.n	80007b4 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	2200      	movs	r2, #0
 8000742:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	2200      	movs	r2, #0
 8000748:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000750:	4619      	mov	r1, r3
 8000752:	6938      	ldr	r0, [r7, #16]
 8000754:	f7ff fda2 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 8000758:	4603      	mov	r3, r0
 800075a:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8000762:	4619      	mov	r1, r3
 8000764:	6938      	ldr	r0, [r7, #16]
 8000766:	f7ff fd99 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 800076a:	4603      	mov	r3, r0
 800076c:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800076e:	7afb      	ldrb	r3, [r7, #11]
 8000770:	2200      	movs	r2, #0
 8000772:	4619      	mov	r1, r3
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fe5e 	bl	8000436 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800077a:	7abb      	ldrb	r3, [r7, #10]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff fe58 	bl	8000436 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8000786:	2101      	movs	r1, #1
 8000788:	6938      	ldr	r0, [r7, #16]
 800078a:	f7ff fd87 	bl	800029c <u8g2_font_decode_get_unsigned_bits>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1ec      	bne.n	800076e <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800079a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800079e:	429a      	cmp	r2, r3
 80007a0:	dd00      	ble.n	80007a4 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80007a2:	e7d2      	b.n	800074a <u8g2_font_decode_glyph+0x19a>
	break;
 80007a4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	7b1a      	ldrb	r2, [r3, #12]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 80007b0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007cc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3317      	adds	r3, #23
 80007d2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	2bff      	cmp	r3, #255	; 0xff
 80007d8:	d82a      	bhi.n	8000830 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80007da:	887b      	ldrh	r3, [r7, #2]
 80007dc:	2b60      	cmp	r3, #96	; 0x60
 80007de:	d907      	bls.n	80007f0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80007e6:	461a      	mov	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4413      	add	r3, r2
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e009      	b.n	8000804 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80007f0:	887b      	ldrh	r3, [r7, #2]
 80007f2:	2b40      	cmp	r3, #64	; 0x40
 80007f4:	d906      	bls.n	8000804 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80007fc:	461a      	mov	r2, r3
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	4413      	add	r3, r2
 8000802:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d04e      	beq.n	80008ac <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b29b      	uxth	r3, r3
 8000814:	887a      	ldrh	r2, [r7, #2]
 8000816:	429a      	cmp	r2, r3
 8000818:	d102      	bne.n	8000820 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3302      	adds	r3, #2
 800081e:	e049      	b.n	80008b4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	4413      	add	r3, r2
 800082c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800082e:	e7e9      	b.n	8000804 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8000836:	461a      	mov	r2, r3
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	4413      	add	r3, r2
 800083c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8000842:	2100      	movs	r1, #0
 8000844:	6938      	ldr	r0, [r7, #16]
 8000846:	f7ff fd0a 	bl	800025e <u8g2_font_get_word>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	4413      	add	r3, r2
 8000852:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8000854:	2102      	movs	r1, #2
 8000856:	6938      	ldr	r0, [r7, #16]
 8000858:	f7ff fd01 	bl	800025e <u8g2_font_get_word>
 800085c:	4603      	mov	r3, r0
 800085e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	3304      	adds	r3, #4
 8000864:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8000866:	89fa      	ldrh	r2, [r7, #14]
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	429a      	cmp	r2, r3
 800086c:	d3e9      	bcc.n	8000842 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8000874:	89fb      	ldrh	r3, [r7, #14]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b29a      	uxth	r2, r3
 8000882:	89fb      	ldrh	r3, [r7, #14]
 8000884:	4313      	orrs	r3, r2
 8000886:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8000888:	89fb      	ldrh	r3, [r7, #14]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d010      	beq.n	80008b0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800088e:	89fa      	ldrh	r2, [r7, #14]
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	429a      	cmp	r2, r3
 8000894:	d102      	bne.n	800089c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	3303      	adds	r3, #3
 800089a:	e00b      	b.n	80008b4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	3302      	adds	r3, #2
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	4413      	add	r3, r2
 80008a8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80008aa:	e7e0      	b.n	800086e <u8g2_font_get_glyph_data+0xb2>
	break;
 80008ac:	bf00      	nop
 80008ae:	e000      	b.n	80008b2 <u8g2_font_get_glyph_data+0xf6>
	break;
 80008b0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	4608      	mov	r0, r1
 80008c6:	4611      	mov	r1, r2
 80008c8:	461a      	mov	r2, r3
 80008ca:	4603      	mov	r3, r0
 80008cc:	70fb      	strb	r3, [r7, #3]
 80008ce:	460b      	mov	r3, r1
 80008d0:	70bb      	strb	r3, [r7, #2]
 80008d2:	4613      	mov	r3, r2
 80008d4:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	78fa      	ldrb	r2, [r7, #3]
 80008de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	78ba      	ldrb	r2, [r7, #2]
 80008e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80008ea:	883b      	ldrh	r3, [r7, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ff64 	bl	80007bc <u8g2_font_get_glyph_data>
 80008f4:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d005      	beq.n	8000908 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff fe56 	bl	80005b0 <u8g2_font_decode_glyph>
 8000904:	4603      	mov	r3, r0
 8000906:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	460b      	mov	r3, r1
 800091c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 800091e:	887b      	ldrh	r3, [r7, #2]
 8000920:	4619      	mov	r1, r3
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ff4a 	bl	80007bc <u8g2_font_get_glyph_data>
 8000928:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8000930:	2300      	movs	r3, #0
 8000932:	e027      	b.n	8000984 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8000934:	68f9      	ldr	r1, [r7, #12]
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fe03 	bl	8000542 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8000948:	4619      	mov	r1, r3
 800094a:	4610      	mov	r0, r2
 800094c:	f7ff fcf0 	bl	8000330 <u8g2_font_decode_get_signed_bits>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8000966:	4619      	mov	r1, r3
 8000968:	4610      	mov	r0, r2
 800096a:	f7ff fce1 	bl	8000330 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800097a:	4619      	mov	r1, r3
 800097c:	4610      	mov	r0, r2
 800097e:	f7ff fcd7 	bl	8000330 <u8g2_font_decode_get_signed_bits>
 8000982:	4603      	mov	r3, r0
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	4608      	mov	r0, r1
 8000996:	4611      	mov	r1, r2
 8000998:	461a      	mov	r2, r3
 800099a:	4603      	mov	r3, r0
 800099c:	70fb      	strb	r3, [r7, #3]
 800099e:	460b      	mov	r3, r1
 80009a0:	70bb      	strb	r3, [r7, #2]
 80009a2:	4613      	mov	r3, r2
 80009a4:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d833      	bhi.n	8000a18 <u8g2_DrawGlyph+0x8c>
 80009b0:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <u8g2_DrawGlyph+0x2c>)
 80009b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b6:	bf00      	nop
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	080009dd 	.word	0x080009dd
 80009c0:	080009f1 	.word	0x080009f1
 80009c4:	08000a05 	.word	0x08000a05
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	4798      	blx	r3
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	78bb      	ldrb	r3, [r7, #2]
 80009d6:	4413      	add	r3, r2
 80009d8:	70bb      	strb	r3, [r7, #2]
      break;
 80009da:	e01d      	b.n	8000a18 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	4798      	blx	r3
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	1a9b      	subs	r3, r3, r2
 80009ec:	70fb      	strb	r3, [r7, #3]
      break;
 80009ee:	e013      	b.n	8000a18 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	4798      	blx	r3
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	78bb      	ldrb	r3, [r7, #2]
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	70bb      	strb	r3, [r7, #2]
      break;
 8000a02:	e009      	b.n	8000a18 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	4798      	blx	r3
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	4413      	add	r3, r2
 8000a14:	70fb      	strb	r3, [r7, #3]
      break;
 8000a16:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8000a18:	883b      	ldrh	r3, [r7, #0]
 8000a1a:	78ba      	ldrb	r2, [r7, #2]
 8000a1c:	78f9      	ldrb	r1, [r7, #3]
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ff4c 	bl	80008bc <u8g2_font_draw_glyph>
 8000a24:	4603      	mov	r3, r0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop

08000a30 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	72fb      	strb	r3, [r7, #11]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 f9fc 	bl	8000e40 <u8x8_utf8_init>
  sum = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	7812      	ldrb	r2, [r2, #0]
 8000a54:	4611      	mov	r1, r2
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	4798      	blx	r3
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8000a5e:	8abb      	ldrh	r3, [r7, #20]
 8000a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d038      	beq.n	8000ada <u8g2_draw_string+0xaa>
      break;
    str++;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8000a6e:	8abb      	ldrh	r3, [r7, #20]
 8000a70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d0e9      	beq.n	8000a4c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8000a78:	8abb      	ldrh	r3, [r7, #20]
 8000a7a:	7aba      	ldrb	r2, [r7, #10]
 8000a7c:	7af9      	ldrb	r1, [r7, #11]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff ff84 	bl	800098c <u8g2_DrawGlyph>
 8000a84:	4603      	mov	r3, r0
 8000a86:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d81e      	bhi.n	8000ad0 <u8g2_draw_string+0xa0>
 8000a92:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <u8g2_draw_string+0x68>)
 8000a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a98:	08000aa9 	.word	0x08000aa9
 8000a9c:	08000ab3 	.word	0x08000ab3
 8000aa0:	08000abd 	.word	0x08000abd
 8000aa4:	08000ac7 	.word	0x08000ac7
      {
	case 0:
	  x += delta;
 8000aa8:	7afa      	ldrb	r2, [r7, #11]
 8000aaa:	7cfb      	ldrb	r3, [r7, #19]
 8000aac:	4413      	add	r3, r2
 8000aae:	72fb      	strb	r3, [r7, #11]
	  break;
 8000ab0:	e00e      	b.n	8000ad0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8000ab2:	7aba      	ldrb	r2, [r7, #10]
 8000ab4:	7cfb      	ldrb	r3, [r7, #19]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	72bb      	strb	r3, [r7, #10]
	  break;
 8000aba:	e009      	b.n	8000ad0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8000abc:	7afa      	ldrb	r2, [r7, #11]
 8000abe:	7cfb      	ldrb	r3, [r7, #19]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	72fb      	strb	r3, [r7, #11]
	  break;
 8000ac4:	e004      	b.n	8000ad0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8000ac6:	7aba      	ldrb	r2, [r7, #10]
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	72bb      	strb	r3, [r7, #10]
	  break;
 8000ace:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8000ad0:	7dfa      	ldrb	r2, [r7, #23]
 8000ad2:	7cfb      	ldrb	r3, [r7, #19]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8000ad8:	e7b8      	b.n	8000a4c <u8g2_draw_string+0x1c>
      break;
 8000ada:	bf00      	nop
    }
  }
  return sum;
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop

08000ae8 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	72fb      	strb	r3, [r7, #11]
 8000af6:	4613      	mov	r3, r2
 8000af8:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <u8g2_DrawStr+0x30>)
 8000afe:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8000b00:	7aba      	ldrb	r2, [r7, #10]
 8000b02:	7af9      	ldrb	r1, [r7, #11]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f7ff ff92 	bl	8000a30 <u8g2_draw_string>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	08000e5b 	.word	0x08000e5b

08000b1c <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 f986 	bl	8000e40 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	7812      	ldrb	r2, [r2, #0]
 8000b44:	4611      	mov	r1, r2
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	4798      	blx	r3
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 8000b4e:	89bb      	ldrh	r3, [r7, #12]
 8000b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d013      	beq.n	8000b80 <u8g2_string_width+0x64>
      break;
    str++;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8000b5e:	89bb      	ldrh	r3, [r7, #12]
 8000b60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d0e9      	beq.n	8000b3c <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8000b68:	89bb      	ldrh	r3, [r7, #12]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fed0 	bl	8000912 <u8g2_GetGlyphWidth>
 8000b72:	4603      	mov	r3, r0
 8000b74:	73bb      	strb	r3, [r7, #14]
      w += dx;
 8000b76:	7bfa      	ldrb	r2, [r7, #15]
 8000b78:	7bbb      	ldrb	r3, [r7, #14]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8000b7e:	e7dd      	b.n	8000b3c <u8g2_string_width+0x20>
      break;
 8000b80:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d011      	beq.n	8000bb0 <u8g2_string_width+0x94>
  {
    w -= dx;
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	4413      	add	r3, r2
 8000bae:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <u8g2_GetStrWidth+0x24>)
 8000bca:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8000bcc:	6839      	ldr	r1, [r7, #0]
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffa4 	bl	8000b1c <u8g2_string_width>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	08000e5b 	.word	0x08000e5b

08000be4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
 8000c02:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	7dbb      	ldrb	r3, [r7, #22]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8000c0e:	7dfa      	ldrb	r2, [r7, #23]
 8000c10:	7dbb      	ldrb	r3, [r7, #22]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d90b      	bls.n	8000c2e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8000c16:	7dfa      	ldrb	r2, [r7, #23]
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d205      	bcs.n	8000c2a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	75bb      	strb	r3, [r7, #22]
      b--;
 8000c22:	7dbb      	ldrb	r3, [r7, #22]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	75bb      	strb	r3, [r7, #22]
 8000c28:	e001      	b.n	8000c2e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8000c2e:	7dfa      	ldrb	r2, [r7, #23]
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d301      	bcc.n	8000c3a <u8g2_clip_intersection2+0x56>
    return 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e01c      	b.n	8000c74 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8000c3a:	7dba      	ldrb	r2, [r7, #22]
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d801      	bhi.n	8000c46 <u8g2_clip_intersection2+0x62>
    return 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e016      	b.n	8000c74 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8000c46:	7dfa      	ldrb	r2, [r7, #23]
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d201      	bcs.n	8000c52 <u8g2_clip_intersection2+0x6e>
    a = c;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8000c52:	7dba      	ldrb	r2, [r7, #22]
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d901      	bls.n	8000c5e <u8g2_clip_intersection2+0x7a>
    b = d;
 8000c5a:	79bb      	ldrb	r3, [r7, #6]
 8000c5c:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	7dfa      	ldrb	r2, [r7, #23]
 8000c62:	701a      	strb	r2, [r3, #0]
  b -= a;
 8000c64:	7dba      	ldrb	r2, [r7, #22]
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	7dba      	ldrb	r2, [r7, #22]
 8000c70:	701a      	strb	r2, [r3, #0]
  return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	371c      	adds	r7, #28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8000c7e:	b590      	push	{r4, r7, lr}
 8000c80:	b085      	sub	sp, #20
 8000c82:	af02      	add	r7, sp, #8
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	4608      	mov	r0, r1
 8000c88:	4611      	mov	r1, r2
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	70fb      	strb	r3, [r7, #3]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70bb      	strb	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d06d      	beq.n	8000d7e <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8000ca2:	787b      	ldrb	r3, [r7, #1]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d06a      	beq.n	8000d7e <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d918      	bls.n	8000ce0 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8000cae:	7e3b      	ldrb	r3, [r7, #24]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d109      	bne.n	8000cc8 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8000cb4:	78fa      	ldrb	r2, [r7, #3]
 8000cb6:	787b      	ldrb	r3, [r7, #1]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	70fb      	strb	r3, [r7, #3]
	  x++;
 8000cbe:	78fb      	ldrb	r3, [r7, #3]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	70fb      	strb	r3, [r7, #3]
 8000cc6:	e00b      	b.n	8000ce0 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8000cc8:	7e3b      	ldrb	r3, [r7, #24]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d108      	bne.n	8000ce0 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8000cce:	78ba      	ldrb	r2, [r7, #2]
 8000cd0:	787b      	ldrb	r3, [r7, #1]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	70bb      	strb	r3, [r7, #2]
	  y++;
 8000cd8:	78bb      	ldrb	r3, [r7, #2]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8000ce0:	7e3b      	ldrb	r3, [r7, #24]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8000ce8:	7e3b      	ldrb	r3, [r7, #24]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d119      	bne.n	8000d22 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000cf4:	78bb      	ldrb	r3, [r7, #2]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d838      	bhi.n	8000d6c <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8000d00:	78bb      	ldrb	r3, [r7, #2]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d934      	bls.n	8000d70 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d12:	1c79      	adds	r1, r7, #1
 8000d14:	1cf8      	adds	r0, r7, #3
 8000d16:	f7ff ff65 	bl	8000be4 <u8g2_clip_intersection2>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d119      	bne.n	8000d54 <u8g2_DrawHVLine+0xd6>
	  return;
 8000d20:	e02d      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d822      	bhi.n	8000d74 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d91e      	bls.n	8000d78 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d46:	1c79      	adds	r1, r7, #1
 8000d48:	1cb8      	adds	r0, r7, #2
 8000d4a:	f7ff ff4b 	bl	8000be4 <u8g2_clip_intersection2>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d013      	beq.n	8000d7c <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	689c      	ldr	r4, [r3, #8]
 8000d5a:	78f9      	ldrb	r1, [r7, #3]
 8000d5c:	78ba      	ldrb	r2, [r7, #2]
 8000d5e:	7878      	ldrb	r0, [r7, #1]
 8000d60:	7e3b      	ldrb	r3, [r7, #24]
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	4603      	mov	r3, r0
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	47a0      	blx	r4
 8000d6a:	e008      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
	  return;
 8000d6c:	bf00      	nop
 8000d6e:	e006      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
	  return;
 8000d70:	bf00      	nop
 8000d72:	e004      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
	  return;
 8000d74:	bf00      	nop
 8000d76:	e002      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
	  return;
 8000d78:	bf00      	nop
 8000d7a:	e000      	b.n	8000d7e <u8g2_DrawHVLine+0x100>
	  return;
 8000d7c:	bf00      	nop
    }
}
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd90      	pop	{r4, r7, pc}

08000d84 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8000d84:	b490      	push	{r4, r7}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	461a      	mov	r2, r3
 8000d92:	4623      	mov	r3, r4
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	4603      	mov	r3, r0
 8000d98:	71bb      	strb	r3, [r7, #6]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	717b      	strb	r3, [r7, #5]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8000da2:	797a      	ldrb	r2, [r7, #5]
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d20d      	bcs.n	8000dc6 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8000daa:	793a      	ldrb	r2, [r7, #4]
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d901      	bls.n	8000db6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e014      	b.n	8000de0 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8000db6:	797a      	ldrb	r2, [r7, #5]
 8000db8:	793b      	ldrb	r3, [r7, #4]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d901      	bls.n	8000dc2 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e00c      	b.n	8000de0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8000dc6:	793a      	ldrb	r2, [r7, #4]
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d907      	bls.n	8000dde <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8000dce:	797a      	ldrb	r2, [r7, #5]
 8000dd0:	793b      	ldrb	r3, [r7, #4]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d901      	bls.n	8000dda <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e002      	b.n	8000de0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8000dde:	2300      	movs	r3, #0
    }
  }
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc90      	pop	{r4, r7}
 8000de8:	4770      	bx	lr

08000dea <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	4608      	mov	r0, r1
 8000df4:	4611      	mov	r1, r2
 8000df6:	461a      	mov	r2, r3
 8000df8:	4603      	mov	r3, r0
 8000dfa:	70fb      	strb	r3, [r7, #3]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70bb      	strb	r3, [r7, #2]
 8000e00:	4613      	mov	r3, r2
 8000e02:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8000e10:	7c3b      	ldrb	r3, [r7, #16]
 8000e12:	78ba      	ldrb	r2, [r7, #2]
 8000e14:	f7ff ffb6 	bl	8000d84 <u8g2_is_intersection_decision_tree>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <u8g2_IsIntersection+0x38>
    return 0; 
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e00a      	b.n	8000e38 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8000e2e:	787b      	ldrb	r3, [r7, #1]
 8000e30:	78fa      	ldrb	r2, [r7, #3]
 8000e32:	f7ff ffa7 	bl	8000d84 <u8g2_is_intersection_decision_tree>
 8000e36:	4603      	mov	r3, r0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <u8x8_ascii_next+0x18>
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	2b0a      	cmp	r3, #10
 8000e70:	d102      	bne.n	8000e78 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8000e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e76:	e001      	b.n	8000e7c <u8x8_ascii_next+0x22>
  return b;
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	b29b      	uxth	r3, r3
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8000e86:	b590      	push	{r4, r7, lr}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	4608      	mov	r0, r1
 8000e90:	4611      	mov	r1, r2
 8000e92:	461a      	mov	r2, r3
 8000e94:	4603      	mov	r3, r0
 8000e96:	70fb      	strb	r3, [r7, #3]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70bb      	strb	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8000ea4:	78bb      	ldrb	r3, [r7, #2]
 8000ea6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689c      	ldr	r4, [r3, #8]
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	2201      	movs	r2, #1
 8000eba:	210f      	movs	r1, #15
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	47a0      	blx	r4
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd90      	pop	{r4, r7, pc}

08000eca <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8000eca:	b590      	push	{r4, r7, lr}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689c      	ldr	r4, [r3, #8]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2110      	movs	r1, #16
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	47a0      	blx	r4
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}

08000ee8 <_ZN10ST7920_LCD12TEXT_4_WRITEC1Ev>:
	typedef struct
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
	}TEXT_4_WRITE;
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 f9ec 	bl	80052d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_ZN10ST7920_LCDC1Ev>:
	u8g2_Setup_st7920_p_128x64_f(U8G2_Display, U8G2_R0, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
	u8g2_InitDisplay(U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
	u8g2_SetPowerSave(U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
}

ST7920_LCD::ST7920_LCD()
 8000f02:	b590      	push	{r4, r7, lr}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3308      	adds	r3, #8
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ffea 	bl	8000ee8 <_ZN10ST7920_LCD12TEXT_4_WRITEC1Ev>
{
	U8G2_Display = new u8g2_t();
 8000f14:	2084      	movs	r0, #132	; 0x84
 8000f16:	f004 f8fb 	bl	8005110 <_Znwj>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461c      	mov	r4, r3
 8000f1e:	4620      	mov	r0, r4
 8000f20:	2384      	movs	r3, #132	; 0x84
 8000f22:	461a      	mov	r2, r3
 8000f24:	2100      	movs	r1, #0
 8000f26:	f004 fb57 	bl	80055d8 <memset>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601c      	str	r4, [r3, #0]
	DispParams.width = 128;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	711a      	strb	r2, [r3, #4]
	DispParams.high = 64;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2240      	movs	r2, #64	; 0x40
 8000f38:	715a      	strb	r2, [r3, #5]
}
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}

08000f44 <_ZN10ST7920_LCD13setTextCenterEv>:
//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
}

uint8_t ST7920_LCD::setTextCenter()
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
	NewPos = (DispParams.width - textToWrite.textLen) / 2;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	791b      	ldrb	r3, [r3, #4]
 8000f54:	461a      	mov	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	0fda      	lsrs	r2, r3, #31
 8000f60:	4413      	add	r3, r2
 8000f62:	105b      	asrs	r3, r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <_ZN10ST7920_LCD13setTextMiddleEv>:
	NewPos = 0 + textToWrite.textHigh + 1;
	return NewPos; // @suppress("Return with parenthesis")
}

uint8_t ST7920_LCD::setTextMiddle()
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]
	NewPos = (DispParams.high - textToWrite.textHigh + 1) / 2;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	795b      	ldrb	r3, [r3, #5]
 8000f82:	461a      	mov	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	0fda      	lsrs	r2, r3, #31
 8000f90:	4413      	add	r3, r2
 8000f92:	105b      	asrs	r3, r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
	...

08000fa4 <_ZN10ST7920_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh>:
	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	return NewPos; // @suppress("Return with parenthesis")
}

void ST7920_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos)
{
 8000fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	71bb      	strb	r3, [r7, #6]
	textToWrite.textLen = 0;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2020 	strb.w	r2, [r3, #32]
	textToWrite.textHigh = 0;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	textToWrite.text = "";
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3308      	adds	r3, #8
 8000fce:	4921      	ldr	r1, [pc, #132]	; (8001054 <_ZN10ST7920_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh+0xb0>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 fa20 	bl	8005416 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textLen = u8g2_GetStrWidth(U8G2_Display, Text.c_str());
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681c      	ldr	r4, [r3, #0]
 8000fda:	68b8      	ldr	r0, [r7, #8]
 8000fdc:	f004 fa1f 	bl	800541e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff fde9 	bl	8000bbc <u8g2_GetStrWidth>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f883 2020 	strb.w	r2, [r3, #32]
	textToWrite.textHigh = u8g2_GetAscent(U8G2_Display);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if(textToWrite.textLen < DispParams.width)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f893 2020 	ldrb.w	r2, [r3, #32]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	d21c      	bcs.n	800104c <_ZN10ST7920_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh+0xa8>
	{
		textToWrite.text = Text;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3308      	adds	r3, #8
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	4618      	mov	r0, r3
 800101a:	f004 f966 	bl	80052ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		u8g2_DrawStr(U8G2_Display, setTextCenter(), setTextMiddle(), textToWrite.text.c_str());
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681c      	ldr	r4, [r3, #0]
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff ff8e 	bl	8000f44 <_ZN10ST7920_LCD13setTextCenterEv>
 8001028:	4603      	mov	r3, r0
 800102a:	461d      	mov	r5, r3
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f7ff ffa0 	bl	8000f72 <_ZN10ST7920_LCD13setTextMiddleEv>
 8001032:	4603      	mov	r3, r0
 8001034:	461e      	mov	r6, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3308      	adds	r3, #8
 800103a:	4618      	mov	r0, r3
 800103c:	f004 f9ef 	bl	800541e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001040:	4603      	mov	r3, r0
 8001042:	4632      	mov	r2, r6
 8001044:	4629      	mov	r1, r5
 8001046:	4620      	mov	r0, r4
 8001048:	f7ff fd4e 	bl	8000ae8 <u8g2_DrawStr>
	}
	else
	{

	}
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001054:	080057f8 	.word	0x080057f8

08001058 <_ZN10ST7920_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void ST7920_LCD::testDisplay(String Text)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	u8g2_ClearBuffer(U8G2_Display);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f878 	bl	800015c <u8g2_ClearBuffer>
	drawString(Text, CENTER_POS, MIDDLE_POS);
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f004 f9fa 	bl	800546c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001078:	f107 0108 	add.w	r1, r7, #8
 800107c:	2347      	movs	r3, #71	; 0x47
 800107e:	2283      	movs	r2, #131	; 0x83
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff8f 	bl	8000fa4 <_ZN10ST7920_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhh>
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	4618      	mov	r0, r3
 800108c:	f004 f927 	bl	80052de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	u8g2_SendBuffer(U8G2_Display);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f8d4 	bl	8000242 <u8g2_SendBuffer>
}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <_ZN11SerialDebug11writeSerialEv>:
 */

#include "SerialDebug.h"

void SerialDebug::writeSerial()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 f921 	bl	80052f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80010b4:	4603      	mov	r3, r0
 80010b6:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 f9af 	bl	800541e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80010c0:	4601      	mov	r1, r0
 80010c2:	89fa      	ldrh	r2, [r7, #14]
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <_ZN11SerialDebug11writeSerialEv+0x30>)
 80010c8:	f003 fbf0 	bl	80048ac <HAL_UART_Transmit>
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200001f8 	.word	0x200001f8

080010d8 <_ZN11SerialDebugC1Ev>:

SerialDebug::SerialDebug()
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 f8f4 	bl	80052d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{


}
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void SerialDebug::sendDbgStr(std::string DbgStr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	if(!DbgStr.empty())
 80010fe:	6838      	ldr	r0, [r7, #0]
 8001100:	f004 f8fb 	bl	80052fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8001104:	4603      	mov	r3, r0
 8001106:	f083 0301 	eor.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
	{
		serialBuffer = DbgStr;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6839      	ldr	r1, [r7, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f004 f8e8 	bl	80052ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800111a:	e004      	b.n	8001126 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4905      	ldr	r1, [pc, #20]	; (8001134 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>)
 8001120:	4618      	mov	r0, r3
 8001122:	f004 f978 	bl	8005416 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	}
	writeSerial();
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffbc 	bl	80010a4 <_ZN11SerialDebug11writeSerialEv>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	080057fc 	.word	0x080057fc

08001138 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_ADC1_Init+0x74>)
 800114a:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <MX_ADC1_Init+0x78>)
 800114c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_ADC1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_ADC1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_ADC1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_ADC1_Init+0x74>)
 8001162:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001166:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_ADC1_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_ADC1_Init+0x74>)
 8001170:	2201      	movs	r2, #1
 8001172:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_ADC1_Init+0x74>)
 8001176:	f000 fda3 	bl	8001cc0 <HAL_ADC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001180:	f000 fa1a 	bl	80015b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001188:	2301      	movs	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_ADC1_Init+0x74>)
 8001196:	f000 fefd 	bl	8001f94 <HAL_ADC_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011a0:	f000 fa0a 	bl	80015b8 <Error_Handler>
  }

}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200000dc 	.word	0x200000dc
 80011b0:	40012400 	.word	0x40012400

080011b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a14      	ldr	r2, [pc, #80]	; (8001220 <HAL_ADC_MspInit+0x6c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d121      	bne.n	8001218 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 8001204:	2301      	movs	r3, #1
 8001206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001208:	2303      	movs	r3, #3
 800120a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_ADC_MspInit+0x74>)
 8001214:	f001 fa6e 	bl	80026f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40012400 	.word	0x40012400
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800

0800122c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <MX_GPIO_Init+0xd4>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a2e      	ldr	r2, [pc, #184]	; (8001300 <MX_GPIO_Init+0xd4>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <MX_GPIO_Init+0xd4>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_GPIO_Init+0xd4>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a28      	ldr	r2, [pc, #160]	; (8001300 <MX_GPIO_Init+0xd4>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_GPIO_Init+0xd4>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoCoupleCS_Pin|LcdCS_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	210c      	movs	r1, #12
 8001274:	4823      	ldr	r0, [pc, #140]	; (8001304 <MX_GPIO_Init+0xd8>)
 8001276:	f001 fc77 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Thermo_ctrl_Pin|FanCtrl_Pin|RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001280:	4820      	ldr	r0, [pc, #128]	; (8001304 <MX_GPIO_Init+0xd8>)
 8001282:	f001 fc71 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCoupleCS_Pin|LcdCS_Pin|FanCtrl_Pin;
 8001286:	f240 430c 	movw	r3, #1036	; 0x40c
 800128a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4619      	mov	r1, r3
 800129e:	4819      	ldr	r0, [pc, #100]	; (8001304 <MX_GPIO_Init+0xd8>)
 80012a0:	f001 fa28 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|LeftButton_Pin|OkButton_Pin;
 80012a4:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80012a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012ae:	2302      	movs	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4619      	mov	r1, r3
 80012b8:	4813      	ldr	r0, [pc, #76]	; (8001308 <MX_GPIO_Init+0xdc>)
 80012ba:	f001 fa1b 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DownButton_Pin;
 80012be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DownButton_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4619      	mov	r1, r3
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_GPIO_Init+0xdc>)
 80012d4:	f001 fa0e 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Thermo_ctrl_Pin|RedLed_Pin|GreenLed_Pin;
 80012d8:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 80012dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2302      	movs	r3, #2
 80012e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_GPIO_Init+0xd8>)
 80012f2:	f001 f9ff 	bl	80026f4 <HAL_GPIO_Init>

}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	40010800 	.word	0x40010800
 8001308:	40010c00 	.word	0x40010c00

0800130c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_I2C1_Init+0x50>)
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <MX_I2C1_Init+0x54>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_I2C1_Init+0x50>)
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_I2C1_Init+0x58>)
 800131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_I2C1_Init+0x50>)
 800132a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_I2C1_Init+0x50>)
 800134a:	f001 fc3f 	bl	8002bcc <HAL_I2C_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001354:	f000 f930 	bl	80015b8 <Error_Handler>
  }

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000010c 	.word	0x2000010c
 8001360:	40005400 	.word	0x40005400
 8001364:	000186a0 	.word	0x000186a0

08001368 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <HAL_I2C_MspInit+0x90>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d132      	bne.n	80013ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HAL_I2C_MspInit+0x94>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_I2C_MspInit+0x94>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_I2C_MspInit+0x94>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80013a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a6:	2312      	movs	r3, #18
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4812      	ldr	r0, [pc, #72]	; (8001400 <HAL_I2C_MspInit+0x98>)
 80013b6:	f001 f99d 	bl	80026f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_I2C_MspInit+0x9c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
 80013d0:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <HAL_I2C_MspInit+0x9c>)
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_I2C_MspInit+0x94>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_I2C_MspInit+0x94>)
 80013dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_I2C_MspInit+0x94>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40005400 	.word	0x40005400
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010c00 	.word	0x40010c00
 8001404:	40010000 	.word	0x40010000

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b096      	sub	sp, #88	; 0x58
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f000 fbd3 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001412:	f000 f86d 	bl	80014f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001416:	f7ff ff09 	bl	800122c <MX_GPIO_Init>
  MX_ADC1_Init();
 800141a:	f7ff fe8d 	bl	8001138 <MX_ADC1_Init>
  MX_I2C1_Init();
 800141e:	f7ff ff75 	bl	800130c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001422:	f000 f93b 	bl	800169c <MX_SPI1_Init>
  MX_TIM2_Init();
 8001426:	f000 faab 	bl	8001980 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800142a:	f000 fb13 	bl	8001a54 <MX_USART1_UART_Init>


  Dbg.sendDbgStr("Nella funzione main");
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4618      	mov	r0, r3
 8001434:	f003 fe86 	bl	8005144 <_ZNSaIcEC1Ev>
 8001438:	f107 021c 	add.w	r2, r7, #28
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4928      	ldr	r1, [pc, #160]	; (80014e0 <main+0xd8>)
 8001440:	4618      	mov	r0, r3
 8001442:	f004 f845 	bl	80054d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	4619      	mov	r1, r3
 800144a:	4826      	ldr	r0, [pc, #152]	; (80014e4 <main+0xdc>)
 800144c:	f7ff fe52 	bl	80010f4 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f003 ff43 	bl	80052de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fe72 	bl	8005146 <_ZNSaIcED1Ev>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Display.testDisplay("Test");
 8001462:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fe6c 	bl	8005144 <_ZNSaIcEC1Ev>
 800146c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001470:	f107 0320 	add.w	r3, r7, #32
 8001474:	491c      	ldr	r1, [pc, #112]	; (80014e8 <main+0xe0>)
 8001476:	4618      	mov	r0, r3
 8001478:	f004 f82a 	bl	80054d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	4619      	mov	r1, r3
 8001482:	481a      	ldr	r0, [pc, #104]	; (80014ec <main+0xe4>)
 8001484:	f7ff fde8 	bl	8001058 <_ZN10ST7920_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4618      	mov	r0, r3
 800148e:	f003 ff26 	bl	80052de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001492:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fe55 	bl	8005146 <_ZNSaIcED1Ev>
	  Dbg.sendDbgStr("Nella funzione main");
 800149c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 fe4f 	bl	8005144 <_ZNSaIcEC1Ev>
 80014a6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80014aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014ae:	490c      	ldr	r1, [pc, #48]	; (80014e0 <main+0xd8>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 f80d 	bl	80054d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80014b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014ba:	4619      	mov	r1, r3
 80014bc:	4809      	ldr	r0, [pc, #36]	; (80014e4 <main+0xdc>)
 80014be:	f7ff fe19 	bl	80010f4 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80014c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 ff09 	bl	80052de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80014cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 fe38 	bl	8005146 <_ZNSaIcED1Ev>
	  HAL_Delay(2000);
 80014d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014da:	f000 fbcf 	bl	8001c7c <HAL_Delay>
	  Display.testDisplay("Test");
 80014de:	e7c0      	b.n	8001462 <main+0x5a>
 80014e0:	08005818 	.word	0x08005818
 80014e4:	2000008c 	.word	0x2000008c
 80014e8:	0800582c 	.word	0x0800582c
 80014ec:	200000a8 	.word	0x200000a8

080014f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	; 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fa:	2228      	movs	r2, #40	; 0x28
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 f86a 	bl	80055d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001520:	2302      	movs	r3, #2
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001528:	2310      	movs	r3, #16
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152c:	2302      	movs	r3, #2
 800152e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001530:	2300      	movs	r3, #0
 8001532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001534:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001538:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153e:	4618      	mov	r0, r3
 8001540:	f001 fcfe 	bl	8002f40 <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf14      	ite	ne
 800154a:	2301      	movne	r3, #1
 800154c:	2300      	moveq	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 8001554:	f000 f830 	bl	80015b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f002 f854 	bl	8003620 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	bf14      	ite	ne
 800157e:	2301      	movne	r3, #1
 8001580:	2300      	moveq	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8001588:	f000 f816 	bl	80015b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800158c:	2302      	movs	r3, #2
 800158e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4618      	mov	r0, r3
 8001598:	f002 fa84 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 80015ac:	f000 f804 	bl	80015b8 <Error_Handler>
  }
}
 80015b0:	bf00      	nop
 80015b2:	3750      	adds	r7, #80	; 0x50
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <_ZN10ST7920_LCD12TEXT_4_WRITED1Ev>:
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fe7b 	bl	80052de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_ZN10ST7920_LCDD1Ev>:
class ST7920_LCD
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3308      	adds	r3, #8
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ffea 	bl	80015d8 <_ZN10ST7920_LCD12TEXT_4_WRITED1Ev>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_ZN11SerialDebugD1Ev>:


#define SEND_TIMEOUT	100
#define DBG_BUFFER		500

class SerialDebug
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fe60 	bl	80052de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_Z41__static_initialization_and_destruction_0ii>:
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10a      	bne.n	800164e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163e:	4293      	cmp	r3, r2
 8001640:	d105      	bne.n	800164e <_Z41__static_initialization_and_destruction_0ii+0x26>
SerialDebug Dbg;
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001644:	f7ff fd48 	bl	80010d8 <_ZN11SerialDebugC1Ev>
ST7920_LCD Display;
 8001648:	480b      	ldr	r0, [pc, #44]	; (8001678 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800164a:	f7ff fc5a 	bl	8000f02 <_ZN10ST7920_LCDC1Ev>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10a      	bne.n	800166a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800165a:	4293      	cmp	r3, r2
 800165c:	d105      	bne.n	800166a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001660:	f7ff ffc7 	bl	80015f2 <_ZN10ST7920_LCDD1Ev>
SerialDebug Dbg;
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001666:	f7ff ffd2 	bl	800160e <_ZN11SerialDebugD1Ev>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000008c 	.word	0x2000008c
 8001678:	200000a8 	.word	0x200000a8

0800167c <_GLOBAL__sub_I_Dbg>:
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
 8001680:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001684:	2001      	movs	r0, #1
 8001686:	f7ff ffcf 	bl	8001628 <_Z41__static_initialization_and_destruction_0ii>
 800168a:	bd80      	pop	{r7, pc}

0800168c <_GLOBAL__sub_D_Dbg>:
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
 8001690:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff ffc7 	bl	8001628 <_Z41__static_initialization_and_destruction_0ii>
 800169a:	bd80      	pop	{r7, pc}

0800169c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_SPI1_Init+0x64>)
 80016a2:	4a18      	ldr	r2, [pc, #96]	; (8001704 <MX_SPI1_Init+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_SPI1_Init+0x64>)
 80016a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_SPI1_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_SPI1_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_SPI1_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_SPI1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_SPI1_Init+0x64>)
 80016c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_SPI1_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_SPI1_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_SPI1_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_SPI1_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_SPI1_Init+0x64>)
 80016e8:	220a      	movs	r2, #10
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_SPI1_Init+0x64>)
 80016ee:	f002 fae3 	bl	8003cb8 <HAL_SPI_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016f8:	f7ff ff5e 	bl	80015b8 <Error_Handler>
  }

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000160 	.word	0x20000160
 8001704:	40013000 	.word	0x40013000

08001708 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <HAL_SPI_MspInit+0x88>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d12f      	bne.n	8001788 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_SPI_MspInit+0x8c>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <HAL_SPI_MspInit+0x8c>)
 800172e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_SPI_MspInit+0x8c>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_SPI_MspInit+0x8c>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a13      	ldr	r2, [pc, #76]	; (8001794 <HAL_SPI_MspInit+0x8c>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_SPI_MspInit+0x8c>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 8001758:	23a0      	movs	r3, #160	; 0xa0
 800175a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4619      	mov	r1, r3
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <HAL_SPI_MspInit+0x90>)
 800176c:	f000 ffc2 	bl	80026f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Miso_Pin;
 8001770:	2340      	movs	r3, #64	; 0x40
 8001772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Miso_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <HAL_SPI_MspInit+0x90>)
 8001784:	f000 ffb6 	bl	80026f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40013000 	.word	0x40013000
 8001794:	40021000 	.word	0x40021000
 8001798:	40010800 	.word	0x40010800

0800179c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_MspInit+0x5c>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <HAL_MspInit+0x5c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_MspInit+0x5c>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_MspInit+0x5c>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_MspInit+0x5c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_MspInit+0x5c>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_MspInit+0x60>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_MspInit+0x60>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <HardFault_Handler+0x4>

08001812 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <MemManage_Handler+0x4>

08001818 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <BusFault_Handler+0x4>

0800181e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <UsageFault_Handler+0x4>

08001824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184c:	f000 f9fa 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}

08001854 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <USART1_IRQHandler+0x10>)
 800185a:	f003 f8c1 	bl	80049e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200001f8 	.word	0x200001f8

08001868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	return 1;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <_kill>:

int _kill(int pid, int sig)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001880:	f003 fe4c 	bl	800551c <__errno>
 8001884:	4602      	mov	r2, r0
 8001886:	2316      	movs	r3, #22
 8001888:	6013      	str	r3, [r2, #0]
	return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_exit>:

void _exit (int status)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800189e:	f04f 31ff 	mov.w	r1, #4294967295
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffe7 	bl	8001876 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018a8:	e7fe      	b.n	80018a8 <_exit+0x12>
	...

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f003 fe1e 	bl	800551c <__errno>
 80018e0:	4602      	mov	r2, r0
 80018e2:	230c      	movs	r3, #12
 80018e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20005000 	.word	0x20005000
 800190c:	00000400 	.word	0x00000400
 8001910:	200000cc 	.word	0x200000cc
 8001914:	20000240 	.word	0x20000240

08001918 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <SystemInit+0x5c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <SystemInit+0x5c>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <SystemInit+0x5c>)
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4911      	ldr	r1, [pc, #68]	; (8001974 <SystemInit+0x5c>)
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <SystemInit+0x60>)
 8001930:	4013      	ands	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <SystemInit+0x5c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <SystemInit+0x5c>)
 800193a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800193e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <SystemInit+0x5c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SystemInit+0x5c>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <SystemInit+0x5c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <SystemInit+0x5c>)
 8001956:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800195a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SystemInit+0x5c>)
 800195e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001962:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SystemInit+0x64>)
 8001966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196a:	609a      	str	r2, [r3, #8]
#endif 
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	f8ff0000 	.word	0xf8ff0000
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <MX_TIM2_Init+0x98>)
 80019a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <MX_TIM2_Init+0x98>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <MX_TIM2_Init+0x98>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <MX_TIM2_Init+0x98>)
 80019b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ba:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <MX_TIM2_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <MX_TIM2_Init+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019c6:	4814      	ldr	r0, [pc, #80]	; (8001a18 <MX_TIM2_Init+0x98>)
 80019c8:	f002 fa88 	bl	8003edc <HAL_TIM_Base_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019d2:	f7ff fdf1 	bl	80015b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	4619      	mov	r1, r3
 80019e4:	480c      	ldr	r0, [pc, #48]	; (8001a18 <MX_TIM2_Init+0x98>)
 80019e6:	f002 faff 	bl	8003fe8 <HAL_TIM_SlaveConfigSynchro>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80019f0:	f7ff fde2 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_TIM2_Init+0x98>)
 8001a02:	f002 fe15 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001a0c:	f7ff fdd4 	bl	80015b8 <Error_Handler>
  }

}
 8001a10:	bf00      	nop
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200001b8 	.word	0x200001b8

08001a1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a2c:	d10b      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_TIM_Base_MspInit+0x34>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_TIM_Base_MspInit+0x34>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	61d3      	str	r3, [r2, #28]
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_TIM_Base_MspInit+0x34>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40021000 	.word	0x40021000

08001a54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <MX_USART1_UART_Init+0x50>)
 8001a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a8c:	f002 fe66 	bl	800475c <HAL_UART_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a96:	f7ff fd8f 	bl	80015b8 <Error_Handler>
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200001f8 	.word	0x200001f8
 8001aa4:	40013800 	.word	0x40013800

08001aa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <HAL_UART_MspInit+0xb4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d145      	bne.n	8001b54 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_UART_MspInit+0xb8>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8001af8:	2340      	movs	r3, #64	; 0x40
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4816      	ldr	r0, [pc, #88]	; (8001b64 <HAL_UART_MspInit+0xbc>)
 8001b0c:	f000 fdf2 	bl	80026f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4810      	ldr	r0, [pc, #64]	; (8001b64 <HAL_UART_MspInit+0xbc>)
 8001b24:	f000 fde6 	bl	80026f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_UART_MspInit+0xc0>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_UART_MspInit+0xc0>)
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	2025      	movs	r0, #37	; 0x25
 8001b4a:	f000 fd0d 	bl	8002568 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b4e:	2025      	movs	r0, #37	; 0x25
 8001b50:	f000 fd36 	bl	80025c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010c00 	.word	0x40010c00
 8001b68:	40010000 	.word	0x40010000

08001b6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b6e:	e003      	b.n	8001b78 <LoopCopyDataInit>

08001b70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b76:	3104      	adds	r1, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b80:	d3f6      	bcc.n	8001b70 <CopyDataInit>
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b84:	e002      	b.n	8001b8c <LoopFillZerobss>

08001b86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b88:	f842 3b04 	str.w	r3, [r2], #4

08001b8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b90:	d3f9      	bcc.n	8001b86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b92:	f7ff fec1 	bl	8001918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f003 fcc7 	bl	8005528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b9a:	f7ff fc35 	bl	8001408 <main>
  bx lr
 8001b9e:	4770      	bx	lr
  ldr r3, =_sidata
 8001ba0:	08005b84 	.word	0x08005b84
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ba8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001bac:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001bb0:	20000240 	.word	0x20000240

08001bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC1_2_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_Init+0x28>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_Init+0x28>)
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 fcad 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 f808 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fde2 	bl	800179c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40022000 	.word	0x40022000

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x54>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x58>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fcf4 	bl	80025f0 <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 fca2 	bl	8002568 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_InitTick+0x5c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_IncTick+0x1c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_IncTick+0x20>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <HAL_IncTick+0x20>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20000008 	.word	0x20000008
 8001c64:	20000238 	.word	0x20000238

08001c68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <HAL_GetTick+0x10>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	20000238 	.word	0x20000238

08001c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff fff0 	bl	8001c68 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d005      	beq.n	8001ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_Delay+0x40>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ca2:	bf00      	nop
 8001ca4:	f7ff ffe0 	bl	8001c68 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8f7      	bhi.n	8001ca4 <HAL_Delay+0x28>
  {
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e153      	b.n	8001f8a <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a9f      	ldr	r2, [pc, #636]	; (8001f64 <HAL_ADC_Init+0x2a4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_ADC_Init+0x40>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a9d      	ldr	r2, [pc, #628]	; (8001f68 <HAL_ADC_Init+0x2a8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d004      	beq.n	8001d00 <HAL_ADC_Init+0x40>
 8001cf6:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001cfa:	489c      	ldr	r0, [pc, #624]	; (8001f6c <HAL_ADC_Init+0x2ac>)
 8001cfc:	f7ff fc62 	bl	80015c4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <HAL_ADC_Init+0x5c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d10:	d004      	beq.n	8001d1c <HAL_ADC_Init+0x5c>
 8001d12:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8001d16:	4895      	ldr	r0, [pc, #596]	; (8001f6c <HAL_ADC_Init+0x2ac>)
 8001d18:	f7ff fc54 	bl	80015c4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <HAL_ADC_Init+0x78>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2c:	d004      	beq.n	8001d38 <HAL_ADC_Init+0x78>
 8001d2e:	f240 11b5 	movw	r1, #437	; 0x1b5
 8001d32:	488e      	ldr	r0, [pc, #568]	; (8001f6c <HAL_ADC_Init+0x2ac>)
 8001d34:	f7ff fc46 	bl	80015c4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7b1b      	ldrb	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_ADC_Init+0x92>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7b1b      	ldrb	r3, [r3, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d004      	beq.n	8001d52 <HAL_ADC_Init+0x92>
 8001d48:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001d4c:	4887      	ldr	r0, [pc, #540]	; (8001f6c <HAL_ADC_Init+0x2ac>)
 8001d4e:	f7ff fc39 	bl	80015c4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d022      	beq.n	8001da0 <HAL_ADC_Init+0xe0>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d62:	d01d      	beq.n	8001da0 <HAL_ADC_Init+0xe0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001d6c:	d018      	beq.n	8001da0 <HAL_ADC_Init+0xe0>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d76:	d013      	beq.n	8001da0 <HAL_ADC_Init+0xe0>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001d80:	d00e      	beq.n	8001da0 <HAL_ADC_Init+0xe0>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d8a:	d009      	beq.n	8001da0 <HAL_ADC_Init+0xe0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d94:	d004      	beq.n	8001da0 <HAL_ADC_Init+0xe0>
 8001d96:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001d9a:	4874      	ldr	r0, [pc, #464]	; (8001f6c <HAL_ADC_Init+0x2ac>)
 8001d9c:	f7ff fc12 	bl	80015c4 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d02a      	beq.n	8001dfe <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_ADC_Init+0xf8>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	2b10      	cmp	r3, #16
 8001db6:	d904      	bls.n	8001dc2 <HAL_ADC_Init+0x102>
 8001db8:	f240 11bb 	movw	r1, #443	; 0x1bb
 8001dbc:	486b      	ldr	r0, [pc, #428]	; (8001f6c <HAL_ADC_Init+0x2ac>)
 8001dbe:	f7ff fc01 	bl	80015c4 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7d1b      	ldrb	r3, [r3, #20]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <HAL_ADC_Init+0x11c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7d1b      	ldrb	r3, [r3, #20]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d004      	beq.n	8001ddc <HAL_ADC_Init+0x11c>
 8001dd2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001dd6:	4865      	ldr	r0, [pc, #404]	; (8001f6c <HAL_ADC_Init+0x2ac>)
 8001dd8:	f7ff fbf4 	bl	80015c4 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7d1b      	ldrb	r3, [r3, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00c      	beq.n	8001dfe <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_ADC_Init+0x134>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d904      	bls.n	8001dfe <HAL_ADC_Init+0x13e>
 8001df4:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001df8:	485c      	ldr	r0, [pc, #368]	; (8001f6c <HAL_ADC_Init+0x2ac>)
 8001dfa:	f7ff fbe3 	bl	80015c4 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff f9cd 	bl	80011b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fa7e 	bl	800231c <ADC_ConversionStop_Disable>
 8001e20:	4603      	mov	r3, r0
 8001e22:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 80a3 	bne.w	8001f78 <HAL_ADC_Init+0x2b8>
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f040 809f 	bne.w	8001f78 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e42:	f023 0302 	bic.w	r3, r3, #2
 8001e46:	f043 0202 	orr.w	r2, r3, #2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e56:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7b1b      	ldrb	r3, [r3, #12]
 8001e5c:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e5e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6e:	d003      	beq.n	8001e78 <HAL_ADC_Init+0x1b8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <HAL_ADC_Init+0x1be>
 8001e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7c:	e000      	b.n	8001e80 <HAL_ADC_Init+0x1c0>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7d1b      	ldrb	r3, [r3, #20]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d119      	bne.n	8001ec2 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7b1b      	ldrb	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	035a      	lsls	r2, r3, #13
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e00b      	b.n	8001ec2 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	f043 0220 	orr.w	r2, r3, #32
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_ADC_Init+0x2b0>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef2:	d003      	beq.n	8001efc <HAL_ADC_Init+0x23c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d104      	bne.n	8001f06 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	051b      	lsls	r3, r3, #20
 8001f04:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_ADC_Init+0x2b4>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d10b      	bne.n	8001f42 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	f023 0303 	bic.w	r3, r3, #3
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f40:	e022      	b.n	8001f88 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	f023 0312 	bic.w	r3, r3, #18
 8001f4a:	f043 0210 	orr.w	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f62:	e011      	b.n	8001f88 <HAL_ADC_Init+0x2c8>
 8001f64:	40012400 	.word	0x40012400
 8001f68:	40012800 	.word	0x40012800
 8001f6c:	08005834 	.word	0x08005834
 8001f70:	ffe1f7fd 	.word	0xffe1f7fd
 8001f74:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f043 0210 	orr.w	r2, r3, #16
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop

08001f94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a88      	ldr	r2, [pc, #544]	; (80021cc <HAL_ADC_ConfigChannel+0x238>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_ADC_ConfigChannel+0x30>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a86      	ldr	r2, [pc, #536]	; (80021d0 <HAL_ADC_ConfigChannel+0x23c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_ADC_ConfigChannel+0x30>
 8001fba:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8001fbe:	4885      	ldr	r0, [pc, #532]	; (80021d4 <HAL_ADC_ConfigChannel+0x240>)
 8001fc0:	f7ff fb00 	bl	80015c4 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d048      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d044      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d040      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d03c      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d038      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d034      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b06      	cmp	r3, #6
 8001ffa:	d030      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b07      	cmp	r3, #7
 8002002:	d02c      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d028      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b09      	cmp	r3, #9
 8002012:	d024      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b0a      	cmp	r3, #10
 800201a:	d020      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b0b      	cmp	r3, #11
 8002022:	d01c      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b0c      	cmp	r3, #12
 800202a:	d018      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b0d      	cmp	r3, #13
 8002032:	d014      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b0e      	cmp	r3, #14
 800203a:	d010      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d00c      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b10      	cmp	r3, #16
 800204a:	d008      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b11      	cmp	r3, #17
 8002052:	d004      	beq.n	800205e <HAL_ADC_ConfigChannel+0xca>
 8002054:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8002058:	485e      	ldr	r0, [pc, #376]	; (80021d4 <HAL_ADC_ConfigChannel+0x240>)
 800205a:	f7ff fab3 	bl	80015c4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d040      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d03c      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d038      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d034      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b05      	cmp	r3, #5
 8002084:	d030      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b06      	cmp	r3, #6
 800208c:	d02c      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b07      	cmp	r3, #7
 8002094:	d028      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b08      	cmp	r3, #8
 800209c:	d024      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b09      	cmp	r3, #9
 80020a4:	d020      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b0a      	cmp	r3, #10
 80020ac:	d01c      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b0b      	cmp	r3, #11
 80020b4:	d018      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d014      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b0d      	cmp	r3, #13
 80020c4:	d010      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b0e      	cmp	r3, #14
 80020cc:	d00c      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b0f      	cmp	r3, #15
 80020d4:	d008      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d004      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x154>
 80020de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80020e2:	483c      	ldr	r0, [pc, #240]	; (80021d4 <HAL_ADC_ConfigChannel+0x240>)
 80020e4:	f7ff fa6e 	bl	80015c4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x19e>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d01c      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x19e>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d018      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x19e>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d014      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x19e>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d010      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x19e>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d00c      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x19e>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b06      	cmp	r3, #6
 800211e:	d008      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x19e>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b07      	cmp	r3, #7
 8002126:	d004      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x19e>
 8002128:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800212c:	4829      	ldr	r0, [pc, #164]	; (80021d4 <HAL_ADC_ConfigChannel+0x240>)
 800212e:	f7ff fa49 	bl	80015c4 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1ac>
 800213c:	2302      	movs	r3, #2
 800213e:	e0e2      	b.n	8002306 <HAL_ADC_ConfigChannel+0x372>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b06      	cmp	r3, #6
 800214e:	d81c      	bhi.n	800218a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	3b05      	subs	r3, #5
 8002162:	221f      	movs	r2, #31
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	4019      	ands	r1, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	3b05      	subs	r3, #5
 800217c:	fa00 f203 	lsl.w	r2, r0, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	635a      	str	r2, [r3, #52]	; 0x34
 8002188:	e042      	b.n	8002210 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d822      	bhi.n	80021d8 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	3b23      	subs	r3, #35	; 0x23
 80021a4:	221f      	movs	r2, #31
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	4019      	ands	r1, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	3b23      	subs	r3, #35	; 0x23
 80021be:	fa00 f203 	lsl.w	r2, r0, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
 80021ca:	e021      	b.n	8002210 <HAL_ADC_ConfigChannel+0x27c>
 80021cc:	40012400 	.word	0x40012400
 80021d0:	40012800 	.word	0x40012800
 80021d4:	08005834 	.word	0x08005834
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	3b41      	subs	r3, #65	; 0x41
 80021ea:	221f      	movs	r2, #31
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4019      	ands	r1, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3b41      	subs	r3, #65	; 0x41
 8002204:	fa00 f203 	lsl.w	r2, r0, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b09      	cmp	r3, #9
 8002216:	d91c      	bls.n	8002252 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68d9      	ldr	r1, [r3, #12]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	3b1e      	subs	r3, #30
 800222a:	2207      	movs	r2, #7
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	4019      	ands	r1, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6898      	ldr	r0, [r3, #8]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	3b1e      	subs	r3, #30
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	e019      	b.n	8002286 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6919      	ldr	r1, [r3, #16]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	2207      	movs	r2, #7
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	4019      	ands	r1, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6898      	ldr	r0, [r3, #8]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	fa00 f203 	lsl.w	r2, r0, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b10      	cmp	r3, #16
 800228c:	d003      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002292:	2b11      	cmp	r3, #17
 8002294:	d132      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_ADC_ConfigChannel+0x37c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d125      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d126      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022bc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d11a      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <HAL_ADC_ConfigChannel+0x380>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a13      	ldr	r2, [pc, #76]	; (8002318 <HAL_ADC_ConfigChannel+0x384>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	0c9a      	lsrs	r2, r3, #18
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022dc:	e002      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f9      	bne.n	80022de <HAL_ADC_ConfigChannel+0x34a>
 80022ea:	e007      	b.n	80022fc <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f043 0220 	orr.w	r2, r3, #32
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40012400 	.word	0x40012400
 8002314:	20000000 	.word	0x20000000
 8002318:	431bde83 	.word	0x431bde83

0800231c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d127      	bne.n	8002386 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002346:	f7ff fc8f 	bl	8001c68 <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800234c:	e014      	b.n	8002378 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800234e:	f7ff fc8b 	bl	8001c68 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d90d      	bls.n	8002378 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	f043 0210 	orr.w	r2, r3, #16
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	f043 0201 	orr.w	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e007      	b.n	8002388 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d0e3      	beq.n	800234e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	60d3      	str	r3, [r2, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4906      	ldr	r1, [pc, #24]	; (8002428 <__NVIC_EnableIRQ+0x34>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f4:	d301      	bcc.n	80024fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00f      	b.n	800251a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <SysTick_Config+0x40>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002502:	210f      	movs	r1, #15
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f7ff ff90 	bl	800242c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SysTick_Config+0x40>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <SysTick_Config+0x40>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b07      	cmp	r3, #7
 8002534:	d00f      	beq.n	8002556 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b06      	cmp	r3, #6
 800253a:	d00c      	beq.n	8002556 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b05      	cmp	r3, #5
 8002540:	d009      	beq.n	8002556 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b04      	cmp	r3, #4
 8002546:	d006      	beq.n	8002556 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d003      	beq.n	8002556 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800254e:	2192      	movs	r1, #146	; 0x92
 8002550:	4804      	ldr	r0, [pc, #16]	; (8002564 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002552:	f7ff f837 	bl	80015c4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ff1a 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	0800586c 	.word	0x0800586c

08002568 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0f      	cmp	r3, #15
 800257e:	d903      	bls.n	8002588 <HAL_NVIC_SetPriority+0x20>
 8002580:	21aa      	movs	r1, #170	; 0xaa
 8002582:	480e      	ldr	r0, [pc, #56]	; (80025bc <HAL_NVIC_SetPriority+0x54>)
 8002584:	f7ff f81e 	bl	80015c4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b0f      	cmp	r3, #15
 800258c:	d903      	bls.n	8002596 <HAL_NVIC_SetPriority+0x2e>
 800258e:	21ab      	movs	r1, #171	; 0xab
 8002590:	480a      	ldr	r0, [pc, #40]	; (80025bc <HAL_NVIC_SetPriority+0x54>)
 8002592:	f7ff f817 	bl	80015c4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002596:	f7ff ff1f 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 800259a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	6978      	ldr	r0, [r7, #20]
 80025a2:	f7ff ff6d 	bl	8002480 <NVIC_EncodePriority>
 80025a6:	4602      	mov	r2, r0
 80025a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff3c 	bl	800242c <__NVIC_SetPriority>
}
 80025b4:	bf00      	nop
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	0800586c 	.word	0x0800586c

080025c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	da03      	bge.n	80025da <HAL_NVIC_EnableIRQ+0x1a>
 80025d2:	21be      	movs	r1, #190	; 0xbe
 80025d4:	4805      	ldr	r0, [pc, #20]	; (80025ec <HAL_NVIC_EnableIRQ+0x2c>)
 80025d6:	f7fe fff5 	bl	80015c4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff08 	bl	80023f4 <__NVIC_EnableIRQ>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	0800586c 	.word	0x0800586c

080025f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ff73 	bl	80024e4 <SysTick_Config>
 80025fe:	4603      	mov	r3, r0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800261a:	2b02      	cmp	r3, #2
 800261c:	d005      	beq.n	800262a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2204      	movs	r2, #4
 8002622:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e051      	b.n	80026ce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 020e 	bic.w	r2, r2, #14
 8002638:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <HAL_DMA_Abort_IT+0xd0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d029      	beq.n	80026a8 <HAL_DMA_Abort_IT+0xa0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a20      	ldr	r2, [pc, #128]	; (80026dc <HAL_DMA_Abort_IT+0xd4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d022      	beq.n	80026a4 <HAL_DMA_Abort_IT+0x9c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1f      	ldr	r2, [pc, #124]	; (80026e0 <HAL_DMA_Abort_IT+0xd8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d01a      	beq.n	800269e <HAL_DMA_Abort_IT+0x96>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_DMA_Abort_IT+0xdc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d012      	beq.n	8002698 <HAL_DMA_Abort_IT+0x90>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_DMA_Abort_IT+0xe0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00a      	beq.n	8002692 <HAL_DMA_Abort_IT+0x8a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_DMA_Abort_IT+0xe4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d102      	bne.n	800268c <HAL_DMA_Abort_IT+0x84>
 8002686:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800268a:	e00e      	b.n	80026aa <HAL_DMA_Abort_IT+0xa2>
 800268c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002690:	e00b      	b.n	80026aa <HAL_DMA_Abort_IT+0xa2>
 8002692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002696:	e008      	b.n	80026aa <HAL_DMA_Abort_IT+0xa2>
 8002698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800269c:	e005      	b.n	80026aa <HAL_DMA_Abort_IT+0xa2>
 800269e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a2:	e002      	b.n	80026aa <HAL_DMA_Abort_IT+0xa2>
 80026a4:	2310      	movs	r3, #16
 80026a6:	e000      	b.n	80026aa <HAL_DMA_Abort_IT+0xa2>
 80026a8:	2301      	movs	r3, #1
 80026aa:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <HAL_DMA_Abort_IT+0xe8>)
 80026ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
    } 
  }
  return status;
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40020008 	.word	0x40020008
 80026dc:	4002001c 	.word	0x4002001c
 80026e0:	40020030 	.word	0x40020030
 80026e4:	40020044 	.word	0x40020044
 80026e8:	40020058 	.word	0x40020058
 80026ec:	4002006c 	.word	0x4002006c
 80026f0:	40020000 	.word	0x40020000

080026f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a9c      	ldr	r2, [pc, #624]	; (800297c <HAL_GPIO_Init+0x288>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0x42>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a9b      	ldr	r2, [pc, #620]	; (8002980 <HAL_GPIO_Init+0x28c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00f      	beq.n	8002736 <HAL_GPIO_Init+0x42>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a9a      	ldr	r2, [pc, #616]	; (8002984 <HAL_GPIO_Init+0x290>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00b      	beq.n	8002736 <HAL_GPIO_Init+0x42>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a99      	ldr	r2, [pc, #612]	; (8002988 <HAL_GPIO_Init+0x294>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x42>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a98      	ldr	r2, [pc, #608]	; (800298c <HAL_GPIO_Init+0x298>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x42>
 800272e:	21bd      	movs	r1, #189	; 0xbd
 8002730:	4897      	ldr	r0, [pc, #604]	; (8002990 <HAL_GPIO_Init+0x29c>)
 8002732:	f7fe ff47 	bl	80015c4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_GPIO_Init+0x58>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	041b      	lsls	r3, r3, #16
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x60>
 800274c:	21be      	movs	r1, #190	; 0xbe
 800274e:	4890      	ldr	r0, [pc, #576]	; (8002990 <HAL_GPIO_Init+0x29c>)
 8002750:	f7fe ff38 	bl	80015c4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 81eb 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	f000 81e6 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b11      	cmp	r3, #17
 800276e:	f000 81e1 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	f000 81dc 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b12      	cmp	r3, #18
 8002782:	f000 81d7 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a82      	ldr	r2, [pc, #520]	; (8002994 <HAL_GPIO_Init+0x2a0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	f000 81d1 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4a80      	ldr	r2, [pc, #512]	; (8002998 <HAL_GPIO_Init+0x2a4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	f000 81cb 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4a7e      	ldr	r2, [pc, #504]	; (800299c <HAL_GPIO_Init+0x2a8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	f000 81c5 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a7c      	ldr	r2, [pc, #496]	; (80029a0 <HAL_GPIO_Init+0x2ac>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	f000 81bf 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a7a      	ldr	r2, [pc, #488]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	f000 81b9 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a78      	ldr	r2, [pc, #480]	; (80029a8 <HAL_GPIO_Init+0x2b4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	f000 81b3 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	f000 81ae 	beq.w	8002b34 <HAL_GPIO_Init+0x440>
 80027d8:	21bf      	movs	r1, #191	; 0xbf
 80027da:	486d      	ldr	r0, [pc, #436]	; (8002990 <HAL_GPIO_Init+0x29c>)
 80027dc:	f7fe fef2 	bl	80015c4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e0:	e1a8      	b.n	8002b34 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027e2:	2201      	movs	r2, #1
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	f040 8197 	bne.w	8002b2e <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a5e      	ldr	r2, [pc, #376]	; (800297c <HAL_GPIO_Init+0x288>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_GPIO_Init+0x13c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a5d      	ldr	r2, [pc, #372]	; (8002980 <HAL_GPIO_Init+0x28c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00f      	beq.n	8002830 <HAL_GPIO_Init+0x13c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a5c      	ldr	r2, [pc, #368]	; (8002984 <HAL_GPIO_Init+0x290>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00b      	beq.n	8002830 <HAL_GPIO_Init+0x13c>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a5b      	ldr	r2, [pc, #364]	; (8002988 <HAL_GPIO_Init+0x294>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0x13c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a5a      	ldr	r2, [pc, #360]	; (800298c <HAL_GPIO_Init+0x298>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x13c>
 8002828:	21cd      	movs	r1, #205	; 0xcd
 800282a:	4859      	ldr	r0, [pc, #356]	; (8002990 <HAL_GPIO_Init+0x29c>)
 800282c:	f7fe feca 	bl	80015c4 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b12      	cmp	r3, #18
 8002836:	d065      	beq.n	8002904 <HAL_GPIO_Init+0x210>
 8002838:	2b12      	cmp	r3, #18
 800283a:	d80e      	bhi.n	800285a <HAL_GPIO_Init+0x166>
 800283c:	2b02      	cmp	r3, #2
 800283e:	d04c      	beq.n	80028da <HAL_GPIO_Init+0x1e6>
 8002840:	2b02      	cmp	r3, #2
 8002842:	d804      	bhi.n	800284e <HAL_GPIO_Init+0x15a>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d072      	beq.n	800292e <HAL_GPIO_Init+0x23a>
 8002848:	2b01      	cmp	r3, #1
 800284a:	d01d      	beq.n	8002888 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800284c:	e0b1      	b.n	80029b2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800284e:	2b03      	cmp	r3, #3
 8002850:	f000 80ac 	beq.w	80029ac <HAL_GPIO_Init+0x2b8>
 8002854:	2b11      	cmp	r3, #17
 8002856:	d02b      	beq.n	80028b0 <HAL_GPIO_Init+0x1bc>
          break;
 8002858:	e0ab      	b.n	80029b2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800285a:	4a4f      	ldr	r2, [pc, #316]	; (8002998 <HAL_GPIO_Init+0x2a4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d066      	beq.n	800292e <HAL_GPIO_Init+0x23a>
 8002860:	4a4d      	ldr	r2, [pc, #308]	; (8002998 <HAL_GPIO_Init+0x2a4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d806      	bhi.n	8002874 <HAL_GPIO_Init+0x180>
 8002866:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <HAL_GPIO_Init+0x2a0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d060      	beq.n	800292e <HAL_GPIO_Init+0x23a>
 800286c:	4a4c      	ldr	r2, [pc, #304]	; (80029a0 <HAL_GPIO_Init+0x2ac>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d05d      	beq.n	800292e <HAL_GPIO_Init+0x23a>
          break;
 8002872:	e09e      	b.n	80029b2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8002874:	4a49      	ldr	r2, [pc, #292]	; (800299c <HAL_GPIO_Init+0x2a8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d059      	beq.n	800292e <HAL_GPIO_Init+0x23a>
 800287a:	4a4b      	ldr	r2, [pc, #300]	; (80029a8 <HAL_GPIO_Init+0x2b4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d056      	beq.n	800292e <HAL_GPIO_Init+0x23a>
 8002880:	4a48      	ldr	r2, [pc, #288]	; (80029a4 <HAL_GPIO_Init+0x2b0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d053      	beq.n	800292e <HAL_GPIO_Init+0x23a>
          break;
 8002886:	e094      	b.n	80029b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d00b      	beq.n	80028a8 <HAL_GPIO_Init+0x1b4>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d007      	beq.n	80028a8 <HAL_GPIO_Init+0x1b4>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x1b4>
 80028a0:	21d5      	movs	r1, #213	; 0xd5
 80028a2:	483b      	ldr	r0, [pc, #236]	; (8002990 <HAL_GPIO_Init+0x29c>)
 80028a4:	f7fe fe8e 	bl	80015c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	623b      	str	r3, [r7, #32]
          break;
 80028ae:	e080      	b.n	80029b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d00b      	beq.n	80028d0 <HAL_GPIO_Init+0x1dc>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d007      	beq.n	80028d0 <HAL_GPIO_Init+0x1dc>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x1dc>
 80028c8:	21dc      	movs	r1, #220	; 0xdc
 80028ca:	4831      	ldr	r0, [pc, #196]	; (8002990 <HAL_GPIO_Init+0x29c>)
 80028cc:	f7fe fe7a 	bl	80015c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	3304      	adds	r3, #4
 80028d6:	623b      	str	r3, [r7, #32]
          break;
 80028d8:	e06b      	b.n	80029b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d00b      	beq.n	80028fa <HAL_GPIO_Init+0x206>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_Init+0x206>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x206>
 80028f2:	21e3      	movs	r1, #227	; 0xe3
 80028f4:	4826      	ldr	r0, [pc, #152]	; (8002990 <HAL_GPIO_Init+0x29c>)
 80028f6:	f7fe fe65 	bl	80015c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	3308      	adds	r3, #8
 8002900:	623b      	str	r3, [r7, #32]
          break;
 8002902:	e056      	b.n	80029b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d00b      	beq.n	8002924 <HAL_GPIO_Init+0x230>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d007      	beq.n	8002924 <HAL_GPIO_Init+0x230>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x230>
 800291c:	21ea      	movs	r1, #234	; 0xea
 800291e:	481c      	ldr	r0, [pc, #112]	; (8002990 <HAL_GPIO_Init+0x29c>)
 8002920:	f7fe fe50 	bl	80015c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	330c      	adds	r3, #12
 800292a:	623b      	str	r3, [r7, #32]
          break;
 800292c:	e041      	b.n	80029b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_GPIO_Init+0x25a>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d007      	beq.n	800294e <HAL_GPIO_Init+0x25a>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x25a>
 8002946:	21f7      	movs	r1, #247	; 0xf7
 8002948:	4811      	ldr	r0, [pc, #68]	; (8002990 <HAL_GPIO_Init+0x29c>)
 800294a:	f7fe fe3b 	bl	80015c4 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002956:	2304      	movs	r3, #4
 8002958:	623b      	str	r3, [r7, #32]
          break;
 800295a:	e02a      	b.n	80029b2 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002964:	2308      	movs	r3, #8
 8002966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	611a      	str	r2, [r3, #16]
          break;
 800296e:	e020      	b.n	80029b2 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002970:	2308      	movs	r3, #8
 8002972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	615a      	str	r2, [r3, #20]
          break;
 800297a:	e01a      	b.n	80029b2 <HAL_GPIO_Init+0x2be>
 800297c:	40010800 	.word	0x40010800
 8002980:	40010c00 	.word	0x40010c00
 8002984:	40011000 	.word	0x40011000
 8002988:	40011400 	.word	0x40011400
 800298c:	40011800 	.word	0x40011800
 8002990:	080058a8 	.word	0x080058a8
 8002994:	10110000 	.word	0x10110000
 8002998:	10210000 	.word	0x10210000
 800299c:	10310000 	.word	0x10310000
 80029a0:	10120000 	.word	0x10120000
 80029a4:	10220000 	.word	0x10220000
 80029a8:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029ac:	2300      	movs	r3, #0
 80029ae:	623b      	str	r3, [r7, #32]
          break;
 80029b0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2bff      	cmp	r3, #255	; 0xff
 80029b6:	d801      	bhi.n	80029bc <HAL_GPIO_Init+0x2c8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	e001      	b.n	80029c0 <HAL_GPIO_Init+0x2cc>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	2bff      	cmp	r3, #255	; 0xff
 80029c6:	d802      	bhi.n	80029ce <HAL_GPIO_Init+0x2da>
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	e002      	b.n	80029d4 <HAL_GPIO_Init+0x2e0>
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	3b08      	subs	r3, #8
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	210f      	movs	r1, #15
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	401a      	ands	r2, r3
 80029e6:	6a39      	ldr	r1, [r7, #32]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	431a      	orrs	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8096 	beq.w	8002b2e <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a02:	4b52      	ldr	r3, [pc, #328]	; (8002b4c <HAL_GPIO_Init+0x458>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	4a51      	ldr	r2, [pc, #324]	; (8002b4c <HAL_GPIO_Init+0x458>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6193      	str	r3, [r2, #24]
 8002a0e:	4b4f      	ldr	r3, [pc, #316]	; (8002b4c <HAL_GPIO_Init+0x458>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a1a:	4a4d      	ldr	r2, [pc, #308]	; (8002b50 <HAL_GPIO_Init+0x45c>)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a44      	ldr	r2, [pc, #272]	; (8002b54 <HAL_GPIO_Init+0x460>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_GPIO_Init+0x37a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a43      	ldr	r2, [pc, #268]	; (8002b58 <HAL_GPIO_Init+0x464>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00d      	beq.n	8002a6a <HAL_GPIO_Init+0x376>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a42      	ldr	r2, [pc, #264]	; (8002b5c <HAL_GPIO_Init+0x468>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d007      	beq.n	8002a66 <HAL_GPIO_Init+0x372>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a41      	ldr	r2, [pc, #260]	; (8002b60 <HAL_GPIO_Init+0x46c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_GPIO_Init+0x36e>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x37c>
 8002a62:	2304      	movs	r3, #4
 8002a64:	e004      	b.n	8002a70 <HAL_GPIO_Init+0x37c>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_Init+0x37c>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x37c>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a72:	f002 0203 	and.w	r2, r2, #3
 8002a76:	0092      	lsls	r2, r2, #2
 8002a78:	4093      	lsls	r3, r2
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a80:	4933      	ldr	r1, [pc, #204]	; (8002b50 <HAL_GPIO_Init+0x45c>)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a9a:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4931      	ldr	r1, [pc, #196]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
 8002aa6:	e006      	b.n	8002ab6 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	492c      	ldr	r1, [pc, #176]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4927      	ldr	r1, [pc, #156]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]
 8002ace:	e006      	b.n	8002ade <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	4922      	ldr	r1, [pc, #136]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	491d      	ldr	r1, [pc, #116]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
 8002af6:	e006      	b.n	8002b06 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002af8:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	4918      	ldr	r1, [pc, #96]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d006      	beq.n	8002b20 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	4913      	ldr	r1, [pc, #76]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60cb      	str	r3, [r1, #12]
 8002b1e:	e006      	b.n	8002b2e <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	490e      	ldr	r1, [pc, #56]	; (8002b64 <HAL_GPIO_Init+0x470>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	3301      	adds	r3, #1
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f47f ae4f 	bne.w	80027e2 <HAL_GPIO_Init+0xee>
  }
}
 8002b44:	bf00      	nop
 8002b46:	3728      	adds	r7, #40	; 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40010800 	.word	0x40010800
 8002b58:	40010c00 	.word	0x40010c00
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40011400 	.word	0x40011400
 8002b64:	40010400 	.word	0x40010400

08002b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
 8002b74:	4613      	mov	r3, r2
 8002b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_GPIO_WritePin+0x20>
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	041b      	lsls	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_GPIO_WritePin+0x2a>
 8002b88:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8002b8c:	480e      	ldr	r0, [pc, #56]	; (8002bc8 <HAL_GPIO_WritePin+0x60>)
 8002b8e:	f7fe fd19 	bl	80015c4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b92:	787b      	ldrb	r3, [r7, #1]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_GPIO_WritePin+0x40>
 8002b98:	787b      	ldrb	r3, [r7, #1]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d004      	beq.n	8002ba8 <HAL_GPIO_WritePin+0x40>
 8002b9e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8002ba2:	4809      	ldr	r0, [pc, #36]	; (8002bc8 <HAL_GPIO_WritePin+0x60>)
 8002ba4:	f7fe fd0e 	bl	80015c4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002ba8:	787b      	ldrb	r3, [r7, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bb4:	e003      	b.n	8002bbe <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	041a      	lsls	r2, r3, #16
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	611a      	str	r2, [r3, #16]
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	080058a8 	.word	0x080058a8

08002bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e1ab      	b.n	8002f36 <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4aa0      	ldr	r2, [pc, #640]	; (8002e64 <HAL_I2C_Init+0x298>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_I2C_Init+0x30>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a9e      	ldr	r2, [pc, #632]	; (8002e68 <HAL_I2C_Init+0x29c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_I2C_Init+0x30>
 8002bf2:	f240 11d1 	movw	r1, #465	; 0x1d1
 8002bf6:	489d      	ldr	r0, [pc, #628]	; (8002e6c <HAL_I2C_Init+0x2a0>)
 8002bf8:	f7fe fce4 	bl	80015c4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d004      	beq.n	8002c0e <HAL_I2C_Init+0x42>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a99      	ldr	r2, [pc, #612]	; (8002e70 <HAL_I2C_Init+0x2a4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d904      	bls.n	8002c18 <HAL_I2C_Init+0x4c>
 8002c0e:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8002c12:	4896      	ldr	r0, [pc, #600]	; (8002e6c <HAL_I2C_Init+0x2a0>)
 8002c14:	f7fe fcd6 	bl	80015c4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <HAL_I2C_Init+0x68>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c28:	d004      	beq.n	8002c34 <HAL_I2C_Init+0x68>
 8002c2a:	f240 11d3 	movw	r1, #467	; 0x1d3
 8002c2e:	488f      	ldr	r0, [pc, #572]	; (8002e6c <HAL_I2C_Init+0x2a0>)
 8002c30:	f7fe fcc8 	bl	80015c4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c3c:	f023 0303 	bic.w	r3, r3, #3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_I2C_Init+0x82>
 8002c44:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8002c48:	4888      	ldr	r0, [pc, #544]	; (8002e6c <HAL_I2C_Init+0x2a0>)
 8002c4a:	f7fe fcbb 	bl	80015c4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c56:	d009      	beq.n	8002c6c <HAL_I2C_Init+0xa0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c60:	d004      	beq.n	8002c6c <HAL_I2C_Init+0xa0>
 8002c62:	f240 11d5 	movw	r1, #469	; 0x1d5
 8002c66:	4881      	ldr	r0, [pc, #516]	; (8002e6c <HAL_I2C_Init+0x2a0>)
 8002c68:	f7fe fcac 	bl	80015c4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_I2C_Init+0xba>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d004      	beq.n	8002c86 <HAL_I2C_Init+0xba>
 8002c7c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002c80:	487a      	ldr	r0, [pc, #488]	; (8002e6c <HAL_I2C_Init+0x2a0>)
 8002c82:	f7fe fc9f 	bl	80015c4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_I2C_Init+0xd0>
 8002c92:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002c96:	4875      	ldr	r0, [pc, #468]	; (8002e6c <HAL_I2C_Init+0x2a0>)
 8002c98:	f7fe fc94 	bl	80015c4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_I2C_Init+0xea>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d004      	beq.n	8002cb6 <HAL_I2C_Init+0xea>
 8002cac:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002cb0:	486e      	ldr	r0, [pc, #440]	; (8002e6c <HAL_I2C_Init+0x2a0>)
 8002cb2:	f7fe fc87 	bl	80015c4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_I2C_Init+0x104>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	2b80      	cmp	r3, #128	; 0x80
 8002cc4:	d004      	beq.n	8002cd0 <HAL_I2C_Init+0x104>
 8002cc6:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002cca:	4868      	ldr	r0, [pc, #416]	; (8002e6c <HAL_I2C_Init+0x2a0>)
 8002ccc:	f7fe fc7a 	bl	80015c4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7fe fb3f 	bl	8001368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2224      	movs	r2, #36	; 0x24
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d10:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d20:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d22:	f000 fe79 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8002d26:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a51      	ldr	r2, [pc, #324]	; (8002e74 <HAL_I2C_Init+0x2a8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d807      	bhi.n	8002d42 <HAL_I2C_Init+0x176>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a50      	ldr	r2, [pc, #320]	; (8002e78 <HAL_I2C_Init+0x2ac>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	bf94      	ite	ls
 8002d3a:	2301      	movls	r3, #1
 8002d3c:	2300      	movhi	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	e006      	b.n	8002d50 <HAL_I2C_Init+0x184>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a4d      	ldr	r2, [pc, #308]	; (8002e7c <HAL_I2C_Init+0x2b0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	bf94      	ite	ls
 8002d4a:	2301      	movls	r3, #1
 8002d4c:	2300      	movhi	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0ee      	b.n	8002f36 <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4a49      	ldr	r2, [pc, #292]	; (8002e80 <HAL_I2C_Init+0x2b4>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	0c9b      	lsrs	r3, r3, #18
 8002d62:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4a3b      	ldr	r2, [pc, #236]	; (8002e74 <HAL_I2C_Init+0x2a8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d802      	bhi.n	8002d92 <HAL_I2C_Init+0x1c6>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	e009      	b.n	8002da6 <HAL_I2C_Init+0x1da>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	4a39      	ldr	r2, [pc, #228]	; (8002e84 <HAL_I2C_Init+0x2b8>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	3301      	adds	r3, #1
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	430b      	orrs	r3, r1
 8002dac:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002db8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	492c      	ldr	r1, [pc, #176]	; (8002e74 <HAL_I2C_Init+0x2a8>)
 8002dc2:	428b      	cmp	r3, r1
 8002dc4:	d80d      	bhi.n	8002de2 <HAL_I2C_Init+0x216>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1e59      	subs	r1, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	bf38      	it	cc
 8002dde:	2304      	movcc	r3, #4
 8002de0:	e062      	b.n	8002ea8 <HAL_I2C_Init+0x2dc>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d111      	bne.n	8002e0e <HAL_I2C_Init+0x242>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1e58      	subs	r0, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	440b      	add	r3, r1
 8002df8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	e012      	b.n	8002e34 <HAL_I2C_Init+0x268>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1e58      	subs	r0, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	0099      	lsls	r1, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_I2C_Init+0x270>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e035      	b.n	8002ea8 <HAL_I2C_Init+0x2dc>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d121      	bne.n	8002e88 <HAL_I2C_Init+0x2bc>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	440b      	add	r3, r1
 8002e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e60:	e022      	b.n	8002ea8 <HAL_I2C_Init+0x2dc>
 8002e62:	bf00      	nop
 8002e64:	40005400 	.word	0x40005400
 8002e68:	40005800 	.word	0x40005800
 8002e6c:	080058e4 	.word	0x080058e4
 8002e70:	00061a80 	.word	0x00061a80
 8002e74:	000186a0 	.word	0x000186a0
 8002e78:	001e847f 	.word	0x001e847f
 8002e7c:	003d08ff 	.word	0x003d08ff
 8002e80:	431bde83 	.word	0x431bde83
 8002e84:	10624dd3 	.word	0x10624dd3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	0099      	lsls	r1, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	6809      	ldr	r1, [r1, #0]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ed6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6911      	ldr	r1, [r2, #16]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop

08002f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e35c      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01c      	beq.n	8002f94 <HAL_RCC_OscConfig+0x54>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d116      	bne.n	8002f94 <HAL_RCC_OscConfig+0x54>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d110      	bne.n	8002f94 <HAL_RCC_OscConfig+0x54>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_RCC_OscConfig+0x54>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d104      	bne.n	8002f94 <HAL_RCC_OscConfig+0x54>
 8002f8a:	f240 1167 	movw	r1, #359	; 0x167
 8002f8e:	48a5      	ldr	r0, [pc, #660]	; (8003224 <HAL_RCC_OscConfig+0x2e4>)
 8002f90:	f7fe fb18 	bl	80015c4 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 809a 	beq.w	80030d6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x88>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb2:	d009      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x88>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fbc:	d004      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x88>
 8002fbe:	f240 116d 	movw	r1, #365	; 0x16d
 8002fc2:	4898      	ldr	r0, [pc, #608]	; (8003224 <HAL_RCC_OscConfig+0x2e4>)
 8002fc4:	f7fe fafe 	bl	80015c4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc8:	4b97      	ldr	r3, [pc, #604]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d00c      	beq.n	8002fee <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fd4:	4b94      	ldr	r3, [pc, #592]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d112      	bne.n	8003006 <HAL_RCC_OscConfig+0xc6>
 8002fe0:	4b91      	ldr	r3, [pc, #580]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d10b      	bne.n	8003006 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fee:	4b8e      	ldr	r3, [pc, #568]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d06c      	beq.n	80030d4 <HAL_RCC_OscConfig+0x194>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d168      	bne.n	80030d4 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e302      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0xde>
 8003010:	4b85      	ldr	r3, [pc, #532]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a84      	ldr	r2, [pc, #528]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	e02e      	b.n	800307c <HAL_RCC_OscConfig+0x13c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x100>
 8003026:	4b80      	ldr	r3, [pc, #512]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a7f      	ldr	r2, [pc, #508]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 800302c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b7d      	ldr	r3, [pc, #500]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a7c      	ldr	r2, [pc, #496]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e01d      	b.n	800307c <HAL_RCC_OscConfig+0x13c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x124>
 800304a:	4b77      	ldr	r3, [pc, #476]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a76      	ldr	r2, [pc, #472]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b74      	ldr	r3, [pc, #464]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a73      	ldr	r2, [pc, #460]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0x13c>
 8003064:	4b70      	ldr	r3, [pc, #448]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a6f      	ldr	r2, [pc, #444]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 800306a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	4b6d      	ldr	r3, [pc, #436]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a6c      	ldr	r2, [pc, #432]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fdf0 	bl	8001c68 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800308c:	f7fe fdec 	bl	8001c68 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e2b6      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x14c>
 80030aa:	e014      	b.n	80030d6 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe fddc 	bl	8001c68 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe fdd8 	bl	8001c68 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e2a2      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	4b58      	ldr	r3, [pc, #352]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x174>
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d079      	beq.n	80031d6 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_RCC_OscConfig+0x1bc>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d004      	beq.n	80030fc <HAL_RCC_OscConfig+0x1bc>
 80030f2:	f240 11a1 	movw	r1, #417	; 0x1a1
 80030f6:	484b      	ldr	r0, [pc, #300]	; (8003224 <HAL_RCC_OscConfig+0x2e4>)
 80030f8:	f7fe fa64 	bl	80015c4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	2b1f      	cmp	r3, #31
 8003102:	d904      	bls.n	800310e <HAL_RCC_OscConfig+0x1ce>
 8003104:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003108:	4846      	ldr	r0, [pc, #280]	; (8003224 <HAL_RCC_OscConfig+0x2e4>)
 800310a:	f7fe fa5b 	bl	80015c4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800310e:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800311a:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b08      	cmp	r3, #8
 8003124:	d11c      	bne.n	8003160 <HAL_RCC_OscConfig+0x220>
 8003126:	4b40      	ldr	r3, [pc, #256]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d116      	bne.n	8003160 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_RCC_OscConfig+0x20a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e260      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4933      	ldr	r1, [pc, #204]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	e03a      	b.n	80031d6 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d020      	beq.n	80031aa <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003168:	4b30      	ldr	r3, [pc, #192]	; (800322c <HAL_RCC_OscConfig+0x2ec>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316e:	f7fe fd7b 	bl	8001c68 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003176:	f7fe fd77 	bl	8001c68 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e241      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	4b27      	ldr	r3, [pc, #156]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003194:	4b24      	ldr	r3, [pc, #144]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4921      	ldr	r1, [pc, #132]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
 80031a8:	e015      	b.n	80031d6 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_OscConfig+0x2ec>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fd5a 	bl	8001c68 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b8:	f7fe fd56 	bl	8001c68 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e220      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	4b17      	ldr	r3, [pc, #92]	; (8003228 <HAL_RCC_OscConfig+0x2e8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d048      	beq.n	8003274 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_RCC_OscConfig+0x2bc>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d004      	beq.n	80031fc <HAL_RCC_OscConfig+0x2bc>
 80031f2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80031f6:	480b      	ldr	r0, [pc, #44]	; (8003224 <HAL_RCC_OscConfig+0x2e4>)
 80031f8:	f7fe f9e4 	bl	80015c4 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d021      	beq.n	8003248 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_RCC_OscConfig+0x2f0>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320a:	f7fe fd2d 	bl	8001c68 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003210:	e010      	b.n	8003234 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003212:	f7fe fd29 	bl	8001c68 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d909      	bls.n	8003234 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e1f3      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
 8003224:	0800591c 	.word	0x0800591c
 8003228:	40021000 	.word	0x40021000
 800322c:	42420000 	.word	0x42420000
 8003230:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003234:	4b67      	ldr	r3, [pc, #412]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0e8      	beq.n	8003212 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003240:	2001      	movs	r0, #1
 8003242:	f000 fc11 	bl	8003a68 <RCC_Delay>
 8003246:	e015      	b.n	8003274 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003248:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_RCC_OscConfig+0x498>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7fe fd0b 	bl	8001c68 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe fd07 	bl	8001c68 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e1d1      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003268:	4b5a      	ldr	r3, [pc, #360]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f0      	bne.n	8003256 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80c0 	beq.w	8003402 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x368>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d008      	beq.n	80032a8 <HAL_RCC_OscConfig+0x368>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b05      	cmp	r3, #5
 800329c:	d004      	beq.n	80032a8 <HAL_RCC_OscConfig+0x368>
 800329e:	f240 2111 	movw	r1, #529	; 0x211
 80032a2:	484e      	ldr	r0, [pc, #312]	; (80033dc <HAL_RCC_OscConfig+0x49c>)
 80032a4:	f7fe f98e 	bl	80015c4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a8:	4b4a      	ldr	r3, [pc, #296]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10d      	bne.n	80032d0 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b4:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	4a46      	ldr	r2, [pc, #280]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	61d3      	str	r3, [r2, #28]
 80032c0:	4b44      	ldr	r3, [pc, #272]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032cc:	2301      	movs	r3, #1
 80032ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <HAL_RCC_OscConfig+0x4a0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d118      	bne.n	800330e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032dc:	4b40      	ldr	r3, [pc, #256]	; (80033e0 <HAL_RCC_OscConfig+0x4a0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a3f      	ldr	r2, [pc, #252]	; (80033e0 <HAL_RCC_OscConfig+0x4a0>)
 80032e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e8:	f7fe fcbe 	bl	8001c68 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f0:	f7fe fcba 	bl	8001c68 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e184      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003302:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <HAL_RCC_OscConfig+0x4a0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d106      	bne.n	8003324 <HAL_RCC_OscConfig+0x3e4>
 8003316:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4a2e      	ldr	r2, [pc, #184]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6213      	str	r3, [r2, #32]
 8003322:	e02d      	b.n	8003380 <HAL_RCC_OscConfig+0x440>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10c      	bne.n	8003346 <HAL_RCC_OscConfig+0x406>
 800332c:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	4a28      	ldr	r2, [pc, #160]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	6213      	str	r3, [r2, #32]
 8003338:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 800333e:	f023 0304 	bic.w	r3, r3, #4
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	e01c      	b.n	8003380 <HAL_RCC_OscConfig+0x440>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x428>
 800334e:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 8003354:	f043 0304 	orr.w	r3, r3, #4
 8003358:	6213      	str	r3, [r2, #32]
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0x440>
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	6213      	str	r3, [r2, #32]
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 800337a:	f023 0304 	bic.w	r3, r3, #4
 800337e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d015      	beq.n	80033b4 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003388:	f7fe fc6e 	bl	8001c68 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe fc6a 	bl	8001c68 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e132      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_OscConfig+0x494>)
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ee      	beq.n	8003390 <HAL_RCC_OscConfig+0x450>
 80033b2:	e01d      	b.n	80033f0 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b4:	f7fe fc58 	bl	8001c68 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ba:	e013      	b.n	80033e4 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe fc54 	bl	8001c68 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d90a      	bls.n	80033e4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e11c      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	42420480 	.word	0x42420480
 80033dc:	0800591c 	.word	0x0800591c
 80033e0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	4b8b      	ldr	r3, [pc, #556]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e5      	bne.n	80033bc <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f6:	4b87      	ldr	r3, [pc, #540]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	4a86      	ldr	r2, [pc, #536]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00c      	beq.n	8003424 <HAL_RCC_OscConfig+0x4e4>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d008      	beq.n	8003424 <HAL_RCC_OscConfig+0x4e4>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d004      	beq.n	8003424 <HAL_RCC_OscConfig+0x4e4>
 800341a:	f240 21af 	movw	r1, #687	; 0x2af
 800341e:	487e      	ldr	r0, [pc, #504]	; (8003618 <HAL_RCC_OscConfig+0x6d8>)
 8003420:	f7fe f8d0 	bl	80015c4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80ee 	beq.w	800360a <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800342e:	4b79      	ldr	r3, [pc, #484]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b08      	cmp	r3, #8
 8003438:	f000 80ce 	beq.w	80035d8 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	2b02      	cmp	r3, #2
 8003442:	f040 80b2 	bne.w	80035aa <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCC_OscConfig+0x522>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003456:	d004      	beq.n	8003462 <HAL_RCC_OscConfig+0x522>
 8003458:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800345c:	486e      	ldr	r0, [pc, #440]	; (8003618 <HAL_RCC_OscConfig+0x6d8>)
 800345e:	f7fe f8b1 	bl	80015c4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b00      	cmp	r3, #0
 8003468:	d04a      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003472:	d045      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800347c:	d040      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003486:	d03b      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003490:	d036      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800349a:	d031      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034a4:	d02c      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80034ae:	d027      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b8:	d022      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034c2:	d01d      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80034cc:	d018      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80034d6:	d013      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034e0:	d00e      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80034ea:	d009      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80034f4:	d004      	beq.n	8003500 <HAL_RCC_OscConfig+0x5c0>
 80034f6:	f240 21b9 	movw	r1, #697	; 0x2b9
 80034fa:	4847      	ldr	r0, [pc, #284]	; (8003618 <HAL_RCC_OscConfig+0x6d8>)
 80034fc:	f7fe f862 	bl	80015c4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003500:	4b46      	ldr	r3, [pc, #280]	; (800361c <HAL_RCC_OscConfig+0x6dc>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003506:	f7fe fbaf 	bl	8001c68 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350e:	f7fe fbab 	bl	8001c68 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e075      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003520:	4b3c      	ldr	r3, [pc, #240]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f0      	bne.n	800350e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d116      	bne.n	8003564 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_OscConfig+0x612>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003546:	d004      	beq.n	8003552 <HAL_RCC_OscConfig+0x612>
 8003548:	f240 21cf 	movw	r1, #719	; 0x2cf
 800354c:	4832      	ldr	r0, [pc, #200]	; (8003618 <HAL_RCC_OscConfig+0x6d8>)
 800354e:	f7fe f839 	bl	80015c4 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003552:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	492d      	ldr	r1, [pc, #180]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003564:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a19      	ldr	r1, [r3, #32]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	430b      	orrs	r3, r1
 8003576:	4927      	ldr	r1, [pc, #156]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 8003578:	4313      	orrs	r3, r2
 800357a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <HAL_RCC_OscConfig+0x6dc>)
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fe fb71 	bl	8001c68 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358a:	f7fe fb6d 	bl	8001c68 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e037      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x64a>
 80035a8:	e02f      	b.n	800360a <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_RCC_OscConfig+0x6dc>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe fb5a 	bl	8001c68 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fe fb56 	bl	8001c68 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e020      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x678>
 80035d6:	e018      	b.n	800360a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e013      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_OscConfig+0x6d4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d001      	beq.n	800360a <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	0800591c 	.word	0x0800591c
 800361c:	42420060 	.word	0x42420060

08003620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e176      	b.n	8003922 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d116      	bne.n	800366e <HAL_RCC_ClockConfig+0x4e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d110      	bne.n	800366e <HAL_RCC_ClockConfig+0x4e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <HAL_RCC_ClockConfig+0x4e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <HAL_RCC_ClockConfig+0x4e>
 8003664:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003668:	4874      	ldr	r0, [pc, #464]	; (800383c <HAL_RCC_ClockConfig+0x21c>)
 800366a:	f7fd ffab 	bl	80015c4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCC_ClockConfig+0x6a>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d007      	beq.n	800368a <HAL_RCC_ClockConfig+0x6a>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d004      	beq.n	800368a <HAL_RCC_ClockConfig+0x6a>
 8003680:	f240 3139 	movw	r1, #825	; 0x339
 8003684:	486d      	ldr	r0, [pc, #436]	; (800383c <HAL_RCC_ClockConfig+0x21c>)
 8003686:	f7fd ff9d 	bl	80015c4 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800368a:	4b6d      	ldr	r3, [pc, #436]	; (8003840 <HAL_RCC_ClockConfig+0x220>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d910      	bls.n	80036ba <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003698:	4b69      	ldr	r3, [pc, #420]	; (8003840 <HAL_RCC_ClockConfig+0x220>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 0207 	bic.w	r2, r3, #7
 80036a0:	4967      	ldr	r1, [pc, #412]	; (8003840 <HAL_RCC_ClockConfig+0x220>)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a8:	4b65      	ldr	r3, [pc, #404]	; (8003840 <HAL_RCC_ClockConfig+0x220>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e133      	b.n	8003922 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d049      	beq.n	800375a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d2:	4b5c      	ldr	r3, [pc, #368]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4a5b      	ldr	r2, [pc, #364]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 80036d8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036dc:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ea:	4b56      	ldr	r3, [pc, #344]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a55      	ldr	r2, [pc, #340]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 80036f0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036f4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d024      	beq.n	8003748 <HAL_RCC_ClockConfig+0x128>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b80      	cmp	r3, #128	; 0x80
 8003704:	d020      	beq.n	8003748 <HAL_RCC_ClockConfig+0x128>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b90      	cmp	r3, #144	; 0x90
 800370c:	d01c      	beq.n	8003748 <HAL_RCC_ClockConfig+0x128>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2ba0      	cmp	r3, #160	; 0xa0
 8003714:	d018      	beq.n	8003748 <HAL_RCC_ClockConfig+0x128>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2bb0      	cmp	r3, #176	; 0xb0
 800371c:	d014      	beq.n	8003748 <HAL_RCC_ClockConfig+0x128>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2bc0      	cmp	r3, #192	; 0xc0
 8003724:	d010      	beq.n	8003748 <HAL_RCC_ClockConfig+0x128>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2bd0      	cmp	r3, #208	; 0xd0
 800372c:	d00c      	beq.n	8003748 <HAL_RCC_ClockConfig+0x128>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2be0      	cmp	r3, #224	; 0xe0
 8003734:	d008      	beq.n	8003748 <HAL_RCC_ClockConfig+0x128>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2bf0      	cmp	r3, #240	; 0xf0
 800373c:	d004      	beq.n	8003748 <HAL_RCC_ClockConfig+0x128>
 800373e:	f240 315f 	movw	r1, #863	; 0x35f
 8003742:	483e      	ldr	r0, [pc, #248]	; (800383c <HAL_RCC_ClockConfig+0x21c>)
 8003744:	f7fd ff3e 	bl	80015c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	493b      	ldr	r1, [pc, #236]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d051      	beq.n	800380a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_RCC_ClockConfig+0x168>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d008      	beq.n	8003788 <HAL_RCC_ClockConfig+0x168>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d004      	beq.n	8003788 <HAL_RCC_ClockConfig+0x168>
 800377e:	f240 3166 	movw	r1, #870	; 0x366
 8003782:	482e      	ldr	r0, [pc, #184]	; (800383c <HAL_RCC_ClockConfig+0x21c>)
 8003784:	f7fd ff1e 	bl	80015c4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003790:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d115      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0c0      	b.n	8003922 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a8:	4b26      	ldr	r3, [pc, #152]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b4      	b.n	8003922 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b8:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0ac      	b.n	8003922 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c8:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f023 0203 	bic.w	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	491b      	ldr	r1, [pc, #108]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037da:	f7fe fa45 	bl	8001c68 <HAL_GetTick>
 80037de:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e2:	f7fe fa41 	bl	8001c68 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e094      	b.n	8003922 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_RCC_ClockConfig+0x224>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 020c 	and.w	r2, r3, #12
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	429a      	cmp	r2, r3
 8003808:	d1eb      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800380a:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_RCC_ClockConfig+0x220>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d217      	bcs.n	8003848 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x220>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 0207 	bic.w	r2, r3, #7
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <HAL_RCC_ClockConfig+0x220>)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCC_ClockConfig+0x220>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d008      	beq.n	8003848 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e073      	b.n	8003922 <HAL_RCC_ClockConfig+0x302>
 800383a:	bf00      	nop
 800383c:	0800591c 	.word	0x0800591c
 8003840:	40022000 	.word	0x40022000
 8003844:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d025      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d018      	beq.n	800388e <HAL_RCC_ClockConfig+0x26e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003864:	d013      	beq.n	800388e <HAL_RCC_ClockConfig+0x26e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800386e:	d00e      	beq.n	800388e <HAL_RCC_ClockConfig+0x26e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003878:	d009      	beq.n	800388e <HAL_RCC_ClockConfig+0x26e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003882:	d004      	beq.n	800388e <HAL_RCC_ClockConfig+0x26e>
 8003884:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003888:	4828      	ldr	r0, [pc, #160]	; (800392c <HAL_RCC_ClockConfig+0x30c>)
 800388a:	f7fd fe9b 	bl	80015c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_RCC_ClockConfig+0x310>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	4925      	ldr	r1, [pc, #148]	; (8003930 <HAL_RCC_ClockConfig+0x310>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d026      	beq.n	80038fa <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d018      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x2c6>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038bc:	d013      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x2c6>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80038c6:	d00e      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x2c6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038d0:	d009      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x2c6>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038da:	d004      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x2c6>
 80038dc:	f240 31ab 	movw	r1, #939	; 0x3ab
 80038e0:	4812      	ldr	r0, [pc, #72]	; (800392c <HAL_RCC_ClockConfig+0x30c>)
 80038e2:	f7fd fe6f 	bl	80015c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCC_ClockConfig+0x310>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	490e      	ldr	r1, [pc, #56]	; (8003930 <HAL_RCC_ClockConfig+0x310>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038fa:	f000 f821 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80038fe:	4601      	mov	r1, r0
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_ClockConfig+0x310>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <HAL_RCC_ClockConfig+0x314>)
 800390c:	5cd3      	ldrb	r3, [r2, r3]
 800390e:	fa21 f303 	lsr.w	r3, r1, r3
 8003912:	4a09      	ldr	r2, [pc, #36]	; (8003938 <HAL_RCC_ClockConfig+0x318>)
 8003914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCC_ClockConfig+0x31c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe f962 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	0800591c 	.word	0x0800591c
 8003930:	40021000 	.word	0x40021000
 8003934:	08005aa0 	.word	0x08005aa0
 8003938:	20000000 	.word	0x20000000
 800393c:	20000004 	.word	0x20000004

08003940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	b490      	push	{r4, r7}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003946:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003948:	1d3c      	adds	r4, r7, #4
 800394a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800394c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003950:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b04      	cmp	r3, #4
 8003978:	d002      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x40>
 800397a:	2b08      	cmp	r3, #8
 800397c:	d003      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x46>
 800397e:	e02d      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003982:	623b      	str	r3, [r7, #32]
      break;
 8003984:	e02d      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	0c9b      	lsrs	r3, r3, #18
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003992:	4413      	add	r3, r2
 8003994:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003998:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039a4:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	0c5b      	lsrs	r3, r3, #17
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039b2:	4413      	add	r3, r2
 80039b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80039be:	fb02 f203 	mul.w	r2, r2, r3
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ca:	e004      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	623b      	str	r3, [r7, #32]
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80039de:	623b      	str	r3, [r7, #32]
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	6a3b      	ldr	r3, [r7, #32]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3728      	adds	r7, #40	; 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc90      	pop	{r4, r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	08005954 	.word	0x08005954
 80039f4:	08005964 	.word	0x08005964
 80039f8:	40021000 	.word	0x40021000
 80039fc:	007a1200 	.word	0x007a1200
 8003a00:	003d0900 	.word	0x003d0900

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000000 	.word	0x20000000

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a1c:	f7ff fff2 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a20:	4601      	mov	r1, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4a03      	ldr	r2, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	08005ab0 	.word	0x08005ab0

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a44:	f7ff ffde 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a48:	4601      	mov	r1, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	0adb      	lsrs	r3, r3, #11
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4a03      	ldr	r2, [pc, #12]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	08005ab0 	.word	0x08005ab0

08003a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <RCC_Delay+0x34>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <RCC_Delay+0x38>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0a5b      	lsrs	r3, r3, #9
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a84:	bf00      	nop
  }
  while (Delay --);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	60fa      	str	r2, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f9      	bne.n	8003a84 <RCC_Delay+0x1c>
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	10624dd3 	.word	0x10624dd3

08003aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10f      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003ad8:	216c      	movs	r1, #108	; 0x6c
 8003ada:	4873      	ldr	r0, [pc, #460]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003adc:	f7fd fd72 	bl	80015c4 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8095 	beq.w	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d012      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003afe:	d00d      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b08:	d008      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b12:	d003      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003b14:	2172      	movs	r1, #114	; 0x72
 8003b16:	4864      	ldr	r0, [pc, #400]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003b18:	f7fd fd54 	bl	80015c4 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b20:	4b62      	ldr	r3, [pc, #392]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2c:	4b5f      	ldr	r3, [pc, #380]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	4a5e      	ldr	r2, [pc, #376]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b36:	61d3      	str	r3, [r2, #28]
 8003b38:	4b5c      	ldr	r3, [pc, #368]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b44:	2301      	movs	r3, #1
 8003b46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d118      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b54:	4b56      	ldr	r3, [pc, #344]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a55      	ldr	r2, [pc, #340]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b60:	f7fe f882 	bl	8001c68 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b66:	e008      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b68:	f7fe f87e 	bl	8001c68 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e092      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7a:	4b4d      	ldr	r3, [pc, #308]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b86:	4b49      	ldr	r3, [pc, #292]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d02e      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d027      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba4:	4b41      	ldr	r3, [pc, #260]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bae:	4b41      	ldr	r3, [pc, #260]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb4:	4b3f      	ldr	r3, [pc, #252]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bba:	4a3c      	ldr	r2, [pc, #240]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d014      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bca:	f7fe f84d 	bl	8001c68 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	e00a      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe f849 	bl	8001c68 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e05b      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be8:	4b30      	ldr	r3, [pc, #192]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ee      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	492a      	ldr	r1, [pc, #168]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d105      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0c:	4b27      	ldr	r3, [pc, #156]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4a26      	ldr	r2, [pc, #152]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01f      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d012      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c34:	d00d      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3e:	d008      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c48:	d003      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003c4a:	21b9      	movs	r1, #185	; 0xb9
 8003c4c:	4816      	ldr	r0, [pc, #88]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003c4e:	f7fd fcb9 	bl	80015c4 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c52:	4b16      	ldr	r3, [pc, #88]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4913      	ldr	r1, [pc, #76]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d016      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c78:	d008      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c82:	f240 1115 	movw	r1, #277	; 0x115
 8003c86:	4808      	ldr	r0, [pc, #32]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003c88:	f7fd fc9c 	bl	80015c4 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c8c:	4b07      	ldr	r3, [pc, #28]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4904      	ldr	r1, [pc, #16]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	08005968 	.word	0x08005968
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	42420440 	.word	0x42420440

08003cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e0fd      	b.n	8003ec6 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a80      	ldr	r2, [pc, #512]	; (8003ed0 <HAL_SPI_Init+0x218>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d009      	beq.n	8003ce8 <HAL_SPI_Init+0x30>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a7e      	ldr	r2, [pc, #504]	; (8003ed4 <HAL_SPI_Init+0x21c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d004      	beq.n	8003ce8 <HAL_SPI_Init+0x30>
 8003cde:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003ce2:	487d      	ldr	r0, [pc, #500]	; (8003ed8 <HAL_SPI_Init+0x220>)
 8003ce4:	f7fd fc6e 	bl	80015c4 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d009      	beq.n	8003d04 <HAL_SPI_Init+0x4c>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cf8:	d004      	beq.n	8003d04 <HAL_SPI_Init+0x4c>
 8003cfa:	f240 1159 	movw	r1, #345	; 0x159
 8003cfe:	4876      	ldr	r0, [pc, #472]	; (8003ed8 <HAL_SPI_Init+0x220>)
 8003d00:	f7fd fc60 	bl	80015c4 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00e      	beq.n	8003d2a <HAL_SPI_Init+0x72>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d14:	d009      	beq.n	8003d2a <HAL_SPI_Init+0x72>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1e:	d004      	beq.n	8003d2a <HAL_SPI_Init+0x72>
 8003d20:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003d24:	486c      	ldr	r0, [pc, #432]	; (8003ed8 <HAL_SPI_Init+0x220>)
 8003d26:	f7fd fc4d 	bl	80015c4 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d32:	d008      	beq.n	8003d46 <HAL_SPI_Init+0x8e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <HAL_SPI_Init+0x8e>
 8003d3c:	f240 115b 	movw	r1, #347	; 0x15b
 8003d40:	4865      	ldr	r0, [pc, #404]	; (8003ed8 <HAL_SPI_Init+0x220>)
 8003d42:	f7fd fc3f 	bl	80015c4 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d4e:	d00d      	beq.n	8003d6c <HAL_SPI_Init+0xb4>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <HAL_SPI_Init+0xb4>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d60:	d004      	beq.n	8003d6c <HAL_SPI_Init+0xb4>
 8003d62:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003d66:	485c      	ldr	r0, [pc, #368]	; (8003ed8 <HAL_SPI_Init+0x220>)
 8003d68:	f7fd fc2c 	bl	80015c4 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <HAL_SPI_Init+0xfe>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d01c      	beq.n	8003db6 <HAL_SPI_Init+0xfe>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d018      	beq.n	8003db6 <HAL_SPI_Init+0xfe>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	2b18      	cmp	r3, #24
 8003d8a:	d014      	beq.n	8003db6 <HAL_SPI_Init+0xfe>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d010      	beq.n	8003db6 <HAL_SPI_Init+0xfe>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	2b28      	cmp	r3, #40	; 0x28
 8003d9a:	d00c      	beq.n	8003db6 <HAL_SPI_Init+0xfe>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	2b30      	cmp	r3, #48	; 0x30
 8003da2:	d008      	beq.n	8003db6 <HAL_SPI_Init+0xfe>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	2b38      	cmp	r3, #56	; 0x38
 8003daa:	d004      	beq.n	8003db6 <HAL_SPI_Init+0xfe>
 8003dac:	f240 115d 	movw	r1, #349	; 0x15d
 8003db0:	4849      	ldr	r0, [pc, #292]	; (8003ed8 <HAL_SPI_Init+0x220>)
 8003db2:	f7fd fc07 	bl	80015c4 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <HAL_SPI_Init+0x118>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	2b80      	cmp	r3, #128	; 0x80
 8003dc4:	d004      	beq.n	8003dd0 <HAL_SPI_Init+0x118>
 8003dc6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003dca:	4843      	ldr	r0, [pc, #268]	; (8003ed8 <HAL_SPI_Init+0x220>)
 8003dcc:	f7fd fbfa 	bl	80015c4 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_SPI_Init+0x12a>
 8003dd8:	f240 1161 	movw	r1, #353	; 0x161
 8003ddc:	483e      	ldr	r0, [pc, #248]	; (8003ed8 <HAL_SPI_Init+0x220>)
 8003dde:	f7fd fbf1 	bl	80015c4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d119      	bne.n	8003e1e <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_SPI_Init+0x14c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d004      	beq.n	8003e04 <HAL_SPI_Init+0x14c>
 8003dfa:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8003dfe:	4836      	ldr	r0, [pc, #216]	; (8003ed8 <HAL_SPI_Init+0x220>)
 8003e00:	f7fd fbe0 	bl	80015c4 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_SPI_Init+0x166>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d004      	beq.n	8003e1e <HAL_SPI_Init+0x166>
 8003e14:	f240 1165 	movw	r1, #357	; 0x165
 8003e18:	482f      	ldr	r0, [pc, #188]	; (8003ed8 <HAL_SPI_Init+0x220>)
 8003e1a:	f7fd fbd3 	bl	80015c4 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7fd fc65 	bl	8001708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2202      	movs	r2, #2
 8003e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	ea42 0103 	orr.w	r1, r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	0c1a      	lsrs	r2, r3, #16
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f002 0204 	and.w	r2, r2, #4
 8003ea4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40013000 	.word	0x40013000
 8003ed4:	40003800 	.word	0x40003800
 8003ed8:	080059b8 	.word	0x080059b8

08003edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e06f      	b.n	8003fce <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a39      	ldr	r2, [pc, #228]	; (8003fd8 <HAL_TIM_Base_Init+0xfc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d013      	beq.n	8003f20 <HAL_TIM_Base_Init+0x44>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f00:	d00e      	beq.n	8003f20 <HAL_TIM_Base_Init+0x44>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a35      	ldr	r2, [pc, #212]	; (8003fdc <HAL_TIM_Base_Init+0x100>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d009      	beq.n	8003f20 <HAL_TIM_Base_Init+0x44>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a33      	ldr	r2, [pc, #204]	; (8003fe0 <HAL_TIM_Base_Init+0x104>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d004      	beq.n	8003f20 <HAL_TIM_Base_Init+0x44>
 8003f16:	f44f 7189 	mov.w	r1, #274	; 0x112
 8003f1a:	4832      	ldr	r0, [pc, #200]	; (8003fe4 <HAL_TIM_Base_Init+0x108>)
 8003f1c:	f7fd fb52 	bl	80015c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d014      	beq.n	8003f52 <HAL_TIM_Base_Init+0x76>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d010      	beq.n	8003f52 <HAL_TIM_Base_Init+0x76>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d00c      	beq.n	8003f52 <HAL_TIM_Base_Init+0x76>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d008      	beq.n	8003f52 <HAL_TIM_Base_Init+0x76>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b60      	cmp	r3, #96	; 0x60
 8003f46:	d004      	beq.n	8003f52 <HAL_TIM_Base_Init+0x76>
 8003f48:	f240 1113 	movw	r1, #275	; 0x113
 8003f4c:	4825      	ldr	r0, [pc, #148]	; (8003fe4 <HAL_TIM_Base_Init+0x108>)
 8003f4e:	f7fd fb39 	bl	80015c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00e      	beq.n	8003f78 <HAL_TIM_Base_Init+0x9c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f62:	d009      	beq.n	8003f78 <HAL_TIM_Base_Init+0x9c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f6c:	d004      	beq.n	8003f78 <HAL_TIM_Base_Init+0x9c>
 8003f6e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003f72:	481c      	ldr	r0, [pc, #112]	; (8003fe4 <HAL_TIM_Base_Init+0x108>)
 8003f74:	f7fd fb26 	bl	80015c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_TIM_Base_Init+0xb6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b80      	cmp	r3, #128	; 0x80
 8003f86:	d004      	beq.n	8003f92 <HAL_TIM_Base_Init+0xb6>
 8003f88:	f240 1115 	movw	r1, #277	; 0x115
 8003f8c:	4815      	ldr	r0, [pc, #84]	; (8003fe4 <HAL_TIM_Base_Init+0x108>)
 8003f8e:	f7fd fb19 	bl	80015c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd fd38 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f000 f8b4 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	080059f0 	.word	0x080059f0

08003fe8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a49      	ldr	r2, [pc, #292]	; (800411c <HAL_TIM_SlaveConfigSynchro+0x134>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d00e      	beq.n	8004024 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a45      	ldr	r2, [pc, #276]	; (8004120 <HAL_TIM_SlaveConfigSynchro+0x138>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a43      	ldr	r2, [pc, #268]	; (8004124 <HAL_TIM_SlaveConfigSynchro+0x13c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_TIM_SlaveConfigSynchro+0x3c>
 800401a:	f241 213b 	movw	r1, #4667	; 0x123b
 800401e:	4842      	ldr	r0, [pc, #264]	; (8004128 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8004020:	f7fd fad0 	bl	80015c4 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d014      	beq.n	8004056 <HAL_TIM_SlaveConfigSynchro+0x6e>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b04      	cmp	r3, #4
 8004032:	d010      	beq.n	8004056 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b05      	cmp	r3, #5
 800403a:	d00c      	beq.n	8004056 <HAL_TIM_SlaveConfigSynchro+0x6e>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b06      	cmp	r3, #6
 8004042:	d008      	beq.n	8004056 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b07      	cmp	r3, #7
 800404a:	d004      	beq.n	8004056 <HAL_TIM_SlaveConfigSynchro+0x6e>
 800404c:	f241 213c 	movw	r1, #4668	; 0x123c
 8004050:	4835      	ldr	r0, [pc, #212]	; (8004128 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8004052:	f7fd fab7 	bl	80015c4 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d020      	beq.n	80040a0 <HAL_TIM_SlaveConfigSynchro+0xb8>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b10      	cmp	r3, #16
 8004064:	d01c      	beq.n	80040a0 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b20      	cmp	r3, #32
 800406c:	d018      	beq.n	80040a0 <HAL_TIM_SlaveConfigSynchro+0xb8>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b30      	cmp	r3, #48	; 0x30
 8004074:	d014      	beq.n	80040a0 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d010      	beq.n	80040a0 <HAL_TIM_SlaveConfigSynchro+0xb8>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b50      	cmp	r3, #80	; 0x50
 8004084:	d00c      	beq.n	80040a0 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b60      	cmp	r3, #96	; 0x60
 800408c:	d008      	beq.n	80040a0 <HAL_TIM_SlaveConfigSynchro+0xb8>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b70      	cmp	r3, #112	; 0x70
 8004094:	d004      	beq.n	80040a0 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8004096:	f241 213d 	movw	r1, #4669	; 0x123d
 800409a:	4823      	ldr	r0, [pc, #140]	; (8004128 <HAL_TIM_SlaveConfigSynchro+0x140>)
 800409c:	f7fd fa92 	bl	80015c4 <assert_failed>

  __HAL_LOCK(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_SlaveConfigSynchro+0xc6>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e031      	b.n	8004112 <HAL_TIM_SlaveConfigSynchro+0x12a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80040be:	6839      	ldr	r1, [r7, #0]
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f895 	bl	80041f0 <TIM_SlaveTimer_SetConfig>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <HAL_TIM_SlaveConfigSynchro+0xf8>
  {
    htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e018      	b.n	8004112 <HAL_TIM_SlaveConfigSynchro+0x12a>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ee:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040fe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40000400 	.word	0x40000400
 8004124:	40000800 	.word	0x40000800
 8004128:	080059f0 	.word	0x080059f0

0800412c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <TIM_Base_SetConfig+0xb8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d007      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a26      	ldr	r2, [pc, #152]	; (80041e8 <TIM_Base_SetConfig+0xbc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a25      	ldr	r2, [pc, #148]	; (80041ec <TIM_Base_SetConfig+0xc0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d108      	bne.n	800416e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <TIM_Base_SetConfig+0xb8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00b      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417c:	d007      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <TIM_Base_SetConfig+0xbc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d003      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <TIM_Base_SetConfig+0xc0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d108      	bne.n	80041a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a07      	ldr	r2, [pc, #28]	; (80041e4 <TIM_Base_SetConfig+0xb8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d103      	bne.n	80041d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	615a      	str	r2, [r3, #20]
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800

080041f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0307 	bic.w	r3, r3, #7
 800421a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b30      	cmp	r3, #48	; 0x30
 8004234:	f000 8158 	beq.w	80044e8 <TIM_SlaveTimer_SetConfig+0x2f8>
 8004238:	2b30      	cmp	r3, #48	; 0x30
 800423a:	d809      	bhi.n	8004250 <TIM_SlaveTimer_SetConfig+0x60>
 800423c:	2b10      	cmp	r3, #16
 800423e:	f000 8153 	beq.w	80044e8 <TIM_SlaveTimer_SetConfig+0x2f8>
 8004242:	2b20      	cmp	r3, #32
 8004244:	f000 8150 	beq.w	80044e8 <TIM_SlaveTimer_SetConfig+0x2f8>
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 814d 	beq.w	80044e8 <TIM_SlaveTimer_SetConfig+0x2f8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800424e:	e165      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 8004250:	2b50      	cmp	r3, #80	; 0x50
 8004252:	f000 80b5 	beq.w	80043c0 <TIM_SlaveTimer_SetConfig+0x1d0>
 8004256:	2b50      	cmp	r3, #80	; 0x50
 8004258:	d802      	bhi.n	8004260 <TIM_SlaveTimer_SetConfig+0x70>
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d065      	beq.n	800432a <TIM_SlaveTimer_SetConfig+0x13a>
      break;
 800425e:	e15d      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 8004260:	2b60      	cmp	r3, #96	; 0x60
 8004262:	f000 80f3 	beq.w	800444c <TIM_SlaveTimer_SetConfig+0x25c>
 8004266:	2b70      	cmp	r3, #112	; 0x70
 8004268:	d000      	beq.n	800426c <TIM_SlaveTimer_SetConfig+0x7c>
      break;
 800426a:	e157      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a99      	ldr	r2, [pc, #612]	; (80044d8 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_SlaveTimer_SetConfig+0xae>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427e:	d00e      	beq.n	800429e <TIM_SlaveTimer_SetConfig+0xae>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a95      	ldr	r2, [pc, #596]	; (80044dc <TIM_SlaveTimer_SetConfig+0x2ec>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <TIM_SlaveTimer_SetConfig+0xae>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a94      	ldr	r2, [pc, #592]	; (80044e0 <TIM_SlaveTimer_SetConfig+0x2f0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <TIM_SlaveTimer_SetConfig+0xae>
 8004294:	f641 011c 	movw	r1, #6172	; 0x181c
 8004298:	4892      	ldr	r0, [pc, #584]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800429a:	f7fd f993 	bl	80015c4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d013      	beq.n	80042ce <TIM_SlaveTimer_SetConfig+0xde>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ae:	d00e      	beq.n	80042ce <TIM_SlaveTimer_SetConfig+0xde>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b8:	d009      	beq.n	80042ce <TIM_SlaveTimer_SetConfig+0xde>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042c2:	d004      	beq.n	80042ce <TIM_SlaveTimer_SetConfig+0xde>
 80042c4:	f641 011d 	movw	r1, #6173	; 0x181d
 80042c8:	4886      	ldr	r0, [pc, #536]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80042ca:	f7fd f97b 	bl	80015c4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d6:	d014      	beq.n	8004302 <TIM_SlaveTimer_SetConfig+0x112>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d010      	beq.n	8004302 <TIM_SlaveTimer_SetConfig+0x112>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00c      	beq.n	8004302 <TIM_SlaveTimer_SetConfig+0x112>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d008      	beq.n	8004302 <TIM_SlaveTimer_SetConfig+0x112>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b0a      	cmp	r3, #10
 80042f6:	d004      	beq.n	8004302 <TIM_SlaveTimer_SetConfig+0x112>
 80042f8:	f641 011e 	movw	r1, #6174	; 0x181e
 80042fc:	4879      	ldr	r0, [pc, #484]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80042fe:	f7fd f961 	bl	80015c4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b0f      	cmp	r3, #15
 8004308:	d904      	bls.n	8004314 <TIM_SlaveTimer_SetConfig+0x124>
 800430a:	f641 011f 	movw	r1, #6175	; 0x181f
 800430e:	4875      	ldr	r0, [pc, #468]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004310:	f7fd f958 	bl	80015c4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68d9      	ldr	r1, [r3, #12]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f000 f965 	bl	80045f2 <TIM_ETR_SetConfig>
      break;
 8004328:	e0f8      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6a      	ldr	r2, [pc, #424]	; (80044d8 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <TIM_SlaveTimer_SetConfig+0x16c>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433c:	d00e      	beq.n	800435c <TIM_SlaveTimer_SetConfig+0x16c>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a66      	ldr	r2, [pc, #408]	; (80044dc <TIM_SlaveTimer_SetConfig+0x2ec>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d009      	beq.n	800435c <TIM_SlaveTimer_SetConfig+0x16c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a64      	ldr	r2, [pc, #400]	; (80044e0 <TIM_SlaveTimer_SetConfig+0x2f0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <TIM_SlaveTimer_SetConfig+0x16c>
 8004352:	f641 012b 	movw	r1, #6187	; 0x182b
 8004356:	4863      	ldr	r0, [pc, #396]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004358:	f7fd f934 	bl	80015c4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b0f      	cmp	r3, #15
 8004362:	d904      	bls.n	800436e <TIM_SlaveTimer_SetConfig+0x17e>
 8004364:	f641 012c 	movw	r1, #6188	; 0x182c
 8004368:	485e      	ldr	r0, [pc, #376]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800436a:	f7fd f92b 	bl	80015c4 <assert_failed>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b05      	cmp	r3, #5
 8004374:	d101      	bne.n	800437a <TIM_SlaveTimer_SetConfig+0x18a>
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0d1      	b.n	800451e <TIM_SlaveTimer_SetConfig+0x32e>
      tmpccer = htim->Instance->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a1a      	ldr	r2, [r3, #32]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0201 	bic.w	r2, r2, #1
 8004390:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043a0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	621a      	str	r2, [r3, #32]
      break;
 80043be:	e0ad      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a44      	ldr	r2, [pc, #272]	; (80044d8 <TIM_SlaveTimer_SetConfig+0x2e8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <TIM_SlaveTimer_SetConfig+0x202>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d2:	d00e      	beq.n	80043f2 <TIM_SlaveTimer_SetConfig+0x202>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a40      	ldr	r2, [pc, #256]	; (80044dc <TIM_SlaveTimer_SetConfig+0x2ec>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d009      	beq.n	80043f2 <TIM_SlaveTimer_SetConfig+0x202>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a3f      	ldr	r2, [pc, #252]	; (80044e0 <TIM_SlaveTimer_SetConfig+0x2f0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <TIM_SlaveTimer_SetConfig+0x202>
 80043e8:	f641 0145 	movw	r1, #6213	; 0x1845
 80043ec:	483d      	ldr	r0, [pc, #244]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80043ee:	f7fd f8e9 	bl	80015c4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fa:	d014      	beq.n	8004426 <TIM_SlaveTimer_SetConfig+0x236>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <TIM_SlaveTimer_SetConfig+0x236>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00c      	beq.n	8004426 <TIM_SlaveTimer_SetConfig+0x236>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d008      	beq.n	8004426 <TIM_SlaveTimer_SetConfig+0x236>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b0a      	cmp	r3, #10
 800441a:	d004      	beq.n	8004426 <TIM_SlaveTimer_SetConfig+0x236>
 800441c:	f641 0146 	movw	r1, #6214	; 0x1846
 8004420:	4830      	ldr	r0, [pc, #192]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004422:	f7fd f8cf 	bl	80015c4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b0f      	cmp	r3, #15
 800442c:	d904      	bls.n	8004438 <TIM_SlaveTimer_SetConfig+0x248>
 800442e:	f641 0147 	movw	r1, #6215	; 0x1847
 8004432:	482c      	ldr	r0, [pc, #176]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8004434:	f7fd f8c6 	bl	80015c4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6899      	ldr	r1, [r3, #8]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	461a      	mov	r2, r3
 8004446:	f000 f877 	bl	8004538 <TIM_TI1_ConfigInputStage>
      break;
 800444a:	e067      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x28e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d00e      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x28e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1d      	ldr	r2, [pc, #116]	; (80044dc <TIM_SlaveTimer_SetConfig+0x2ec>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x28e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <TIM_SlaveTimer_SetConfig+0x2f0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <TIM_SlaveTimer_SetConfig+0x28e>
 8004474:	f641 0153 	movw	r1, #6227	; 0x1853
 8004478:	481a      	ldr	r0, [pc, #104]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800447a:	f7fd f8a3 	bl	80015c4 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004486:	d014      	beq.n	80044b2 <TIM_SlaveTimer_SetConfig+0x2c2>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d010      	beq.n	80044b2 <TIM_SlaveTimer_SetConfig+0x2c2>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00c      	beq.n	80044b2 <TIM_SlaveTimer_SetConfig+0x2c2>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d008      	beq.n	80044b2 <TIM_SlaveTimer_SetConfig+0x2c2>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b0a      	cmp	r3, #10
 80044a6:	d004      	beq.n	80044b2 <TIM_SlaveTimer_SetConfig+0x2c2>
 80044a8:	f641 0154 	movw	r1, #6228	; 0x1854
 80044ac:	480d      	ldr	r0, [pc, #52]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80044ae:	f7fd f889 	bl	80015c4 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	d904      	bls.n	80044c4 <TIM_SlaveTimer_SetConfig+0x2d4>
 80044ba:	f641 0155 	movw	r1, #6229	; 0x1855
 80044be:	4809      	ldr	r0, [pc, #36]	; (80044e4 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80044c0:	f7fd f880 	bl	80015c4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6899      	ldr	r1, [r3, #8]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	461a      	mov	r2, r3
 80044d2:	f000 f85f 	bl	8004594 <TIM_TI2_ConfigInputStage>
      break;
 80044d6:	e021      	b.n	800451c <TIM_SlaveTimer_SetConfig+0x32c>
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	080059f0 	.word	0x080059f0
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a0e      	ldr	r2, [pc, #56]	; (8004528 <TIM_SlaveTimer_SetConfig+0x338>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <TIM_SlaveTimer_SetConfig+0x32a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fa:	d00e      	beq.n	800451a <TIM_SlaveTimer_SetConfig+0x32a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <TIM_SlaveTimer_SetConfig+0x33c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d009      	beq.n	800451a <TIM_SlaveTimer_SetConfig+0x32a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a09      	ldr	r2, [pc, #36]	; (8004530 <TIM_SlaveTimer_SetConfig+0x340>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <TIM_SlaveTimer_SetConfig+0x32a>
 8004510:	f641 0164 	movw	r1, #6244	; 0x1864
 8004514:	4807      	ldr	r0, [pc, #28]	; (8004534 <TIM_SlaveTimer_SetConfig+0x344>)
 8004516:	f7fd f855 	bl	80015c4 <assert_failed>
      break;
 800451a:	bf00      	nop
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	080059f0 	.word	0x080059f0

08004538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0201 	bic.w	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 030a 	bic.w	r3, r3, #10
 8004574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f023 0210 	bic.w	r2, r3, #16
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	031b      	lsls	r3, r3, #12
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	621a      	str	r2, [r3, #32]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800460c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	021a      	lsls	r2, r3, #8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	431a      	orrs	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4313      	orrs	r3, r2
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	609a      	str	r2, [r3, #8]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a43      	ldr	r2, [pc, #268]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d013      	beq.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d00e      	beq.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a3f      	ldr	r2, [pc, #252]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a3d      	ldr	r2, [pc, #244]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004662:	f240 6164 	movw	r1, #1636	; 0x664
 8004666:	483c      	ldr	r0, [pc, #240]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004668:	f7fc ffac 	bl	80015c4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b10      	cmp	r3, #16
 800467a:	d01c      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b20      	cmp	r3, #32
 8004682:	d018      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d014      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	d010      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b50      	cmp	r3, #80	; 0x50
 800469a:	d00c      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b60      	cmp	r3, #96	; 0x60
 80046a2:	d008      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b70      	cmp	r3, #112	; 0x70
 80046aa:	d004      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80046ac:	f240 6165 	movw	r1, #1637	; 0x665
 80046b0:	4829      	ldr	r0, [pc, #164]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80046b2:	f7fc ff87 	bl	80015c4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b80      	cmp	r3, #128	; 0x80
 80046bc:	d008      	beq.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80046c6:	f240 6166 	movw	r1, #1638	; 0x666
 80046ca:	4823      	ldr	r0, [pc, #140]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80046cc:	f7fc ff7a 	bl	80015c4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80046da:	2302      	movs	r3, #2
 80046dc:	e032      	b.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004704:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004716:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	4313      	orrs	r3, r2
 8004720:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	08005a28 	.word	0x08005a28

0800475c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e092      	b.n	8004894 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d02c      	beq.n	80047d0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a48      	ldr	r2, [pc, #288]	; (800489c <HAL_UART_Init+0x140>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00e      	beq.n	800479e <HAL_UART_Init+0x42>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a46      	ldr	r2, [pc, #280]	; (80048a0 <HAL_UART_Init+0x144>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_UART_Init+0x42>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a45      	ldr	r2, [pc, #276]	; (80048a4 <HAL_UART_Init+0x148>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <HAL_UART_Init+0x42>
 8004794:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004798:	4843      	ldr	r0, [pc, #268]	; (80048a8 <HAL_UART_Init+0x14c>)
 800479a:	f7fc ff13 	bl	80015c4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d028      	beq.n	80047f8 <HAL_UART_Init+0x9c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ae:	d023      	beq.n	80047f8 <HAL_UART_Init+0x9c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b8:	d01e      	beq.n	80047f8 <HAL_UART_Init+0x9c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c2:	d019      	beq.n	80047f8 <HAL_UART_Init+0x9c>
 80047c4:	f240 1147 	movw	r1, #327	; 0x147
 80047c8:	4837      	ldr	r0, [pc, #220]	; (80048a8 <HAL_UART_Init+0x14c>)
 80047ca:	f7fc fefb 	bl	80015c4 <assert_failed>
 80047ce:	e013      	b.n	80047f8 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a31      	ldr	r2, [pc, #196]	; (800489c <HAL_UART_Init+0x140>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_UART_Init+0x9c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a30      	ldr	r2, [pc, #192]	; (80048a0 <HAL_UART_Init+0x144>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_UART_Init+0x9c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2e      	ldr	r2, [pc, #184]	; (80048a4 <HAL_UART_Init+0x148>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_UART_Init+0x9c>
 80047ee:	f240 114b 	movw	r1, #331	; 0x14b
 80047f2:	482d      	ldr	r0, [pc, #180]	; (80048a8 <HAL_UART_Init+0x14c>)
 80047f4:	f7fc fee6 	bl	80015c4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d009      	beq.n	8004814 <HAL_UART_Init+0xb8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004808:	d004      	beq.n	8004814 <HAL_UART_Init+0xb8>
 800480a:	f240 114d 	movw	r1, #333	; 0x14d
 800480e:	4826      	ldr	r0, [pc, #152]	; (80048a8 <HAL_UART_Init+0x14c>)
 8004810:	f7fc fed8 	bl	80015c4 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fd f93d 	bl	8001aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2224      	movs	r2, #36	; 0x24
 8004832:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004844:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fb4a 	bl	8004ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800486a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800487a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40013800 	.word	0x40013800
 80048a0:	40004400 	.word	0x40004400
 80048a4:	40004800 	.word	0x40004800
 80048a8:	08005a64 	.word	0x08005a64

080048ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	f040 8083 	bne.w	80049d4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_UART_Transmit+0x2e>
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e07b      	b.n	80049d6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_UART_Transmit+0x40>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e074      	b.n	80049d6 <HAL_UART_Transmit+0x12a>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2221      	movs	r2, #33	; 0x21
 80048fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004902:	f7fd f9b1 	bl	8001c68 <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004914:	e042      	b.n	800499c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492c:	d122      	bne.n	8004974 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2200      	movs	r2, #0
 8004936:	2180      	movs	r1, #128	; 0x80
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f968 	bl	8004c0e <UART_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e046      	b.n	80049d6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800495a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	3302      	adds	r3, #2
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	e017      	b.n	800499c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	3301      	adds	r3, #1
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	e013      	b.n	800499c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2200      	movs	r2, #0
 800497c:	2180      	movs	r1, #128	; 0x80
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f945 	bl	8004c0e <UART_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e023      	b.n	80049d6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	60ba      	str	r2, [r7, #8]
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1b7      	bne.n	8004916 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2140      	movs	r1, #64	; 0x40
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f92c 	bl	8004c0e <UART_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e00a      	b.n	80049d6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10d      	bne.n	8004a32 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_UART_IRQHandler+0x52>
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9d7 	bl	8004dde <UART_Receive_IT>
      return;
 8004a30:	e0cc      	b.n	8004bcc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80ab 	beq.w	8004b90 <HAL_UART_IRQHandler+0x1b0>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <HAL_UART_IRQHandler+0x70>
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 80a0 	beq.w	8004b90 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_UART_IRQHandler+0x90>
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a68:	f043 0201 	orr.w	r2, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_UART_IRQHandler+0xb0>
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	f043 0202 	orr.w	r2, r3, #2
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_UART_IRQHandler+0xd0>
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa8:	f043 0204 	orr.w	r2, r3, #4
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_UART_IRQHandler+0xf0>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	f043 0208 	orr.w	r2, r3, #8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d078      	beq.n	8004bca <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <HAL_UART_IRQHandler+0x112>
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f976 	bl	8004dde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf14      	ite	ne
 8004b00:	2301      	movne	r3, #1
 8004b02:	2300      	moveq	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <HAL_UART_IRQHandler+0x13a>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d031      	beq.n	8004b7e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8c1 	bl	8004ca2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d023      	beq.n	8004b76 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d013      	beq.n	8004b6e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	4a22      	ldr	r2, [pc, #136]	; (8004bd4 <HAL_UART_IRQHandler+0x1f4>)
 8004b4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fd58 	bl	8002608 <HAL_DMA_Abort_IT>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d016      	beq.n	8004b8c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b68:	4610      	mov	r0, r2
 8004b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	e00e      	b.n	8004b8c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f844 	bl	8004bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	e00a      	b.n	8004b8c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f840 	bl	8004bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	e006      	b.n	8004b8c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f83c 	bl	8004bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b8a:	e01e      	b.n	8004bca <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	bf00      	nop
    return;
 8004b8e:	e01c      	b.n	8004bca <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <HAL_UART_IRQHandler+0x1cc>
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f8ad 	bl	8004d04 <UART_Transmit_IT>
    return;
 8004baa:	e00f      	b.n	8004bcc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_UART_IRQHandler+0x1ec>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f8f4 	bl	8004dae <UART_EndTransmit_IT>
    return;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <HAL_UART_IRQHandler+0x1ec>
    return;
 8004bca:	bf00      	nop
  }
}
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	08004cdd 	.word	0x08004cdd

08004bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr

08004bea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1e:	e02c      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d028      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c2e:	f7fd f81b 	bl	8001c68 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d21d      	bcs.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e00f      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	bf0c      	ite	eq
 8004c8a:	2301      	moveq	r3, #1
 8004c8c:	2300      	movne	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d0c3      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cb8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695a      	ldr	r2, [r3, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff ff80 	bl	8004bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b21      	cmp	r3, #33	; 0x21
 8004d16:	d144      	bne.n	8004da2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d20:	d11a      	bne.n	8004d58 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	1c9a      	adds	r2, r3, #2
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	621a      	str	r2, [r3, #32]
 8004d4a:	e00e      	b.n	8004d6a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	621a      	str	r2, [r3, #32]
 8004d56:	e008      	b.n	8004d6a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	1c59      	adds	r1, r3, #1
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6211      	str	r1, [r2, #32]
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	4619      	mov	r1, r3
 8004d78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10f      	bne.n	8004d9e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e000      	b.n	8004da4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
  }
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr

08004dae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff ff02 	bl	8004bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b22      	cmp	r3, #34	; 0x22
 8004df0:	d171      	bne.n	8004ed6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfa:	d123      	bne.n	8004e44 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10e      	bne.n	8004e28 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	1c9a      	adds	r2, r3, #2
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	629a      	str	r2, [r3, #40]	; 0x28
 8004e26:	e029      	b.n	8004e7c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	629a      	str	r2, [r3, #40]	; 0x28
 8004e42:	e01b      	b.n	8004e7c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6858      	ldr	r0, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	1c59      	adds	r1, r3, #1
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6291      	str	r1, [r2, #40]	; 0x28
 8004e5c:	b2c2      	uxtb	r2, r0
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	e00c      	b.n	8004e7c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6e:	1c58      	adds	r0, r3, #1
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	6288      	str	r0, [r1, #40]	; 0x28
 8004e74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d120      	bne.n	8004ed2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0220 	bic.w	r2, r2, #32
 8004e9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fe8e 	bl	8004bea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e002      	b.n	8004ed8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e000      	b.n	8004ed8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a84      	ldr	r2, [pc, #528]	; (8005100 <UART_SetConfig+0x220>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d904      	bls.n	8004efc <UART_SetConfig+0x1c>
 8004ef2:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8004ef6:	4883      	ldr	r0, [pc, #524]	; (8005104 <UART_SetConfig+0x224>)
 8004ef8:	f7fc fb64 	bl	80015c4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d009      	beq.n	8004f18 <UART_SetConfig+0x38>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0c:	d004      	beq.n	8004f18 <UART_SetConfig+0x38>
 8004f0e:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8004f12:	487c      	ldr	r0, [pc, #496]	; (8005104 <UART_SetConfig+0x224>)
 8004f14:	f7fc fb56 	bl	80015c4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00e      	beq.n	8004f3e <UART_SetConfig+0x5e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f28:	d009      	beq.n	8004f3e <UART_SetConfig+0x5e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f32:	d004      	beq.n	8004f3e <UART_SetConfig+0x5e>
 8004f34:	f640 31ff 	movw	r1, #3071	; 0xbff
 8004f38:	4872      	ldr	r0, [pc, #456]	; (8005104 <UART_SetConfig+0x224>)
 8004f3a:	f7fc fb43 	bl	80015c4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <UART_SetConfig+0x74>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <UART_SetConfig+0x7e>
 8004f54:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004f58:	486a      	ldr	r0, [pc, #424]	; (8005104 <UART_SetConfig+0x224>)
 8004f5a:	f7fc fb33 	bl	80015c4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f90:	f023 030c 	bic.w	r3, r3, #12
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	68f9      	ldr	r1, [r7, #12]
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699a      	ldr	r2, [r3, #24]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a53      	ldr	r2, [pc, #332]	; (8005108 <UART_SetConfig+0x228>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d14e      	bne.n	800505c <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fbe:	f7fe fd3f 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8004fc2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009a      	lsls	r2, r3, #2
 8004fce:	441a      	add	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	4a4c      	ldr	r2, [pc, #304]	; (800510c <UART_SetConfig+0x22c>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	0119      	lsls	r1, r3, #4
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009a      	lsls	r2, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ffa:	4b44      	ldr	r3, [pc, #272]	; (800510c <UART_SetConfig+0x22c>)
 8004ffc:	fba3 0302 	umull	r0, r3, r3, r2
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	2064      	movs	r0, #100	; 0x64
 8005004:	fb00 f303 	mul.w	r3, r0, r3
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	3332      	adds	r3, #50	; 0x32
 800500e:	4a3f      	ldr	r2, [pc, #252]	; (800510c <UART_SetConfig+0x22c>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800501a:	4419      	add	r1, r3
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009a      	lsls	r2, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005032:	4b36      	ldr	r3, [pc, #216]	; (800510c <UART_SetConfig+0x22c>)
 8005034:	fba3 0302 	umull	r0, r3, r3, r2
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	2064      	movs	r0, #100	; 0x64
 800503c:	fb00 f303 	mul.w	r3, r0, r3
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	3332      	adds	r3, #50	; 0x32
 8005046:	4a31      	ldr	r2, [pc, #196]	; (800510c <UART_SetConfig+0x22c>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	f003 020f 	and.w	r2, r3, #15
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	440a      	add	r2, r1
 8005058:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800505a:	e04d      	b.n	80050f8 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 800505c:	f7fe fcdc 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8005060:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009a      	lsls	r2, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	4a24      	ldr	r2, [pc, #144]	; (800510c <UART_SetConfig+0x22c>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	0119      	lsls	r1, r3, #4
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009a      	lsls	r2, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	fbb2 f2f3 	udiv	r2, r2, r3
 8005098:	4b1c      	ldr	r3, [pc, #112]	; (800510c <UART_SetConfig+0x22c>)
 800509a:	fba3 0302 	umull	r0, r3, r3, r2
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	2064      	movs	r0, #100	; 0x64
 80050a2:	fb00 f303 	mul.w	r3, r0, r3
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	3332      	adds	r3, #50	; 0x32
 80050ac:	4a17      	ldr	r2, [pc, #92]	; (800510c <UART_SetConfig+0x22c>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050b8:	4419      	add	r1, r3
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009a      	lsls	r2, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d0:	4b0e      	ldr	r3, [pc, #56]	; (800510c <UART_SetConfig+0x22c>)
 80050d2:	fba3 0302 	umull	r0, r3, r3, r2
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	2064      	movs	r0, #100	; 0x64
 80050da:	fb00 f303 	mul.w	r3, r0, r3
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	3332      	adds	r3, #50	; 0x32
 80050e4:	4a09      	ldr	r2, [pc, #36]	; (800510c <UART_SetConfig+0x22c>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	f003 020f 	and.w	r2, r3, #15
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	440a      	add	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	0044aa20 	.word	0x0044aa20
 8005104:	08005a64 	.word	0x08005a64
 8005108:	40013800 	.word	0x40013800
 800510c:	51eb851f 	.word	0x51eb851f

08005110 <_Znwj>:
 8005110:	b510      	push	{r4, lr}
 8005112:	2800      	cmp	r0, #0
 8005114:	bf14      	ite	ne
 8005116:	4604      	movne	r4, r0
 8005118:	2401      	moveq	r4, #1
 800511a:	4620      	mov	r0, r4
 800511c:	f000 fa28 	bl	8005570 <malloc>
 8005120:	b930      	cbnz	r0, 8005130 <_Znwj+0x20>
 8005122:	f000 f807 	bl	8005134 <_ZSt15get_new_handlerv>
 8005126:	b908      	cbnz	r0, 800512c <_Znwj+0x1c>
 8005128:	f000 f9f0 	bl	800550c <abort>
 800512c:	4780      	blx	r0
 800512e:	e7f4      	b.n	800511a <_Znwj+0xa>
 8005130:	bd10      	pop	{r4, pc}
	...

08005134 <_ZSt15get_new_handlerv>:
 8005134:	4b02      	ldr	r3, [pc, #8]	; (8005140 <_ZSt15get_new_handlerv+0xc>)
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	f3bf 8f5b 	dmb	ish
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	200000d0 	.word	0x200000d0

08005144 <_ZNSaIcEC1Ev>:
 8005144:	4770      	bx	lr

08005146 <_ZNSaIcED1Ev>:
 8005146:	4770      	bx	lr

08005148 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005148:	b10a      	cbz	r2, 800514e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800514a:	f000 ba21 	b.w	8005590 <memcpy>
 800514e:	4770      	bx	lr

08005150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005150:	b508      	push	{r3, lr}
 8005152:	680b      	ldr	r3, [r1, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	da02      	bge.n	800515e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8005158:	4809      	ldr	r0, [pc, #36]	; (8005180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800515a:	f000 f9d4 	bl	8005506 <_ZSt20__throw_length_errorPKc>
 800515e:	4293      	cmp	r3, r2
 8005160:	d908      	bls.n	8005174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005162:	0052      	lsls	r2, r2, #1
 8005164:	4293      	cmp	r3, r2
 8005166:	d205      	bcs.n	8005174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005168:	2a00      	cmp	r2, #0
 800516a:	bfb6      	itet	lt
 800516c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8005170:	600a      	strge	r2, [r1, #0]
 8005172:	600b      	strlt	r3, [r1, #0]
 8005174:	6808      	ldr	r0, [r1, #0]
 8005176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800517a:	3001      	adds	r0, #1
 800517c:	f7ff bfc8 	b.w	8005110 <_Znwj>
 8005180:	08005afb 	.word	0x08005afb

08005184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005184:	4603      	mov	r3, r0
 8005186:	f853 0b08 	ldr.w	r0, [r3], #8
 800518a:	4298      	cmp	r0, r3
 800518c:	d001      	beq.n	8005192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800518e:	f000 b9b5 	b.w	80054fc <_ZdlPv>
 8005192:	4770      	bx	lr

08005194 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8005194:	b508      	push	{r3, lr}
 8005196:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800519a:	6840      	ldr	r0, [r0, #4]
 800519c:	3901      	subs	r1, #1
 800519e:	1a09      	subs	r1, r1, r0
 80051a0:	4291      	cmp	r1, r2
 80051a2:	d202      	bcs.n	80051aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 f9ae 	bl	8005506 <_ZSt20__throw_length_errorPKc>
 80051aa:	bd08      	pop	{r3, pc}

080051ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80051ac:	6803      	ldr	r3, [r0, #0]
 80051ae:	428b      	cmp	r3, r1
 80051b0:	d806      	bhi.n	80051c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80051b2:	6840      	ldr	r0, [r0, #4]
 80051b4:	4418      	add	r0, r3
 80051b6:	4281      	cmp	r1, r0
 80051b8:	bf94      	ite	ls
 80051ba:	2000      	movls	r0, #0
 80051bc:	2001      	movhi	r0, #1
 80051be:	4770      	bx	lr
 80051c0:	2001      	movs	r0, #1
 80051c2:	4770      	bx	lr

080051c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80051c4:	2a01      	cmp	r2, #1
 80051c6:	b510      	push	{r4, lr}
 80051c8:	d102      	bne.n	80051d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80051ca:	780a      	ldrb	r2, [r1, #0]
 80051cc:	7002      	strb	r2, [r0, #0]
 80051ce:	bd10      	pop	{r4, pc}
 80051d0:	f7ff ffba 	bl	8005148 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80051d4:	e7fb      	b.n	80051ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080051d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80051d6:	2a01      	cmp	r2, #1
 80051d8:	b430      	push	{r4, r5}
 80051da:	d103      	bne.n	80051e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80051dc:	780b      	ldrb	r3, [r1, #0]
 80051de:	7003      	strb	r3, [r0, #0]
 80051e0:	bc30      	pop	{r4, r5}
 80051e2:	4770      	bx	lr
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	d0fb      	beq.n	80051e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80051e8:	bc30      	pop	{r4, r5}
 80051ea:	f000 b9dc 	b.w	80055a6 <memmove>

080051ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80051ee:	b508      	push	{r3, lr}
 80051f0:	1a52      	subs	r2, r2, r1
 80051f2:	f7ff ffe7 	bl	80051c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80051f6:	bd08      	pop	{r3, pc}

080051f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80051f8:	b508      	push	{r3, lr}
 80051fa:	1a52      	subs	r2, r2, r1
 80051fc:	f7ff ffe2 	bl	80051c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005200:	bd08      	pop	{r3, pc}

08005202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8005202:	4288      	cmp	r0, r1
 8005204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005206:	4604      	mov	r4, r0
 8005208:	460e      	mov	r6, r1
 800520a:	d020      	beq.n	800524e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 800520c:	6802      	ldr	r2, [r0, #0]
 800520e:	f100 0308 	add.w	r3, r0, #8
 8005212:	429a      	cmp	r2, r3
 8005214:	bf08      	it	eq
 8005216:	220f      	moveq	r2, #15
 8005218:	684d      	ldr	r5, [r1, #4]
 800521a:	bf18      	it	ne
 800521c:	6882      	ldrne	r2, [r0, #8]
 800521e:	42aa      	cmp	r2, r5
 8005220:	d20b      	bcs.n	800523a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 8005222:	a902      	add	r1, sp, #8
 8005224:	f841 5d04 	str.w	r5, [r1, #-4]!
 8005228:	f7ff ff92 	bl	8005150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800522c:	4607      	mov	r7, r0
 800522e:	4620      	mov	r0, r4
 8005230:	f7ff ffa8 	bl	8005184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005234:	9b01      	ldr	r3, [sp, #4]
 8005236:	6027      	str	r7, [r4, #0]
 8005238:	60a3      	str	r3, [r4, #8]
 800523a:	b125      	cbz	r5, 8005246 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 800523c:	462a      	mov	r2, r5
 800523e:	6831      	ldr	r1, [r6, #0]
 8005240:	6820      	ldr	r0, [r4, #0]
 8005242:	f7ff ffbf 	bl	80051c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005246:	2200      	movs	r2, #0
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	6065      	str	r5, [r4, #4]
 800524c:	555a      	strb	r2, [r3, r5]
 800524e:	b003      	add	sp, #12
 8005250:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8005252:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005256:	4616      	mov	r6, r2
 8005258:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800525c:	6842      	ldr	r2, [r0, #4]
 800525e:	469a      	mov	sl, r3
 8005260:	eba8 0306 	sub.w	r3, r8, r6
 8005264:	1a57      	subs	r7, r2, r1
 8005266:	4413      	add	r3, r2
 8005268:	6802      	ldr	r2, [r0, #0]
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	f100 0308 	add.w	r3, r0, #8
 8005270:	429a      	cmp	r2, r3
 8005272:	460d      	mov	r5, r1
 8005274:	bf14      	ite	ne
 8005276:	6882      	ldrne	r2, [r0, #8]
 8005278:	220f      	moveq	r2, #15
 800527a:	a901      	add	r1, sp, #4
 800527c:	4604      	mov	r4, r0
 800527e:	f7ff ff67 	bl	8005150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005282:	1bbf      	subs	r7, r7, r6
 8005284:	4681      	mov	r9, r0
 8005286:	b11d      	cbz	r5, 8005290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8005288:	462a      	mov	r2, r5
 800528a:	6821      	ldr	r1, [r4, #0]
 800528c:	f7ff ff9a 	bl	80051c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005290:	f1ba 0f00 	cmp.w	sl, #0
 8005294:	d008      	beq.n	80052a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8005296:	f1b8 0f00 	cmp.w	r8, #0
 800529a:	d005      	beq.n	80052a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800529c:	4642      	mov	r2, r8
 800529e:	4651      	mov	r1, sl
 80052a0:	eb09 0005 	add.w	r0, r9, r5
 80052a4:	f7ff ff8e 	bl	80051c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80052a8:	b147      	cbz	r7, 80052bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 80052aa:	6821      	ldr	r1, [r4, #0]
 80052ac:	442e      	add	r6, r5
 80052ae:	eb05 0008 	add.w	r0, r5, r8
 80052b2:	463a      	mov	r2, r7
 80052b4:	4431      	add	r1, r6
 80052b6:	4448      	add	r0, r9
 80052b8:	f7ff ff84 	bl	80051c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80052bc:	4620      	mov	r0, r4
 80052be:	f7ff ff61 	bl	8005184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80052c2:	9b01      	ldr	r3, [sp, #4]
 80052c4:	f8c4 9000 	str.w	r9, [r4]
 80052c8:	60a3      	str	r3, [r4, #8]
 80052ca:	b002      	add	sp, #8
 80052cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080052d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80052d0:	f100 0208 	add.w	r2, r0, #8
 80052d4:	6002      	str	r2, [r0, #0]
 80052d6:	2200      	movs	r2, #0
 80052d8:	6042      	str	r2, [r0, #4]
 80052da:	7202      	strb	r2, [r0, #8]
 80052dc:	4770      	bx	lr

080052de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	f7ff ff4f 	bl	8005184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80052e6:	4620      	mov	r0, r4
 80052e8:	bd10      	pop	{r4, pc}

080052ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80052ea:	b510      	push	{r4, lr}
 80052ec:	4604      	mov	r4, r0
 80052ee:	f7ff ff88 	bl	8005202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80052f2:	4620      	mov	r0, r4
 80052f4:	bd10      	pop	{r4, pc}

080052f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 80052f6:	6840      	ldr	r0, [r0, #4]
 80052f8:	4770      	bx	lr

080052fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80052fa:	6840      	ldr	r0, [r0, #4]
 80052fc:	fab0 f080 	clz	r0, r0
 8005300:	0940      	lsrs	r0, r0, #5
 8005302:	4770      	bx	lr

08005304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8005304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005308:	4614      	mov	r4, r2
 800530a:	4681      	mov	r9, r0
 800530c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800530e:	460f      	mov	r7, r1
 8005310:	462a      	mov	r2, r5
 8005312:	4698      	mov	r8, r3
 8005314:	4621      	mov	r1, r4
 8005316:	4b37      	ldr	r3, [pc, #220]	; (80053f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8005318:	f7ff ff3c 	bl	8005194 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800531c:	464a      	mov	r2, r9
 800531e:	f852 6b08 	ldr.w	r6, [r2], #8
 8005322:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005326:	4296      	cmp	r6, r2
 8005328:	bf08      	it	eq
 800532a:	220f      	moveq	r2, #15
 800532c:	eba5 0b04 	sub.w	fp, r5, r4
 8005330:	bf18      	it	ne
 8005332:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 8005336:	eb03 0a0b 	add.w	sl, r3, fp
 800533a:	4552      	cmp	r2, sl
 800533c:	d34e      	bcc.n	80053dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 800533e:	443e      	add	r6, r7
 8005340:	4641      	mov	r1, r8
 8005342:	1bdf      	subs	r7, r3, r7
 8005344:	4648      	mov	r0, r9
 8005346:	1b3f      	subs	r7, r7, r4
 8005348:	f7ff ff30 	bl	80051ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800534c:	b170      	cbz	r0, 800536c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800534e:	b137      	cbz	r7, 800535e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8005350:	42ac      	cmp	r4, r5
 8005352:	d004      	beq.n	800535e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8005354:	463a      	mov	r2, r7
 8005356:	1931      	adds	r1, r6, r4
 8005358:	1970      	adds	r0, r6, r5
 800535a:	f7ff ff3c 	bl	80051d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800535e:	b30d      	cbz	r5, 80053a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8005360:	462a      	mov	r2, r5
 8005362:	4641      	mov	r1, r8
 8005364:	4630      	mov	r0, r6
 8005366:	f7ff ff2d 	bl	80051c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800536a:	e01b      	b.n	80053a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800536c:	b135      	cbz	r5, 800537c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 800536e:	42ac      	cmp	r4, r5
 8005370:	d33c      	bcc.n	80053ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 8005372:	462a      	mov	r2, r5
 8005374:	4641      	mov	r1, r8
 8005376:	4630      	mov	r0, r6
 8005378:	f7ff ff2d 	bl	80051d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800537c:	b197      	cbz	r7, 80053a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800537e:	42ac      	cmp	r4, r5
 8005380:	d010      	beq.n	80053a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8005382:	463a      	mov	r2, r7
 8005384:	1931      	adds	r1, r6, r4
 8005386:	1970      	adds	r0, r6, r5
 8005388:	f7ff ff25 	bl	80051d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800538c:	42ac      	cmp	r4, r5
 800538e:	d209      	bcs.n	80053a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8005390:	4434      	add	r4, r6
 8005392:	eb08 0305 	add.w	r3, r8, r5
 8005396:	429c      	cmp	r4, r3
 8005398:	d30f      	bcc.n	80053ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 800539a:	462a      	mov	r2, r5
 800539c:	4641      	mov	r1, r8
 800539e:	4630      	mov	r0, r6
 80053a0:	f7ff ff19 	bl	80051d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80053a4:	2200      	movs	r2, #0
 80053a6:	4648      	mov	r0, r9
 80053a8:	f8d9 3000 	ldr.w	r3, [r9]
 80053ac:	f8c9 a004 	str.w	sl, [r9, #4]
 80053b0:	f803 200a 	strb.w	r2, [r3, sl]
 80053b4:	b003      	add	sp, #12
 80053b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ba:	4544      	cmp	r4, r8
 80053bc:	d803      	bhi.n	80053c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 80053be:	462a      	mov	r2, r5
 80053c0:	eb08 010b 	add.w	r1, r8, fp
 80053c4:	e7ce      	b.n	8005364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80053c6:	eba4 0408 	sub.w	r4, r4, r8
 80053ca:	4622      	mov	r2, r4
 80053cc:	4641      	mov	r1, r8
 80053ce:	4630      	mov	r0, r6
 80053d0:	f7ff ff01 	bl	80051d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80053d4:	1b2a      	subs	r2, r5, r4
 80053d6:	1971      	adds	r1, r6, r5
 80053d8:	1930      	adds	r0, r6, r4
 80053da:	e7c4      	b.n	8005366 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 80053dc:	9500      	str	r5, [sp, #0]
 80053de:	4643      	mov	r3, r8
 80053e0:	4622      	mov	r2, r4
 80053e2:	4639      	mov	r1, r7
 80053e4:	4648      	mov	r0, r9
 80053e6:	f7ff ff34 	bl	8005252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80053ea:	e7db      	b.n	80053a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80053ec:	2f00      	cmp	r7, #0
 80053ee:	d0cf      	beq.n	8005390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 80053f0:	e7c7      	b.n	8005382 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80053f2:	bf00      	nop
 80053f4:	08005ab8 	.word	0x08005ab8

080053f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80053f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053fa:	4604      	mov	r4, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	460d      	mov	r5, r1
 8005400:	f7fa fea4 	bl	800014c <strlen>
 8005404:	462b      	mov	r3, r5
 8005406:	9000      	str	r0, [sp, #0]
 8005408:	6862      	ldr	r2, [r4, #4]
 800540a:	2100      	movs	r1, #0
 800540c:	4620      	mov	r0, r4
 800540e:	f7ff ff79 	bl	8005304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8005412:	b003      	add	sp, #12
 8005414:	bd30      	pop	{r4, r5, pc}

08005416 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8005416:	b508      	push	{r3, lr}
 8005418:	f7ff ffee 	bl	80053f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800541c:	bd08      	pop	{r3, pc}

0800541e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	4770      	bx	lr
	...

08005424 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8005424:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005426:	4604      	mov	r4, r0
 8005428:	4616      	mov	r6, r2
 800542a:	460d      	mov	r5, r1
 800542c:	b919      	cbnz	r1, 8005436 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800542e:	b112      	cbz	r2, 8005436 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8005430:	480d      	ldr	r0, [pc, #52]	; (8005468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8005432:	f000 f865 	bl	8005500 <_ZSt19__throw_logic_errorPKc>
 8005436:	1b73      	subs	r3, r6, r5
 8005438:	2b0f      	cmp	r3, #15
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	d907      	bls.n	800544e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800543e:	2200      	movs	r2, #0
 8005440:	a901      	add	r1, sp, #4
 8005442:	4620      	mov	r0, r4
 8005444:	f7ff fe84 	bl	8005150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005448:	9b01      	ldr	r3, [sp, #4]
 800544a:	6020      	str	r0, [r4, #0]
 800544c:	60a3      	str	r3, [r4, #8]
 800544e:	4632      	mov	r2, r6
 8005450:	4629      	mov	r1, r5
 8005452:	6820      	ldr	r0, [r4, #0]
 8005454:	f7ff fecb 	bl	80051ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8005458:	2100      	movs	r1, #0
 800545a:	9b01      	ldr	r3, [sp, #4]
 800545c:	6822      	ldr	r2, [r4, #0]
 800545e:	6063      	str	r3, [r4, #4]
 8005460:	54d1      	strb	r1, [r2, r3]
 8005462:	b002      	add	sp, #8
 8005464:	bd70      	pop	{r4, r5, r6, pc}
 8005466:	bf00      	nop
 8005468:	08005ad1 	.word	0x08005ad1

0800546c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800546c:	b510      	push	{r4, lr}
 800546e:	4604      	mov	r4, r0
 8005470:	f100 0208 	add.w	r2, r0, #8
 8005474:	6002      	str	r2, [r0, #0]
 8005476:	e9d1 1200 	ldrd	r1, r2, [r1]
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	440a      	add	r2, r1
 8005480:	f7ff ffd0 	bl	8005424 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8005484:	4620      	mov	r0, r4
 8005486:	bd10      	pop	{r4, pc}

08005488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8005488:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800548a:	4604      	mov	r4, r0
 800548c:	4616      	mov	r6, r2
 800548e:	460d      	mov	r5, r1
 8005490:	b919      	cbnz	r1, 800549a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8005492:	b112      	cbz	r2, 800549a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8005494:	480d      	ldr	r0, [pc, #52]	; (80054cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8005496:	f000 f833 	bl	8005500 <_ZSt19__throw_logic_errorPKc>
 800549a:	1b73      	subs	r3, r6, r5
 800549c:	2b0f      	cmp	r3, #15
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	d907      	bls.n	80054b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80054a2:	2200      	movs	r2, #0
 80054a4:	a901      	add	r1, sp, #4
 80054a6:	4620      	mov	r0, r4
 80054a8:	f7ff fe52 	bl	8005150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80054ac:	9b01      	ldr	r3, [sp, #4]
 80054ae:	6020      	str	r0, [r4, #0]
 80054b0:	60a3      	str	r3, [r4, #8]
 80054b2:	4632      	mov	r2, r6
 80054b4:	4629      	mov	r1, r5
 80054b6:	6820      	ldr	r0, [r4, #0]
 80054b8:	f7ff fe9e 	bl	80051f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80054bc:	2100      	movs	r1, #0
 80054be:	9b01      	ldr	r3, [sp, #4]
 80054c0:	6822      	ldr	r2, [r4, #0]
 80054c2:	6063      	str	r3, [r4, #4]
 80054c4:	54d1      	strb	r1, [r2, r3]
 80054c6:	b002      	add	sp, #8
 80054c8:	bd70      	pop	{r4, r5, r6, pc}
 80054ca:	bf00      	nop
 80054cc:	08005ad1 	.word	0x08005ad1

080054d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	f100 0308 	add.w	r3, r0, #8
 80054d6:	4604      	mov	r4, r0
 80054d8:	6003      	str	r3, [r0, #0]
 80054da:	460d      	mov	r5, r1
 80054dc:	b159      	cbz	r1, 80054f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80054de:	4608      	mov	r0, r1
 80054e0:	f7fa fe34 	bl	800014c <strlen>
 80054e4:	182a      	adds	r2, r5, r0
 80054e6:	4620      	mov	r0, r4
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7ff ffcb 	bl	8005488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80054f2:	4620      	mov	r0, r4
 80054f4:	bd38      	pop	{r3, r4, r5, pc}
 80054f6:	f04f 32ff 	mov.w	r2, #4294967295
 80054fa:	e7f4      	b.n	80054e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080054fc <_ZdlPv>:
 80054fc:	f000 b840 	b.w	8005580 <free>

08005500 <_ZSt19__throw_logic_errorPKc>:
 8005500:	b508      	push	{r3, lr}
 8005502:	f000 f803 	bl	800550c <abort>

08005506 <_ZSt20__throw_length_errorPKc>:
 8005506:	b508      	push	{r3, lr}
 8005508:	f000 f800 	bl	800550c <abort>

0800550c <abort>:
 800550c:	b508      	push	{r3, lr}
 800550e:	2006      	movs	r0, #6
 8005510:	f000 f948 	bl	80057a4 <raise>
 8005514:	2001      	movs	r0, #1
 8005516:	f7fc f9be 	bl	8001896 <_exit>
	...

0800551c <__errno>:
 800551c:	4b01      	ldr	r3, [pc, #4]	; (8005524 <__errno+0x8>)
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	2000000c 	.word	0x2000000c

08005528 <__libc_init_array>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	2500      	movs	r5, #0
 800552c:	4e0c      	ldr	r6, [pc, #48]	; (8005560 <__libc_init_array+0x38>)
 800552e:	4c0d      	ldr	r4, [pc, #52]	; (8005564 <__libc_init_array+0x3c>)
 8005530:	1ba4      	subs	r4, r4, r6
 8005532:	10a4      	asrs	r4, r4, #2
 8005534:	42a5      	cmp	r5, r4
 8005536:	d109      	bne.n	800554c <__libc_init_array+0x24>
 8005538:	f000 f952 	bl	80057e0 <_init>
 800553c:	2500      	movs	r5, #0
 800553e:	4e0a      	ldr	r6, [pc, #40]	; (8005568 <__libc_init_array+0x40>)
 8005540:	4c0a      	ldr	r4, [pc, #40]	; (800556c <__libc_init_array+0x44>)
 8005542:	1ba4      	subs	r4, r4, r6
 8005544:	10a4      	asrs	r4, r4, #2
 8005546:	42a5      	cmp	r5, r4
 8005548:	d105      	bne.n	8005556 <__libc_init_array+0x2e>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005550:	4798      	blx	r3
 8005552:	3501      	adds	r5, #1
 8005554:	e7ee      	b.n	8005534 <__libc_init_array+0xc>
 8005556:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800555a:	4798      	blx	r3
 800555c:	3501      	adds	r5, #1
 800555e:	e7f2      	b.n	8005546 <__libc_init_array+0x1e>
 8005560:	08005b74 	.word	0x08005b74
 8005564:	08005b74 	.word	0x08005b74
 8005568:	08005b74 	.word	0x08005b74
 800556c:	08005b7c 	.word	0x08005b7c

08005570 <malloc>:
 8005570:	4b02      	ldr	r3, [pc, #8]	; (800557c <malloc+0xc>)
 8005572:	4601      	mov	r1, r0
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	f000 b883 	b.w	8005680 <_malloc_r>
 800557a:	bf00      	nop
 800557c:	2000000c 	.word	0x2000000c

08005580 <free>:
 8005580:	4b02      	ldr	r3, [pc, #8]	; (800558c <free+0xc>)
 8005582:	4601      	mov	r1, r0
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	f000 b82f 	b.w	80055e8 <_free_r>
 800558a:	bf00      	nop
 800558c:	2000000c 	.word	0x2000000c

08005590 <memcpy>:
 8005590:	b510      	push	{r4, lr}
 8005592:	1e43      	subs	r3, r0, #1
 8005594:	440a      	add	r2, r1
 8005596:	4291      	cmp	r1, r2
 8005598:	d100      	bne.n	800559c <memcpy+0xc>
 800559a:	bd10      	pop	{r4, pc}
 800559c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055a4:	e7f7      	b.n	8005596 <memcpy+0x6>

080055a6 <memmove>:
 80055a6:	4288      	cmp	r0, r1
 80055a8:	b510      	push	{r4, lr}
 80055aa:	eb01 0302 	add.w	r3, r1, r2
 80055ae:	d807      	bhi.n	80055c0 <memmove+0x1a>
 80055b0:	1e42      	subs	r2, r0, #1
 80055b2:	4299      	cmp	r1, r3
 80055b4:	d00a      	beq.n	80055cc <memmove+0x26>
 80055b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ba:	f802 4f01 	strb.w	r4, [r2, #1]!
 80055be:	e7f8      	b.n	80055b2 <memmove+0xc>
 80055c0:	4283      	cmp	r3, r0
 80055c2:	d9f5      	bls.n	80055b0 <memmove+0xa>
 80055c4:	1881      	adds	r1, r0, r2
 80055c6:	1ad2      	subs	r2, r2, r3
 80055c8:	42d3      	cmn	r3, r2
 80055ca:	d100      	bne.n	80055ce <memmove+0x28>
 80055cc:	bd10      	pop	{r4, pc}
 80055ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80055d6:	e7f7      	b.n	80055c8 <memmove+0x22>

080055d8 <memset>:
 80055d8:	4603      	mov	r3, r0
 80055da:	4402      	add	r2, r0
 80055dc:	4293      	cmp	r3, r2
 80055de:	d100      	bne.n	80055e2 <memset+0xa>
 80055e0:	4770      	bx	lr
 80055e2:	f803 1b01 	strb.w	r1, [r3], #1
 80055e6:	e7f9      	b.n	80055dc <memset+0x4>

080055e8 <_free_r>:
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	4605      	mov	r5, r0
 80055ec:	2900      	cmp	r1, #0
 80055ee:	d043      	beq.n	8005678 <_free_r+0x90>
 80055f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f4:	1f0c      	subs	r4, r1, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bfb8      	it	lt
 80055fa:	18e4      	addlt	r4, r4, r3
 80055fc:	f000 f8ee 	bl	80057dc <__malloc_lock>
 8005600:	4a1e      	ldr	r2, [pc, #120]	; (800567c <_free_r+0x94>)
 8005602:	6813      	ldr	r3, [r2, #0]
 8005604:	4610      	mov	r0, r2
 8005606:	b933      	cbnz	r3, 8005616 <_free_r+0x2e>
 8005608:	6063      	str	r3, [r4, #4]
 800560a:	6014      	str	r4, [r2, #0]
 800560c:	4628      	mov	r0, r5
 800560e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005612:	f000 b8e4 	b.w	80057de <__malloc_unlock>
 8005616:	42a3      	cmp	r3, r4
 8005618:	d90b      	bls.n	8005632 <_free_r+0x4a>
 800561a:	6821      	ldr	r1, [r4, #0]
 800561c:	1862      	adds	r2, r4, r1
 800561e:	4293      	cmp	r3, r2
 8005620:	bf01      	itttt	eq
 8005622:	681a      	ldreq	r2, [r3, #0]
 8005624:	685b      	ldreq	r3, [r3, #4]
 8005626:	1852      	addeq	r2, r2, r1
 8005628:	6022      	streq	r2, [r4, #0]
 800562a:	6063      	str	r3, [r4, #4]
 800562c:	6004      	str	r4, [r0, #0]
 800562e:	e7ed      	b.n	800560c <_free_r+0x24>
 8005630:	4613      	mov	r3, r2
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	b10a      	cbz	r2, 800563a <_free_r+0x52>
 8005636:	42a2      	cmp	r2, r4
 8005638:	d9fa      	bls.n	8005630 <_free_r+0x48>
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	1858      	adds	r0, r3, r1
 800563e:	42a0      	cmp	r0, r4
 8005640:	d10b      	bne.n	800565a <_free_r+0x72>
 8005642:	6820      	ldr	r0, [r4, #0]
 8005644:	4401      	add	r1, r0
 8005646:	1858      	adds	r0, r3, r1
 8005648:	4282      	cmp	r2, r0
 800564a:	6019      	str	r1, [r3, #0]
 800564c:	d1de      	bne.n	800560c <_free_r+0x24>
 800564e:	6810      	ldr	r0, [r2, #0]
 8005650:	6852      	ldr	r2, [r2, #4]
 8005652:	4401      	add	r1, r0
 8005654:	6019      	str	r1, [r3, #0]
 8005656:	605a      	str	r2, [r3, #4]
 8005658:	e7d8      	b.n	800560c <_free_r+0x24>
 800565a:	d902      	bls.n	8005662 <_free_r+0x7a>
 800565c:	230c      	movs	r3, #12
 800565e:	602b      	str	r3, [r5, #0]
 8005660:	e7d4      	b.n	800560c <_free_r+0x24>
 8005662:	6820      	ldr	r0, [r4, #0]
 8005664:	1821      	adds	r1, r4, r0
 8005666:	428a      	cmp	r2, r1
 8005668:	bf01      	itttt	eq
 800566a:	6811      	ldreq	r1, [r2, #0]
 800566c:	6852      	ldreq	r2, [r2, #4]
 800566e:	1809      	addeq	r1, r1, r0
 8005670:	6021      	streq	r1, [r4, #0]
 8005672:	6062      	str	r2, [r4, #4]
 8005674:	605c      	str	r4, [r3, #4]
 8005676:	e7c9      	b.n	800560c <_free_r+0x24>
 8005678:	bd38      	pop	{r3, r4, r5, pc}
 800567a:	bf00      	nop
 800567c:	200000d4 	.word	0x200000d4

08005680 <_malloc_r>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	1ccd      	adds	r5, r1, #3
 8005684:	f025 0503 	bic.w	r5, r5, #3
 8005688:	3508      	adds	r5, #8
 800568a:	2d0c      	cmp	r5, #12
 800568c:	bf38      	it	cc
 800568e:	250c      	movcc	r5, #12
 8005690:	2d00      	cmp	r5, #0
 8005692:	4606      	mov	r6, r0
 8005694:	db01      	blt.n	800569a <_malloc_r+0x1a>
 8005696:	42a9      	cmp	r1, r5
 8005698:	d903      	bls.n	80056a2 <_malloc_r+0x22>
 800569a:	230c      	movs	r3, #12
 800569c:	6033      	str	r3, [r6, #0]
 800569e:	2000      	movs	r0, #0
 80056a0:	bd70      	pop	{r4, r5, r6, pc}
 80056a2:	f000 f89b 	bl	80057dc <__malloc_lock>
 80056a6:	4a21      	ldr	r2, [pc, #132]	; (800572c <_malloc_r+0xac>)
 80056a8:	6814      	ldr	r4, [r2, #0]
 80056aa:	4621      	mov	r1, r4
 80056ac:	b991      	cbnz	r1, 80056d4 <_malloc_r+0x54>
 80056ae:	4c20      	ldr	r4, [pc, #128]	; (8005730 <_malloc_r+0xb0>)
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	b91b      	cbnz	r3, 80056bc <_malloc_r+0x3c>
 80056b4:	4630      	mov	r0, r6
 80056b6:	f000 f83d 	bl	8005734 <_sbrk_r>
 80056ba:	6020      	str	r0, [r4, #0]
 80056bc:	4629      	mov	r1, r5
 80056be:	4630      	mov	r0, r6
 80056c0:	f000 f838 	bl	8005734 <_sbrk_r>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d124      	bne.n	8005712 <_malloc_r+0x92>
 80056c8:	230c      	movs	r3, #12
 80056ca:	4630      	mov	r0, r6
 80056cc:	6033      	str	r3, [r6, #0]
 80056ce:	f000 f886 	bl	80057de <__malloc_unlock>
 80056d2:	e7e4      	b.n	800569e <_malloc_r+0x1e>
 80056d4:	680b      	ldr	r3, [r1, #0]
 80056d6:	1b5b      	subs	r3, r3, r5
 80056d8:	d418      	bmi.n	800570c <_malloc_r+0x8c>
 80056da:	2b0b      	cmp	r3, #11
 80056dc:	d90f      	bls.n	80056fe <_malloc_r+0x7e>
 80056de:	600b      	str	r3, [r1, #0]
 80056e0:	18cc      	adds	r4, r1, r3
 80056e2:	50cd      	str	r5, [r1, r3]
 80056e4:	4630      	mov	r0, r6
 80056e6:	f000 f87a 	bl	80057de <__malloc_unlock>
 80056ea:	f104 000b 	add.w	r0, r4, #11
 80056ee:	1d23      	adds	r3, r4, #4
 80056f0:	f020 0007 	bic.w	r0, r0, #7
 80056f4:	1ac3      	subs	r3, r0, r3
 80056f6:	d0d3      	beq.n	80056a0 <_malloc_r+0x20>
 80056f8:	425a      	negs	r2, r3
 80056fa:	50e2      	str	r2, [r4, r3]
 80056fc:	e7d0      	b.n	80056a0 <_malloc_r+0x20>
 80056fe:	684b      	ldr	r3, [r1, #4]
 8005700:	428c      	cmp	r4, r1
 8005702:	bf16      	itet	ne
 8005704:	6063      	strne	r3, [r4, #4]
 8005706:	6013      	streq	r3, [r2, #0]
 8005708:	460c      	movne	r4, r1
 800570a:	e7eb      	b.n	80056e4 <_malloc_r+0x64>
 800570c:	460c      	mov	r4, r1
 800570e:	6849      	ldr	r1, [r1, #4]
 8005710:	e7cc      	b.n	80056ac <_malloc_r+0x2c>
 8005712:	1cc4      	adds	r4, r0, #3
 8005714:	f024 0403 	bic.w	r4, r4, #3
 8005718:	42a0      	cmp	r0, r4
 800571a:	d005      	beq.n	8005728 <_malloc_r+0xa8>
 800571c:	1a21      	subs	r1, r4, r0
 800571e:	4630      	mov	r0, r6
 8005720:	f000 f808 	bl	8005734 <_sbrk_r>
 8005724:	3001      	adds	r0, #1
 8005726:	d0cf      	beq.n	80056c8 <_malloc_r+0x48>
 8005728:	6025      	str	r5, [r4, #0]
 800572a:	e7db      	b.n	80056e4 <_malloc_r+0x64>
 800572c:	200000d4 	.word	0x200000d4
 8005730:	200000d8 	.word	0x200000d8

08005734 <_sbrk_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	2300      	movs	r3, #0
 8005738:	4c05      	ldr	r4, [pc, #20]	; (8005750 <_sbrk_r+0x1c>)
 800573a:	4605      	mov	r5, r0
 800573c:	4608      	mov	r0, r1
 800573e:	6023      	str	r3, [r4, #0]
 8005740:	f7fc f8b4 	bl	80018ac <_sbrk>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_sbrk_r+0x1a>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	b103      	cbz	r3, 800574e <_sbrk_r+0x1a>
 800574c:	602b      	str	r3, [r5, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	2000023c 	.word	0x2000023c

08005754 <_raise_r>:
 8005754:	291f      	cmp	r1, #31
 8005756:	b538      	push	{r3, r4, r5, lr}
 8005758:	4604      	mov	r4, r0
 800575a:	460d      	mov	r5, r1
 800575c:	d904      	bls.n	8005768 <_raise_r+0x14>
 800575e:	2316      	movs	r3, #22
 8005760:	6003      	str	r3, [r0, #0]
 8005762:	f04f 30ff 	mov.w	r0, #4294967295
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800576a:	b112      	cbz	r2, 8005772 <_raise_r+0x1e>
 800576c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005770:	b94b      	cbnz	r3, 8005786 <_raise_r+0x32>
 8005772:	4620      	mov	r0, r4
 8005774:	f000 f830 	bl	80057d8 <_getpid_r>
 8005778:	462a      	mov	r2, r5
 800577a:	4601      	mov	r1, r0
 800577c:	4620      	mov	r0, r4
 800577e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005782:	f000 b817 	b.w	80057b4 <_kill_r>
 8005786:	2b01      	cmp	r3, #1
 8005788:	d00a      	beq.n	80057a0 <_raise_r+0x4c>
 800578a:	1c59      	adds	r1, r3, #1
 800578c:	d103      	bne.n	8005796 <_raise_r+0x42>
 800578e:	2316      	movs	r3, #22
 8005790:	6003      	str	r3, [r0, #0]
 8005792:	2001      	movs	r0, #1
 8005794:	e7e7      	b.n	8005766 <_raise_r+0x12>
 8005796:	2400      	movs	r4, #0
 8005798:	4628      	mov	r0, r5
 800579a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800579e:	4798      	blx	r3
 80057a0:	2000      	movs	r0, #0
 80057a2:	e7e0      	b.n	8005766 <_raise_r+0x12>

080057a4 <raise>:
 80057a4:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <raise+0xc>)
 80057a6:	4601      	mov	r1, r0
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	f7ff bfd3 	b.w	8005754 <_raise_r>
 80057ae:	bf00      	nop
 80057b0:	2000000c 	.word	0x2000000c

080057b4 <_kill_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	2300      	movs	r3, #0
 80057b8:	4c06      	ldr	r4, [pc, #24]	; (80057d4 <_kill_r+0x20>)
 80057ba:	4605      	mov	r5, r0
 80057bc:	4608      	mov	r0, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	f7fc f858 	bl	8001876 <_kill>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	d102      	bne.n	80057d0 <_kill_r+0x1c>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	b103      	cbz	r3, 80057d0 <_kill_r+0x1c>
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	bd38      	pop	{r3, r4, r5, pc}
 80057d2:	bf00      	nop
 80057d4:	2000023c 	.word	0x2000023c

080057d8 <_getpid_r>:
 80057d8:	f7fc b846 	b.w	8001868 <_getpid>

080057dc <__malloc_lock>:
 80057dc:	4770      	bx	lr

080057de <__malloc_unlock>:
 80057de:	4770      	bx	lr

080057e0 <_init>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr

080057ec <_fini>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr


SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008838  08008838  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008838  08008838  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008838  08008838  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000070  080088b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  080088b0  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000feb40  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000800d  00000000  00000000  0011ebd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003590  00000000  00000000  00126be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000032d8  00000000  00000000  0012a178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d942  00000000  00000000  0012d450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026d7d  00000000  00000000  0014ad92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0d17  00000000  00000000  00171b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00212826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010004  00000000  00000000  002128a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080081d4 	.word	0x080081d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080081d4 	.word	0x080081d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	7c1b      	ldrb	r3, [r3, #16]
 800016a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000172:	461a      	mov	r2, r3
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	fb02 f303 	mul.w	r3, r2, r3
 800017a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	00db      	lsls	r3, r3, #3
 8000180:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f007 fbdc 	bl	8007948 <memset>
}
 8000190:	bf00      	nop
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af02      	add	r7, sp, #8
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	70fb      	strb	r3, [r7, #3]
 80001a4:	4613      	mov	r3, r2
 80001a6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	7c1b      	ldrb	r3, [r3, #16]
 80001ae:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80001b0:	78fb      	ldrb	r3, [r7, #3]
 80001b2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001b8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	b29b      	uxth	r3, r3
 80001be:	89ba      	ldrh	r2, [r7, #12]
 80001c0:	fb02 f303 	mul.w	r3, r2, r3
 80001c4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80001c6:	89bb      	ldrh	r3, [r7, #12]
 80001c8:	00db      	lsls	r3, r3, #3
 80001ca:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80001cc:	89bb      	ldrh	r3, [r7, #12]
 80001ce:	68ba      	ldr	r2, [r7, #8]
 80001d0:	4413      	add	r3, r2
 80001d2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80001d4:	7bf9      	ldrb	r1, [r7, #15]
 80001d6:	78ba      	ldrb	r2, [r7, #2]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	460b      	mov	r3, r1
 80001de:	2100      	movs	r1, #0
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	f001 fbf7 	bl	80019d4 <u8x8_DrawTile>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b084      	sub	sp, #16
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000200:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000208:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	7c5b      	ldrb	r3, [r3, #17]
 8000210:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000212:	7bba      	ldrb	r2, [r7, #14]
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	4619      	mov	r1, r3
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f7ff ffbd 	bl	8000198 <u8g2_send_tile_row>
    src_row++;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	3301      	adds	r3, #1
 8000222:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000224:	7bbb      	ldrb	r3, [r7, #14]
 8000226:	3301      	adds	r3, #1
 8000228:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800022a:	7bfa      	ldrb	r2, [r7, #15]
 800022c:	7b7b      	ldrb	r3, [r7, #13]
 800022e:	429a      	cmp	r2, r3
 8000230:	d203      	bcs.n	800023a <u8g2_send_buffer+0x4c>
 8000232:	7bba      	ldrb	r2, [r7, #14]
 8000234:	7b3b      	ldrb	r3, [r7, #12]
 8000236:	429a      	cmp	r2, r3
 8000238:	d3eb      	bcc.n	8000212 <u8g2_send_buffer+0x24>
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000242:	b580      	push	{r7, lr}
 8000244:	b082      	sub	sp, #8
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ffcf 	bl	80001ee <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f001 fc10 	bl	8001a76 <u8x8_RefreshDisplay>
}
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2208      	movs	r2, #8
 800026c:	701a      	strb	r2, [r3, #0]
  return buf;
 800026e:	4b03      	ldr	r3, [pc, #12]	; (800027c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8000270:	4618      	mov	r0, r3
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	2000008c 	.word	0x2000008c

08000280 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af02      	add	r7, sp, #8
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 8000296:	490c      	ldr	r1, [pc, #48]	; (80002c8 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f001 fc4b 	bl	8001b34 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800029e:	f107 0313 	add.w	r3, r7, #19
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffdc 	bl	8000260 <u8g2_m_16_8_f>
 80002a8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80002aa:	7cfa      	ldrb	r2, [r7, #19]
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 80002b2:	6979      	ldr	r1, [r7, #20]
 80002b4:	68f8      	ldr	r0, [r7, #12]
 80002b6:	f000 ff93 	bl	80011e0 <u8g2_SetupBuffer>
}
 80002ba:	bf00      	nop
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	080016f9 	.word	0x080016f9
 80002c8:	08001895 	.word	0x08001895
 80002cc:	08001067 	.word	0x08001067

080002d0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80002dc:	78fb      	ldrb	r3, [r7, #3]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	4413      	add	r3, r2
 80002e2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	781b      	ldrb	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr

080002f2 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80002f2:	b480      	push	{r7}
 80002f4:	b085      	sub	sp, #20
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
 80002fa:	460b      	mov	r3, r1
 80002fc:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80002fe:	78fb      	ldrb	r3, [r7, #3]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	4413      	add	r3, r2
 8000304:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	81fb      	strh	r3, [r7, #14]
    font++;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3301      	adds	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8000312:	89fb      	ldrh	r3, [r7, #14]
 8000314:	021b      	lsls	r3, r3, #8
 8000316:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	b29a      	uxth	r2, r3
 800031e:	89fb      	ldrh	r3, [r7, #14]
 8000320:	4413      	add	r3, r2
 8000322:	81fb      	strh	r3, [r7, #14]
    return pos;
 8000324:	89fb      	ldrh	r3, [r7, #14]
}
 8000326:	4618      	mov	r0, r3
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800033a:	2100      	movs	r1, #0
 800033c:	6838      	ldr	r0, [r7, #0]
 800033e:	f7ff ffc7 	bl	80002d0 <u8g2_font_get_byte>
 8000342:	4603      	mov	r3, r0
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800034a:	2101      	movs	r1, #1
 800034c:	6838      	ldr	r0, [r7, #0]
 800034e:	f7ff ffbf 	bl	80002d0 <u8g2_font_get_byte>
 8000352:	4603      	mov	r3, r0
 8000354:	461a      	mov	r2, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800035a:	2102      	movs	r1, #2
 800035c:	6838      	ldr	r0, [r7, #0]
 800035e:	f7ff ffb7 	bl	80002d0 <u8g2_font_get_byte>
 8000362:	4603      	mov	r3, r0
 8000364:	461a      	mov	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800036a:	2103      	movs	r1, #3
 800036c:	6838      	ldr	r0, [r7, #0]
 800036e:	f7ff ffaf 	bl	80002d0 <u8g2_font_get_byte>
 8000372:	4603      	mov	r3, r0
 8000374:	461a      	mov	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800037a:	2104      	movs	r1, #4
 800037c:	6838      	ldr	r0, [r7, #0]
 800037e:	f7ff ffa7 	bl	80002d0 <u8g2_font_get_byte>
 8000382:	4603      	mov	r3, r0
 8000384:	461a      	mov	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800038a:	2105      	movs	r1, #5
 800038c:	6838      	ldr	r0, [r7, #0]
 800038e:	f7ff ff9f 	bl	80002d0 <u8g2_font_get_byte>
 8000392:	4603      	mov	r3, r0
 8000394:	461a      	mov	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800039a:	2106      	movs	r1, #6
 800039c:	6838      	ldr	r0, [r7, #0]
 800039e:	f7ff ff97 	bl	80002d0 <u8g2_font_get_byte>
 80003a2:	4603      	mov	r3, r0
 80003a4:	461a      	mov	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80003aa:	2107      	movs	r1, #7
 80003ac:	6838      	ldr	r0, [r7, #0]
 80003ae:	f7ff ff8f 	bl	80002d0 <u8g2_font_get_byte>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80003ba:	2108      	movs	r1, #8
 80003bc:	6838      	ldr	r0, [r7, #0]
 80003be:	f7ff ff87 	bl	80002d0 <u8g2_font_get_byte>
 80003c2:	4603      	mov	r3, r0
 80003c4:	461a      	mov	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80003ca:	2109      	movs	r1, #9
 80003cc:	6838      	ldr	r0, [r7, #0]
 80003ce:	f7ff ff7f 	bl	80002d0 <u8g2_font_get_byte>
 80003d2:	4603      	mov	r3, r0
 80003d4:	b25a      	sxtb	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80003da:	210a      	movs	r1, #10
 80003dc:	6838      	ldr	r0, [r7, #0]
 80003de:	f7ff ff77 	bl	80002d0 <u8g2_font_get_byte>
 80003e2:	4603      	mov	r3, r0
 80003e4:	b25a      	sxtb	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80003ea:	210b      	movs	r1, #11
 80003ec:	6838      	ldr	r0, [r7, #0]
 80003ee:	f7ff ff6f 	bl	80002d0 <u8g2_font_get_byte>
 80003f2:	4603      	mov	r3, r0
 80003f4:	b25a      	sxtb	r2, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80003fa:	210c      	movs	r1, #12
 80003fc:	6838      	ldr	r0, [r7, #0]
 80003fe:	f7ff ff67 	bl	80002d0 <u8g2_font_get_byte>
 8000402:	4603      	mov	r3, r0
 8000404:	b25a      	sxtb	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800040a:	210d      	movs	r1, #13
 800040c:	6838      	ldr	r0, [r7, #0]
 800040e:	f7ff ff5f 	bl	80002d0 <u8g2_font_get_byte>
 8000412:	4603      	mov	r3, r0
 8000414:	b25a      	sxtb	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800041a:	210e      	movs	r1, #14
 800041c:	6838      	ldr	r0, [r7, #0]
 800041e:	f7ff ff57 	bl	80002d0 <u8g2_font_get_byte>
 8000422:	4603      	mov	r3, r0
 8000424:	b25a      	sxtb	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800042a:	210f      	movs	r1, #15
 800042c:	6838      	ldr	r0, [r7, #0]
 800042e:	f7ff ff4f 	bl	80002d0 <u8g2_font_get_byte>
 8000432:	4603      	mov	r3, r0
 8000434:	b25a      	sxtb	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800043a:	2110      	movs	r1, #16
 800043c:	6838      	ldr	r0, [r7, #0]
 800043e:	f7ff ff47 	bl	80002d0 <u8g2_font_get_byte>
 8000442:	4603      	mov	r3, r0
 8000444:	b25a      	sxtb	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800044a:	2111      	movs	r1, #17
 800044c:	6838      	ldr	r0, [r7, #0]
 800044e:	f7ff ff50 	bl	80002f2 <u8g2_font_get_word>
 8000452:	4603      	mov	r3, r0
 8000454:	461a      	mov	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800045a:	2113      	movs	r1, #19
 800045c:	6838      	ldr	r0, [r7, #0]
 800045e:	f7ff ff48 	bl	80002f2 <u8g2_font_get_word>
 8000462:	4603      	mov	r3, r0
 8000464:	461a      	mov	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800046a:	2115      	movs	r1, #21
 800046c:	6838      	ldr	r0, [r7, #0]
 800046e:	f7ff ff40 	bl	80002f2 <u8g2_font_get_word>
 8000472:	4603      	mov	r3, r0
 8000474:	461a      	mov	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	82da      	strh	r2, [r3, #22]
#endif
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8000482:	b480      	push	{r7}
 8000484:	b085      	sub	sp, #20
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	460b      	mov	r3, r1
 800048c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	7a9b      	ldrb	r3, [r3, #10]
 8000492:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800049c:	7bfa      	ldrb	r2, [r7, #15]
 800049e:	7b7b      	ldrb	r3, [r7, #13]
 80004a0:	fa42 f303 	asr.w	r3, r2, r3
 80004a4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80004a6:	7b7b      	ldrb	r3, [r7, #13]
 80004a8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80004aa:	7bba      	ldrb	r2, [r7, #14]
 80004ac:	78fb      	ldrb	r3, [r7, #3]
 80004ae:	4413      	add	r3, r2
 80004b0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80004b2:	7bbb      	ldrb	r3, [r7, #14]
 80004b4:	2b07      	cmp	r3, #7
 80004b6:	d91a      	bls.n	80004ee <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80004b8:	2308      	movs	r3, #8
 80004ba:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80004bc:	7b3a      	ldrb	r2, [r7, #12]
 80004be:	7b7b      	ldrb	r3, [r7, #13]
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	1c5a      	adds	r2, r3, #1
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	7b3b      	ldrb	r3, [r7, #12]
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	b25a      	sxtb	r2, r3
 80004de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80004e8:	7bbb      	ldrb	r3, [r7, #14]
 80004ea:	3b08      	subs	r3, #8
 80004ec:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80004ee:	78fb      	ldrb	r3, [r7, #3]
 80004f0:	f04f 32ff 	mov.w	r2, #4294967295
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	43db      	mvns	r3, r3
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	4013      	ands	r3, r2
 8000502:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	7bba      	ldrb	r2, [r7, #14]
 8000508:	729a      	strb	r2, [r3, #10]
  return val;
 800050a:	7bfb      	ldrb	r3, [r7, #15]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b084      	sub	sp, #16
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	460b      	mov	r3, r1
 8000520:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8000522:	78fb      	ldrb	r3, [r7, #3]
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ffab 	bl	8000482 <u8g2_font_decode_get_unsigned_bits>
 800052c:	4603      	mov	r3, r0
 800052e:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	3b01      	subs	r3, #1
 8000538:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800053a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800053e:	78fb      	ldrb	r3, [r7, #3]
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8000546:	7bfa      	ldrb	r2, [r7, #15]
 8000548:	7bbb      	ldrb	r3, [r7, #14]
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	b2db      	uxtb	r3, r3
 800054e:	73fb      	strb	r3, [r7, #15]
  return v;
 8000550:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800055c:	b490      	push	{r4, r7}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4604      	mov	r4, r0
 8000564:	4608      	mov	r0, r1
 8000566:	4611      	mov	r1, r2
 8000568:	461a      	mov	r2, r3
 800056a:	4623      	mov	r3, r4
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	4603      	mov	r3, r0
 8000570:	71bb      	strb	r3, [r7, #6]
 8000572:	460b      	mov	r3, r1
 8000574:	717b      	strb	r3, [r7, #5]
 8000576:	4613      	mov	r3, r2
 8000578:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800057a:	793b      	ldrb	r3, [r7, #4]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d008      	beq.n	8000592 <u8g2_add_vector_y+0x36>
 8000580:	2b02      	cmp	r3, #2
 8000582:	d00b      	beq.n	800059c <u8g2_add_vector_y+0x40>
 8000584:	2b00      	cmp	r3, #0
 8000586:	d10e      	bne.n	80005a6 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8000588:	797a      	ldrb	r2, [r7, #5]
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4413      	add	r3, r2
 800058e:	71fb      	strb	r3, [r7, #7]
      break;
 8000590:	e00e      	b.n	80005b0 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8000592:	79ba      	ldrb	r2, [r7, #6]
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	4413      	add	r3, r2
 8000598:	71fb      	strb	r3, [r7, #7]
      break;
 800059a:	e009      	b.n	80005b0 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 800059c:	797b      	ldrb	r3, [r7, #5]
 800059e:	79fa      	ldrb	r2, [r7, #7]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	71fb      	strb	r3, [r7, #7]
      break;
 80005a4:	e004      	b.n	80005b0 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	79fa      	ldrb	r2, [r7, #7]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	71fb      	strb	r3, [r7, #7]
      break;      
 80005ae:	bf00      	nop
  }
  return dy;
 80005b0:	79fb      	ldrb	r3, [r7, #7]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc90      	pop	{r4, r7}
 80005ba:	4770      	bx	lr

080005bc <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80005bc:	b490      	push	{r4, r7}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4604      	mov	r4, r0
 80005c4:	4608      	mov	r0, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	4623      	mov	r3, r4
 80005cc:	71fb      	strb	r3, [r7, #7]
 80005ce:	4603      	mov	r3, r0
 80005d0:	71bb      	strb	r3, [r7, #6]
 80005d2:	460b      	mov	r3, r1
 80005d4:	717b      	strb	r3, [r7, #5]
 80005d6:	4613      	mov	r3, r2
 80005d8:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80005da:	793b      	ldrb	r3, [r7, #4]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d008      	beq.n	80005f2 <u8g2_add_vector_x+0x36>
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d00b      	beq.n	80005fc <u8g2_add_vector_x+0x40>
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 80005e8:	79ba      	ldrb	r2, [r7, #6]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4413      	add	r3, r2
 80005ee:	71fb      	strb	r3, [r7, #7]
      break;
 80005f0:	e00e      	b.n	8000610 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 80005f2:	797b      	ldrb	r3, [r7, #5]
 80005f4:	79fa      	ldrb	r2, [r7, #7]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	71fb      	strb	r3, [r7, #7]
      break;
 80005fa:	e009      	b.n	8000610 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	79fa      	ldrb	r2, [r7, #7]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	71fb      	strb	r3, [r7, #7]
      break;
 8000604:	e004      	b.n	8000610 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 8000606:	797a      	ldrb	r2, [r7, #5]
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	4413      	add	r3, r2
 800060c:	71fb      	strb	r3, [r7, #7]
      break;      
 800060e:	bf00      	nop
  }
  return dx;
 8000610:	79fb      	ldrb	r3, [r7, #7]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bc90      	pop	{r4, r7}
 800061a:	4770      	bx	lr

0800061c <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
 8000628:	4613      	mov	r3, r2
 800062a:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3354      	adds	r3, #84	; 0x54
 8000630:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800063c:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000644:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800064c:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800064e:	7bfa      	ldrb	r2, [r7, #15]
 8000650:	7d7b      	ldrb	r3, [r7, #21]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800065a:	7dfa      	ldrb	r2, [r7, #23]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	429a      	cmp	r2, r3
 8000660:	d201      	bcs.n	8000666 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8000662:	7dfb      	ldrb	r3, [r7, #23]
 8000664:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	791b      	ldrb	r3, [r3, #4]
 800066a:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	795b      	ldrb	r3, [r3, #5]
 8000670:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8000672:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000676:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	7b9b      	ldrb	r3, [r3, #14]
 800067e:	7bb8      	ldrb	r0, [r7, #14]
 8000680:	f7ff ff9c 	bl	80005bc <u8g2_add_vector_x>
 8000684:	4603      	mov	r3, r0
 8000686:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8000688:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800068c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	7b9b      	ldrb	r3, [r3, #14]
 8000694:	7b78      	ldrb	r0, [r7, #13]
 8000696:	f7ff ff61 	bl	800055c <u8g2_add_vector_y>
 800069a:	4603      	mov	r3, r0
 800069c:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800069e:	78bb      	ldrb	r3, [r7, #2]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00f      	beq.n	80006c4 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	7b1a      	ldrb	r2, [r3, #12]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	7b9b      	ldrb	r3, [r3, #14]
 80006b2:	7db8      	ldrb	r0, [r7, #22]
 80006b4:	7b7a      	ldrb	r2, [r7, #13]
 80006b6:	7bb9      	ldrb	r1, [r7, #14]
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	4603      	mov	r3, r0
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 fbf1 	bl	8000ea4 <u8g2_DrawHVLine>
 80006c2:	e012      	b.n	80006ea <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	7adb      	ldrb	r3, [r3, #11]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10e      	bne.n	80006ea <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	7b5a      	ldrb	r2, [r3, #13]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	7b9b      	ldrb	r3, [r3, #14]
 80006da:	7db8      	ldrb	r0, [r7, #22]
 80006dc:	7b7a      	ldrb	r2, [r7, #13]
 80006de:	7bb9      	ldrb	r1, [r7, #14]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4603      	mov	r3, r0
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 fbdd 	bl	8000ea4 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80006ea:	7dfa      	ldrb	r2, [r7, #23]
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d309      	bcc.n	8000706 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 80006f2:	7dfa      	ldrb	r2, [r7, #23]
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	757b      	strb	r3, [r7, #21]
    ly++;
 80006fe:	7d3b      	ldrb	r3, [r7, #20]
 8000700:	3301      	adds	r3, #1
 8000702:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8000704:	e79f      	b.n	8000646 <u8g2_font_decode_len+0x2a>
      break;
 8000706:	bf00      	nop
  }
  lx += cnt;
 8000708:	7d7a      	ldrb	r2, [r7, #21]
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	4413      	add	r3, r2
 800070e:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8000710:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8000718:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	71da      	strb	r2, [r3, #7]
  
}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3354      	adds	r3, #84	; 0x54
 8000736:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2200      	movs	r2, #0
 8000742:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800074a:	4619      	mov	r1, r3
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f7ff fe98 	bl	8000482 <u8g2_font_decode_get_unsigned_bits>
 8000752:	4603      	mov	r3, r0
 8000754:	b25a      	sxtb	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8000760:	4619      	mov	r1, r3
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f7ff fe8d 	bl	8000482 <u8g2_font_decode_get_unsigned_bits>
 8000768:	4603      	mov	r3, r0
 800076a:	b25a      	sxtb	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	7b1b      	ldrb	r3, [r3, #12]
 800077e:	2b00      	cmp	r3, #0
 8000780:	bf0c      	ite	eq
 8000782:	2301      	moveq	r3, #1
 8000784:	2300      	movne	r3, #0
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461a      	mov	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	735a      	strb	r2, [r3, #13]
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af02      	add	r7, sp, #8
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3354      	adds	r3, #84	; 0x54
 80007a6:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80007a8:	6839      	ldr	r1, [r7, #0]
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffbc 	bl	8000728 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80007b6:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80007be:	4619      	mov	r1, r3
 80007c0:	6938      	ldr	r0, [r7, #16]
 80007c2:	f7ff fea8 	bl	8000516 <u8g2_font_decode_get_signed_bits>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80007d0:	4619      	mov	r1, r3
 80007d2:	6938      	ldr	r0, [r7, #16]
 80007d4:	f7ff fe9f 	bl	8000516 <u8g2_font_decode_get_signed_bits>
 80007d8:	4603      	mov	r3, r0
 80007da:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80007e2:	4619      	mov	r1, r3
 80007e4:	6938      	ldr	r0, [r7, #16]
 80007e6:	f7ff fe96 	bl	8000516 <u8g2_font_decode_get_signed_bits>
 80007ea:	4603      	mov	r3, r0
 80007ec:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	f340 80cf 	ble.w	8000998 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	7918      	ldrb	r0, [r3, #4]
 80007fe:	7bfa      	ldrb	r2, [r7, #15]
 8000800:	7b7b      	ldrb	r3, [r7, #13]
 8000802:	4413      	add	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	425b      	negs	r3, r3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	b25a      	sxtb	r2, r3
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	7b9b      	ldrb	r3, [r3, #14]
 8000810:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000814:	f7ff fed2 	bl	80005bc <u8g2_add_vector_x>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	7958      	ldrb	r0, [r3, #5]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	7b7b      	ldrb	r3, [r7, #13]
 8000828:	4413      	add	r3, r2
 800082a:	b2db      	uxtb	r3, r3
 800082c:	425b      	negs	r3, r3
 800082e:	b2db      	uxtb	r3, r3
 8000830:	b25a      	sxtb	r2, r3
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	7b9b      	ldrb	r3, [r3, #14]
 8000836:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800083a:	f7ff fe8f 	bl	800055c <u8g2_add_vector_y>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8000856:	7d7b      	ldrb	r3, [r7, #21]
 8000858:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	7b9b      	ldrb	r3, [r3, #14]
 800085e:	2b03      	cmp	r3, #3
 8000860:	d852      	bhi.n	8000908 <u8g2_font_decode_glyph+0x170>
 8000862:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <u8g2_font_decode_glyph+0xd0>)
 8000864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000868:	08000879 	.word	0x08000879
 800086c:	08000891 	.word	0x08000891
 8000870:	080008b5 	.word	0x080008b5
 8000874:	080008e5 	.word	0x080008e5
      {
	case 0:
	    x1 += decode->glyph_width;
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	7dbb      	ldrb	r3, [r7, #22]
 8000882:	4413      	add	r3, r2
 8000884:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8000886:	7bfa      	ldrb	r2, [r7, #15]
 8000888:	7d3b      	ldrb	r3, [r7, #20]
 800088a:	4413      	add	r3, r2
 800088c:	753b      	strb	r3, [r7, #20]
	    break;
 800088e:	e03b      	b.n	8000908 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	7dfa      	ldrb	r2, [r7, #23]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	3301      	adds	r3, #1
 800089c:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800089e:	7dbb      	ldrb	r3, [r7, #22]
 80008a0:	3301      	adds	r3, #1
 80008a2:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	7d3b      	ldrb	r3, [r7, #20]
 80008ae:	4413      	add	r3, r2
 80008b0:	753b      	strb	r3, [r7, #20]
	    break;
 80008b2:	e029      	b.n	8000908 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	7dfa      	ldrb	r2, [r7, #23]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	3301      	adds	r3, #1
 80008c6:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80008c8:	7dbb      	ldrb	r3, [r7, #22]
 80008ca:	3301      	adds	r3, #1
 80008cc:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	7d7a      	ldrb	r2, [r7, #21]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80008d6:	7d7b      	ldrb	r3, [r7, #21]
 80008d8:	3301      	adds	r3, #1
 80008da:	757b      	strb	r3, [r7, #21]
	    y1++;
 80008dc:	7d3b      	ldrb	r3, [r7, #20]
 80008de:	3301      	adds	r3, #1
 80008e0:	753b      	strb	r3, [r7, #20]
	    break;	  
 80008e2:	e011      	b.n	8000908 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 80008e4:	7bfa      	ldrb	r2, [r7, #15]
 80008e6:	7dbb      	ldrb	r3, [r7, #22]
 80008e8:	4413      	add	r3, r2
 80008ea:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	7d7a      	ldrb	r2, [r7, #21]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80008fa:	7d7b      	ldrb	r3, [r7, #21]
 80008fc:	3301      	adds	r3, #1
 80008fe:	757b      	strb	r3, [r7, #21]
	    y1++;
 8000900:	7d3b      	ldrb	r3, [r7, #20]
 8000902:	3301      	adds	r3, #1
 8000904:	753b      	strb	r3, [r7, #20]
	    break;	  
 8000906:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8000908:	7db8      	ldrb	r0, [r7, #22]
 800090a:	7d7a      	ldrb	r2, [r7, #21]
 800090c:	7df9      	ldrb	r1, [r7, #23]
 800090e:	7d3b      	ldrb	r3, [r7, #20]
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4603      	mov	r3, r0
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f000 fb7b 	bl	8001010 <u8g2_IsIntersection>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <u8g2_font_decode_glyph+0x18e>
	return d;
 8000920:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000924:	e03a      	b.n	800099c <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	2200      	movs	r2, #0
 800092a:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	2200      	movs	r2, #0
 8000930:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000938:	4619      	mov	r1, r3
 800093a:	6938      	ldr	r0, [r7, #16]
 800093c:	f7ff fda1 	bl	8000482 <u8g2_font_decode_get_unsigned_bits>
 8000940:	4603      	mov	r3, r0
 8000942:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800094a:	4619      	mov	r1, r3
 800094c:	6938      	ldr	r0, [r7, #16]
 800094e:	f7ff fd98 	bl	8000482 <u8g2_font_decode_get_unsigned_bits>
 8000952:	4603      	mov	r3, r0
 8000954:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8000956:	7afb      	ldrb	r3, [r7, #11]
 8000958:	2200      	movs	r2, #0
 800095a:	4619      	mov	r1, r3
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fe5d 	bl	800061c <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8000962:	7abb      	ldrb	r3, [r7, #10]
 8000964:	2201      	movs	r2, #1
 8000966:	4619      	mov	r1, r3
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff fe57 	bl	800061c <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800096e:	2101      	movs	r1, #1
 8000970:	6938      	ldr	r0, [r7, #16]
 8000972:	f7ff fd86 	bl	8000482 <u8g2_font_decode_get_unsigned_bits>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1ec      	bne.n	8000956 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000982:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000986:	429a      	cmp	r2, r3
 8000988:	dd00      	ble.n	800098c <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800098a:	e7d2      	b.n	8000932 <u8g2_font_decode_glyph+0x19a>
	break;
 800098c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	7b1a      	ldrb	r2, [r3, #12]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8000998:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3317      	adds	r3, #23
 80009ba:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80009bc:	887b      	ldrh	r3, [r7, #2]
 80009be:	2bff      	cmp	r3, #255	; 0xff
 80009c0:	d82a      	bhi.n	8000a18 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80009c2:	887b      	ldrh	r3, [r7, #2]
 80009c4:	2b60      	cmp	r3, #96	; 0x60
 80009c6:	d907      	bls.n	80009d8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80009ce:	461a      	mov	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	4413      	add	r3, r2
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	e009      	b.n	80009ec <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	2b40      	cmp	r3, #64	; 0x40
 80009dc:	d906      	bls.n	80009ec <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80009e4:	461a      	mov	r2, r3
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	4413      	add	r3, r2
 80009ea:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	3301      	adds	r3, #1
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d04e      	beq.n	8000a94 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	887a      	ldrh	r2, [r7, #2]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d102      	bne.n	8000a08 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3302      	adds	r3, #2
 8000a06:	e049      	b.n	8000a9c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	4413      	add	r3, r2
 8000a14:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8000a16:	e7e9      	b.n	80009ec <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8000a1e:	461a      	mov	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	4413      	add	r3, r2
 8000a24:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	6938      	ldr	r0, [r7, #16]
 8000a2e:	f7ff fc60 	bl	80002f2 <u8g2_font_get_word>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	4413      	add	r3, r2
 8000a3a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	6938      	ldr	r0, [r7, #16]
 8000a40:	f7ff fc57 	bl	80002f2 <u8g2_font_get_word>
 8000a44:	4603      	mov	r3, r0
 8000a46:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8000a4e:	89fa      	ldrh	r2, [r7, #14]
 8000a50:	887b      	ldrh	r3, [r7, #2]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d3e9      	bcc.n	8000a2a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	021b      	lsls	r3, r3, #8
 8000a60:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d010      	beq.n	8000a98 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8000a76:	89fa      	ldrh	r2, [r7, #14]
 8000a78:	887b      	ldrh	r3, [r7, #2]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d102      	bne.n	8000a84 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3303      	adds	r3, #3
 8000a82:	e00b      	b.n	8000a9c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3302      	adds	r3, #2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	4413      	add	r3, r2
 8000a90:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8000a92:	e7e0      	b.n	8000a56 <u8g2_font_get_glyph_data+0xb2>
	break;
 8000a94:	bf00      	nop
 8000a96:	e000      	b.n	8000a9a <u8g2_font_get_glyph_data+0xf6>
	break;
 8000a98:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	4608      	mov	r0, r1
 8000aae:	4611      	mov	r1, r2
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	70fb      	strb	r3, [r7, #3]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	70bb      	strb	r3, [r7, #2]
 8000aba:	4613      	mov	r3, r2
 8000abc:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	78fa      	ldrb	r2, [r7, #3]
 8000ac6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	78ba      	ldrb	r2, [r7, #2]
 8000ace:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8000ad2:	883b      	ldrh	r3, [r7, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff64 	bl	80009a4 <u8g2_font_get_glyph_data>
 8000adc:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d005      	beq.n	8000af0 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff fe56 	bl	8000798 <u8g2_font_decode_glyph>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	4608      	mov	r0, r1
 8000b06:	4611      	mov	r1, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	70fb      	strb	r3, [r7, #3]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	70bb      	strb	r3, [r7, #2]
 8000b12:	4613      	mov	r3, r2
 8000b14:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d833      	bhi.n	8000b88 <u8g2_DrawGlyph+0x8c>
 8000b20:	a201      	add	r2, pc, #4	; (adr r2, 8000b28 <u8g2_DrawGlyph+0x2c>)
 8000b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b26:	bf00      	nop
 8000b28:	08000b39 	.word	0x08000b39
 8000b2c:	08000b4d 	.word	0x08000b4d
 8000b30:	08000b61 	.word	0x08000b61
 8000b34:	08000b75 	.word	0x08000b75
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	4798      	blx	r3
 8000b40:	4603      	mov	r3, r0
 8000b42:	461a      	mov	r2, r3
 8000b44:	78bb      	ldrb	r3, [r7, #2]
 8000b46:	4413      	add	r3, r2
 8000b48:	70bb      	strb	r3, [r7, #2]
      break;
 8000b4a:	e01d      	b.n	8000b88 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	4798      	blx	r3
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	70fb      	strb	r3, [r7, #3]
      break;
 8000b5e:	e013      	b.n	8000b88 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	4798      	blx	r3
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	78bb      	ldrb	r3, [r7, #2]
 8000b6e:	1a9b      	subs	r3, r3, r2
 8000b70:	70bb      	strb	r3, [r7, #2]
      break;
 8000b72:	e009      	b.n	8000b88 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	4798      	blx	r3
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	4413      	add	r3, r2
 8000b84:	70fb      	strb	r3, [r7, #3]
      break;
 8000b86:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8000b88:	883b      	ldrh	r3, [r7, #0]
 8000b8a:	78ba      	ldrb	r2, [r7, #2]
 8000b8c:	78f9      	ldrb	r1, [r7, #3]
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ff88 	bl	8000aa4 <u8g2_font_draw_glyph>
 8000b94:	4603      	mov	r3, r0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop

08000ba0 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	72fb      	strb	r3, [r7, #11]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f000 fca2 	bl	80014fc <u8x8_utf8_init>
  sum = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	4798      	blx	r3
 8000bca:	4603      	mov	r3, r0
 8000bcc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8000bce:	8abb      	ldrh	r3, [r7, #20]
 8000bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d038      	beq.n	8000c4a <u8g2_draw_string+0xaa>
      break;
    str++;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8000bde:	8abb      	ldrh	r3, [r7, #20]
 8000be0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d0e9      	beq.n	8000bbc <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8000be8:	8abb      	ldrh	r3, [r7, #20]
 8000bea:	7aba      	ldrb	r2, [r7, #10]
 8000bec:	7af9      	ldrb	r1, [r7, #11]
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff ff84 	bl	8000afc <u8g2_DrawGlyph>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d81e      	bhi.n	8000c40 <u8g2_draw_string+0xa0>
 8000c02:	a201      	add	r2, pc, #4	; (adr r2, 8000c08 <u8g2_draw_string+0x68>)
 8000c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c08:	08000c19 	.word	0x08000c19
 8000c0c:	08000c23 	.word	0x08000c23
 8000c10:	08000c2d 	.word	0x08000c2d
 8000c14:	08000c37 	.word	0x08000c37
      {
	case 0:
	  x += delta;
 8000c18:	7afa      	ldrb	r2, [r7, #11]
 8000c1a:	7cfb      	ldrb	r3, [r7, #19]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	72fb      	strb	r3, [r7, #11]
	  break;
 8000c20:	e00e      	b.n	8000c40 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8000c22:	7aba      	ldrb	r2, [r7, #10]
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	4413      	add	r3, r2
 8000c28:	72bb      	strb	r3, [r7, #10]
	  break;
 8000c2a:	e009      	b.n	8000c40 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8000c2c:	7afa      	ldrb	r2, [r7, #11]
 8000c2e:	7cfb      	ldrb	r3, [r7, #19]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	72fb      	strb	r3, [r7, #11]
	  break;
 8000c34:	e004      	b.n	8000c40 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8000c36:	7aba      	ldrb	r2, [r7, #10]
 8000c38:	7cfb      	ldrb	r3, [r7, #19]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	72bb      	strb	r3, [r7, #10]
	  break;
 8000c3e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8000c40:	7dfa      	ldrb	r2, [r7, #23]
 8000c42:	7cfb      	ldrb	r3, [r7, #19]
 8000c44:	4413      	add	r3, r2
 8000c46:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8000c48:	e7b8      	b.n	8000bbc <u8g2_draw_string+0x1c>
      break;
 8000c4a:	bf00      	nop
    }
  }
  return sum;
 8000c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop

08000c58 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	72fb      	strb	r3, [r7, #11]
 8000c66:	4613      	mov	r3, r2
 8000c68:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <u8g2_DrawStr+0x30>)
 8000c6e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8000c70:	7aba      	ldrb	r2, [r7, #10]
 8000c72:	7af9      	ldrb	r1, [r7, #11]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f7ff ff92 	bl	8000ba0 <u8g2_draw_string>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	08001517 	.word	0x08001517

08000c8c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d05d      	beq.n	8000d58 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d04d      	beq.n	8000d5a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d11c      	bne.n	8000d02 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	da05      	bge.n	8000ce4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dd32      	ble.n	8000d5a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8000d00:	e02b      	b.n	8000d5a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8000d10:	4619      	mov	r1, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8000d18:	440b      	add	r3, r1
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	da0d      	bge.n	8000d3a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	b25a      	sxtb	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8000d46:	429a      	cmp	r2, r3
 8000d48:	dd07      	ble.n	8000d5a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8000d56:	e000      	b.n	8000d5a <u8g2_UpdateRefHeight+0xce>
    return;
 8000d58:	bf00      	nop
  }  
}
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
	...

08000d78 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <u8g2_SetFontPosBaseline+0x18>)
 8000d84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	08000d63 	.word	0x08000d63

08000d94 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d00b      	beq.n	8000dc0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3364      	adds	r3, #100	; 0x64
 8000db2:	6839      	ldr	r1, [r7, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fabb 	bl	8000330 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff66 	bl	8000c8c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	7dbb      	ldrb	r3, [r7, #22]
 8000dee:	4413      	add	r3, r2
 8000df0:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8000df2:	7dfa      	ldrb	r2, [r7, #23]
 8000df4:	7dbb      	ldrb	r3, [r7, #22]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d90b      	bls.n	8000e12 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8000dfa:	7dfa      	ldrb	r2, [r7, #23]
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d205      	bcs.n	8000e0e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	75bb      	strb	r3, [r7, #22]
      b--;
 8000e06:	7dbb      	ldrb	r3, [r7, #22]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	75bb      	strb	r3, [r7, #22]
 8000e0c:	e001      	b.n	8000e12 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8000e12:	7dfa      	ldrb	r2, [r7, #23]
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d301      	bcc.n	8000e1e <u8g2_clip_intersection2+0x56>
    return 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e01c      	b.n	8000e58 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8000e1e:	7dba      	ldrb	r2, [r7, #22]
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d801      	bhi.n	8000e2a <u8g2_clip_intersection2+0x62>
    return 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e016      	b.n	8000e58 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8000e2a:	7dfa      	ldrb	r2, [r7, #23]
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d201      	bcs.n	8000e36 <u8g2_clip_intersection2+0x6e>
    a = c;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8000e36:	7dba      	ldrb	r2, [r7, #22]
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d901      	bls.n	8000e42 <u8g2_clip_intersection2+0x7a>
    b = d;
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	7dfa      	ldrb	r2, [r7, #23]
 8000e46:	701a      	strb	r2, [r3, #0]
  b -= a;
 8000e48:	7dba      	ldrb	r2, [r7, #22]
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	7dba      	ldrb	r2, [r7, #22]
 8000e54:	701a      	strb	r2, [r3, #0]
  return 1;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	371c      	adds	r7, #28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8000e62:	b590      	push	{r4, r7, lr}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af02      	add	r7, sp, #8
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4603      	mov	r3, r0
 8000e72:	70fb      	strb	r3, [r7, #3]
 8000e74:	460b      	mov	r3, r1
 8000e76:	70bb      	strb	r3, [r7, #2]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e82:	78ba      	ldrb	r2, [r7, #2]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8000e8c:	7878      	ldrb	r0, [r7, #1]
 8000e8e:	78ba      	ldrb	r2, [r7, #2]
 8000e90:	78f9      	ldrb	r1, [r7, #3]
 8000e92:	7e3b      	ldrb	r3, [r7, #24]
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	4603      	mov	r3, r0
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	47a0      	blx	r4
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}

08000ea4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	4608      	mov	r0, r1
 8000eae:	4611      	mov	r1, r2
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	70fb      	strb	r3, [r7, #3]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70bb      	strb	r3, [r7, #2]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d06d      	beq.n	8000fa4 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d06a      	beq.n	8000fa4 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8000ece:	787b      	ldrb	r3, [r7, #1]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d918      	bls.n	8000f06 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8000ed4:	7e3b      	ldrb	r3, [r7, #24]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d109      	bne.n	8000eee <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8000eda:	78fa      	ldrb	r2, [r7, #3]
 8000edc:	787b      	ldrb	r3, [r7, #1]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	70fb      	strb	r3, [r7, #3]
	  x++;
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	70fb      	strb	r3, [r7, #3]
 8000eec:	e00b      	b.n	8000f06 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8000eee:	7e3b      	ldrb	r3, [r7, #24]
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d108      	bne.n	8000f06 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8000ef4:	78ba      	ldrb	r2, [r7, #2]
 8000ef6:	787b      	ldrb	r3, [r7, #1]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	70bb      	strb	r3, [r7, #2]
	  y++;
 8000efe:	78bb      	ldrb	r3, [r7, #2]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8000f06:	7e3b      	ldrb	r3, [r7, #24]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8000f0e:	7e3b      	ldrb	r3, [r7, #24]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d119      	bne.n	8000f48 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000f1a:	78bb      	ldrb	r3, [r7, #2]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d838      	bhi.n	8000f92 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8000f26:	78bb      	ldrb	r3, [r7, #2]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d934      	bls.n	8000f96 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000f38:	1c79      	adds	r1, r7, #1
 8000f3a:	1cf8      	adds	r0, r7, #3
 8000f3c:	f7ff ff44 	bl	8000dc8 <u8g2_clip_intersection2>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d119      	bne.n	8000f7a <u8g2_DrawHVLine+0xd6>
	  return;
 8000f46:	e02d      	b.n	8000fa4 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d822      	bhi.n	8000f9a <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d91e      	bls.n	8000f9e <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f6c:	1c79      	adds	r1, r7, #1
 8000f6e:	1cb8      	adds	r0, r7, #2
 8000f70:	f7ff ff2a 	bl	8000dc8 <u8g2_clip_intersection2>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d013      	beq.n	8000fa2 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	689c      	ldr	r4, [r3, #8]
 8000f80:	78f9      	ldrb	r1, [r7, #3]
 8000f82:	78ba      	ldrb	r2, [r7, #2]
 8000f84:	7878      	ldrb	r0, [r7, #1]
 8000f86:	7e3b      	ldrb	r3, [r7, #24]
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	47a0      	blx	r4
 8000f90:	e008      	b.n	8000fa4 <u8g2_DrawHVLine+0x100>
	  return;
 8000f92:	bf00      	nop
 8000f94:	e006      	b.n	8000fa4 <u8g2_DrawHVLine+0x100>
	  return;
 8000f96:	bf00      	nop
 8000f98:	e004      	b.n	8000fa4 <u8g2_DrawHVLine+0x100>
	  return;
 8000f9a:	bf00      	nop
 8000f9c:	e002      	b.n	8000fa4 <u8g2_DrawHVLine+0x100>
	  return;
 8000f9e:	bf00      	nop
 8000fa0:	e000      	b.n	8000fa4 <u8g2_DrawHVLine+0x100>
	  return;
 8000fa2:	bf00      	nop
    }
}
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}

08000faa <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8000faa:	b490      	push	{r4, r7}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4623      	mov	r3, r4
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71bb      	strb	r3, [r7, #6]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	717b      	strb	r3, [r7, #5]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8000fc8:	797a      	ldrb	r2, [r7, #5]
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d20d      	bcs.n	8000fec <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8000fd0:	793a      	ldrb	r2, [r7, #4]
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d901      	bls.n	8000fdc <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e014      	b.n	8001006 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8000fdc:	797a      	ldrb	r2, [r7, #5]
 8000fde:	793b      	ldrb	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d901      	bls.n	8000fe8 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e00e      	b.n	8001006 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e00c      	b.n	8001006 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8000fec:	793a      	ldrb	r2, [r7, #4]
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d907      	bls.n	8001004 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8000ff4:	797a      	ldrb	r2, [r7, #5]
 8000ff6:	793b      	ldrb	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d901      	bls.n	8001000 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e002      	b.n	8001006 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001000:	2300      	movs	r3, #0
 8001002:	e000      	b.n	8001006 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001004:	2300      	movs	r3, #0
    }
  }
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bc90      	pop	{r4, r7}
 800100e:	4770      	bx	lr

08001010 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4603      	mov	r3, r0
 8001020:	70fb      	strb	r3, [r7, #3]
 8001022:	460b      	mov	r3, r1
 8001024:	70bb      	strb	r3, [r7, #2]
 8001026:	4613      	mov	r3, r2
 8001028:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8001036:	7c3b      	ldrb	r3, [r7, #16]
 8001038:	78ba      	ldrb	r2, [r7, #2]
 800103a:	f7ff ffb6 	bl	8000faa <u8g2_is_intersection_decision_tree>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <u8g2_IsIntersection+0x38>
    return 0; 
 8001044:	2300      	movs	r3, #0
 8001046:	e00a      	b.n	800105e <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	78fa      	ldrb	r2, [r7, #3]
 8001058:	f7ff ffa7 	bl	8000faa <u8g2_is_intersection_decision_tree>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001066:	b480      	push	{r7}
 8001068:	b087      	sub	sp, #28
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	4608      	mov	r0, r1
 8001070:	4611      	mov	r1, r2
 8001072:	461a      	mov	r2, r3
 8001074:	4603      	mov	r3, r0
 8001076:	70fb      	strb	r3, [r7, #3]
 8001078:	460b      	mov	r3, r1
 800107a:	70bb      	strb	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001080:	78bb      	ldrb	r3, [r7, #2]
 8001082:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001084:	7cfb      	ldrb	r3, [r7, #19]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800108c:	2301      	movs	r3, #1
 800108e:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8001090:	7c3a      	ldrb	r2, [r7, #16]
 8001092:	7cfb      	ldrb	r3, [r7, #19]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d801      	bhi.n	80010b0 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80010ac:	7c3b      	ldrb	r3, [r7, #16]
 80010ae:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d001      	beq.n	80010be <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80010ba:	7c3b      	ldrb	r3, [r7, #16]
 80010bc:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80010be:	78bb      	ldrb	r3, [r7, #2]
 80010c0:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	f023 0307 	bic.w	r3, r3, #7
 80010c8:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	7c1b      	ldrb	r3, [r3, #16]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	89fa      	ldrh	r2, [r7, #14]
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010de:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80010e0:	89fb      	ldrh	r3, [r7, #14]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4413      	add	r3, r2
 80010e6:	617b      	str	r3, [r7, #20]
  ptr += x;
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	4413      	add	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80010f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d117      	bne.n	8001128 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	7cbb      	ldrb	r3, [r7, #18]
 80010fe:	4313      	orrs	r3, r2
 8001100:	b2da      	uxtb	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	7c7b      	ldrb	r3, [r7, #17]
 800110c:	4053      	eors	r3, r2
 800110e:	b2da      	uxtb	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
	len--;
 800111a:	787b      	ldrb	r3, [r7, #1]
 800111c:	3b01      	subs	r3, #1
 800111e:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1e8      	bne.n	80010f8 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001126:	e039      	b.n	800119c <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	7cbb      	ldrb	r3, [r7, #18]
 800112e:	4313      	orrs	r3, r2
 8001130:	b2da      	uxtb	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	7c7b      	ldrb	r3, [r7, #17]
 800113c:	4053      	eors	r3, r2
 800113e:	b2da      	uxtb	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001144:	7cfb      	ldrb	r3, [r7, #19]
 8001146:	3301      	adds	r3, #1
 8001148:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800114a:	7cfb      	ldrb	r3, [r7, #19]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	74fb      	strb	r3, [r7, #19]
      len--;
 8001152:	787b      	ldrb	r3, [r7, #1]
 8001154:	3b01      	subs	r3, #1
 8001156:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8001158:	7cfb      	ldrb	r3, [r7, #19]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d115      	bne.n	800118a <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001164:	461a      	mov	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	4413      	add	r3, r2
 800116a:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001172:	2b01      	cmp	r3, #1
 8001174:	d801      	bhi.n	800117a <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001180:	2b01      	cmp	r3, #1
 8001182:	d008      	beq.n	8001196 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	747b      	strb	r3, [r7, #17]
 8001188:	e005      	b.n	8001196 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800118a:	7cbb      	ldrb	r3, [r7, #18]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8001190:	7c7b      	ldrb	r3, [r7, #17]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8001196:	787b      	ldrb	r3, [r7, #1]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1c5      	bne.n	8001128 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800119c:	bf00      	nop
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	22ff      	movs	r2, #255	; 0xff
 80011c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	22ff      	movs	r2, #255	; 0xff
 80011ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	4798      	blx	r3
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	4613      	mov	r3, r2
 80011ee:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	79fa      	ldrb	r2, [r7, #7]
 8001206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f7ff ffaf 	bl	80011a6 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f7ff fd95 	bl	8000d78 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800125e:	b480      	push	{r7}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001272:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	7c1b      	ldrb	r3, [r3, #16]
 8001286:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b1f      	cmp	r3, #31
 800128c:	d901      	bls.n	8001292 <u8g2_update_dimension_common+0x34>
    t = 31;
 800128e:	231f      	movs	r3, #31
 8001290:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80012a6:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012bc:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80012c6:	4413      	add	r3, r2
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	7c52      	ldrb	r2, [r2, #17]
 80012cc:	4293      	cmp	r3, r2
 80012ce:	dd06      	ble.n	80012de <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	7c5a      	ldrb	r2, [r3, #17]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4413      	add	r3, r2
 8001306:	b2da      	uxtb	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	22f0      	movs	r2, #240	; 0xf0
 8001312:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	8a9b      	ldrh	r3, [r3, #20]
 800131a:	2bf0      	cmp	r3, #240	; 0xf0
 800131c:	d805      	bhi.n	800132a <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	8a9b      	ldrh	r3, [r3, #20]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	8adb      	ldrh	r3, [r3, #22]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af02      	add	r7, sp, #8
 8001346:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	4603      	mov	r3, r0
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fe53 	bl	8001010 <u8g2_IsIntersection>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001378:	e03b      	b.n	80013f2 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800138e:	429a      	cmp	r2, r3
 8001390:	d205      	bcs.n	800139e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d905      	bls.n	80013ba <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d205      	bcs.n	80013d6 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d905      	bls.n	80013f2 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ff2b 	bl	800125e <u8g2_update_dimension_common>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001440:	429a      	cmp	r2, r3
 8001442:	d30a      	bcc.n	800145a <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	b2da      	uxtb	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	b2da      	uxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff65 	bl	8001340 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af02      	add	r7, sp, #8
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	4608      	mov	r0, r1
 8001488:	4611      	mov	r1, r2
 800148a:	461a      	mov	r2, r3
 800148c:	4603      	mov	r3, r0
 800148e:	70fb      	strb	r3, [r7, #3]
 8001490:	460b      	mov	r3, r1
 8001492:	70bb      	strb	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800149e:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 80014a0:	7bba      	ldrb	r2, [r7, #14]
 80014a2:	78bb      	ldrb	r3, [r7, #2]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80014ae:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 80014b8:	7e3b      	ldrb	r3, [r7, #24]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d107      	bne.n	80014ce <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	787b      	ldrb	r3, [r7, #1]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e009      	b.n	80014e2 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 80014ce:	7e3b      	ldrb	r3, [r7, #24]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d106      	bne.n	80014e2 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 80014da:	7bba      	ldrb	r2, [r7, #14]
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 80014e2:	7878      	ldrb	r0, [r7, #1]
 80014e4:	7bba      	ldrb	r2, [r7, #14]
 80014e6:	7bf9      	ldrb	r1, [r7, #15]
 80014e8:	7e3b      	ldrb	r3, [r7, #24]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	4603      	mov	r3, r0
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fcb7 	bl	8000e62 <u8g2_draw_hv_line_2dir>
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <u8x8_ascii_next+0x18>
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	2b0a      	cmp	r3, #10
 800152c:	d102      	bne.n	8001534 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800152e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001532:	e001      	b.n	8001538 <u8x8_ascii_next+0x22>
  return b;
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	b29b      	uxth	r3, r3
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001542:	b590      	push	{r4, r7, lr}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691c      	ldr	r4, [r3, #16]
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	2300      	movs	r3, #0
 8001556:	2120      	movs	r1, #32
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	47a0      	blx	r4
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bd90      	pop	{r4, r7, pc}

08001566 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001566:	b590      	push	{r4, r7, lr}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	460b      	mov	r3, r1
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	691c      	ldr	r4, [r3, #16]
 8001578:	7afa      	ldrb	r2, [r7, #11]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2117      	movs	r1, #23
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	47a0      	blx	r4
 8001582:	4603      	mov	r3, r0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bd90      	pop	{r4, r7, pc}

0800158c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001598:	1cfb      	adds	r3, r7, #3
 800159a:	461a      	mov	r2, r3
 800159c:	2101      	movs	r1, #1
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffe1 	bl	8001566 <u8x8_byte_SendBytes>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80015ae:	b590      	push	{r4, r7, lr}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68dc      	ldr	r4, [r3, #12]
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	2300      	movs	r3, #0
 80015c2:	2115      	movs	r1, #21
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	47a0      	blx	r4
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}

080015d2 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80015d2:	b590      	push	{r4, r7, lr}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68dc      	ldr	r4, [r3, #12]
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	2300      	movs	r3, #0
 80015e6:	2116      	movs	r1, #22
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	47a0      	blx	r4
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd90      	pop	{r4, r7, pc}

080015f6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80015f6:	b590      	push	{r4, r7, lr}
 80015f8:	b085      	sub	sp, #20
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	460b      	mov	r3, r1
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	68dc      	ldr	r4, [r3, #12]
 8001608:	7afa      	ldrb	r2, [r7, #11]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2117      	movs	r1, #23
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	47a0      	blx	r4
 8001612:	4603      	mov	r3, r0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}

0800161c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68dc      	ldr	r4, [r3, #12]
 8001628:	2300      	movs	r3, #0
 800162a:	2200      	movs	r2, #0
 800162c:	2118      	movs	r1, #24
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	47a0      	blx	r4
 8001632:	4603      	mov	r3, r0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}

0800163c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68dc      	ldr	r4, [r3, #12]
 8001648:	2300      	movs	r3, #0
 800164a:	2200      	movs	r2, #0
 800164c:	2119      	movs	r1, #25
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	47a0      	blx	r4
 8001652:	4603      	mov	r3, r0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	73fb      	strb	r3, [r7, #15]
    data++;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	2b17      	cmp	r3, #23
 8001676:	d017      	beq.n	80016a8 <u8x8_cad_SendSequence+0x4c>
 8001678:	2b17      	cmp	r3, #23
 800167a:	dc02      	bgt.n	8001682 <u8x8_cad_SendSequence+0x26>
 800167c:	2b15      	cmp	r3, #21
 800167e:	db37      	blt.n	80016f0 <u8x8_cad_SendSequence+0x94>
 8001680:	e004      	b.n	800168c <u8x8_cad_SendSequence+0x30>
 8001682:	2b19      	cmp	r3, #25
 8001684:	dd1e      	ble.n	80016c4 <u8x8_cad_SendSequence+0x68>
 8001686:	2bfe      	cmp	r3, #254	; 0xfe
 8001688:	d024      	beq.n	80016d4 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800168a:	e031      	b.n	80016f0 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68dc      	ldr	r4, [r3, #12]
 8001696:	7bba      	ldrb	r2, [r7, #14]
 8001698:	7bf9      	ldrb	r1, [r7, #15]
 800169a:	2300      	movs	r3, #0
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	47a0      	blx	r4
	  data++;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	603b      	str	r3, [r7, #0]
	  break;
 80016a6:	e022      	b.n	80016ee <u8x8_cad_SendSequence+0x92>
	  v = *data;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80016ae:	f107 030e 	add.w	r3, r7, #14
 80016b2:	461a      	mov	r2, r3
 80016b4:	2101      	movs	r1, #1
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff9d 	bl	80015f6 <u8x8_cad_SendData>
	  data++;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	603b      	str	r3, [r7, #0]
	  break;
 80016c2:	e014      	b.n	80016ee <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68dc      	ldr	r4, [r3, #12]
 80016c8:	7bf9      	ldrb	r1, [r7, #15]
 80016ca:	2300      	movs	r3, #0
 80016cc:	2200      	movs	r2, #0
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	47a0      	blx	r4
	  break;
 80016d2:	e00c      	b.n	80016ee <u8x8_cad_SendSequence+0x92>
	  v = *data;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	461a      	mov	r2, r3
 80016de:	2129      	movs	r1, #41	; 0x29
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f9d7 	bl	8001a94 <u8x8_gpio_call>
	  data++;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	603b      	str	r3, [r7, #0]
	  break;
 80016ec:	bf00      	nop
    cmd = *data;
 80016ee:	e7ba      	b.n	8001666 <u8x8_cad_SendSequence+0xa>
	return;
 80016f0:	bf00      	nop
    }
  }
}
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}

080016f8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	460b      	mov	r3, r1
 8001704:	72fb      	strb	r3, [r7, #11]
 8001706:	4613      	mov	r3, r2
 8001708:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800170a:	7afb      	ldrb	r3, [r7, #11]
 800170c:	3b14      	subs	r3, #20
 800170e:	2b05      	cmp	r3, #5
 8001710:	d82f      	bhi.n	8001772 <u8x8_cad_001+0x7a>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <u8x8_cad_001+0x20>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001761 	.word	0x08001761
 800171c:	08001731 	.word	0x08001731
 8001720:	08001745 	.word	0x08001745
 8001724:	08001759 	.word	0x08001759
 8001728:	08001761 	.word	0x08001761
 800172c:	08001761 	.word	0x08001761
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8001730:	2100      	movs	r1, #0
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7ff ff05 	bl	8001542 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001738:	7abb      	ldrb	r3, [r7, #10]
 800173a:	4619      	mov	r1, r3
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f7ff ff25 	bl	800158c <u8x8_byte_SendByte>
      break;
 8001742:	e018      	b.n	8001776 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8001744:	2100      	movs	r1, #0
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f7ff fefb 	bl	8001542 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800174c:	7abb      	ldrb	r3, [r7, #10]
 800174e:	4619      	mov	r1, r3
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7ff ff1b 	bl	800158c <u8x8_byte_SendByte>
      break;
 8001756:	e00e      	b.n	8001776 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8001758:	2101      	movs	r1, #1
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff fef1 	bl	8001542 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	691c      	ldr	r4, [r3, #16]
 8001764:	7aba      	ldrb	r2, [r7, #10]
 8001766:	7af9      	ldrb	r1, [r7, #11]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	47a0      	blx	r4
 800176e:	4603      	mov	r3, r0
 8001770:	e002      	b.n	8001778 <u8x8_cad_001+0x80>
    default:
      return 0;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <u8x8_cad_001+0x80>
  }
  return 1;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bd90      	pop	{r4, r7, pc}

08001780 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	72fb      	strb	r3, [r7, #11]
 800178e:	4613      	mov	r3, r2
 8001790:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8001792:	7afb      	ldrb	r3, [r7, #11]
 8001794:	2b0e      	cmp	r3, #14
 8001796:	d05f      	beq.n	8001858 <u8x8_d_st7565_common+0xd8>
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d002      	beq.n	80017a2 <u8x8_d_st7565_common+0x22>
 800179c:	2b0b      	cmp	r3, #11
 800179e:	d04e      	beq.n	800183e <u8x8_d_st7565_common+0xbe>
 80017a0:	e06c      	b.n	800187c <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7ff ff3a 	bl	800161c <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	795b      	ldrb	r3, [r3, #5]
 80017ac:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 80017ae:	7dbb      	ldrb	r3, [r7, #22]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80017ba:	7dbb      	ldrb	r3, [r7, #22]
 80017bc:	4413      	add	r3, r2
 80017be:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80017c0:	7dbb      	ldrb	r3, [r7, #22]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f043 0310 	orr.w	r3, r3, #16
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4619      	mov	r1, r3
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff feed 	bl	80015ae <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80017d4:	7dbb      	ldrb	r3, [r7, #22]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4619      	mov	r1, r3
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff fee5 	bl	80015ae <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	799b      	ldrb	r3, [r3, #6]
 80017e8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f7ff fedc 	bl	80015ae <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8001808:	7dfa      	ldrb	r2, [r7, #23]
 800180a:	7dbb      	ldrb	r3, [r7, #22]
 800180c:	4413      	add	r3, r2
 800180e:	2b84      	cmp	r3, #132	; 0x84
 8001810:	d905      	bls.n	800181e <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 8001812:	2384      	movs	r3, #132	; 0x84
 8001814:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8001816:	7dfa      	ldrb	r2, [r7, #23]
 8001818:	7dbb      	ldrb	r3, [r7, #22]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4619      	mov	r1, r3
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff fee6 	bl	80015f6 <u8x8_cad_SendData>
	arg_int--;
 800182a:	7abb      	ldrb	r3, [r7, #10]
 800182c:	3b01      	subs	r3, #1
 800182e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8001830:	7abb      	ldrb	r3, [r7, #10]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f3      	bne.n	800181e <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff ff00 	bl	800163c <u8x8_cad_EndTransfer>
      break;
 800183c:	e020      	b.n	8001880 <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800183e:	7abb      	ldrb	r3, [r7, #10]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d104      	bne.n	800184e <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8001844:	4911      	ldr	r1, [pc, #68]	; (800188c <u8x8_d_st7565_common+0x10c>)
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7ff ff08 	bl	800165c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 800184c:	e018      	b.n	8001880 <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800184e:	4910      	ldr	r1, [pc, #64]	; (8001890 <u8x8_d_st7565_common+0x110>)
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f7ff ff03 	bl	800165c <u8x8_cad_SendSequence>
      break;
 8001856:	e013      	b.n	8001880 <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7ff fedf 	bl	800161c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800185e:	2181      	movs	r1, #129	; 0x81
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff fea4 	bl	80015ae <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8001866:	7abb      	ldrb	r3, [r7, #10]
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4619      	mov	r1, r3
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f7ff feaf 	bl	80015d2 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7ff fee1 	bl	800163c <u8x8_cad_EndTransfer>
      break;
 800187a:	e001      	b.n	8001880 <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 800187c:	2300      	movs	r3, #0
 800187e:	e000      	b.n	8001882 <u8x8_d_st7565_common+0x102>
  }
  return 1;
 8001880:	2301      	movs	r3, #1
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	080085fc 	.word	0x080085fc
 8001890:	08008604 	.word	0x08008604

08001894 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	72fb      	strb	r3, [r7, #11]
 80018a2:	4613      	mov	r3, r2
 80018a4:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80018a6:	7aba      	ldrb	r2, [r7, #10]
 80018a8:	7af9      	ldrb	r1, [r7, #11]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7ff ff67 	bl	8001780 <u8x8_d_st7565_common>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d12e      	bne.n	8001916 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	2b0a      	cmp	r3, #10
 80018bc:	d008      	beq.n	80018d0 <u8x8_d_st7565_nhd_c12864+0x3c>
 80018be:	2b0d      	cmp	r3, #13
 80018c0:	d00e      	beq.n	80018e0 <u8x8_d_st7565_nhd_c12864+0x4c>
 80018c2:	2b09      	cmp	r3, #9
 80018c4:	d125      	bne.n	8001912 <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 80018c6:	4917      	ldr	r1, [pc, #92]	; (8001924 <u8x8_d_st7565_nhd_c12864+0x90>)
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f833 	bl	8001934 <u8x8_d_helper_display_setup_memory>
	break;
 80018ce:	e023      	b.n	8001918 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f842 	bl	800195a <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 80018d6:	4914      	ldr	r1, [pc, #80]	; (8001928 <u8x8_d_st7565_nhd_c12864+0x94>)
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f7ff febf 	bl	800165c <u8x8_cad_SendSequence>
	break;
 80018de:	e01b      	b.n	8001918 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 80018e0:	7abb      	ldrb	r3, [r7, #10]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10a      	bne.n	80018fc <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80018e6:	4911      	ldr	r1, [pc, #68]	; (800192c <u8x8_d_st7565_nhd_c12864+0x98>)
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7ff feb7 	bl	800165c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	7c9a      	ldrb	r2, [r3, #18]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 80018fa:	e00d      	b.n	8001918 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <u8x8_d_st7565_nhd_c12864+0x9c>)
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff feac 	bl	800165c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	7cda      	ldrb	r2, [r3, #19]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8001910:	e002      	b.n	8001918 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 8001912:	2300      	movs	r3, #0
 8001914:	e001      	b.n	800191a <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 8001916:	bf00      	nop
  return 1;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	0800861c 	.word	0x0800861c
 8001928:	08008634 	.word	0x08008634
 800192c:	0800860c 	.word	0x0800860c
 8001930:	08008614 	.word	0x08008614

08001934 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	7c9a      	ldrb	r2, [r3, #18]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800195a:	b590      	push	{r4, r7, lr}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695c      	ldr	r4, [r3, #20]
 8001966:	2300      	movs	r3, #0
 8001968:	2200      	movs	r2, #0
 800196a:	2128      	movs	r1, #40	; 0x28
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68dc      	ldr	r4, [r3, #12]
 8001974:	2300      	movs	r3, #0
 8001976:	2200      	movs	r2, #0
 8001978:	2114      	movs	r1, #20
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800197e:	2201      	movs	r2, #1
 8001980:	214b      	movs	r1, #75	; 0x4b
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f886 	bl	8001a94 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	791b      	ldrb	r3, [r3, #4]
 800198e:	461a      	mov	r2, r3
 8001990:	2129      	movs	r1, #41	; 0x29
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f87e 	bl	8001a94 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	214b      	movs	r1, #75	; 0x4b
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f879 	bl	8001a94 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	791b      	ldrb	r3, [r3, #4]
 80019a8:	461a      	mov	r2, r3
 80019aa:	2129      	movs	r1, #41	; 0x29
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f871 	bl	8001a94 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80019b2:	2201      	movs	r2, #1
 80019b4:	214b      	movs	r1, #75	; 0x4b
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f86c 	bl	8001a94 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	795b      	ldrb	r3, [r3, #5]
 80019c2:	461a      	mov	r2, r3
 80019c4:	2129      	movs	r1, #41	; 0x29
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f864 	bl	8001a94 <u8x8_gpio_call>
}    
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd90      	pop	{r4, r7, pc}

080019d4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	4608      	mov	r0, r1
 80019de:	4611      	mov	r1, r2
 80019e0:	461a      	mov	r2, r3
 80019e2:	4603      	mov	r3, r0
 80019e4:	70fb      	strb	r3, [r7, #3]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70bb      	strb	r3, [r7, #2]
 80019ea:	4613      	mov	r3, r2
 80019ec:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80019f2:	78bb      	ldrb	r3, [r7, #2]
 80019f4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80019f6:	787b      	ldrb	r3, [r7, #1]
 80019f8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689c      	ldr	r4, [r3, #8]
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	2201      	movs	r2, #1
 8001a08:	210f      	movs	r1, #15
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	47a0      	blx	r4
 8001a0e:	4603      	mov	r3, r0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd90      	pop	{r4, r7, pc}

08001a18 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689c      	ldr	r4, [r3, #8]
 8001a24:	2300      	movs	r3, #0
 8001a26:	2200      	movs	r2, #0
 8001a28:	2109      	movs	r1, #9
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	47a0      	blx	r4
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}

08001a36 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8001a36:	b590      	push	{r4, r7, lr}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689c      	ldr	r4, [r3, #8]
 8001a42:	2300      	movs	r3, #0
 8001a44:	2200      	movs	r2, #0
 8001a46:	210a      	movs	r1, #10
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	47a0      	blx	r4
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd90      	pop	{r4, r7, pc}

08001a54 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689c      	ldr	r4, [r3, #8]
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	2300      	movs	r3, #0
 8001a68:	210b      	movs	r1, #11
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	47a0      	blx	r4
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd90      	pop	{r4, r7, pc}

08001a76 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8001a76:	b590      	push	{r4, r7, lr}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689c      	ldr	r4, [r3, #8]
 8001a82:	2300      	movs	r3, #0
 8001a84:	2200      	movs	r2, #0
 8001a86:	2110      	movs	r1, #16
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	47a0      	blx	r4
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}

08001a94 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695c      	ldr	r4, [r3, #20]
 8001aa8:	78ba      	ldrb	r2, [r7, #2]
 8001aaa:	78f9      	ldrb	r1, [r7, #3]
 8001aac:	2300      	movs	r3, #0
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	47a0      	blx	r4
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd90      	pop	{r4, r7, pc}

08001aba <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	72fb      	strb	r3, [r7, #11]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <u8x8_SetupDefaults+0x58>)
 8001aea:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <u8x8_SetupDefaults+0x58>)
 8001af0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <u8x8_SetupDefaults+0x58>)
 8001af6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <u8x8_SetupDefaults+0x58>)
 8001afc:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	22ff      	movs	r2, #255	; 0xff
 8001b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	22ff      	movs	r2, #255	; 0xff
 8001b20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	08001abb 	.word	0x08001abb

08001b34 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f7ff ffc8 	bl	8001ad8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f7ff ff59 	bl	8001a18 <u8x8_SetupMemory>
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	70fb      	strb	r3, [r7, #3]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	741a      	strb	r2, [r3, #16]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	745a      	strb	r2, [r3, #17]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d802      	bhi.n	8001bb0 <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	701a      	strb	r2, [r3, #0]
}
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d031      	beq.n	8001c34 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d826      	bhi.n	8001c26 <_ZN11ChronoTimer8setTimerEm+0x6a>
 8001bd8:	a201      	add	r2, pc, #4	; (adr r2, 8001be0 <_ZN11ChronoTimer8setTimerEm+0x24>)
 8001bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bde:	bf00      	nop
 8001be0:	08001bf1 	.word	0x08001bf1
 8001be4:	08001bf9 	.word	0x08001bf9
 8001be8:	08001c09 	.word	0x08001c09
 8001bec:	08001c19 	.word	0x08001c19
		{
		case MILLIS:
			timeDelay = SetDelay;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
			break;
 8001bf6:	e017      	b.n	8001c28 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bfe:	fb02 f203 	mul.w	r2, r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	605a      	str	r2, [r3, #4]
			break;
 8001c06:	e00f      	b.n	8001c28 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001c0e:	fb02 f203 	mul.w	r2, r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	605a      	str	r2, [r3, #4]
			break;
 8001c16:	e007      	b.n	8001c28 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <_ZN11ChronoTimer8setTimerEm+0x84>)
 8001c1c:	fb02 f203 	mul.w	r2, r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	605a      	str	r2, [r3, #4]
			break;
 8001c24:	e000      	b.n	8001c28 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 8001c26:	bf00      	nop
		}
		isSetted = true;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	609a      	str	r2, [r3, #8]
	}

}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	0036ee80 	.word	0x0036ee80

08001c44 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7c9b      	ldrb	r3, [r3, #18]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00e      	beq.n	8001c72 <_ZN11ChronoTimer10startTimerEv+0x2e>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7c1b      	ldrb	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00a      	beq.n	8001c72 <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 8001c68:	f001 fd44 	bl	80036f4 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60da      	str	r2, [r3, #12]
	}
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
	if(isStarted)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7c5b      	ldrb	r3, [r3, #17]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d008      	beq.n	8001c9c <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
	}
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
	stopTimer();
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffe3 	bl	8001c7a <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ffc5 	bl	8001c44 <_ZN11ChronoTimer10startTimerEv>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f7ff ff6d 	bl	8001bbc <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff ffae 	bl	8001c44 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 8001ce8:	f001 fd04 	bl	80036f4 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	1ad2      	subs	r2, r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	bf2c      	ite	cs
 8001cfc:	2301      	movcs	r3, #1
 8001cfe:	2300      	movcc	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff ffc5 	bl	8001ca6 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <_ZNSt7__cxx119to_stringEi+0x24>)
 8001d3a:	2210      	movs	r2, #16
 8001d3c:	4904      	ldr	r1, [pc, #16]	; (8001d50 <_ZNSt7__cxx119to_stringEi+0x28>)
 8001d3e:	f000 f817 	bl	8001d70 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	080081ec 	.word	0x080081ec
 8001d50:	08007ba5 	.word	0x08007ba5

08001d54 <_ZN10DS1307_RTCC1Ev>:
{
	memset(i2cBuffer, 0x00, BUFFER_LEN);
	i2cBufferIndex = 0;
}

DS1307_RTC::DS1307_RTC()
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8001d70:	b408      	push	{r3}
 8001d72:	b590      	push	{r4, r7, lr}
 8001d74:	b088      	sub	sp, #32
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3307      	adds	r3, #7
 8001d82:	3307      	adds	r3, #7
 8001d84:	08db      	lsrs	r3, r3, #3
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	ebad 0d03 	sub.w	sp, sp, r3
 8001d8c:	466b      	mov	r3, sp
 8001d8e:	3307      	adds	r3, #7
 8001d90:	08db      	lsrs	r3, r3, #3
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8001d96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d9a:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8001d9c:	68bc      	ldr	r4, [r7, #8]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	69f8      	ldr	r0, [r7, #28]
 8001da6:	47a0      	blx	r4
 8001da8:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	18d4      	adds	r4, r2, r3
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4618      	mov	r0, r3
 8001db6:	f005 f9cb 	bl	8007150 <_ZNSaIcEC1Ev>
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	69f9      	ldr	r1, [r7, #28]
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 f837 	bl	8001e36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f005 f9c0 	bl	8007152 <_ZNSaIcED1Ev>
    }
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ddc:	b001      	add	sp, #4
 8001dde:	4770      	bx	lr

08001de0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	2100      	movs	r1, #0
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f005 fbfd 	bl	80075f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f837 	bl	8001e6c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4619      	mov	r1, r3
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f005 faad 	bl	8007362 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f005 fc46 	bl	80076b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f005 fc28 	bl	800767c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8001e2c:	bf00      	nop
    }
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8001e36:	b590      	push	{r4, r7, lr}
 8001e38:	b085      	sub	sp, #20
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8001e44:	68fc      	ldr	r4, [r7, #12]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f005 f9ad 	bl	80071a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	4620      	mov	r0, r4
 8001e54:	f005 fc2a 	bl	80076ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f80f 	bl	8001e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd90      	pop	{r4, r7, pc}

08001e6c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 f804 	bl	8001e9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001e9e:	b590      	push	{r4, r7, lr}
 8001ea0:	b087      	sub	sp, #28
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8001eac:	4623      	mov	r3, r4
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f804 	bl	8001ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}

08001ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001ece:	68b8      	ldr	r0, [r7, #8]
 8001ed0:	f000 f83e 	bl	8001f50 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001eec:	4817      	ldr	r0, [pc, #92]	; (8001f4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8001eee:	f005 f931 	bl	8007154 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	68b8      	ldr	r0, [r7, #8]
 8001ef6:	f000 f843 	bl	8001f80 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001efa:	4603      	mov	r3, r0
 8001efc:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d910      	bls.n	8001f26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f005 f953 	bl	80071b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4619      	mov	r1, r3
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f005 f941 	bl	800719e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f005 f942 	bl	80071aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f005 f93b 	bl	80071a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f005 f99d 	bl	8007272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f005 f936 	bl	80071ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	0800820c 	.word	0x0800820c

08001f50 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf0c      	ite	eq
 8001f5e:	2301      	moveq	r3, #1
 8001f60:	2300      	movne	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001f8a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ffed 	bl	8001f6e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8001f94:	462a      	mov	r2, r5
 8001f96:	6839      	ldr	r1, [r7, #0]
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f000 f805 	bl	8001fa8 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8001f9e:	4603      	mov	r3, r0
    }
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bdb0      	pop	{r4, r5, r7, pc}

08001fa8 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
    }
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:
 */

#include "Display.h"

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	72fb      	strb	r3, [r7, #11]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	72bb      	strb	r3, [r7, #10]
	switch(msg)
 8001fd6:	7afb      	ldrb	r3, [r7, #11]
 8001fd8:	3b28      	subs	r3, #40	; 0x28
 8001fda:	2b2b      	cmp	r3, #43	; 0x2b
 8001fdc:	f200 80a0 	bhi.w	8002120 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x15c>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x24>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	0800212b 	.word	0x0800212b
 8001fec:	080020b3 	.word	0x080020b3
 8001ff0:	0800209d 	.word	0x0800209d
 8001ff4:	08002099 	.word	0x08002099
 8001ff8:	0800212b 	.word	0x0800212b
 8001ffc:	0800212b 	.word	0x0800212b
 8002000:	08002121 	.word	0x08002121
 8002004:	08002121 	.word	0x08002121
 8002008:	08002121 	.word	0x08002121
 800200c:	08002121 	.word	0x08002121
 8002010:	08002121 	.word	0x08002121
 8002014:	08002121 	.word	0x08002121
 8002018:	08002121 	.word	0x08002121
 800201c:	08002121 	.word	0x08002121
 8002020:	08002121 	.word	0x08002121
 8002024:	08002121 	.word	0x08002121
 8002028:	08002121 	.word	0x08002121
 800202c:	08002121 	.word	0x08002121
 8002030:	08002121 	.word	0x08002121
 8002034:	08002121 	.word	0x08002121
 8002038:	08002121 	.word	0x08002121
 800203c:	08002121 	.word	0x08002121
 8002040:	08002121 	.word	0x08002121
 8002044:	08002121 	.word	0x08002121
 8002048:	0800212b 	.word	0x0800212b
 800204c:	0800212b 	.word	0x0800212b
 8002050:	0800212b 	.word	0x0800212b
 8002054:	0800212b 	.word	0x0800212b
 8002058:	0800212b 	.word	0x0800212b
 800205c:	0800212b 	.word	0x0800212b
 8002060:	0800212b 	.word	0x0800212b
 8002064:	0800212b 	.word	0x0800212b
 8002068:	0800212b 	.word	0x0800212b
 800206c:	0800212b 	.word	0x0800212b
 8002070:	080020bd 	.word	0x080020bd
 8002074:	080020db 	.word	0x080020db
 8002078:	0800212b 	.word	0x0800212b
 800207c:	0800212b 	.word	0x0800212b
 8002080:	0800212b 	.word	0x0800212b
 8002084:	0800212b 	.word	0x0800212b
 8002088:	080020f9 	.word	0x080020f9
 800208c:	08002103 	.word	0x08002103
 8002090:	0800210d 	.word	0x0800210d
 8002094:	08002117 	.word	0x08002117
	case U8X8_MSG_GPIO_AND_DELAY_INIT:	// called once during init phase of u8g2/u8x8
		break;							// can be used to setup pins
	case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
		break;
	case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
		__NOP();
 8002098:	bf00      	nop
		break;
 800209a:	e049      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
		//Function which delays 10us
	case U8X8_MSG_DELAY_10MICRO:
		for (uint16_t n = 0; n < 320; n++)
 800209c:	2300      	movs	r3, #0
 800209e:	82fb      	strh	r3, [r7, #22]
 80020a0:	8afb      	ldrh	r3, [r7, #22]
 80020a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020a6:	d242      	bcs.n	800212e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16a>
		{
			__NOP();
 80020a8:	bf00      	nop
		for (uint16_t n = 0; n < 320; n++)
 80020aa:	8afb      	ldrh	r3, [r7, #22]
 80020ac:	3301      	adds	r3, #1
 80020ae:	82fb      	strh	r3, [r7, #22]
 80020b0:	e7f6      	b.n	80020a0 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xdc>
		}
		break;
	case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
		HAL_Delay(arg_int);
 80020b2:	7abb      	ldrb	r3, [r7, #10]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 fb27 	bl	8003708 <HAL_Delay>
		break;
 80020ba:	e039      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
//		{
//			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_SET);
//		}
		break;
	case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
		if(arg_int)
 80020bc:	7abb      	ldrb	r3, [r7, #10]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x10a>
		{
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_SET);
 80020c2:	2201      	movs	r2, #1
 80020c4:	2108      	movs	r1, #8
 80020c6:	481d      	ldr	r0, [pc, #116]	; (800213c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x178>)
 80020c8:	f002 faba 	bl	8004640 <HAL_GPIO_WritePin>
		}
		else
		{
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_RESET);
		}
		break;
 80020cc:	e030      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2108      	movs	r1, #8
 80020d2:	481a      	ldr	r0, [pc, #104]	; (800213c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x178>)
 80020d4:	f002 fab4 	bl	8004640 <HAL_GPIO_WritePin>
		break;
 80020d8:	e02a      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
	case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
		if(arg_int)
 80020da:	7abb      	ldrb	r3, [r7, #10]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x128>
		{
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	2108      	movs	r1, #8
 80020e4:	4815      	ldr	r0, [pc, #84]	; (800213c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x178>)
 80020e6:	f002 faab 	bl	8004640 <HAL_GPIO_WritePin>
		}
		else
		{
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_RESET);
		}
		break;
 80020ea:	e021      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_RESET);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2108      	movs	r1, #8
 80020f0:	4812      	ldr	r0, [pc, #72]	; (800213c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x178>)
 80020f2:	f002 faa5 	bl	8004640 <HAL_GPIO_WritePin>
		break;
 80020f6:	e01b      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
	case U8X8_MSG_GPIO_I2C_CLOCK:		// arg_int=0: Output low at I2C clock pin
		break;							// arg_int=1: Input dir with pullup high for I2C clock pin
	case U8X8_MSG_GPIO_I2C_DATA:			// arg_int=0: Output low at I2C data pin
		break;							// arg_int=1: Input dir with pullup high for I2C data pin
	case U8X8_MSG_GPIO_MENU_SELECT:
		u8x8_SetGPIOResult(u8x8, /* get menu select pin state */ 0);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 8002100:	e016      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
	case U8X8_MSG_GPIO_MENU_NEXT:
		u8x8_SetGPIOResult(u8x8, /* get menu next pin state */ 0);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 800210a:	e011      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
	case U8X8_MSG_GPIO_MENU_PREV:
		u8x8_SetGPIOResult(u8x8, /* get menu prev pin state */ 0);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 8002114:	e00c      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
	case U8X8_MSG_GPIO_MENU_HOME:
		u8x8_SetGPIOResult(u8x8, /* get menu home pin state */ 0);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 800211e:	e007      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
	default:
		u8x8_SetGPIOResult(u8x8, 1);			// default return value
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 8002128:	e002      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
		break;							// can be used to setup pins
 800212a:	bf00      	nop
 800212c:	e000      	b.n	8002130 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x16c>
		break;
 800212e:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 8002130:	2301      	movs	r3, #1
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40010800 	.word	0x40010800

08002140 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	72fb      	strb	r3, [r7, #11]
 800214e:	4613      	mov	r3, r2
 8002150:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002152:	7afb      	ldrb	r3, [r7, #11]
 8002154:	3b14      	subs	r3, #20
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d83d      	bhi.n	80021d6 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x96>
 800215a:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	080021db 	.word	0x080021db
 8002164:	080021d7 	.word	0x080021d7
 8002168:	080021d7 	.word	0x080021d7
 800216c:	080021db 	.word	0x080021db
 8002170:	080021db 	.word	0x080021db
 8002174:	080021b3 	.word	0x080021b3
 8002178:	080021d7 	.word	0x080021d7
 800217c:	080021d7 	.word	0x080021d7
 8002180:	080021d7 	.word	0x080021d7
 8002184:	080021d7 	.word	0x080021d7
 8002188:	080021d7 	.word	0x080021d7
 800218c:	080021d7 	.word	0x080021d7
 8002190:	08002195 	.word	0x08002195
    case U8X8_MSG_BYTE_INIT:
//    	HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_SET); // @suppress("C-Style cast instead of C++ cast")
//      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    case U8X8_MSG_BYTE_SET_DC:
		if(arg_int)
 8002194:	7abb      	ldrb	r3, [r7, #10]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x66>
		{
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_SET);
 800219a:	2201      	movs	r2, #1
 800219c:	2108      	movs	r1, #8
 800219e:	4812      	ldr	r0, [pc, #72]	; (80021e8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xa8>)
 80021a0:	f002 fa4e 	bl	8004640 <HAL_GPIO_WritePin>
		}
		else
		{
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_RESET);
		}
      break;
 80021a4:	e01a      	b.n	80021dc <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x9c>
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2108      	movs	r1, #8
 80021aa:	480f      	ldr	r0, [pc, #60]	; (80021e8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xa8>)
 80021ac:	f002 fa48 	bl	8004640 <HAL_GPIO_WritePin>
      break;
 80021b0:	e014      	b.n	80021dc <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x9c>
//    	HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_RESET); // @suppress("C-Style cast instead of C++ cast")
//      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
//      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
    	HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2108      	movs	r1, #8
 80021b6:	480c      	ldr	r0, [pc, #48]	; (80021e8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xa8>)
 80021b8:	f002 fa42 	bl	8004640 <HAL_GPIO_WritePin>
    	HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 100);
 80021bc:	7abb      	ldrb	r3, [r7, #10]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	2364      	movs	r3, #100	; 0x64
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4809      	ldr	r0, [pc, #36]	; (80021ec <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>)
 80021c6:	f003 fc1b 	bl	8005a00 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	2108      	movs	r1, #8
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xa8>)
 80021d0:	f002 fa36 	bl	8004640 <HAL_GPIO_WritePin>
//      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
//      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
 80021d4:	e002      	b.n	80021dc <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x9c>
    default:
      return 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e001      	b.n	80021de <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x9e>
      break;
 80021da:	bf00      	nop
  }
  return 1;
 80021dc:	2301      	movs	r3, #1
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40010800 	.word	0x40010800
 80021ec:	20000524 	.word	0x20000524

080021f0 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f005 f8aa 	bl	8007354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_ZN13NHDST7565_LCDC1Ehh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Width, uint8_t High)
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	70fb      	strb	r3, [r7, #3]
 8002216:	4613      	mov	r3, r2
 8002218:	70bb      	strb	r3, [r7, #2]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3388      	adds	r3, #136	; 0x88
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ffe6 	bl	80021f0 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
{
//	U8G2_Display = new u8g2_t();
	DispParams.width = Width;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	DispParams.high = High;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	78ba      	ldrb	r2, [r7, #2]
 8002230:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, U8G2_R2, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <_ZN13NHDST7565_LCD8setupLcdEv+0x30>)
 800224c:	4a09      	ldr	r2, [pc, #36]	; (8002274 <_ZN13NHDST7565_LCD8setupLcdEv+0x34>)
 800224e:	490a      	ldr	r1, [pc, #40]	; (8002278 <_ZN13NHDST7565_LCD8setupLcdEv+0x38>)
 8002250:	f7fe f816 	bl	8000280 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fbed 	bl	8001a36 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fbf7 	bl	8001a54 <u8x8_SetPowerSave>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	08001fc5 	.word	0x08001fc5
 8002274:	08002141 	.word	0x08002141
 8002278:	080085f0 	.word	0x080085f0

0800227c <_ZN13NHDST7565_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos, textToWrite.text.c_str());
}


void NHDST7565_LCD::testDisplay(String Text)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
	u8g2_SetFont(&U8G2_Display, u8g2_font_6x12_tn);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	490c      	ldr	r1, [pc, #48]	; (80022bc <_ZN13NHDST7565_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>)
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fd82 	bl	8000d94 <u8g2_SetFont>
	u8g2_ClearBuffer(&U8G2_Display);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fd ff62 	bl	800015c <u8g2_ClearBuffer>
	u8g2_DrawStr(&U8G2_Display, 20, 20, Text.c_str());
 8002298:	687c      	ldr	r4, [r7, #4]
 800229a:	6838      	ldr	r0, [r7, #0]
 800229c:	f005 fa04 	bl	80076a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2214      	movs	r2, #20
 80022a4:	2114      	movs	r1, #20
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7fe fcd6 	bl	8000c58 <u8g2_DrawStr>
//	drawString(Text, CENTER_POS, MIDDLE_POS, u8g2_font_6x12_tn);
	u8g2_SendBuffer(&U8G2_Display);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fd ffc7 	bl	8000242 <u8g2_SendBuffer>
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	08008524 	.word	0x08008524

080022c0 <_ZN12STM32_EEPROMC1Ev>:

void STM32_EEPROM::saveValue(double NewVal)
{
}

STM32_EEPROM::STM32_EEPROM()
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 80022ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022d2:	f004 ff21 	bl	8007118 <_Znaj>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	601a      	str	r2, [r3, #0]
}
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	bool State = false;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	889b      	ldrh	r3, [r3, #4]
 80022fc:	4619      	mov	r1, r3
 80022fe:	4610      	mov	r0, r2
 8002300:	f002 f978 	bl	80045f4 <HAL_GPIO_ReadPin>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf0c      	ite	eq
 800230a:	2301      	moveq	r3, #1
 800230c:	2300      	movne	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	4611      	mov	r1, r2
 800232e:	461a      	mov	r2, r3
 8002330:	460b      	mov	r3, r1
 8002332:	80fb      	strh	r3, [r7, #6]
 8002334:	4613      	mov	r3, r2
 8002336:	80bb      	strh	r3, [r7, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	819a      	strh	r2, [r3, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	88ba      	ldrh	r2, [r7, #4]
 800235a:	819a      	strh	r2, [r3, #12]
}
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 8002370:	2302      	movs	r3, #2
 8002372:	73fb      	strb	r3, [r7, #15]
	bool ButtonState = readPin();
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ffb7 	bl	80022e8 <_ZN6BUTTON7readPinEv>
 800237a:	4603      	mov	r3, r0
 800237c:	73bb      	strb	r3, [r7, #14]
	if(ButtonState)
 800237e:	7bbb      	ldrb	r3, [r7, #14]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d033      	beq.n	80023ec <_ZN6BUTTON11checkButtonEv+0x84>
	{
		longPressDelay = HAL_GetTick();
 8002384:	f001 f9b6 	bl	80036f4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 800238e:	7bbb      	ldrb	r3, [r7, #14]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d018      	beq.n	80023c6 <_ZN6BUTTON11checkButtonEv+0x5e>
		{
			ButtonState = readPin();
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ffa7 	bl	80022e8 <_ZN6BUTTON7readPinEv>
 800239a:	4603      	mov	r3, r0
 800239c:	73bb      	strb	r3, [r7, #14]
			if(HAL_GetTick() - longPressDelay > delay)
 800239e:	f001 f9a9 	bl	80036f4 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	8992      	ldrh	r2, [r2, #12]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	bf8c      	ite	hi
 80023b2:	2301      	movhi	r3, #1
 80023b4:	2300      	movls	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0e8      	beq.n	800238e <_ZN6BUTTON11checkButtonEv+0x26>
			{
				Status = LONG_PRESSED;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
				wasLongPressed = true;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	739a      	strb	r2, [r3, #14]
				break;
			}
		}
		if(!wasLongPressed)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7b9b      	ldrb	r3, [r3, #14]
 80023ca:	f083 0301 	eor.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <_ZN6BUTTON11checkButtonEv+0x72>
		{
			Status = PRESSED;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e002      	b.n	80023e0 <_ZN6BUTTON11checkButtonEv+0x78>
		}
		else
		{
			wasLongPressed = false;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
		HAL_Delay(25);
 80023e6:	2019      	movs	r0, #25
 80023e8:	f001 f98e 	bl	8003708 <HAL_Delay>
	}
	return Status;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 1000);
 8002400:	2010      	movs	r0, #16
 8002402:	f004 fe8b 	bl	800711c <_Znwj>
 8002406:	4603      	mov	r3, r0
 8002408:	461c      	mov	r4, r3
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002412:	491c      	ldr	r1, [pc, #112]	; (8002484 <_ZN8DryerKeyC1Ev+0x8c>)
 8002414:	4620      	mov	r0, r4
 8002416:	f7ff ff84 	bl	8002322 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 1000);
 800241e:	2010      	movs	r0, #16
 8002420:	f004 fe7c 	bl	800711c <_Znwj>
 8002424:	4603      	mov	r3, r0
 8002426:	461c      	mov	r4, r3
 8002428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002430:	4914      	ldr	r1, [pc, #80]	; (8002484 <_ZN8DryerKeyC1Ev+0x8c>)
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff ff75 	bl	8002322 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 1000);
 800243c:	2010      	movs	r0, #16
 800243e:	f004 fe6d 	bl	800711c <_Znwj>
 8002442:	4603      	mov	r3, r0
 8002444:	461c      	mov	r4, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800244e:	490d      	ldr	r1, [pc, #52]	; (8002484 <_ZN8DryerKeyC1Ev+0x8c>)
 8002450:	4620      	mov	r0, r4
 8002452:	f7ff ff66 	bl	8002322 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 1000);
 800245a:	2010      	movs	r0, #16
 800245c:	f004 fe5e 	bl	800711c <_Znwj>
 8002460:	4603      	mov	r3, r0
 8002462:	461c      	mov	r4, r3
 8002464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002468:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800246c:	4905      	ldr	r1, [pc, #20]	; (8002484 <_ZN8DryerKeyC1Ev+0x8c>)
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff ff57 	bl	8002322 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	60dc      	str	r4, [r3, #12]
}
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bd90      	pop	{r4, r7, pc}
 8002482:	bf00      	nop
 8002484:	40010c00 	.word	0x40010c00

08002488 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8002490:	2308      	movs	r3, #8
 8002492:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b03      	cmp	r3, #3
 800249c:	dc1d      	bgt.n	80024da <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff5e 	bl	8002368 <_ZN6BUTTON11checkButtonEv>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	75fb      	strb	r3, [r7, #23]
 80024ba:	e006      	b.n	80024ca <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d103      	bne.n	80024ca <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	3304      	adds	r3, #4
 80024c8:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d103      	bne.n	80024d8 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	3301      	adds	r3, #1
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	e7df      	b.n	8002498 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 80024d8:	bf00      	nop
		}
	}
	return KeyPressed;
 80024da:	7dfb      	ldrb	r3, [r7, #23]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <_ZN4RELE6setPinE9PIN_STATE+0x20>
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d003      	beq.n	8002504 <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	719a      	strb	r2, [r3, #6]
 8002502:	e007      	b.n	8002514 <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	799b      	ldrb	r3, [r3, #6]
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	429a      	cmp	r2, r3
 800250c:	d002      	beq.n	8002514 <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8899      	ldrh	r1, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	799b      	ldrb	r3, [r3, #6]
 8002520:	461a      	mov	r2, r3
 8002522:	f002 f88d 	bl	8004640 <HAL_GPIO_WritePin>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 800252e:	b480      	push	{r7}
 8002530:	b085      	sub	sp, #20
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	4611      	mov	r1, r2
 800253a:	461a      	mov	r2, r3
 800253c:	460b      	mov	r3, r1
 800253e:	80fb      	strh	r3, [r7, #6]
 8002540:	4613      	mov	r3, r2
 8002542:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	88fa      	ldrh	r2, [r7, #6]
 800254e:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	797a      	ldrb	r2, [r7, #5]
 8002554:	719a      	strb	r2, [r3, #6]

}
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr

08002562 <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	4619      	mov	r1, r3
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffb6 	bl	80024e4 <_ZN4RELE6setPinE9PIN_STATE>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_ZN11SerialDebug11writeSerialEv>:
//{
//	RxReady = true;
//}

void SerialDebug::writeSerial()
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	f004 ff2e 	bl	80073ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002590:	4603      	mov	r3, r0
 8002592:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4618      	mov	r0, r3
 8002598:	f005 f886 	bl	80076a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800259c:	4601      	mov	r1, r0
 800259e:	89fa      	ldrh	r2, [r7, #14]
 80025a0:	2364      	movs	r3, #100	; 0x64
 80025a2:	4803      	ldr	r0, [pc, #12]	; (80025b0 <_ZN11SerialDebug11writeSerialEv+0x30>)
 80025a4:	f004 f8e0 	bl	8006768 <HAL_UART_Transmit>
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200005bc 	.word	0x200005bc

080025b4 <_ZN11SerialDebugC1Ev>:


SerialDebug::SerialDebug()
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	f004 fec8 	bl	8007354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2020 	strb.w	r2, [r3, #32]
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
}
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void SerialDebug::sendDbgStr(std::string DbgStr)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	if(!DbgStr.empty())
 80025e2:	6838      	ldr	r0, [r7, #0]
 80025e4:	f004 ff35 	bl	8007452 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
	{
		serialBuffer = DbgStr + "\n";
 80025f4:	687c      	ldr	r4, [r7, #4]
 80025f6:	f107 0308 	add.w	r3, r7, #8
 80025fa:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 80025fc:	6839      	ldr	r1, [r7, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fc06 	bl	8001e10 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8002604:	f107 0308 	add.w	r3, r7, #8
 8002608:	4619      	mov	r1, r3
 800260a:	4620      	mov	r0, r4
 800260c:	f004 fec9 	bl	80073a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8002610:	f107 0308 	add.w	r3, r7, #8
 8002614:	4618      	mov	r0, r3
 8002616:	f004 febe 	bl	8007396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800261a:	e004      	b.n	8002626 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4906      	ldr	r1, [pc, #24]	; (8002638 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>)
 8002620:	4618      	mov	r0, r3
 8002622:	f004 ffc8 	bl	80075b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	}
	writeSerial();
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ffaa 	bl	8002580 <_ZN11SerialDebug11writeSerialEv>
}
 800262c:	bf00      	nop
 800262e:	3724      	adds	r7, #36	; 0x24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	08008238 	.word	0x08008238
 8002638:	0800823c 	.word	0x0800823c

0800263c <_ZN11SerialDebug12readSerialITEPh>:

bool SerialDebug::readSerialIT(uint8_t *Data)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
	bool Ready = false;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
//	if(RxReady)
//	{
		Ready = true;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 100);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f103 011a 	add.w	r1, r3, #26
 8002654:	2364      	movs	r3, #100	; 0x64
 8002656:	2206      	movs	r2, #6
 8002658:	480a      	ldr	r0, [pc, #40]	; (8002684 <_ZN11SerialDebug12readSerialITEPh+0x48>)
 800265a:	f004 f91e 	bl	800689a <HAL_UART_Receive>
		memcpy(Data, rxBuffer, RECEIVE_BUFFER_LEN);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	331a      	adds	r3, #26
 8002662:	2206      	movs	r2, #6
 8002664:	4619      	mov	r1, r3
 8002666:	6838      	ldr	r0, [r7, #0]
 8002668:	f005 f94a 	bl	8007900 <memcpy>
		memset(rxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	331a      	adds	r3, #26
 8002670:	2206      	movs	r2, #6
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f005 f967 	bl	8007948 <memset>
//		RxReady = false;
//	}
	return Ready;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200005bc 	.word	0x200005bc

08002688 <_ZNSt11char_traitsIcE6lengthEPKc>:
	  return 0;
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus > 201402
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7fd fd5b 	bl	800014c <strlen>
 8002696:	4603      	mov	r3, r0
      }
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2020 	strb.w	r2, [r3, #32]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <_ZN10SmartDryerC1Ev>:

#include <SmartDryer.h>

#define TOLLERANCE_DEGREES	55

SmartDryer::SmartDryer()
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
{
	display = new NHDST7565_LCD(128, 64);
 80026cc:	20a8      	movs	r0, #168	; 0xa8
 80026ce:	f004 fd25 	bl	800711c <_Znwj>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461c      	mov	r4, r3
 80026d6:	2240      	movs	r2, #64	; 0x40
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	4620      	mov	r0, r4
 80026dc:	f7ff fd95 	bl	800220a <_ZN13NHDST7565_LCDC1Ehh>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	601c      	str	r4, [r3, #0]
	clock = new DS1307_RTC();
 80026e4:	2021      	movs	r0, #33	; 0x21
 80026e6:	f004 fd19 	bl	800711c <_Znwj>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461c      	mov	r4, r3
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7ff fb30 	bl	8001d54 <_ZN10DS1307_RTCC1Ev>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	605c      	str	r4, [r3, #4]
	keyboard = new DryerKey();
 80026f8:	2010      	movs	r0, #16
 80026fa:	f004 fd0f 	bl	800711c <_Znwj>
 80026fe:	4603      	mov	r3, r0
 8002700:	461c      	mov	r4, r3
 8002702:	4620      	mov	r0, r4
 8002704:	f7ff fe78 	bl	80023f8 <_ZN8DryerKeyC1Ev>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 800270c:	2021      	movs	r0, #33	; 0x21
 800270e:	f004 fd05 	bl	800711c <_Znwj>
 8002712:	4603      	mov	r3, r0
 8002714:	461c      	mov	r4, r3
 8002716:	4620      	mov	r0, r4
 8002718:	2321      	movs	r3, #33	; 0x21
 800271a:	461a      	mov	r2, r3
 800271c:	2100      	movs	r1, #0
 800271e:	f005 f913 	bl	8007948 <memset>
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff ffbc 	bl	80026a0 <_ZN13THERMO_SENSORC1Ev>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 800272c:	2008      	movs	r0, #8
 800272e:	f004 fcf5 	bl	800711c <_Znwj>
 8002732:	4603      	mov	r3, r0
 8002734:	461c      	mov	r4, r3
 8002736:	2300      	movs	r3, #0
 8002738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800273c:	492c      	ldr	r1, [pc, #176]	; (80027f0 <_ZN10SmartDryerC1Ev+0x134>)
 800273e:	4620      	mov	r0, r4
 8002740:	f7ff fef5 	bl	800252e <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 8002748:	2008      	movs	r0, #8
 800274a:	f004 fce7 	bl	800711c <_Znwj>
 800274e:	4603      	mov	r3, r0
 8002750:	461c      	mov	r4, r3
 8002752:	2300      	movs	r3, #0
 8002754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002758:	4925      	ldr	r1, [pc, #148]	; (80027f0 <_ZN10SmartDryerC1Ev+0x134>)
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff fee7 	bl	800252e <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 8002764:	2008      	movs	r0, #8
 8002766:	f004 fcd9 	bl	800711c <_Znwj>
 800276a:	4603      	mov	r3, r0
 800276c:	461c      	mov	r4, r3
 800276e:	4620      	mov	r0, r4
 8002770:	f7ff fda6 	bl	80022c0 <_ZN12STM32_EEPROMC1Ev>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::SECONDS);
 8002778:	2014      	movs	r0, #20
 800277a:	f004 fccf 	bl	800711c <_Znwj>
 800277e:	4603      	mov	r3, r0
 8002780:	461c      	mov	r4, r3
 8002782:	2101      	movs	r1, #1
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff f9f2 	bl	8001b6e <_ZN11ChronoTimerC1Eh>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800278e:	2014      	movs	r0, #20
 8002790:	f004 fcc4 	bl	800711c <_Znwj>
 8002794:	4603      	mov	r3, r0
 8002796:	461c      	mov	r4, r3
 8002798:	2100      	movs	r1, #0
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff f9e7 	bl	8001b6e <_ZN11ChronoTimerC1Eh>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80027a4:	2014      	movs	r0, #20
 80027a6:	f004 fcb9 	bl	800711c <_Znwj>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461c      	mov	r4, r3
 80027ae:	2100      	movs	r1, #0
 80027b0:	4620      	mov	r0, r4
 80027b2:	f7ff f9dc 	bl	8001b6e <_ZN11ChronoTimerC1Eh>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	625c      	str	r4, [r3, #36]	; 0x24

	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80027ba:	2014      	movs	r0, #20
 80027bc:	f004 fcae 	bl	800711c <_Znwj>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461c      	mov	r4, r3
 80027c4:	2100      	movs	r1, #0
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7ff f9d1 	bl	8001b6e <_ZN11ChronoTimerC1Eh>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629c      	str	r4, [r3, #40]	; 0x28

	dbgDryer = new SerialDebug();
 80027d0:	2024      	movs	r0, #36	; 0x24
 80027d2:	f004 fca3 	bl	800711c <_Znwj>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461c      	mov	r4, r3
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff feea 	bl	80025b4 <_ZN11SerialDebugC1Ev>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	62dc      	str	r4, [r3, #44]	; 0x2c

}
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd90      	pop	{r4, r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40010800 	.word	0x40010800

080027f4 <_ZN10SmartDryer8blinkLedEht>:


void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	70fb      	strb	r3, [r7, #3]
 8002800:	4613      	mov	r3, r2
 8002802:	803b      	strh	r3, [r7, #0]
//	GPIO_TypeDef *LedPort;
//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 8002804:	883b      	ldrh	r3, [r7, #0]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d801      	bhi.n	800280e <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 800280a:	2302      	movs	r3, #2
 800280c:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <_ZN10SmartDryer8blinkLedEht+0x26>
 8002814:	2b01      	cmp	r3, #1
 8002816:	d010      	beq.n	800283a <_ZN10SmartDryer8blinkLedEht+0x46>
		}
//		LedPort = GreenLed_GPIO_Port;
//		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 8002818:	e022      	b.n	8002860 <_ZN10SmartDryer8blinkLedEht+0x6c>
		if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	883a      	ldrh	r2, [r7, #0]
 8002820:	2101      	movs	r1, #1
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fa4d 	bl	8001cc2 <_ZN11ChronoTimer10isFinishedEbm>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d015      	beq.n	800285a <_ZN10SmartDryer8blinkLedEht+0x66>
			toggleLed(WichLed);
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	4619      	mov	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f818 	bl	8002868 <_ZN10SmartDryer9toggleLedEh>
		break;
 8002838:	e00f      	b.n	800285a <_ZN10SmartDryer8blinkLedEht+0x66>
		if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	883a      	ldrh	r2, [r7, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fa3d 	bl	8001cc2 <_ZN11ChronoTimer10isFinishedEbm>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <_ZN10SmartDryer8blinkLedEht+0x6a>
			toggleLed(WichLed);
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f808 	bl	8002868 <_ZN10SmartDryer9toggleLedEh>
		break;
 8002858:	e001      	b.n	800285e <_ZN10SmartDryer8blinkLedEht+0x6a>
		break;
 800285a:	bf00      	nop
 800285c:	e000      	b.n	8002860 <_ZN10SmartDryer8blinkLedEht+0x6c>
		break;
 800285e:	bf00      	nop
	}

}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <_ZN10SmartDryer9toggleLedEh+0x1c>
 800287e:	2b01      	cmp	r3, #1
 8002880:	d006      	beq.n	8002890 <_ZN10SmartDryer9toggleLedEh+0x28>
	case GREEN_LED:
		LedPort = GreenLed_GPIO_Port;
		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 8002882:	e00b      	b.n	800289c <_ZN10SmartDryer9toggleLedEh+0x34>
		LedPort = RedLed_GPIO_Port;
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <_ZN10SmartDryer9toggleLedEh+0x48>)
 8002886:	60fb      	str	r3, [r7, #12]
		LedPin = RedLed_Pin;
 8002888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800288c:	817b      	strh	r3, [r7, #10]
		break;
 800288e:	e005      	b.n	800289c <_ZN10SmartDryer9toggleLedEh+0x34>
		LedPort = GreenLed_GPIO_Port;
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <_ZN10SmartDryer9toggleLedEh+0x48>)
 8002892:	60fb      	str	r3, [r7, #12]
		LedPin = GreenLed_Pin;
 8002894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002898:	817b      	strh	r3, [r7, #10]
		break;
 800289a:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 800289c:	897b      	ldrh	r3, [r7, #10]
 800289e:	4619      	mov	r1, r3
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f001 feff 	bl	80046a4 <HAL_GPIO_TogglePin>
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40010800 	.word	0x40010800

080028b4 <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <_ZN10SmartDryer9turnOnLedEh+0x1c>
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d006      	beq.n	80028dc <_ZN10SmartDryer9turnOnLedEh+0x28>
	case GREEN_LED:
		LedPort = GreenLed_GPIO_Port;
		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 80028ce:	e00b      	b.n	80028e8 <_ZN10SmartDryer9turnOnLedEh+0x34>
		LedPort = RedLed_GPIO_Port;
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <_ZN10SmartDryer9turnOnLedEh+0x48>)
 80028d2:	60fb      	str	r3, [r7, #12]
		LedPin = RedLed_Pin;
 80028d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028d8:	817b      	strh	r3, [r7, #10]
		break;
 80028da:	e005      	b.n	80028e8 <_ZN10SmartDryer9turnOnLedEh+0x34>
		LedPort = GreenLed_GPIO_Port;
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <_ZN10SmartDryer9turnOnLedEh+0x48>)
 80028de:	60fb      	str	r3, [r7, #12]
		LedPin = GreenLed_Pin;
 80028e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e4:	817b      	strh	r3, [r7, #10]
		break;
 80028e6:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 80028e8:	897b      	ldrh	r3, [r7, #10]
 80028ea:	2201      	movs	r2, #1
 80028ec:	4619      	mov	r1, r3
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f001 fea6 	bl	8004640 <HAL_GPIO_WritePin>
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40010800 	.word	0x40010800

08002900 <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <_ZN10SmartDryer10turnOffLedEh+0x1c>
 8002916:	2b01      	cmp	r3, #1
 8002918:	d006      	beq.n	8002928 <_ZN10SmartDryer10turnOffLedEh+0x28>
	case GREEN_LED:
		LedPort = GreenLed_GPIO_Port;
		LedPin = GreenLed_Pin;
		break;
	default:
		break;
 800291a:	e00b      	b.n	8002934 <_ZN10SmartDryer10turnOffLedEh+0x34>
		LedPort = RedLed_GPIO_Port;
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 800291e:	60fb      	str	r3, [r7, #12]
		LedPin = RedLed_Pin;
 8002920:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002924:	817b      	strh	r3, [r7, #10]
		break;
 8002926:	e005      	b.n	8002934 <_ZN10SmartDryer10turnOffLedEh+0x34>
		LedPort = GreenLed_GPIO_Port;
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 800292a:	60fb      	str	r3, [r7, #12]
		LedPin = GreenLed_Pin;
 800292c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002930:	817b      	strh	r3, [r7, #10]
		break;
 8002932:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 8002934:	897b      	ldrh	r3, [r7, #10]
 8002936:	2200      	movs	r2, #0
 8002938:	4619      	mov	r1, r3
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f001 fe80 	bl	8004640 <HAL_GPIO_WritePin>
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40010800 	.word	0x40010800

0800294c <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002958:	2b03      	cmp	r3, #3
 800295a:	d031      	beq.n	80029c0 <_ZN10SmartDryer10ledControlEv+0x74>
 800295c:	2b03      	cmp	r3, #3
 800295e:	dc06      	bgt.n	800296e <_ZN10SmartDryer10ledControlEv+0x22>
 8002960:	2b01      	cmp	r3, #1
 8002962:	d019      	beq.n	8002998 <_ZN10SmartDryer10ledControlEv+0x4c>
 8002964:	2b01      	cmp	r3, #1
 8002966:	dc22      	bgt.n	80029ae <_ZN10SmartDryer10ledControlEv+0x62>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00b      	beq.n	8002984 <_ZN10SmartDryer10ledControlEv+0x38>
 800296c:	e06a      	b.n	8002a44 <_ZN10SmartDryer10ledControlEv+0xf8>
 800296e:	f240 12f5 	movw	r2, #501	; 0x1f5
 8002972:	4293      	cmp	r3, r2
 8002974:	d038      	beq.n	80029e8 <_ZN10SmartDryer10ledControlEv+0x9c>
 8002976:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800297a:	d04c      	beq.n	8002a16 <_ZN10SmartDryer10ledControlEv+0xca>
 800297c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002980:	d02a      	beq.n	80029d8 <_ZN10SmartDryer10ledControlEv+0x8c>
 8002982:	e05f      	b.n	8002a44 <_ZN10SmartDryer10ledControlEv+0xf8>
	{
	case THERMO_ON_FAN_OFF:
		blinkLed(RED_LED, 10);
 8002984:	220a      	movs	r2, #10
 8002986:	2100      	movs	r1, #0
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ff33 	bl	80027f4 <_ZN10SmartDryer8blinkLedEht>
		turnOffLed(GREEN_LED);
 800298e:	2101      	movs	r1, #1
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ffb5 	bl	8002900 <_ZN10SmartDryer10turnOffLedEh>
		break;
 8002996:	e063      	b.n	8002a60 <_ZN10SmartDryer10ledControlEv+0x114>
	case THERMO_OFF_FAN_ON:
		turnOffLed(RED_LED);
 8002998:	2100      	movs	r1, #0
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ffb0 	bl	8002900 <_ZN10SmartDryer10turnOffLedEh>
		blinkLed(GREEN_LED, 500);
 80029a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029a4:	2101      	movs	r1, #1
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff ff24 	bl	80027f4 <_ZN10SmartDryer8blinkLedEht>
		break;
 80029ac:	e058      	b.n	8002a60 <_ZN10SmartDryer10ledControlEv+0x114>
	case THERMO_OFF_FAN_OFF:
		turnOffLed(GREEN_LED);
 80029ae:	2101      	movs	r1, #1
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ffa5 	bl	8002900 <_ZN10SmartDryer10turnOffLedEh>
		turnOffLed(RED_LED);
 80029b6:	2100      	movs	r1, #0
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ffa1 	bl	8002900 <_ZN10SmartDryer10turnOffLedEh>
		break;
 80029be:	e04f      	b.n	8002a60 <_ZN10SmartDryer10ledControlEv+0x114>
	case THERMO_ON_FAN_ON:
		blinkLed(RED_LED, 10);
 80029c0:	220a      	movs	r2, #10
 80029c2:	2100      	movs	r1, #0
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ff15 	bl	80027f4 <_ZN10SmartDryer8blinkLedEht>
		blinkLed(GREEN_LED, 500);
 80029ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029ce:	2101      	movs	r1, #1
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ff0f 	bl	80027f4 <_ZN10SmartDryer8blinkLedEht>
		break;
 80029d6:	e043      	b.n	8002a60 <_ZN10SmartDryer10ledControlEv+0x114>
	case TEMP_REACHED:
		turnOnLed(RED_LED);
 80029d8:	2100      	movs	r1, #0
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff6a 	bl	80028b4 <_ZN10SmartDryer9turnOnLedEh>
		HAL_Delay(250);
 80029e0:	20fa      	movs	r0, #250	; 0xfa
 80029e2:	f000 fe91 	bl	8003708 <HAL_Delay>
		break;
 80029e6:	e03b      	b.n	8002a60 <_ZN10SmartDryer10ledControlEv+0x114>
	case PROGRAM_INIT:
		for(int i = 0; i < 50*10; i++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029f2:	da32      	bge.n	8002a5a <_ZN10SmartDryer10ledControlEv+0x10e>
		{
			blinkLed(RED_LED, 50);
 80029f4:	2232      	movs	r2, #50	; 0x32
 80029f6:	2100      	movs	r1, #0
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff fefb 	bl	80027f4 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 50);
 80029fe:	2232      	movs	r2, #50	; 0x32
 8002a00:	2101      	movs	r1, #1
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff fef6 	bl	80027f4 <_ZN10SmartDryer8blinkLedEht>
			HAL_Delay(1);
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f000 fe7d 	bl	8003708 <HAL_Delay>
		for(int i = 0; i < 50*10; i++)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3301      	adds	r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e7ea      	b.n	80029ec <_ZN10SmartDryer10ledControlEv+0xa0>
		};
		break;
	case PROGRAM_END:
		for(int i = 0; i < 50*20; i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a20:	da1d      	bge.n	8002a5e <_ZN10SmartDryer10ledControlEv+0x112>
		{
			blinkLed(RED_LED, 50);
 8002a22:	2232      	movs	r2, #50	; 0x32
 8002a24:	2100      	movs	r1, #0
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff fee4 	bl	80027f4 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 50);
 8002a2c:	2232      	movs	r2, #50	; 0x32
 8002a2e:	2101      	movs	r1, #1
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fedf 	bl	80027f4 <_ZN10SmartDryer8blinkLedEht>
			HAL_Delay(1);
 8002a36:	2001      	movs	r0, #1
 8002a38:	f000 fe66 	bl	8003708 <HAL_Delay>
		for(int i = 0; i < 50*20; i++)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	e7ea      	b.n	8002a1a <_ZN10SmartDryer10ledControlEv+0xce>
		};
		break;
	case UNKNOWN_STATE:
	default:
		blinkLed(RED_LED, 5);
 8002a44:	2205      	movs	r2, #5
 8002a46:	2100      	movs	r1, #0
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff fed3 	bl	80027f4 <_ZN10SmartDryer8blinkLedEht>
		blinkLed(GREEN_LED, 5);
 8002a4e:	2205      	movs	r2, #5
 8002a50:	2101      	movs	r1, #1
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff fece 	bl	80027f4 <_ZN10SmartDryer8blinkLedEht>
		break;
 8002a58:	e002      	b.n	8002a60 <_ZN10SmartDryer10ledControlEv+0x114>
		break;
 8002a5a:	bf00      	nop
 8002a5c:	e000      	b.n	8002a60 <_ZN10SmartDryer10ledControlEv+0x114>
		break;
 8002a5e:	bf00      	nop
	}
}
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_ZN10SmartDryer16physicalReleCtrlEv>:
		ledStatus = THERMO_OFF_FAN_OFF;
	}
}

void SmartDryer::physicalReleCtrl()
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	if(statusFlags.fanOn)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <_ZN10SmartDryer16physicalReleCtrlEv+0x20>
	{
		fanCtrl->setState(HIGH);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2101      	movs	r1, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fd6e 	bl	8002562 <_ZN4RELE8setStateE9PIN_STATE>
 8002a86:	e005      	b.n	8002a94 <_ZN10SmartDryer16physicalReleCtrlEv+0x2c>
	}
	else
	{
		fanCtrl->setState(LOW);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fd67 	bl	8002562 <_ZN4RELE8setStateE9PIN_STATE>
	}
	if(statusFlags.thermoOn)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <_ZN10SmartDryer16physicalReleCtrlEv+0x44>
	{
		thermoCtrl->setState(HIGH);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fd5c 	bl	8002562 <_ZN4RELE8setStateE9PIN_STATE>
	}
	else
	{
		thermoCtrl->setState(LOW);
	}
}
 8002aaa:	e005      	b.n	8002ab8 <_ZN10SmartDryer16physicalReleCtrlEv+0x50>
		thermoCtrl->setState(LOW);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fd55 	bl	8002562 <_ZN4RELE8setStateE9PIN_STATE>
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZN10SmartDryer4testEv>:

void SmartDryer::test()
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b0a7      	sub	sp, #156	; 0x9c
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	testTimer->setTimer(5000);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002acc:	f241 3188 	movw	r1, #5000	; 0x1388
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff f873 	bl	8001bbc <_ZN11ChronoTimer8setTimerEm>

	display->setupLcd();
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fbb0 	bl	8002240 <_ZN13NHDST7565_LCD8setupLcdEv>

	while(1)
	{
		  uint8_t WichKey = DryerKey::NO_KEY, TestKey = 0;
 8002ae0:	2308      	movs	r3, #8
 8002ae2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		  char SerialData[RECEIVE_BUFFER_LEN] = {0};
 8002aec:	f107 0320 	add.w	r3, r7, #32
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	809a      	strh	r2, [r3, #4]

		  dbgDryer->readSerialIT((uint8_t *)SerialData);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	f107 0220 	add.w	r2, r7, #32
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fd9b 	bl	800263c <_ZN11SerialDebug12readSerialITEPh>
		  if(SerialData[5] != 0)
 8002b06:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d044      	beq.n	8002b98 <_ZN10SmartDryer4testEv+0xd8>
		  {
			  std::string Rec = "";
 8002b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b12:	4618      	mov	r0, r3
 8002b14:	f004 fb1c 	bl	8007150 <_ZNSaIcEC1Ev>
 8002b18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b1c:	f107 0308 	add.w	r3, r7, #8
 8002b20:	496d      	ldr	r1, [pc, #436]	; (8002cd8 <_ZN10SmartDryer4testEv+0x218>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 fdf6 	bl	8007714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f004 fb10 	bl	8007152 <_ZNSaIcED1Ev>
			  for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	dc11      	bgt.n	8002b64 <_ZN10SmartDryer4testEv+0xa4>
				  Rec += SerialData[i];
 8002b40:	f107 0220 	add.w	r2, r7, #32
 8002b44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b48:	4413      	add	r3, r2
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	f107 0308 	add.w	r3, r7, #8
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 fca0 	bl	8007498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
			  for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8002b58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b62:	e7e9      	b.n	8002b38 <_ZN10SmartDryer4testEv+0x78>
			  dbgDryer->sendDbgStr("Ricevuto: " + Rec);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b6c:	f107 0208 	add.w	r2, r7, #8
 8002b70:	495a      	ldr	r1, [pc, #360]	; (8002cdc <_ZN10SmartDryer4testEv+0x21c>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f8bd 	bl	8002cf2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8002b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f7ff fd2a 	bl	80025d8 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f004 fc04 	bl	8007396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			  std::string Rec = "";
 8002b8e:	f107 0308 	add.w	r3, r7, #8
 8002b92:	4618      	mov	r0, r3
 8002b94:	f004 fbff 	bl	8007396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		  }

		  WichKey = keyboard->checkKey();
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fc73 	bl	8002488 <_ZN8DryerKey8checkKeyEv>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		  switch(WichKey)
 8002ba8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002bac:	2b07      	cmp	r3, #7
 8002bae:	d833      	bhi.n	8002c18 <_ZN10SmartDryer4testEv+0x158>
 8002bb0:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <_ZN10SmartDryer4testEv+0xf8>)
 8002bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb6:	bf00      	nop
 8002bb8:	08002bd9 	.word	0x08002bd9
 8002bbc:	08002be1 	.word	0x08002be1
 8002bc0:	08002be9 	.word	0x08002be9
 8002bc4:	08002bf1 	.word	0x08002bf1
 8002bc8:	08002bf9 	.word	0x08002bf9
 8002bcc:	08002c01 	.word	0x08002c01
 8002bd0:	08002c09 	.word	0x08002c09
 8002bd4:	08002c11 	.word	0x08002c11
		  {
		  case DryerKey::UP_KEY:
			  TestKey = 1;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  break;
 8002bde:	e01c      	b.n	8002c1a <_ZN10SmartDryer4testEv+0x15a>
		  case DryerKey::DOWN_KEY:
			  TestKey = 2;
 8002be0:	2302      	movs	r3, #2
 8002be2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  break;
 8002be6:	e018      	b.n	8002c1a <_ZN10SmartDryer4testEv+0x15a>
		  case DryerKey::LEFT_KEY:
			  TestKey = 3;
 8002be8:	2303      	movs	r3, #3
 8002bea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  break;
 8002bee:	e014      	b.n	8002c1a <_ZN10SmartDryer4testEv+0x15a>
		  case DryerKey::OK_KEY:
			  TestKey = 4;
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  break;
 8002bf6:	e010      	b.n	8002c1a <_ZN10SmartDryer4testEv+0x15a>
		  case DryerKey::LONG_UP_KEY:
			  TestKey = 5;
 8002bf8:	2305      	movs	r3, #5
 8002bfa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  break;
 8002bfe:	e00c      	b.n	8002c1a <_ZN10SmartDryer4testEv+0x15a>
		  case DryerKey::LONG_DOWN_KEY:
			  TestKey = 6;
 8002c00:	2306      	movs	r3, #6
 8002c02:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  break;
 8002c06:	e008      	b.n	8002c1a <_ZN10SmartDryer4testEv+0x15a>
		  case DryerKey::LONG_LEFT_KEY:
			  TestKey = 7;
 8002c08:	2307      	movs	r3, #7
 8002c0a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  break;
 8002c0e:	e004      	b.n	8002c1a <_ZN10SmartDryer4testEv+0x15a>
		  case DryerKey::LONG_OK_KEY:
			  TestKey = 8;
 8002c10:	2308      	movs	r3, #8
 8002c12:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  break;
 8002c16:	e000      	b.n	8002c1a <_ZN10SmartDryer4testEv+0x15a>
		  default:
			  break;
 8002c18:	bf00      	nop
		  }
		  if(TestKey != 0)
 8002c1a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d021      	beq.n	8002c66 <_ZN10SmartDryer4testEv+0x1a6>
		  {
			  dbgDryer->sendDbgStr("Il tasto premuto vale " + std::to_string(TestKey));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002c26:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8002c2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff f879 	bl	8001d28 <_ZNSt7__cxx119to_stringEi>
 8002c36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c3a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c3e:	4928      	ldr	r1, [pc, #160]	; (8002ce0 <_ZN10SmartDryer4testEv+0x220>)
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f8cd 	bl	8001de0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8002c46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f7ff fcc3 	bl	80025d8 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002c52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c56:	4618      	mov	r0, r3
 8002c58:	f004 fb9d 	bl	8007396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002c5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 fb98 	bl	8007396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

//		  if(testTimer->isFinished(true, 2000))
//		  {
//			  dbgDryer->sendDbgStr(clock->getTimeDateStr(DS1307_RTC::ONLY_TIME));
//		  }
		  physicalReleCtrl();
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff fefe 	bl	8002a68 <_ZN10SmartDryer16physicalReleCtrlEv>

		  if(testTimer->isFinished(true))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	2200      	movs	r2, #0
 8002c72:	2101      	movs	r1, #1
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff f824 	bl	8001cc2 <_ZN11ChronoTimer10isFinishedEbm>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <_ZN10SmartDryer4testEv+0x1ca>
		  {
			  ledStatus = PROGRAM_END;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8002c86:	865a      	strh	r2, [r3, #50]	; 0x32
 8002c88:	e002      	b.n	8002c90 <_ZN10SmartDryer4testEv+0x1d0>
		  }
		  else
		  {
			  ledStatus = THERMO_ON_FAN_OFF;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	865a      	strh	r2, [r3, #50]	; 0x32
		  }
		  ledControl();
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff fe5b 	bl	800294c <_ZN10SmartDryer10ledControlEv>

		  display->testDisplay("Test");
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681c      	ldr	r4, [r3, #0]
 8002c9a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 fa56 	bl	8007150 <_ZNSaIcEC1Ev>
 8002ca4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002ca8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cac:	490d      	ldr	r1, [pc, #52]	; (8002ce4 <_ZN10SmartDryer4testEv+0x224>)
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 fd30 	bl	8007714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002cb4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff fade 	bl	800227c <_ZN13NHDST7565_LCD11testDisplayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002cc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 fb66 	bl	8007396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002cca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f004 fa3f 	bl	8007152 <_ZNSaIcED1Ev>
	}
 8002cd4:	e704      	b.n	8002ae0 <_ZN10SmartDryer4testEv+0x20>
 8002cd6:	bf00      	nop
 8002cd8:	0800825c 	.word	0x0800825c
 8002cdc:	08008260 	.word	0x08008260
 8002ce0:	0800826c 	.word	0x0800826c
 8002ce4:	08008284 	.word	0x08008284

08002ce8 <_ZN10SmartDryer3runEv>:
}

void SmartDryer::run()
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	while(1)
 8002cf0:	e7fe      	b.n	8002cf0 <_ZN10SmartDryer3runEv+0x8>

08002cf2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 8002cfe:	68b8      	ldr	r0, [r7, #8]
 8002d00:	f7ff fcc2 	bl	8002688 <_ZNSt11char_traitsIcE6lengthEPKc>
 8002d04:	6178      	str	r0, [r7, #20]
      __string_type __str;
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f004 fb24 	bl	8007354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      __str.reserve(__len + __rhs.size());
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f004 fb6d 	bl	80073ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002d12:	4602      	mov	r2, r0
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	4413      	add	r3, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f004 fb68 	bl	80073f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f004 fc99 	bl	800765c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f004 fc8f 	bl	8007650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8002d32:	bf00      	nop
    }
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002d4c:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <MX_ADC1_Init+0x74>)
 8002d4e:	4a19      	ldr	r2, [pc, #100]	; (8002db4 <MX_ADC1_Init+0x78>)
 8002d50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <MX_ADC1_Init+0x74>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d58:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <MX_ADC1_Init+0x74>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <MX_ADC1_Init+0x74>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <MX_ADC1_Init+0x74>)
 8002d66:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002d6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d6c:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <MX_ADC1_Init+0x74>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002d72:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <MX_ADC1_Init+0x74>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d78:	480d      	ldr	r0, [pc, #52]	; (8002db0 <MX_ADC1_Init+0x74>)
 8002d7a:	f000 fce7 	bl	800374c <HAL_ADC_Init>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002d84:	f000 f9ca 	bl	800311c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	4619      	mov	r1, r3
 8002d98:	4805      	ldr	r0, [pc, #20]	; (8002db0 <MX_ADC1_Init+0x74>)
 8002d9a:	f000 fe41 	bl	8003a20 <HAL_ADC_ConfigChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002da4:	f000 f9ba 	bl	800311c <Error_Handler>
  }

}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	200004a0 	.word	0x200004a0
 8002db4:	40012400 	.word	0x40012400

08002db8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <HAL_ADC_MspInit+0x6c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d121      	bne.n	8002e1c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <HAL_ADC_MspInit+0x70>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <HAL_ADC_MspInit+0x70>)
 8002dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_ADC_MspInit+0x70>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_ADC_MspInit+0x70>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <HAL_ADC_MspInit+0x70>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	6193      	str	r3, [r2, #24]
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_ADC_MspInit+0x70>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 8002e10:	f107 0310 	add.w	r3, r7, #16
 8002e14:	4619      	mov	r1, r3
 8002e16:	4805      	ldr	r0, [pc, #20]	; (8002e2c <HAL_ADC_MspInit+0x74>)
 8002e18:	f001 f9b2 	bl	8004180 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3720      	adds	r7, #32
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40012400 	.word	0x40012400
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40010800 	.word	0x40010800

08002e30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <MX_GPIO_Init+0xb8>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <MX_GPIO_Init+0xb8>)
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	6193      	str	r3, [r2, #24]
 8002e50:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <MX_GPIO_Init+0xb8>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5c:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <MX_GPIO_Init+0xb8>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	4a21      	ldr	r2, [pc, #132]	; (8002ee8 <MX_GPIO_Init+0xb8>)
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	6193      	str	r3, [r2, #24]
 8002e68:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <MX_GPIO_Init+0xb8>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 8002e74:	2201      	movs	r2, #1
 8002e76:	210c      	movs	r1, #12
 8002e78:	481c      	ldr	r0, [pc, #112]	; (8002eec <MX_GPIO_Init+0xbc>)
 8002e7a:	f001 fbe1 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f641 6150 	movw	r1, #7760	; 0x1e50
 8002e84:	4819      	ldr	r0, [pc, #100]	; (8002eec <MX_GPIO_Init+0xbc>)
 8002e86:	f001 fbdb 	bl	8004640 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 8002e8a:	f240 435c 	movw	r3, #1116	; 0x45c
 8002e8e:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e90:	2301      	movs	r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9c:	f107 0308 	add.w	r3, r7, #8
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4812      	ldr	r0, [pc, #72]	; (8002eec <MX_GPIO_Init+0xbc>)
 8002ea4:	f001 f96c 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 8002ea8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002eac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	4619      	mov	r1, r3
 8002ebc:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <MX_GPIO_Init+0xc0>)
 8002ebe:	f001 f95f 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 8002ec2:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8002ec6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed4:	f107 0308 	add.w	r3, r7, #8
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4804      	ldr	r0, [pc, #16]	; (8002eec <MX_GPIO_Init+0xbc>)
 8002edc:	f001 f950 	bl	8004180 <HAL_GPIO_Init>

}
 8002ee0:	bf00      	nop
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40010800 	.word	0x40010800
 8002ef0:	40010c00 	.word	0x40010c00

08002ef4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <MX_I2C1_Init+0x50>)
 8002efa:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <MX_I2C1_Init+0x54>)
 8002efc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <MX_I2C1_Init+0x50>)
 8002f00:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <MX_I2C1_Init+0x58>)
 8002f02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <MX_I2C1_Init+0x50>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_I2C1_Init+0x50>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <MX_I2C1_Init+0x50>)
 8002f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <MX_I2C1_Init+0x50>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <MX_I2C1_Init+0x50>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <MX_I2C1_Init+0x50>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <MX_I2C1_Init+0x50>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f30:	4804      	ldr	r0, [pc, #16]	; (8002f44 <MX_I2C1_Init+0x50>)
 8002f32:	f001 fbdd 	bl	80046f0 <HAL_I2C_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f3c:	f000 f8ee 	bl	800311c <Error_Handler>
  }

}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	200004d0 	.word	0x200004d0
 8002f48:	40005400 	.word	0x40005400
 8002f4c:	000186a0 	.word	0x000186a0

08002f50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_I2C_MspInit+0x90>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d132      	bne.n	8002fd6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f70:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <HAL_I2C_MspInit+0x94>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <HAL_I2C_MspInit+0x94>)
 8002f76:	f043 0308 	orr.w	r3, r3, #8
 8002f7a:	6193      	str	r3, [r2, #24]
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_I2C_MspInit+0x94>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8002f88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f8e:	2312      	movs	r3, #18
 8002f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f92:	2303      	movs	r3, #3
 8002f94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4812      	ldr	r0, [pc, #72]	; (8002fe8 <HAL_I2C_MspInit+0x98>)
 8002f9e:	f001 f8ef 	bl	8004180 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_I2C_MspInit+0x9c>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb8:	4a0c      	ldr	r2, [pc, #48]	; (8002fec <HAL_I2C_MspInit+0x9c>)
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_I2C_MspInit+0x94>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4a08      	ldr	r2, [pc, #32]	; (8002fe4 <HAL_I2C_MspInit+0x94>)
 8002fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fc8:	61d3      	str	r3, [r2, #28]
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_I2C_MspInit+0x94>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	3728      	adds	r7, #40	; 0x28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40005400 	.word	0x40005400
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40010c00 	.word	0x40010c00
 8002fec:	40010000 	.word	0x40010000

08002ff0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002ff0:	b598      	push	{r3, r4, r7, lr}
 8002ff2:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002ff4:	f000 fb26 	bl	8003644 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 8002ff8:	f000 f82c 	bl	8003054 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ffc:	f7ff ff18 	bl	8002e30 <MX_GPIO_Init>
	MX_ADC1_Init();
 8003000:	f7ff fe9c 	bl	8002d3c <MX_ADC1_Init>
	MX_I2C1_Init();
 8003004:	f7ff ff76 	bl	8002ef4 <MX_I2C1_Init>
	MX_SPI1_Init();
 8003008:	f000 f898 	bl	800313c <MX_SPI1_Init>
	MX_TIM2_Init();
 800300c:	f000 f9fe 	bl	800340c <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8003010:	f000 fa66 	bl	80034e0 <MX_USART1_UART_Init>

	DryerApplication = new SmartDryer();
 8003014:	203c      	movs	r0, #60	; 0x3c
 8003016:	f004 f881 	bl	800711c <_Znwj>
 800301a:	4603      	mov	r3, r0
 800301c:	461c      	mov	r4, r3
 800301e:	4620      	mov	r0, r4
 8003020:	f7ff fb4c 	bl	80026bc <_ZN10SmartDryerC1Ev>
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <main+0x60>)
 8003026:	601c      	str	r4, [r3, #0]

	if(DryerApplication->enableTest)
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <main+0x60>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <main+0x50>
	{
		DryerApplication->test();
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <main+0x60>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fd41 	bl	8002ac0 <_ZN10SmartDryer4testEv>
 800303e:	e004      	b.n	800304a <main+0x5a>
	}
	else
	{
		DryerApplication->run();
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <main+0x60>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fe4f 	bl	8002ce8 <_ZN10SmartDryer3runEv>
	//  while (1)
	//  {
	//
	//  }

}
 800304a:	2300      	movs	r3, #0
 800304c:	4618      	mov	r0, r3
 800304e:	bd98      	pop	{r3, r4, r7, pc}
 8003050:	2000048c 	.word	0x2000048c

08003054 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b094      	sub	sp, #80	; 0x50
 8003058:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800305a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800305e:	2228      	movs	r2, #40	; 0x28
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f004 fc70 	bl	8007948 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003084:	2302      	movs	r3, #2
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003088:	2301      	movs	r3, #1
 800308a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800308c:	2310      	movs	r3, #16
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003090:	2302      	movs	r3, #2
 8003092:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003094:	2300      	movs	r3, #0
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003098:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800309c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800309e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 fcde 	bl	8004a64 <HAL_RCC_OscConfig>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf14      	ite	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	2300      	moveq	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 80030b8:	f000 f830 	bl	800311c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030bc:	230f      	movs	r3, #15
 80030be:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030c0:	2302      	movs	r3, #2
 80030c2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030c8:	2300      	movs	r3, #0
 80030ca:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030cc:	2300      	movs	r3, #0
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 f834 	bl	8005144 <HAL_RCC_ClockConfig>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 80030ec:	f000 f816 	bl	800311c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80030f0:	2302      	movs	r3, #2
 80030f2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	4618      	mov	r0, r3
 80030fc:	f002 fa64 	bl	80055c8 <HAL_RCCEx_PeriphCLKConfig>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	bf14      	ite	ne
 8003106:	2301      	movne	r3, #1
 8003108:	2300      	moveq	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 8003110:	f000 f804 	bl	800311c <Error_Handler>
	}
}
 8003114:	bf00      	nop
 8003116:	3750      	adds	r7, #80	; 0x50
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <MX_SPI1_Init+0x68>)
 8003142:	4a19      	ldr	r2, [pc, #100]	; (80031a8 <MX_SPI1_Init+0x6c>)
 8003144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <MX_SPI1_Init+0x68>)
 8003148:	f44f 7282 	mov.w	r2, #260	; 0x104
 800314c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <MX_SPI1_Init+0x68>)
 8003150:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003154:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <MX_SPI1_Init+0x68>)
 8003158:	2200      	movs	r2, #0
 800315a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <MX_SPI1_Init+0x68>)
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <MX_SPI1_Init+0x68>)
 8003164:	2200      	movs	r2, #0
 8003166:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <MX_SPI1_Init+0x68>)
 800316a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <MX_SPI1_Init+0x68>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <MX_SPI1_Init+0x68>)
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <MX_SPI1_Init+0x68>)
 800317e:	2200      	movs	r2, #0
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <MX_SPI1_Init+0x68>)
 8003184:	2200      	movs	r2, #0
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <MX_SPI1_Init+0x68>)
 800318a:	220a      	movs	r2, #10
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <MX_SPI1_Init+0x68>)
 8003190:	f002 fb24 	bl	80057dc <HAL_SPI_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800319a:	f7ff ffbf 	bl	800311c <Error_Handler>
  }

}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000524 	.word	0x20000524
 80031a8:	40013000 	.word	0x40013000

080031ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	f107 0310 	add.w	r3, r7, #16
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <HAL_SPI_MspInit+0x70>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d123      	bne.n	8003214 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <HAL_SPI_MspInit+0x74>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4a13      	ldr	r2, [pc, #76]	; (8003220 <HAL_SPI_MspInit+0x74>)
 80031d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031d6:	6193      	str	r3, [r2, #24]
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <HAL_SPI_MspInit+0x74>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e4:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <HAL_SPI_MspInit+0x74>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <HAL_SPI_MspInit+0x74>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6193      	str	r3, [r2, #24]
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_SPI_MspInit+0x74>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 80031fc:	23a0      	movs	r3, #160	; 0xa0
 80031fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003204:	2303      	movs	r3, #3
 8003206:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003208:	f107 0310 	add.w	r3, r7, #16
 800320c:	4619      	mov	r1, r3
 800320e:	4805      	ldr	r0, [pc, #20]	; (8003224 <HAL_SPI_MspInit+0x78>)
 8003210:	f000 ffb6 	bl	8004180 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003214:	bf00      	nop
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40013000 	.word	0x40013000
 8003220:	40021000 	.word	0x40021000
 8003224:	40010800 	.word	0x40010800

08003228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_MspInit+0x5c>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	4a14      	ldr	r2, [pc, #80]	; (8003284 <HAL_MspInit+0x5c>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6193      	str	r3, [r2, #24]
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_MspInit+0x5c>)
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <HAL_MspInit+0x5c>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <HAL_MspInit+0x5c>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	61d3      	str	r3, [r2, #28]
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_MspInit+0x5c>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <HAL_MspInit+0x60>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_MspInit+0x60>)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40021000 	.word	0x40021000
 8003288:	40010000 	.word	0x40010000

0800328c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800329c:	e7fe      	b.n	800329c <HardFault_Handler+0x4>

0800329e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032a2:	e7fe      	b.n	80032a2 <MemManage_Handler+0x4>

080032a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032a8:	e7fe      	b.n	80032a8 <BusFault_Handler+0x4>

080032aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ae:	e7fe      	b.n	80032ae <UsageFault_Handler+0x4>

080032b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032d8:	f000 f9fa 	bl	80036d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}

080032e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <USART1_IRQHandler+0x10>)
 80032e6:	f003 fb7f 	bl	80069e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200005bc 	.word	0x200005bc

080032f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
	return 1;
 80032f8:	2301      	movs	r3, #1
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <_kill>:

int _kill(int pid, int sig)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800330c:	f004 fab0 	bl	8007870 <__errno>
 8003310:	4602      	mov	r2, r0
 8003312:	2316      	movs	r3, #22
 8003314:	6013      	str	r3, [r2, #0]
	return -1;
 8003316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <_exit>:

void _exit (int status)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800332a:	f04f 31ff 	mov.w	r1, #4294967295
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ffe7 	bl	8003302 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003334:	e7fe      	b.n	8003334 <_exit+0x12>
	...

08003338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003340:	4a14      	ldr	r2, [pc, #80]	; (8003394 <_sbrk+0x5c>)
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <_sbrk+0x60>)
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <_sbrk+0x64>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <_sbrk+0x64>)
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <_sbrk+0x68>)
 8003358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <_sbrk+0x64>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	429a      	cmp	r2, r3
 8003366:	d207      	bcs.n	8003378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003368:	f004 fa82 	bl	8007870 <__errno>
 800336c:	4602      	mov	r2, r0
 800336e:	230c      	movs	r3, #12
 8003370:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
 8003376:	e009      	b.n	800338c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <_sbrk+0x64>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <_sbrk+0x64>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	4a05      	ldr	r2, [pc, #20]	; (800339c <_sbrk+0x64>)
 8003388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20005000 	.word	0x20005000
 8003398:	00000400 	.word	0x00000400
 800339c:	20000490 	.word	0x20000490
 80033a0:	20000608 	.word	0x20000608

080033a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80033a8:	4b15      	ldr	r3, [pc, #84]	; (8003400 <SystemInit+0x5c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a14      	ldr	r2, [pc, #80]	; (8003400 <SystemInit+0x5c>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <SystemInit+0x5c>)
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4911      	ldr	r1, [pc, #68]	; (8003400 <SystemInit+0x5c>)
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <SystemInit+0x60>)
 80033bc:	4013      	ands	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <SystemInit+0x5c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <SystemInit+0x5c>)
 80033c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <SystemInit+0x5c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <SystemInit+0x5c>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <SystemInit+0x5c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a07      	ldr	r2, [pc, #28]	; (8003400 <SystemInit+0x5c>)
 80033e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80033e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <SystemInit+0x5c>)
 80033ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80033ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <SystemInit+0x64>)
 80033f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	40021000 	.word	0x40021000
 8003404:	f8ff0000 	.word	0xf8ff0000
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003412:	f107 030c 	add.w	r3, r7, #12
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	60da      	str	r2, [r3, #12]
 8003420:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800342a:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <MX_TIM2_Init+0x98>)
 800342c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003430:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003432:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <MX_TIM2_Init+0x98>)
 8003434:	2200      	movs	r2, #0
 8003436:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <MX_TIM2_Init+0x98>)
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800343e:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <MX_TIM2_Init+0x98>)
 8003440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003444:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003446:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <MX_TIM2_Init+0x98>)
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800344c:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <MX_TIM2_Init+0x98>)
 800344e:	2200      	movs	r2, #0
 8003450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003452:	4814      	ldr	r0, [pc, #80]	; (80034a4 <MX_TIM2_Init+0x98>)
 8003454:	f002 fca0 	bl	8005d98 <HAL_TIM_Base_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800345e:	f7ff fe5d 	bl	800311c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800346a:	f107 030c 	add.w	r3, r7, #12
 800346e:	4619      	mov	r1, r3
 8003470:	480c      	ldr	r0, [pc, #48]	; (80034a4 <MX_TIM2_Init+0x98>)
 8003472:	f002 fd17 	bl	8005ea4 <HAL_TIM_SlaveConfigSynchro>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800347c:	f7ff fe4e 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003480:	2300      	movs	r3, #0
 8003482:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	4619      	mov	r1, r3
 800348c:	4805      	ldr	r0, [pc, #20]	; (80034a4 <MX_TIM2_Init+0x98>)
 800348e:	f003 f82d 	bl	80064ec <HAL_TIMEx_MasterConfigSynchronization>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003498:	f7ff fe40 	bl	800311c <Error_Handler>
  }

}
 800349c:	bf00      	nop
 800349e:	3720      	adds	r7, #32
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	2000057c 	.word	0x2000057c

080034a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b8:	d10b      	bne.n	80034d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <HAL_TIM_Base_MspInit+0x34>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	4a07      	ldr	r2, [pc, #28]	; (80034dc <HAL_TIM_Base_MspInit+0x34>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	61d3      	str	r3, [r2, #28]
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_TIM_Base_MspInit+0x34>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	40021000 	.word	0x40021000

080034e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80034e4:	4b11      	ldr	r3, [pc, #68]	; (800352c <MX_USART1_UART_Init+0x4c>)
 80034e6:	4a12      	ldr	r2, [pc, #72]	; (8003530 <MX_USART1_UART_Init+0x50>)
 80034e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <MX_USART1_UART_Init+0x4c>)
 80034ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80034f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <MX_USART1_UART_Init+0x4c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <MX_USART1_UART_Init+0x4c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <MX_USART1_UART_Init+0x4c>)
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <MX_USART1_UART_Init+0x4c>)
 8003506:	220c      	movs	r2, #12
 8003508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <MX_USART1_UART_Init+0x4c>)
 800350c:	2200      	movs	r2, #0
 800350e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <MX_USART1_UART_Init+0x4c>)
 8003512:	2200      	movs	r2, #0
 8003514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003516:	4805      	ldr	r0, [pc, #20]	; (800352c <MX_USART1_UART_Init+0x4c>)
 8003518:	f003 f87e 	bl	8006618 <HAL_UART_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003522:	f7ff fdfb 	bl	800311c <Error_Handler>
  }

}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200005bc 	.word	0x200005bc
 8003530:	40013800 	.word	0x40013800

08003534 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <HAL_UART_MspInit+0xb4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d145      	bne.n	80035e0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <HAL_UART_MspInit+0xb8>)
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	4a24      	ldr	r2, [pc, #144]	; (80035ec <HAL_UART_MspInit+0xb8>)
 800355a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800355e:	6193      	str	r3, [r2, #24]
 8003560:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_UART_MspInit+0xb8>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800356c:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <HAL_UART_MspInit+0xb8>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	4a1e      	ldr	r2, [pc, #120]	; (80035ec <HAL_UART_MspInit+0xb8>)
 8003572:	f043 0308 	orr.w	r3, r3, #8
 8003576:	6193      	str	r3, [r2, #24]
 8003578:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_UART_MspInit+0xb8>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8003584:	2340      	movs	r3, #64	; 0x40
 8003586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003588:	2302      	movs	r3, #2
 800358a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4619      	mov	r1, r3
 8003596:	4816      	ldr	r0, [pc, #88]	; (80035f0 <HAL_UART_MspInit+0xbc>)
 8003598:	f000 fdf2 	bl	8004180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	4619      	mov	r1, r3
 80035ae:	4810      	ldr	r0, [pc, #64]	; (80035f0 <HAL_UART_MspInit+0xbc>)
 80035b0:	f000 fde6 	bl	8004180 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_UART_MspInit+0xc0>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <HAL_UART_MspInit+0xc0>)
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035d0:	2200      	movs	r2, #0
 80035d2:	2100      	movs	r1, #0
 80035d4:	2025      	movs	r0, #37	; 0x25
 80035d6:	f000 fd0d 	bl	8003ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035da:	2025      	movs	r0, #37	; 0x25
 80035dc:	f000 fd36 	bl	800404c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80035e0:	bf00      	nop
 80035e2:	3728      	adds	r7, #40	; 0x28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40013800 	.word	0x40013800
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40010c00 	.word	0x40010c00
 80035f4:	40010000 	.word	0x40010000

080035f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80035f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80035fa:	e003      	b.n	8003604 <LoopCopyDataInit>

080035fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80035fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003600:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003602:	3104      	adds	r1, #4

08003604 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003604:	480a      	ldr	r0, [pc, #40]	; (8003630 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003608:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800360a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800360c:	d3f6      	bcc.n	80035fc <CopyDataInit>
  ldr r2, =_sbss
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003610:	e002      	b.n	8003618 <LoopFillZerobss>

08003612 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003612:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003614:	f842 3b04 	str.w	r3, [r2], #4

08003618 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800361a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800361c:	d3f9      	bcc.n	8003612 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800361e:	f7ff fec1 	bl	80033a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003622:	f004 f92b 	bl	800787c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003626:	f7ff fce3 	bl	8002ff0 <main>
  bx lr
 800362a:	4770      	bx	lr
  ldr r3, =_sidata
 800362c:	08008840 	.word	0x08008840
  ldr r0, =_sdata
 8003630:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003634:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8003638:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800363c:	20000604 	.word	0x20000604

08003640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003640:	e7fe      	b.n	8003640 <ADC1_2_IRQHandler>
	...

08003644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_Init+0x28>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a07      	ldr	r2, [pc, #28]	; (800366c <HAL_Init+0x28>)
 800364e:	f043 0310 	orr.w	r3, r3, #16
 8003652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003654:	2003      	movs	r0, #3
 8003656:	f000 fcad 	bl	8003fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800365a:	2000      	movs	r0, #0
 800365c:	f000 f808 	bl	8003670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003660:	f7ff fde2 	bl	8003228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40022000 	.word	0x40022000

08003670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_InitTick+0x54>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_InitTick+0x58>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003686:	fbb3 f3f1 	udiv	r3, r3, r1
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fcf4 	bl	800407c <HAL_SYSTICK_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e00e      	b.n	80036bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0f      	cmp	r3, #15
 80036a2:	d80a      	bhi.n	80036ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a4:	2200      	movs	r2, #0
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	f000 fca2 	bl	8003ff4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <HAL_InitTick+0x5c>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000008 	.word	0x20000008
 80036cc:	20000004 	.word	0x20000004

080036d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_IncTick+0x1c>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_IncTick+0x20>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	4a03      	ldr	r2, [pc, #12]	; (80036f0 <HAL_IncTick+0x20>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	20000008 	.word	0x20000008
 80036f0:	200005fc 	.word	0x200005fc

080036f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return uwTick;
 80036f8:	4b02      	ldr	r3, [pc, #8]	; (8003704 <HAL_GetTick+0x10>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	200005fc 	.word	0x200005fc

08003708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff fff0 	bl	80036f4 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d005      	beq.n	800372e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_Delay+0x40>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800372e:	bf00      	nop
 8003730:	f7ff ffe0 	bl	80036f4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d8f7      	bhi.n	8003730 <HAL_Delay+0x28>
  {
  }
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000008 	.word	0x20000008

0800374c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e153      	b.n	8003a16 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a9f      	ldr	r2, [pc, #636]	; (80039f0 <HAL_ADC_Init+0x2a4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_ADC_Init+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a9d      	ldr	r2, [pc, #628]	; (80039f4 <HAL_ADC_Init+0x2a8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_ADC_Init+0x40>
 8003782:	f240 11b3 	movw	r1, #435	; 0x1b3
 8003786:	489c      	ldr	r0, [pc, #624]	; (80039f8 <HAL_ADC_Init+0x2ac>)
 8003788:	f7ff fcce 	bl	8003128 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <HAL_ADC_Init+0x5c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800379c:	d004      	beq.n	80037a8 <HAL_ADC_Init+0x5c>
 800379e:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80037a2:	4895      	ldr	r0, [pc, #596]	; (80039f8 <HAL_ADC_Init+0x2ac>)
 80037a4:	f7ff fcc0 	bl	8003128 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d009      	beq.n	80037c4 <HAL_ADC_Init+0x78>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b8:	d004      	beq.n	80037c4 <HAL_ADC_Init+0x78>
 80037ba:	f240 11b5 	movw	r1, #437	; 0x1b5
 80037be:	488e      	ldr	r0, [pc, #568]	; (80039f8 <HAL_ADC_Init+0x2ac>)
 80037c0:	f7ff fcb2 	bl	8003128 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	7b1b      	ldrb	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_ADC_Init+0x92>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	7b1b      	ldrb	r3, [r3, #12]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d004      	beq.n	80037de <HAL_ADC_Init+0x92>
 80037d4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80037d8:	4887      	ldr	r0, [pc, #540]	; (80039f8 <HAL_ADC_Init+0x2ac>)
 80037da:	f7ff fca5 	bl	8003128 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d022      	beq.n	800382c <HAL_ADC_Init+0xe0>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ee:	d01d      	beq.n	800382c <HAL_ADC_Init+0xe0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80037f8:	d018      	beq.n	800382c <HAL_ADC_Init+0xe0>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003802:	d013      	beq.n	800382c <HAL_ADC_Init+0xe0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800380c:	d00e      	beq.n	800382c <HAL_ADC_Init+0xe0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003816:	d009      	beq.n	800382c <HAL_ADC_Init+0xe0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003820:	d004      	beq.n	800382c <HAL_ADC_Init+0xe0>
 8003822:	f240 11b7 	movw	r1, #439	; 0x1b7
 8003826:	4874      	ldr	r0, [pc, #464]	; (80039f8 <HAL_ADC_Init+0x2ac>)
 8003828:	f7ff fc7e 	bl	8003128 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02a      	beq.n	800388a <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_ADC_Init+0xf8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	2b10      	cmp	r3, #16
 8003842:	d904      	bls.n	800384e <HAL_ADC_Init+0x102>
 8003844:	f240 11bb 	movw	r1, #443	; 0x1bb
 8003848:	486b      	ldr	r0, [pc, #428]	; (80039f8 <HAL_ADC_Init+0x2ac>)
 800384a:	f7ff fc6d 	bl	8003128 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	7d1b      	ldrb	r3, [r3, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_ADC_Init+0x11c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	7d1b      	ldrb	r3, [r3, #20]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d004      	beq.n	8003868 <HAL_ADC_Init+0x11c>
 800385e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8003862:	4865      	ldr	r0, [pc, #404]	; (80039f8 <HAL_ADC_Init+0x2ac>)
 8003864:	f7ff fc60 	bl	8003128 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	7d1b      	ldrb	r3, [r3, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00c      	beq.n	800388a <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_ADC_Init+0x134>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d904      	bls.n	800388a <HAL_ADC_Init+0x13e>
 8003880:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003884:	485c      	ldr	r0, [pc, #368]	; (80039f8 <HAL_ADC_Init+0x2ac>)
 8003886:	f7ff fc4f 	bl	8003128 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fa89 	bl	8002db8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fa7e 	bl	8003da8 <ADC_ConversionStop_Disable>
 80038ac:	4603      	mov	r3, r0
 80038ae:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f040 80a3 	bne.w	8003a04 <HAL_ADC_Init+0x2b8>
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f040 809f 	bne.w	8003a04 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038ce:	f023 0302 	bic.w	r3, r3, #2
 80038d2:	f043 0202 	orr.w	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038e2:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7b1b      	ldrb	r3, [r3, #12]
 80038e8:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038ea:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	d003      	beq.n	8003904 <HAL_ADC_Init+0x1b8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d102      	bne.n	800390a <HAL_ADC_Init+0x1be>
 8003904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003908:	e000      	b.n	800390c <HAL_ADC_Init+0x1c0>
 800390a:	2300      	movs	r3, #0
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7d1b      	ldrb	r3, [r3, #20]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d119      	bne.n	800394e <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7b1b      	ldrb	r3, [r3, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	3b01      	subs	r3, #1
 8003928:	035a      	lsls	r2, r3, #13
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e00b      	b.n	800394e <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <HAL_ADC_Init+0x2b0>)
 800396a:	4013      	ands	r3, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	430b      	orrs	r3, r1
 8003974:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397e:	d003      	beq.n	8003988 <HAL_ADC_Init+0x23c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d104      	bne.n	8003992 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	3b01      	subs	r3, #1
 800398e:	051b      	lsls	r3, r3, #20
 8003990:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <HAL_ADC_Init+0x2b4>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d10b      	bne.n	80039ce <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	f023 0303 	bic.w	r3, r3, #3
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039cc:	e022      	b.n	8003a14 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	f023 0312 	bic.w	r3, r3, #18
 80039d6:	f043 0210 	orr.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039ee:	e011      	b.n	8003a14 <HAL_ADC_Init+0x2c8>
 80039f0:	40012400 	.word	0x40012400
 80039f4:	40012800 	.word	0x40012800
 80039f8:	080082b8 	.word	0x080082b8
 80039fc:	ffe1f7fd 	.word	0xffe1f7fd
 8003a00:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	f043 0210 	orr.w	r2, r3, #16
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop

08003a20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a88      	ldr	r2, [pc, #544]	; (8003c58 <HAL_ADC_ConfigChannel+0x238>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d009      	beq.n	8003a50 <HAL_ADC_ConfigChannel+0x30>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a86      	ldr	r2, [pc, #536]	; (8003c5c <HAL_ADC_ConfigChannel+0x23c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d004      	beq.n	8003a50 <HAL_ADC_ConfigChannel+0x30>
 8003a46:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8003a4a:	4885      	ldr	r0, [pc, #532]	; (8003c60 <HAL_ADC_ConfigChannel+0x240>)
 8003a4c:	f7ff fb6c 	bl	8003128 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d048      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d044      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d040      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d03c      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d038      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d034      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d030      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b07      	cmp	r3, #7
 8003a8e:	d02c      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d028      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b09      	cmp	r3, #9
 8003a9e:	d024      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b0a      	cmp	r3, #10
 8003aa6:	d020      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b0b      	cmp	r3, #11
 8003aae:	d01c      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	d018      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b0d      	cmp	r3, #13
 8003abe:	d014      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b0e      	cmp	r3, #14
 8003ac6:	d010      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b0f      	cmp	r3, #15
 8003ace:	d00c      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d008      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b11      	cmp	r3, #17
 8003ade:	d004      	beq.n	8003aea <HAL_ADC_ConfigChannel+0xca>
 8003ae0:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8003ae4:	485e      	ldr	r0, [pc, #376]	; (8003c60 <HAL_ADC_ConfigChannel+0x240>)
 8003ae6:	f7ff fb1f 	bl	8003128 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d040      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d03c      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d038      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d034      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d030      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d02c      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b07      	cmp	r3, #7
 8003b20:	d028      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d024      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b09      	cmp	r3, #9
 8003b30:	d020      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b0a      	cmp	r3, #10
 8003b38:	d01c      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b0b      	cmp	r3, #11
 8003b40:	d018      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b0c      	cmp	r3, #12
 8003b48:	d014      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b0d      	cmp	r3, #13
 8003b50:	d010      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b0e      	cmp	r3, #14
 8003b58:	d00c      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b0f      	cmp	r3, #15
 8003b60:	d008      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d004      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x154>
 8003b6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003b6e:	483c      	ldr	r0, [pc, #240]	; (8003c60 <HAL_ADC_ConfigChannel+0x240>)
 8003b70:	f7ff fada 	bl	8003128 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_ADC_ConfigChannel+0x19e>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d01c      	beq.n	8003bbe <HAL_ADC_ConfigChannel+0x19e>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d018      	beq.n	8003bbe <HAL_ADC_ConfigChannel+0x19e>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d014      	beq.n	8003bbe <HAL_ADC_ConfigChannel+0x19e>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d010      	beq.n	8003bbe <HAL_ADC_ConfigChannel+0x19e>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d00c      	beq.n	8003bbe <HAL_ADC_ConfigChannel+0x19e>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d008      	beq.n	8003bbe <HAL_ADC_ConfigChannel+0x19e>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b07      	cmp	r3, #7
 8003bb2:	d004      	beq.n	8003bbe <HAL_ADC_ConfigChannel+0x19e>
 8003bb4:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8003bb8:	4829      	ldr	r0, [pc, #164]	; (8003c60 <HAL_ADC_ConfigChannel+0x240>)
 8003bba:	f7ff fab5 	bl	8003128 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x1ac>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e0e2      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x372>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b06      	cmp	r3, #6
 8003bda:	d81c      	bhi.n	8003c16 <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	3b05      	subs	r3, #5
 8003bee:	221f      	movs	r2, #31
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	4019      	ands	r1, r3
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	3b05      	subs	r3, #5
 8003c08:	fa00 f203 	lsl.w	r2, r0, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	635a      	str	r2, [r3, #52]	; 0x34
 8003c14:	e042      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d822      	bhi.n	8003c64 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3b23      	subs	r3, #35	; 0x23
 8003c30:	221f      	movs	r2, #31
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	4019      	ands	r1, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	3b23      	subs	r3, #35	; 0x23
 8003c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
 8003c56:	e021      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x27c>
 8003c58:	40012400 	.word	0x40012400
 8003c5c:	40012800 	.word	0x40012800
 8003c60:	080082b8 	.word	0x080082b8
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	3b41      	subs	r3, #65	; 0x41
 8003c76:	221f      	movs	r2, #31
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	4019      	ands	r1, r3
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3b41      	subs	r3, #65	; 0x41
 8003c90:	fa00 f203 	lsl.w	r2, r0, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b09      	cmp	r3, #9
 8003ca2:	d91c      	bls.n	8003cde <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68d9      	ldr	r1, [r3, #12]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3b1e      	subs	r3, #30
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	4019      	ands	r1, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	6898      	ldr	r0, [r3, #8]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	3b1e      	subs	r3, #30
 8003cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]
 8003cdc:	e019      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6919      	ldr	r1, [r3, #16]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4413      	add	r3, r2
 8003cee:	2207      	movs	r2, #7
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	4019      	ands	r1, r3
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6898      	ldr	r0, [r3, #8]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	fa00 f203 	lsl.w	r2, r0, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d003      	beq.n	8003d22 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d1e:	2b11      	cmp	r3, #17
 8003d20:	d132      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <HAL_ADC_ConfigChannel+0x37c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d125      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d126      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003d48:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d11a      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d52:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <HAL_ADC_ConfigChannel+0x380>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <HAL_ADC_ConfigChannel+0x384>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	0c9a      	lsrs	r2, r3, #18
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d68:	e002      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f9      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x34a>
 8003d76:	e007      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40012400 	.word	0x40012400
 8003da0:	20000000 	.word	0x20000000
 8003da4:	431bde83 	.word	0x431bde83

08003da8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d127      	bne.n	8003e12 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dd2:	f7ff fc8f 	bl	80036f4 <HAL_GetTick>
 8003dd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003dd8:	e014      	b.n	8003e04 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dda:	f7ff fc8b 	bl	80036f4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d90d      	bls.n	8003e04 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	f043 0210 	orr.w	r2, r3, #16
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e007      	b.n	8003e14 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d0e3      	beq.n	8003dda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e4e:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	60d3      	str	r3, [r2, #12]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e68:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <__NVIC_GetPriorityGrouping+0x18>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f003 0307 	and.w	r3, r3, #7
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	db0b      	blt.n	8003eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	f003 021f 	and.w	r2, r3, #31
 8003e98:	4906      	ldr	r1, [pc, #24]	; (8003eb4 <__NVIC_EnableIRQ+0x34>)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	e000e100 	.word	0xe000e100

08003eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	6039      	str	r1, [r7, #0]
 8003ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	db0a      	blt.n	8003ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	490c      	ldr	r1, [pc, #48]	; (8003f04 <__NVIC_SetPriority+0x4c>)
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	0112      	lsls	r2, r2, #4
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	440b      	add	r3, r1
 8003edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee0:	e00a      	b.n	8003ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	4908      	ldr	r1, [pc, #32]	; (8003f08 <__NVIC_SetPriority+0x50>)
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	3b04      	subs	r3, #4
 8003ef0:	0112      	lsls	r2, r2, #4
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	761a      	strb	r2, [r3, #24]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000e100 	.word	0xe000e100
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b089      	sub	sp, #36	; 0x24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f1c3 0307 	rsb	r3, r3, #7
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	bf28      	it	cs
 8003f2a:	2304      	movcs	r3, #4
 8003f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3304      	adds	r3, #4
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d902      	bls.n	8003f3c <NVIC_EncodePriority+0x30>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3b03      	subs	r3, #3
 8003f3a:	e000      	b.n	8003f3e <NVIC_EncodePriority+0x32>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	401a      	ands	r2, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f54:	f04f 31ff 	mov.w	r1, #4294967295
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5e:	43d9      	mvns	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f64:	4313      	orrs	r3, r2
         );
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3724      	adds	r7, #36	; 0x24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f80:	d301      	bcc.n	8003f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f82:	2301      	movs	r3, #1
 8003f84:	e00f      	b.n	8003fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f86:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <SysTick_Config+0x40>)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f8e:	210f      	movs	r1, #15
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	f7ff ff90 	bl	8003eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <SysTick_Config+0x40>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f9e:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <SysTick_Config+0x40>)
 8003fa0:	2207      	movs	r2, #7
 8003fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	e000e010 	.word	0xe000e010

08003fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b07      	cmp	r3, #7
 8003fc0:	d00f      	beq.n	8003fe2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b06      	cmp	r3, #6
 8003fc6:	d00c      	beq.n	8003fe2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d009      	beq.n	8003fe2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d006      	beq.n	8003fe2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d003      	beq.n	8003fe2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003fda:	2192      	movs	r1, #146	; 0x92
 8003fdc:	4804      	ldr	r0, [pc, #16]	; (8003ff0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003fde:	f7ff f8a3 	bl	8003128 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ff1a 	bl	8003e1c <__NVIC_SetPriorityGrouping>
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	080082f0 	.word	0x080082f0

08003ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b0f      	cmp	r3, #15
 800400a:	d903      	bls.n	8004014 <HAL_NVIC_SetPriority+0x20>
 800400c:	21aa      	movs	r1, #170	; 0xaa
 800400e:	480e      	ldr	r0, [pc, #56]	; (8004048 <HAL_NVIC_SetPriority+0x54>)
 8004010:	f7ff f88a 	bl	8003128 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b0f      	cmp	r3, #15
 8004018:	d903      	bls.n	8004022 <HAL_NVIC_SetPriority+0x2e>
 800401a:	21ab      	movs	r1, #171	; 0xab
 800401c:	480a      	ldr	r0, [pc, #40]	; (8004048 <HAL_NVIC_SetPriority+0x54>)
 800401e:	f7ff f883 	bl	8003128 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004022:	f7ff ff1f 	bl	8003e64 <__NVIC_GetPriorityGrouping>
 8004026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	6978      	ldr	r0, [r7, #20]
 800402e:	f7ff ff6d 	bl	8003f0c <NVIC_EncodePriority>
 8004032:	4602      	mov	r2, r0
 8004034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004038:	4611      	mov	r1, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ff3c 	bl	8003eb8 <__NVIC_SetPriority>
}
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	080082f0 	.word	0x080082f0

0800404c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	2b00      	cmp	r3, #0
 800405c:	da03      	bge.n	8004066 <HAL_NVIC_EnableIRQ+0x1a>
 800405e:	21be      	movs	r1, #190	; 0xbe
 8004060:	4805      	ldr	r0, [pc, #20]	; (8004078 <HAL_NVIC_EnableIRQ+0x2c>)
 8004062:	f7ff f861 	bl	8003128 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff ff08 	bl	8003e80 <__NVIC_EnableIRQ>
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	080082f0 	.word	0x080082f0

0800407c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ff73 	bl	8003f70 <SysTick_Config>
 800408a:	4603      	mov	r3, r0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d005      	beq.n	80040b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2204      	movs	r2, #4
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
 80040b4:	e051      	b.n	800415a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 020e 	bic.w	r2, r2, #14
 80040c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a22      	ldr	r2, [pc, #136]	; (8004164 <HAL_DMA_Abort_IT+0xd0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d029      	beq.n	8004134 <HAL_DMA_Abort_IT+0xa0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a20      	ldr	r2, [pc, #128]	; (8004168 <HAL_DMA_Abort_IT+0xd4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d022      	beq.n	8004130 <HAL_DMA_Abort_IT+0x9c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a1f      	ldr	r2, [pc, #124]	; (800416c <HAL_DMA_Abort_IT+0xd8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d01a      	beq.n	800412a <HAL_DMA_Abort_IT+0x96>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1d      	ldr	r2, [pc, #116]	; (8004170 <HAL_DMA_Abort_IT+0xdc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d012      	beq.n	8004124 <HAL_DMA_Abort_IT+0x90>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <HAL_DMA_Abort_IT+0xe0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00a      	beq.n	800411e <HAL_DMA_Abort_IT+0x8a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1a      	ldr	r2, [pc, #104]	; (8004178 <HAL_DMA_Abort_IT+0xe4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d102      	bne.n	8004118 <HAL_DMA_Abort_IT+0x84>
 8004112:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004116:	e00e      	b.n	8004136 <HAL_DMA_Abort_IT+0xa2>
 8004118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800411c:	e00b      	b.n	8004136 <HAL_DMA_Abort_IT+0xa2>
 800411e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004122:	e008      	b.n	8004136 <HAL_DMA_Abort_IT+0xa2>
 8004124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004128:	e005      	b.n	8004136 <HAL_DMA_Abort_IT+0xa2>
 800412a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800412e:	e002      	b.n	8004136 <HAL_DMA_Abort_IT+0xa2>
 8004130:	2310      	movs	r3, #16
 8004132:	e000      	b.n	8004136 <HAL_DMA_Abort_IT+0xa2>
 8004134:	2301      	movs	r3, #1
 8004136:	4a11      	ldr	r2, [pc, #68]	; (800417c <HAL_DMA_Abort_IT+0xe8>)
 8004138:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4798      	blx	r3
    } 
  }
  return status;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40020008 	.word	0x40020008
 8004168:	4002001c 	.word	0x4002001c
 800416c:	40020030 	.word	0x40020030
 8004170:	40020044 	.word	0x40020044
 8004174:	40020058 	.word	0x40020058
 8004178:	4002006c 	.word	0x4002006c
 800417c:	40020000 	.word	0x40020000

08004180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	; 0x28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800418a:	2300      	movs	r3, #0
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800418e:	2300      	movs	r3, #0
 8004190:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a9c      	ldr	r2, [pc, #624]	; (8004408 <HAL_GPIO_Init+0x288>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <HAL_GPIO_Init+0x42>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a9b      	ldr	r2, [pc, #620]	; (800440c <HAL_GPIO_Init+0x28c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00f      	beq.n	80041c2 <HAL_GPIO_Init+0x42>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a9a      	ldr	r2, [pc, #616]	; (8004410 <HAL_GPIO_Init+0x290>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00b      	beq.n	80041c2 <HAL_GPIO_Init+0x42>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a99      	ldr	r2, [pc, #612]	; (8004414 <HAL_GPIO_Init+0x294>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <HAL_GPIO_Init+0x42>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a98      	ldr	r2, [pc, #608]	; (8004418 <HAL_GPIO_Init+0x298>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_Init+0x42>
 80041ba:	21bd      	movs	r1, #189	; 0xbd
 80041bc:	4897      	ldr	r0, [pc, #604]	; (800441c <HAL_GPIO_Init+0x29c>)
 80041be:	f7fe ffb3 	bl	8003128 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_GPIO_Init+0x58>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x60>
 80041d8:	21be      	movs	r1, #190	; 0xbe
 80041da:	4890      	ldr	r0, [pc, #576]	; (800441c <HAL_GPIO_Init+0x29c>)
 80041dc:	f7fe ffa4 	bl	8003128 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 81eb 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	f000 81e6 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b11      	cmp	r3, #17
 80041fa:	f000 81e1 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b02      	cmp	r3, #2
 8004204:	f000 81dc 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b12      	cmp	r3, #18
 800420e:	f000 81d7 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4a82      	ldr	r2, [pc, #520]	; (8004420 <HAL_GPIO_Init+0x2a0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	f000 81d1 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4a80      	ldr	r2, [pc, #512]	; (8004424 <HAL_GPIO_Init+0x2a4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	f000 81cb 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4a7e      	ldr	r2, [pc, #504]	; (8004428 <HAL_GPIO_Init+0x2a8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	f000 81c5 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4a7c      	ldr	r2, [pc, #496]	; (800442c <HAL_GPIO_Init+0x2ac>)
 800423c:	4293      	cmp	r3, r2
 800423e:	f000 81bf 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4a7a      	ldr	r2, [pc, #488]	; (8004430 <HAL_GPIO_Init+0x2b0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	f000 81b9 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4a78      	ldr	r2, [pc, #480]	; (8004434 <HAL_GPIO_Init+0x2b4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	f000 81b3 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b03      	cmp	r3, #3
 8004260:	f000 81ae 	beq.w	80045c0 <HAL_GPIO_Init+0x440>
 8004264:	21bf      	movs	r1, #191	; 0xbf
 8004266:	486d      	ldr	r0, [pc, #436]	; (800441c <HAL_GPIO_Init+0x29c>)
 8004268:	f7fe ff5e 	bl	8003128 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800426c:	e1a8      	b.n	80045c0 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800426e:	2201      	movs	r2, #1
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	4013      	ands	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	429a      	cmp	r2, r3
 8004288:	f040 8197 	bne.w	80045ba <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a5e      	ldr	r2, [pc, #376]	; (8004408 <HAL_GPIO_Init+0x288>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_GPIO_Init+0x13c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a5d      	ldr	r2, [pc, #372]	; (800440c <HAL_GPIO_Init+0x28c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00f      	beq.n	80042bc <HAL_GPIO_Init+0x13c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a5c      	ldr	r2, [pc, #368]	; (8004410 <HAL_GPIO_Init+0x290>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00b      	beq.n	80042bc <HAL_GPIO_Init+0x13c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a5b      	ldr	r2, [pc, #364]	; (8004414 <HAL_GPIO_Init+0x294>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d007      	beq.n	80042bc <HAL_GPIO_Init+0x13c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a5a      	ldr	r2, [pc, #360]	; (8004418 <HAL_GPIO_Init+0x298>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <HAL_GPIO_Init+0x13c>
 80042b4:	21cd      	movs	r1, #205	; 0xcd
 80042b6:	4859      	ldr	r0, [pc, #356]	; (800441c <HAL_GPIO_Init+0x29c>)
 80042b8:	f7fe ff36 	bl	8003128 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b12      	cmp	r3, #18
 80042c2:	d065      	beq.n	8004390 <HAL_GPIO_Init+0x210>
 80042c4:	2b12      	cmp	r3, #18
 80042c6:	d80e      	bhi.n	80042e6 <HAL_GPIO_Init+0x166>
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d04c      	beq.n	8004366 <HAL_GPIO_Init+0x1e6>
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d804      	bhi.n	80042da <HAL_GPIO_Init+0x15a>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d072      	beq.n	80043ba <HAL_GPIO_Init+0x23a>
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d01d      	beq.n	8004314 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80042d8:	e0b1      	b.n	800443e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80042da:	2b03      	cmp	r3, #3
 80042dc:	f000 80ac 	beq.w	8004438 <HAL_GPIO_Init+0x2b8>
 80042e0:	2b11      	cmp	r3, #17
 80042e2:	d02b      	beq.n	800433c <HAL_GPIO_Init+0x1bc>
          break;
 80042e4:	e0ab      	b.n	800443e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80042e6:	4a4f      	ldr	r2, [pc, #316]	; (8004424 <HAL_GPIO_Init+0x2a4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d066      	beq.n	80043ba <HAL_GPIO_Init+0x23a>
 80042ec:	4a4d      	ldr	r2, [pc, #308]	; (8004424 <HAL_GPIO_Init+0x2a4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d806      	bhi.n	8004300 <HAL_GPIO_Init+0x180>
 80042f2:	4a4b      	ldr	r2, [pc, #300]	; (8004420 <HAL_GPIO_Init+0x2a0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d060      	beq.n	80043ba <HAL_GPIO_Init+0x23a>
 80042f8:	4a4c      	ldr	r2, [pc, #304]	; (800442c <HAL_GPIO_Init+0x2ac>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d05d      	beq.n	80043ba <HAL_GPIO_Init+0x23a>
          break;
 80042fe:	e09e      	b.n	800443e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8004300:	4a49      	ldr	r2, [pc, #292]	; (8004428 <HAL_GPIO_Init+0x2a8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d059      	beq.n	80043ba <HAL_GPIO_Init+0x23a>
 8004306:	4a4b      	ldr	r2, [pc, #300]	; (8004434 <HAL_GPIO_Init+0x2b4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d056      	beq.n	80043ba <HAL_GPIO_Init+0x23a>
 800430c:	4a48      	ldr	r2, [pc, #288]	; (8004430 <HAL_GPIO_Init+0x2b0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d053      	beq.n	80043ba <HAL_GPIO_Init+0x23a>
          break;
 8004312:	e094      	b.n	800443e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d00b      	beq.n	8004334 <HAL_GPIO_Init+0x1b4>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d007      	beq.n	8004334 <HAL_GPIO_Init+0x1b4>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x1b4>
 800432c:	21d5      	movs	r1, #213	; 0xd5
 800432e:	483b      	ldr	r0, [pc, #236]	; (800441c <HAL_GPIO_Init+0x29c>)
 8004330:	f7fe fefa 	bl	8003128 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	623b      	str	r3, [r7, #32]
          break;
 800433a:	e080      	b.n	800443e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d00b      	beq.n	800435c <HAL_GPIO_Init+0x1dc>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d007      	beq.n	800435c <HAL_GPIO_Init+0x1dc>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x1dc>
 8004354:	21dc      	movs	r1, #220	; 0xdc
 8004356:	4831      	ldr	r0, [pc, #196]	; (800441c <HAL_GPIO_Init+0x29c>)
 8004358:	f7fe fee6 	bl	8003128 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	3304      	adds	r3, #4
 8004362:	623b      	str	r3, [r7, #32]
          break;
 8004364:	e06b      	b.n	800443e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d00b      	beq.n	8004386 <HAL_GPIO_Init+0x206>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d007      	beq.n	8004386 <HAL_GPIO_Init+0x206>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b03      	cmp	r3, #3
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x206>
 800437e:	21e3      	movs	r1, #227	; 0xe3
 8004380:	4826      	ldr	r0, [pc, #152]	; (800441c <HAL_GPIO_Init+0x29c>)
 8004382:	f7fe fed1 	bl	8003128 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	3308      	adds	r3, #8
 800438c:	623b      	str	r3, [r7, #32]
          break;
 800438e:	e056      	b.n	800443e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d00b      	beq.n	80043b0 <HAL_GPIO_Init+0x230>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d007      	beq.n	80043b0 <HAL_GPIO_Init+0x230>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x230>
 80043a8:	21ea      	movs	r1, #234	; 0xea
 80043aa:	481c      	ldr	r0, [pc, #112]	; (800441c <HAL_GPIO_Init+0x29c>)
 80043ac:	f7fe febc 	bl	8003128 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	330c      	adds	r3, #12
 80043b6:	623b      	str	r3, [r7, #32]
          break;
 80043b8:	e041      	b.n	800443e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <HAL_GPIO_Init+0x25a>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d007      	beq.n	80043da <HAL_GPIO_Init+0x25a>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_Init+0x25a>
 80043d2:	21f7      	movs	r1, #247	; 0xf7
 80043d4:	4811      	ldr	r0, [pc, #68]	; (800441c <HAL_GPIO_Init+0x29c>)
 80043d6:	f7fe fea7 	bl	8003128 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043e2:	2304      	movs	r3, #4
 80043e4:	623b      	str	r3, [r7, #32]
          break;
 80043e6:	e02a      	b.n	800443e <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d105      	bne.n	80043fc <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043f0:	2308      	movs	r3, #8
 80043f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	611a      	str	r2, [r3, #16]
          break;
 80043fa:	e020      	b.n	800443e <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043fc:	2308      	movs	r3, #8
 80043fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	615a      	str	r2, [r3, #20]
          break;
 8004406:	e01a      	b.n	800443e <HAL_GPIO_Init+0x2be>
 8004408:	40010800 	.word	0x40010800
 800440c:	40010c00 	.word	0x40010c00
 8004410:	40011000 	.word	0x40011000
 8004414:	40011400 	.word	0x40011400
 8004418:	40011800 	.word	0x40011800
 800441c:	0800832c 	.word	0x0800832c
 8004420:	10110000 	.word	0x10110000
 8004424:	10210000 	.word	0x10210000
 8004428:	10310000 	.word	0x10310000
 800442c:	10120000 	.word	0x10120000
 8004430:	10220000 	.word	0x10220000
 8004434:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004438:	2300      	movs	r3, #0
 800443a:	623b      	str	r3, [r7, #32]
          break;
 800443c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2bff      	cmp	r3, #255	; 0xff
 8004442:	d801      	bhi.n	8004448 <HAL_GPIO_Init+0x2c8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	e001      	b.n	800444c <HAL_GPIO_Init+0x2cc>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2bff      	cmp	r3, #255	; 0xff
 8004452:	d802      	bhi.n	800445a <HAL_GPIO_Init+0x2da>
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	e002      	b.n	8004460 <HAL_GPIO_Init+0x2e0>
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	3b08      	subs	r3, #8
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	210f      	movs	r1, #15
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	401a      	ands	r2, r3
 8004472:	6a39      	ldr	r1, [r7, #32]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	431a      	orrs	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8096 	beq.w	80045ba <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800448e:	4b52      	ldr	r3, [pc, #328]	; (80045d8 <HAL_GPIO_Init+0x458>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	4a51      	ldr	r2, [pc, #324]	; (80045d8 <HAL_GPIO_Init+0x458>)
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	6193      	str	r3, [r2, #24]
 800449a:	4b4f      	ldr	r3, [pc, #316]	; (80045d8 <HAL_GPIO_Init+0x458>)
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044a6:	4a4d      	ldr	r2, [pc, #308]	; (80045dc <HAL_GPIO_Init+0x45c>)
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	089b      	lsrs	r3, r3, #2
 80044ac:	3302      	adds	r3, #2
 80044ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	220f      	movs	r2, #15
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4013      	ands	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a44      	ldr	r2, [pc, #272]	; (80045e0 <HAL_GPIO_Init+0x460>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d013      	beq.n	80044fa <HAL_GPIO_Init+0x37a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a43      	ldr	r2, [pc, #268]	; (80045e4 <HAL_GPIO_Init+0x464>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00d      	beq.n	80044f6 <HAL_GPIO_Init+0x376>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a42      	ldr	r2, [pc, #264]	; (80045e8 <HAL_GPIO_Init+0x468>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <HAL_GPIO_Init+0x372>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a41      	ldr	r2, [pc, #260]	; (80045ec <HAL_GPIO_Init+0x46c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_GPIO_Init+0x36e>
 80044ea:	2303      	movs	r3, #3
 80044ec:	e006      	b.n	80044fc <HAL_GPIO_Init+0x37c>
 80044ee:	2304      	movs	r3, #4
 80044f0:	e004      	b.n	80044fc <HAL_GPIO_Init+0x37c>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e002      	b.n	80044fc <HAL_GPIO_Init+0x37c>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_GPIO_Init+0x37c>
 80044fa:	2300      	movs	r3, #0
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	f002 0203 	and.w	r2, r2, #3
 8004502:	0092      	lsls	r2, r2, #2
 8004504:	4093      	lsls	r3, r2
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800450c:	4933      	ldr	r1, [pc, #204]	; (80045dc <HAL_GPIO_Init+0x45c>)
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	3302      	adds	r3, #2
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d006      	beq.n	8004534 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004526:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <HAL_GPIO_Init+0x470>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4931      	ldr	r1, [pc, #196]	; (80045f0 <HAL_GPIO_Init+0x470>)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
 8004532:	e006      	b.n	8004542 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004534:	4b2e      	ldr	r3, [pc, #184]	; (80045f0 <HAL_GPIO_Init+0x470>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	43db      	mvns	r3, r3
 800453c:	492c      	ldr	r1, [pc, #176]	; (80045f0 <HAL_GPIO_Init+0x470>)
 800453e:	4013      	ands	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800454e:	4b28      	ldr	r3, [pc, #160]	; (80045f0 <HAL_GPIO_Init+0x470>)
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	4927      	ldr	r1, [pc, #156]	; (80045f0 <HAL_GPIO_Init+0x470>)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	4313      	orrs	r3, r2
 8004558:	604b      	str	r3, [r1, #4]
 800455a:	e006      	b.n	800456a <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800455c:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <HAL_GPIO_Init+0x470>)
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	43db      	mvns	r3, r3
 8004564:	4922      	ldr	r1, [pc, #136]	; (80045f0 <HAL_GPIO_Init+0x470>)
 8004566:	4013      	ands	r3, r2
 8004568:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d006      	beq.n	8004584 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004576:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <HAL_GPIO_Init+0x470>)
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	491d      	ldr	r1, [pc, #116]	; (80045f0 <HAL_GPIO_Init+0x470>)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
 8004582:	e006      	b.n	8004592 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004584:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <HAL_GPIO_Init+0x470>)
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	43db      	mvns	r3, r3
 800458c:	4918      	ldr	r1, [pc, #96]	; (80045f0 <HAL_GPIO_Init+0x470>)
 800458e:	4013      	ands	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d006      	beq.n	80045ac <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800459e:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <HAL_GPIO_Init+0x470>)
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	4913      	ldr	r1, [pc, #76]	; (80045f0 <HAL_GPIO_Init+0x470>)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60cb      	str	r3, [r1, #12]
 80045aa:	e006      	b.n	80045ba <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80045ac:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <HAL_GPIO_Init+0x470>)
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	490e      	ldr	r1, [pc, #56]	; (80045f0 <HAL_GPIO_Init+0x470>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	3301      	adds	r3, #1
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f47f ae4f 	bne.w	800426e <HAL_GPIO_Init+0xee>
  }
}
 80045d0:	bf00      	nop
 80045d2:	3728      	adds	r7, #40	; 0x28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40010800 	.word	0x40010800
 80045e4:	40010c00 	.word	0x40010c00
 80045e8:	40011000 	.word	0x40011000
 80045ec:	40011400 	.word	0x40011400
 80045f0:	40010400 	.word	0x40010400

080045f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004600:	887b      	ldrh	r3, [r7, #2]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <HAL_GPIO_ReadPin+0x1c>
 8004606:	887b      	ldrh	r3, [r7, #2]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	d004      	beq.n	800461a <HAL_GPIO_ReadPin+0x26>
 8004610:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8004614:	4809      	ldr	r0, [pc, #36]	; (800463c <HAL_GPIO_ReadPin+0x48>)
 8004616:	f7fe fd87 	bl	8003128 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	887b      	ldrh	r3, [r7, #2]
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
 800462a:	e001      	b.n	8004630 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800462c:	2300      	movs	r3, #0
 800462e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004630:	7bfb      	ldrb	r3, [r7, #15]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	0800832c 	.word	0x0800832c

08004640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
 800464c:	4613      	mov	r3, r2
 800464e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004650:	887b      	ldrh	r3, [r7, #2]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <HAL_GPIO_WritePin+0x20>
 8004656:	887b      	ldrh	r3, [r7, #2]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <HAL_GPIO_WritePin+0x2a>
 8004660:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8004664:	480e      	ldr	r0, [pc, #56]	; (80046a0 <HAL_GPIO_WritePin+0x60>)
 8004666:	f7fe fd5f 	bl	8003128 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800466a:	787b      	ldrb	r3, [r7, #1]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_GPIO_WritePin+0x40>
 8004670:	787b      	ldrb	r3, [r7, #1]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d004      	beq.n	8004680 <HAL_GPIO_WritePin+0x40>
 8004676:	f240 11d5 	movw	r1, #469	; 0x1d5
 800467a:	4809      	ldr	r0, [pc, #36]	; (80046a0 <HAL_GPIO_WritePin+0x60>)
 800467c:	f7fe fd54 	bl	8003128 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004680:	787b      	ldrb	r3, [r7, #1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004686:	887a      	ldrh	r2, [r7, #2]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800468c:	e003      	b.n	8004696 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	041a      	lsls	r2, r3, #16
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	611a      	str	r2, [r3, #16]
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	0800832c 	.word	0x0800832c

080046a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80046b0:	887b      	ldrh	r3, [r7, #2]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d004      	beq.n	80046c0 <HAL_GPIO_TogglePin+0x1c>
 80046b6:	887b      	ldrh	r3, [r7, #2]
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	041b      	lsls	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <HAL_GPIO_TogglePin+0x26>
 80046c0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80046c4:	4809      	ldr	r0, [pc, #36]	; (80046ec <HAL_GPIO_TogglePin+0x48>)
 80046c6:	f7fe fd2f 	bl	8003128 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046d6:	887a      	ldrh	r2, [r7, #2]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80046dc:	e002      	b.n	80046e4 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046de:	887a      	ldrh	r2, [r7, #2]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	611a      	str	r2, [r3, #16]
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	0800832c 	.word	0x0800832c

080046f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e1ab      	b.n	8004a5a <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4aa0      	ldr	r2, [pc, #640]	; (8004988 <HAL_I2C_Init+0x298>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d009      	beq.n	8004720 <HAL_I2C_Init+0x30>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a9e      	ldr	r2, [pc, #632]	; (800498c <HAL_I2C_Init+0x29c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <HAL_I2C_Init+0x30>
 8004716:	f240 11d1 	movw	r1, #465	; 0x1d1
 800471a:	489d      	ldr	r0, [pc, #628]	; (8004990 <HAL_I2C_Init+0x2a0>)
 800471c:	f7fe fd04 	bl	8003128 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <HAL_I2C_Init+0x42>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4a99      	ldr	r2, [pc, #612]	; (8004994 <HAL_I2C_Init+0x2a4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d904      	bls.n	800473c <HAL_I2C_Init+0x4c>
 8004732:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8004736:	4896      	ldr	r0, [pc, #600]	; (8004990 <HAL_I2C_Init+0x2a0>)
 8004738:	f7fe fcf6 	bl	8003128 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d009      	beq.n	8004758 <HAL_I2C_Init+0x68>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800474c:	d004      	beq.n	8004758 <HAL_I2C_Init+0x68>
 800474e:	f240 11d3 	movw	r1, #467	; 0x1d3
 8004752:	488f      	ldr	r0, [pc, #572]	; (8004990 <HAL_I2C_Init+0x2a0>)
 8004754:	f7fe fce8 	bl	8003128 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004760:	f023 0303 	bic.w	r3, r3, #3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <HAL_I2C_Init+0x82>
 8004768:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800476c:	4888      	ldr	r0, [pc, #544]	; (8004990 <HAL_I2C_Init+0x2a0>)
 800476e:	f7fe fcdb 	bl	8003128 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800477a:	d009      	beq.n	8004790 <HAL_I2C_Init+0xa0>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004784:	d004      	beq.n	8004790 <HAL_I2C_Init+0xa0>
 8004786:	f240 11d5 	movw	r1, #469	; 0x1d5
 800478a:	4881      	ldr	r0, [pc, #516]	; (8004990 <HAL_I2C_Init+0x2a0>)
 800478c:	f7fe fccc 	bl	8003128 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_I2C_Init+0xba>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d004      	beq.n	80047aa <HAL_I2C_Init+0xba>
 80047a0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80047a4:	487a      	ldr	r0, [pc, #488]	; (8004990 <HAL_I2C_Init+0x2a0>)
 80047a6:	f7fe fcbf 	bl	8003128 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d004      	beq.n	80047c0 <HAL_I2C_Init+0xd0>
 80047b6:	f240 11d7 	movw	r1, #471	; 0x1d7
 80047ba:	4875      	ldr	r0, [pc, #468]	; (8004990 <HAL_I2C_Init+0x2a0>)
 80047bc:	f7fe fcb4 	bl	8003128 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_I2C_Init+0xea>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d004      	beq.n	80047da <HAL_I2C_Init+0xea>
 80047d0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80047d4:	486e      	ldr	r0, [pc, #440]	; (8004990 <HAL_I2C_Init+0x2a0>)
 80047d6:	f7fe fca7 	bl	8003128 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <HAL_I2C_Init+0x104>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	2b80      	cmp	r3, #128	; 0x80
 80047e8:	d004      	beq.n	80047f4 <HAL_I2C_Init+0x104>
 80047ea:	f240 11d9 	movw	r1, #473	; 0x1d9
 80047ee:	4868      	ldr	r0, [pc, #416]	; (8004990 <HAL_I2C_Init+0x2a0>)
 80047f0:	f7fe fc9a 	bl	8003128 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d106      	bne.n	800480e <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7fe fba1 	bl	8002f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2224      	movs	r2, #36	; 0x24
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004834:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004844:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004846:	f000 fe79 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 800484a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a51      	ldr	r2, [pc, #324]	; (8004998 <HAL_I2C_Init+0x2a8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d807      	bhi.n	8004866 <HAL_I2C_Init+0x176>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4a50      	ldr	r2, [pc, #320]	; (800499c <HAL_I2C_Init+0x2ac>)
 800485a:	4293      	cmp	r3, r2
 800485c:	bf94      	ite	ls
 800485e:	2301      	movls	r3, #1
 8004860:	2300      	movhi	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	e006      	b.n	8004874 <HAL_I2C_Init+0x184>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a4d      	ldr	r2, [pc, #308]	; (80049a0 <HAL_I2C_Init+0x2b0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	bf94      	ite	ls
 800486e:	2301      	movls	r3, #1
 8004870:	2300      	movhi	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0ee      	b.n	8004a5a <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a49      	ldr	r2, [pc, #292]	; (80049a4 <HAL_I2C_Init+0x2b4>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	0c9b      	lsrs	r3, r3, #18
 8004886:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <HAL_I2C_Init+0x2a8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d802      	bhi.n	80048b6 <HAL_I2C_Init+0x1c6>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	3301      	adds	r3, #1
 80048b4:	e009      	b.n	80048ca <HAL_I2C_Init+0x1da>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048bc:	fb02 f303 	mul.w	r3, r2, r3
 80048c0:	4a39      	ldr	r2, [pc, #228]	; (80049a8 <HAL_I2C_Init+0x2b8>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	3301      	adds	r3, #1
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	430b      	orrs	r3, r1
 80048d0:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048dc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	492c      	ldr	r1, [pc, #176]	; (8004998 <HAL_I2C_Init+0x2a8>)
 80048e6:	428b      	cmp	r3, r1
 80048e8:	d80d      	bhi.n	8004906 <HAL_I2C_Init+0x216>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1e59      	subs	r1, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80048f8:	3301      	adds	r3, #1
 80048fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fe:	2b04      	cmp	r3, #4
 8004900:	bf38      	it	cc
 8004902:	2304      	movcc	r3, #4
 8004904:	e062      	b.n	80049cc <HAL_I2C_Init+0x2dc>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d111      	bne.n	8004932 <HAL_I2C_Init+0x242>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1e58      	subs	r0, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6859      	ldr	r1, [r3, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	440b      	add	r3, r1
 800491c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004920:	3301      	adds	r3, #1
 8004922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004926:	2b00      	cmp	r3, #0
 8004928:	bf0c      	ite	eq
 800492a:	2301      	moveq	r3, #1
 800492c:	2300      	movne	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	e012      	b.n	8004958 <HAL_I2C_Init+0x268>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1e58      	subs	r0, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6859      	ldr	r1, [r3, #4]
 800493a:	460b      	mov	r3, r1
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	0099      	lsls	r1, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	fbb0 f3f3 	udiv	r3, r0, r3
 8004948:	3301      	adds	r3, #1
 800494a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494e:	2b00      	cmp	r3, #0
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_I2C_Init+0x270>
 800495c:	2301      	movs	r3, #1
 800495e:	e035      	b.n	80049cc <HAL_I2C_Init+0x2dc>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d121      	bne.n	80049ac <HAL_I2C_Init+0x2bc>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	1e58      	subs	r0, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6859      	ldr	r1, [r3, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	440b      	add	r3, r1
 8004976:	fbb0 f3f3 	udiv	r3, r0, r3
 800497a:	3301      	adds	r3, #1
 800497c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004984:	e022      	b.n	80049cc <HAL_I2C_Init+0x2dc>
 8004986:	bf00      	nop
 8004988:	40005400 	.word	0x40005400
 800498c:	40005800 	.word	0x40005800
 8004990:	08008368 	.word	0x08008368
 8004994:	00061a80 	.word	0x00061a80
 8004998:	000186a0 	.word	0x000186a0
 800499c:	001e847f 	.word	0x001e847f
 80049a0:	003d08ff 	.word	0x003d08ff
 80049a4:	431bde83 	.word	0x431bde83
 80049a8:	10624dd3 	.word	0x10624dd3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1e58      	subs	r0, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	0099      	lsls	r1, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c2:	3301      	adds	r3, #1
 80049c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	6809      	ldr	r1, [r1, #0]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6911      	ldr	r1, [r2, #16]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68d2      	ldr	r2, [r2, #12]
 8004a06:	4311      	orrs	r1, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop

08004a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e35c      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01c      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x54>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d116      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x54>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d110      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x54>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10a      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x54>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d104      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x54>
 8004aae:	f240 1167 	movw	r1, #359	; 0x167
 8004ab2:	48a5      	ldr	r0, [pc, #660]	; (8004d48 <HAL_RCC_OscConfig+0x2e4>)
 8004ab4:	f7fe fb38 	bl	8003128 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 809a 	beq.w	8004bfa <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <HAL_RCC_OscConfig+0x88>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad6:	d009      	beq.n	8004aec <HAL_RCC_OscConfig+0x88>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae0:	d004      	beq.n	8004aec <HAL_RCC_OscConfig+0x88>
 8004ae2:	f240 116d 	movw	r1, #365	; 0x16d
 8004ae6:	4898      	ldr	r0, [pc, #608]	; (8004d48 <HAL_RCC_OscConfig+0x2e4>)
 8004ae8:	f7fe fb1e 	bl	8003128 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aec:	4b97      	ldr	r3, [pc, #604]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d00c      	beq.n	8004b12 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004af8:	4b94      	ldr	r3, [pc, #592]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 030c 	and.w	r3, r3, #12
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d112      	bne.n	8004b2a <HAL_RCC_OscConfig+0xc6>
 8004b04:	4b91      	ldr	r3, [pc, #580]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b10:	d10b      	bne.n	8004b2a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b12:	4b8e      	ldr	r3, [pc, #568]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d06c      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x194>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d168      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e302      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b32:	d106      	bne.n	8004b42 <HAL_RCC_OscConfig+0xde>
 8004b34:	4b85      	ldr	r3, [pc, #532]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a84      	ldr	r2, [pc, #528]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	e02e      	b.n	8004ba0 <HAL_RCC_OscConfig+0x13c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x100>
 8004b4a:	4b80      	ldr	r3, [pc, #512]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a7f      	ldr	r2, [pc, #508]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	4b7d      	ldr	r3, [pc, #500]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a7c      	ldr	r2, [pc, #496]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e01d      	b.n	8004ba0 <HAL_RCC_OscConfig+0x13c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x124>
 8004b6e:	4b77      	ldr	r3, [pc, #476]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a76      	ldr	r2, [pc, #472]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	4b74      	ldr	r3, [pc, #464]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a73      	ldr	r2, [pc, #460]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x13c>
 8004b88:	4b70      	ldr	r3, [pc, #448]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a6f      	ldr	r2, [pc, #444]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4b6d      	ldr	r3, [pc, #436]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6c      	ldr	r2, [pc, #432]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d013      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fe fda4 	bl	80036f4 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fe fda0 	bl	80036f4 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e2b6      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc2:	4b62      	ldr	r3, [pc, #392]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x14c>
 8004bce:	e014      	b.n	8004bfa <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fe fd90 	bl	80036f4 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fe fd8c 	bl	80036f4 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e2a2      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bea:	4b58      	ldr	r3, [pc, #352]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x174>
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d079      	beq.n	8004cfa <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_RCC_OscConfig+0x1bc>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d004      	beq.n	8004c20 <HAL_RCC_OscConfig+0x1bc>
 8004c16:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004c1a:	484b      	ldr	r0, [pc, #300]	; (8004d48 <HAL_RCC_OscConfig+0x2e4>)
 8004c1c:	f7fe fa84 	bl	8003128 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	2b1f      	cmp	r3, #31
 8004c26:	d904      	bls.n	8004c32 <HAL_RCC_OscConfig+0x1ce>
 8004c28:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004c2c:	4846      	ldr	r0, [pc, #280]	; (8004d48 <HAL_RCC_OscConfig+0x2e4>)
 8004c2e:	f7fe fa7b 	bl	8003128 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c32:	4b46      	ldr	r3, [pc, #280]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c3e:	4b43      	ldr	r3, [pc, #268]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d11c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x220>
 8004c4a:	4b40      	ldr	r3, [pc, #256]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d116      	bne.n	8004c84 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c56:	4b3d      	ldr	r3, [pc, #244]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_RCC_OscConfig+0x20a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e260      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6e:	4b37      	ldr	r3, [pc, #220]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4933      	ldr	r1, [pc, #204]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c82:	e03a      	b.n	8004cfa <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d020      	beq.n	8004cce <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c8c:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_RCC_OscConfig+0x2ec>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c92:	f7fe fd2f 	bl	80036f4 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c9a:	f7fe fd2b 	bl	80036f4 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e241      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cac:	4b27      	ldr	r3, [pc, #156]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb8:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4921      	ldr	r1, [pc, #132]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]
 8004ccc:	e015      	b.n	8004cfa <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cce:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <HAL_RCC_OscConfig+0x2ec>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fe fd0e 	bl	80036f4 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cdc:	f7fe fd0a 	bl	80036f4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e220      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cee:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <HAL_RCC_OscConfig+0x2e8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d048      	beq.n	8004d98 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_RCC_OscConfig+0x2bc>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d004      	beq.n	8004d20 <HAL_RCC_OscConfig+0x2bc>
 8004d16:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004d1a:	480b      	ldr	r0, [pc, #44]	; (8004d48 <HAL_RCC_OscConfig+0x2e4>)
 8004d1c:	f7fe fa04 	bl	8003128 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d021      	beq.n	8004d6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_RCC_OscConfig+0x2f0>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2e:	f7fe fce1 	bl	80036f4 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d34:	e010      	b.n	8004d58 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d36:	f7fe fcdd 	bl	80036f4 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d909      	bls.n	8004d58 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e1f3      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
 8004d48:	080083a0 	.word	0x080083a0
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	42420000 	.word	0x42420000
 8004d54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d58:	4b67      	ldr	r3, [pc, #412]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0e8      	beq.n	8004d36 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d64:	2001      	movs	r0, #1
 8004d66:	f000 fc11 	bl	800558c <RCC_Delay>
 8004d6a:	e015      	b.n	8004d98 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d6c:	4b63      	ldr	r3, [pc, #396]	; (8004efc <HAL_RCC_OscConfig+0x498>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d72:	f7fe fcbf 	bl	80036f4 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d7a:	f7fe fcbb 	bl	80036f4 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e1d1      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d8c:	4b5a      	ldr	r3, [pc, #360]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1f0      	bne.n	8004d7a <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 80c0 	beq.w	8004f26 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da6:	2300      	movs	r3, #0
 8004da8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00c      	beq.n	8004dcc <HAL_RCC_OscConfig+0x368>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d008      	beq.n	8004dcc <HAL_RCC_OscConfig+0x368>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b05      	cmp	r3, #5
 8004dc0:	d004      	beq.n	8004dcc <HAL_RCC_OscConfig+0x368>
 8004dc2:	f240 2111 	movw	r1, #529	; 0x211
 8004dc6:	484e      	ldr	r0, [pc, #312]	; (8004f00 <HAL_RCC_OscConfig+0x49c>)
 8004dc8:	f7fe f9ae 	bl	8003128 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dcc:	4b4a      	ldr	r3, [pc, #296]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10d      	bne.n	8004df4 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd8:	4b47      	ldr	r3, [pc, #284]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	4a46      	ldr	r2, [pc, #280]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de2:	61d3      	str	r3, [r2, #28]
 8004de4:	4b44      	ldr	r3, [pc, #272]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df0:	2301      	movs	r3, #1
 8004df2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df4:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <HAL_RCC_OscConfig+0x4a0>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d118      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e00:	4b40      	ldr	r3, [pc, #256]	; (8004f04 <HAL_RCC_OscConfig+0x4a0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a3f      	ldr	r2, [pc, #252]	; (8004f04 <HAL_RCC_OscConfig+0x4a0>)
 8004e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0c:	f7fe fc72 	bl	80036f4 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e14:	f7fe fc6e 	bl	80036f4 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e184      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e26:	4b37      	ldr	r3, [pc, #220]	; (8004f04 <HAL_RCC_OscConfig+0x4a0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d106      	bne.n	8004e48 <HAL_RCC_OscConfig+0x3e4>
 8004e3a:	4b2f      	ldr	r3, [pc, #188]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	4a2e      	ldr	r2, [pc, #184]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	6213      	str	r3, [r2, #32]
 8004e46:	e02d      	b.n	8004ea4 <HAL_RCC_OscConfig+0x440>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10c      	bne.n	8004e6a <HAL_RCC_OscConfig+0x406>
 8004e50:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	4a28      	ldr	r2, [pc, #160]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	6213      	str	r3, [r2, #32]
 8004e5c:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	4a25      	ldr	r2, [pc, #148]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e62:	f023 0304 	bic.w	r3, r3, #4
 8004e66:	6213      	str	r3, [r2, #32]
 8004e68:	e01c      	b.n	8004ea4 <HAL_RCC_OscConfig+0x440>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	2b05      	cmp	r3, #5
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCC_OscConfig+0x428>
 8004e72:	4b21      	ldr	r3, [pc, #132]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e78:	f043 0304 	orr.w	r3, r3, #4
 8004e7c:	6213      	str	r3, [r2, #32]
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6213      	str	r3, [r2, #32]
 8004e8a:	e00b      	b.n	8004ea4 <HAL_RCC_OscConfig+0x440>
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	6213      	str	r3, [r2, #32]
 8004e98:	4b17      	ldr	r3, [pc, #92]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	4a16      	ldr	r2, [pc, #88]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004e9e:	f023 0304 	bic.w	r3, r3, #4
 8004ea2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eac:	f7fe fc22 	bl	80036f4 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb4:	f7fe fc1e 	bl	80036f4 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e132      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCC_OscConfig+0x494>)
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0ee      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x450>
 8004ed6:	e01d      	b.n	8004f14 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed8:	f7fe fc0c 	bl	80036f4 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ede:	e013      	b.n	8004f08 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fe fc08 	bl	80036f4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d90a      	bls.n	8004f08 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e11c      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	42420480 	.word	0x42420480
 8004f00:	080083a0 	.word	0x080083a0
 8004f04:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f08:	4b8b      	ldr	r3, [pc, #556]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e5      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d105      	bne.n	8004f26 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1a:	4b87      	ldr	r3, [pc, #540]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	4a86      	ldr	r2, [pc, #536]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 8004f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f24:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00c      	beq.n	8004f48 <HAL_RCC_OscConfig+0x4e4>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d008      	beq.n	8004f48 <HAL_RCC_OscConfig+0x4e4>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d004      	beq.n	8004f48 <HAL_RCC_OscConfig+0x4e4>
 8004f3e:	f240 21af 	movw	r1, #687	; 0x2af
 8004f42:	487e      	ldr	r0, [pc, #504]	; (800513c <HAL_RCC_OscConfig+0x6d8>)
 8004f44:	f7fe f8f0 	bl	8003128 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80ee 	beq.w	800512e <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f52:	4b79      	ldr	r3, [pc, #484]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	f000 80ce 	beq.w	80050fc <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	f040 80b2 	bne.w	80050ce <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <HAL_RCC_OscConfig+0x522>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7a:	d004      	beq.n	8004f86 <HAL_RCC_OscConfig+0x522>
 8004f7c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8004f80:	486e      	ldr	r0, [pc, #440]	; (800513c <HAL_RCC_OscConfig+0x6d8>)
 8004f82:	f7fe f8d1 	bl	8003128 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d04a      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f96:	d045      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fa0:	d040      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004faa:	d03b      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb4:	d036      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004fbe:	d031      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004fc8:	d02c      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004fd2:	d027      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fdc:	d022      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004fe6:	d01d      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ff0:	d018      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ffa:	d013      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005004:	d00e      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800500e:	d009      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005018:	d004      	beq.n	8005024 <HAL_RCC_OscConfig+0x5c0>
 800501a:	f240 21b9 	movw	r1, #697	; 0x2b9
 800501e:	4847      	ldr	r0, [pc, #284]	; (800513c <HAL_RCC_OscConfig+0x6d8>)
 8005020:	f7fe f882 	bl	8003128 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005024:	4b46      	ldr	r3, [pc, #280]	; (8005140 <HAL_RCC_OscConfig+0x6dc>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502a:	f7fe fb63 	bl	80036f4 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005032:	f7fe fb5f 	bl	80036f4 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e075      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005044:	4b3c      	ldr	r3, [pc, #240]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f0      	bne.n	8005032 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005058:	d116      	bne.n	8005088 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <HAL_RCC_OscConfig+0x612>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800506a:	d004      	beq.n	8005076 <HAL_RCC_OscConfig+0x612>
 800506c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8005070:	4832      	ldr	r0, [pc, #200]	; (800513c <HAL_RCC_OscConfig+0x6d8>)
 8005072:	f7fe f859 	bl	8003128 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005076:	4b30      	ldr	r3, [pc, #192]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	492d      	ldr	r1, [pc, #180]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005088:	4b2b      	ldr	r3, [pc, #172]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a19      	ldr	r1, [r3, #32]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	430b      	orrs	r3, r1
 800509a:	4927      	ldr	r1, [pc, #156]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 800509c:	4313      	orrs	r3, r2
 800509e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a0:	4b27      	ldr	r3, [pc, #156]	; (8005140 <HAL_RCC_OscConfig+0x6dc>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a6:	f7fe fb25 	bl	80036f4 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ae:	f7fe fb21 	bl	80036f4 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e037      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050c0:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0x64a>
 80050cc:	e02f      	b.n	800512e <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ce:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <HAL_RCC_OscConfig+0x6dc>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fe fb0e 	bl	80036f4 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fe fb0a 	bl	80036f4 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e020      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x678>
 80050fa:	e018      	b.n	800512e <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e013      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <HAL_RCC_OscConfig+0x6d4>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	429a      	cmp	r2, r3
 800511a:	d106      	bne.n	800512a <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005126:	429a      	cmp	r2, r3
 8005128:	d001      	beq.n	800512e <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40021000 	.word	0x40021000
 800513c:	080083a0 	.word	0x080083a0
 8005140:	42420060 	.word	0x42420060

08005144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e176      	b.n	8005446 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d116      	bne.n	8005192 <HAL_RCC_ClockConfig+0x4e>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d110      	bne.n	8005192 <HAL_RCC_ClockConfig+0x4e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <HAL_RCC_ClockConfig+0x4e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <HAL_RCC_ClockConfig+0x4e>
 8005188:	f44f 714e 	mov.w	r1, #824	; 0x338
 800518c:	4874      	ldr	r0, [pc, #464]	; (8005360 <HAL_RCC_ClockConfig+0x21c>)
 800518e:	f7fd ffcb 	bl	8003128 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCC_ClockConfig+0x6a>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d007      	beq.n	80051ae <HAL_RCC_ClockConfig+0x6a>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d004      	beq.n	80051ae <HAL_RCC_ClockConfig+0x6a>
 80051a4:	f240 3139 	movw	r1, #825	; 0x339
 80051a8:	486d      	ldr	r0, [pc, #436]	; (8005360 <HAL_RCC_ClockConfig+0x21c>)
 80051aa:	f7fd ffbd 	bl	8003128 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051ae:	4b6d      	ldr	r3, [pc, #436]	; (8005364 <HAL_RCC_ClockConfig+0x220>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d910      	bls.n	80051de <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051bc:	4b69      	ldr	r3, [pc, #420]	; (8005364 <HAL_RCC_ClockConfig+0x220>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f023 0207 	bic.w	r2, r3, #7
 80051c4:	4967      	ldr	r1, [pc, #412]	; (8005364 <HAL_RCC_ClockConfig+0x220>)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051cc:	4b65      	ldr	r3, [pc, #404]	; (8005364 <HAL_RCC_ClockConfig+0x220>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d001      	beq.n	80051de <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e133      	b.n	8005446 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d049      	beq.n	800527e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051f6:	4b5c      	ldr	r3, [pc, #368]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	4a5b      	ldr	r2, [pc, #364]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 80051fc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005200:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800520e:	4b56      	ldr	r3, [pc, #344]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4a55      	ldr	r2, [pc, #340]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 8005214:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005218:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d024      	beq.n	800526c <HAL_RCC_ClockConfig+0x128>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d020      	beq.n	800526c <HAL_RCC_ClockConfig+0x128>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b90      	cmp	r3, #144	; 0x90
 8005230:	d01c      	beq.n	800526c <HAL_RCC_ClockConfig+0x128>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2ba0      	cmp	r3, #160	; 0xa0
 8005238:	d018      	beq.n	800526c <HAL_RCC_ClockConfig+0x128>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2bb0      	cmp	r3, #176	; 0xb0
 8005240:	d014      	beq.n	800526c <HAL_RCC_ClockConfig+0x128>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2bc0      	cmp	r3, #192	; 0xc0
 8005248:	d010      	beq.n	800526c <HAL_RCC_ClockConfig+0x128>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2bd0      	cmp	r3, #208	; 0xd0
 8005250:	d00c      	beq.n	800526c <HAL_RCC_ClockConfig+0x128>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2be0      	cmp	r3, #224	; 0xe0
 8005258:	d008      	beq.n	800526c <HAL_RCC_ClockConfig+0x128>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2bf0      	cmp	r3, #240	; 0xf0
 8005260:	d004      	beq.n	800526c <HAL_RCC_ClockConfig+0x128>
 8005262:	f240 315f 	movw	r1, #863	; 0x35f
 8005266:	483e      	ldr	r0, [pc, #248]	; (8005360 <HAL_RCC_ClockConfig+0x21c>)
 8005268:	f7fd ff5e 	bl	8003128 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800526c:	4b3e      	ldr	r3, [pc, #248]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	493b      	ldr	r1, [pc, #236]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 800527a:	4313      	orrs	r3, r2
 800527c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d051      	beq.n	800532e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <HAL_RCC_ClockConfig+0x168>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d008      	beq.n	80052ac <HAL_RCC_ClockConfig+0x168>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d004      	beq.n	80052ac <HAL_RCC_ClockConfig+0x168>
 80052a2:	f240 3166 	movw	r1, #870	; 0x366
 80052a6:	482e      	ldr	r0, [pc, #184]	; (8005360 <HAL_RCC_ClockConfig+0x21c>)
 80052a8:	f7fd ff3e 	bl	8003128 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d107      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b4:	4b2c      	ldr	r3, [pc, #176]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d115      	bne.n	80052ec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0c0      	b.n	8005446 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d107      	bne.n	80052dc <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052cc:	4b26      	ldr	r3, [pc, #152]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d109      	bne.n	80052ec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0b4      	b.n	8005446 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052dc:	4b22      	ldr	r3, [pc, #136]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0ac      	b.n	8005446 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ec:	4b1e      	ldr	r3, [pc, #120]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f023 0203 	bic.w	r2, r3, #3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	491b      	ldr	r1, [pc, #108]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052fe:	f7fe f9f9 	bl	80036f4 <HAL_GetTick>
 8005302:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005304:	e00a      	b.n	800531c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005306:	f7fe f9f5 	bl	80036f4 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f241 3288 	movw	r2, #5000	; 0x1388
 8005314:	4293      	cmp	r3, r2
 8005316:	d901      	bls.n	800531c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e094      	b.n	8005446 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531c:	4b12      	ldr	r3, [pc, #72]	; (8005368 <HAL_RCC_ClockConfig+0x224>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f003 020c 	and.w	r2, r3, #12
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	429a      	cmp	r2, r3
 800532c:	d1eb      	bne.n	8005306 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800532e:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <HAL_RCC_ClockConfig+0x220>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d217      	bcs.n	800536c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCC_ClockConfig+0x220>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f023 0207 	bic.w	r2, r3, #7
 8005344:	4907      	ldr	r1, [pc, #28]	; (8005364 <HAL_RCC_ClockConfig+0x220>)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_RCC_ClockConfig+0x220>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d008      	beq.n	800536c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e073      	b.n	8005446 <HAL_RCC_ClockConfig+0x302>
 800535e:	bf00      	nop
 8005360:	080083a0 	.word	0x080083a0
 8005364:	40022000 	.word	0x40022000
 8005368:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d025      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d018      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x26e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005388:	d013      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x26e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005392:	d00e      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x26e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800539c:	d009      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x26e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053a6:	d004      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x26e>
 80053a8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80053ac:	4828      	ldr	r0, [pc, #160]	; (8005450 <HAL_RCC_ClockConfig+0x30c>)
 80053ae:	f7fd febb 	bl	8003128 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b2:	4b28      	ldr	r3, [pc, #160]	; (8005454 <HAL_RCC_ClockConfig+0x310>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	4925      	ldr	r1, [pc, #148]	; (8005454 <HAL_RCC_ClockConfig+0x310>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d026      	beq.n	800541e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d018      	beq.n	800540a <HAL_RCC_ClockConfig+0x2c6>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e0:	d013      	beq.n	800540a <HAL_RCC_ClockConfig+0x2c6>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80053ea:	d00e      	beq.n	800540a <HAL_RCC_ClockConfig+0x2c6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053f4:	d009      	beq.n	800540a <HAL_RCC_ClockConfig+0x2c6>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053fe:	d004      	beq.n	800540a <HAL_RCC_ClockConfig+0x2c6>
 8005400:	f240 31ab 	movw	r1, #939	; 0x3ab
 8005404:	4812      	ldr	r0, [pc, #72]	; (8005450 <HAL_RCC_ClockConfig+0x30c>)
 8005406:	f7fd fe8f 	bl	8003128 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <HAL_RCC_ClockConfig+0x310>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	490e      	ldr	r1, [pc, #56]	; (8005454 <HAL_RCC_ClockConfig+0x310>)
 800541a:	4313      	orrs	r3, r2
 800541c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800541e:	f000 f821 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 8005422:	4601      	mov	r1, r0
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <HAL_RCC_ClockConfig+0x310>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <HAL_RCC_ClockConfig+0x314>)
 8005430:	5cd3      	ldrb	r3, [r2, r3]
 8005432:	fa21 f303 	lsr.w	r3, r1, r3
 8005436:	4a09      	ldr	r2, [pc, #36]	; (800545c <HAL_RCC_ClockConfig+0x318>)
 8005438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <HAL_RCC_ClockConfig+0x31c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe f916 	bl	8003670 <HAL_InitTick>

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	080083a0 	.word	0x080083a0
 8005454:	40021000 	.word	0x40021000
 8005458:	08008658 	.word	0x08008658
 800545c:	20000000 	.word	0x20000000
 8005460:	20000004 	.word	0x20000004

08005464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005464:	b490      	push	{r4, r7}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800546a:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <HAL_RCC_GetSysClockFreq+0xb0>)
 800546c:	1d3c      	adds	r4, r7, #4
 800546e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005474:	4b28      	ldr	r3, [pc, #160]	; (8005518 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
 800547e:	2300      	movs	r3, #0
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	2300      	movs	r3, #0
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800548e:	4b23      	ldr	r3, [pc, #140]	; (800551c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	2b04      	cmp	r3, #4
 800549c:	d002      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x40>
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d003      	beq.n	80054aa <HAL_RCC_GetSysClockFreq+0x46>
 80054a2:	e02d      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054a4:	4b1e      	ldr	r3, [pc, #120]	; (8005520 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054a6:	623b      	str	r3, [r7, #32]
      break;
 80054a8:	e02d      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	0c9b      	lsrs	r3, r3, #18
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054b6:	4413      	add	r3, r2
 80054b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80054bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d013      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	0c5b      	lsrs	r3, r3, #17
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054d6:	4413      	add	r3, r2
 80054d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4a0f      	ldr	r2, [pc, #60]	; (8005520 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054e2:	fb02 f203 	mul.w	r2, r2, r3
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
 80054ee:	e004      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054f4:	fb02 f303 	mul.w	r3, r2, r3
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	623b      	str	r3, [r7, #32]
      break;
 80054fe:	e002      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005502:	623b      	str	r3, [r7, #32]
      break;
 8005504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005506:	6a3b      	ldr	r3, [r7, #32]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3728      	adds	r7, #40	; 0x28
 800550c:	46bd      	mov	sp, r7
 800550e:	bc90      	pop	{r4, r7}
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	080083d8 	.word	0x080083d8
 8005518:	080083e8 	.word	0x080083e8
 800551c:	40021000 	.word	0x40021000
 8005520:	007a1200 	.word	0x007a1200
 8005524:	003d0900 	.word	0x003d0900

08005528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800552c:	4b02      	ldr	r3, [pc, #8]	; (8005538 <HAL_RCC_GetHCLKFreq+0x10>)
 800552e:	681b      	ldr	r3, [r3, #0]
}
 8005530:	4618      	mov	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr
 8005538:	20000000 	.word	0x20000000

0800553c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005540:	f7ff fff2 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005544:	4601      	mov	r1, r0
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	0a1b      	lsrs	r3, r3, #8
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4a03      	ldr	r2, [pc, #12]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005552:	5cd3      	ldrb	r3, [r2, r3]
 8005554:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40021000 	.word	0x40021000
 8005560:	08008668 	.word	0x08008668

08005564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005568:	f7ff ffde 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 800556c:	4601      	mov	r1, r0
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	0adb      	lsrs	r3, r3, #11
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4a03      	ldr	r2, [pc, #12]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800557a:	5cd3      	ldrb	r3, [r2, r3]
 800557c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000
 8005588:	08008668 	.word	0x08008668

0800558c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005594:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <RCC_Delay+0x34>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a0a      	ldr	r2, [pc, #40]	; (80055c4 <RCC_Delay+0x38>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	0a5b      	lsrs	r3, r3, #9
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055a8:	bf00      	nop
  }
  while (Delay --);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1e5a      	subs	r2, r3, #1
 80055ae:	60fa      	str	r2, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f9      	bne.n	80055a8 <RCC_Delay+0x1c>
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000000 	.word	0x20000000
 80055c4:	10624dd3 	.word	0x10624dd3

080055c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10f      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d103      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80055fc:	216c      	movs	r1, #108	; 0x6c
 80055fe:	4873      	ldr	r0, [pc, #460]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005600:	f7fd fd92 	bl	8003128 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8095 	beq.w	800573c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d012      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005622:	d00d      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562c:	d008      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005636:	d003      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005638:	2172      	movs	r1, #114	; 0x72
 800563a:	4864      	ldr	r0, [pc, #400]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800563c:	f7fd fd74 	bl	8003128 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8005640:	2300      	movs	r3, #0
 8005642:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005644:	4b62      	ldr	r3, [pc, #392]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10d      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005650:	4b5f      	ldr	r3, [pc, #380]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	4a5e      	ldr	r2, [pc, #376]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565a:	61d3      	str	r3, [r2, #28]
 800565c:	4b5c      	ldr	r3, [pc, #368]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005664:	60bb      	str	r3, [r7, #8]
 8005666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005668:	2301      	movs	r3, #1
 800566a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566c:	4b59      	ldr	r3, [pc, #356]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d118      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005678:	4b56      	ldr	r3, [pc, #344]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a55      	ldr	r2, [pc, #340]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800567e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005684:	f7fe f836 	bl	80036f4 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568a:	e008      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568c:	f7fe f832 	bl	80036f4 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b64      	cmp	r3, #100	; 0x64
 8005698:	d901      	bls.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e092      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569e:	4b4d      	ldr	r3, [pc, #308]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056aa:	4b49      	ldr	r3, [pc, #292]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d02e      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d027      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056c8:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056d2:	4b41      	ldr	r3, [pc, #260]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056d8:	4b3f      	ldr	r3, [pc, #252]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056de:	4a3c      	ldr	r2, [pc, #240]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d014      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ee:	f7fe f801 	bl	80036f4 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f4:	e00a      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f6:	f7fd fffd 	bl	80036f4 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	f241 3288 	movw	r2, #5000	; 0x1388
 8005704:	4293      	cmp	r3, r2
 8005706:	d901      	bls.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e05b      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570c:	4b30      	ldr	r3, [pc, #192]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ee      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005718:	4b2d      	ldr	r3, [pc, #180]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	492a      	ldr	r1, [pc, #168]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005726:	4313      	orrs	r3, r2
 8005728:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d105      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005730:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	4a26      	ldr	r2, [pc, #152]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800573a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01f      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d012      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005758:	d00d      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005762:	d008      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800576c:	d003      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800576e:	21b9      	movs	r1, #185	; 0xb9
 8005770:	4816      	ldr	r0, [pc, #88]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005772:	f7fd fcd9 	bl	8003128 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005776:	4b16      	ldr	r3, [pc, #88]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	4913      	ldr	r1, [pc, #76]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b00      	cmp	r3, #0
 8005792:	d016      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800579c:	d008      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057a6:	f240 1115 	movw	r1, #277	; 0x115
 80057aa:	4808      	ldr	r0, [pc, #32]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80057ac:	f7fd fcbc 	bl	8003128 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057b0:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	4904      	ldr	r1, [pc, #16]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	080083ec 	.word	0x080083ec
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40007000 	.word	0x40007000
 80057d8:	42420440 	.word	0x42420440

080057dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e0fd      	b.n	80059ea <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a80      	ldr	r2, [pc, #512]	; (80059f4 <HAL_SPI_Init+0x218>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d009      	beq.n	800580c <HAL_SPI_Init+0x30>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a7e      	ldr	r2, [pc, #504]	; (80059f8 <HAL_SPI_Init+0x21c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d004      	beq.n	800580c <HAL_SPI_Init+0x30>
 8005802:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005806:	487d      	ldr	r0, [pc, #500]	; (80059fc <HAL_SPI_Init+0x220>)
 8005808:	f7fd fc8e 	bl	8003128 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <HAL_SPI_Init+0x4c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581c:	d004      	beq.n	8005828 <HAL_SPI_Init+0x4c>
 800581e:	f240 1159 	movw	r1, #345	; 0x159
 8005822:	4876      	ldr	r0, [pc, #472]	; (80059fc <HAL_SPI_Init+0x220>)
 8005824:	f7fd fc80 	bl	8003128 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00e      	beq.n	800584e <HAL_SPI_Init+0x72>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005838:	d009      	beq.n	800584e <HAL_SPI_Init+0x72>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005842:	d004      	beq.n	800584e <HAL_SPI_Init+0x72>
 8005844:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8005848:	486c      	ldr	r0, [pc, #432]	; (80059fc <HAL_SPI_Init+0x220>)
 800584a:	f7fd fc6d 	bl	8003128 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005856:	d008      	beq.n	800586a <HAL_SPI_Init+0x8e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <HAL_SPI_Init+0x8e>
 8005860:	f240 115b 	movw	r1, #347	; 0x15b
 8005864:	4865      	ldr	r0, [pc, #404]	; (80059fc <HAL_SPI_Init+0x220>)
 8005866:	f7fd fc5f 	bl	8003128 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005872:	d00d      	beq.n	8005890 <HAL_SPI_Init+0xb4>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d009      	beq.n	8005890 <HAL_SPI_Init+0xb4>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005884:	d004      	beq.n	8005890 <HAL_SPI_Init+0xb4>
 8005886:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800588a:	485c      	ldr	r0, [pc, #368]	; (80059fc <HAL_SPI_Init+0x220>)
 800588c:	f7fd fc4c 	bl	8003128 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d020      	beq.n	80058da <HAL_SPI_Init+0xfe>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d01c      	beq.n	80058da <HAL_SPI_Init+0xfe>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d018      	beq.n	80058da <HAL_SPI_Init+0xfe>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	2b18      	cmp	r3, #24
 80058ae:	d014      	beq.n	80058da <HAL_SPI_Init+0xfe>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d010      	beq.n	80058da <HAL_SPI_Init+0xfe>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	2b28      	cmp	r3, #40	; 0x28
 80058be:	d00c      	beq.n	80058da <HAL_SPI_Init+0xfe>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	2b30      	cmp	r3, #48	; 0x30
 80058c6:	d008      	beq.n	80058da <HAL_SPI_Init+0xfe>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	2b38      	cmp	r3, #56	; 0x38
 80058ce:	d004      	beq.n	80058da <HAL_SPI_Init+0xfe>
 80058d0:	f240 115d 	movw	r1, #349	; 0x15d
 80058d4:	4849      	ldr	r0, [pc, #292]	; (80059fc <HAL_SPI_Init+0x220>)
 80058d6:	f7fd fc27 	bl	8003128 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_SPI_Init+0x118>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d004      	beq.n	80058f4 <HAL_SPI_Init+0x118>
 80058ea:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80058ee:	4843      	ldr	r0, [pc, #268]	; (80059fc <HAL_SPI_Init+0x220>)
 80058f0:	f7fd fc1a 	bl	8003128 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <HAL_SPI_Init+0x12a>
 80058fc:	f240 1161 	movw	r1, #353	; 0x161
 8005900:	483e      	ldr	r0, [pc, #248]	; (80059fc <HAL_SPI_Init+0x220>)
 8005902:	f7fd fc11 	bl	8003128 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	2b00      	cmp	r3, #0
 800590c:	d119      	bne.n	8005942 <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_SPI_Init+0x14c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d004      	beq.n	8005928 <HAL_SPI_Init+0x14c>
 800591e:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8005922:	4836      	ldr	r0, [pc, #216]	; (80059fc <HAL_SPI_Init+0x220>)
 8005924:	f7fd fc00 	bl	8003128 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_SPI_Init+0x166>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d004      	beq.n	8005942 <HAL_SPI_Init+0x166>
 8005938:	f240 1165 	movw	r1, #357	; 0x165
 800593c:	482f      	ldr	r0, [pc, #188]	; (80059fc <HAL_SPI_Init+0x220>)
 800593e:	f7fd fbf3 	bl	8003128 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7fd fc25 	bl	80031ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005978:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	ea42 0103 	orr.w	r1, r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	0c1a      	lsrs	r2, r3, #16
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f002 0204 	and.w	r2, r2, #4
 80059c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40013000 	.word	0x40013000
 80059f8:	40003800 	.word	0x40003800
 80059fc:	0800843c 	.word	0x0800843c

08005a00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d009      	beq.n	8005a30 <HAL_SPI_Transmit+0x30>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a24:	d004      	beq.n	8005a30 <HAL_SPI_Transmit+0x30>
 8005a26:	f240 310a 	movw	r1, #778	; 0x30a
 8005a2a:	4896      	ldr	r0, [pc, #600]	; (8005c84 <HAL_SPI_Transmit+0x284>)
 8005a2c:	f7fd fb7c 	bl	8003128 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_SPI_Transmit+0x3e>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e11e      	b.n	8005c7c <HAL_SPI_Transmit+0x27c>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a46:	f7fd fe55 	bl	80036f4 <HAL_GetTick>
 8005a4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a4c:	88fb      	ldrh	r3, [r7, #6]
 8005a4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d002      	beq.n	8005a62 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a60:	e103      	b.n	8005c6a <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_SPI_Transmit+0x6e>
 8005a68:	88fb      	ldrh	r3, [r7, #6]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d102      	bne.n	8005a74 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a72:	e0fa      	b.n	8005c6a <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2203      	movs	r2, #3
 8005a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	88fa      	ldrh	r2, [r7, #6]
 8005a8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	88fa      	ldrh	r2, [r7, #6]
 8005a92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aba:	d107      	bne.n	8005acc <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d007      	beq.n	8005aea <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af2:	d14b      	bne.n	8005b8c <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_SPI_Transmit+0x102>
 8005afc:	8afb      	ldrh	r3, [r7, #22]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d13e      	bne.n	8005b80 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	881a      	ldrh	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	1c9a      	adds	r2, r3, #2
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b26:	e02b      	b.n	8005b80 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d112      	bne.n	8005b5c <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	881a      	ldrh	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	1c9a      	adds	r2, r3, #2
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b5a:	e011      	b.n	8005b80 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b5c:	f7fd fdca 	bl	80036f4 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d803      	bhi.n	8005b74 <HAL_SPI_Transmit+0x174>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b72:	d102      	bne.n	8005b7a <HAL_SPI_Transmit+0x17a>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b7e:	e074      	b.n	8005c6a <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1ce      	bne.n	8005b28 <HAL_SPI_Transmit+0x128>
 8005b8a:	e04c      	b.n	8005c26 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <HAL_SPI_Transmit+0x19a>
 8005b94:	8afb      	ldrh	r3, [r7, #22]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d140      	bne.n	8005c1c <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005bc0:	e02c      	b.n	8005c1c <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d113      	bne.n	8005bf8 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	7812      	ldrb	r2, [r2, #0]
 8005bdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bf6:	e011      	b.n	8005c1c <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf8:	f7fd fd7c 	bl	80036f4 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d803      	bhi.n	8005c10 <HAL_SPI_Transmit+0x210>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d102      	bne.n	8005c16 <HAL_SPI_Transmit+0x216>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d102      	bne.n	8005c1c <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c1a:	e026      	b.n	8005c6a <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1cd      	bne.n	8005bc2 <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f896 	bl	8005d5c <SPI_EndRxTxTransaction>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c44:	2300      	movs	r3, #0
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	77fb      	strb	r3, [r7, #31]
 8005c66:	e000      	b.n	8005c6a <HAL_SPI_Transmit+0x26a>
  }

error:
 8005c68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	0800843c 	.word	0x0800843c

08005c88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c98:	e04c      	b.n	8005d34 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d048      	beq.n	8005d34 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ca2:	f7fd fd27 	bl	80036f4 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d902      	bls.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d13d      	bne.n	8005d34 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cc6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd0:	d111      	bne.n	8005cf6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cda:	d004      	beq.n	8005ce6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce4:	d107      	bne.n	8005cf6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfe:	d10f      	bne.n	8005d20 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e00f      	b.n	8005d54 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	bf0c      	ite	eq
 8005d44:	2301      	moveq	r3, #1
 8005d46:	2300      	movne	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d1a3      	bne.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2180      	movs	r1, #128	; 0x80
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff ff88 	bl	8005c88 <SPI_WaitFlagStateUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	f043 0220 	orr.w	r2, r3, #32
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e000      	b.n	8005d90 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e06f      	b.n	8005e8a <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a39      	ldr	r2, [pc, #228]	; (8005e94 <HAL_TIM_Base_Init+0xfc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_TIM_Base_Init+0x44>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dbc:	d00e      	beq.n	8005ddc <HAL_TIM_Base_Init+0x44>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a35      	ldr	r2, [pc, #212]	; (8005e98 <HAL_TIM_Base_Init+0x100>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_TIM_Base_Init+0x44>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a33      	ldr	r2, [pc, #204]	; (8005e9c <HAL_TIM_Base_Init+0x104>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_Base_Init+0x44>
 8005dd2:	f44f 7189 	mov.w	r1, #274	; 0x112
 8005dd6:	4832      	ldr	r0, [pc, #200]	; (8005ea0 <HAL_TIM_Base_Init+0x108>)
 8005dd8:	f7fd f9a6 	bl	8003128 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d014      	beq.n	8005e0e <HAL_TIM_Base_Init+0x76>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d010      	beq.n	8005e0e <HAL_TIM_Base_Init+0x76>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d00c      	beq.n	8005e0e <HAL_TIM_Base_Init+0x76>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d008      	beq.n	8005e0e <HAL_TIM_Base_Init+0x76>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	2b60      	cmp	r3, #96	; 0x60
 8005e02:	d004      	beq.n	8005e0e <HAL_TIM_Base_Init+0x76>
 8005e04:	f240 1113 	movw	r1, #275	; 0x113
 8005e08:	4825      	ldr	r0, [pc, #148]	; (8005ea0 <HAL_TIM_Base_Init+0x108>)
 8005e0a:	f7fd f98d 	bl	8003128 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00e      	beq.n	8005e34 <HAL_TIM_Base_Init+0x9c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e1e:	d009      	beq.n	8005e34 <HAL_TIM_Base_Init+0x9c>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e28:	d004      	beq.n	8005e34 <HAL_TIM_Base_Init+0x9c>
 8005e2a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005e2e:	481c      	ldr	r0, [pc, #112]	; (8005ea0 <HAL_TIM_Base_Init+0x108>)
 8005e30:	f7fd f97a 	bl	8003128 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_TIM_Base_Init+0xb6>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b80      	cmp	r3, #128	; 0x80
 8005e42:	d004      	beq.n	8005e4e <HAL_TIM_Base_Init+0xb6>
 8005e44:	f240 1115 	movw	r1, #277	; 0x115
 8005e48:	4815      	ldr	r0, [pc, #84]	; (8005ea0 <HAL_TIM_Base_Init+0x108>)
 8005e4a:	f7fd f96d 	bl	8003128 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fd fb20 	bl	80034a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	f000 f8b4 	bl	8005fe8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	08008474 	.word	0x08008474

08005ea4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a49      	ldr	r2, [pc, #292]	; (8005fd8 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d013      	beq.n	8005ee0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec0:	d00e      	beq.n	8005ee0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a45      	ldr	r2, [pc, #276]	; (8005fdc <HAL_TIM_SlaveConfigSynchro+0x138>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d009      	beq.n	8005ee0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a43      	ldr	r2, [pc, #268]	; (8005fe0 <HAL_TIM_SlaveConfigSynchro+0x13c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d004      	beq.n	8005ee0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8005ed6:	f241 213b 	movw	r1, #4667	; 0x123b
 8005eda:	4842      	ldr	r0, [pc, #264]	; (8005fe4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8005edc:	f7fd f924 	bl	8003128 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d014      	beq.n	8005f12 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d010      	beq.n	8005f12 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b05      	cmp	r3, #5
 8005ef6:	d00c      	beq.n	8005f12 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b06      	cmp	r3, #6
 8005efe:	d008      	beq.n	8005f12 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b07      	cmp	r3, #7
 8005f06:	d004      	beq.n	8005f12 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8005f08:	f241 213c 	movw	r1, #4668	; 0x123c
 8005f0c:	4835      	ldr	r0, [pc, #212]	; (8005fe4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8005f0e:	f7fd f90b 	bl	8003128 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d020      	beq.n	8005f5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d01c      	beq.n	8005f5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d018      	beq.n	8005f5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b30      	cmp	r3, #48	; 0x30
 8005f30:	d014      	beq.n	8005f5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d010      	beq.n	8005f5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b50      	cmp	r3, #80	; 0x50
 8005f40:	d00c      	beq.n	8005f5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b60      	cmp	r3, #96	; 0x60
 8005f48:	d008      	beq.n	8005f5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b70      	cmp	r3, #112	; 0x70
 8005f50:	d004      	beq.n	8005f5c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8005f52:	f241 213d 	movw	r1, #4669	; 0x123d
 8005f56:	4823      	ldr	r0, [pc, #140]	; (8005fe4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8005f58:	f7fd f8e6 	bl	8003128 <assert_failed>

  __HAL_LOCK(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_SlaveConfigSynchro+0xc6>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e031      	b.n	8005fce <HAL_TIM_SlaveConfigSynchro+0x12a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2202      	movs	r2, #2
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f895 	bl	80060ac <TIM_SlaveTimer_SetConfig>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <HAL_TIM_SlaveConfigSynchro+0xf8>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e018      	b.n	8005fce <HAL_TIM_SlaveConfigSynchro+0x12a>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005faa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fba:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	08008474 	.word	0x08008474

08005fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a29      	ldr	r2, [pc, #164]	; (80060a0 <TIM_Base_SetConfig+0xb8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00b      	beq.n	8006018 <TIM_Base_SetConfig+0x30>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006006:	d007      	beq.n	8006018 <TIM_Base_SetConfig+0x30>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a26      	ldr	r2, [pc, #152]	; (80060a4 <TIM_Base_SetConfig+0xbc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_Base_SetConfig+0x30>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a25      	ldr	r2, [pc, #148]	; (80060a8 <TIM_Base_SetConfig+0xc0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d108      	bne.n	800602a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a1c      	ldr	r2, [pc, #112]	; (80060a0 <TIM_Base_SetConfig+0xb8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00b      	beq.n	800604a <TIM_Base_SetConfig+0x62>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006038:	d007      	beq.n	800604a <TIM_Base_SetConfig+0x62>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a19      	ldr	r2, [pc, #100]	; (80060a4 <TIM_Base_SetConfig+0xbc>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d003      	beq.n	800604a <TIM_Base_SetConfig+0x62>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a18      	ldr	r2, [pc, #96]	; (80060a8 <TIM_Base_SetConfig+0xc0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d108      	bne.n	800605c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a07      	ldr	r2, [pc, #28]	; (80060a0 <TIM_Base_SetConfig+0xb8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d103      	bne.n	8006090 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	615a      	str	r2, [r3, #20]
}
 8006096:	bf00      	nop
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800

080060ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0307 	bic.w	r3, r3, #7
 80060d6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b30      	cmp	r3, #48	; 0x30
 80060f0:	f000 8158 	beq.w	80063a4 <TIM_SlaveTimer_SetConfig+0x2f8>
 80060f4:	2b30      	cmp	r3, #48	; 0x30
 80060f6:	d809      	bhi.n	800610c <TIM_SlaveTimer_SetConfig+0x60>
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	f000 8153 	beq.w	80063a4 <TIM_SlaveTimer_SetConfig+0x2f8>
 80060fe:	2b20      	cmp	r3, #32
 8006100:	f000 8150 	beq.w	80063a4 <TIM_SlaveTimer_SetConfig+0x2f8>
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 814d 	beq.w	80063a4 <TIM_SlaveTimer_SetConfig+0x2f8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800610a:	e165      	b.n	80063d8 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 800610c:	2b50      	cmp	r3, #80	; 0x50
 800610e:	f000 80b5 	beq.w	800627c <TIM_SlaveTimer_SetConfig+0x1d0>
 8006112:	2b50      	cmp	r3, #80	; 0x50
 8006114:	d802      	bhi.n	800611c <TIM_SlaveTimer_SetConfig+0x70>
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d065      	beq.n	80061e6 <TIM_SlaveTimer_SetConfig+0x13a>
      break;
 800611a:	e15d      	b.n	80063d8 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 800611c:	2b60      	cmp	r3, #96	; 0x60
 800611e:	f000 80f3 	beq.w	8006308 <TIM_SlaveTimer_SetConfig+0x25c>
 8006122:	2b70      	cmp	r3, #112	; 0x70
 8006124:	d000      	beq.n	8006128 <TIM_SlaveTimer_SetConfig+0x7c>
      break;
 8006126:	e157      	b.n	80063d8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a99      	ldr	r2, [pc, #612]	; (8006394 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0xae>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613a:	d00e      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0xae>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a95      	ldr	r2, [pc, #596]	; (8006398 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d009      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0xae>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a94      	ldr	r2, [pc, #592]	; (800639c <TIM_SlaveTimer_SetConfig+0x2f0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d004      	beq.n	800615a <TIM_SlaveTimer_SetConfig+0xae>
 8006150:	f641 011c 	movw	r1, #6172	; 0x181c
 8006154:	4892      	ldr	r0, [pc, #584]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8006156:	f7fc ffe7 	bl	8003128 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d013      	beq.n	800618a <TIM_SlaveTimer_SetConfig+0xde>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616a:	d00e      	beq.n	800618a <TIM_SlaveTimer_SetConfig+0xde>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006174:	d009      	beq.n	800618a <TIM_SlaveTimer_SetConfig+0xde>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800617e:	d004      	beq.n	800618a <TIM_SlaveTimer_SetConfig+0xde>
 8006180:	f641 011d 	movw	r1, #6173	; 0x181d
 8006184:	4886      	ldr	r0, [pc, #536]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8006186:	f7fc ffcf 	bl	8003128 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006192:	d014      	beq.n	80061be <TIM_SlaveTimer_SetConfig+0x112>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d010      	beq.n	80061be <TIM_SlaveTimer_SetConfig+0x112>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00c      	beq.n	80061be <TIM_SlaveTimer_SetConfig+0x112>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d008      	beq.n	80061be <TIM_SlaveTimer_SetConfig+0x112>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b0a      	cmp	r3, #10
 80061b2:	d004      	beq.n	80061be <TIM_SlaveTimer_SetConfig+0x112>
 80061b4:	f641 011e 	movw	r1, #6174	; 0x181e
 80061b8:	4879      	ldr	r0, [pc, #484]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80061ba:	f7fc ffb5 	bl	8003128 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b0f      	cmp	r3, #15
 80061c4:	d904      	bls.n	80061d0 <TIM_SlaveTimer_SetConfig+0x124>
 80061c6:	f641 011f 	movw	r1, #6175	; 0x181f
 80061ca:	4875      	ldr	r0, [pc, #468]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80061cc:	f7fc ffac 	bl	8003128 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	68d9      	ldr	r1, [r3, #12]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f000 f965 	bl	80064ae <TIM_ETR_SetConfig>
      break;
 80061e4:	e0f8      	b.n	80063d8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6a      	ldr	r2, [pc, #424]	; (8006394 <TIM_SlaveTimer_SetConfig+0x2e8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d013      	beq.n	8006218 <TIM_SlaveTimer_SetConfig+0x16c>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f8:	d00e      	beq.n	8006218 <TIM_SlaveTimer_SetConfig+0x16c>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a66      	ldr	r2, [pc, #408]	; (8006398 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d009      	beq.n	8006218 <TIM_SlaveTimer_SetConfig+0x16c>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a64      	ldr	r2, [pc, #400]	; (800639c <TIM_SlaveTimer_SetConfig+0x2f0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <TIM_SlaveTimer_SetConfig+0x16c>
 800620e:	f641 012b 	movw	r1, #6187	; 0x182b
 8006212:	4863      	ldr	r0, [pc, #396]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8006214:	f7fc ff88 	bl	8003128 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	2b0f      	cmp	r3, #15
 800621e:	d904      	bls.n	800622a <TIM_SlaveTimer_SetConfig+0x17e>
 8006220:	f641 012c 	movw	r1, #6188	; 0x182c
 8006224:	485e      	ldr	r0, [pc, #376]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8006226:	f7fc ff7f 	bl	8003128 <assert_failed>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b05      	cmp	r3, #5
 8006230:	d101      	bne.n	8006236 <TIM_SlaveTimer_SetConfig+0x18a>
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e0d1      	b.n	80063da <TIM_SlaveTimer_SetConfig+0x32e>
      tmpccer = htim->Instance->CCER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6a1a      	ldr	r2, [r3, #32]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0201 	bic.w	r2, r2, #1
 800624c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800625c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	621a      	str	r2, [r3, #32]
      break;
 800627a:	e0ad      	b.n	80063d8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a44      	ldr	r2, [pc, #272]	; (8006394 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d013      	beq.n	80062ae <TIM_SlaveTimer_SetConfig+0x202>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628e:	d00e      	beq.n	80062ae <TIM_SlaveTimer_SetConfig+0x202>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a40      	ldr	r2, [pc, #256]	; (8006398 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d009      	beq.n	80062ae <TIM_SlaveTimer_SetConfig+0x202>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a3f      	ldr	r2, [pc, #252]	; (800639c <TIM_SlaveTimer_SetConfig+0x2f0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d004      	beq.n	80062ae <TIM_SlaveTimer_SetConfig+0x202>
 80062a4:	f641 0145 	movw	r1, #6213	; 0x1845
 80062a8:	483d      	ldr	r0, [pc, #244]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80062aa:	f7fc ff3d 	bl	8003128 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b6:	d014      	beq.n	80062e2 <TIM_SlaveTimer_SetConfig+0x236>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d010      	beq.n	80062e2 <TIM_SlaveTimer_SetConfig+0x236>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00c      	beq.n	80062e2 <TIM_SlaveTimer_SetConfig+0x236>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d008      	beq.n	80062e2 <TIM_SlaveTimer_SetConfig+0x236>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b0a      	cmp	r3, #10
 80062d6:	d004      	beq.n	80062e2 <TIM_SlaveTimer_SetConfig+0x236>
 80062d8:	f641 0146 	movw	r1, #6214	; 0x1846
 80062dc:	4830      	ldr	r0, [pc, #192]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80062de:	f7fc ff23 	bl	8003128 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b0f      	cmp	r3, #15
 80062e8:	d904      	bls.n	80062f4 <TIM_SlaveTimer_SetConfig+0x248>
 80062ea:	f641 0147 	movw	r1, #6215	; 0x1847
 80062ee:	482c      	ldr	r0, [pc, #176]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80062f0:	f7fc ff1a 	bl	8003128 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	6899      	ldr	r1, [r3, #8]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	461a      	mov	r2, r3
 8006302:	f000 f877 	bl	80063f4 <TIM_TI1_ConfigInputStage>
      break;
 8006306:	e067      	b.n	80063d8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a21      	ldr	r2, [pc, #132]	; (8006394 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d013      	beq.n	800633a <TIM_SlaveTimer_SetConfig+0x28e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631a:	d00e      	beq.n	800633a <TIM_SlaveTimer_SetConfig+0x28e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d009      	beq.n	800633a <TIM_SlaveTimer_SetConfig+0x28e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1c      	ldr	r2, [pc, #112]	; (800639c <TIM_SlaveTimer_SetConfig+0x2f0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d004      	beq.n	800633a <TIM_SlaveTimer_SetConfig+0x28e>
 8006330:	f641 0153 	movw	r1, #6227	; 0x1853
 8006334:	481a      	ldr	r0, [pc, #104]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8006336:	f7fc fef7 	bl	8003128 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006342:	d014      	beq.n	800636e <TIM_SlaveTimer_SetConfig+0x2c2>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d010      	beq.n	800636e <TIM_SlaveTimer_SetConfig+0x2c2>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00c      	beq.n	800636e <TIM_SlaveTimer_SetConfig+0x2c2>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d008      	beq.n	800636e <TIM_SlaveTimer_SetConfig+0x2c2>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b0a      	cmp	r3, #10
 8006362:	d004      	beq.n	800636e <TIM_SlaveTimer_SetConfig+0x2c2>
 8006364:	f641 0154 	movw	r1, #6228	; 0x1854
 8006368:	480d      	ldr	r0, [pc, #52]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800636a:	f7fc fedd 	bl	8003128 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b0f      	cmp	r3, #15
 8006374:	d904      	bls.n	8006380 <TIM_SlaveTimer_SetConfig+0x2d4>
 8006376:	f641 0155 	movw	r1, #6229	; 0x1855
 800637a:	4809      	ldr	r0, [pc, #36]	; (80063a0 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800637c:	f7fc fed4 	bl	8003128 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6899      	ldr	r1, [r3, #8]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	461a      	mov	r2, r3
 800638e:	f000 f85f 	bl	8006450 <TIM_TI2_ConfigInputStage>
      break;
 8006392:	e021      	b.n	80063d8 <TIM_SlaveTimer_SetConfig+0x32c>
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40000400 	.word	0x40000400
 800639c:	40000800 	.word	0x40000800
 80063a0:	08008474 	.word	0x08008474
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a0e      	ldr	r2, [pc, #56]	; (80063e4 <TIM_SlaveTimer_SetConfig+0x338>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <TIM_SlaveTimer_SetConfig+0x32a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b6:	d00e      	beq.n	80063d6 <TIM_SlaveTimer_SetConfig+0x32a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a0a      	ldr	r2, [pc, #40]	; (80063e8 <TIM_SlaveTimer_SetConfig+0x33c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d009      	beq.n	80063d6 <TIM_SlaveTimer_SetConfig+0x32a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a09      	ldr	r2, [pc, #36]	; (80063ec <TIM_SlaveTimer_SetConfig+0x340>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d004      	beq.n	80063d6 <TIM_SlaveTimer_SetConfig+0x32a>
 80063cc:	f641 0164 	movw	r1, #6244	; 0x1864
 80063d0:	4807      	ldr	r0, [pc, #28]	; (80063f0 <TIM_SlaveTimer_SetConfig+0x344>)
 80063d2:	f7fc fea9 	bl	8003128 <assert_failed>
      break;
 80063d6:	bf00      	nop
  }
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	08008474 	.word	0x08008474

080063f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f023 0201 	bic.w	r2, r3, #1
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800641e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f023 030a 	bic.w	r3, r3, #10
 8006430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	621a      	str	r2, [r3, #32]
}
 8006446:	bf00      	nop
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	bc80      	pop	{r7}
 800644e:	4770      	bx	lr

08006450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f023 0210 	bic.w	r2, r3, #16
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800647a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	031b      	lsls	r3, r3, #12
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800648c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	621a      	str	r2, [r3, #32]
}
 80064a4:	bf00      	nop
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr

080064ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b087      	sub	sp, #28
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	021a      	lsls	r2, r3, #8
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	609a      	str	r2, [r3, #8]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a43      	ldr	r2, [pc, #268]	; (8006608 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d013      	beq.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006508:	d00e      	beq.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a3f      	ldr	r2, [pc, #252]	; (800660c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d009      	beq.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a3d      	ldr	r2, [pc, #244]	; (8006610 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d004      	beq.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800651e:	f240 6164 	movw	r1, #1636	; 0x664
 8006522:	483c      	ldr	r0, [pc, #240]	; (8006614 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006524:	f7fc fe00 	bl	8003128 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d020      	beq.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b10      	cmp	r3, #16
 8006536:	d01c      	beq.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b20      	cmp	r3, #32
 800653e:	d018      	beq.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b30      	cmp	r3, #48	; 0x30
 8006546:	d014      	beq.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d010      	beq.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b50      	cmp	r3, #80	; 0x50
 8006556:	d00c      	beq.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b60      	cmp	r3, #96	; 0x60
 800655e:	d008      	beq.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b70      	cmp	r3, #112	; 0x70
 8006566:	d004      	beq.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006568:	f240 6165 	movw	r1, #1637	; 0x665
 800656c:	4829      	ldr	r0, [pc, #164]	; (8006614 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800656e:	f7fc fddb 	bl	8003128 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b80      	cmp	r3, #128	; 0x80
 8006578:	d008      	beq.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006582:	f240 6166 	movw	r1, #1638	; 0x666
 8006586:	4823      	ldr	r0, [pc, #140]	; (8006614 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006588:	f7fc fdce 	bl	8003128 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006596:	2302      	movs	r3, #2
 8006598:	e032      	b.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	080084ac 	.word	0x080084ac

08006618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e092      	b.n	8006750 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d02c      	beq.n	800668c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a48      	ldr	r2, [pc, #288]	; (8006758 <HAL_UART_Init+0x140>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_UART_Init+0x42>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a46      	ldr	r2, [pc, #280]	; (800675c <HAL_UART_Init+0x144>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_UART_Init+0x42>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a45      	ldr	r2, [pc, #276]	; (8006760 <HAL_UART_Init+0x148>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_UART_Init+0x42>
 8006650:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006654:	4843      	ldr	r0, [pc, #268]	; (8006764 <HAL_UART_Init+0x14c>)
 8006656:	f7fc fd67 	bl	8003128 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d028      	beq.n	80066b4 <HAL_UART_Init+0x9c>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666a:	d023      	beq.n	80066b4 <HAL_UART_Init+0x9c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006674:	d01e      	beq.n	80066b4 <HAL_UART_Init+0x9c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800667e:	d019      	beq.n	80066b4 <HAL_UART_Init+0x9c>
 8006680:	f240 1147 	movw	r1, #327	; 0x147
 8006684:	4837      	ldr	r0, [pc, #220]	; (8006764 <HAL_UART_Init+0x14c>)
 8006686:	f7fc fd4f 	bl	8003128 <assert_failed>
 800668a:	e013      	b.n	80066b4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a31      	ldr	r2, [pc, #196]	; (8006758 <HAL_UART_Init+0x140>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00e      	beq.n	80066b4 <HAL_UART_Init+0x9c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a30      	ldr	r2, [pc, #192]	; (800675c <HAL_UART_Init+0x144>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d009      	beq.n	80066b4 <HAL_UART_Init+0x9c>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a2e      	ldr	r2, [pc, #184]	; (8006760 <HAL_UART_Init+0x148>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d004      	beq.n	80066b4 <HAL_UART_Init+0x9c>
 80066aa:	f240 114b 	movw	r1, #331	; 0x14b
 80066ae:	482d      	ldr	r0, [pc, #180]	; (8006764 <HAL_UART_Init+0x14c>)
 80066b0:	f7fc fd3a 	bl	8003128 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <HAL_UART_Init+0xb8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c4:	d004      	beq.n	80066d0 <HAL_UART_Init+0xb8>
 80066c6:	f240 114d 	movw	r1, #333	; 0x14d
 80066ca:	4826      	ldr	r0, [pc, #152]	; (8006764 <HAL_UART_Init+0x14c>)
 80066cc:	f7fc fd2c 	bl	8003128 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d106      	bne.n	80066ea <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7fc ff25 	bl	8003534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2224      	movs	r2, #36	; 0x24
 80066ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006700:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fbf0 	bl	8006ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006716:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695a      	ldr	r2, [r3, #20]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006726:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006736:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40013800 	.word	0x40013800
 800675c:	40004400 	.word	0x40004400
 8006760:	40004800 	.word	0x40004800
 8006764:	080084e8 	.word	0x080084e8

08006768 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	4613      	mov	r3, r2
 8006776:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b20      	cmp	r3, #32
 8006786:	f040 8083 	bne.w	8006890 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <HAL_UART_Transmit+0x2e>
 8006790:	88fb      	ldrh	r3, [r7, #6]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e07b      	b.n	8006892 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_UART_Transmit+0x40>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e074      	b.n	8006892 <HAL_UART_Transmit+0x12a>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2221      	movs	r2, #33	; 0x21
 80067ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80067be:	f7fc ff99 	bl	80036f4 <HAL_GetTick>
 80067c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	88fa      	ldrh	r2, [r7, #6]
 80067c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	88fa      	ldrh	r2, [r7, #6]
 80067ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067d0:	e042      	b.n	8006858 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e8:	d122      	bne.n	8006830 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2200      	movs	r2, #0
 80067f2:	2180      	movs	r1, #128	; 0x80
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 fa0e 	bl	8006c16 <UART_WaitOnFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e046      	b.n	8006892 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006816:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d103      	bne.n	8006828 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	3302      	adds	r3, #2
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	e017      	b.n	8006858 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3301      	adds	r3, #1
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	e013      	b.n	8006858 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2200      	movs	r2, #0
 8006838:	2180      	movs	r1, #128	; 0x80
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f9eb 	bl	8006c16 <UART_WaitOnFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e023      	b.n	8006892 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	60ba      	str	r2, [r7, #8]
 8006850:	781a      	ldrb	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1b7      	bne.n	80067d2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2200      	movs	r2, #0
 800686a:	2140      	movs	r1, #64	; 0x40
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f9d2 	bl	8006c16 <UART_WaitOnFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e00a      	b.n	8006892 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	e000      	b.n	8006892 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006890:	2302      	movs	r3, #2
  }
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b088      	sub	sp, #32
 800689e:	af02      	add	r7, sp, #8
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	603b      	str	r3, [r7, #0]
 80068a6:	4613      	mov	r3, r2
 80068a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	f040 8090 	bne.w	80069dc <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_UART_Receive+0x2e>
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e088      	b.n	80069de <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_UART_Receive+0x40>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e081      	b.n	80069de <HAL_UART_Receive+0x144>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2222      	movs	r2, #34	; 0x22
 80068ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80068f0:	f7fc ff00 	bl	80036f4 <HAL_GetTick>
 80068f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	88fa      	ldrh	r2, [r7, #6]
 80068fa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	88fa      	ldrh	r2, [r7, #6]
 8006900:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006902:	e05c      	b.n	80069be <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691a:	d12b      	bne.n	8006974 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2200      	movs	r2, #0
 8006924:	2120      	movs	r1, #32
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 f975 	bl	8006c16 <UART_WaitOnFlagUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e053      	b.n	80069de <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10c      	bne.n	800695c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694e:	b29a      	uxth	r2, r3
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	3302      	adds	r3, #2
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	e030      	b.n	80069be <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	b29b      	uxth	r3, r3
 8006964:	b2db      	uxtb	r3, r3
 8006966:	b29a      	uxth	r2, r3
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	3301      	adds	r3, #1
 8006970:	60bb      	str	r3, [r7, #8]
 8006972:	e024      	b.n	80069be <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2200      	movs	r2, #0
 800697c:	2120      	movs	r1, #32
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f949 	bl	8006c16 <UART_WaitOnFlagUntilTimeout>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e027      	b.n	80069de <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d108      	bne.n	80069a8 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6859      	ldr	r1, [r3, #4]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	60ba      	str	r2, [r7, #8]
 80069a2:	b2ca      	uxtb	r2, r1
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	e00a      	b.n	80069be <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	1c59      	adds	r1, r3, #1
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d19d      	bne.n	8006904 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	e000      	b.n	80069de <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80069dc:	2302      	movs	r3, #2
  }
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10d      	bne.n	8006a3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d008      	beq.n	8006a3a <HAL_UART_IRQHandler+0x52>
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f9d7 	bl	8006de6 <UART_Receive_IT>
      return;
 8006a38:	e0cc      	b.n	8006bd4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80ab 	beq.w	8006b98 <HAL_UART_IRQHandler+0x1b0>
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d105      	bne.n	8006a58 <HAL_UART_IRQHandler+0x70>
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80a0 	beq.w	8006b98 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <HAL_UART_IRQHandler+0x90>
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a70:	f043 0201 	orr.w	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <HAL_UART_IRQHandler+0xb0>
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a90:	f043 0202 	orr.w	r2, r3, #2
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_UART_IRQHandler+0xd0>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab0:	f043 0204 	orr.w	r2, r3, #4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xf0>
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad0:	f043 0208 	orr.w	r2, r3, #8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d078      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f003 0320 	and.w	r3, r3, #32
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <HAL_UART_IRQHandler+0x112>
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f976 	bl	8006de6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bf14      	ite	ne
 8006b08:	2301      	movne	r3, #1
 8006b0a:	2300      	moveq	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <HAL_UART_IRQHandler+0x13a>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d031      	beq.n	8006b86 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f8c1 	bl	8006caa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d023      	beq.n	8006b7e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	695a      	ldr	r2, [r3, #20]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b44:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d013      	beq.n	8006b76 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b52:	4a22      	ldr	r2, [pc, #136]	; (8006bdc <HAL_UART_IRQHandler+0x1f4>)
 8006b54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fd fa9a 	bl	8004094 <HAL_DMA_Abort_IT>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d016      	beq.n	8006b94 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b74:	e00e      	b.n	8006b94 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f844 	bl	8006c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7c:	e00a      	b.n	8006b94 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f840 	bl	8006c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	e006      	b.n	8006b94 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f83c 	bl	8006c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006b92:	e01e      	b.n	8006bd2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	bf00      	nop
    return;
 8006b96:	e01c      	b.n	8006bd2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x1cc>
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f8ad 	bl	8006d0c <UART_Transmit_IT>
    return;
 8006bb2:	e00f      	b.n	8006bd4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x1ec>
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f8f4 	bl	8006db6 <UART_EndTransmit_IT>
    return;
 8006bce:	bf00      	nop
 8006bd0:	e000      	b.n	8006bd4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006bd2:	bf00      	nop
  }
}
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	08006ce5 	.word	0x08006ce5

08006be0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr

08006c16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	603b      	str	r3, [r7, #0]
 8006c22:	4613      	mov	r3, r2
 8006c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c26:	e02c      	b.n	8006c82 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2e:	d028      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d007      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c36:	f7fc fd5d 	bl	80036f4 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d21d      	bcs.n	8006c82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c54:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695a      	ldr	r2, [r3, #20]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e00f      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	bf0c      	ite	eq
 8006c92:	2301      	moveq	r3, #1
 8006c94:	2300      	movne	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d0c3      	beq.n	8006c28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cc0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695a      	ldr	r2, [r3, #20]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 0201 	bic.w	r2, r2, #1
 8006cd0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bc80      	pop	{r7}
 8006ce2:	4770      	bx	lr

08006ce4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff ff80 	bl	8006c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b21      	cmp	r3, #33	; 0x21
 8006d1e:	d144      	bne.n	8006daa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d28:	d11a      	bne.n	8006d60 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d3e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d105      	bne.n	8006d54 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	1c9a      	adds	r2, r3, #2
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	621a      	str	r2, [r3, #32]
 8006d52:	e00e      	b.n	8006d72 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	621a      	str	r2, [r3, #32]
 8006d5e:	e008      	b.n	8006d72 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	1c59      	adds	r1, r3, #1
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6211      	str	r1, [r2, #32]
 8006d6a:	781a      	ldrb	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10f      	bne.n	8006da6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	e000      	b.n	8006dac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006daa:	2302      	movs	r3, #2
  }
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr

08006db6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff ff02 	bl	8006be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b22      	cmp	r3, #34	; 0x22
 8006df8:	d171      	bne.n	8006ede <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e02:	d123      	bne.n	8006e4c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10e      	bne.n	8006e30 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	1c9a      	adds	r2, r3, #2
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	629a      	str	r2, [r3, #40]	; 0x28
 8006e2e:	e029      	b.n	8006e84 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	629a      	str	r2, [r3, #40]	; 0x28
 8006e4a:	e01b      	b.n	8006e84 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6858      	ldr	r0, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	1c59      	adds	r1, r3, #1
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6291      	str	r1, [r2, #40]	; 0x28
 8006e64:	b2c2      	uxtb	r2, r0
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	e00c      	b.n	8006e84 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	1c58      	adds	r0, r3, #1
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	6288      	str	r0, [r1, #40]	; 0x28
 8006e7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	4619      	mov	r1, r3
 8006e92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d120      	bne.n	8006eda <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0220 	bic.w	r2, r2, #32
 8006ea6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695a      	ldr	r2, [r3, #20]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0201 	bic.w	r2, r2, #1
 8006ec6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff fe8e 	bl	8006bf2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e002      	b.n	8006ee0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	e000      	b.n	8006ee0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006ede:	2302      	movs	r3, #2
  }
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4a84      	ldr	r2, [pc, #528]	; (8007108 <UART_SetConfig+0x220>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d904      	bls.n	8006f04 <UART_SetConfig+0x1c>
 8006efa:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8006efe:	4883      	ldr	r0, [pc, #524]	; (800710c <UART_SetConfig+0x224>)
 8006f00:	f7fc f912 	bl	8003128 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d009      	beq.n	8006f20 <UART_SetConfig+0x38>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f14:	d004      	beq.n	8006f20 <UART_SetConfig+0x38>
 8006f16:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8006f1a:	487c      	ldr	r0, [pc, #496]	; (800710c <UART_SetConfig+0x224>)
 8006f1c:	f7fc f904 	bl	8003128 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00e      	beq.n	8006f46 <UART_SetConfig+0x5e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f30:	d009      	beq.n	8006f46 <UART_SetConfig+0x5e>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f3a:	d004      	beq.n	8006f46 <UART_SetConfig+0x5e>
 8006f3c:	f640 31ff 	movw	r1, #3071	; 0xbff
 8006f40:	4872      	ldr	r0, [pc, #456]	; (800710c <UART_SetConfig+0x224>)
 8006f42:	f7fc f8f1 	bl	8003128 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	695a      	ldr	r2, [r3, #20]
 8006f4a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8006f4e:	4013      	ands	r3, r2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d103      	bne.n	8006f5c <UART_SetConfig+0x74>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <UART_SetConfig+0x7e>
 8006f5c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8006f60:	486a      	ldr	r0, [pc, #424]	; (800710c <UART_SetConfig+0x224>)
 8006f62:	f7fc f8e1 	bl	8003128 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006f98:	f023 030c 	bic.w	r3, r3, #12
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6812      	ldr	r2, [r2, #0]
 8006fa0:	68f9      	ldr	r1, [r7, #12]
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699a      	ldr	r2, [r3, #24]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a53      	ldr	r2, [pc, #332]	; (8007110 <UART_SetConfig+0x228>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d14e      	bne.n	8007064 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006fc6:	f7fe facd 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8006fca:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	009a      	lsls	r2, r3, #2
 8006fd6:	441a      	add	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe2:	4a4c      	ldr	r2, [pc, #304]	; (8007114 <UART_SetConfig+0x22c>)
 8006fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	0119      	lsls	r1, r3, #4
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009a      	lsls	r2, r3, #2
 8006ff6:	441a      	add	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8007002:	4b44      	ldr	r3, [pc, #272]	; (8007114 <UART_SetConfig+0x22c>)
 8007004:	fba3 0302 	umull	r0, r3, r3, r2
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	2064      	movs	r0, #100	; 0x64
 800700c:	fb00 f303 	mul.w	r3, r0, r3
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	3332      	adds	r3, #50	; 0x32
 8007016:	4a3f      	ldr	r2, [pc, #252]	; (8007114 <UART_SetConfig+0x22c>)
 8007018:	fba2 2303 	umull	r2, r3, r2, r3
 800701c:	095b      	lsrs	r3, r3, #5
 800701e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007022:	4419      	add	r1, r3
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009a      	lsls	r2, r3, #2
 800702e:	441a      	add	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	fbb2 f2f3 	udiv	r2, r2, r3
 800703a:	4b36      	ldr	r3, [pc, #216]	; (8007114 <UART_SetConfig+0x22c>)
 800703c:	fba3 0302 	umull	r0, r3, r3, r2
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	2064      	movs	r0, #100	; 0x64
 8007044:	fb00 f303 	mul.w	r3, r0, r3
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	3332      	adds	r3, #50	; 0x32
 800704e:	4a31      	ldr	r2, [pc, #196]	; (8007114 <UART_SetConfig+0x22c>)
 8007050:	fba2 2303 	umull	r2, r3, r2, r3
 8007054:	095b      	lsrs	r3, r3, #5
 8007056:	f003 020f 	and.w	r2, r3, #15
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	440a      	add	r2, r1
 8007060:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007062:	e04d      	b.n	8007100 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8007064:	f7fe fa6a 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8007068:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009a      	lsls	r2, r3, #2
 8007074:	441a      	add	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007080:	4a24      	ldr	r2, [pc, #144]	; (8007114 <UART_SetConfig+0x22c>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	095b      	lsrs	r3, r3, #5
 8007088:	0119      	lsls	r1, r3, #4
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009a      	lsls	r2, r3, #2
 8007094:	441a      	add	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	fbb2 f2f3 	udiv	r2, r2, r3
 80070a0:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <UART_SetConfig+0x22c>)
 80070a2:	fba3 0302 	umull	r0, r3, r3, r2
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	2064      	movs	r0, #100	; 0x64
 80070aa:	fb00 f303 	mul.w	r3, r0, r3
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	3332      	adds	r3, #50	; 0x32
 80070b4:	4a17      	ldr	r2, [pc, #92]	; (8007114 <UART_SetConfig+0x22c>)
 80070b6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070c0:	4419      	add	r1, r3
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	009a      	lsls	r2, r3, #2
 80070cc:	441a      	add	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80070d8:	4b0e      	ldr	r3, [pc, #56]	; (8007114 <UART_SetConfig+0x22c>)
 80070da:	fba3 0302 	umull	r0, r3, r3, r2
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	2064      	movs	r0, #100	; 0x64
 80070e2:	fb00 f303 	mul.w	r3, r0, r3
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	3332      	adds	r3, #50	; 0x32
 80070ec:	4a09      	ldr	r2, [pc, #36]	; (8007114 <UART_SetConfig+0x22c>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	f003 020f 	and.w	r2, r3, #15
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	440a      	add	r2, r1
 80070fe:	609a      	str	r2, [r3, #8]
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	0044aa20 	.word	0x0044aa20
 800710c:	080084e8 	.word	0x080084e8
 8007110:	40013800 	.word	0x40013800
 8007114:	51eb851f 	.word	0x51eb851f

08007118 <_Znaj>:
 8007118:	f000 b800 	b.w	800711c <_Znwj>

0800711c <_Znwj>:
 800711c:	b510      	push	{r4, lr}
 800711e:	2800      	cmp	r0, #0
 8007120:	bf14      	ite	ne
 8007122:	4604      	movne	r4, r0
 8007124:	2401      	moveq	r4, #1
 8007126:	4620      	mov	r0, r4
 8007128:	f000 fbcc 	bl	80078c4 <malloc>
 800712c:	b930      	cbnz	r0, 800713c <_Znwj+0x20>
 800712e:	f000 f807 	bl	8007140 <_ZSt15get_new_handlerv>
 8007132:	b908      	cbnz	r0, 8007138 <_Znwj+0x1c>
 8007134:	f000 fb95 	bl	8007862 <abort>
 8007138:	4780      	blx	r0
 800713a:	e7f4      	b.n	8007126 <_Znwj+0xa>
 800713c:	bd10      	pop	{r4, pc}
	...

08007140 <_ZSt15get_new_handlerv>:
 8007140:	4b02      	ldr	r3, [pc, #8]	; (800714c <_ZSt15get_new_handlerv+0xc>)
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	f3bf 8f5b 	dmb	ish
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	20000494 	.word	0x20000494

08007150 <_ZNSaIcEC1Ev>:
 8007150:	4770      	bx	lr

08007152 <_ZNSaIcED1Ev>:
 8007152:	4770      	bx	lr

08007154 <_ZSt19__throw_logic_errorPKc>:
 8007154:	b508      	push	{r3, lr}
 8007156:	f000 fb84 	bl	8007862 <abort>

0800715a <_ZSt20__throw_length_errorPKc>:
 800715a:	b508      	push	{r3, lr}
 800715c:	f000 fb81 	bl	8007862 <abort>

08007160 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8007160:	b40f      	push	{r0, r1, r2, r3}
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	f107 0410 	add.w	r4, r7, #16
 800716c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007170:	4628      	mov	r0, r5
 8007172:	f7f8 ffeb 	bl	800014c <strlen>
 8007176:	f200 230e 	addw	r3, r0, #526	; 0x20e
 800717a:	f023 0307 	bic.w	r3, r3, #7
 800717e:	ebad 0d03 	sub.w	sp, sp, r3
 8007182:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8007186:	4623      	mov	r3, r4
 8007188:	462a      	mov	r2, r5
 800718a:	4668      	mov	r0, sp
 800718c:	607c      	str	r4, [r7, #4]
 800718e:	f000 fb27 	bl	80077e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8007192:	f000 fb66 	bl	8007862 <abort>

08007196 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8007196:	b10a      	cbz	r2, 800719c <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8007198:	f000 bbb2 	b.w	8007900 <memcpy>
 800719c:	4770      	bx	lr

0800719e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800719e:	6001      	str	r1, [r0, #0]
 80071a0:	4770      	bx	lr

080071a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80071a2:	6800      	ldr	r0, [r0, #0]
 80071a4:	4770      	bx	lr

080071a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80071a6:	3008      	adds	r0, #8
 80071a8:	4770      	bx	lr

080071aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80071aa:	6081      	str	r1, [r0, #8]
 80071ac:	4770      	bx	lr

080071ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80071ae:	2200      	movs	r2, #0
 80071b0:	6803      	ldr	r3, [r0, #0]
 80071b2:	6041      	str	r1, [r0, #4]
 80071b4:	545a      	strb	r2, [r3, r1]
 80071b6:	4770      	bx	lr

080071b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80071b8:	b508      	push	{r3, lr}
 80071ba:	680b      	ldr	r3, [r1, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	da02      	bge.n	80071c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80071c0:	4809      	ldr	r0, [pc, #36]	; (80071e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80071c2:	f7ff ffca 	bl	800715a <_ZSt20__throw_length_errorPKc>
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d908      	bls.n	80071dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80071ca:	0052      	lsls	r2, r2, #1
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d205      	bcs.n	80071dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80071d0:	2a00      	cmp	r2, #0
 80071d2:	bfb6      	itet	lt
 80071d4:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80071d8:	600a      	strge	r2, [r1, #0]
 80071da:	600b      	strlt	r3, [r1, #0]
 80071dc:	6808      	ldr	r0, [r1, #0]
 80071de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80071e2:	3001      	adds	r0, #1
 80071e4:	f7ff bf9a 	b.w	800711c <_Znwj>
 80071e8:	08008715 	.word	0x08008715

080071ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80071ec:	4603      	mov	r3, r0
 80071ee:	f853 0b08 	ldr.w	r0, [r3], #8
 80071f2:	4298      	cmp	r0, r3
 80071f4:	d001      	beq.n	80071fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80071f6:	f000 baa3 	b.w	8007740 <_ZdlPv>
 80071fa:	4770      	bx	lr

080071fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80071fc:	b510      	push	{r4, lr}
 80071fe:	6843      	ldr	r3, [r0, #4]
 8007200:	4614      	mov	r4, r2
 8007202:	4299      	cmp	r1, r3
 8007204:	d904      	bls.n	8007210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 8007206:	460a      	mov	r2, r1
 8007208:	4802      	ldr	r0, [pc, #8]	; (8007214 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800720a:	4621      	mov	r1, r4
 800720c:	f7ff ffa8 	bl	8007160 <_ZSt24__throw_out_of_range_fmtPKcz>
 8007210:	4608      	mov	r0, r1
 8007212:	bd10      	pop	{r4, pc}
 8007214:	08008670 	.word	0x08008670

08007218 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8007218:	b508      	push	{r3, lr}
 800721a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800721e:	6840      	ldr	r0, [r0, #4]
 8007220:	3901      	subs	r1, #1
 8007222:	1a09      	subs	r1, r1, r0
 8007224:	4291      	cmp	r1, r2
 8007226:	d202      	bcs.n	800722e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff ff96 	bl	800715a <_ZSt20__throw_length_errorPKc>
 800722e:	bd08      	pop	{r3, pc}

08007230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8007230:	6803      	ldr	r3, [r0, #0]
 8007232:	428b      	cmp	r3, r1
 8007234:	d806      	bhi.n	8007244 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8007236:	6840      	ldr	r0, [r0, #4]
 8007238:	4418      	add	r0, r3
 800723a:	4281      	cmp	r1, r0
 800723c:	bf94      	ite	ls
 800723e:	2000      	movls	r0, #0
 8007240:	2001      	movhi	r0, #1
 8007242:	4770      	bx	lr
 8007244:	2001      	movs	r0, #1
 8007246:	4770      	bx	lr

08007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8007248:	2a01      	cmp	r2, #1
 800724a:	b510      	push	{r4, lr}
 800724c:	d102      	bne.n	8007254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800724e:	780a      	ldrb	r2, [r1, #0]
 8007250:	7002      	strb	r2, [r0, #0]
 8007252:	bd10      	pop	{r4, pc}
 8007254:	f7ff ff9f 	bl	8007196 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8007258:	e7fb      	b.n	8007252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800725a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800725a:	2a01      	cmp	r2, #1
 800725c:	b430      	push	{r4, r5}
 800725e:	d103      	bne.n	8007268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8007260:	780b      	ldrb	r3, [r1, #0]
 8007262:	7003      	strb	r3, [r0, #0]
 8007264:	bc30      	pop	{r4, r5}
 8007266:	4770      	bx	lr
 8007268:	2a00      	cmp	r2, #0
 800726a:	d0fb      	beq.n	8007264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800726c:	bc30      	pop	{r4, r5}
 800726e:	f000 bb52 	b.w	8007916 <memmove>

08007272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8007272:	b508      	push	{r3, lr}
 8007274:	1a52      	subs	r2, r2, r1
 8007276:	f7ff ffe7 	bl	8007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800727a:	bd08      	pop	{r3, pc}

0800727c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800727c:	b508      	push	{r3, lr}
 800727e:	1a52      	subs	r2, r2, r1
 8007280:	f7ff ffe2 	bl	8007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007284:	bd08      	pop	{r3, pc}

08007286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8007286:	4288      	cmp	r0, r1
 8007288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800728a:	4604      	mov	r4, r0
 800728c:	460e      	mov	r6, r1
 800728e:	d020      	beq.n	80072d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8007290:	6802      	ldr	r2, [r0, #0]
 8007292:	f100 0308 	add.w	r3, r0, #8
 8007296:	429a      	cmp	r2, r3
 8007298:	bf08      	it	eq
 800729a:	220f      	moveq	r2, #15
 800729c:	684d      	ldr	r5, [r1, #4]
 800729e:	bf18      	it	ne
 80072a0:	6882      	ldrne	r2, [r0, #8]
 80072a2:	42aa      	cmp	r2, r5
 80072a4:	d20b      	bcs.n	80072be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 80072a6:	a902      	add	r1, sp, #8
 80072a8:	f841 5d04 	str.w	r5, [r1, #-4]!
 80072ac:	f7ff ff84 	bl	80071b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80072b0:	4607      	mov	r7, r0
 80072b2:	4620      	mov	r0, r4
 80072b4:	f7ff ff9a 	bl	80071ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80072b8:	9b01      	ldr	r3, [sp, #4]
 80072ba:	6027      	str	r7, [r4, #0]
 80072bc:	60a3      	str	r3, [r4, #8]
 80072be:	b125      	cbz	r5, 80072ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 80072c0:	462a      	mov	r2, r5
 80072c2:	6831      	ldr	r1, [r6, #0]
 80072c4:	6820      	ldr	r0, [r4, #0]
 80072c6:	f7ff ffbf 	bl	8007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80072ca:	2200      	movs	r2, #0
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	6065      	str	r5, [r4, #4]
 80072d0:	555a      	strb	r2, [r3, r5]
 80072d2:	b003      	add	sp, #12
 80072d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80072d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80072da:	4616      	mov	r6, r2
 80072dc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80072e0:	6842      	ldr	r2, [r0, #4]
 80072e2:	469a      	mov	sl, r3
 80072e4:	eba8 0306 	sub.w	r3, r8, r6
 80072e8:	1a57      	subs	r7, r2, r1
 80072ea:	4413      	add	r3, r2
 80072ec:	6802      	ldr	r2, [r0, #0]
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	f100 0308 	add.w	r3, r0, #8
 80072f4:	429a      	cmp	r2, r3
 80072f6:	460d      	mov	r5, r1
 80072f8:	bf14      	ite	ne
 80072fa:	6882      	ldrne	r2, [r0, #8]
 80072fc:	220f      	moveq	r2, #15
 80072fe:	a901      	add	r1, sp, #4
 8007300:	4604      	mov	r4, r0
 8007302:	f7ff ff59 	bl	80071b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007306:	1bbf      	subs	r7, r7, r6
 8007308:	4681      	mov	r9, r0
 800730a:	b11d      	cbz	r5, 8007314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800730c:	462a      	mov	r2, r5
 800730e:	6821      	ldr	r1, [r4, #0]
 8007310:	f7ff ff9a 	bl	8007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007314:	f1ba 0f00 	cmp.w	sl, #0
 8007318:	d008      	beq.n	800732c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800731a:	f1b8 0f00 	cmp.w	r8, #0
 800731e:	d005      	beq.n	800732c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8007320:	4642      	mov	r2, r8
 8007322:	4651      	mov	r1, sl
 8007324:	eb09 0005 	add.w	r0, r9, r5
 8007328:	f7ff ff8e 	bl	8007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800732c:	b147      	cbz	r7, 8007340 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800732e:	6821      	ldr	r1, [r4, #0]
 8007330:	442e      	add	r6, r5
 8007332:	eb05 0008 	add.w	r0, r5, r8
 8007336:	463a      	mov	r2, r7
 8007338:	4431      	add	r1, r6
 800733a:	4448      	add	r0, r9
 800733c:	f7ff ff84 	bl	8007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007340:	4620      	mov	r0, r4
 8007342:	f7ff ff53 	bl	80071ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007346:	9b01      	ldr	r3, [sp, #4]
 8007348:	f8c4 9000 	str.w	r9, [r4]
 800734c:	60a3      	str	r3, [r4, #8]
 800734e:	b002      	add	sp, #8
 8007350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8007354:	f100 0208 	add.w	r2, r0, #8
 8007358:	6002      	str	r2, [r0, #0]
 800735a:	2200      	movs	r2, #0
 800735c:	6042      	str	r2, [r0, #4]
 800735e:	7202      	strb	r2, [r0, #8]
 8007360:	4770      	bx	lr

08007362 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8007362:	b570      	push	{r4, r5, r6, lr}
 8007364:	4604      	mov	r4, r0
 8007366:	460e      	mov	r6, r1
 8007368:	3008      	adds	r0, #8
 800736a:	6020      	str	r0, [r4, #0]
 800736c:	f856 3b08 	ldr.w	r3, [r6], #8
 8007370:	460d      	mov	r5, r1
 8007372:	429e      	cmp	r6, r3
 8007374:	d10b      	bne.n	800738e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8007376:	2210      	movs	r2, #16
 8007378:	4631      	mov	r1, r6
 800737a:	f7ff ff0c 	bl	8007196 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800737e:	686b      	ldr	r3, [r5, #4]
 8007380:	4620      	mov	r0, r4
 8007382:	6063      	str	r3, [r4, #4]
 8007384:	2300      	movs	r3, #0
 8007386:	602e      	str	r6, [r5, #0]
 8007388:	606b      	str	r3, [r5, #4]
 800738a:	722b      	strb	r3, [r5, #8]
 800738c:	bd70      	pop	{r4, r5, r6, pc}
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	688b      	ldr	r3, [r1, #8]
 8007392:	60a3      	str	r3, [r4, #8]
 8007394:	e7f3      	b.n	800737e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08007396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8007396:	b510      	push	{r4, lr}
 8007398:	4604      	mov	r4, r0
 800739a:	f7ff ff27 	bl	80071ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800739e:	4620      	mov	r0, r4
 80073a0:	bd10      	pop	{r4, pc}

080073a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80073a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a4:	460b      	mov	r3, r1
 80073a6:	4606      	mov	r6, r0
 80073a8:	f853 7b08 	ldr.w	r7, [r3], #8
 80073ac:	4605      	mov	r5, r0
 80073ae:	42bb      	cmp	r3, r7
 80073b0:	460c      	mov	r4, r1
 80073b2:	f856 2b08 	ldr.w	r2, [r6], #8
 80073b6:	d016      	beq.n	80073e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 80073b8:	4296      	cmp	r6, r2
 80073ba:	bf08      	it	eq
 80073bc:	2200      	moveq	r2, #0
 80073be:	6007      	str	r7, [r0, #0]
 80073c0:	6849      	ldr	r1, [r1, #4]
 80073c2:	bf18      	it	ne
 80073c4:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 80073c8:	6041      	str	r1, [r0, #4]
 80073ca:	68a1      	ldr	r1, [r4, #8]
 80073cc:	6081      	str	r1, [r0, #8]
 80073ce:	b142      	cbz	r2, 80073e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80073d0:	6022      	str	r2, [r4, #0]
 80073d2:	f8c4 c008 	str.w	ip, [r4, #8]
 80073d6:	2300      	movs	r3, #0
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	6063      	str	r3, [r4, #4]
 80073dc:	7013      	strb	r3, [r2, #0]
 80073de:	4628      	mov	r0, r5
 80073e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e2:	6023      	str	r3, [r4, #0]
 80073e4:	e7f7      	b.n	80073d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 80073e6:	f7ff ff4e 	bl	8007286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80073ea:	e7f4      	b.n	80073d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

080073ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 80073ec:	6840      	ldr	r0, [r0, #4]
 80073ee:	4770      	bx	lr

080073f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 80073f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073f2:	4605      	mov	r5, r0
 80073f4:	6843      	ldr	r3, [r0, #4]
 80073f6:	9101      	str	r1, [sp, #4]
 80073f8:	4299      	cmp	r1, r3
 80073fa:	f855 1b08 	ldr.w	r1, [r5], #8
 80073fe:	bf38      	it	cc
 8007400:	9301      	strcc	r3, [sp, #4]
 8007402:	428d      	cmp	r5, r1
 8007404:	bf0c      	ite	eq
 8007406:	220f      	moveq	r2, #15
 8007408:	6882      	ldrne	r2, [r0, #8]
 800740a:	4604      	mov	r4, r0
 800740c:	9801      	ldr	r0, [sp, #4]
 800740e:	4290      	cmp	r0, r2
 8007410:	d012      	beq.n	8007438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>
 8007412:	d801      	bhi.n	8007418 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x28>
 8007414:	280f      	cmp	r0, #15
 8007416:	d911      	bls.n	800743c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4c>
 8007418:	a901      	add	r1, sp, #4
 800741a:	4620      	mov	r0, r4
 800741c:	f7ff fecc 	bl	80071b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007420:	4605      	mov	r5, r0
 8007422:	6862      	ldr	r2, [r4, #4]
 8007424:	6821      	ldr	r1, [r4, #0]
 8007426:	3201      	adds	r2, #1
 8007428:	f7ff ff0e 	bl	8007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800742c:	4620      	mov	r0, r4
 800742e:	f7ff fedd 	bl	80071ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	6025      	str	r5, [r4, #0]
 8007436:	60a3      	str	r3, [r4, #8]
 8007438:	b003      	add	sp, #12
 800743a:	bd30      	pop	{r4, r5, pc}
 800743c:	428d      	cmp	r5, r1
 800743e:	d0fb      	beq.n	8007438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	4628      	mov	r0, r5
 8007444:	f7ff ff00 	bl	8007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007448:	6820      	ldr	r0, [r4, #0]
 800744a:	f000 f979 	bl	8007740 <_ZdlPv>
 800744e:	6025      	str	r5, [r4, #0]
 8007450:	e7f2      	b.n	8007438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x48>

08007452 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8007452:	6840      	ldr	r0, [r0, #4]
 8007454:	fab0 f080 	clz	r0, r0
 8007458:	0940      	lsrs	r0, r0, #5
 800745a:	4770      	bx	lr

0800745c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 800745c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800745e:	6802      	ldr	r2, [r0, #0]
 8007460:	f100 0308 	add.w	r3, r0, #8
 8007464:	429a      	cmp	r2, r3
 8007466:	bf08      	it	eq
 8007468:	230f      	moveq	r3, #15
 800746a:	6846      	ldr	r6, [r0, #4]
 800746c:	bf18      	it	ne
 800746e:	6883      	ldrne	r3, [r0, #8]
 8007470:	1c75      	adds	r5, r6, #1
 8007472:	429d      	cmp	r5, r3
 8007474:	4604      	mov	r4, r0
 8007476:	460f      	mov	r7, r1
 8007478:	d906      	bls.n	8007488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 800747a:	2301      	movs	r3, #1
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	2300      	movs	r3, #0
 8007480:	4631      	mov	r1, r6
 8007482:	461a      	mov	r2, r3
 8007484:	f7ff ff27 	bl	80072d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8007488:	2200      	movs	r2, #0
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	559f      	strb	r7, [r3, r6]
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	6065      	str	r5, [r4, #4]
 8007492:	555a      	strb	r2, [r3, r5]
 8007494:	b003      	add	sp, #12
 8007496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8007498:	b510      	push	{r4, lr}
 800749a:	4604      	mov	r4, r0
 800749c:	f7ff ffde 	bl	800745c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 80074a0:	4620      	mov	r0, r4
 80074a2:	bd10      	pop	{r4, pc}

080074a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80074a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a8:	4614      	mov	r4, r2
 80074aa:	4681      	mov	r9, r0
 80074ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074ae:	460f      	mov	r7, r1
 80074b0:	462a      	mov	r2, r5
 80074b2:	4698      	mov	r8, r3
 80074b4:	4621      	mov	r1, r4
 80074b6:	4b37      	ldr	r3, [pc, #220]	; (8007594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 80074b8:	f7ff feae 	bl	8007218 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80074bc:	464a      	mov	r2, r9
 80074be:	f852 6b08 	ldr.w	r6, [r2], #8
 80074c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80074c6:	4296      	cmp	r6, r2
 80074c8:	bf08      	it	eq
 80074ca:	220f      	moveq	r2, #15
 80074cc:	eba5 0b04 	sub.w	fp, r5, r4
 80074d0:	bf18      	it	ne
 80074d2:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 80074d6:	eb03 0a0b 	add.w	sl, r3, fp
 80074da:	4552      	cmp	r2, sl
 80074dc:	d34e      	bcc.n	800757c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80074de:	443e      	add	r6, r7
 80074e0:	4641      	mov	r1, r8
 80074e2:	1bdf      	subs	r7, r3, r7
 80074e4:	4648      	mov	r0, r9
 80074e6:	1b3f      	subs	r7, r7, r4
 80074e8:	f7ff fea2 	bl	8007230 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80074ec:	b170      	cbz	r0, 800750c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80074ee:	b137      	cbz	r7, 80074fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80074f0:	42ac      	cmp	r4, r5
 80074f2:	d004      	beq.n	80074fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80074f4:	463a      	mov	r2, r7
 80074f6:	1931      	adds	r1, r6, r4
 80074f8:	1970      	adds	r0, r6, r5
 80074fa:	f7ff feae 	bl	800725a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80074fe:	b30d      	cbz	r5, 8007544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8007500:	462a      	mov	r2, r5
 8007502:	4641      	mov	r1, r8
 8007504:	4630      	mov	r0, r6
 8007506:	f7ff fe9f 	bl	8007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800750a:	e01b      	b.n	8007544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800750c:	b135      	cbz	r5, 800751c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 800750e:	42ac      	cmp	r4, r5
 8007510:	d33c      	bcc.n	800758c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 8007512:	462a      	mov	r2, r5
 8007514:	4641      	mov	r1, r8
 8007516:	4630      	mov	r0, r6
 8007518:	f7ff fe9f 	bl	800725a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800751c:	b197      	cbz	r7, 8007544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800751e:	42ac      	cmp	r4, r5
 8007520:	d010      	beq.n	8007544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8007522:	463a      	mov	r2, r7
 8007524:	1931      	adds	r1, r6, r4
 8007526:	1970      	adds	r0, r6, r5
 8007528:	f7ff fe97 	bl	800725a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800752c:	42ac      	cmp	r4, r5
 800752e:	d209      	bcs.n	8007544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8007530:	4434      	add	r4, r6
 8007532:	eb08 0305 	add.w	r3, r8, r5
 8007536:	429c      	cmp	r4, r3
 8007538:	d30f      	bcc.n	800755a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 800753a:	462a      	mov	r2, r5
 800753c:	4641      	mov	r1, r8
 800753e:	4630      	mov	r0, r6
 8007540:	f7ff fe8b 	bl	800725a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007544:	2200      	movs	r2, #0
 8007546:	4648      	mov	r0, r9
 8007548:	f8d9 3000 	ldr.w	r3, [r9]
 800754c:	f8c9 a004 	str.w	sl, [r9, #4]
 8007550:	f803 200a 	strb.w	r2, [r3, sl]
 8007554:	b003      	add	sp, #12
 8007556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755a:	4544      	cmp	r4, r8
 800755c:	d803      	bhi.n	8007566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800755e:	462a      	mov	r2, r5
 8007560:	eb08 010b 	add.w	r1, r8, fp
 8007564:	e7ce      	b.n	8007504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8007566:	eba4 0408 	sub.w	r4, r4, r8
 800756a:	4622      	mov	r2, r4
 800756c:	4641      	mov	r1, r8
 800756e:	4630      	mov	r0, r6
 8007570:	f7ff fe73 	bl	800725a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007574:	1b2a      	subs	r2, r5, r4
 8007576:	1971      	adds	r1, r6, r5
 8007578:	1930      	adds	r0, r6, r4
 800757a:	e7c4      	b.n	8007506 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 800757c:	9500      	str	r5, [sp, #0]
 800757e:	4643      	mov	r3, r8
 8007580:	4622      	mov	r2, r4
 8007582:	4639      	mov	r1, r7
 8007584:	4648      	mov	r0, r9
 8007586:	f7ff fea6 	bl	80072d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800758a:	e7db      	b.n	8007544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800758c:	2f00      	cmp	r7, #0
 800758e:	d0cf      	beq.n	8007530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8007590:	e7c7      	b.n	8007522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8007592:	bf00      	nop
 8007594:	080086a7 	.word	0x080086a7

08007598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8007598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800759a:	4604      	mov	r4, r0
 800759c:	4608      	mov	r0, r1
 800759e:	460d      	mov	r5, r1
 80075a0:	f7f8 fdd4 	bl	800014c <strlen>
 80075a4:	462b      	mov	r3, r5
 80075a6:	9000      	str	r0, [sp, #0]
 80075a8:	6862      	ldr	r2, [r4, #4]
 80075aa:	2100      	movs	r1, #0
 80075ac:	4620      	mov	r0, r4
 80075ae:	f7ff ff79 	bl	80074a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80075b2:	b003      	add	sp, #12
 80075b4:	bd30      	pop	{r4, r5, pc}

080075b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80075b6:	b508      	push	{r3, lr}
 80075b8:	f7ff ffee 	bl	8007598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80075bc:	bd08      	pop	{r3, pc}
	...

080075c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 80075c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075c2:	4604      	mov	r4, r0
 80075c4:	460f      	mov	r7, r1
 80075c6:	4615      	mov	r5, r2
 80075c8:	4a08      	ldr	r2, [pc, #32]	; (80075ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80075ca:	461e      	mov	r6, r3
 80075cc:	f7ff fe16 	bl	80071fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80075d0:	6862      	ldr	r2, [r4, #4]
 80075d2:	9b08      	ldr	r3, [sp, #32]
 80075d4:	1bd2      	subs	r2, r2, r7
 80075d6:	42aa      	cmp	r2, r5
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	4601      	mov	r1, r0
 80075dc:	4633      	mov	r3, r6
 80075de:	bf28      	it	cs
 80075e0:	462a      	movcs	r2, r5
 80075e2:	4620      	mov	r0, r4
 80075e4:	f7ff ff5e 	bl	80074a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80075e8:	b003      	add	sp, #12
 80075ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ec:	080086ff 	.word	0x080086ff

080075f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 80075f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075f2:	4605      	mov	r5, r0
 80075f4:	4610      	mov	r0, r2
 80075f6:	4614      	mov	r4, r2
 80075f8:	460e      	mov	r6, r1
 80075fa:	f7f8 fda7 	bl	800014c <strlen>
 80075fe:	4623      	mov	r3, r4
 8007600:	9000      	str	r0, [sp, #0]
 8007602:	2200      	movs	r2, #0
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	f7ff ffda 	bl	80075c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800760c:	b002      	add	sp, #8
 800760e:	bd70      	pop	{r4, r5, r6, pc}

08007610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8007610:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007612:	4604      	mov	r4, r0
 8007614:	4626      	mov	r6, r4
 8007616:	f856 3b08 	ldr.w	r3, [r6], #8
 800761a:	6840      	ldr	r0, [r0, #4]
 800761c:	42b3      	cmp	r3, r6
 800761e:	bf0c      	ite	eq
 8007620:	260f      	moveq	r6, #15
 8007622:	68a6      	ldrne	r6, [r4, #8]
 8007624:	1885      	adds	r5, r0, r2
 8007626:	42b5      	cmp	r5, r6
 8007628:	d80a      	bhi.n	8007640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 800762a:	b112      	cbz	r2, 8007632 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 800762c:	4418      	add	r0, r3
 800762e:	f7ff fe0b 	bl	8007248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007632:	2200      	movs	r2, #0
 8007634:	4620      	mov	r0, r4
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	6065      	str	r5, [r4, #4]
 800763a:	555a      	strb	r2, [r3, r5]
 800763c:	b002      	add	sp, #8
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	9200      	str	r2, [sp, #0]
 8007642:	460b      	mov	r3, r1
 8007644:	2200      	movs	r2, #0
 8007646:	4601      	mov	r1, r0
 8007648:	4620      	mov	r0, r4
 800764a:	f7ff fe44 	bl	80072d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800764e:	e7f0      	b.n	8007632 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08007650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8007650:	b508      	push	{r3, lr}
 8007652:	e9d1 1200 	ldrd	r1, r2, [r1]
 8007656:	f7ff ffdb 	bl	8007610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800765a:	bd08      	pop	{r3, pc}

0800765c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800765c:	b570      	push	{r4, r5, r6, lr}
 800765e:	4604      	mov	r4, r0
 8007660:	460d      	mov	r5, r1
 8007662:	4616      	mov	r6, r2
 8007664:	4b04      	ldr	r3, [pc, #16]	; (8007678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8007666:	2100      	movs	r1, #0
 8007668:	f7ff fdd6 	bl	8007218 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800766c:	4632      	mov	r2, r6
 800766e:	4629      	mov	r1, r5
 8007670:	4620      	mov	r0, r4
 8007672:	f7ff ffcd 	bl	8007610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8007676:	bd70      	pop	{r4, r5, r6, pc}
 8007678:	080086ea 	.word	0x080086ea

0800767c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	460d      	mov	r5, r1
 8007684:	f7f8 fd62 	bl	800014c <strlen>
 8007688:	4606      	mov	r6, r0
 800768a:	4602      	mov	r2, r0
 800768c:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800768e:	4620      	mov	r0, r4
 8007690:	2100      	movs	r1, #0
 8007692:	f7ff fdc1 	bl	8007218 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8007696:	4632      	mov	r2, r6
 8007698:	4629      	mov	r1, r5
 800769a:	4620      	mov	r0, r4
 800769c:	f7ff ffb8 	bl	8007610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80076a0:	bd70      	pop	{r4, r5, r6, pc}
 80076a2:	bf00      	nop
 80076a4:	080086ea 	.word	0x080086ea

080076a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80076a8:	6800      	ldr	r0, [r0, #0]
 80076aa:	4770      	bx	lr

080076ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80076ac:	6001      	str	r1, [r0, #0]
 80076ae:	4770      	bx	lr

080076b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	4604      	mov	r4, r0
 80076b4:	f100 0208 	add.w	r2, r0, #8
 80076b8:	6002      	str	r2, [r0, #0]
 80076ba:	e9d1 1200 	ldrd	r1, r2, [r1]
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	440a      	add	r2, r1
 80076c4:	f7fa fbfc 	bl	8001ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80076c8:	4620      	mov	r0, r4
 80076ca:	bd10      	pop	{r4, pc}

080076cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80076cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076ce:	4604      	mov	r4, r0
 80076d0:	4616      	mov	r6, r2
 80076d2:	460d      	mov	r5, r1
 80076d4:	b919      	cbnz	r1, 80076de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80076d6:	b112      	cbz	r2, 80076de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80076d8:	480d      	ldr	r0, [pc, #52]	; (8007710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80076da:	f7ff fd3b 	bl	8007154 <_ZSt19__throw_logic_errorPKc>
 80076de:	1b73      	subs	r3, r6, r5
 80076e0:	2b0f      	cmp	r3, #15
 80076e2:	9301      	str	r3, [sp, #4]
 80076e4:	d907      	bls.n	80076f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80076e6:	2200      	movs	r2, #0
 80076e8:	a901      	add	r1, sp, #4
 80076ea:	4620      	mov	r0, r4
 80076ec:	f7ff fd64 	bl	80071b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80076f0:	9b01      	ldr	r3, [sp, #4]
 80076f2:	6020      	str	r0, [r4, #0]
 80076f4:	60a3      	str	r3, [r4, #8]
 80076f6:	4632      	mov	r2, r6
 80076f8:	4629      	mov	r1, r5
 80076fa:	6820      	ldr	r0, [r4, #0]
 80076fc:	f7ff fdbe 	bl	800727c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8007700:	2100      	movs	r1, #0
 8007702:	9b01      	ldr	r3, [sp, #4]
 8007704:	6822      	ldr	r2, [r4, #0]
 8007706:	6063      	str	r3, [r4, #4]
 8007708:	54d1      	strb	r1, [r2, r3]
 800770a:	b002      	add	sp, #8
 800770c:	bd70      	pop	{r4, r5, r6, pc}
 800770e:	bf00      	nop
 8007710:	080086c0 	.word	0x080086c0

08007714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	f100 0308 	add.w	r3, r0, #8
 800771a:	4604      	mov	r4, r0
 800771c:	6003      	str	r3, [r0, #0]
 800771e:	460d      	mov	r5, r1
 8007720:	b159      	cbz	r1, 800773a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8007722:	4608      	mov	r0, r1
 8007724:	f7f8 fd12 	bl	800014c <strlen>
 8007728:	182a      	adds	r2, r5, r0
 800772a:	4620      	mov	r0, r4
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	4629      	mov	r1, r5
 8007732:	f7ff ffcb 	bl	80076cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007736:	4620      	mov	r0, r4
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	f04f 32ff 	mov.w	r2, #4294967295
 800773e:	e7f4      	b.n	800772a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08007740 <_ZdlPv>:
 8007740:	f000 b8c8 	b.w	80078d4 <free>

08007744 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8007744:	b580      	push	{r7, lr}
 8007746:	b09c      	sub	sp, #112	; 0x70
 8007748:	af00      	add	r7, sp, #0
 800774a:	1a0e      	subs	r6, r1, r0
 800774c:	4680      	mov	r8, r0
 800774e:	2269      	movs	r2, #105	; 0x69
 8007750:	490e      	ldr	r1, [pc, #56]	; (800778c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8007752:	1d38      	adds	r0, r7, #4
 8007754:	f000 f8d4 	bl	8007900 <memcpy>
 8007758:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800775c:	f023 0307 	bic.w	r3, r3, #7
 8007760:	ebad 0d03 	sub.w	sp, sp, r3
 8007764:	466c      	mov	r4, sp
 8007766:	2268      	movs	r2, #104	; 0x68
 8007768:	1d39      	adds	r1, r7, #4
 800776a:	4620      	mov	r0, r4
 800776c:	f000 f8c8 	bl	8007900 <memcpy>
 8007770:	4632      	mov	r2, r6
 8007772:	4641      	mov	r1, r8
 8007774:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007778:	f000 f8c2 	bl	8007900 <memcpy>
 800777c:	2300      	movs	r3, #0
 800777e:	1c75      	adds	r5, r6, #1
 8007780:	4425      	add	r5, r4
 8007782:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8007786:	4620      	mov	r0, r4
 8007788:	f7ff fce4 	bl	8007154 <_ZSt19__throw_logic_errorPKc>
 800778c:	08008738 	.word	0x08008738

08007790 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	af00      	add	r7, sp, #0
 8007794:	b086      	sub	sp, #24
 8007796:	466d      	mov	r5, sp
 8007798:	f105 040c 	add.w	r4, r5, #12
 800779c:	4623      	mov	r3, r4
 800779e:	f04f 0c0a 	mov.w	ip, #10
 80077a2:	f8df e038 	ldr.w	lr, [pc, #56]	; 80077dc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80077a6:	fbb2 f6fc 	udiv	r6, r2, ip
 80077aa:	fb0c 2216 	mls	r2, ip, r6, r2
 80077ae:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80077b2:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80077b6:	4632      	mov	r2, r6
 80077b8:	2e00      	cmp	r6, #0
 80077ba:	d1f4      	bne.n	80077a6 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 80077bc:	1ae4      	subs	r4, r4, r3
 80077be:	428c      	cmp	r4, r1
 80077c0:	d808      	bhi.n	80077d4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80077c2:	f1c4 010c 	rsb	r1, r4, #12
 80077c6:	4622      	mov	r2, r4
 80077c8:	4429      	add	r1, r5
 80077ca:	f000 f899 	bl	8007900 <memcpy>
 80077ce:	4620      	mov	r0, r4
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077d4:	f04f 34ff 	mov.w	r4, #4294967295
 80077d8:	e7f9      	b.n	80077ce <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 80077da:	bf00      	nop
 80077dc:	0800872d 	.word	0x0800872d

080077e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80077e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e4:	4606      	mov	r6, r0
 80077e6:	4615      	mov	r5, r2
 80077e8:	4604      	mov	r4, r0
 80077ea:	3901      	subs	r1, #1
 80077ec:	1847      	adds	r7, r0, r1
 80077ee:	782a      	ldrb	r2, [r5, #0]
 80077f0:	b39a      	cbz	r2, 800785a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80077f2:	42bc      	cmp	r4, r7
 80077f4:	d22d      	bcs.n	8007852 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80077f6:	2a25      	cmp	r2, #37	; 0x25
 80077f8:	d107      	bne.n	800780a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80077fa:	786a      	ldrb	r2, [r5, #1]
 80077fc:	2a73      	cmp	r2, #115	; 0x73
 80077fe:	d00a      	beq.n	8007816 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8007800:	2a7a      	cmp	r2, #122	; 0x7a
 8007802:	d013      	beq.n	800782c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8007804:	2a25      	cmp	r2, #37	; 0x25
 8007806:	d100      	bne.n	800780a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8007808:	3501      	adds	r5, #1
 800780a:	782a      	ldrb	r2, [r5, #0]
 800780c:	3401      	adds	r4, #1
 800780e:	f804 2c01 	strb.w	r2, [r4, #-1]
 8007812:	3501      	adds	r5, #1
 8007814:	e7eb      	b.n	80077ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8007816:	1d19      	adds	r1, r3, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3b01      	subs	r3, #1
 800781c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8007820:	b1a2      	cbz	r2, 800784c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 8007822:	42bc      	cmp	r4, r7
 8007824:	d015      	beq.n	8007852 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8007826:	f804 2b01 	strb.w	r2, [r4], #1
 800782a:	e7f7      	b.n	800781c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800782c:	78aa      	ldrb	r2, [r5, #2]
 800782e:	2a75      	cmp	r2, #117	; 0x75
 8007830:	d1eb      	bne.n	800780a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	1b39      	subs	r1, r7, r4
 8007836:	4620      	mov	r0, r4
 8007838:	f103 0804 	add.w	r8, r3, #4
 800783c:	f7ff ffa8 	bl	8007790 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8007840:	2800      	cmp	r0, #0
 8007842:	dd06      	ble.n	8007852 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8007844:	4404      	add	r4, r0
 8007846:	3503      	adds	r5, #3
 8007848:	4643      	mov	r3, r8
 800784a:	e7d0      	b.n	80077ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800784c:	3502      	adds	r5, #2
 800784e:	460b      	mov	r3, r1
 8007850:	e7cd      	b.n	80077ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8007852:	4621      	mov	r1, r4
 8007854:	4630      	mov	r0, r6
 8007856:	f7ff ff75 	bl	8007744 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800785a:	7022      	strb	r2, [r4, #0]
 800785c:	1ba0      	subs	r0, r4, r6
 800785e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007862 <abort>:
 8007862:	b508      	push	{r3, lr}
 8007864:	2006      	movs	r0, #6
 8007866:	f000 f955 	bl	8007b14 <raise>
 800786a:	2001      	movs	r0, #1
 800786c:	f7fb fd59 	bl	8003322 <_exit>

08007870 <__errno>:
 8007870:	4b01      	ldr	r3, [pc, #4]	; (8007878 <__errno+0x8>)
 8007872:	6818      	ldr	r0, [r3, #0]
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	2000000c 	.word	0x2000000c

0800787c <__libc_init_array>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	2500      	movs	r5, #0
 8007880:	4e0c      	ldr	r6, [pc, #48]	; (80078b4 <__libc_init_array+0x38>)
 8007882:	4c0d      	ldr	r4, [pc, #52]	; (80078b8 <__libc_init_array+0x3c>)
 8007884:	1ba4      	subs	r4, r4, r6
 8007886:	10a4      	asrs	r4, r4, #2
 8007888:	42a5      	cmp	r5, r4
 800788a:	d109      	bne.n	80078a0 <__libc_init_array+0x24>
 800788c:	f000 fca2 	bl	80081d4 <_init>
 8007890:	2500      	movs	r5, #0
 8007892:	4e0a      	ldr	r6, [pc, #40]	; (80078bc <__libc_init_array+0x40>)
 8007894:	4c0a      	ldr	r4, [pc, #40]	; (80078c0 <__libc_init_array+0x44>)
 8007896:	1ba4      	subs	r4, r4, r6
 8007898:	10a4      	asrs	r4, r4, #2
 800789a:	42a5      	cmp	r5, r4
 800789c:	d105      	bne.n	80078aa <__libc_init_array+0x2e>
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078a4:	4798      	blx	r3
 80078a6:	3501      	adds	r5, #1
 80078a8:	e7ee      	b.n	8007888 <__libc_init_array+0xc>
 80078aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078ae:	4798      	blx	r3
 80078b0:	3501      	adds	r5, #1
 80078b2:	e7f2      	b.n	800789a <__libc_init_array+0x1e>
 80078b4:	08008838 	.word	0x08008838
 80078b8:	08008838 	.word	0x08008838
 80078bc:	08008838 	.word	0x08008838
 80078c0:	0800883c 	.word	0x0800883c

080078c4 <malloc>:
 80078c4:	4b02      	ldr	r3, [pc, #8]	; (80078d0 <malloc+0xc>)
 80078c6:	4601      	mov	r1, r0
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	f000 b891 	b.w	80079f0 <_malloc_r>
 80078ce:	bf00      	nop
 80078d0:	2000000c 	.word	0x2000000c

080078d4 <free>:
 80078d4:	4b02      	ldr	r3, [pc, #8]	; (80078e0 <free+0xc>)
 80078d6:	4601      	mov	r1, r0
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	f000 b83d 	b.w	8007958 <_free_r>
 80078de:	bf00      	nop
 80078e0:	2000000c 	.word	0x2000000c

080078e4 <memchr>:
 80078e4:	b510      	push	{r4, lr}
 80078e6:	b2c9      	uxtb	r1, r1
 80078e8:	4402      	add	r2, r0
 80078ea:	4290      	cmp	r0, r2
 80078ec:	4603      	mov	r3, r0
 80078ee:	d101      	bne.n	80078f4 <memchr+0x10>
 80078f0:	2300      	movs	r3, #0
 80078f2:	e003      	b.n	80078fc <memchr+0x18>
 80078f4:	781c      	ldrb	r4, [r3, #0]
 80078f6:	3001      	adds	r0, #1
 80078f8:	428c      	cmp	r4, r1
 80078fa:	d1f6      	bne.n	80078ea <memchr+0x6>
 80078fc:	4618      	mov	r0, r3
 80078fe:	bd10      	pop	{r4, pc}

08007900 <memcpy>:
 8007900:	b510      	push	{r4, lr}
 8007902:	1e43      	subs	r3, r0, #1
 8007904:	440a      	add	r2, r1
 8007906:	4291      	cmp	r1, r2
 8007908:	d100      	bne.n	800790c <memcpy+0xc>
 800790a:	bd10      	pop	{r4, pc}
 800790c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007910:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007914:	e7f7      	b.n	8007906 <memcpy+0x6>

08007916 <memmove>:
 8007916:	4288      	cmp	r0, r1
 8007918:	b510      	push	{r4, lr}
 800791a:	eb01 0302 	add.w	r3, r1, r2
 800791e:	d807      	bhi.n	8007930 <memmove+0x1a>
 8007920:	1e42      	subs	r2, r0, #1
 8007922:	4299      	cmp	r1, r3
 8007924:	d00a      	beq.n	800793c <memmove+0x26>
 8007926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800792a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800792e:	e7f8      	b.n	8007922 <memmove+0xc>
 8007930:	4283      	cmp	r3, r0
 8007932:	d9f5      	bls.n	8007920 <memmove+0xa>
 8007934:	1881      	adds	r1, r0, r2
 8007936:	1ad2      	subs	r2, r2, r3
 8007938:	42d3      	cmn	r3, r2
 800793a:	d100      	bne.n	800793e <memmove+0x28>
 800793c:	bd10      	pop	{r4, pc}
 800793e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007942:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007946:	e7f7      	b.n	8007938 <memmove+0x22>

08007948 <memset>:
 8007948:	4603      	mov	r3, r0
 800794a:	4402      	add	r2, r0
 800794c:	4293      	cmp	r3, r2
 800794e:	d100      	bne.n	8007952 <memset+0xa>
 8007950:	4770      	bx	lr
 8007952:	f803 1b01 	strb.w	r1, [r3], #1
 8007956:	e7f9      	b.n	800794c <memset+0x4>

08007958 <_free_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4605      	mov	r5, r0
 800795c:	2900      	cmp	r1, #0
 800795e:	d043      	beq.n	80079e8 <_free_r+0x90>
 8007960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007964:	1f0c      	subs	r4, r1, #4
 8007966:	2b00      	cmp	r3, #0
 8007968:	bfb8      	it	lt
 800796a:	18e4      	addlt	r4, r4, r3
 800796c:	f000 f928 	bl	8007bc0 <__malloc_lock>
 8007970:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <_free_r+0x94>)
 8007972:	6813      	ldr	r3, [r2, #0]
 8007974:	4610      	mov	r0, r2
 8007976:	b933      	cbnz	r3, 8007986 <_free_r+0x2e>
 8007978:	6063      	str	r3, [r4, #4]
 800797a:	6014      	str	r4, [r2, #0]
 800797c:	4628      	mov	r0, r5
 800797e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007982:	f000 b91e 	b.w	8007bc2 <__malloc_unlock>
 8007986:	42a3      	cmp	r3, r4
 8007988:	d90b      	bls.n	80079a2 <_free_r+0x4a>
 800798a:	6821      	ldr	r1, [r4, #0]
 800798c:	1862      	adds	r2, r4, r1
 800798e:	4293      	cmp	r3, r2
 8007990:	bf01      	itttt	eq
 8007992:	681a      	ldreq	r2, [r3, #0]
 8007994:	685b      	ldreq	r3, [r3, #4]
 8007996:	1852      	addeq	r2, r2, r1
 8007998:	6022      	streq	r2, [r4, #0]
 800799a:	6063      	str	r3, [r4, #4]
 800799c:	6004      	str	r4, [r0, #0]
 800799e:	e7ed      	b.n	800797c <_free_r+0x24>
 80079a0:	4613      	mov	r3, r2
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	b10a      	cbz	r2, 80079aa <_free_r+0x52>
 80079a6:	42a2      	cmp	r2, r4
 80079a8:	d9fa      	bls.n	80079a0 <_free_r+0x48>
 80079aa:	6819      	ldr	r1, [r3, #0]
 80079ac:	1858      	adds	r0, r3, r1
 80079ae:	42a0      	cmp	r0, r4
 80079b0:	d10b      	bne.n	80079ca <_free_r+0x72>
 80079b2:	6820      	ldr	r0, [r4, #0]
 80079b4:	4401      	add	r1, r0
 80079b6:	1858      	adds	r0, r3, r1
 80079b8:	4282      	cmp	r2, r0
 80079ba:	6019      	str	r1, [r3, #0]
 80079bc:	d1de      	bne.n	800797c <_free_r+0x24>
 80079be:	6810      	ldr	r0, [r2, #0]
 80079c0:	6852      	ldr	r2, [r2, #4]
 80079c2:	4401      	add	r1, r0
 80079c4:	6019      	str	r1, [r3, #0]
 80079c6:	605a      	str	r2, [r3, #4]
 80079c8:	e7d8      	b.n	800797c <_free_r+0x24>
 80079ca:	d902      	bls.n	80079d2 <_free_r+0x7a>
 80079cc:	230c      	movs	r3, #12
 80079ce:	602b      	str	r3, [r5, #0]
 80079d0:	e7d4      	b.n	800797c <_free_r+0x24>
 80079d2:	6820      	ldr	r0, [r4, #0]
 80079d4:	1821      	adds	r1, r4, r0
 80079d6:	428a      	cmp	r2, r1
 80079d8:	bf01      	itttt	eq
 80079da:	6811      	ldreq	r1, [r2, #0]
 80079dc:	6852      	ldreq	r2, [r2, #4]
 80079de:	1809      	addeq	r1, r1, r0
 80079e0:	6021      	streq	r1, [r4, #0]
 80079e2:	6062      	str	r2, [r4, #4]
 80079e4:	605c      	str	r4, [r3, #4]
 80079e6:	e7c9      	b.n	800797c <_free_r+0x24>
 80079e8:	bd38      	pop	{r3, r4, r5, pc}
 80079ea:	bf00      	nop
 80079ec:	20000498 	.word	0x20000498

080079f0 <_malloc_r>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	1ccd      	adds	r5, r1, #3
 80079f4:	f025 0503 	bic.w	r5, r5, #3
 80079f8:	3508      	adds	r5, #8
 80079fa:	2d0c      	cmp	r5, #12
 80079fc:	bf38      	it	cc
 80079fe:	250c      	movcc	r5, #12
 8007a00:	2d00      	cmp	r5, #0
 8007a02:	4606      	mov	r6, r0
 8007a04:	db01      	blt.n	8007a0a <_malloc_r+0x1a>
 8007a06:	42a9      	cmp	r1, r5
 8007a08:	d903      	bls.n	8007a12 <_malloc_r+0x22>
 8007a0a:	230c      	movs	r3, #12
 8007a0c:	6033      	str	r3, [r6, #0]
 8007a0e:	2000      	movs	r0, #0
 8007a10:	bd70      	pop	{r4, r5, r6, pc}
 8007a12:	f000 f8d5 	bl	8007bc0 <__malloc_lock>
 8007a16:	4a21      	ldr	r2, [pc, #132]	; (8007a9c <_malloc_r+0xac>)
 8007a18:	6814      	ldr	r4, [r2, #0]
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	b991      	cbnz	r1, 8007a44 <_malloc_r+0x54>
 8007a1e:	4c20      	ldr	r4, [pc, #128]	; (8007aa0 <_malloc_r+0xb0>)
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	b91b      	cbnz	r3, 8007a2c <_malloc_r+0x3c>
 8007a24:	4630      	mov	r0, r6
 8007a26:	f000 f83d 	bl	8007aa4 <_sbrk_r>
 8007a2a:	6020      	str	r0, [r4, #0]
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f000 f838 	bl	8007aa4 <_sbrk_r>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d124      	bne.n	8007a82 <_malloc_r+0x92>
 8007a38:	230c      	movs	r3, #12
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	6033      	str	r3, [r6, #0]
 8007a3e:	f000 f8c0 	bl	8007bc2 <__malloc_unlock>
 8007a42:	e7e4      	b.n	8007a0e <_malloc_r+0x1e>
 8007a44:	680b      	ldr	r3, [r1, #0]
 8007a46:	1b5b      	subs	r3, r3, r5
 8007a48:	d418      	bmi.n	8007a7c <_malloc_r+0x8c>
 8007a4a:	2b0b      	cmp	r3, #11
 8007a4c:	d90f      	bls.n	8007a6e <_malloc_r+0x7e>
 8007a4e:	600b      	str	r3, [r1, #0]
 8007a50:	18cc      	adds	r4, r1, r3
 8007a52:	50cd      	str	r5, [r1, r3]
 8007a54:	4630      	mov	r0, r6
 8007a56:	f000 f8b4 	bl	8007bc2 <__malloc_unlock>
 8007a5a:	f104 000b 	add.w	r0, r4, #11
 8007a5e:	1d23      	adds	r3, r4, #4
 8007a60:	f020 0007 	bic.w	r0, r0, #7
 8007a64:	1ac3      	subs	r3, r0, r3
 8007a66:	d0d3      	beq.n	8007a10 <_malloc_r+0x20>
 8007a68:	425a      	negs	r2, r3
 8007a6a:	50e2      	str	r2, [r4, r3]
 8007a6c:	e7d0      	b.n	8007a10 <_malloc_r+0x20>
 8007a6e:	684b      	ldr	r3, [r1, #4]
 8007a70:	428c      	cmp	r4, r1
 8007a72:	bf16      	itet	ne
 8007a74:	6063      	strne	r3, [r4, #4]
 8007a76:	6013      	streq	r3, [r2, #0]
 8007a78:	460c      	movne	r4, r1
 8007a7a:	e7eb      	b.n	8007a54 <_malloc_r+0x64>
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	6849      	ldr	r1, [r1, #4]
 8007a80:	e7cc      	b.n	8007a1c <_malloc_r+0x2c>
 8007a82:	1cc4      	adds	r4, r0, #3
 8007a84:	f024 0403 	bic.w	r4, r4, #3
 8007a88:	42a0      	cmp	r0, r4
 8007a8a:	d005      	beq.n	8007a98 <_malloc_r+0xa8>
 8007a8c:	1a21      	subs	r1, r4, r0
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f000 f808 	bl	8007aa4 <_sbrk_r>
 8007a94:	3001      	adds	r0, #1
 8007a96:	d0cf      	beq.n	8007a38 <_malloc_r+0x48>
 8007a98:	6025      	str	r5, [r4, #0]
 8007a9a:	e7db      	b.n	8007a54 <_malloc_r+0x64>
 8007a9c:	20000498 	.word	0x20000498
 8007aa0:	2000049c 	.word	0x2000049c

08007aa4 <_sbrk_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4c05      	ldr	r4, [pc, #20]	; (8007ac0 <_sbrk_r+0x1c>)
 8007aaa:	4605      	mov	r5, r0
 8007aac:	4608      	mov	r0, r1
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	f7fb fc42 	bl	8003338 <_sbrk>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d102      	bne.n	8007abe <_sbrk_r+0x1a>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	b103      	cbz	r3, 8007abe <_sbrk_r+0x1a>
 8007abc:	602b      	str	r3, [r5, #0]
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	20000600 	.word	0x20000600

08007ac4 <_raise_r>:
 8007ac4:	291f      	cmp	r1, #31
 8007ac6:	b538      	push	{r3, r4, r5, lr}
 8007ac8:	4604      	mov	r4, r0
 8007aca:	460d      	mov	r5, r1
 8007acc:	d904      	bls.n	8007ad8 <_raise_r+0x14>
 8007ace:	2316      	movs	r3, #22
 8007ad0:	6003      	str	r3, [r0, #0]
 8007ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ada:	b112      	cbz	r2, 8007ae2 <_raise_r+0x1e>
 8007adc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ae0:	b94b      	cbnz	r3, 8007af6 <_raise_r+0x32>
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 f830 	bl	8007b48 <_getpid_r>
 8007ae8:	462a      	mov	r2, r5
 8007aea:	4601      	mov	r1, r0
 8007aec:	4620      	mov	r0, r4
 8007aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007af2:	f000 b817 	b.w	8007b24 <_kill_r>
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d00a      	beq.n	8007b10 <_raise_r+0x4c>
 8007afa:	1c59      	adds	r1, r3, #1
 8007afc:	d103      	bne.n	8007b06 <_raise_r+0x42>
 8007afe:	2316      	movs	r3, #22
 8007b00:	6003      	str	r3, [r0, #0]
 8007b02:	2001      	movs	r0, #1
 8007b04:	e7e7      	b.n	8007ad6 <_raise_r+0x12>
 8007b06:	2400      	movs	r4, #0
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b0e:	4798      	blx	r3
 8007b10:	2000      	movs	r0, #0
 8007b12:	e7e0      	b.n	8007ad6 <_raise_r+0x12>

08007b14 <raise>:
 8007b14:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <raise+0xc>)
 8007b16:	4601      	mov	r1, r0
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	f7ff bfd3 	b.w	8007ac4 <_raise_r>
 8007b1e:	bf00      	nop
 8007b20:	2000000c 	.word	0x2000000c

08007b24 <_kill_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	2300      	movs	r3, #0
 8007b28:	4c06      	ldr	r4, [pc, #24]	; (8007b44 <_kill_r+0x20>)
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	4611      	mov	r1, r2
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	f7fb fbe6 	bl	8003302 <_kill>
 8007b36:	1c43      	adds	r3, r0, #1
 8007b38:	d102      	bne.n	8007b40 <_kill_r+0x1c>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	b103      	cbz	r3, 8007b40 <_kill_r+0x1c>
 8007b3e:	602b      	str	r3, [r5, #0]
 8007b40:	bd38      	pop	{r3, r4, r5, pc}
 8007b42:	bf00      	nop
 8007b44:	20000600 	.word	0x20000600

08007b48 <_getpid_r>:
 8007b48:	f7fb bbd4 	b.w	80032f4 <_getpid>

08007b4c <_vsniprintf_r>:
 8007b4c:	b530      	push	{r4, r5, lr}
 8007b4e:	1e14      	subs	r4, r2, #0
 8007b50:	4605      	mov	r5, r0
 8007b52:	b09b      	sub	sp, #108	; 0x6c
 8007b54:	4618      	mov	r0, r3
 8007b56:	da05      	bge.n	8007b64 <_vsniprintf_r+0x18>
 8007b58:	238b      	movs	r3, #139	; 0x8b
 8007b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5e:	602b      	str	r3, [r5, #0]
 8007b60:	b01b      	add	sp, #108	; 0x6c
 8007b62:	bd30      	pop	{r4, r5, pc}
 8007b64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007b68:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007b6c:	bf0c      	ite	eq
 8007b6e:	4623      	moveq	r3, r4
 8007b70:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b74:	9302      	str	r3, [sp, #8]
 8007b76:	9305      	str	r3, [sp, #20]
 8007b78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b7c:	9100      	str	r1, [sp, #0]
 8007b7e:	9104      	str	r1, [sp, #16]
 8007b80:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007b84:	4602      	mov	r2, r0
 8007b86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b88:	4669      	mov	r1, sp
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f000 f874 	bl	8007c78 <_svfiprintf_r>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	bfbc      	itt	lt
 8007b94:	238b      	movlt	r3, #139	; 0x8b
 8007b96:	602b      	strlt	r3, [r5, #0]
 8007b98:	2c00      	cmp	r4, #0
 8007b9a:	d0e1      	beq.n	8007b60 <_vsniprintf_r+0x14>
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	9b00      	ldr	r3, [sp, #0]
 8007ba0:	701a      	strb	r2, [r3, #0]
 8007ba2:	e7dd      	b.n	8007b60 <_vsniprintf_r+0x14>

08007ba4 <vsniprintf>:
 8007ba4:	b507      	push	{r0, r1, r2, lr}
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	460a      	mov	r2, r1
 8007bac:	4601      	mov	r1, r0
 8007bae:	4803      	ldr	r0, [pc, #12]	; (8007bbc <vsniprintf+0x18>)
 8007bb0:	6800      	ldr	r0, [r0, #0]
 8007bb2:	f7ff ffcb 	bl	8007b4c <_vsniprintf_r>
 8007bb6:	b003      	add	sp, #12
 8007bb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bbc:	2000000c 	.word	0x2000000c

08007bc0 <__malloc_lock>:
 8007bc0:	4770      	bx	lr

08007bc2 <__malloc_unlock>:
 8007bc2:	4770      	bx	lr

08007bc4 <__ssputs_r>:
 8007bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc8:	688e      	ldr	r6, [r1, #8]
 8007bca:	4682      	mov	sl, r0
 8007bcc:	429e      	cmp	r6, r3
 8007bce:	460c      	mov	r4, r1
 8007bd0:	4690      	mov	r8, r2
 8007bd2:	4699      	mov	r9, r3
 8007bd4:	d837      	bhi.n	8007c46 <__ssputs_r+0x82>
 8007bd6:	898a      	ldrh	r2, [r1, #12]
 8007bd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bdc:	d031      	beq.n	8007c42 <__ssputs_r+0x7e>
 8007bde:	2302      	movs	r3, #2
 8007be0:	6825      	ldr	r5, [r4, #0]
 8007be2:	6909      	ldr	r1, [r1, #16]
 8007be4:	1a6f      	subs	r7, r5, r1
 8007be6:	6965      	ldr	r5, [r4, #20]
 8007be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bec:	fb95 f5f3 	sdiv	r5, r5, r3
 8007bf0:	f109 0301 	add.w	r3, r9, #1
 8007bf4:	443b      	add	r3, r7
 8007bf6:	429d      	cmp	r5, r3
 8007bf8:	bf38      	it	cc
 8007bfa:	461d      	movcc	r5, r3
 8007bfc:	0553      	lsls	r3, r2, #21
 8007bfe:	d530      	bpl.n	8007c62 <__ssputs_r+0x9e>
 8007c00:	4629      	mov	r1, r5
 8007c02:	f7ff fef5 	bl	80079f0 <_malloc_r>
 8007c06:	4606      	mov	r6, r0
 8007c08:	b950      	cbnz	r0, 8007c20 <__ssputs_r+0x5c>
 8007c0a:	230c      	movs	r3, #12
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	f8ca 3000 	str.w	r3, [sl]
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c20:	463a      	mov	r2, r7
 8007c22:	6921      	ldr	r1, [r4, #16]
 8007c24:	f7ff fe6c 	bl	8007900 <memcpy>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	6126      	str	r6, [r4, #16]
 8007c36:	443e      	add	r6, r7
 8007c38:	6026      	str	r6, [r4, #0]
 8007c3a:	464e      	mov	r6, r9
 8007c3c:	6165      	str	r5, [r4, #20]
 8007c3e:	1bed      	subs	r5, r5, r7
 8007c40:	60a5      	str	r5, [r4, #8]
 8007c42:	454e      	cmp	r6, r9
 8007c44:	d900      	bls.n	8007c48 <__ssputs_r+0x84>
 8007c46:	464e      	mov	r6, r9
 8007c48:	4632      	mov	r2, r6
 8007c4a:	4641      	mov	r1, r8
 8007c4c:	6820      	ldr	r0, [r4, #0]
 8007c4e:	f7ff fe62 	bl	8007916 <memmove>
 8007c52:	68a3      	ldr	r3, [r4, #8]
 8007c54:	2000      	movs	r0, #0
 8007c56:	1b9b      	subs	r3, r3, r6
 8007c58:	60a3      	str	r3, [r4, #8]
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	441e      	add	r6, r3
 8007c5e:	6026      	str	r6, [r4, #0]
 8007c60:	e7dc      	b.n	8007c1c <__ssputs_r+0x58>
 8007c62:	462a      	mov	r2, r5
 8007c64:	f000 fa88 	bl	8008178 <_realloc_r>
 8007c68:	4606      	mov	r6, r0
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d1e2      	bne.n	8007c34 <__ssputs_r+0x70>
 8007c6e:	6921      	ldr	r1, [r4, #16]
 8007c70:	4650      	mov	r0, sl
 8007c72:	f7ff fe71 	bl	8007958 <_free_r>
 8007c76:	e7c8      	b.n	8007c0a <__ssputs_r+0x46>

08007c78 <_svfiprintf_r>:
 8007c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	461d      	mov	r5, r3
 8007c7e:	898b      	ldrh	r3, [r1, #12]
 8007c80:	b09d      	sub	sp, #116	; 0x74
 8007c82:	061f      	lsls	r7, r3, #24
 8007c84:	4680      	mov	r8, r0
 8007c86:	460c      	mov	r4, r1
 8007c88:	4616      	mov	r6, r2
 8007c8a:	d50f      	bpl.n	8007cac <_svfiprintf_r+0x34>
 8007c8c:	690b      	ldr	r3, [r1, #16]
 8007c8e:	b96b      	cbnz	r3, 8007cac <_svfiprintf_r+0x34>
 8007c90:	2140      	movs	r1, #64	; 0x40
 8007c92:	f7ff fead 	bl	80079f0 <_malloc_r>
 8007c96:	6020      	str	r0, [r4, #0]
 8007c98:	6120      	str	r0, [r4, #16]
 8007c9a:	b928      	cbnz	r0, 8007ca8 <_svfiprintf_r+0x30>
 8007c9c:	230c      	movs	r3, #12
 8007c9e:	f8c8 3000 	str.w	r3, [r8]
 8007ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca6:	e0c8      	b.n	8007e3a <_svfiprintf_r+0x1c2>
 8007ca8:	2340      	movs	r3, #64	; 0x40
 8007caa:	6163      	str	r3, [r4, #20]
 8007cac:	2300      	movs	r3, #0
 8007cae:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb0:	2320      	movs	r3, #32
 8007cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cb6:	2330      	movs	r3, #48	; 0x30
 8007cb8:	f04f 0b01 	mov.w	fp, #1
 8007cbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cc0:	9503      	str	r5, [sp, #12]
 8007cc2:	4637      	mov	r7, r6
 8007cc4:	463d      	mov	r5, r7
 8007cc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007cca:	b10b      	cbz	r3, 8007cd0 <_svfiprintf_r+0x58>
 8007ccc:	2b25      	cmp	r3, #37	; 0x25
 8007cce:	d13e      	bne.n	8007d4e <_svfiprintf_r+0xd6>
 8007cd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8007cd4:	d00b      	beq.n	8007cee <_svfiprintf_r+0x76>
 8007cd6:	4653      	mov	r3, sl
 8007cd8:	4632      	mov	r2, r6
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4640      	mov	r0, r8
 8007cde:	f7ff ff71 	bl	8007bc4 <__ssputs_r>
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	f000 80a4 	beq.w	8007e30 <_svfiprintf_r+0x1b8>
 8007ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cea:	4453      	add	r3, sl
 8007cec:	9309      	str	r3, [sp, #36]	; 0x24
 8007cee:	783b      	ldrb	r3, [r7, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 809d 	beq.w	8007e30 <_svfiprintf_r+0x1b8>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	9307      	str	r3, [sp, #28]
 8007d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d08:	931a      	str	r3, [sp, #104]	; 0x68
 8007d0a:	462f      	mov	r7, r5
 8007d0c:	2205      	movs	r2, #5
 8007d0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d12:	4850      	ldr	r0, [pc, #320]	; (8007e54 <_svfiprintf_r+0x1dc>)
 8007d14:	f7ff fde6 	bl	80078e4 <memchr>
 8007d18:	9b04      	ldr	r3, [sp, #16]
 8007d1a:	b9d0      	cbnz	r0, 8007d52 <_svfiprintf_r+0xda>
 8007d1c:	06d9      	lsls	r1, r3, #27
 8007d1e:	bf44      	itt	mi
 8007d20:	2220      	movmi	r2, #32
 8007d22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d26:	071a      	lsls	r2, r3, #28
 8007d28:	bf44      	itt	mi
 8007d2a:	222b      	movmi	r2, #43	; 0x2b
 8007d2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d30:	782a      	ldrb	r2, [r5, #0]
 8007d32:	2a2a      	cmp	r2, #42	; 0x2a
 8007d34:	d015      	beq.n	8007d62 <_svfiprintf_r+0xea>
 8007d36:	462f      	mov	r7, r5
 8007d38:	2000      	movs	r0, #0
 8007d3a:	250a      	movs	r5, #10
 8007d3c:	9a07      	ldr	r2, [sp, #28]
 8007d3e:	4639      	mov	r1, r7
 8007d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d44:	3b30      	subs	r3, #48	; 0x30
 8007d46:	2b09      	cmp	r3, #9
 8007d48:	d94d      	bls.n	8007de6 <_svfiprintf_r+0x16e>
 8007d4a:	b1b8      	cbz	r0, 8007d7c <_svfiprintf_r+0x104>
 8007d4c:	e00f      	b.n	8007d6e <_svfiprintf_r+0xf6>
 8007d4e:	462f      	mov	r7, r5
 8007d50:	e7b8      	b.n	8007cc4 <_svfiprintf_r+0x4c>
 8007d52:	4a40      	ldr	r2, [pc, #256]	; (8007e54 <_svfiprintf_r+0x1dc>)
 8007d54:	463d      	mov	r5, r7
 8007d56:	1a80      	subs	r0, r0, r2
 8007d58:	fa0b f000 	lsl.w	r0, fp, r0
 8007d5c:	4318      	orrs	r0, r3
 8007d5e:	9004      	str	r0, [sp, #16]
 8007d60:	e7d3      	b.n	8007d0a <_svfiprintf_r+0x92>
 8007d62:	9a03      	ldr	r2, [sp, #12]
 8007d64:	1d11      	adds	r1, r2, #4
 8007d66:	6812      	ldr	r2, [r2, #0]
 8007d68:	9103      	str	r1, [sp, #12]
 8007d6a:	2a00      	cmp	r2, #0
 8007d6c:	db01      	blt.n	8007d72 <_svfiprintf_r+0xfa>
 8007d6e:	9207      	str	r2, [sp, #28]
 8007d70:	e004      	b.n	8007d7c <_svfiprintf_r+0x104>
 8007d72:	4252      	negs	r2, r2
 8007d74:	f043 0302 	orr.w	r3, r3, #2
 8007d78:	9207      	str	r2, [sp, #28]
 8007d7a:	9304      	str	r3, [sp, #16]
 8007d7c:	783b      	ldrb	r3, [r7, #0]
 8007d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d80:	d10c      	bne.n	8007d9c <_svfiprintf_r+0x124>
 8007d82:	787b      	ldrb	r3, [r7, #1]
 8007d84:	2b2a      	cmp	r3, #42	; 0x2a
 8007d86:	d133      	bne.n	8007df0 <_svfiprintf_r+0x178>
 8007d88:	9b03      	ldr	r3, [sp, #12]
 8007d8a:	3702      	adds	r7, #2
 8007d8c:	1d1a      	adds	r2, r3, #4
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	9203      	str	r2, [sp, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bfb8      	it	lt
 8007d96:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d9a:	9305      	str	r3, [sp, #20]
 8007d9c:	4d2e      	ldr	r5, [pc, #184]	; (8007e58 <_svfiprintf_r+0x1e0>)
 8007d9e:	2203      	movs	r2, #3
 8007da0:	7839      	ldrb	r1, [r7, #0]
 8007da2:	4628      	mov	r0, r5
 8007da4:	f7ff fd9e 	bl	80078e4 <memchr>
 8007da8:	b138      	cbz	r0, 8007dba <_svfiprintf_r+0x142>
 8007daa:	2340      	movs	r3, #64	; 0x40
 8007dac:	1b40      	subs	r0, r0, r5
 8007dae:	fa03 f000 	lsl.w	r0, r3, r0
 8007db2:	9b04      	ldr	r3, [sp, #16]
 8007db4:	3701      	adds	r7, #1
 8007db6:	4303      	orrs	r3, r0
 8007db8:	9304      	str	r3, [sp, #16]
 8007dba:	7839      	ldrb	r1, [r7, #0]
 8007dbc:	2206      	movs	r2, #6
 8007dbe:	4827      	ldr	r0, [pc, #156]	; (8007e5c <_svfiprintf_r+0x1e4>)
 8007dc0:	1c7e      	adds	r6, r7, #1
 8007dc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dc6:	f7ff fd8d 	bl	80078e4 <memchr>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d038      	beq.n	8007e40 <_svfiprintf_r+0x1c8>
 8007dce:	4b24      	ldr	r3, [pc, #144]	; (8007e60 <_svfiprintf_r+0x1e8>)
 8007dd0:	bb13      	cbnz	r3, 8007e18 <_svfiprintf_r+0x1a0>
 8007dd2:	9b03      	ldr	r3, [sp, #12]
 8007dd4:	3307      	adds	r3, #7
 8007dd6:	f023 0307 	bic.w	r3, r3, #7
 8007dda:	3308      	adds	r3, #8
 8007ddc:	9303      	str	r3, [sp, #12]
 8007dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de0:	444b      	add	r3, r9
 8007de2:	9309      	str	r3, [sp, #36]	; 0x24
 8007de4:	e76d      	b.n	8007cc2 <_svfiprintf_r+0x4a>
 8007de6:	fb05 3202 	mla	r2, r5, r2, r3
 8007dea:	2001      	movs	r0, #1
 8007dec:	460f      	mov	r7, r1
 8007dee:	e7a6      	b.n	8007d3e <_svfiprintf_r+0xc6>
 8007df0:	2300      	movs	r3, #0
 8007df2:	250a      	movs	r5, #10
 8007df4:	4619      	mov	r1, r3
 8007df6:	3701      	adds	r7, #1
 8007df8:	9305      	str	r3, [sp, #20]
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e00:	3a30      	subs	r2, #48	; 0x30
 8007e02:	2a09      	cmp	r2, #9
 8007e04:	d903      	bls.n	8007e0e <_svfiprintf_r+0x196>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0c8      	beq.n	8007d9c <_svfiprintf_r+0x124>
 8007e0a:	9105      	str	r1, [sp, #20]
 8007e0c:	e7c6      	b.n	8007d9c <_svfiprintf_r+0x124>
 8007e0e:	fb05 2101 	mla	r1, r5, r1, r2
 8007e12:	2301      	movs	r3, #1
 8007e14:	4607      	mov	r7, r0
 8007e16:	e7f0      	b.n	8007dfa <_svfiprintf_r+0x182>
 8007e18:	ab03      	add	r3, sp, #12
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <_svfiprintf_r+0x1ec>)
 8007e20:	a904      	add	r1, sp, #16
 8007e22:	4640      	mov	r0, r8
 8007e24:	f3af 8000 	nop.w
 8007e28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e2c:	4681      	mov	r9, r0
 8007e2e:	d1d6      	bne.n	8007dde <_svfiprintf_r+0x166>
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	065b      	lsls	r3, r3, #25
 8007e34:	f53f af35 	bmi.w	8007ca2 <_svfiprintf_r+0x2a>
 8007e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e3a:	b01d      	add	sp, #116	; 0x74
 8007e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e40:	ab03      	add	r3, sp, #12
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	4622      	mov	r2, r4
 8007e46:	4b07      	ldr	r3, [pc, #28]	; (8007e64 <_svfiprintf_r+0x1ec>)
 8007e48:	a904      	add	r1, sp, #16
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	f000 f882 	bl	8007f54 <_printf_i>
 8007e50:	e7ea      	b.n	8007e28 <_svfiprintf_r+0x1b0>
 8007e52:	bf00      	nop
 8007e54:	08008804 	.word	0x08008804
 8007e58:	0800880a 	.word	0x0800880a
 8007e5c:	0800880e 	.word	0x0800880e
 8007e60:	00000000 	.word	0x00000000
 8007e64:	08007bc5 	.word	0x08007bc5

08007e68 <_printf_common>:
 8007e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e6c:	4691      	mov	r9, r2
 8007e6e:	461f      	mov	r7, r3
 8007e70:	688a      	ldr	r2, [r1, #8]
 8007e72:	690b      	ldr	r3, [r1, #16]
 8007e74:	4606      	mov	r6, r0
 8007e76:	4293      	cmp	r3, r2
 8007e78:	bfb8      	it	lt
 8007e7a:	4613      	movlt	r3, r2
 8007e7c:	f8c9 3000 	str.w	r3, [r9]
 8007e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e84:	460c      	mov	r4, r1
 8007e86:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e8a:	b112      	cbz	r2, 8007e92 <_printf_common+0x2a>
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	f8c9 3000 	str.w	r3, [r9]
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	0699      	lsls	r1, r3, #26
 8007e96:	bf42      	ittt	mi
 8007e98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e9c:	3302      	addmi	r3, #2
 8007e9e:	f8c9 3000 	strmi.w	r3, [r9]
 8007ea2:	6825      	ldr	r5, [r4, #0]
 8007ea4:	f015 0506 	ands.w	r5, r5, #6
 8007ea8:	d107      	bne.n	8007eba <_printf_common+0x52>
 8007eaa:	f104 0a19 	add.w	sl, r4, #25
 8007eae:	68e3      	ldr	r3, [r4, #12]
 8007eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	42ab      	cmp	r3, r5
 8007eb8:	dc29      	bgt.n	8007f0e <_printf_common+0xa6>
 8007eba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	3300      	adds	r3, #0
 8007ec2:	bf18      	it	ne
 8007ec4:	2301      	movne	r3, #1
 8007ec6:	0692      	lsls	r2, r2, #26
 8007ec8:	d42e      	bmi.n	8007f28 <_printf_common+0xc0>
 8007eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ece:	4639      	mov	r1, r7
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	47c0      	blx	r8
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	d021      	beq.n	8007f1c <_printf_common+0xb4>
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	68e5      	ldr	r5, [r4, #12]
 8007edc:	f003 0306 	and.w	r3, r3, #6
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	bf18      	it	ne
 8007ee4:	2500      	movne	r5, #0
 8007ee6:	f8d9 2000 	ldr.w	r2, [r9]
 8007eea:	f04f 0900 	mov.w	r9, #0
 8007eee:	bf08      	it	eq
 8007ef0:	1aad      	subeq	r5, r5, r2
 8007ef2:	68a3      	ldr	r3, [r4, #8]
 8007ef4:	6922      	ldr	r2, [r4, #16]
 8007ef6:	bf08      	it	eq
 8007ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007efc:	4293      	cmp	r3, r2
 8007efe:	bfc4      	itt	gt
 8007f00:	1a9b      	subgt	r3, r3, r2
 8007f02:	18ed      	addgt	r5, r5, r3
 8007f04:	341a      	adds	r4, #26
 8007f06:	454d      	cmp	r5, r9
 8007f08:	d11a      	bne.n	8007f40 <_printf_common+0xd8>
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	e008      	b.n	8007f20 <_printf_common+0xb8>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	4652      	mov	r2, sl
 8007f12:	4639      	mov	r1, r7
 8007f14:	4630      	mov	r0, r6
 8007f16:	47c0      	blx	r8
 8007f18:	3001      	adds	r0, #1
 8007f1a:	d103      	bne.n	8007f24 <_printf_common+0xbc>
 8007f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f24:	3501      	adds	r5, #1
 8007f26:	e7c2      	b.n	8007eae <_printf_common+0x46>
 8007f28:	2030      	movs	r0, #48	; 0x30
 8007f2a:	18e1      	adds	r1, r4, r3
 8007f2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f36:	4422      	add	r2, r4
 8007f38:	3302      	adds	r3, #2
 8007f3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f3e:	e7c4      	b.n	8007eca <_printf_common+0x62>
 8007f40:	2301      	movs	r3, #1
 8007f42:	4622      	mov	r2, r4
 8007f44:	4639      	mov	r1, r7
 8007f46:	4630      	mov	r0, r6
 8007f48:	47c0      	blx	r8
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d0e6      	beq.n	8007f1c <_printf_common+0xb4>
 8007f4e:	f109 0901 	add.w	r9, r9, #1
 8007f52:	e7d8      	b.n	8007f06 <_printf_common+0x9e>

08007f54 <_printf_i>:
 8007f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	7e09      	ldrb	r1, [r1, #24]
 8007f60:	b085      	sub	sp, #20
 8007f62:	296e      	cmp	r1, #110	; 0x6e
 8007f64:	4617      	mov	r7, r2
 8007f66:	4606      	mov	r6, r0
 8007f68:	4698      	mov	r8, r3
 8007f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f6c:	f000 80b3 	beq.w	80080d6 <_printf_i+0x182>
 8007f70:	d822      	bhi.n	8007fb8 <_printf_i+0x64>
 8007f72:	2963      	cmp	r1, #99	; 0x63
 8007f74:	d036      	beq.n	8007fe4 <_printf_i+0x90>
 8007f76:	d80a      	bhi.n	8007f8e <_printf_i+0x3a>
 8007f78:	2900      	cmp	r1, #0
 8007f7a:	f000 80b9 	beq.w	80080f0 <_printf_i+0x19c>
 8007f7e:	2958      	cmp	r1, #88	; 0x58
 8007f80:	f000 8083 	beq.w	800808a <_printf_i+0x136>
 8007f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f8c:	e032      	b.n	8007ff4 <_printf_i+0xa0>
 8007f8e:	2964      	cmp	r1, #100	; 0x64
 8007f90:	d001      	beq.n	8007f96 <_printf_i+0x42>
 8007f92:	2969      	cmp	r1, #105	; 0x69
 8007f94:	d1f6      	bne.n	8007f84 <_printf_i+0x30>
 8007f96:	6820      	ldr	r0, [r4, #0]
 8007f98:	6813      	ldr	r3, [r2, #0]
 8007f9a:	0605      	lsls	r5, r0, #24
 8007f9c:	f103 0104 	add.w	r1, r3, #4
 8007fa0:	d52a      	bpl.n	8007ff8 <_printf_i+0xa4>
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6011      	str	r1, [r2, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	da03      	bge.n	8007fb2 <_printf_i+0x5e>
 8007faa:	222d      	movs	r2, #45	; 0x2d
 8007fac:	425b      	negs	r3, r3
 8007fae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007fb2:	486f      	ldr	r0, [pc, #444]	; (8008170 <_printf_i+0x21c>)
 8007fb4:	220a      	movs	r2, #10
 8007fb6:	e039      	b.n	800802c <_printf_i+0xd8>
 8007fb8:	2973      	cmp	r1, #115	; 0x73
 8007fba:	f000 809d 	beq.w	80080f8 <_printf_i+0x1a4>
 8007fbe:	d808      	bhi.n	8007fd2 <_printf_i+0x7e>
 8007fc0:	296f      	cmp	r1, #111	; 0x6f
 8007fc2:	d020      	beq.n	8008006 <_printf_i+0xb2>
 8007fc4:	2970      	cmp	r1, #112	; 0x70
 8007fc6:	d1dd      	bne.n	8007f84 <_printf_i+0x30>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	f043 0320 	orr.w	r3, r3, #32
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	e003      	b.n	8007fda <_printf_i+0x86>
 8007fd2:	2975      	cmp	r1, #117	; 0x75
 8007fd4:	d017      	beq.n	8008006 <_printf_i+0xb2>
 8007fd6:	2978      	cmp	r1, #120	; 0x78
 8007fd8:	d1d4      	bne.n	8007f84 <_printf_i+0x30>
 8007fda:	2378      	movs	r3, #120	; 0x78
 8007fdc:	4865      	ldr	r0, [pc, #404]	; (8008174 <_printf_i+0x220>)
 8007fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fe2:	e055      	b.n	8008090 <_printf_i+0x13c>
 8007fe4:	6813      	ldr	r3, [r2, #0]
 8007fe6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fea:	1d19      	adds	r1, r3, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6011      	str	r1, [r2, #0]
 8007ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e08c      	b.n	8008112 <_printf_i+0x1be>
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ffe:	6011      	str	r1, [r2, #0]
 8008000:	bf18      	it	ne
 8008002:	b21b      	sxthne	r3, r3
 8008004:	e7cf      	b.n	8007fa6 <_printf_i+0x52>
 8008006:	6813      	ldr	r3, [r2, #0]
 8008008:	6825      	ldr	r5, [r4, #0]
 800800a:	1d18      	adds	r0, r3, #4
 800800c:	6010      	str	r0, [r2, #0]
 800800e:	0628      	lsls	r0, r5, #24
 8008010:	d501      	bpl.n	8008016 <_printf_i+0xc2>
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	e002      	b.n	800801c <_printf_i+0xc8>
 8008016:	0668      	lsls	r0, r5, #25
 8008018:	d5fb      	bpl.n	8008012 <_printf_i+0xbe>
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	296f      	cmp	r1, #111	; 0x6f
 800801e:	bf14      	ite	ne
 8008020:	220a      	movne	r2, #10
 8008022:	2208      	moveq	r2, #8
 8008024:	4852      	ldr	r0, [pc, #328]	; (8008170 <_printf_i+0x21c>)
 8008026:	2100      	movs	r1, #0
 8008028:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800802c:	6865      	ldr	r5, [r4, #4]
 800802e:	2d00      	cmp	r5, #0
 8008030:	60a5      	str	r5, [r4, #8]
 8008032:	f2c0 8095 	blt.w	8008160 <_printf_i+0x20c>
 8008036:	6821      	ldr	r1, [r4, #0]
 8008038:	f021 0104 	bic.w	r1, r1, #4
 800803c:	6021      	str	r1, [r4, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d13d      	bne.n	80080be <_printf_i+0x16a>
 8008042:	2d00      	cmp	r5, #0
 8008044:	f040 808e 	bne.w	8008164 <_printf_i+0x210>
 8008048:	4665      	mov	r5, ip
 800804a:	2a08      	cmp	r2, #8
 800804c:	d10b      	bne.n	8008066 <_printf_i+0x112>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	07db      	lsls	r3, r3, #31
 8008052:	d508      	bpl.n	8008066 <_printf_i+0x112>
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	6862      	ldr	r2, [r4, #4]
 8008058:	429a      	cmp	r2, r3
 800805a:	bfde      	ittt	le
 800805c:	2330      	movle	r3, #48	; 0x30
 800805e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008062:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008066:	ebac 0305 	sub.w	r3, ip, r5
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	f8cd 8000 	str.w	r8, [sp]
 8008070:	463b      	mov	r3, r7
 8008072:	aa03      	add	r2, sp, #12
 8008074:	4621      	mov	r1, r4
 8008076:	4630      	mov	r0, r6
 8008078:	f7ff fef6 	bl	8007e68 <_printf_common>
 800807c:	3001      	adds	r0, #1
 800807e:	d14d      	bne.n	800811c <_printf_i+0x1c8>
 8008080:	f04f 30ff 	mov.w	r0, #4294967295
 8008084:	b005      	add	sp, #20
 8008086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800808a:	4839      	ldr	r0, [pc, #228]	; (8008170 <_printf_i+0x21c>)
 800808c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008090:	6813      	ldr	r3, [r2, #0]
 8008092:	6821      	ldr	r1, [r4, #0]
 8008094:	1d1d      	adds	r5, r3, #4
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6015      	str	r5, [r2, #0]
 800809a:	060a      	lsls	r2, r1, #24
 800809c:	d50b      	bpl.n	80080b6 <_printf_i+0x162>
 800809e:	07ca      	lsls	r2, r1, #31
 80080a0:	bf44      	itt	mi
 80080a2:	f041 0120 	orrmi.w	r1, r1, #32
 80080a6:	6021      	strmi	r1, [r4, #0]
 80080a8:	b91b      	cbnz	r3, 80080b2 <_printf_i+0x15e>
 80080aa:	6822      	ldr	r2, [r4, #0]
 80080ac:	f022 0220 	bic.w	r2, r2, #32
 80080b0:	6022      	str	r2, [r4, #0]
 80080b2:	2210      	movs	r2, #16
 80080b4:	e7b7      	b.n	8008026 <_printf_i+0xd2>
 80080b6:	064d      	lsls	r5, r1, #25
 80080b8:	bf48      	it	mi
 80080ba:	b29b      	uxthmi	r3, r3
 80080bc:	e7ef      	b.n	800809e <_printf_i+0x14a>
 80080be:	4665      	mov	r5, ip
 80080c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80080c4:	fb02 3311 	mls	r3, r2, r1, r3
 80080c8:	5cc3      	ldrb	r3, [r0, r3]
 80080ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80080ce:	460b      	mov	r3, r1
 80080d0:	2900      	cmp	r1, #0
 80080d2:	d1f5      	bne.n	80080c0 <_printf_i+0x16c>
 80080d4:	e7b9      	b.n	800804a <_printf_i+0xf6>
 80080d6:	6813      	ldr	r3, [r2, #0]
 80080d8:	6825      	ldr	r5, [r4, #0]
 80080da:	1d18      	adds	r0, r3, #4
 80080dc:	6961      	ldr	r1, [r4, #20]
 80080de:	6010      	str	r0, [r2, #0]
 80080e0:	0628      	lsls	r0, r5, #24
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	d501      	bpl.n	80080ea <_printf_i+0x196>
 80080e6:	6019      	str	r1, [r3, #0]
 80080e8:	e002      	b.n	80080f0 <_printf_i+0x19c>
 80080ea:	066a      	lsls	r2, r5, #25
 80080ec:	d5fb      	bpl.n	80080e6 <_printf_i+0x192>
 80080ee:	8019      	strh	r1, [r3, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	4665      	mov	r5, ip
 80080f4:	6123      	str	r3, [r4, #16]
 80080f6:	e7b9      	b.n	800806c <_printf_i+0x118>
 80080f8:	6813      	ldr	r3, [r2, #0]
 80080fa:	1d19      	adds	r1, r3, #4
 80080fc:	6011      	str	r1, [r2, #0]
 80080fe:	681d      	ldr	r5, [r3, #0]
 8008100:	6862      	ldr	r2, [r4, #4]
 8008102:	2100      	movs	r1, #0
 8008104:	4628      	mov	r0, r5
 8008106:	f7ff fbed 	bl	80078e4 <memchr>
 800810a:	b108      	cbz	r0, 8008110 <_printf_i+0x1bc>
 800810c:	1b40      	subs	r0, r0, r5
 800810e:	6060      	str	r0, [r4, #4]
 8008110:	6863      	ldr	r3, [r4, #4]
 8008112:	6123      	str	r3, [r4, #16]
 8008114:	2300      	movs	r3, #0
 8008116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800811a:	e7a7      	b.n	800806c <_printf_i+0x118>
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	462a      	mov	r2, r5
 8008120:	4639      	mov	r1, r7
 8008122:	4630      	mov	r0, r6
 8008124:	47c0      	blx	r8
 8008126:	3001      	adds	r0, #1
 8008128:	d0aa      	beq.n	8008080 <_printf_i+0x12c>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	079b      	lsls	r3, r3, #30
 800812e:	d413      	bmi.n	8008158 <_printf_i+0x204>
 8008130:	68e0      	ldr	r0, [r4, #12]
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	4298      	cmp	r0, r3
 8008136:	bfb8      	it	lt
 8008138:	4618      	movlt	r0, r3
 800813a:	e7a3      	b.n	8008084 <_printf_i+0x130>
 800813c:	2301      	movs	r3, #1
 800813e:	464a      	mov	r2, r9
 8008140:	4639      	mov	r1, r7
 8008142:	4630      	mov	r0, r6
 8008144:	47c0      	blx	r8
 8008146:	3001      	adds	r0, #1
 8008148:	d09a      	beq.n	8008080 <_printf_i+0x12c>
 800814a:	3501      	adds	r5, #1
 800814c:	68e3      	ldr	r3, [r4, #12]
 800814e:	9a03      	ldr	r2, [sp, #12]
 8008150:	1a9b      	subs	r3, r3, r2
 8008152:	42ab      	cmp	r3, r5
 8008154:	dcf2      	bgt.n	800813c <_printf_i+0x1e8>
 8008156:	e7eb      	b.n	8008130 <_printf_i+0x1dc>
 8008158:	2500      	movs	r5, #0
 800815a:	f104 0919 	add.w	r9, r4, #25
 800815e:	e7f5      	b.n	800814c <_printf_i+0x1f8>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1ac      	bne.n	80080be <_printf_i+0x16a>
 8008164:	7803      	ldrb	r3, [r0, #0]
 8008166:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800816a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800816e:	e76c      	b.n	800804a <_printf_i+0xf6>
 8008170:	08008815 	.word	0x08008815
 8008174:	08008826 	.word	0x08008826

08008178 <_realloc_r>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	4607      	mov	r7, r0
 800817c:	4614      	mov	r4, r2
 800817e:	460e      	mov	r6, r1
 8008180:	b921      	cbnz	r1, 800818c <_realloc_r+0x14>
 8008182:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008186:	4611      	mov	r1, r2
 8008188:	f7ff bc32 	b.w	80079f0 <_malloc_r>
 800818c:	b922      	cbnz	r2, 8008198 <_realloc_r+0x20>
 800818e:	f7ff fbe3 	bl	8007958 <_free_r>
 8008192:	4625      	mov	r5, r4
 8008194:	4628      	mov	r0, r5
 8008196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008198:	f000 f814 	bl	80081c4 <_malloc_usable_size_r>
 800819c:	42a0      	cmp	r0, r4
 800819e:	d20f      	bcs.n	80081c0 <_realloc_r+0x48>
 80081a0:	4621      	mov	r1, r4
 80081a2:	4638      	mov	r0, r7
 80081a4:	f7ff fc24 	bl	80079f0 <_malloc_r>
 80081a8:	4605      	mov	r5, r0
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d0f2      	beq.n	8008194 <_realloc_r+0x1c>
 80081ae:	4631      	mov	r1, r6
 80081b0:	4622      	mov	r2, r4
 80081b2:	f7ff fba5 	bl	8007900 <memcpy>
 80081b6:	4631      	mov	r1, r6
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7ff fbcd 	bl	8007958 <_free_r>
 80081be:	e7e9      	b.n	8008194 <_realloc_r+0x1c>
 80081c0:	4635      	mov	r5, r6
 80081c2:	e7e7      	b.n	8008194 <_realloc_r+0x1c>

080081c4 <_malloc_usable_size_r>:
 80081c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c8:	1f18      	subs	r0, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	bfbc      	itt	lt
 80081ce:	580b      	ldrlt	r3, [r1, r0]
 80081d0:	18c0      	addlt	r0, r0, r3
 80081d2:	4770      	bx	lr

080081d4 <_init>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr

080081e0 <_fini>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr

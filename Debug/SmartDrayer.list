
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b30  08004b30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b30  08004b30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b30  08004b30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08004bb0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004bb0  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d645  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ddb  00000000  00000000  0007d6de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  000814c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  000827a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000059aa  00000000  00000000  00083920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014a38  00000000  00000000  000892ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000981c0  00000000  00000000  0009dd02  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135ec2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006574  00000000  00000000  00135f40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080047a8 	.word	0x080047a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080047a8 	.word	0x080047a8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN11SerialDebug11writeSerialEv>:
 */

#include "SerialDebug.h"

void SerialDebug::writeSerial()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4618      	mov	r0, r3
 8000168:	f004 f8c0 	bl	80042ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800016c:	4603      	mov	r3, r0
 800016e:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	4618      	mov	r0, r3
 8000174:	f004 f94f 	bl	8004416 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000178:	4601      	mov	r1, r0
 800017a:	89fa      	ldrh	r2, [r7, #14]
 800017c:	2364      	movs	r3, #100	; 0x64
 800017e:	4803      	ldr	r0, [pc, #12]	; (800018c <_ZN11SerialDebug11writeSerialEv+0x30>)
 8000180:	f003 fbae 	bl	80038e0 <HAL_UART_Transmit>
}
 8000184:	bf00      	nop
 8000186:	3710      	adds	r7, #16
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	200001d4 	.word	0x200001d4

08000190 <_ZN11SerialDebugC1Ev>:

SerialDebug::SerialDebug()
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4618      	mov	r0, r3
 800019c:	f004 f893 	bl	80042c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{


}
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
	...

080001ac <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void SerialDebug::sendDbgStr(std::string DbgStr)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	6039      	str	r1, [r7, #0]
	if(!DbgStr.empty())
 80001b6:	6838      	ldr	r0, [r7, #0]
 80001b8:	f004 f89a 	bl	80042f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 80001bc:	4603      	mov	r3, r0
 80001be:	f083 0301 	eor.w	r3, r3, #1
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d005      	beq.n	80001d4 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
	{
		serialBuffer = DbgStr;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	6839      	ldr	r1, [r7, #0]
 80001cc:	4618      	mov	r0, r3
 80001ce:	f004 f887 	bl	80042e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80001d2:	e004      	b.n	80001de <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>)
 80001d8:	4618      	mov	r0, r3
 80001da:	f004 f918 	bl	800440e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	}
	writeSerial();
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f7ff ffbc 	bl	800015c <_ZN11SerialDebug11writeSerialEv>
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	080047c0 	.word	0x080047c0

080001f0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000200:	4b18      	ldr	r3, [pc, #96]	; (8000264 <MX_ADC1_Init+0x74>)
 8000202:	4a19      	ldr	r2, [pc, #100]	; (8000268 <MX_ADC1_Init+0x78>)
 8000204:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <MX_ADC1_Init+0x74>)
 8000208:	2200      	movs	r2, #0
 800020a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <MX_ADC1_Init+0x74>)
 800020e:	2200      	movs	r2, #0
 8000210:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000212:	4b14      	ldr	r3, [pc, #80]	; (8000264 <MX_ADC1_Init+0x74>)
 8000214:	2200      	movs	r2, #0
 8000216:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <MX_ADC1_Init+0x74>)
 800021a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800021e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000220:	4b10      	ldr	r3, [pc, #64]	; (8000264 <MX_ADC1_Init+0x74>)
 8000222:	2200      	movs	r2, #0
 8000224:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000226:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <MX_ADC1_Init+0x74>)
 8000228:	2201      	movs	r2, #1
 800022a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <MX_ADC1_Init+0x74>)
 800022e:	f000 fd61 	bl	8000cf4 <HAL_ADC_Init>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000238:	f000 f9fa 	bl	8000630 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800023c:	2300      	movs	r3, #0
 800023e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000240:	2301      	movs	r3, #1
 8000242:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	4619      	mov	r1, r3
 800024c:	4805      	ldr	r0, [pc, #20]	; (8000264 <MX_ADC1_Init+0x74>)
 800024e:	f000 febb 	bl	8000fc8 <HAL_ADC_ConfigChannel>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000258:	f000 f9ea 	bl	8000630 <Error_Handler>
  }

}
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	200000b8 	.word	0x200000b8
 8000268:	40012400 	.word	0x40012400

0800026c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <HAL_ADC_MspInit+0x6c>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d121      	bne.n	80002d0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <HAL_ADC_MspInit+0x70>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a12      	ldr	r2, [pc, #72]	; (80002dc <HAL_ADC_MspInit+0x70>)
 8000292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <HAL_ADC_MspInit+0x70>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <HAL_ADC_MspInit+0x70>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a0c      	ldr	r2, [pc, #48]	; (80002dc <HAL_ADC_MspInit+0x70>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <HAL_ADC_MspInit+0x70>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0304 	and.w	r3, r3, #4
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 80002bc:	2301      	movs	r3, #1
 80002be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002c0:	2303      	movs	r3, #3
 80002c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <HAL_ADC_MspInit+0x74>)
 80002cc:	f001 fa2c 	bl	8001728 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002d0:	bf00      	nop
 80002d2:	3720      	adds	r7, #32
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40012400 	.word	0x40012400
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40010800 	.word	0x40010800

080002e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f8:	4b2f      	ldr	r3, [pc, #188]	; (80003b8 <MX_GPIO_Init+0xd4>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a2e      	ldr	r2, [pc, #184]	; (80003b8 <MX_GPIO_Init+0xd4>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <MX_GPIO_Init+0xd4>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0304 	and.w	r3, r3, #4
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000310:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <MX_GPIO_Init+0xd4>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a28      	ldr	r2, [pc, #160]	; (80003b8 <MX_GPIO_Init+0xd4>)
 8000316:	f043 0308 	orr.w	r3, r3, #8
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <MX_GPIO_Init+0xd4>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0308 	and.w	r3, r3, #8
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoCoupleCS_Pin|LcdCS_Pin, GPIO_PIN_SET);
 8000328:	2201      	movs	r2, #1
 800032a:	210c      	movs	r1, #12
 800032c:	4823      	ldr	r0, [pc, #140]	; (80003bc <MX_GPIO_Init+0xd8>)
 800032e:	f001 fc35 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Thermo_ctrl_Pin|FanCtrl_Pin|RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000338:	4820      	ldr	r0, [pc, #128]	; (80003bc <MX_GPIO_Init+0xd8>)
 800033a:	f001 fc2f 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCoupleCS_Pin|LcdCS_Pin|FanCtrl_Pin;
 800033e:	f240 430c 	movw	r3, #1036	; 0x40c
 8000342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034c:	2303      	movs	r3, #3
 800034e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000350:	f107 0308 	add.w	r3, r7, #8
 8000354:	4619      	mov	r1, r3
 8000356:	4819      	ldr	r0, [pc, #100]	; (80003bc <MX_GPIO_Init+0xd8>)
 8000358:	f001 f9e6 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|LeftButton_Pin|OkButton_Pin;
 800035c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000366:	2302      	movs	r3, #2
 8000368:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	4813      	ldr	r0, [pc, #76]	; (80003c0 <MX_GPIO_Init+0xdc>)
 8000372:	f001 f9d9 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DownButton_Pin;
 8000376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800037a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DownButton_GPIO_Port, &GPIO_InitStruct);
 8000384:	f107 0308 	add.w	r3, r7, #8
 8000388:	4619      	mov	r1, r3
 800038a:	480d      	ldr	r0, [pc, #52]	; (80003c0 <MX_GPIO_Init+0xdc>)
 800038c:	f001 f9cc 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Thermo_ctrl_Pin|RedLed_Pin|GreenLed_Pin;
 8000390:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8000394:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	2301      	movs	r3, #1
 8000398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2302      	movs	r3, #2
 80003a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	4619      	mov	r1, r3
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <MX_GPIO_Init+0xd8>)
 80003aa:	f001 f9bd 	bl	8001728 <HAL_GPIO_Init>

}
 80003ae:	bf00      	nop
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010800 	.word	0x40010800
 80003c0:	40010c00 	.word	0x40010c00

080003c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_I2C1_Init+0x50>)
 80003ca:	4a13      	ldr	r2, [pc, #76]	; (8000418 <MX_I2C1_Init+0x54>)
 80003cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_I2C1_Init+0x50>)
 80003d0:	4a12      	ldr	r2, [pc, #72]	; (800041c <MX_I2C1_Init+0x58>)
 80003d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_I2C1_Init+0x50>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_I2C1_Init+0x50>)
 80003dc:	2200      	movs	r2, #0
 80003de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_I2C1_Init+0x50>)
 80003e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <MX_I2C1_Init+0x50>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_I2C1_Init+0x50>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <MX_I2C1_Init+0x50>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_I2C1_Init+0x50>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_I2C1_Init+0x50>)
 8000402:	f001 fbfd 	bl	8001c00 <HAL_I2C_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800040c:	f000 f910 	bl	8000630 <Error_Handler>
  }

}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000e8 	.word	0x200000e8
 8000418:	40005400 	.word	0x40005400
 800041c:	000186a0 	.word	0x000186a0

08000420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	; 0x28
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <HAL_I2C_MspInit+0x90>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d132      	bne.n	80004a6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0308 	and.w	r3, r3, #8
 8000454:	613b      	str	r3, [r7, #16]
 8000456:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000458:	f44f 7340 	mov.w	r3, #768	; 0x300
 800045c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800045e:	2312      	movs	r3, #18
 8000460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000462:	2303      	movs	r3, #3
 8000464:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4619      	mov	r1, r3
 800046c:	4812      	ldr	r0, [pc, #72]	; (80004b8 <HAL_I2C_MspInit+0x98>)
 800046e:	f001 f95b 	bl	8001728 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <HAL_I2C_MspInit+0x9c>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	627b      	str	r3, [r7, #36]	; 0x24
 8000478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800047a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
 8000480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000482:	f043 0302 	orr.w	r3, r3, #2
 8000486:	627b      	str	r3, [r7, #36]	; 0x24
 8000488:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <HAL_I2C_MspInit+0x9c>)
 800048a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800048c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 8000494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004a6:	bf00      	nop
 80004a8:	3728      	adds	r7, #40	; 0x28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40005400 	.word	0x40005400
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010c00 	.word	0x40010c00
 80004bc:	40010000 	.word	0x40010000

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08e      	sub	sp, #56	; 0x38
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fb91 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f84d 	bl	8000568 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f7ff ff09 	bl	80002e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d2:	f7ff fe8d 	bl	80001f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004d6:	f7ff ff75 	bl	80003c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004da:	f000 f8f9 	bl	80006d0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80004de:	f000 fa69 	bl	80009b4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 fad1 	bl	8000a88 <MX_USART1_UART_Init>


  Dbg.sendDbgStr("Nella funzione main");
 80004e6:	f107 0318 	add.w	r3, r7, #24
 80004ea:	4618      	mov	r0, r3
 80004ec:	f003 fe2a 	bl	8004144 <_ZNSaIcEC1Ev>
 80004f0:	f107 0218 	add.w	r2, r7, #24
 80004f4:	463b      	mov	r3, r7
 80004f6:	491a      	ldr	r1, [pc, #104]	; (8000560 <main+0xa0>)
 80004f8:	4618      	mov	r0, r3
 80004fa:	f003 ffb3 	bl	8004464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80004fe:	463b      	mov	r3, r7
 8000500:	4619      	mov	r1, r3
 8000502:	4818      	ldr	r0, [pc, #96]	; (8000564 <main+0xa4>)
 8000504:	f7ff fe52 	bl	80001ac <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000508:	463b      	mov	r3, r7
 800050a:	4618      	mov	r0, r3
 800050c:	f003 fee2 	bl	80042d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000510:	f107 0318 	add.w	r3, r7, #24
 8000514:	4618      	mov	r0, r3
 8000516:	f003 fe16 	bl	8004146 <_ZNSaIcED1Ev>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Dbg.sendDbgStr("Nella funzione main");
 800051a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800051e:	4618      	mov	r0, r3
 8000520:	f003 fe10 	bl	8004144 <_ZNSaIcEC1Ev>
 8000524:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000528:	f107 031c 	add.w	r3, r7, #28
 800052c:	490c      	ldr	r1, [pc, #48]	; (8000560 <main+0xa0>)
 800052e:	4618      	mov	r0, r3
 8000530:	f003 ff98 	bl	8004464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	4619      	mov	r1, r3
 800053a:	480a      	ldr	r0, [pc, #40]	; (8000564 <main+0xa4>)
 800053c:	f7ff fe36 	bl	80001ac <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	4618      	mov	r0, r3
 8000546:	f003 fec5 	bl	80042d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800054a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fdf9 	bl	8004146 <_ZNSaIcED1Ev>
	  HAL_Delay(2000);
 8000554:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000558:	f000 fbaa 	bl	8000cb0 <HAL_Delay>
	  Dbg.sendDbgStr("Nella funzione main");
 800055c:	e7dd      	b.n	800051a <main+0x5a>
 800055e:	bf00      	nop
 8000560:	080047dc 	.word	0x080047dc
 8000564:	2000008c 	.word	0x2000008c

08000568 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000572:	2228      	movs	r2, #40	; 0x28
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 f812 	bl	80045a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80005a8:	2300      	movs	r3, #0
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fcdc 	bl	8001f74 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	bf14      	ite	ne
 80005c2:	2301      	movne	r3, #1
 80005c4:	2300      	moveq	r3, #0
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 80005cc:	f000 f830 	bl	8000630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f832 	bl	8002654 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	bf14      	ite	ne
 80005f6:	2301      	movne	r3, #1
 80005f8:	2300      	moveq	r3, #0
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8000600:	f000 f816 	bl	8000630 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000604:	2302      	movs	r3, #2
 8000606:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fa62 	bl	8002ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	bf14      	ite	ne
 800061a:	2301      	movne	r3, #1
 800061c:	2300      	moveq	r3, #0
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8000624:	f000 f804 	bl	8000630 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <_ZN11SerialDebugD1Ev>:


#define SEND_TIMEOUT	100
#define DBG_BUFFER		500

class SerialDebug
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fe3a 	bl	80042d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <_Z41__static_initialization_and_destruction_0ii>:
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d107      	bne.n	800068c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000682:	4293      	cmp	r3, r2
 8000684:	d102      	bne.n	800068c <_Z41__static_initialization_and_destruction_0ii+0x20>
SerialDebug Dbg;
 8000686:	4809      	ldr	r0, [pc, #36]	; (80006ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000688:	f7ff fd82 	bl	8000190 <_ZN11SerialDebugC1Ev>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d107      	bne.n	80006a2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000698:	4293      	cmp	r3, r2
 800069a:	d102      	bne.n	80006a2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800069e:	f7ff ffd7 	bl	8000650 <_ZN11SerialDebugD1Ev>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000008c 	.word	0x2000008c

080006b0 <_GLOBAL__sub_I_Dbg>:
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ffd7 	bl	800066c <_Z41__static_initialization_and_destruction_0ii>
 80006be:	bd80      	pop	{r7, pc}

080006c0 <_GLOBAL__sub_D_Dbg>:
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff ffcf 	bl	800066c <_Z41__static_initialization_and_destruction_0ii>
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_SPI1_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_SPI1_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI1_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_SPI1_Init+0x64>)
 8000722:	f002 fae3 	bl	8002cec <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800072c:	f7ff ff80 	bl	8000630 <Error_Handler>
  }

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000013c 	.word	0x2000013c
 8000738:	40013000 	.word	0x40013000

0800073c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <HAL_SPI_MspInit+0x88>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d12f      	bne.n	80007bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_SPI_MspInit+0x8c>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <HAL_SPI_MspInit+0x8c>)
 8000762:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_SPI_MspInit+0x8c>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_SPI_MspInit+0x8c>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <HAL_SPI_MspInit+0x8c>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <HAL_SPI_MspInit+0x8c>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 800078c:	23a0      	movs	r3, #160	; 0xa0
 800078e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4619      	mov	r1, r3
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <HAL_SPI_MspInit+0x90>)
 80007a0:	f000 ffc2 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Miso_Pin;
 80007a4:	2340      	movs	r3, #64	; 0x40
 80007a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Miso_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <HAL_SPI_MspInit+0x90>)
 80007b8:	f000 ffb6 	bl	8001728 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40013000 	.word	0x40013000
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010800 	.word	0x40010800

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_MspInit+0x5c>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <HAL_MspInit+0x5c>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_MspInit+0x5c>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x5c>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_MspInit+0x5c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_MspInit+0x5c>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_MspInit+0x60>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_MspInit+0x60>)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	40021000 	.word	0x40021000
 8000830:	40010000 	.word	0x40010000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <HardFault_Handler+0x4>

08000846 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <MemManage_Handler+0x4>

0800084c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <BusFault_Handler+0x4>

08000852 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <UsageFault_Handler+0x4>

08000858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f9fa 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <USART1_IRQHandler+0x10>)
 800088e:	f003 f8c1 	bl	8003a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001d4 	.word	0x200001d4

0800089c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
	return 1;
 80008a0:	2301      	movs	r3, #1
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <_kill>:

int _kill(int pid, int sig)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008b4:	f003 fe16 	bl	80044e4 <__errno>
 80008b8:	4602      	mov	r2, r0
 80008ba:	2316      	movs	r3, #22
 80008bc:	6013      	str	r3, [r2, #0]
	return -1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_exit>:

void _exit (int status)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80008d2:	f04f 31ff 	mov.w	r1, #4294967295
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffe7 	bl	80008aa <_kill>
	while (1) {}		/* Make sure we hang here */
 80008dc:	e7fe      	b.n	80008dc <_exit+0x12>
	...

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000910:	f003 fde8 	bl	80044e4 <__errno>
 8000914:	4602      	mov	r2, r0
 8000916:	230c      	movs	r3, #12
 8000918:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <_sbrk+0x64>)
 8000930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20005000 	.word	0x20005000
 8000940:	00000400 	.word	0x00000400
 8000944:	200000a8 	.word	0x200000a8
 8000948:	20000220 	.word	0x20000220

0800094c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <SystemInit+0x5c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <SystemInit+0x5c>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <SystemInit+0x5c>)
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	4911      	ldr	r1, [pc, #68]	; (80009a8 <SystemInit+0x5c>)
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <SystemInit+0x60>)
 8000964:	4013      	ands	r3, r2
 8000966:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <SystemInit+0x5c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <SystemInit+0x5c>)
 800096e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000976:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <SystemInit+0x5c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <SystemInit+0x5c>)
 800097e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000982:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <SystemInit+0x5c>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <SystemInit+0x5c>)
 800098a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800098e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <SystemInit+0x5c>)
 8000992:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000996:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <SystemInit+0x64>)
 800099a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800099e:	609a      	str	r2, [r3, #8]
#endif 
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40021000 	.word	0x40021000
 80009ac:	f8ff0000 	.word	0xf8ff0000
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <MX_TIM2_Init+0x98>)
 80009fc:	f002 fa88 	bl	8002f10 <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a06:	f7ff fe13 	bl	8000630 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_TIM2_Init+0x98>)
 8000a1a:	f002 faff 	bl	800301c <HAL_TIM_SlaveConfigSynchro>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a24:	f7ff fe04 	bl	8000630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM2_Init+0x98>)
 8000a36:	f002 fe15 	bl	8003664 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a40:	f7ff fdf6 	bl	8000630 <Error_Handler>
  }

}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000194 	.word	0x20000194

08000a50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a60:	d10b      	bne.n	8000a7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_TIM_Base_MspInit+0x34>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_TIM_Base_MspInit+0x34>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_TIM_Base_MspInit+0x34>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000

08000a88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART1_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f002 fe66 	bl	8003790 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f7ff fdb1 	bl	8000630 <Error_Handler>
  }

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001d4 	.word	0x200001d4
 8000ad8:	40013800 	.word	0x40013800

08000adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a26      	ldr	r2, [pc, #152]	; (8000b90 <HAL_UART_MspInit+0xb4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d145      	bne.n	8000b88 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <HAL_UART_MspInit+0xb8>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8000b2c:	2340      	movs	r3, #64	; 0x40
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4816      	ldr	r0, [pc, #88]	; (8000b98 <HAL_UART_MspInit+0xbc>)
 8000b40:	f000 fdf2 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4810      	ldr	r0, [pc, #64]	; (8000b98 <HAL_UART_MspInit+0xbc>)
 8000b58:	f000 fde6 	bl	8001728 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_UART_MspInit+0xc0>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_UART_MspInit+0xc0>)
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2025      	movs	r0, #37	; 0x25
 8000b7e:	f000 fd0d 	bl	800159c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b82:	2025      	movs	r0, #37	; 0x25
 8000b84:	f000 fd36 	bl	80015f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40013800 	.word	0x40013800
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ba0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ba2:	e003      	b.n	8000bac <LoopCopyDataInit>

08000ba4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ba6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ba8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000baa:	3104      	adds	r1, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bac:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bb0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bb2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bb4:	d3f6      	bcc.n	8000ba4 <CopyDataInit>
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bb8:	e002      	b.n	8000bc0 <LoopFillZerobss>

08000bba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bbc:	f842 3b04 	str.w	r3, [r2], #4

08000bc0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bc2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bc4:	d3f9      	bcc.n	8000bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bc6:	f7ff fec1 	bl	800094c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f003 fc91 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bce:	f7ff fc77 	bl	80004c0 <main>
  bx lr
 8000bd2:	4770      	bx	lr
  ldr r3, =_sidata
 8000bd4:	08004b40 	.word	0x08004b40
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bdc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000be0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000be4:	2000021c 	.word	0x2000021c

08000be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_2_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_Init+0x28>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_Init+0x28>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 fcad 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 f808 	bl	8000c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fde2 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x54>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_InitTick+0x58>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fcf4 	bl	8001624 <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00e      	b.n	8000c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d80a      	bhi.n	8000c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 fca2 	bl	800159c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <HAL_InitTick+0x5c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_IncTick+0x20>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a03      	ldr	r2, [pc, #12]	; (8000c98 <HAL_IncTick+0x20>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000214 	.word	0x20000214

08000c9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <HAL_GetTick+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	20000214 	.word	0x20000214

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff fff0 	bl	8000c9c <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_Delay+0x40>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffe0 	bl	8000c9c <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e153      	b.n	8000fbe <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a9f      	ldr	r2, [pc, #636]	; (8000f98 <HAL_ADC_Init+0x2a4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d009      	beq.n	8000d34 <HAL_ADC_Init+0x40>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a9d      	ldr	r2, [pc, #628]	; (8000f9c <HAL_ADC_Init+0x2a8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d004      	beq.n	8000d34 <HAL_ADC_Init+0x40>
 8000d2a:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000d2e:	489c      	ldr	r0, [pc, #624]	; (8000fa0 <HAL_ADC_Init+0x2ac>)
 8000d30:	f7ff fc84 	bl	800063c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d009      	beq.n	8000d50 <HAL_ADC_Init+0x5c>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d44:	d004      	beq.n	8000d50 <HAL_ADC_Init+0x5c>
 8000d46:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8000d4a:	4895      	ldr	r0, [pc, #596]	; (8000fa0 <HAL_ADC_Init+0x2ac>)
 8000d4c:	f7ff fc76 	bl	800063c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d009      	beq.n	8000d6c <HAL_ADC_Init+0x78>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d60:	d004      	beq.n	8000d6c <HAL_ADC_Init+0x78>
 8000d62:	f240 11b5 	movw	r1, #437	; 0x1b5
 8000d66:	488e      	ldr	r0, [pc, #568]	; (8000fa0 <HAL_ADC_Init+0x2ac>)
 8000d68:	f7ff fc68 	bl	800063c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7b1b      	ldrb	r3, [r3, #12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d008      	beq.n	8000d86 <HAL_ADC_Init+0x92>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7b1b      	ldrb	r3, [r3, #12]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d004      	beq.n	8000d86 <HAL_ADC_Init+0x92>
 8000d7c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8000d80:	4887      	ldr	r0, [pc, #540]	; (8000fa0 <HAL_ADC_Init+0x2ac>)
 8000d82:	f7ff fc5b 	bl	800063c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d022      	beq.n	8000dd4 <HAL_ADC_Init+0xe0>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d96:	d01d      	beq.n	8000dd4 <HAL_ADC_Init+0xe0>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000da0:	d018      	beq.n	8000dd4 <HAL_ADC_Init+0xe0>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000daa:	d013      	beq.n	8000dd4 <HAL_ADC_Init+0xe0>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8000db4:	d00e      	beq.n	8000dd4 <HAL_ADC_Init+0xe0>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000dbe:	d009      	beq.n	8000dd4 <HAL_ADC_Init+0xe0>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dc8:	d004      	beq.n	8000dd4 <HAL_ADC_Init+0xe0>
 8000dca:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000dce:	4874      	ldr	r0, [pc, #464]	; (8000fa0 <HAL_ADC_Init+0x2ac>)
 8000dd0:	f7ff fc34 	bl	800063c <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d02a      	beq.n	8000e32 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <HAL_ADC_Init+0xf8>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	2b10      	cmp	r3, #16
 8000dea:	d904      	bls.n	8000df6 <HAL_ADC_Init+0x102>
 8000dec:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000df0:	486b      	ldr	r0, [pc, #428]	; (8000fa0 <HAL_ADC_Init+0x2ac>)
 8000df2:	f7ff fc23 	bl	800063c <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7d1b      	ldrb	r3, [r3, #20]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d008      	beq.n	8000e10 <HAL_ADC_Init+0x11c>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7d1b      	ldrb	r3, [r3, #20]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d004      	beq.n	8000e10 <HAL_ADC_Init+0x11c>
 8000e06:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8000e0a:	4865      	ldr	r0, [pc, #404]	; (8000fa0 <HAL_ADC_Init+0x2ac>)
 8000e0c:	f7ff fc16 	bl	800063c <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7d1b      	ldrb	r3, [r3, #20]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00c      	beq.n	8000e32 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_ADC_Init+0x134>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d904      	bls.n	8000e32 <HAL_ADC_Init+0x13e>
 8000e28:	f240 11bf 	movw	r1, #447	; 0x1bf
 8000e2c:	485c      	ldr	r0, [pc, #368]	; (8000fa0 <HAL_ADC_Init+0x2ac>)
 8000e2e:	f7ff fc05 	bl	800063c <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d109      	bne.n	8000e4e <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fa0f 	bl	800026c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 fa7e 	bl	8001350 <ADC_ConversionStop_Disable>
 8000e54:	4603      	mov	r3, r0
 8000e56:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f040 80a3 	bne.w	8000fac <HAL_ADC_Init+0x2b8>
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f040 809f 	bne.w	8000fac <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e76:	f023 0302 	bic.w	r3, r3, #2
 8000e7a:	f043 0202 	orr.w	r2, r3, #2
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e8a:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7b1b      	ldrb	r3, [r3, #12]
 8000e90:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e92:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ea2:	d003      	beq.n	8000eac <HAL_ADC_Init+0x1b8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d102      	bne.n	8000eb2 <HAL_ADC_Init+0x1be>
 8000eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb0:	e000      	b.n	8000eb4 <HAL_ADC_Init+0x1c0>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7d1b      	ldrb	r3, [r3, #20]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d119      	bne.n	8000ef6 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7b1b      	ldrb	r3, [r3, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d109      	bne.n	8000ede <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	035a      	lsls	r2, r3, #13
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	e00b      	b.n	8000ef6 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee2:	f043 0220 	orr.w	r2, r3, #32
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	f043 0201 	orr.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <HAL_ADC_Init+0x2b0>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f26:	d003      	beq.n	8000f30 <HAL_ADC_Init+0x23c>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d104      	bne.n	8000f3a <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	051b      	lsls	r3, r3, #20
 8000f38:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_ADC_Init+0x2b4>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d10b      	bne.n	8000f76 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	f023 0303 	bic.w	r3, r3, #3
 8000f6c:	f043 0201 	orr.w	r2, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f74:	e022      	b.n	8000fbc <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7a:	f023 0312 	bic.w	r3, r3, #18
 8000f7e:	f043 0210 	orr.w	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	f043 0201 	orr.w	r2, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f96:	e011      	b.n	8000fbc <HAL_ADC_Init+0x2c8>
 8000f98:	40012400 	.word	0x40012400
 8000f9c:	40012800 	.word	0x40012800
 8000fa0:	080047f0 	.word	0x080047f0
 8000fa4:	ffe1f7fd 	.word	0xffe1f7fd
 8000fa8:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb0:	f043 0210 	orr.w	r2, r3, #16
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop

08000fc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a88      	ldr	r2, [pc, #544]	; (8001200 <HAL_ADC_ConfigChannel+0x238>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d009      	beq.n	8000ff8 <HAL_ADC_ConfigChannel+0x30>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a86      	ldr	r2, [pc, #536]	; (8001204 <HAL_ADC_ConfigChannel+0x23c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d004      	beq.n	8000ff8 <HAL_ADC_ConfigChannel+0x30>
 8000fee:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8000ff2:	4885      	ldr	r0, [pc, #532]	; (8001208 <HAL_ADC_ConfigChannel+0x240>)
 8000ff4:	f7ff fb22 	bl	800063c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d048      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d044      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d040      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d03c      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d038      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b05      	cmp	r3, #5
 8001026:	d034      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b06      	cmp	r3, #6
 800102e:	d030      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b07      	cmp	r3, #7
 8001036:	d02c      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b08      	cmp	r3, #8
 800103e:	d028      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b09      	cmp	r3, #9
 8001046:	d024      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b0a      	cmp	r3, #10
 800104e:	d020      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b0b      	cmp	r3, #11
 8001056:	d01c      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b0c      	cmp	r3, #12
 800105e:	d018      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b0d      	cmp	r3, #13
 8001066:	d014      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b0e      	cmp	r3, #14
 800106e:	d010      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d00c      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b10      	cmp	r3, #16
 800107e:	d008      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b11      	cmp	r3, #17
 8001086:	d004      	beq.n	8001092 <HAL_ADC_ConfigChannel+0xca>
 8001088:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800108c:	485e      	ldr	r0, [pc, #376]	; (8001208 <HAL_ADC_ConfigChannel+0x240>)
 800108e:	f7ff fad5 	bl	800063c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d040      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d03c      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d038      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d034      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d030      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d02c      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d028      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d024      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b09      	cmp	r3, #9
 80010d8:	d020      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b0a      	cmp	r3, #10
 80010e0:	d01c      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b0b      	cmp	r3, #11
 80010e8:	d018      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d014      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b0d      	cmp	r3, #13
 80010f8:	d010      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b0e      	cmp	r3, #14
 8001100:	d00c      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	d008      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b10      	cmp	r3, #16
 8001110:	d004      	beq.n	800111c <HAL_ADC_ConfigChannel+0x154>
 8001112:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001116:	483c      	ldr	r0, [pc, #240]	; (8001208 <HAL_ADC_ConfigChannel+0x240>)
 8001118:	f7ff fa90 	bl	800063c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d020      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x19e>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d01c      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x19e>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d018      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x19e>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b03      	cmp	r3, #3
 800113a:	d014      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x19e>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b04      	cmp	r3, #4
 8001142:	d010      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x19e>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b05      	cmp	r3, #5
 800114a:	d00c      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x19e>
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b06      	cmp	r3, #6
 8001152:	d008      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x19e>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b07      	cmp	r3, #7
 800115a:	d004      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x19e>
 800115c:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8001160:	4829      	ldr	r0, [pc, #164]	; (8001208 <HAL_ADC_ConfigChannel+0x240>)
 8001162:	f7ff fa6b 	bl	800063c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <HAL_ADC_ConfigChannel+0x1ac>
 8001170:	2302      	movs	r3, #2
 8001172:	e0e2      	b.n	800133a <HAL_ADC_ConfigChannel+0x372>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b06      	cmp	r3, #6
 8001182:	d81c      	bhi.n	80011be <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	3b05      	subs	r3, #5
 8001196:	221f      	movs	r2, #31
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	4019      	ands	r1, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	3b05      	subs	r3, #5
 80011b0:	fa00 f203 	lsl.w	r2, r0, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34
 80011bc:	e042      	b.n	8001244 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b0c      	cmp	r3, #12
 80011c4:	d822      	bhi.n	800120c <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	3b23      	subs	r3, #35	; 0x23
 80011d8:	221f      	movs	r2, #31
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	4019      	ands	r1, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3b23      	subs	r3, #35	; 0x23
 80011f2:	fa00 f203 	lsl.w	r2, r0, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	631a      	str	r2, [r3, #48]	; 0x30
 80011fe:	e021      	b.n	8001244 <HAL_ADC_ConfigChannel+0x27c>
 8001200:	40012400 	.word	0x40012400
 8001204:	40012800 	.word	0x40012800
 8001208:	080047f0 	.word	0x080047f0
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3b41      	subs	r3, #65	; 0x41
 800121e:	221f      	movs	r2, #31
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	4019      	ands	r1, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b41      	subs	r3, #65	; 0x41
 8001238:	fa00 f203 	lsl.w	r2, r0, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d91c      	bls.n	8001286 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68d9      	ldr	r1, [r3, #12]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	3b1e      	subs	r3, #30
 800125e:	2207      	movs	r2, #7
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4019      	ands	r1, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6898      	ldr	r0, [r3, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	3b1e      	subs	r3, #30
 8001278:	fa00 f203 	lsl.w	r2, r0, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	e019      	b.n	80012ba <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6919      	ldr	r1, [r3, #16]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	2207      	movs	r2, #7
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	4019      	ands	r1, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6898      	ldr	r0, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	fa00 f203 	lsl.w	r2, r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d003      	beq.n	80012ca <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012c6:	2b11      	cmp	r3, #17
 80012c8:	d132      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <HAL_ADC_ConfigChannel+0x37c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d125      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d126      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012f0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d11a      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_ADC_ConfigChannel+0x380>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a13      	ldr	r2, [pc, #76]	; (800134c <HAL_ADC_ConfigChannel+0x384>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0c9a      	lsrs	r2, r3, #18
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001310:	e002      	b.n	8001318 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	3b01      	subs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f9      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x34a>
 800131e:	e007      	b.n	8001330 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	f043 0220 	orr.w	r2, r3, #32
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40012400 	.word	0x40012400
 8001348:	20000000 	.word	0x20000000
 800134c:	431bde83 	.word	0x431bde83

08001350 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b01      	cmp	r3, #1
 8001368:	d127      	bne.n	80013ba <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800137a:	f7ff fc8f 	bl	8000c9c <HAL_GetTick>
 800137e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001380:	e014      	b.n	80013ac <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001382:	f7ff fc8b 	bl	8000c9c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d90d      	bls.n	80013ac <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	f043 0210 	orr.w	r2, r3, #16
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e007      	b.n	80013bc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d0e3      	beq.n	8001382 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4906      	ldr	r1, [pc, #24]	; (800145c <__NVIC_EnableIRQ+0x34>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f7ff ff90 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b07      	cmp	r3, #7
 8001568:	d00f      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b06      	cmp	r3, #6
 800156e:	d00c      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d009      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b04      	cmp	r3, #4
 800157a:	d006      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d003      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001582:	2192      	movs	r1, #146	; 0x92
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001586:	f7ff f859 	bl	800063c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff1a 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	08004828 	.word	0x08004828

0800159c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d903      	bls.n	80015bc <HAL_NVIC_SetPriority+0x20>
 80015b4:	21aa      	movs	r1, #170	; 0xaa
 80015b6:	480e      	ldr	r0, [pc, #56]	; (80015f0 <HAL_NVIC_SetPriority+0x54>)
 80015b8:	f7ff f840 	bl	800063c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	d903      	bls.n	80015ca <HAL_NVIC_SetPriority+0x2e>
 80015c2:	21ab      	movs	r1, #171	; 0xab
 80015c4:	480a      	ldr	r0, [pc, #40]	; (80015f0 <HAL_NVIC_SetPriority+0x54>)
 80015c6:	f7ff f839 	bl	800063c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ca:	f7ff ff1f 	bl	800140c <__NVIC_GetPriorityGrouping>
 80015ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	6978      	ldr	r0, [r7, #20]
 80015d6:	f7ff ff6d 	bl	80014b4 <NVIC_EncodePriority>
 80015da:	4602      	mov	r2, r0
 80015dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff3c 	bl	8001460 <__NVIC_SetPriority>
}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	08004828 	.word	0x08004828

080015f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	da03      	bge.n	800160e <HAL_NVIC_EnableIRQ+0x1a>
 8001606:	21be      	movs	r1, #190	; 0xbe
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_NVIC_EnableIRQ+0x2c>)
 800160a:	f7ff f817 	bl	800063c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff08 	bl	8001428 <__NVIC_EnableIRQ>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	08004828 	.word	0x08004828

08001624 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff73 	bl	8001518 <SysTick_Config>
 8001632:	4603      	mov	r3, r0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800164e:	2b02      	cmp	r3, #2
 8001650:	d005      	beq.n	800165e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2204      	movs	r2, #4
 8001656:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e051      	b.n	8001702 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 020e 	bic.w	r2, r2, #14
 800166c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a22      	ldr	r2, [pc, #136]	; (800170c <HAL_DMA_Abort_IT+0xd0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d029      	beq.n	80016dc <HAL_DMA_Abort_IT+0xa0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a20      	ldr	r2, [pc, #128]	; (8001710 <HAL_DMA_Abort_IT+0xd4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d022      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x9c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <HAL_DMA_Abort_IT+0xd8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d01a      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x96>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <HAL_DMA_Abort_IT+0xdc>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d012      	beq.n	80016cc <HAL_DMA_Abort_IT+0x90>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1c      	ldr	r2, [pc, #112]	; (800171c <HAL_DMA_Abort_IT+0xe0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d00a      	beq.n	80016c6 <HAL_DMA_Abort_IT+0x8a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a1a      	ldr	r2, [pc, #104]	; (8001720 <HAL_DMA_Abort_IT+0xe4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d102      	bne.n	80016c0 <HAL_DMA_Abort_IT+0x84>
 80016ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016be:	e00e      	b.n	80016de <HAL_DMA_Abort_IT+0xa2>
 80016c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016c4:	e00b      	b.n	80016de <HAL_DMA_Abort_IT+0xa2>
 80016c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ca:	e008      	b.n	80016de <HAL_DMA_Abort_IT+0xa2>
 80016cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d0:	e005      	b.n	80016de <HAL_DMA_Abort_IT+0xa2>
 80016d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d6:	e002      	b.n	80016de <HAL_DMA_Abort_IT+0xa2>
 80016d8:	2310      	movs	r3, #16
 80016da:	e000      	b.n	80016de <HAL_DMA_Abort_IT+0xa2>
 80016dc:	2301      	movs	r3, #1
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <HAL_DMA_Abort_IT+0xe8>)
 80016e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	4798      	blx	r3
    } 
  }
  return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40020008 	.word	0x40020008
 8001710:	4002001c 	.word	0x4002001c
 8001714:	40020030 	.word	0x40020030
 8001718:	40020044 	.word	0x40020044
 800171c:	40020058 	.word	0x40020058
 8001720:	4002006c 	.word	0x4002006c
 8001724:	40020000 	.word	0x40020000

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a9c      	ldr	r2, [pc, #624]	; (80019b0 <HAL_GPIO_Init+0x288>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d013      	beq.n	800176a <HAL_GPIO_Init+0x42>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a9b      	ldr	r2, [pc, #620]	; (80019b4 <HAL_GPIO_Init+0x28c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d00f      	beq.n	800176a <HAL_GPIO_Init+0x42>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a9a      	ldr	r2, [pc, #616]	; (80019b8 <HAL_GPIO_Init+0x290>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00b      	beq.n	800176a <HAL_GPIO_Init+0x42>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a99      	ldr	r2, [pc, #612]	; (80019bc <HAL_GPIO_Init+0x294>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d007      	beq.n	800176a <HAL_GPIO_Init+0x42>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a98      	ldr	r2, [pc, #608]	; (80019c0 <HAL_GPIO_Init+0x298>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x42>
 8001762:	21bd      	movs	r1, #189	; 0xbd
 8001764:	4897      	ldr	r0, [pc, #604]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 8001766:	f7fe ff69 	bl	800063c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_GPIO_Init+0x58>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	041b      	lsls	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x60>
 8001780:	21be      	movs	r1, #190	; 0xbe
 8001782:	4890      	ldr	r0, [pc, #576]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 8001784:	f7fe ff5a 	bl	800063c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 81eb 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b01      	cmp	r3, #1
 8001798:	f000 81e6 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b11      	cmp	r3, #17
 80017a2:	f000 81e1 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	f000 81dc 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b12      	cmp	r3, #18
 80017b6:	f000 81d7 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4a82      	ldr	r2, [pc, #520]	; (80019c8 <HAL_GPIO_Init+0x2a0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	f000 81d1 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4a80      	ldr	r2, [pc, #512]	; (80019cc <HAL_GPIO_Init+0x2a4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	f000 81cb 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a7e      	ldr	r2, [pc, #504]	; (80019d0 <HAL_GPIO_Init+0x2a8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	f000 81c5 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a7c      	ldr	r2, [pc, #496]	; (80019d4 <HAL_GPIO_Init+0x2ac>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	f000 81bf 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a7a      	ldr	r2, [pc, #488]	; (80019d8 <HAL_GPIO_Init+0x2b0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	f000 81b9 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a78      	ldr	r2, [pc, #480]	; (80019dc <HAL_GPIO_Init+0x2b4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	f000 81b3 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b03      	cmp	r3, #3
 8001808:	f000 81ae 	beq.w	8001b68 <HAL_GPIO_Init+0x440>
 800180c:	21bf      	movs	r1, #191	; 0xbf
 800180e:	486d      	ldr	r0, [pc, #436]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 8001810:	f7fe ff14 	bl	800063c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001814:	e1a8      	b.n	8001b68 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001816:	2201      	movs	r2, #1
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	429a      	cmp	r2, r3
 8001830:	f040 8197 	bne.w	8001b62 <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a5e      	ldr	r2, [pc, #376]	; (80019b0 <HAL_GPIO_Init+0x288>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d013      	beq.n	8001864 <HAL_GPIO_Init+0x13c>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a5d      	ldr	r2, [pc, #372]	; (80019b4 <HAL_GPIO_Init+0x28c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00f      	beq.n	8001864 <HAL_GPIO_Init+0x13c>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a5c      	ldr	r2, [pc, #368]	; (80019b8 <HAL_GPIO_Init+0x290>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d00b      	beq.n	8001864 <HAL_GPIO_Init+0x13c>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a5b      	ldr	r2, [pc, #364]	; (80019bc <HAL_GPIO_Init+0x294>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d007      	beq.n	8001864 <HAL_GPIO_Init+0x13c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a5a      	ldr	r2, [pc, #360]	; (80019c0 <HAL_GPIO_Init+0x298>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x13c>
 800185c:	21cd      	movs	r1, #205	; 0xcd
 800185e:	4859      	ldr	r0, [pc, #356]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 8001860:	f7fe feec 	bl	800063c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b12      	cmp	r3, #18
 800186a:	d065      	beq.n	8001938 <HAL_GPIO_Init+0x210>
 800186c:	2b12      	cmp	r3, #18
 800186e:	d80e      	bhi.n	800188e <HAL_GPIO_Init+0x166>
 8001870:	2b02      	cmp	r3, #2
 8001872:	d04c      	beq.n	800190e <HAL_GPIO_Init+0x1e6>
 8001874:	2b02      	cmp	r3, #2
 8001876:	d804      	bhi.n	8001882 <HAL_GPIO_Init+0x15a>
 8001878:	2b00      	cmp	r3, #0
 800187a:	d072      	beq.n	8001962 <HAL_GPIO_Init+0x23a>
 800187c:	2b01      	cmp	r3, #1
 800187e:	d01d      	beq.n	80018bc <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001880:	e0b1      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8001882:	2b03      	cmp	r3, #3
 8001884:	f000 80ac 	beq.w	80019e0 <HAL_GPIO_Init+0x2b8>
 8001888:	2b11      	cmp	r3, #17
 800188a:	d02b      	beq.n	80018e4 <HAL_GPIO_Init+0x1bc>
          break;
 800188c:	e0ab      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800188e:	4a4f      	ldr	r2, [pc, #316]	; (80019cc <HAL_GPIO_Init+0x2a4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d066      	beq.n	8001962 <HAL_GPIO_Init+0x23a>
 8001894:	4a4d      	ldr	r2, [pc, #308]	; (80019cc <HAL_GPIO_Init+0x2a4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d806      	bhi.n	80018a8 <HAL_GPIO_Init+0x180>
 800189a:	4a4b      	ldr	r2, [pc, #300]	; (80019c8 <HAL_GPIO_Init+0x2a0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d060      	beq.n	8001962 <HAL_GPIO_Init+0x23a>
 80018a0:	4a4c      	ldr	r2, [pc, #304]	; (80019d4 <HAL_GPIO_Init+0x2ac>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d05d      	beq.n	8001962 <HAL_GPIO_Init+0x23a>
          break;
 80018a6:	e09e      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80018a8:	4a49      	ldr	r2, [pc, #292]	; (80019d0 <HAL_GPIO_Init+0x2a8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d059      	beq.n	8001962 <HAL_GPIO_Init+0x23a>
 80018ae:	4a4b      	ldr	r2, [pc, #300]	; (80019dc <HAL_GPIO_Init+0x2b4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d056      	beq.n	8001962 <HAL_GPIO_Init+0x23a>
 80018b4:	4a48      	ldr	r2, [pc, #288]	; (80019d8 <HAL_GPIO_Init+0x2b0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d053      	beq.n	8001962 <HAL_GPIO_Init+0x23a>
          break;
 80018ba:	e094      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d00b      	beq.n	80018dc <HAL_GPIO_Init+0x1b4>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d007      	beq.n	80018dc <HAL_GPIO_Init+0x1b4>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x1b4>
 80018d4:	21d5      	movs	r1, #213	; 0xd5
 80018d6:	483b      	ldr	r0, [pc, #236]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 80018d8:	f7fe feb0 	bl	800063c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	623b      	str	r3, [r7, #32]
          break;
 80018e2:	e080      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d00b      	beq.n	8001904 <HAL_GPIO_Init+0x1dc>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d007      	beq.n	8001904 <HAL_GPIO_Init+0x1dc>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x1dc>
 80018fc:	21dc      	movs	r1, #220	; 0xdc
 80018fe:	4831      	ldr	r0, [pc, #196]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 8001900:	f7fe fe9c 	bl	800063c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	3304      	adds	r3, #4
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e06b      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d00b      	beq.n	800192e <HAL_GPIO_Init+0x206>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x206>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x206>
 8001926:	21e3      	movs	r1, #227	; 0xe3
 8001928:	4826      	ldr	r0, [pc, #152]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 800192a:	f7fe fe87 	bl	800063c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	3308      	adds	r3, #8
 8001934:	623b      	str	r3, [r7, #32]
          break;
 8001936:	e056      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d00b      	beq.n	8001958 <HAL_GPIO_Init+0x230>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_Init+0x230>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x230>
 8001950:	21ea      	movs	r1, #234	; 0xea
 8001952:	481c      	ldr	r0, [pc, #112]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 8001954:	f7fe fe72 	bl	800063c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	330c      	adds	r3, #12
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e041      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00b      	beq.n	8001982 <HAL_GPIO_Init+0x25a>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d007      	beq.n	8001982 <HAL_GPIO_Init+0x25a>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x25a>
 800197a:	21f7      	movs	r1, #247	; 0xf7
 800197c:	4811      	ldr	r0, [pc, #68]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 800197e:	f7fe fe5d 	bl	800063c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198a:	2304      	movs	r3, #4
 800198c:	623b      	str	r3, [r7, #32]
          break;
 800198e:	e02a      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001998:	2308      	movs	r3, #8
 800199a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	611a      	str	r2, [r3, #16]
          break;
 80019a2:	e020      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	615a      	str	r2, [r3, #20]
          break;
 80019ae:	e01a      	b.n	80019e6 <HAL_GPIO_Init+0x2be>
 80019b0:	40010800 	.word	0x40010800
 80019b4:	40010c00 	.word	0x40010c00
 80019b8:	40011000 	.word	0x40011000
 80019bc:	40011400 	.word	0x40011400
 80019c0:	40011800 	.word	0x40011800
 80019c4:	08004864 	.word	0x08004864
 80019c8:	10110000 	.word	0x10110000
 80019cc:	10210000 	.word	0x10210000
 80019d0:	10310000 	.word	0x10310000
 80019d4:	10120000 	.word	0x10120000
 80019d8:	10220000 	.word	0x10220000
 80019dc:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	2bff      	cmp	r3, #255	; 0xff
 80019ea:	d801      	bhi.n	80019f0 <HAL_GPIO_Init+0x2c8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	e001      	b.n	80019f4 <HAL_GPIO_Init+0x2cc>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3304      	adds	r3, #4
 80019f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2bff      	cmp	r3, #255	; 0xff
 80019fa:	d802      	bhi.n	8001a02 <HAL_GPIO_Init+0x2da>
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_Init+0x2e0>
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	3b08      	subs	r3, #8
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	210f      	movs	r1, #15
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	6a39      	ldr	r1, [r7, #32]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	431a      	orrs	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 8096 	beq.w	8001b62 <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a36:	4b52      	ldr	r3, [pc, #328]	; (8001b80 <HAL_GPIO_Init+0x458>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	4a51      	ldr	r2, [pc, #324]	; (8001b80 <HAL_GPIO_Init+0x458>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6193      	str	r3, [r2, #24]
 8001a42:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <HAL_GPIO_Init+0x458>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a4e:	4a4d      	ldr	r2, [pc, #308]	; (8001b84 <HAL_GPIO_Init+0x45c>)
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a44      	ldr	r2, [pc, #272]	; (8001b88 <HAL_GPIO_Init+0x460>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x37a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a43      	ldr	r2, [pc, #268]	; (8001b8c <HAL_GPIO_Init+0x464>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x376>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a42      	ldr	r2, [pc, #264]	; (8001b90 <HAL_GPIO_Init+0x468>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x372>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a41      	ldr	r2, [pc, #260]	; (8001b94 <HAL_GPIO_Init+0x46c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x36e>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x37c>
 8001a96:	2304      	movs	r3, #4
 8001a98:	e004      	b.n	8001aa4 <HAL_GPIO_Init+0x37c>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_Init+0x37c>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x37c>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa6:	f002 0203 	and.w	r2, r2, #3
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	4093      	lsls	r3, r2
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ab4:	4933      	ldr	r1, [pc, #204]	; (8001b84 <HAL_GPIO_Init+0x45c>)
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ace:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4931      	ldr	r1, [pc, #196]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
 8001ada:	e006      	b.n	8001aea <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	492c      	ldr	r1, [pc, #176]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af6:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	4927      	ldr	r1, [pc, #156]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
 8001b02:	e006      	b.n	8001b12 <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	4922      	ldr	r1, [pc, #136]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	491d      	ldr	r1, [pc, #116]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
 8001b2a:	e006      	b.n	8001b3a <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	4918      	ldr	r1, [pc, #96]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	4913      	ldr	r1, [pc, #76]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60cb      	str	r3, [r1, #12]
 8001b52:	e006      	b.n	8001b62 <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	490e      	ldr	r1, [pc, #56]	; (8001b98 <HAL_GPIO_Init+0x470>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f47f ae4f 	bne.w	8001816 <HAL_GPIO_Init+0xee>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	; 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010000 	.word	0x40010000
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	40010c00 	.word	0x40010c00
 8001b90:	40011000 	.word	0x40011000
 8001b94:	40011400 	.word	0x40011400
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_GPIO_WritePin+0x20>
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	0c1b      	lsrs	r3, r3, #16
 8001bb6:	041b      	lsls	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <HAL_GPIO_WritePin+0x2a>
 8001bbc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001bc0:	480e      	ldr	r0, [pc, #56]	; (8001bfc <HAL_GPIO_WritePin+0x60>)
 8001bc2:	f7fe fd3b 	bl	800063c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001bc6:	787b      	ldrb	r3, [r7, #1]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_GPIO_WritePin+0x40>
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d004      	beq.n	8001bdc <HAL_GPIO_WritePin+0x40>
 8001bd2:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001bd6:	4809      	ldr	r0, [pc, #36]	; (8001bfc <HAL_GPIO_WritePin+0x60>)
 8001bd8:	f7fe fd30 	bl	800063c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be8:	e003      	b.n	8001bf2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	041a      	lsls	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	611a      	str	r2, [r3, #16]
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	08004864 	.word	0x08004864

08001c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e1ab      	b.n	8001f6a <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4aa0      	ldr	r2, [pc, #640]	; (8001e98 <HAL_I2C_Init+0x298>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d009      	beq.n	8001c30 <HAL_I2C_Init+0x30>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a9e      	ldr	r2, [pc, #632]	; (8001e9c <HAL_I2C_Init+0x29c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_I2C_Init+0x30>
 8001c26:	f240 11d1 	movw	r1, #465	; 0x1d1
 8001c2a:	489d      	ldr	r0, [pc, #628]	; (8001ea0 <HAL_I2C_Init+0x2a0>)
 8001c2c:	f7fe fd06 	bl	800063c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <HAL_I2C_Init+0x42>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4a99      	ldr	r2, [pc, #612]	; (8001ea4 <HAL_I2C_Init+0x2a4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d904      	bls.n	8001c4c <HAL_I2C_Init+0x4c>
 8001c42:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8001c46:	4896      	ldr	r0, [pc, #600]	; (8001ea0 <HAL_I2C_Init+0x2a0>)
 8001c48:	f7fe fcf8 	bl	800063c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <HAL_I2C_Init+0x68>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c5c:	d004      	beq.n	8001c68 <HAL_I2C_Init+0x68>
 8001c5e:	f240 11d3 	movw	r1, #467	; 0x1d3
 8001c62:	488f      	ldr	r0, [pc, #572]	; (8001ea0 <HAL_I2C_Init+0x2a0>)
 8001c64:	f7fe fcea 	bl	800063c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c70:	f023 0303 	bic.w	r3, r3, #3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <HAL_I2C_Init+0x82>
 8001c78:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001c7c:	4888      	ldr	r0, [pc, #544]	; (8001ea0 <HAL_I2C_Init+0x2a0>)
 8001c7e:	f7fe fcdd 	bl	800063c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c8a:	d009      	beq.n	8001ca0 <HAL_I2C_Init+0xa0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001c94:	d004      	beq.n	8001ca0 <HAL_I2C_Init+0xa0>
 8001c96:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001c9a:	4881      	ldr	r0, [pc, #516]	; (8001ea0 <HAL_I2C_Init+0x2a0>)
 8001c9c:	f7fe fcce 	bl	800063c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_I2C_Init+0xba>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d004      	beq.n	8001cba <HAL_I2C_Init+0xba>
 8001cb0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001cb4:	487a      	ldr	r0, [pc, #488]	; (8001ea0 <HAL_I2C_Init+0x2a0>)
 8001cb6:	f7fe fcc1 	bl	800063c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <HAL_I2C_Init+0xd0>
 8001cc6:	f240 11d7 	movw	r1, #471	; 0x1d7
 8001cca:	4875      	ldr	r0, [pc, #468]	; (8001ea0 <HAL_I2C_Init+0x2a0>)
 8001ccc:	f7fe fcb6 	bl	800063c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_I2C_Init+0xea>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b40      	cmp	r3, #64	; 0x40
 8001cde:	d004      	beq.n	8001cea <HAL_I2C_Init+0xea>
 8001ce0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001ce4:	486e      	ldr	r0, [pc, #440]	; (8001ea0 <HAL_I2C_Init+0x2a0>)
 8001ce6:	f7fe fca9 	bl	800063c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <HAL_I2C_Init+0x104>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	2b80      	cmp	r3, #128	; 0x80
 8001cf8:	d004      	beq.n	8001d04 <HAL_I2C_Init+0x104>
 8001cfa:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001cfe:	4868      	ldr	r0, [pc, #416]	; (8001ea0 <HAL_I2C_Init+0x2a0>)
 8001d00:	f7fe fc9c 	bl	800063c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d106      	bne.n	8001d1e <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7fe fb81 	bl	8000420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2224      	movs	r2, #36	; 0x24
 8001d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d44:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d54:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d56:	f000 fe79 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8001d5a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a51      	ldr	r2, [pc, #324]	; (8001ea8 <HAL_I2C_Init+0x2a8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d807      	bhi.n	8001d76 <HAL_I2C_Init+0x176>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4a50      	ldr	r2, [pc, #320]	; (8001eac <HAL_I2C_Init+0x2ac>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	bf94      	ite	ls
 8001d6e:	2301      	movls	r3, #1
 8001d70:	2300      	movhi	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	e006      	b.n	8001d84 <HAL_I2C_Init+0x184>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4a4d      	ldr	r2, [pc, #308]	; (8001eb0 <HAL_I2C_Init+0x2b0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	bf94      	ite	ls
 8001d7e:	2301      	movls	r3, #1
 8001d80:	2300      	movhi	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0ee      	b.n	8001f6a <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <HAL_I2C_Init+0x2b4>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	0c9b      	lsrs	r3, r3, #18
 8001d96:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a3b      	ldr	r2, [pc, #236]	; (8001ea8 <HAL_I2C_Init+0x2a8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d802      	bhi.n	8001dc6 <HAL_I2C_Init+0x1c6>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	e009      	b.n	8001dda <HAL_I2C_Init+0x1da>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	4a39      	ldr	r2, [pc, #228]	; (8001eb8 <HAL_I2C_Init+0x2b8>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	3301      	adds	r3, #1
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	430b      	orrs	r3, r1
 8001de0:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dec:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	492c      	ldr	r1, [pc, #176]	; (8001ea8 <HAL_I2C_Init+0x2a8>)
 8001df6:	428b      	cmp	r3, r1
 8001df8:	d80d      	bhi.n	8001e16 <HAL_I2C_Init+0x216>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1e59      	subs	r1, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf38      	it	cc
 8001e12:	2304      	movcc	r3, #4
 8001e14:	e062      	b.n	8001edc <HAL_I2C_Init+0x2dc>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d111      	bne.n	8001e42 <HAL_I2C_Init+0x242>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1e58      	subs	r0, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	440b      	add	r3, r1
 8001e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e30:	3301      	adds	r3, #1
 8001e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bf0c      	ite	eq
 8001e3a:	2301      	moveq	r3, #1
 8001e3c:	2300      	movne	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	e012      	b.n	8001e68 <HAL_I2C_Init+0x268>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e58      	subs	r0, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	0099      	lsls	r1, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bf0c      	ite	eq
 8001e62:	2301      	moveq	r3, #1
 8001e64:	2300      	movne	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_I2C_Init+0x270>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e035      	b.n	8001edc <HAL_I2C_Init+0x2dc>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d121      	bne.n	8001ebc <HAL_I2C_Init+0x2bc>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1e58      	subs	r0, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	440b      	add	r3, r1
 8001e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e94:	e022      	b.n	8001edc <HAL_I2C_Init+0x2dc>
 8001e96:	bf00      	nop
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	40005800 	.word	0x40005800
 8001ea0:	080048a0 	.word	0x080048a0
 8001ea4:	00061a80 	.word	0x00061a80
 8001ea8:	000186a0 	.word	0x000186a0
 8001eac:	001e847f 	.word	0x001e847f
 8001eb0:	003d08ff 	.word	0x003d08ff
 8001eb4:	431bde83 	.word	0x431bde83
 8001eb8:	10624dd3 	.word	0x10624dd3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1e58      	subs	r0, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	0099      	lsls	r1, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	6809      	ldr	r1, [r1, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6911      	ldr	r1, [r2, #16]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68d2      	ldr	r2, [r2, #12]
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e35c      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x54>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d116      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x54>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d110      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x54>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10a      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x54>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d104      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x54>
 8001fbe:	f240 1167 	movw	r1, #359	; 0x167
 8001fc2:	48a5      	ldr	r0, [pc, #660]	; (8002258 <HAL_RCC_OscConfig+0x2e4>)
 8001fc4:	f7fe fb3a 	bl	800063c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 809a 	beq.w	800210a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00e      	beq.n	8001ffc <HAL_RCC_OscConfig+0x88>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe6:	d009      	beq.n	8001ffc <HAL_RCC_OscConfig+0x88>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff0:	d004      	beq.n	8001ffc <HAL_RCC_OscConfig+0x88>
 8001ff2:	f240 116d 	movw	r1, #365	; 0x16d
 8001ff6:	4898      	ldr	r0, [pc, #608]	; (8002258 <HAL_RCC_OscConfig+0x2e4>)
 8001ff8:	f7fe fb20 	bl	800063c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffc:	4b97      	ldr	r3, [pc, #604]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b04      	cmp	r3, #4
 8002006:	d00c      	beq.n	8002022 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002008:	4b94      	ldr	r3, [pc, #592]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d112      	bne.n	800203a <HAL_RCC_OscConfig+0xc6>
 8002014:	4b91      	ldr	r3, [pc, #580]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d10b      	bne.n	800203a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002022:	4b8e      	ldr	r3, [pc, #568]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d06c      	beq.n	8002108 <HAL_RCC_OscConfig+0x194>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d168      	bne.n	8002108 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e302      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0xde>
 8002044:	4b85      	ldr	r3, [pc, #532]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a84      	ldr	r2, [pc, #528]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 800204a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	e02e      	b.n	80020b0 <HAL_RCC_OscConfig+0x13c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x100>
 800205a:	4b80      	ldr	r3, [pc, #512]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a7f      	ldr	r2, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b7d      	ldr	r3, [pc, #500]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7c      	ldr	r2, [pc, #496]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 800206c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e01d      	b.n	80020b0 <HAL_RCC_OscConfig+0x13c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x124>
 800207e:	4b77      	ldr	r3, [pc, #476]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a76      	ldr	r2, [pc, #472]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b74      	ldr	r3, [pc, #464]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a73      	ldr	r2, [pc, #460]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0x13c>
 8002098:	4b70      	ldr	r3, [pc, #448]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a6f      	ldr	r2, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b6d      	ldr	r3, [pc, #436]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a6c      	ldr	r2, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe fdf0 	bl	8000c9c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7fe fdec 	bl	8000c9c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e2b6      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b62      	ldr	r3, [pc, #392]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x14c>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe fddc 	bl	8000c9c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe fdd8 	bl	8000c9c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e2a2      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b58      	ldr	r3, [pc, #352]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x174>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d079      	beq.n	800220a <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d008      	beq.n	8002130 <HAL_RCC_OscConfig+0x1bc>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d004      	beq.n	8002130 <HAL_RCC_OscConfig+0x1bc>
 8002126:	f240 11a1 	movw	r1, #417	; 0x1a1
 800212a:	484b      	ldr	r0, [pc, #300]	; (8002258 <HAL_RCC_OscConfig+0x2e4>)
 800212c:	f7fe fa86 	bl	800063c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	2b1f      	cmp	r3, #31
 8002136:	d904      	bls.n	8002142 <HAL_RCC_OscConfig+0x1ce>
 8002138:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800213c:	4846      	ldr	r0, [pc, #280]	; (8002258 <HAL_RCC_OscConfig+0x2e4>)
 800213e:	f7fe fa7d 	bl	800063c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002142:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d11c      	bne.n	8002194 <HAL_RCC_OscConfig+0x220>
 800215a:	4b40      	ldr	r3, [pc, #256]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x20a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e260      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b37      	ldr	r3, [pc, #220]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4933      	ldr	r1, [pc, #204]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e03a      	b.n	800220a <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219c:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_RCC_OscConfig+0x2ec>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe fd7b 	bl	8000c9c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7fe fd77 	bl	8000c9c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e241      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4921      	ldr	r1, [pc, #132]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCC_OscConfig+0x2ec>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fd5a 	bl	8000c9c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7fe fd56 	bl	8000c9c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e220      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_RCC_OscConfig+0x2e8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d048      	beq.n	80022a8 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_RCC_OscConfig+0x2bc>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d004      	beq.n	8002230 <HAL_RCC_OscConfig+0x2bc>
 8002226:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800222a:	480b      	ldr	r0, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x2e4>)
 800222c:	f7fe fa06 	bl	800063c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d021      	beq.n	800227c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_OscConfig+0x2f0>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7fe fd2d 	bl	8000c9c <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002244:	e010      	b.n	8002268 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002246:	f7fe fd29 	bl	8000c9c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d909      	bls.n	8002268 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1f3      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
 8002258:	080048d8 	.word	0x080048d8
 800225c:	40021000 	.word	0x40021000
 8002260:	42420000 	.word	0x42420000
 8002264:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002268:	4b67      	ldr	r3, [pc, #412]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0e8      	beq.n	8002246 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002274:	2001      	movs	r0, #1
 8002276:	f000 fc11 	bl	8002a9c <RCC_Delay>
 800227a:	e015      	b.n	80022a8 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227c:	4b63      	ldr	r3, [pc, #396]	; (800240c <HAL_RCC_OscConfig+0x498>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7fe fd0b 	bl	8000c9c <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228a:	f7fe fd07 	bl	8000c9c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e1d1      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80c0 	beq.w	8002436 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <HAL_RCC_OscConfig+0x368>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d008      	beq.n	80022dc <HAL_RCC_OscConfig+0x368>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d004      	beq.n	80022dc <HAL_RCC_OscConfig+0x368>
 80022d2:	f240 2111 	movw	r1, #529	; 0x211
 80022d6:	484e      	ldr	r0, [pc, #312]	; (8002410 <HAL_RCC_OscConfig+0x49c>)
 80022d8:	f7fe f9b0 	bl	800063c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022dc:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	4a46      	ldr	r2, [pc, #280]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 80022ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f2:	61d3      	str	r3, [r2, #28]
 80022f4:	4b44      	ldr	r3, [pc, #272]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002300:	2301      	movs	r3, #1
 8002302:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	4b43      	ldr	r3, [pc, #268]	; (8002414 <HAL_RCC_OscConfig+0x4a0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d118      	bne.n	8002342 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002310:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_RCC_OscConfig+0x4a0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a3f      	ldr	r2, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x4a0>)
 8002316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231c:	f7fe fcbe 	bl	8000c9c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002324:	f7fe fcba 	bl	8000c9c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e184      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002336:	4b37      	ldr	r3, [pc, #220]	; (8002414 <HAL_RCC_OscConfig+0x4a0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d106      	bne.n	8002358 <HAL_RCC_OscConfig+0x3e4>
 800234a:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a2e      	ldr	r2, [pc, #184]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6213      	str	r3, [r2, #32]
 8002356:	e02d      	b.n	80023b4 <HAL_RCC_OscConfig+0x440>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10c      	bne.n	800237a <HAL_RCC_OscConfig+0x406>
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a28      	ldr	r2, [pc, #160]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a25      	ldr	r2, [pc, #148]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 8002372:	f023 0304 	bic.w	r3, r3, #4
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	e01c      	b.n	80023b4 <HAL_RCC_OscConfig+0x440>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b05      	cmp	r3, #5
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x428>
 8002382:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a20      	ldr	r2, [pc, #128]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6213      	str	r3, [r2, #32]
 800239a:	e00b      	b.n	80023b4 <HAL_RCC_OscConfig+0x440>
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4a19      	ldr	r2, [pc, #100]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	6213      	str	r3, [r2, #32]
 80023a8:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a16      	ldr	r2, [pc, #88]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 80023ae:	f023 0304 	bic.w	r3, r3, #4
 80023b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d015      	beq.n	80023e8 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023bc:	f7fe fc6e 	bl	8000c9c <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	e00a      	b.n	80023da <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7fe fc6a 	bl	8000c9c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e132      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_RCC_OscConfig+0x494>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0ee      	beq.n	80023c4 <HAL_RCC_OscConfig+0x450>
 80023e6:	e01d      	b.n	8002424 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7fe fc58 	bl	8000c9c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ee:	e013      	b.n	8002418 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7fe fc54 	bl	8000c9c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d90a      	bls.n	8002418 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e11c      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	42420480 	.word	0x42420480
 8002410:	080048d8 	.word	0x080048d8
 8002414:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e5      	bne.n	80023f0 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d105      	bne.n	8002436 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b87      	ldr	r3, [pc, #540]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a86      	ldr	r2, [pc, #536]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002434:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00c      	beq.n	8002458 <HAL_RCC_OscConfig+0x4e4>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d008      	beq.n	8002458 <HAL_RCC_OscConfig+0x4e4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d004      	beq.n	8002458 <HAL_RCC_OscConfig+0x4e4>
 800244e:	f240 21af 	movw	r1, #687	; 0x2af
 8002452:	487e      	ldr	r0, [pc, #504]	; (800264c <HAL_RCC_OscConfig+0x6d8>)
 8002454:	f7fe f8f2 	bl	800063c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80ee 	beq.w	800263e <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002462:	4b79      	ldr	r3, [pc, #484]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	f000 80ce 	beq.w	800260c <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b02      	cmp	r3, #2
 8002476:	f040 80b2 	bne.w	80025de <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_RCC_OscConfig+0x522>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248a:	d004      	beq.n	8002496 <HAL_RCC_OscConfig+0x522>
 800248c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8002490:	486e      	ldr	r0, [pc, #440]	; (800264c <HAL_RCC_OscConfig+0x6d8>)
 8002492:	f7fe f8d3 	bl	800063c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2b00      	cmp	r3, #0
 800249c:	d04a      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024a6:	d045      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024b0:	d040      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024ba:	d03b      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c4:	d036      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024ce:	d031      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80024d8:	d02c      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80024e2:	d027      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ec:	d022      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024f6:	d01d      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002500:	d018      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002514:	d00e      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800251e:	d009      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002528:	d004      	beq.n	8002534 <HAL_RCC_OscConfig+0x5c0>
 800252a:	f240 21b9 	movw	r1, #697	; 0x2b9
 800252e:	4847      	ldr	r0, [pc, #284]	; (800264c <HAL_RCC_OscConfig+0x6d8>)
 8002530:	f7fe f884 	bl	800063c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <HAL_RCC_OscConfig+0x6dc>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7fe fbaf 	bl	8000c9c <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002542:	f7fe fbab 	bl	8000c9c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e075      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002554:	4b3c      	ldr	r3, [pc, #240]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002568:	d116      	bne.n	8002598 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_RCC_OscConfig+0x612>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800257a:	d004      	beq.n	8002586 <HAL_RCC_OscConfig+0x612>
 800257c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8002580:	4832      	ldr	r0, [pc, #200]	; (800264c <HAL_RCC_OscConfig+0x6d8>)
 8002582:	f7fe f85b 	bl	800063c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	492d      	ldr	r1, [pc, #180]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a19      	ldr	r1, [r3, #32]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	430b      	orrs	r3, r1
 80025aa:	4927      	ldr	r1, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x6dc>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7fe fb71 	bl	8000c9c <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7fe fb6d 	bl	8000c9c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e037      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x64a>
 80025dc:	e02f      	b.n	800263e <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_RCC_OscConfig+0x6dc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fb5a 	bl	8000c9c <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fb56 	bl	8000c9c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e020      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x678>
 800260a:	e018      	b.n	800263e <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e013      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x6d4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	429a      	cmp	r2, r3
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	080048d8 	.word	0x080048d8
 8002650:	42420060 	.word	0x42420060

08002654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e176      	b.n	8002956 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x4e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d110      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x4e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x4e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d104      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x4e>
 8002698:	f44f 714e 	mov.w	r1, #824	; 0x338
 800269c:	4874      	ldr	r0, [pc, #464]	; (8002870 <HAL_RCC_ClockConfig+0x21c>)
 800269e:	f7fd ffcd 	bl	800063c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCC_ClockConfig+0x6a>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d007      	beq.n	80026be <HAL_RCC_ClockConfig+0x6a>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d004      	beq.n	80026be <HAL_RCC_ClockConfig+0x6a>
 80026b4:	f240 3139 	movw	r1, #825	; 0x339
 80026b8:	486d      	ldr	r0, [pc, #436]	; (8002870 <HAL_RCC_ClockConfig+0x21c>)
 80026ba:	f7fd ffbf 	bl	800063c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026be:	4b6d      	ldr	r3, [pc, #436]	; (8002874 <HAL_RCC_ClockConfig+0x220>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d910      	bls.n	80026ee <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026cc:	4b69      	ldr	r3, [pc, #420]	; (8002874 <HAL_RCC_ClockConfig+0x220>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 0207 	bic.w	r2, r3, #7
 80026d4:	4967      	ldr	r1, [pc, #412]	; (8002874 <HAL_RCC_ClockConfig+0x220>)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026dc:	4b65      	ldr	r3, [pc, #404]	; (8002874 <HAL_RCC_ClockConfig+0x220>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e133      	b.n	8002956 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d049      	beq.n	800278e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002706:	4b5c      	ldr	r3, [pc, #368]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a5b      	ldr	r2, [pc, #364]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 800270c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002710:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271e:	4b56      	ldr	r3, [pc, #344]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a55      	ldr	r2, [pc, #340]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 8002724:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002728:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d024      	beq.n	800277c <HAL_RCC_ClockConfig+0x128>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b80      	cmp	r3, #128	; 0x80
 8002738:	d020      	beq.n	800277c <HAL_RCC_ClockConfig+0x128>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b90      	cmp	r3, #144	; 0x90
 8002740:	d01c      	beq.n	800277c <HAL_RCC_ClockConfig+0x128>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2ba0      	cmp	r3, #160	; 0xa0
 8002748:	d018      	beq.n	800277c <HAL_RCC_ClockConfig+0x128>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2bb0      	cmp	r3, #176	; 0xb0
 8002750:	d014      	beq.n	800277c <HAL_RCC_ClockConfig+0x128>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2bc0      	cmp	r3, #192	; 0xc0
 8002758:	d010      	beq.n	800277c <HAL_RCC_ClockConfig+0x128>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2bd0      	cmp	r3, #208	; 0xd0
 8002760:	d00c      	beq.n	800277c <HAL_RCC_ClockConfig+0x128>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2be0      	cmp	r3, #224	; 0xe0
 8002768:	d008      	beq.n	800277c <HAL_RCC_ClockConfig+0x128>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2bf0      	cmp	r3, #240	; 0xf0
 8002770:	d004      	beq.n	800277c <HAL_RCC_ClockConfig+0x128>
 8002772:	f240 315f 	movw	r1, #863	; 0x35f
 8002776:	483e      	ldr	r0, [pc, #248]	; (8002870 <HAL_RCC_ClockConfig+0x21c>)
 8002778:	f7fd ff60 	bl	800063c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b3e      	ldr	r3, [pc, #248]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	493b      	ldr	r1, [pc, #236]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d051      	beq.n	800283e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_RCC_ClockConfig+0x168>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d008      	beq.n	80027bc <HAL_RCC_ClockConfig+0x168>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d004      	beq.n	80027bc <HAL_RCC_ClockConfig+0x168>
 80027b2:	f240 3166 	movw	r1, #870	; 0x366
 80027b6:	482e      	ldr	r0, [pc, #184]	; (8002870 <HAL_RCC_ClockConfig+0x21c>)
 80027b8:	f7fd ff40 	bl	800063c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c4:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d115      	bne.n	80027fc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0c0      	b.n	8002956 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d107      	bne.n	80027ec <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027dc:	4b26      	ldr	r3, [pc, #152]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0b4      	b.n	8002956 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0ac      	b.n	8002956 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fc:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 0203 	bic.w	r2, r3, #3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	491b      	ldr	r1, [pc, #108]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800280e:	f7fe fa45 	bl	8000c9c <HAL_GetTick>
 8002812:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002814:	e00a      	b.n	800282c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002816:	f7fe fa41 	bl	8000c9c <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e094      	b.n	8002956 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_ClockConfig+0x224>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 020c 	and.w	r2, r3, #12
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	429a      	cmp	r2, r3
 800283c:	d1eb      	bne.n	8002816 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_RCC_ClockConfig+0x220>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d217      	bcs.n	800287c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x220>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 0207 	bic.w	r2, r3, #7
 8002854:	4907      	ldr	r1, [pc, #28]	; (8002874 <HAL_RCC_ClockConfig+0x220>)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_ClockConfig+0x220>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d008      	beq.n	800287c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e073      	b.n	8002956 <HAL_RCC_ClockConfig+0x302>
 800286e:	bf00      	nop
 8002870:	080048d8 	.word	0x080048d8
 8002874:	40022000 	.word	0x40022000
 8002878:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d025      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d018      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x26e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002898:	d013      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x26e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80028a2:	d00e      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x26e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028ac:	d009      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x26e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028b6:	d004      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x26e>
 80028b8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80028bc:	4828      	ldr	r0, [pc, #160]	; (8002960 <HAL_RCC_ClockConfig+0x30c>)
 80028be:	f7fd febd 	bl	800063c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c2:	4b28      	ldr	r3, [pc, #160]	; (8002964 <HAL_RCC_ClockConfig+0x310>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	4925      	ldr	r1, [pc, #148]	; (8002964 <HAL_RCC_ClockConfig+0x310>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d026      	beq.n	800292e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d018      	beq.n	800291a <HAL_RCC_ClockConfig+0x2c6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f0:	d013      	beq.n	800291a <HAL_RCC_ClockConfig+0x2c6>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80028fa:	d00e      	beq.n	800291a <HAL_RCC_ClockConfig+0x2c6>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x2c6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800290e:	d004      	beq.n	800291a <HAL_RCC_ClockConfig+0x2c6>
 8002910:	f240 31ab 	movw	r1, #939	; 0x3ab
 8002914:	4812      	ldr	r0, [pc, #72]	; (8002960 <HAL_RCC_ClockConfig+0x30c>)
 8002916:	f7fd fe91 	bl	800063c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_RCC_ClockConfig+0x310>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	490e      	ldr	r1, [pc, #56]	; (8002964 <HAL_RCC_ClockConfig+0x310>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800292e:	f000 f821 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8002932:	4601      	mov	r1, r0
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_ClockConfig+0x310>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <HAL_RCC_ClockConfig+0x314>)
 8002940:	5cd3      	ldrb	r3, [r2, r3]
 8002942:	fa21 f303 	lsr.w	r3, r1, r3
 8002946:	4a09      	ldr	r2, [pc, #36]	; (800296c <HAL_RCC_ClockConfig+0x318>)
 8002948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_ClockConfig+0x31c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe f962 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	080048d8 	.word	0x080048d8
 8002964:	40021000 	.word	0x40021000
 8002968:	08004a5c 	.word	0x08004a5c
 800296c:	20000000 	.word	0x20000000
 8002970:	20000004 	.word	0x20000004

08002974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	b490      	push	{r4, r7}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800297a:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 800297c:	1d3c      	adds	r4, r7, #4
 800297e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002984:	4b28      	ldr	r3, [pc, #160]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x40>
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x46>
 80029b2:	e02d      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029b4:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029b6:	623b      	str	r3, [r7, #32]
      break;
 80029b8:	e02d      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	0c9b      	lsrs	r3, r3, #18
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029c6:	4413      	add	r3, r2
 80029c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d013      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	0c5b      	lsrs	r3, r3, #17
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029e6:	4413      	add	r3, r2
 80029e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029f2:	fb02 f203 	mul.w	r2, r2, r3
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	e004      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	623b      	str	r3, [r7, #32]
      break;
 8002a0e:	e002      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a12:	623b      	str	r3, [r7, #32]
      break;
 8002a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a16:	6a3b      	ldr	r3, [r7, #32]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3728      	adds	r7, #40	; 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc90      	pop	{r4, r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	08004910 	.word	0x08004910
 8002a28:	08004920 	.word	0x08004920
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	007a1200 	.word	0x007a1200
 8002a34:	003d0900 	.word	0x003d0900

08002a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a3c:	4b02      	ldr	r3, [pc, #8]	; (8002a48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	20000000 	.word	0x20000000

08002a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a50:	f7ff fff2 	bl	8002a38 <HAL_RCC_GetHCLKFreq>
 8002a54:	4601      	mov	r1, r0
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	4a03      	ldr	r2, [pc, #12]	; (8002a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a62:	5cd3      	ldrb	r3, [r2, r3]
 8002a64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	08004a6c 	.word	0x08004a6c

08002a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a78:	f7ff ffde 	bl	8002a38 <HAL_RCC_GetHCLKFreq>
 8002a7c:	4601      	mov	r1, r0
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	0adb      	lsrs	r3, r3, #11
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	4a03      	ldr	r2, [pc, #12]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	08004a6c 	.word	0x08004a6c

08002a9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <RCC_Delay+0x34>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <RCC_Delay+0x38>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0a5b      	lsrs	r3, r3, #9
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ab8:	bf00      	nop
  }
  while (Delay --);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	60fa      	str	r2, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f9      	bne.n	8002ab8 <RCC_Delay+0x1c>
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	10624dd3 	.word	0x10624dd3

08002ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10f      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002b0c:	216c      	movs	r1, #108	; 0x6c
 8002b0e:	4873      	ldr	r0, [pc, #460]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002b10:	f7fd fd94 	bl	800063c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8095 	beq.w	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d012      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b32:	d00d      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b3c:	d008      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b46:	d003      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002b48:	2172      	movs	r1, #114	; 0x72
 8002b4a:	4864      	ldr	r0, [pc, #400]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002b4c:	f7fd fd76 	bl	800063c <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b54:	4b62      	ldr	r3, [pc, #392]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10d      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	4a5e      	ldr	r2, [pc, #376]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	61d3      	str	r3, [r2, #28]
 8002b6c:	4b5c      	ldr	r3, [pc, #368]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d118      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b88:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a55      	ldr	r2, [pc, #340]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b94:	f7fe f882 	bl	8000c9c <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9a:	e008      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9c:	f7fe f87e 	bl	8000c9c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e092      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bba:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d02e      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d027      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bd8:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002be8:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bee:	4a3c      	ldr	r2, [pc, #240]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d014      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe f84d 	bl	8000c9c <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fe f849 	bl	8000c9c <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e05b      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1c:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ee      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	492a      	ldr	r1, [pc, #168]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c40:	4b27      	ldr	r3, [pc, #156]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01f      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c68:	d00d      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c72:	d008      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002c7e:	21b9      	movs	r1, #185	; 0xb9
 8002c80:	4816      	ldr	r0, [pc, #88]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002c82:	f7fd fcdb 	bl	800063c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c86:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	4913      	ldr	r1, [pc, #76]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d016      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cac:	d008      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cb6:	f240 1115 	movw	r1, #277	; 0x115
 8002cba:	4808      	ldr	r0, [pc, #32]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002cbc:	f7fd fcbe 	bl	800063c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4904      	ldr	r1, [pc, #16]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	08004924 	.word	0x08004924
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	42420440 	.word	0x42420440

08002cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e0fd      	b.n	8002efa <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a80      	ldr	r2, [pc, #512]	; (8002f04 <HAL_SPI_Init+0x218>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_SPI_Init+0x30>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a7e      	ldr	r2, [pc, #504]	; (8002f08 <HAL_SPI_Init+0x21c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_SPI_Init+0x30>
 8002d12:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002d16:	487d      	ldr	r0, [pc, #500]	; (8002f0c <HAL_SPI_Init+0x220>)
 8002d18:	f7fd fc90 	bl	800063c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d009      	beq.n	8002d38 <HAL_SPI_Init+0x4c>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2c:	d004      	beq.n	8002d38 <HAL_SPI_Init+0x4c>
 8002d2e:	f240 1159 	movw	r1, #345	; 0x159
 8002d32:	4876      	ldr	r0, [pc, #472]	; (8002f0c <HAL_SPI_Init+0x220>)
 8002d34:	f7fd fc82 	bl	800063c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <HAL_SPI_Init+0x72>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d48:	d009      	beq.n	8002d5e <HAL_SPI_Init+0x72>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d52:	d004      	beq.n	8002d5e <HAL_SPI_Init+0x72>
 8002d54:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8002d58:	486c      	ldr	r0, [pc, #432]	; (8002f0c <HAL_SPI_Init+0x220>)
 8002d5a:	f7fd fc6f 	bl	800063c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d66:	d008      	beq.n	8002d7a <HAL_SPI_Init+0x8e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d004      	beq.n	8002d7a <HAL_SPI_Init+0x8e>
 8002d70:	f240 115b 	movw	r1, #347	; 0x15b
 8002d74:	4865      	ldr	r0, [pc, #404]	; (8002f0c <HAL_SPI_Init+0x220>)
 8002d76:	f7fd fc61 	bl	800063c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d82:	d00d      	beq.n	8002da0 <HAL_SPI_Init+0xb4>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d009      	beq.n	8002da0 <HAL_SPI_Init+0xb4>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d94:	d004      	beq.n	8002da0 <HAL_SPI_Init+0xb4>
 8002d96:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002d9a:	485c      	ldr	r0, [pc, #368]	; (8002f0c <HAL_SPI_Init+0x220>)
 8002d9c:	f7fd fc4e 	bl	800063c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d020      	beq.n	8002dea <HAL_SPI_Init+0xfe>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d01c      	beq.n	8002dea <HAL_SPI_Init+0xfe>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d018      	beq.n	8002dea <HAL_SPI_Init+0xfe>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2b18      	cmp	r3, #24
 8002dbe:	d014      	beq.n	8002dea <HAL_SPI_Init+0xfe>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d010      	beq.n	8002dea <HAL_SPI_Init+0xfe>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	2b28      	cmp	r3, #40	; 0x28
 8002dce:	d00c      	beq.n	8002dea <HAL_SPI_Init+0xfe>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b30      	cmp	r3, #48	; 0x30
 8002dd6:	d008      	beq.n	8002dea <HAL_SPI_Init+0xfe>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	2b38      	cmp	r3, #56	; 0x38
 8002dde:	d004      	beq.n	8002dea <HAL_SPI_Init+0xfe>
 8002de0:	f240 115d 	movw	r1, #349	; 0x15d
 8002de4:	4849      	ldr	r0, [pc, #292]	; (8002f0c <HAL_SPI_Init+0x220>)
 8002de6:	f7fd fc29 	bl	800063c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_SPI_Init+0x118>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d004      	beq.n	8002e04 <HAL_SPI_Init+0x118>
 8002dfa:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002dfe:	4843      	ldr	r0, [pc, #268]	; (8002f0c <HAL_SPI_Init+0x220>)
 8002e00:	f7fd fc1c 	bl	800063c <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d004      	beq.n	8002e16 <HAL_SPI_Init+0x12a>
 8002e0c:	f240 1161 	movw	r1, #353	; 0x161
 8002e10:	483e      	ldr	r0, [pc, #248]	; (8002f0c <HAL_SPI_Init+0x220>)
 8002e12:	f7fd fc13 	bl	800063c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d119      	bne.n	8002e52 <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_SPI_Init+0x14c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d004      	beq.n	8002e38 <HAL_SPI_Init+0x14c>
 8002e2e:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8002e32:	4836      	ldr	r0, [pc, #216]	; (8002f0c <HAL_SPI_Init+0x220>)
 8002e34:	f7fd fc02 	bl	800063c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_SPI_Init+0x166>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d004      	beq.n	8002e52 <HAL_SPI_Init+0x166>
 8002e48:	f240 1165 	movw	r1, #357	; 0x165
 8002e4c:	482f      	ldr	r0, [pc, #188]	; (8002f0c <HAL_SPI_Init+0x220>)
 8002e4e:	f7fd fbf5 	bl	800063c <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7fd fc65 	bl	800073c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	ea42 0103 	orr.w	r1, r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	0c1a      	lsrs	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f002 0204 	and.w	r2, r2, #4
 8002ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40013000 	.word	0x40013000
 8002f08:	40003800 	.word	0x40003800
 8002f0c:	08004974 	.word	0x08004974

08002f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e06f      	b.n	8003002 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a39      	ldr	r2, [pc, #228]	; (800300c <HAL_TIM_Base_Init+0xfc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <HAL_TIM_Base_Init+0x44>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d00e      	beq.n	8002f54 <HAL_TIM_Base_Init+0x44>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a35      	ldr	r2, [pc, #212]	; (8003010 <HAL_TIM_Base_Init+0x100>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d009      	beq.n	8002f54 <HAL_TIM_Base_Init+0x44>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a33      	ldr	r2, [pc, #204]	; (8003014 <HAL_TIM_Base_Init+0x104>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <HAL_TIM_Base_Init+0x44>
 8002f4a:	f44f 7189 	mov.w	r1, #274	; 0x112
 8002f4e:	4832      	ldr	r0, [pc, #200]	; (8003018 <HAL_TIM_Base_Init+0x108>)
 8002f50:	f7fd fb74 	bl	800063c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d014      	beq.n	8002f86 <HAL_TIM_Base_Init+0x76>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d010      	beq.n	8002f86 <HAL_TIM_Base_Init+0x76>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d00c      	beq.n	8002f86 <HAL_TIM_Base_Init+0x76>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d008      	beq.n	8002f86 <HAL_TIM_Base_Init+0x76>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b60      	cmp	r3, #96	; 0x60
 8002f7a:	d004      	beq.n	8002f86 <HAL_TIM_Base_Init+0x76>
 8002f7c:	f240 1113 	movw	r1, #275	; 0x113
 8002f80:	4825      	ldr	r0, [pc, #148]	; (8003018 <HAL_TIM_Base_Init+0x108>)
 8002f82:	f7fd fb5b 	bl	800063c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00e      	beq.n	8002fac <HAL_TIM_Base_Init+0x9c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f96:	d009      	beq.n	8002fac <HAL_TIM_Base_Init+0x9c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa0:	d004      	beq.n	8002fac <HAL_TIM_Base_Init+0x9c>
 8002fa2:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002fa6:	481c      	ldr	r0, [pc, #112]	; (8003018 <HAL_TIM_Base_Init+0x108>)
 8002fa8:	f7fd fb48 	bl	800063c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_TIM_Base_Init+0xb6>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b80      	cmp	r3, #128	; 0x80
 8002fba:	d004      	beq.n	8002fc6 <HAL_TIM_Base_Init+0xb6>
 8002fbc:	f240 1115 	movw	r1, #277	; 0x115
 8002fc0:	4815      	ldr	r0, [pc, #84]	; (8003018 <HAL_TIM_Base_Init+0x108>)
 8002fc2:	f7fd fb3b 	bl	800063c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd fd38 	bl	8000a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f000 f8b4 	bl	8003160 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800
 8003018:	080049ac 	.word	0x080049ac

0800301c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a49      	ldr	r2, [pc, #292]	; (8003150 <HAL_TIM_SlaveConfigSynchro+0x134>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003038:	d00e      	beq.n	8003058 <HAL_TIM_SlaveConfigSynchro+0x3c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a45      	ldr	r2, [pc, #276]	; (8003154 <HAL_TIM_SlaveConfigSynchro+0x138>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a43      	ldr	r2, [pc, #268]	; (8003158 <HAL_TIM_SlaveConfigSynchro+0x13c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_TIM_SlaveConfigSynchro+0x3c>
 800304e:	f241 213b 	movw	r1, #4667	; 0x123b
 8003052:	4842      	ldr	r0, [pc, #264]	; (800315c <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003054:	f7fd faf2 	bl	800063c <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d014      	beq.n	800308a <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b04      	cmp	r3, #4
 8003066:	d010      	beq.n	800308a <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d00c      	beq.n	800308a <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b06      	cmp	r3, #6
 8003076:	d008      	beq.n	800308a <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b07      	cmp	r3, #7
 800307e:	d004      	beq.n	800308a <HAL_TIM_SlaveConfigSynchro+0x6e>
 8003080:	f241 213c 	movw	r1, #4668	; 0x123c
 8003084:	4835      	ldr	r0, [pc, #212]	; (800315c <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003086:	f7fd fad9 	bl	800063c <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d020      	beq.n	80030d4 <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b10      	cmp	r3, #16
 8003098:	d01c      	beq.n	80030d4 <HAL_TIM_SlaveConfigSynchro+0xb8>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d018      	beq.n	80030d4 <HAL_TIM_SlaveConfigSynchro+0xb8>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b30      	cmp	r3, #48	; 0x30
 80030a8:	d014      	beq.n	80030d4 <HAL_TIM_SlaveConfigSynchro+0xb8>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	d010      	beq.n	80030d4 <HAL_TIM_SlaveConfigSynchro+0xb8>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b50      	cmp	r3, #80	; 0x50
 80030b8:	d00c      	beq.n	80030d4 <HAL_TIM_SlaveConfigSynchro+0xb8>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b60      	cmp	r3, #96	; 0x60
 80030c0:	d008      	beq.n	80030d4 <HAL_TIM_SlaveConfigSynchro+0xb8>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b70      	cmp	r3, #112	; 0x70
 80030c8:	d004      	beq.n	80030d4 <HAL_TIM_SlaveConfigSynchro+0xb8>
 80030ca:	f241 213d 	movw	r1, #4669	; 0x123d
 80030ce:	4823      	ldr	r0, [pc, #140]	; (800315c <HAL_TIM_SlaveConfigSynchro+0x140>)
 80030d0:	f7fd fab4 	bl	800063c <assert_failed>

  __HAL_LOCK(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_TIM_SlaveConfigSynchro+0xc6>
 80030de:	2302      	movs	r3, #2
 80030e0:	e031      	b.n	8003146 <HAL_TIM_SlaveConfigSynchro+0x12a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80030f2:	6839      	ldr	r1, [r7, #0]
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f895 	bl	8003224 <TIM_SlaveTimer_SetConfig>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <HAL_TIM_SlaveConfigSynchro+0xf8>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e018      	b.n	8003146 <HAL_TIM_SlaveConfigSynchro+0x12a>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003122:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003132:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	080049ac 	.word	0x080049ac

08003160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a29      	ldr	r2, [pc, #164]	; (8003218 <TIM_Base_SetConfig+0xb8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00b      	beq.n	8003190 <TIM_Base_SetConfig+0x30>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317e:	d007      	beq.n	8003190 <TIM_Base_SetConfig+0x30>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a26      	ldr	r2, [pc, #152]	; (800321c <TIM_Base_SetConfig+0xbc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_Base_SetConfig+0x30>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a25      	ldr	r2, [pc, #148]	; (8003220 <TIM_Base_SetConfig+0xc0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d108      	bne.n	80031a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <TIM_Base_SetConfig+0xb8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b0:	d007      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a19      	ldr	r2, [pc, #100]	; (800321c <TIM_Base_SetConfig+0xbc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d003      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a18      	ldr	r2, [pc, #96]	; (8003220 <TIM_Base_SetConfig+0xc0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d108      	bne.n	80031d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a07      	ldr	r2, [pc, #28]	; (8003218 <TIM_Base_SetConfig+0xb8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d103      	bne.n	8003208 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	615a      	str	r2, [r3, #20]
}
 800320e:	bf00      	nop
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	40012c00 	.word	0x40012c00
 800321c:	40000400 	.word	0x40000400
 8003220:	40000800 	.word	0x40000800

08003224 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f023 0307 	bic.w	r3, r3, #7
 800324e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	f000 8158 	beq.w	800351c <TIM_SlaveTimer_SetConfig+0x2f8>
 800326c:	2b30      	cmp	r3, #48	; 0x30
 800326e:	d809      	bhi.n	8003284 <TIM_SlaveTimer_SetConfig+0x60>
 8003270:	2b10      	cmp	r3, #16
 8003272:	f000 8153 	beq.w	800351c <TIM_SlaveTimer_SetConfig+0x2f8>
 8003276:	2b20      	cmp	r3, #32
 8003278:	f000 8150 	beq.w	800351c <TIM_SlaveTimer_SetConfig+0x2f8>
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 814d 	beq.w	800351c <TIM_SlaveTimer_SetConfig+0x2f8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003282:	e165      	b.n	8003550 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 8003284:	2b50      	cmp	r3, #80	; 0x50
 8003286:	f000 80b5 	beq.w	80033f4 <TIM_SlaveTimer_SetConfig+0x1d0>
 800328a:	2b50      	cmp	r3, #80	; 0x50
 800328c:	d802      	bhi.n	8003294 <TIM_SlaveTimer_SetConfig+0x70>
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d065      	beq.n	800335e <TIM_SlaveTimer_SetConfig+0x13a>
      break;
 8003292:	e15d      	b.n	8003550 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 8003294:	2b60      	cmp	r3, #96	; 0x60
 8003296:	f000 80f3 	beq.w	8003480 <TIM_SlaveTimer_SetConfig+0x25c>
 800329a:	2b70      	cmp	r3, #112	; 0x70
 800329c:	d000      	beq.n	80032a0 <TIM_SlaveTimer_SetConfig+0x7c>
      break;
 800329e:	e157      	b.n	8003550 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a99      	ldr	r2, [pc, #612]	; (800350c <TIM_SlaveTimer_SetConfig+0x2e8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <TIM_SlaveTimer_SetConfig+0xae>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d00e      	beq.n	80032d2 <TIM_SlaveTimer_SetConfig+0xae>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a95      	ldr	r2, [pc, #596]	; (8003510 <TIM_SlaveTimer_SetConfig+0x2ec>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <TIM_SlaveTimer_SetConfig+0xae>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a94      	ldr	r2, [pc, #592]	; (8003514 <TIM_SlaveTimer_SetConfig+0x2f0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <TIM_SlaveTimer_SetConfig+0xae>
 80032c8:	f641 011c 	movw	r1, #6172	; 0x181c
 80032cc:	4892      	ldr	r0, [pc, #584]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80032ce:	f7fd f9b5 	bl	800063c <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d013      	beq.n	8003302 <TIM_SlaveTimer_SetConfig+0xde>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d00e      	beq.n	8003302 <TIM_SlaveTimer_SetConfig+0xde>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ec:	d009      	beq.n	8003302 <TIM_SlaveTimer_SetConfig+0xde>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032f6:	d004      	beq.n	8003302 <TIM_SlaveTimer_SetConfig+0xde>
 80032f8:	f641 011d 	movw	r1, #6173	; 0x181d
 80032fc:	4886      	ldr	r0, [pc, #536]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80032fe:	f7fd f99d 	bl	800063c <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330a:	d014      	beq.n	8003336 <TIM_SlaveTimer_SetConfig+0x112>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d010      	beq.n	8003336 <TIM_SlaveTimer_SetConfig+0x112>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00c      	beq.n	8003336 <TIM_SlaveTimer_SetConfig+0x112>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d008      	beq.n	8003336 <TIM_SlaveTimer_SetConfig+0x112>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b0a      	cmp	r3, #10
 800332a:	d004      	beq.n	8003336 <TIM_SlaveTimer_SetConfig+0x112>
 800332c:	f641 011e 	movw	r1, #6174	; 0x181e
 8003330:	4879      	ldr	r0, [pc, #484]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003332:	f7fd f983 	bl	800063c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b0f      	cmp	r3, #15
 800333c:	d904      	bls.n	8003348 <TIM_SlaveTimer_SetConfig+0x124>
 800333e:	f641 011f 	movw	r1, #6175	; 0x181f
 8003342:	4875      	ldr	r0, [pc, #468]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003344:	f7fd f97a 	bl	800063c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68d9      	ldr	r1, [r3, #12]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f000 f965 	bl	8003626 <TIM_ETR_SetConfig>
      break;
 800335c:	e0f8      	b.n	8003550 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a6a      	ldr	r2, [pc, #424]	; (800350c <TIM_SlaveTimer_SetConfig+0x2e8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d013      	beq.n	8003390 <TIM_SlaveTimer_SetConfig+0x16c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003370:	d00e      	beq.n	8003390 <TIM_SlaveTimer_SetConfig+0x16c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a66      	ldr	r2, [pc, #408]	; (8003510 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d009      	beq.n	8003390 <TIM_SlaveTimer_SetConfig+0x16c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a64      	ldr	r2, [pc, #400]	; (8003514 <TIM_SlaveTimer_SetConfig+0x2f0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d004      	beq.n	8003390 <TIM_SlaveTimer_SetConfig+0x16c>
 8003386:	f641 012b 	movw	r1, #6187	; 0x182b
 800338a:	4863      	ldr	r0, [pc, #396]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800338c:	f7fd f956 	bl	800063c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b0f      	cmp	r3, #15
 8003396:	d904      	bls.n	80033a2 <TIM_SlaveTimer_SetConfig+0x17e>
 8003398:	f641 012c 	movw	r1, #6188	; 0x182c
 800339c:	485e      	ldr	r0, [pc, #376]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800339e:	f7fd f94d 	bl	800063c <assert_failed>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d101      	bne.n	80033ae <TIM_SlaveTimer_SetConfig+0x18a>
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0d1      	b.n	8003552 <TIM_SlaveTimer_SetConfig+0x32e>
      tmpccer = htim->Instance->CCER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	621a      	str	r2, [r3, #32]
      break;
 80033f2:	e0ad      	b.n	8003550 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a44      	ldr	r2, [pc, #272]	; (800350c <TIM_SlaveTimer_SetConfig+0x2e8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <TIM_SlaveTimer_SetConfig+0x202>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003406:	d00e      	beq.n	8003426 <TIM_SlaveTimer_SetConfig+0x202>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a40      	ldr	r2, [pc, #256]	; (8003510 <TIM_SlaveTimer_SetConfig+0x2ec>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d009      	beq.n	8003426 <TIM_SlaveTimer_SetConfig+0x202>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a3f      	ldr	r2, [pc, #252]	; (8003514 <TIM_SlaveTimer_SetConfig+0x2f0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d004      	beq.n	8003426 <TIM_SlaveTimer_SetConfig+0x202>
 800341c:	f641 0145 	movw	r1, #6213	; 0x1845
 8003420:	483d      	ldr	r0, [pc, #244]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003422:	f7fd f90b 	bl	800063c <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342e:	d014      	beq.n	800345a <TIM_SlaveTimer_SetConfig+0x236>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d010      	beq.n	800345a <TIM_SlaveTimer_SetConfig+0x236>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00c      	beq.n	800345a <TIM_SlaveTimer_SetConfig+0x236>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d008      	beq.n	800345a <TIM_SlaveTimer_SetConfig+0x236>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b0a      	cmp	r3, #10
 800344e:	d004      	beq.n	800345a <TIM_SlaveTimer_SetConfig+0x236>
 8003450:	f641 0146 	movw	r1, #6214	; 0x1846
 8003454:	4830      	ldr	r0, [pc, #192]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003456:	f7fd f8f1 	bl	800063c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b0f      	cmp	r3, #15
 8003460:	d904      	bls.n	800346c <TIM_SlaveTimer_SetConfig+0x248>
 8003462:	f641 0147 	movw	r1, #6215	; 0x1847
 8003466:	482c      	ldr	r0, [pc, #176]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003468:	f7fd f8e8 	bl	800063c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6899      	ldr	r1, [r3, #8]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	461a      	mov	r2, r3
 800347a:	f000 f877 	bl	800356c <TIM_TI1_ConfigInputStage>
      break;
 800347e:	e067      	b.n	8003550 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a21      	ldr	r2, [pc, #132]	; (800350c <TIM_SlaveTimer_SetConfig+0x2e8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <TIM_SlaveTimer_SetConfig+0x28e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003492:	d00e      	beq.n	80034b2 <TIM_SlaveTimer_SetConfig+0x28e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <TIM_SlaveTimer_SetConfig+0x2ec>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d009      	beq.n	80034b2 <TIM_SlaveTimer_SetConfig+0x28e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <TIM_SlaveTimer_SetConfig+0x2f0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d004      	beq.n	80034b2 <TIM_SlaveTimer_SetConfig+0x28e>
 80034a8:	f641 0153 	movw	r1, #6227	; 0x1853
 80034ac:	481a      	ldr	r0, [pc, #104]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80034ae:	f7fd f8c5 	bl	800063c <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ba:	d014      	beq.n	80034e6 <TIM_SlaveTimer_SetConfig+0x2c2>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <TIM_SlaveTimer_SetConfig+0x2c2>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00c      	beq.n	80034e6 <TIM_SlaveTimer_SetConfig+0x2c2>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d008      	beq.n	80034e6 <TIM_SlaveTimer_SetConfig+0x2c2>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b0a      	cmp	r3, #10
 80034da:	d004      	beq.n	80034e6 <TIM_SlaveTimer_SetConfig+0x2c2>
 80034dc:	f641 0154 	movw	r1, #6228	; 0x1854
 80034e0:	480d      	ldr	r0, [pc, #52]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80034e2:	f7fd f8ab 	bl	800063c <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	d904      	bls.n	80034f8 <TIM_SlaveTimer_SetConfig+0x2d4>
 80034ee:	f641 0155 	movw	r1, #6229	; 0x1855
 80034f2:	4809      	ldr	r0, [pc, #36]	; (8003518 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80034f4:	f7fd f8a2 	bl	800063c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	461a      	mov	r2, r3
 8003506:	f000 f85f 	bl	80035c8 <TIM_TI2_ConfigInputStage>
      break;
 800350a:	e021      	b.n	8003550 <TIM_SlaveTimer_SetConfig+0x32c>
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	080049ac 	.word	0x080049ac
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0e      	ldr	r2, [pc, #56]	; (800355c <TIM_SlaveTimer_SetConfig+0x338>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <TIM_SlaveTimer_SetConfig+0x32a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352e:	d00e      	beq.n	800354e <TIM_SlaveTimer_SetConfig+0x32a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <TIM_SlaveTimer_SetConfig+0x33c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <TIM_SlaveTimer_SetConfig+0x32a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <TIM_SlaveTimer_SetConfig+0x340>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <TIM_SlaveTimer_SetConfig+0x32a>
 8003544:	f641 0164 	movw	r1, #6244	; 0x1864
 8003548:	4807      	ldr	r0, [pc, #28]	; (8003568 <TIM_SlaveTimer_SetConfig+0x344>)
 800354a:	f7fd f877 	bl	800063c <assert_failed>
      break;
 800354e:	bf00      	nop
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	080049ac 	.word	0x080049ac

0800356c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f023 0201 	bic.w	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 030a 	bic.w	r3, r3, #10
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f023 0210 	bic.w	r2, r3, #16
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	031b      	lsls	r3, r3, #12
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003604:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	621a      	str	r2, [r3, #32]
}
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003626:	b480      	push	{r7}
 8003628:	b087      	sub	sp, #28
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003640:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	021a      	lsls	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	431a      	orrs	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4313      	orrs	r3, r2
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	609a      	str	r2, [r3, #8]
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a43      	ldr	r2, [pc, #268]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003680:	d00e      	beq.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a3f      	ldr	r2, [pc, #252]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d009      	beq.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a3d      	ldr	r2, [pc, #244]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003696:	f240 6164 	movw	r1, #1636	; 0x664
 800369a:	483c      	ldr	r0, [pc, #240]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800369c:	f7fc ffce 	bl	800063c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d020      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d01c      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d018      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b30      	cmp	r3, #48	; 0x30
 80036be:	d014      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d010      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b50      	cmp	r3, #80	; 0x50
 80036ce:	d00c      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b60      	cmp	r3, #96	; 0x60
 80036d6:	d008      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b70      	cmp	r3, #112	; 0x70
 80036de:	d004      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80036e0:	f240 6165 	movw	r1, #1637	; 0x665
 80036e4:	4829      	ldr	r0, [pc, #164]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80036e6:	f7fc ffa9 	bl	800063c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b80      	cmp	r3, #128	; 0x80
 80036f0:	d008      	beq.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80036fa:	f240 6166 	movw	r1, #1638	; 0x666
 80036fe:	4823      	ldr	r0, [pc, #140]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003700:	f7fc ff9c 	bl	800063c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800370e:	2302      	movs	r3, #2
 8003710:	e032      	b.n	8003778 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003738:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800374a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	4313      	orrs	r3, r2
 8003754:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	080049e4 	.word	0x080049e4

08003790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e092      	b.n	80038c8 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d02c      	beq.n	8003804 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a48      	ldr	r2, [pc, #288]	; (80038d0 <HAL_UART_Init+0x140>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_UART_Init+0x42>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a46      	ldr	r2, [pc, #280]	; (80038d4 <HAL_UART_Init+0x144>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_UART_Init+0x42>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a45      	ldr	r2, [pc, #276]	; (80038d8 <HAL_UART_Init+0x148>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_UART_Init+0x42>
 80037c8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80037cc:	4843      	ldr	r0, [pc, #268]	; (80038dc <HAL_UART_Init+0x14c>)
 80037ce:	f7fc ff35 	bl	800063c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d028      	beq.n	800382c <HAL_UART_Init+0x9c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e2:	d023      	beq.n	800382c <HAL_UART_Init+0x9c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ec:	d01e      	beq.n	800382c <HAL_UART_Init+0x9c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f6:	d019      	beq.n	800382c <HAL_UART_Init+0x9c>
 80037f8:	f240 1147 	movw	r1, #327	; 0x147
 80037fc:	4837      	ldr	r0, [pc, #220]	; (80038dc <HAL_UART_Init+0x14c>)
 80037fe:	f7fc ff1d 	bl	800063c <assert_failed>
 8003802:	e013      	b.n	800382c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a31      	ldr	r2, [pc, #196]	; (80038d0 <HAL_UART_Init+0x140>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00e      	beq.n	800382c <HAL_UART_Init+0x9c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a30      	ldr	r2, [pc, #192]	; (80038d4 <HAL_UART_Init+0x144>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_UART_Init+0x9c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2e      	ldr	r2, [pc, #184]	; (80038d8 <HAL_UART_Init+0x148>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_UART_Init+0x9c>
 8003822:	f240 114b 	movw	r1, #331	; 0x14b
 8003826:	482d      	ldr	r0, [pc, #180]	; (80038dc <HAL_UART_Init+0x14c>)
 8003828:	f7fc ff08 	bl	800063c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d009      	beq.n	8003848 <HAL_UART_Init+0xb8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383c:	d004      	beq.n	8003848 <HAL_UART_Init+0xb8>
 800383e:	f240 114d 	movw	r1, #333	; 0x14d
 8003842:	4826      	ldr	r0, [pc, #152]	; (80038dc <HAL_UART_Init+0x14c>)
 8003844:	f7fc fefa 	bl	800063c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fd f93d 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2224      	movs	r2, #36	; 0x24
 8003866:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003878:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fb4a 	bl	8003f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800388e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800389e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40013800 	.word	0x40013800
 80038d4:	40004400 	.word	0x40004400
 80038d8:	40004800 	.word	0x40004800
 80038dc:	08004a20 	.word	0x08004a20

080038e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	f040 8083 	bne.w	8003a08 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_UART_Transmit+0x2e>
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e07b      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_UART_Transmit+0x40>
 800391c:	2302      	movs	r3, #2
 800391e:	e074      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2221      	movs	r2, #33	; 0x21
 8003932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003936:	f7fd f9b1 	bl	8000c9c <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003948:	e042      	b.n	80039d0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d122      	bne.n	80039a8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2200      	movs	r2, #0
 800396a:	2180      	movs	r1, #128	; 0x80
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f968 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e046      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	3302      	adds	r3, #2
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	e017      	b.n	80039d0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	e013      	b.n	80039d0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2180      	movs	r1, #128	; 0x80
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f945 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e023      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	60ba      	str	r2, [r7, #8]
 80039c8:	781a      	ldrb	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1b7      	bne.n	800394a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2140      	movs	r1, #64	; 0x40
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f92c 	bl	8003c42 <UART_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e00a      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10d      	bne.n	8003a66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_UART_IRQHandler+0x52>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f9d7 	bl	8003e12 <UART_Receive_IT>
      return;
 8003a64:	e0cc      	b.n	8003c00 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80ab 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x1b0>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <HAL_UART_IRQHandler+0x70>
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80a0 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x90>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	f043 0201 	orr.w	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_UART_IRQHandler+0xb0>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abc:	f043 0202 	orr.w	r2, r3, #2
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_UART_IRQHandler+0xd0>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	f043 0204 	orr.w	r2, r3, #4
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_UART_IRQHandler+0xf0>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	f043 0208 	orr.w	r2, r3, #8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d078      	beq.n	8003bfe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_UART_IRQHandler+0x112>
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f976 	bl	8003e12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d102      	bne.n	8003b4e <HAL_UART_IRQHandler+0x13a>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d031      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8c1 	bl	8003cd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d023      	beq.n	8003baa <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d013      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	4a22      	ldr	r2, [pc, #136]	; (8003c08 <HAL_UART_IRQHandler+0x1f4>)
 8003b80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fd fd58 	bl	800163c <HAL_DMA_Abort_IT>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba0:	e00e      	b.n	8003bc0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f844 	bl	8003c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	e00a      	b.n	8003bc0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f840 	bl	8003c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	e006      	b.n	8003bc0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f83c 	bl	8003c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003bbe:	e01e      	b.n	8003bfe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	bf00      	nop
    return;
 8003bc2:	e01c      	b.n	8003bfe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_UART_IRQHandler+0x1cc>
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f8ad 	bl	8003d38 <UART_Transmit_IT>
    return;
 8003bde:	e00f      	b.n	8003c00 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_UART_IRQHandler+0x1ec>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f8f4 	bl	8003de2 <UART_EndTransmit_IT>
    return;
 8003bfa:	bf00      	nop
 8003bfc:	e000      	b.n	8003c00 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003bfe:	bf00      	nop
  }
}
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	08003d11 	.word	0x08003d11

08003c0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c52:	e02c      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d028      	beq.n	8003cae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c62:	f7fd f81b 	bl	8000c9c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d21d      	bcs.n	8003cae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c80:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0201 	bic.w	r2, r2, #1
 8003c90:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e00f      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2301      	moveq	r3, #1
 8003cc0:	2300      	movne	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d0c3      	beq.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f7ff ff80 	bl	8003c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b21      	cmp	r3, #33	; 0x21
 8003d4a:	d144      	bne.n	8003dd6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d54:	d11a      	bne.n	8003d8c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	1c9a      	adds	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	621a      	str	r2, [r3, #32]
 8003d7e:	e00e      	b.n	8003d9e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	621a      	str	r2, [r3, #32]
 8003d8a:	e008      	b.n	8003d9e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	1c59      	adds	r1, r3, #1
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6211      	str	r1, [r2, #32]
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4619      	mov	r1, r3
 8003dac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e000      	b.n	8003dd8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
  }
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr

08003de2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff ff02 	bl	8003c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b22      	cmp	r3, #34	; 0x22
 8003e24:	d171      	bne.n	8003f0a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d123      	bne.n	8003e78 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10e      	bne.n	8003e5c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	1c9a      	adds	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
 8003e5a:	e029      	b.n	8003eb0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	629a      	str	r2, [r3, #40]	; 0x28
 8003e76:	e01b      	b.n	8003eb0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6858      	ldr	r0, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	1c59      	adds	r1, r3, #1
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6291      	str	r1, [r2, #40]	; 0x28
 8003e90:	b2c2      	uxtb	r2, r0
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e00c      	b.n	8003eb0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	1c58      	adds	r0, r3, #1
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	6288      	str	r0, [r1, #40]	; 0x28
 8003ea8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d120      	bne.n	8003f06 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0220 	bic.w	r2, r2, #32
 8003ed2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ee2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff fe8e 	bl	8003c1e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e002      	b.n	8003f0c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e000      	b.n	8003f0c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
  }
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a84      	ldr	r2, [pc, #528]	; (8004134 <UART_SetConfig+0x220>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d904      	bls.n	8003f30 <UART_SetConfig+0x1c>
 8003f26:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8003f2a:	4883      	ldr	r0, [pc, #524]	; (8004138 <UART_SetConfig+0x224>)
 8003f2c:	f7fc fb86 	bl	800063c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <UART_SetConfig+0x38>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f40:	d004      	beq.n	8003f4c <UART_SetConfig+0x38>
 8003f42:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8003f46:	487c      	ldr	r0, [pc, #496]	; (8004138 <UART_SetConfig+0x224>)
 8003f48:	f7fc fb78 	bl	800063c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <UART_SetConfig+0x5e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5c:	d009      	beq.n	8003f72 <UART_SetConfig+0x5e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f66:	d004      	beq.n	8003f72 <UART_SetConfig+0x5e>
 8003f68:	f640 31ff 	movw	r1, #3071	; 0xbff
 8003f6c:	4872      	ldr	r0, [pc, #456]	; (8004138 <UART_SetConfig+0x224>)
 8003f6e:	f7fc fb65 	bl	800063c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <UART_SetConfig+0x74>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <UART_SetConfig+0x7e>
 8003f88:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003f8c:	486a      	ldr	r0, [pc, #424]	; (8004138 <UART_SetConfig+0x224>)
 8003f8e:	f7fc fb55 	bl	800063c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fc4:	f023 030c 	bic.w	r3, r3, #12
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	68f9      	ldr	r1, [r7, #12]
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699a      	ldr	r2, [r3, #24]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a53      	ldr	r2, [pc, #332]	; (800413c <UART_SetConfig+0x228>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d14e      	bne.n	8004090 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ff2:	f7fe fd3f 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 8003ff6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009a      	lsls	r2, r3, #2
 8004002:	441a      	add	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	fbb2 f3f3 	udiv	r3, r2, r3
 800400e:	4a4c      	ldr	r2, [pc, #304]	; (8004140 <UART_SetConfig+0x22c>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	0119      	lsls	r1, r3, #4
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	009a      	lsls	r2, r3, #2
 8004022:	441a      	add	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	fbb2 f2f3 	udiv	r2, r2, r3
 800402e:	4b44      	ldr	r3, [pc, #272]	; (8004140 <UART_SetConfig+0x22c>)
 8004030:	fba3 0302 	umull	r0, r3, r3, r2
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	2064      	movs	r0, #100	; 0x64
 8004038:	fb00 f303 	mul.w	r3, r0, r3
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	3332      	adds	r3, #50	; 0x32
 8004042:	4a3f      	ldr	r2, [pc, #252]	; (8004140 <UART_SetConfig+0x22c>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800404e:	4419      	add	r1, r3
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	009a      	lsls	r2, r3, #2
 800405a:	441a      	add	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	fbb2 f2f3 	udiv	r2, r2, r3
 8004066:	4b36      	ldr	r3, [pc, #216]	; (8004140 <UART_SetConfig+0x22c>)
 8004068:	fba3 0302 	umull	r0, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	2064      	movs	r0, #100	; 0x64
 8004070:	fb00 f303 	mul.w	r3, r0, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	3332      	adds	r3, #50	; 0x32
 800407a:	4a31      	ldr	r2, [pc, #196]	; (8004140 <UART_SetConfig+0x22c>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	f003 020f 	and.w	r2, r3, #15
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	440a      	add	r2, r1
 800408c:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800408e:	e04d      	b.n	800412c <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fe fcdc 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8004094:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009a      	lsls	r2, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	4a24      	ldr	r2, [pc, #144]	; (8004140 <UART_SetConfig+0x22c>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	0119      	lsls	r1, r3, #4
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009a      	lsls	r2, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040cc:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <UART_SetConfig+0x22c>)
 80040ce:	fba3 0302 	umull	r0, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2064      	movs	r0, #100	; 0x64
 80040d6:	fb00 f303 	mul.w	r3, r0, r3
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	3332      	adds	r3, #50	; 0x32
 80040e0:	4a17      	ldr	r2, [pc, #92]	; (8004140 <UART_SetConfig+0x22c>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ec:	4419      	add	r1, r3
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009a      	lsls	r2, r3, #2
 80040f8:	441a      	add	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	fbb2 f2f3 	udiv	r2, r2, r3
 8004104:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <UART_SetConfig+0x22c>)
 8004106:	fba3 0302 	umull	r0, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2064      	movs	r0, #100	; 0x64
 800410e:	fb00 f303 	mul.w	r3, r0, r3
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	3332      	adds	r3, #50	; 0x32
 8004118:	4a09      	ldr	r2, [pc, #36]	; (8004140 <UART_SetConfig+0x22c>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	f003 020f 	and.w	r2, r3, #15
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	440a      	add	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	0044aa20 	.word	0x0044aa20
 8004138:	08004a20 	.word	0x08004a20
 800413c:	40013800 	.word	0x40013800
 8004140:	51eb851f 	.word	0x51eb851f

08004144 <_ZNSaIcEC1Ev>:
 8004144:	4770      	bx	lr

08004146 <_ZNSaIcED1Ev>:
 8004146:	4770      	bx	lr

08004148 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8004148:	b10a      	cbz	r2, 800414e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800414a:	f000 ba05 	b.w	8004558 <memcpy>
 800414e:	4770      	bx	lr

08004150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8004150:	b508      	push	{r3, lr}
 8004152:	680b      	ldr	r3, [r1, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	da02      	bge.n	800415e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8004158:	4809      	ldr	r0, [pc, #36]	; (8004180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800415a:	f000 f9b8 	bl	80044ce <_ZSt20__throw_length_errorPKc>
 800415e:	4293      	cmp	r3, r2
 8004160:	d908      	bls.n	8004174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8004162:	0052      	lsls	r2, r2, #1
 8004164:	4293      	cmp	r3, r2
 8004166:	d205      	bcs.n	8004174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8004168:	2a00      	cmp	r2, #0
 800416a:	bfb6      	itet	lt
 800416c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8004170:	600a      	strge	r2, [r1, #0]
 8004172:	600b      	strlt	r3, [r1, #0]
 8004174:	6808      	ldr	r0, [r1, #0]
 8004176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800417a:	3001      	adds	r0, #1
 800417c:	f000 b988 	b.w	8004490 <_Znwj>
 8004180:	08004ab7 	.word	0x08004ab7

08004184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8004184:	4603      	mov	r3, r0
 8004186:	f853 0b08 	ldr.w	r0, [r3], #8
 800418a:	4298      	cmp	r0, r3
 800418c:	d001      	beq.n	8004192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800418e:	f000 b999 	b.w	80044c4 <_ZdlPv>
 8004192:	4770      	bx	lr

08004194 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8004194:	b508      	push	{r3, lr}
 8004196:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800419a:	6840      	ldr	r0, [r0, #4]
 800419c:	3901      	subs	r1, #1
 800419e:	1a09      	subs	r1, r1, r0
 80041a0:	4291      	cmp	r1, r2
 80041a2:	d202      	bcs.n	80041aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f992 	bl	80044ce <_ZSt20__throw_length_errorPKc>
 80041aa:	bd08      	pop	{r3, pc}

080041ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80041ac:	6803      	ldr	r3, [r0, #0]
 80041ae:	428b      	cmp	r3, r1
 80041b0:	d806      	bhi.n	80041c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80041b2:	6840      	ldr	r0, [r0, #4]
 80041b4:	4418      	add	r0, r3
 80041b6:	4281      	cmp	r1, r0
 80041b8:	bf94      	ite	ls
 80041ba:	2000      	movls	r0, #0
 80041bc:	2001      	movhi	r0, #1
 80041be:	4770      	bx	lr
 80041c0:	2001      	movs	r0, #1
 80041c2:	4770      	bx	lr

080041c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80041c4:	2a01      	cmp	r2, #1
 80041c6:	b510      	push	{r4, lr}
 80041c8:	d102      	bne.n	80041d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80041ca:	780a      	ldrb	r2, [r1, #0]
 80041cc:	7002      	strb	r2, [r0, #0]
 80041ce:	bd10      	pop	{r4, pc}
 80041d0:	f7ff ffba 	bl	8004148 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80041d4:	e7fb      	b.n	80041ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080041d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80041d6:	2a01      	cmp	r2, #1
 80041d8:	b430      	push	{r4, r5}
 80041da:	d103      	bne.n	80041e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80041dc:	780b      	ldrb	r3, [r1, #0]
 80041de:	7003      	strb	r3, [r0, #0]
 80041e0:	bc30      	pop	{r4, r5}
 80041e2:	4770      	bx	lr
 80041e4:	2a00      	cmp	r2, #0
 80041e6:	d0fb      	beq.n	80041e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80041e8:	bc30      	pop	{r4, r5}
 80041ea:	f000 b9c0 	b.w	800456e <memmove>

080041ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80041ee:	b508      	push	{r3, lr}
 80041f0:	1a52      	subs	r2, r2, r1
 80041f2:	f7ff ffe7 	bl	80041c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80041f6:	bd08      	pop	{r3, pc}

080041f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80041f8:	4288      	cmp	r0, r1
 80041fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041fc:	4604      	mov	r4, r0
 80041fe:	460e      	mov	r6, r1
 8004200:	d020      	beq.n	8004244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8004202:	6802      	ldr	r2, [r0, #0]
 8004204:	f100 0308 	add.w	r3, r0, #8
 8004208:	429a      	cmp	r2, r3
 800420a:	bf08      	it	eq
 800420c:	220f      	moveq	r2, #15
 800420e:	684d      	ldr	r5, [r1, #4]
 8004210:	bf18      	it	ne
 8004212:	6882      	ldrne	r2, [r0, #8]
 8004214:	42aa      	cmp	r2, r5
 8004216:	d20b      	bcs.n	8004230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 8004218:	a902      	add	r1, sp, #8
 800421a:	f841 5d04 	str.w	r5, [r1, #-4]!
 800421e:	f7ff ff97 	bl	8004150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004222:	4607      	mov	r7, r0
 8004224:	4620      	mov	r0, r4
 8004226:	f7ff ffad 	bl	8004184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800422a:	9b01      	ldr	r3, [sp, #4]
 800422c:	6027      	str	r7, [r4, #0]
 800422e:	60a3      	str	r3, [r4, #8]
 8004230:	b125      	cbz	r5, 800423c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8004232:	462a      	mov	r2, r5
 8004234:	6831      	ldr	r1, [r6, #0]
 8004236:	6820      	ldr	r0, [r4, #0]
 8004238:	f7ff ffc4 	bl	80041c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800423c:	2200      	movs	r2, #0
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	6065      	str	r5, [r4, #4]
 8004242:	555a      	strb	r2, [r3, r5]
 8004244:	b003      	add	sp, #12
 8004246:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8004248:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	4616      	mov	r6, r2
 800424e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8004252:	6842      	ldr	r2, [r0, #4]
 8004254:	469a      	mov	sl, r3
 8004256:	eba8 0306 	sub.w	r3, r8, r6
 800425a:	1a57      	subs	r7, r2, r1
 800425c:	4413      	add	r3, r2
 800425e:	6802      	ldr	r2, [r0, #0]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	f100 0308 	add.w	r3, r0, #8
 8004266:	429a      	cmp	r2, r3
 8004268:	460d      	mov	r5, r1
 800426a:	bf14      	ite	ne
 800426c:	6882      	ldrne	r2, [r0, #8]
 800426e:	220f      	moveq	r2, #15
 8004270:	a901      	add	r1, sp, #4
 8004272:	4604      	mov	r4, r0
 8004274:	f7ff ff6c 	bl	8004150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004278:	1bbf      	subs	r7, r7, r6
 800427a:	4681      	mov	r9, r0
 800427c:	b11d      	cbz	r5, 8004286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800427e:	462a      	mov	r2, r5
 8004280:	6821      	ldr	r1, [r4, #0]
 8004282:	f7ff ff9f 	bl	80041c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004286:	f1ba 0f00 	cmp.w	sl, #0
 800428a:	d008      	beq.n	800429e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800428c:	f1b8 0f00 	cmp.w	r8, #0
 8004290:	d005      	beq.n	800429e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8004292:	4642      	mov	r2, r8
 8004294:	4651      	mov	r1, sl
 8004296:	eb09 0005 	add.w	r0, r9, r5
 800429a:	f7ff ff93 	bl	80041c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800429e:	b147      	cbz	r7, 80042b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 80042a0:	6821      	ldr	r1, [r4, #0]
 80042a2:	442e      	add	r6, r5
 80042a4:	eb05 0008 	add.w	r0, r5, r8
 80042a8:	463a      	mov	r2, r7
 80042aa:	4431      	add	r1, r6
 80042ac:	4448      	add	r0, r9
 80042ae:	f7ff ff89 	bl	80041c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80042b2:	4620      	mov	r0, r4
 80042b4:	f7ff ff66 	bl	8004184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80042b8:	9b01      	ldr	r3, [sp, #4]
 80042ba:	f8c4 9000 	str.w	r9, [r4]
 80042be:	60a3      	str	r3, [r4, #8]
 80042c0:	b002      	add	sp, #8
 80042c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080042c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80042c6:	f100 0208 	add.w	r2, r0, #8
 80042ca:	6002      	str	r2, [r0, #0]
 80042cc:	2200      	movs	r2, #0
 80042ce:	6042      	str	r2, [r0, #4]
 80042d0:	7202      	strb	r2, [r0, #8]
 80042d2:	4770      	bx	lr

080042d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80042d4:	b510      	push	{r4, lr}
 80042d6:	4604      	mov	r4, r0
 80042d8:	f7ff ff54 	bl	8004184 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80042dc:	4620      	mov	r0, r4
 80042de:	bd10      	pop	{r4, pc}

080042e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4604      	mov	r4, r0
 80042e4:	f7ff ff88 	bl	80041f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80042e8:	4620      	mov	r0, r4
 80042ea:	bd10      	pop	{r4, pc}

080042ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 80042ec:	6840      	ldr	r0, [r0, #4]
 80042ee:	4770      	bx	lr

080042f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80042f0:	6840      	ldr	r0, [r0, #4]
 80042f2:	fab0 f080 	clz	r0, r0
 80042f6:	0940      	lsrs	r0, r0, #5
 80042f8:	4770      	bx	lr
	...

080042fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80042fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004300:	4614      	mov	r4, r2
 8004302:	4681      	mov	r9, r0
 8004304:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004306:	460f      	mov	r7, r1
 8004308:	462a      	mov	r2, r5
 800430a:	4698      	mov	r8, r3
 800430c:	4621      	mov	r1, r4
 800430e:	4b37      	ldr	r3, [pc, #220]	; (80043ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8004310:	f7ff ff40 	bl	8004194 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8004314:	464a      	mov	r2, r9
 8004316:	f852 6b08 	ldr.w	r6, [r2], #8
 800431a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800431e:	4296      	cmp	r6, r2
 8004320:	bf08      	it	eq
 8004322:	220f      	moveq	r2, #15
 8004324:	eba5 0b04 	sub.w	fp, r5, r4
 8004328:	bf18      	it	ne
 800432a:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 800432e:	eb03 0a0b 	add.w	sl, r3, fp
 8004332:	4552      	cmp	r2, sl
 8004334:	d34e      	bcc.n	80043d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 8004336:	443e      	add	r6, r7
 8004338:	4641      	mov	r1, r8
 800433a:	1bdf      	subs	r7, r3, r7
 800433c:	4648      	mov	r0, r9
 800433e:	1b3f      	subs	r7, r7, r4
 8004340:	f7ff ff34 	bl	80041ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8004344:	b170      	cbz	r0, 8004364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8004346:	b137      	cbz	r7, 8004356 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8004348:	42ac      	cmp	r4, r5
 800434a:	d004      	beq.n	8004356 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800434c:	463a      	mov	r2, r7
 800434e:	1931      	adds	r1, r6, r4
 8004350:	1970      	adds	r0, r6, r5
 8004352:	f7ff ff40 	bl	80041d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004356:	b30d      	cbz	r5, 800439c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8004358:	462a      	mov	r2, r5
 800435a:	4641      	mov	r1, r8
 800435c:	4630      	mov	r0, r6
 800435e:	f7ff ff31 	bl	80041c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004362:	e01b      	b.n	800439c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8004364:	b135      	cbz	r5, 8004374 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 8004366:	42ac      	cmp	r4, r5
 8004368:	d33c      	bcc.n	80043e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 800436a:	462a      	mov	r2, r5
 800436c:	4641      	mov	r1, r8
 800436e:	4630      	mov	r0, r6
 8004370:	f7ff ff31 	bl	80041d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004374:	b197      	cbz	r7, 800439c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8004376:	42ac      	cmp	r4, r5
 8004378:	d010      	beq.n	800439c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800437a:	463a      	mov	r2, r7
 800437c:	1931      	adds	r1, r6, r4
 800437e:	1970      	adds	r0, r6, r5
 8004380:	f7ff ff29 	bl	80041d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004384:	42ac      	cmp	r4, r5
 8004386:	d209      	bcs.n	800439c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8004388:	4434      	add	r4, r6
 800438a:	eb08 0305 	add.w	r3, r8, r5
 800438e:	429c      	cmp	r4, r3
 8004390:	d30f      	bcc.n	80043b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 8004392:	462a      	mov	r2, r5
 8004394:	4641      	mov	r1, r8
 8004396:	4630      	mov	r0, r6
 8004398:	f7ff ff1d 	bl	80041d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800439c:	2200      	movs	r2, #0
 800439e:	4648      	mov	r0, r9
 80043a0:	f8d9 3000 	ldr.w	r3, [r9]
 80043a4:	f8c9 a004 	str.w	sl, [r9, #4]
 80043a8:	f803 200a 	strb.w	r2, [r3, sl]
 80043ac:	b003      	add	sp, #12
 80043ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b2:	4544      	cmp	r4, r8
 80043b4:	d803      	bhi.n	80043be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 80043b6:	462a      	mov	r2, r5
 80043b8:	eb08 010b 	add.w	r1, r8, fp
 80043bc:	e7ce      	b.n	800435c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80043be:	eba4 0408 	sub.w	r4, r4, r8
 80043c2:	4622      	mov	r2, r4
 80043c4:	4641      	mov	r1, r8
 80043c6:	4630      	mov	r0, r6
 80043c8:	f7ff ff05 	bl	80041d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80043cc:	1b2a      	subs	r2, r5, r4
 80043ce:	1971      	adds	r1, r6, r5
 80043d0:	1930      	adds	r0, r6, r4
 80043d2:	e7c4      	b.n	800435e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 80043d4:	9500      	str	r5, [sp, #0]
 80043d6:	4643      	mov	r3, r8
 80043d8:	4622      	mov	r2, r4
 80043da:	4639      	mov	r1, r7
 80043dc:	4648      	mov	r0, r9
 80043de:	f7ff ff33 	bl	8004248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80043e2:	e7db      	b.n	800439c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80043e4:	2f00      	cmp	r7, #0
 80043e6:	d0cf      	beq.n	8004388 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 80043e8:	e7c7      	b.n	800437a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80043ea:	bf00      	nop
 80043ec:	08004a74 	.word	0x08004a74

080043f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80043f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043f2:	4604      	mov	r4, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	460d      	mov	r5, r1
 80043f8:	f7fb fea8 	bl	800014c <strlen>
 80043fc:	462b      	mov	r3, r5
 80043fe:	9000      	str	r0, [sp, #0]
 8004400:	6862      	ldr	r2, [r4, #4]
 8004402:	2100      	movs	r1, #0
 8004404:	4620      	mov	r0, r4
 8004406:	f7ff ff79 	bl	80042fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800440a:	b003      	add	sp, #12
 800440c:	bd30      	pop	{r4, r5, pc}

0800440e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800440e:	b508      	push	{r3, lr}
 8004410:	f7ff ffee 	bl	80043f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8004414:	bd08      	pop	{r3, pc}

08004416 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8004416:	6800      	ldr	r0, [r0, #0]
 8004418:	4770      	bx	lr
	...

0800441c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800441c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800441e:	4604      	mov	r4, r0
 8004420:	4616      	mov	r6, r2
 8004422:	460d      	mov	r5, r1
 8004424:	b919      	cbnz	r1, 800442e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8004426:	b112      	cbz	r2, 800442e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8004428:	480d      	ldr	r0, [pc, #52]	; (8004460 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800442a:	f000 f84d 	bl	80044c8 <_ZSt19__throw_logic_errorPKc>
 800442e:	1b73      	subs	r3, r6, r5
 8004430:	2b0f      	cmp	r3, #15
 8004432:	9301      	str	r3, [sp, #4]
 8004434:	d907      	bls.n	8004446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8004436:	2200      	movs	r2, #0
 8004438:	a901      	add	r1, sp, #4
 800443a:	4620      	mov	r0, r4
 800443c:	f7ff fe88 	bl	8004150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004440:	9b01      	ldr	r3, [sp, #4]
 8004442:	6020      	str	r0, [r4, #0]
 8004444:	60a3      	str	r3, [r4, #8]
 8004446:	4632      	mov	r2, r6
 8004448:	4629      	mov	r1, r5
 800444a:	6820      	ldr	r0, [r4, #0]
 800444c:	f7ff fecf 	bl	80041ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8004450:	2100      	movs	r1, #0
 8004452:	9b01      	ldr	r3, [sp, #4]
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	6063      	str	r3, [r4, #4]
 8004458:	54d1      	strb	r1, [r2, r3]
 800445a:	b002      	add	sp, #8
 800445c:	bd70      	pop	{r4, r5, r6, pc}
 800445e:	bf00      	nop
 8004460:	08004a8d 	.word	0x08004a8d

08004464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	f100 0308 	add.w	r3, r0, #8
 800446a:	4604      	mov	r4, r0
 800446c:	6003      	str	r3, [r0, #0]
 800446e:	460d      	mov	r5, r1
 8004470:	b159      	cbz	r1, 800448a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8004472:	4608      	mov	r0, r1
 8004474:	f7fb fe6a 	bl	800014c <strlen>
 8004478:	182a      	adds	r2, r5, r0
 800447a:	4620      	mov	r0, r4
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	4629      	mov	r1, r5
 8004482:	f7ff ffcb 	bl	800441c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8004486:	4620      	mov	r0, r4
 8004488:	bd38      	pop	{r3, r4, r5, pc}
 800448a:	f04f 32ff 	mov.w	r2, #4294967295
 800448e:	e7f4      	b.n	800447a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08004490 <_Znwj>:
 8004490:	b510      	push	{r4, lr}
 8004492:	2800      	cmp	r0, #0
 8004494:	bf14      	ite	ne
 8004496:	4604      	movne	r4, r0
 8004498:	2401      	moveq	r4, #1
 800449a:	4620      	mov	r0, r4
 800449c:	f000 f84c 	bl	8004538 <malloc>
 80044a0:	b930      	cbnz	r0, 80044b0 <_Znwj+0x20>
 80044a2:	f000 f807 	bl	80044b4 <_ZSt15get_new_handlerv>
 80044a6:	b908      	cbnz	r0, 80044ac <_Znwj+0x1c>
 80044a8:	f000 f814 	bl	80044d4 <abort>
 80044ac:	4780      	blx	r0
 80044ae:	e7f4      	b.n	800449a <_Znwj+0xa>
 80044b0:	bd10      	pop	{r4, pc}
	...

080044b4 <_ZSt15get_new_handlerv>:
 80044b4:	4b02      	ldr	r3, [pc, #8]	; (80044c0 <_ZSt15get_new_handlerv+0xc>)
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	f3bf 8f5b 	dmb	ish
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	200000ac 	.word	0x200000ac

080044c4 <_ZdlPv>:
 80044c4:	f000 b840 	b.w	8004548 <free>

080044c8 <_ZSt19__throw_logic_errorPKc>:
 80044c8:	b508      	push	{r3, lr}
 80044ca:	f000 f803 	bl	80044d4 <abort>

080044ce <_ZSt20__throw_length_errorPKc>:
 80044ce:	b508      	push	{r3, lr}
 80044d0:	f000 f800 	bl	80044d4 <abort>

080044d4 <abort>:
 80044d4:	b508      	push	{r3, lr}
 80044d6:	2006      	movs	r0, #6
 80044d8:	f000 f948 	bl	800476c <raise>
 80044dc:	2001      	movs	r0, #1
 80044de:	f7fc f9f4 	bl	80008ca <_exit>
	...

080044e4 <__errno>:
 80044e4:	4b01      	ldr	r3, [pc, #4]	; (80044ec <__errno+0x8>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	2000000c 	.word	0x2000000c

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	2500      	movs	r5, #0
 80044f4:	4e0c      	ldr	r6, [pc, #48]	; (8004528 <__libc_init_array+0x38>)
 80044f6:	4c0d      	ldr	r4, [pc, #52]	; (800452c <__libc_init_array+0x3c>)
 80044f8:	1ba4      	subs	r4, r4, r6
 80044fa:	10a4      	asrs	r4, r4, #2
 80044fc:	42a5      	cmp	r5, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	f000 f952 	bl	80047a8 <_init>
 8004504:	2500      	movs	r5, #0
 8004506:	4e0a      	ldr	r6, [pc, #40]	; (8004530 <__libc_init_array+0x40>)
 8004508:	4c0a      	ldr	r4, [pc, #40]	; (8004534 <__libc_init_array+0x44>)
 800450a:	1ba4      	subs	r4, r4, r6
 800450c:	10a4      	asrs	r4, r4, #2
 800450e:	42a5      	cmp	r5, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004518:	4798      	blx	r3
 800451a:	3501      	adds	r5, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004522:	4798      	blx	r3
 8004524:	3501      	adds	r5, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	08004b30 	.word	0x08004b30
 800452c:	08004b30 	.word	0x08004b30
 8004530:	08004b30 	.word	0x08004b30
 8004534:	08004b38 	.word	0x08004b38

08004538 <malloc>:
 8004538:	4b02      	ldr	r3, [pc, #8]	; (8004544 <malloc+0xc>)
 800453a:	4601      	mov	r1, r0
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	f000 b883 	b.w	8004648 <_malloc_r>
 8004542:	bf00      	nop
 8004544:	2000000c 	.word	0x2000000c

08004548 <free>:
 8004548:	4b02      	ldr	r3, [pc, #8]	; (8004554 <free+0xc>)
 800454a:	4601      	mov	r1, r0
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f000 b82f 	b.w	80045b0 <_free_r>
 8004552:	bf00      	nop
 8004554:	2000000c 	.word	0x2000000c

08004558 <memcpy>:
 8004558:	b510      	push	{r4, lr}
 800455a:	1e43      	subs	r3, r0, #1
 800455c:	440a      	add	r2, r1
 800455e:	4291      	cmp	r1, r2
 8004560:	d100      	bne.n	8004564 <memcpy+0xc>
 8004562:	bd10      	pop	{r4, pc}
 8004564:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004568:	f803 4f01 	strb.w	r4, [r3, #1]!
 800456c:	e7f7      	b.n	800455e <memcpy+0x6>

0800456e <memmove>:
 800456e:	4288      	cmp	r0, r1
 8004570:	b510      	push	{r4, lr}
 8004572:	eb01 0302 	add.w	r3, r1, r2
 8004576:	d807      	bhi.n	8004588 <memmove+0x1a>
 8004578:	1e42      	subs	r2, r0, #1
 800457a:	4299      	cmp	r1, r3
 800457c:	d00a      	beq.n	8004594 <memmove+0x26>
 800457e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004582:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004586:	e7f8      	b.n	800457a <memmove+0xc>
 8004588:	4283      	cmp	r3, r0
 800458a:	d9f5      	bls.n	8004578 <memmove+0xa>
 800458c:	1881      	adds	r1, r0, r2
 800458e:	1ad2      	subs	r2, r2, r3
 8004590:	42d3      	cmn	r3, r2
 8004592:	d100      	bne.n	8004596 <memmove+0x28>
 8004594:	bd10      	pop	{r4, pc}
 8004596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800459a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800459e:	e7f7      	b.n	8004590 <memmove+0x22>

080045a0 <memset>:
 80045a0:	4603      	mov	r3, r0
 80045a2:	4402      	add	r2, r0
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d100      	bne.n	80045aa <memset+0xa>
 80045a8:	4770      	bx	lr
 80045aa:	f803 1b01 	strb.w	r1, [r3], #1
 80045ae:	e7f9      	b.n	80045a4 <memset+0x4>

080045b0 <_free_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4605      	mov	r5, r0
 80045b4:	2900      	cmp	r1, #0
 80045b6:	d043      	beq.n	8004640 <_free_r+0x90>
 80045b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045bc:	1f0c      	subs	r4, r1, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bfb8      	it	lt
 80045c2:	18e4      	addlt	r4, r4, r3
 80045c4:	f000 f8ee 	bl	80047a4 <__malloc_lock>
 80045c8:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <_free_r+0x94>)
 80045ca:	6813      	ldr	r3, [r2, #0]
 80045cc:	4610      	mov	r0, r2
 80045ce:	b933      	cbnz	r3, 80045de <_free_r+0x2e>
 80045d0:	6063      	str	r3, [r4, #4]
 80045d2:	6014      	str	r4, [r2, #0]
 80045d4:	4628      	mov	r0, r5
 80045d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045da:	f000 b8e4 	b.w	80047a6 <__malloc_unlock>
 80045de:	42a3      	cmp	r3, r4
 80045e0:	d90b      	bls.n	80045fa <_free_r+0x4a>
 80045e2:	6821      	ldr	r1, [r4, #0]
 80045e4:	1862      	adds	r2, r4, r1
 80045e6:	4293      	cmp	r3, r2
 80045e8:	bf01      	itttt	eq
 80045ea:	681a      	ldreq	r2, [r3, #0]
 80045ec:	685b      	ldreq	r3, [r3, #4]
 80045ee:	1852      	addeq	r2, r2, r1
 80045f0:	6022      	streq	r2, [r4, #0]
 80045f2:	6063      	str	r3, [r4, #4]
 80045f4:	6004      	str	r4, [r0, #0]
 80045f6:	e7ed      	b.n	80045d4 <_free_r+0x24>
 80045f8:	4613      	mov	r3, r2
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	b10a      	cbz	r2, 8004602 <_free_r+0x52>
 80045fe:	42a2      	cmp	r2, r4
 8004600:	d9fa      	bls.n	80045f8 <_free_r+0x48>
 8004602:	6819      	ldr	r1, [r3, #0]
 8004604:	1858      	adds	r0, r3, r1
 8004606:	42a0      	cmp	r0, r4
 8004608:	d10b      	bne.n	8004622 <_free_r+0x72>
 800460a:	6820      	ldr	r0, [r4, #0]
 800460c:	4401      	add	r1, r0
 800460e:	1858      	adds	r0, r3, r1
 8004610:	4282      	cmp	r2, r0
 8004612:	6019      	str	r1, [r3, #0]
 8004614:	d1de      	bne.n	80045d4 <_free_r+0x24>
 8004616:	6810      	ldr	r0, [r2, #0]
 8004618:	6852      	ldr	r2, [r2, #4]
 800461a:	4401      	add	r1, r0
 800461c:	6019      	str	r1, [r3, #0]
 800461e:	605a      	str	r2, [r3, #4]
 8004620:	e7d8      	b.n	80045d4 <_free_r+0x24>
 8004622:	d902      	bls.n	800462a <_free_r+0x7a>
 8004624:	230c      	movs	r3, #12
 8004626:	602b      	str	r3, [r5, #0]
 8004628:	e7d4      	b.n	80045d4 <_free_r+0x24>
 800462a:	6820      	ldr	r0, [r4, #0]
 800462c:	1821      	adds	r1, r4, r0
 800462e:	428a      	cmp	r2, r1
 8004630:	bf01      	itttt	eq
 8004632:	6811      	ldreq	r1, [r2, #0]
 8004634:	6852      	ldreq	r2, [r2, #4]
 8004636:	1809      	addeq	r1, r1, r0
 8004638:	6021      	streq	r1, [r4, #0]
 800463a:	6062      	str	r2, [r4, #4]
 800463c:	605c      	str	r4, [r3, #4]
 800463e:	e7c9      	b.n	80045d4 <_free_r+0x24>
 8004640:	bd38      	pop	{r3, r4, r5, pc}
 8004642:	bf00      	nop
 8004644:	200000b0 	.word	0x200000b0

08004648 <_malloc_r>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	1ccd      	adds	r5, r1, #3
 800464c:	f025 0503 	bic.w	r5, r5, #3
 8004650:	3508      	adds	r5, #8
 8004652:	2d0c      	cmp	r5, #12
 8004654:	bf38      	it	cc
 8004656:	250c      	movcc	r5, #12
 8004658:	2d00      	cmp	r5, #0
 800465a:	4606      	mov	r6, r0
 800465c:	db01      	blt.n	8004662 <_malloc_r+0x1a>
 800465e:	42a9      	cmp	r1, r5
 8004660:	d903      	bls.n	800466a <_malloc_r+0x22>
 8004662:	230c      	movs	r3, #12
 8004664:	6033      	str	r3, [r6, #0]
 8004666:	2000      	movs	r0, #0
 8004668:	bd70      	pop	{r4, r5, r6, pc}
 800466a:	f000 f89b 	bl	80047a4 <__malloc_lock>
 800466e:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <_malloc_r+0xac>)
 8004670:	6814      	ldr	r4, [r2, #0]
 8004672:	4621      	mov	r1, r4
 8004674:	b991      	cbnz	r1, 800469c <_malloc_r+0x54>
 8004676:	4c20      	ldr	r4, [pc, #128]	; (80046f8 <_malloc_r+0xb0>)
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	b91b      	cbnz	r3, 8004684 <_malloc_r+0x3c>
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f83d 	bl	80046fc <_sbrk_r>
 8004682:	6020      	str	r0, [r4, #0]
 8004684:	4629      	mov	r1, r5
 8004686:	4630      	mov	r0, r6
 8004688:	f000 f838 	bl	80046fc <_sbrk_r>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d124      	bne.n	80046da <_malloc_r+0x92>
 8004690:	230c      	movs	r3, #12
 8004692:	4630      	mov	r0, r6
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	f000 f886 	bl	80047a6 <__malloc_unlock>
 800469a:	e7e4      	b.n	8004666 <_malloc_r+0x1e>
 800469c:	680b      	ldr	r3, [r1, #0]
 800469e:	1b5b      	subs	r3, r3, r5
 80046a0:	d418      	bmi.n	80046d4 <_malloc_r+0x8c>
 80046a2:	2b0b      	cmp	r3, #11
 80046a4:	d90f      	bls.n	80046c6 <_malloc_r+0x7e>
 80046a6:	600b      	str	r3, [r1, #0]
 80046a8:	18cc      	adds	r4, r1, r3
 80046aa:	50cd      	str	r5, [r1, r3]
 80046ac:	4630      	mov	r0, r6
 80046ae:	f000 f87a 	bl	80047a6 <__malloc_unlock>
 80046b2:	f104 000b 	add.w	r0, r4, #11
 80046b6:	1d23      	adds	r3, r4, #4
 80046b8:	f020 0007 	bic.w	r0, r0, #7
 80046bc:	1ac3      	subs	r3, r0, r3
 80046be:	d0d3      	beq.n	8004668 <_malloc_r+0x20>
 80046c0:	425a      	negs	r2, r3
 80046c2:	50e2      	str	r2, [r4, r3]
 80046c4:	e7d0      	b.n	8004668 <_malloc_r+0x20>
 80046c6:	684b      	ldr	r3, [r1, #4]
 80046c8:	428c      	cmp	r4, r1
 80046ca:	bf16      	itet	ne
 80046cc:	6063      	strne	r3, [r4, #4]
 80046ce:	6013      	streq	r3, [r2, #0]
 80046d0:	460c      	movne	r4, r1
 80046d2:	e7eb      	b.n	80046ac <_malloc_r+0x64>
 80046d4:	460c      	mov	r4, r1
 80046d6:	6849      	ldr	r1, [r1, #4]
 80046d8:	e7cc      	b.n	8004674 <_malloc_r+0x2c>
 80046da:	1cc4      	adds	r4, r0, #3
 80046dc:	f024 0403 	bic.w	r4, r4, #3
 80046e0:	42a0      	cmp	r0, r4
 80046e2:	d005      	beq.n	80046f0 <_malloc_r+0xa8>
 80046e4:	1a21      	subs	r1, r4, r0
 80046e6:	4630      	mov	r0, r6
 80046e8:	f000 f808 	bl	80046fc <_sbrk_r>
 80046ec:	3001      	adds	r0, #1
 80046ee:	d0cf      	beq.n	8004690 <_malloc_r+0x48>
 80046f0:	6025      	str	r5, [r4, #0]
 80046f2:	e7db      	b.n	80046ac <_malloc_r+0x64>
 80046f4:	200000b0 	.word	0x200000b0
 80046f8:	200000b4 	.word	0x200000b4

080046fc <_sbrk_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	2300      	movs	r3, #0
 8004700:	4c05      	ldr	r4, [pc, #20]	; (8004718 <_sbrk_r+0x1c>)
 8004702:	4605      	mov	r5, r0
 8004704:	4608      	mov	r0, r1
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	f7fc f8ea 	bl	80008e0 <_sbrk>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	d102      	bne.n	8004716 <_sbrk_r+0x1a>
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	b103      	cbz	r3, 8004716 <_sbrk_r+0x1a>
 8004714:	602b      	str	r3, [r5, #0]
 8004716:	bd38      	pop	{r3, r4, r5, pc}
 8004718:	20000218 	.word	0x20000218

0800471c <_raise_r>:
 800471c:	291f      	cmp	r1, #31
 800471e:	b538      	push	{r3, r4, r5, lr}
 8004720:	4604      	mov	r4, r0
 8004722:	460d      	mov	r5, r1
 8004724:	d904      	bls.n	8004730 <_raise_r+0x14>
 8004726:	2316      	movs	r3, #22
 8004728:	6003      	str	r3, [r0, #0]
 800472a:	f04f 30ff 	mov.w	r0, #4294967295
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004732:	b112      	cbz	r2, 800473a <_raise_r+0x1e>
 8004734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004738:	b94b      	cbnz	r3, 800474e <_raise_r+0x32>
 800473a:	4620      	mov	r0, r4
 800473c:	f000 f830 	bl	80047a0 <_getpid_r>
 8004740:	462a      	mov	r2, r5
 8004742:	4601      	mov	r1, r0
 8004744:	4620      	mov	r0, r4
 8004746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800474a:	f000 b817 	b.w	800477c <_kill_r>
 800474e:	2b01      	cmp	r3, #1
 8004750:	d00a      	beq.n	8004768 <_raise_r+0x4c>
 8004752:	1c59      	adds	r1, r3, #1
 8004754:	d103      	bne.n	800475e <_raise_r+0x42>
 8004756:	2316      	movs	r3, #22
 8004758:	6003      	str	r3, [r0, #0]
 800475a:	2001      	movs	r0, #1
 800475c:	e7e7      	b.n	800472e <_raise_r+0x12>
 800475e:	2400      	movs	r4, #0
 8004760:	4628      	mov	r0, r5
 8004762:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004766:	4798      	blx	r3
 8004768:	2000      	movs	r0, #0
 800476a:	e7e0      	b.n	800472e <_raise_r+0x12>

0800476c <raise>:
 800476c:	4b02      	ldr	r3, [pc, #8]	; (8004778 <raise+0xc>)
 800476e:	4601      	mov	r1, r0
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	f7ff bfd3 	b.w	800471c <_raise_r>
 8004776:	bf00      	nop
 8004778:	2000000c 	.word	0x2000000c

0800477c <_kill_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	2300      	movs	r3, #0
 8004780:	4c06      	ldr	r4, [pc, #24]	; (800479c <_kill_r+0x20>)
 8004782:	4605      	mov	r5, r0
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	f7fc f88e 	bl	80008aa <_kill>
 800478e:	1c43      	adds	r3, r0, #1
 8004790:	d102      	bne.n	8004798 <_kill_r+0x1c>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	b103      	cbz	r3, 8004798 <_kill_r+0x1c>
 8004796:	602b      	str	r3, [r5, #0]
 8004798:	bd38      	pop	{r3, r4, r5, pc}
 800479a:	bf00      	nop
 800479c:	20000218 	.word	0x20000218

080047a0 <_getpid_r>:
 80047a0:	f7fc b87c 	b.w	800089c <_getpid>

080047a4 <__malloc_lock>:
 80047a4:	4770      	bx	lr

080047a6 <__malloc_unlock>:
 80047a6:	4770      	bx	lr

080047a8 <_init>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr

080047b4 <_fini>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	bf00      	nop
 80047b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ba:	bc08      	pop	{r3}
 80047bc:	469e      	mov	lr, r3
 80047be:	4770      	bx	lr

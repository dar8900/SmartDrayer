
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ea4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003710  08014fb8  08014fb8  00024fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080186c8  080186c8  00030278  2**0
                  CONTENTS
  4 .ARM          00000000  080186c8  080186c8  00030278  2**0
                  CONTENTS
  5 .preinit_array 00000000  080186c8  080186c8  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080186c8  080186c8  000286c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080186cc  080186cc  000286cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  080186d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000278  08018948  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  08018948  0003082c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   001149fd  00000000  00000000  000302a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000907d  00000000  00000000  00144c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003a70  00000000  00000000  0014dd20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003778  00000000  00000000  00151790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e68b  00000000  00000000  00154f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002aada  00000000  00000000  00173593  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3c27  00000000  00000000  0019e06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00241c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00012238  00000000  00000000  00241d10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	08014f9c 	.word	0x08014f9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	08014f9c 	.word	0x08014f9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4608      	mov	r0, r1
 800106e:	4611      	mov	r1, r2
 8001070:	461a      	mov	r2, r3
 8001072:	4603      	mov	r3, r0
 8001074:	70fb      	strb	r3, [r7, #3]
 8001076:	460b      	mov	r3, r1
 8001078:	70bb      	strb	r3, [r7, #2]
 800107a:	4613      	mov	r3, r2
 800107c:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800107e:	78fa      	ldrb	r2, [r7, #3]
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	4413      	add	r3, r2
 8001084:	b2d8      	uxtb	r0, r3
 8001086:	78ba      	ldrb	r2, [r7, #2]
 8001088:	7c3b      	ldrb	r3, [r7, #16]
 800108a:	4413      	add	r3, r2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	78ba      	ldrb	r2, [r7, #2]
 8001090:	78f9      	ldrb	r1, [r7, #3]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	4603      	mov	r3, r0
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f001 fad9 	bl	800264e <u8g2_IsIntersection>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d013      	beq.n	80010ca <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80010a2:	e00e      	b.n	80010c2 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80010a4:	7878      	ldrb	r0, [r7, #1]
 80010a6:	78ba      	ldrb	r2, [r7, #2]
 80010a8:	78f9      	ldrb	r1, [r7, #3]
 80010aa:	2300      	movs	r3, #0
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	4603      	mov	r3, r0
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f001 f999 	bl	80023e8 <u8g2_DrawHVLine>
    y++;    
 80010b6:	78bb      	ldrb	r3, [r7, #2]
 80010b8:	3301      	adds	r3, #1
 80010ba:	70bb      	strb	r3, [r7, #2]
    h--;
 80010bc:	7c3b      	ldrb	r3, [r7, #16]
 80010be:	3b01      	subs	r3, #1
 80010c0:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 80010c2:	7c3b      	ldrb	r3, [r7, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ed      	bne.n	80010a4 <u8g2_DrawBox+0x40>
 80010c8:	e000      	b.n	80010cc <u8g2_DrawBox+0x68>
    return;
 80010ca:	bf00      	nop
  }
}
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af02      	add	r7, sp, #8
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	4608      	mov	r0, r1
 80010dc:	4611      	mov	r1, r2
 80010de:	461a      	mov	r2, r3
 80010e0:	4603      	mov	r3, r0
 80010e2:	70fb      	strb	r3, [r7, #3]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70bb      	strb	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	787b      	ldrb	r3, [r7, #1]
 80010f4:	4413      	add	r3, r2
 80010f6:	b2d8      	uxtb	r0, r3
 80010f8:	78ba      	ldrb	r2, [r7, #2]
 80010fa:	7e3b      	ldrb	r3, [r7, #24]
 80010fc:	4413      	add	r3, r2
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	78ba      	ldrb	r2, [r7, #2]
 8001102:	78f9      	ldrb	r1, [r7, #3]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	4603      	mov	r3, r0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f001 faa0 	bl	800264e <u8g2_IsIntersection>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d03b      	beq.n	800118c <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001114:	7878      	ldrb	r0, [r7, #1]
 8001116:	78ba      	ldrb	r2, [r7, #2]
 8001118:	78f9      	ldrb	r1, [r7, #3]
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	4603      	mov	r3, r0
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f001 f961 	bl	80023e8 <u8g2_DrawHVLine>
  if (h >= 2) {
 8001126:	7e3b      	ldrb	r3, [r7, #24]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d930      	bls.n	800118e <u8g2_DrawFrame+0xbc>
    h-=2;
 800112c:	7e3b      	ldrb	r3, [r7, #24]
 800112e:	3b02      	subs	r3, #2
 8001130:	763b      	strb	r3, [r7, #24]
    y++;
 8001132:	78bb      	ldrb	r3, [r7, #2]
 8001134:	3301      	adds	r3, #1
 8001136:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 8001138:	7e3b      	ldrb	r3, [r7, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d01c      	beq.n	8001178 <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800113e:	7e38      	ldrb	r0, [r7, #24]
 8001140:	78ba      	ldrb	r2, [r7, #2]
 8001142:	78f9      	ldrb	r1, [r7, #3]
 8001144:	2301      	movs	r3, #1
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4603      	mov	r3, r0
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f001 f94c 	bl	80023e8 <u8g2_DrawHVLine>
      x+=w;
 8001150:	78fa      	ldrb	r2, [r7, #3]
 8001152:	787b      	ldrb	r3, [r7, #1]
 8001154:	4413      	add	r3, r2
 8001156:	70fb      	strb	r3, [r7, #3]
      x--;
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	3b01      	subs	r3, #1
 800115c:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800115e:	7e38      	ldrb	r0, [r7, #24]
 8001160:	78ba      	ldrb	r2, [r7, #2]
 8001162:	78f9      	ldrb	r1, [r7, #3]
 8001164:	2301      	movs	r3, #1
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	4603      	mov	r3, r0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f001 f93c 	bl	80023e8 <u8g2_DrawHVLine>
      y+=h;
 8001170:	78ba      	ldrb	r2, [r7, #2]
 8001172:	7e3b      	ldrb	r3, [r7, #24]
 8001174:	4413      	add	r3, r2
 8001176:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001178:	7878      	ldrb	r0, [r7, #1]
 800117a:	78ba      	ldrb	r2, [r7, #2]
 800117c:	7bf9      	ldrb	r1, [r7, #15]
 800117e:	2300      	movs	r3, #0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	4603      	mov	r3, r0
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f001 f92f 	bl	80023e8 <u8g2_DrawHVLine>
 800118a:	e000      	b.n	800118e <u8g2_DrawFrame+0xbc>
    return;
 800118c:	bf00      	nop
  }
}
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	4608      	mov	r0, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	70fb      	strb	r3, [r7, #3]
 80011a6:	460b      	mov	r3, r1
 80011a8:	70bb      	strb	r3, [r7, #2]
 80011aa:	4613      	mov	r3, r2
 80011ac:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80011ae:	78fa      	ldrb	r2, [r7, #3]
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	4413      	add	r3, r2
 80011b4:	b2d8      	uxtb	r0, r3
 80011b6:	78ba      	ldrb	r2, [r7, #2]
 80011b8:	7e3b      	ldrb	r3, [r7, #24]
 80011ba:	4413      	add	r3, r2
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	78ba      	ldrb	r2, [r7, #2]
 80011c0:	78f9      	ldrb	r1, [r7, #3]
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	4603      	mov	r3, r0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 fa41 	bl	800264e <u8g2_IsIntersection>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8095 	beq.w	80012fe <u8g2_DrawRFrame+0x16a>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	73fb      	strb	r3, [r7, #15]
  xl += r;
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	7f3b      	ldrb	r3, [r7, #28]
 80011dc:	4413      	add	r3, r2
 80011de:	73fb      	strb	r3, [r7, #15]
  yu = y;
 80011e0:	78bb      	ldrb	r3, [r7, #2]
 80011e2:	73bb      	strb	r3, [r7, #14]
  yu += r;
 80011e4:	7bba      	ldrb	r2, [r7, #14]
 80011e6:	7f3b      	ldrb	r3, [r7, #28]
 80011e8:	4413      	add	r3, r2
 80011ea:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	737b      	strb	r3, [r7, #13]
    xr += w;
 80011f0:	7b7a      	ldrb	r2, [r7, #13]
 80011f2:	787b      	ldrb	r3, [r7, #1]
 80011f4:	4413      	add	r3, r2
 80011f6:	737b      	strb	r3, [r7, #13]
    xr -= r;
 80011f8:	7b7a      	ldrb	r2, [r7, #13]
 80011fa:	7f3b      	ldrb	r3, [r7, #28]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8001200:	7b7b      	ldrb	r3, [r7, #13]
 8001202:	3b01      	subs	r3, #1
 8001204:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 8001206:	78bb      	ldrb	r3, [r7, #2]
 8001208:	733b      	strb	r3, [r7, #12]
    yl += h;
 800120a:	7b3a      	ldrb	r2, [r7, #12]
 800120c:	7e3b      	ldrb	r3, [r7, #24]
 800120e:	4413      	add	r3, r2
 8001210:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8001212:	7b3a      	ldrb	r2, [r7, #12]
 8001214:	7f3b      	ldrb	r3, [r7, #28]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 800121a:	7b3b      	ldrb	r3, [r7, #12]
 800121c:	3b01      	subs	r3, #1
 800121e:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001220:	7f38      	ldrb	r0, [r7, #28]
 8001222:	7bba      	ldrb	r2, [r7, #14]
 8001224:	7bf9      	ldrb	r1, [r7, #15]
 8001226:	2302      	movs	r3, #2
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4603      	mov	r3, r0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f9d0 	bl	80015d2 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8001232:	7f38      	ldrb	r0, [r7, #28]
 8001234:	7bba      	ldrb	r2, [r7, #14]
 8001236:	7b79      	ldrb	r1, [r7, #13]
 8001238:	2301      	movs	r3, #1
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4603      	mov	r3, r0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f9c7 	bl	80015d2 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8001244:	7f38      	ldrb	r0, [r7, #28]
 8001246:	7b3a      	ldrb	r2, [r7, #12]
 8001248:	7bf9      	ldrb	r1, [r7, #15]
 800124a:	2304      	movs	r3, #4
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4603      	mov	r3, r0
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f9be 	bl	80015d2 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8001256:	7f38      	ldrb	r0, [r7, #28]
 8001258:	7b3a      	ldrb	r2, [r7, #12]
 800125a:	7b79      	ldrb	r1, [r7, #13]
 800125c:	2308      	movs	r3, #8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4603      	mov	r3, r0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f9b5 	bl	80015d2 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 800126c:	7afa      	ldrb	r2, [r7, #11]
 800126e:	7f3b      	ldrb	r3, [r7, #28]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8001274:	7afa      	ldrb	r2, [r7, #11]
 8001276:	7f3b      	ldrb	r3, [r7, #28]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	72fb      	strb	r3, [r7, #11]
    hh = h;
 800127c:	7e3b      	ldrb	r3, [r7, #24]
 800127e:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8001280:	7aba      	ldrb	r2, [r7, #10]
 8001282:	7f3b      	ldrb	r3, [r7, #28]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8001288:	7aba      	ldrb	r2, [r7, #10]
 800128a:	7f3b      	ldrb	r3, [r7, #28]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	3301      	adds	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
    yu++;
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	3301      	adds	r3, #1
 800129a:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 800129c:	7afb      	ldrb	r3, [r7, #11]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d914      	bls.n	80012cc <u8g2_DrawRFrame+0x138>
    {
      ww -= 2;
 80012a2:	7afb      	ldrb	r3, [r7, #11]
 80012a4:	3b02      	subs	r3, #2
 80012a6:	72fb      	strb	r3, [r7, #11]
      h--;
 80012a8:	7e3b      	ldrb	r3, [r7, #24]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	78ba      	ldrb	r2, [r7, #2]
 80012b2:	7bf9      	ldrb	r1, [r7, #15]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f001 f91a 	bl	80024ee <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 80012ba:	78ba      	ldrb	r2, [r7, #2]
 80012bc:	7e3b      	ldrb	r3, [r7, #24]
 80012be:	4413      	add	r3, r2
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	7bf9      	ldrb	r1, [r7, #15]
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f001 f911 	bl	80024ee <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 80012cc:	7abb      	ldrb	r3, [r7, #10]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d916      	bls.n	8001300 <u8g2_DrawRFrame+0x16c>
    {
      hh -= 2;
 80012d2:	7abb      	ldrb	r3, [r7, #10]
 80012d4:	3b02      	subs	r3, #2
 80012d6:	72bb      	strb	r3, [r7, #10]
      w--;
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	3b01      	subs	r3, #1
 80012dc:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 80012de:	7abb      	ldrb	r3, [r7, #10]
 80012e0:	7bba      	ldrb	r2, [r7, #14]
 80012e2:	78f9      	ldrb	r1, [r7, #3]
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f001 f91c 	bl	8002522 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 80012ea:	78fa      	ldrb	r2, [r7, #3]
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	4413      	add	r3, r2
 80012f0:	b2d9      	uxtb	r1, r3
 80012f2:	7abb      	ldrb	r3, [r7, #10]
 80012f4:	7bba      	ldrb	r2, [r7, #14]
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f001 f913 	bl	8002522 <u8g2_DrawVLine>
 80012fc:	e000      	b.n	8001300 <u8g2_DrawRFrame+0x16c>
    return;
 80012fe:	bf00      	nop
    }
  }
}
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	7c1b      	ldrb	r3, [r3, #16]
 8001314:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f00f ffe2 	bl	80112fe <memset>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af02      	add	r7, sp, #8
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
 800134e:	4613      	mov	r3, r2
 8001350:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	7c1b      	ldrb	r3, [r3, #16]
 8001358:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	b29b      	uxth	r3, r3
 8001368:	89ba      	ldrh	r2, [r7, #12]
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001370:	89bb      	ldrh	r3, [r7, #12]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001376:	89bb      	ldrh	r3, [r7, #12]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800137e:	7bf9      	ldrb	r1, [r7, #15]
 8001380:	78ba      	ldrb	r2, [r7, #2]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	460b      	mov	r3, r1
 8001388:	2100      	movs	r1, #0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f001 ff80 	bl	8003290 <u8x8_DrawTile>
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013aa:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013b2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	7c5b      	ldrb	r3, [r3, #17]
 80013ba:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80013bc:	7bba      	ldrb	r2, [r7, #14]
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	4619      	mov	r1, r3
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffbd 	bl	8001342 <u8g2_send_tile_row>
    src_row++;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	3301      	adds	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	3301      	adds	r3, #1
 80013d2:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	7b7b      	ldrb	r3, [r7, #13]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d203      	bcs.n	80013e4 <u8g2_send_buffer+0x4c>
 80013dc:	7bba      	ldrb	r2, [r7, #14]
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3eb      	bcc.n	80013bc <u8g2_send_buffer+0x24>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ffcf 	bl	8001398 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f001 ff99 	bl	8003332 <u8x8_RefreshDisplay>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	4608      	mov	r0, r1
 8001412:	4611      	mov	r1, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4603      	mov	r3, r0
 8001418:	70fb      	strb	r3, [r7, #3]
 800141a:	460b      	mov	r3, r1
 800141c:	70bb      	strb	r3, [r7, #2]
 800141e:	4613      	mov	r3, r2
 8001420:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001422:	7d3b      	ldrb	r3, [r7, #20]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d017      	beq.n	800145c <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 800142c:	787a      	ldrb	r2, [r7, #1]
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	4413      	add	r3, r2
 8001432:	b2d9      	uxtb	r1, r3
 8001434:	7c3a      	ldrb	r2, [r7, #16]
 8001436:	78bb      	ldrb	r3, [r7, #2]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f001 f889 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8001444:	787a      	ldrb	r2, [r7, #1]
 8001446:	78bb      	ldrb	r3, [r7, #2]
 8001448:	4413      	add	r3, r2
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	7c3a      	ldrb	r2, [r7, #16]
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f001 f87d 	bl	8002556 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800145c:	7d3b      	ldrb	r3, [r7, #20]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d017      	beq.n	8001496 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8001466:	787a      	ldrb	r2, [r7, #1]
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	7c3a      	ldrb	r2, [r7, #16]
 8001470:	78bb      	ldrb	r3, [r7, #2]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f001 f86c 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 800147e:	787a      	ldrb	r2, [r7, #1]
 8001480:	78bb      	ldrb	r3, [r7, #2]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b2d9      	uxtb	r1, r3
 8001486:	7c3a      	ldrb	r2, [r7, #16]
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f001 f860 	bl	8002556 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001496:	7d3b      	ldrb	r3, [r7, #20]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d017      	beq.n	80014d0 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80014a0:	787a      	ldrb	r2, [r7, #1]
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	4413      	add	r3, r2
 80014a6:	b2d9      	uxtb	r1, r3
 80014a8:	7c3a      	ldrb	r2, [r7, #16]
 80014aa:	78bb      	ldrb	r3, [r7, #2]
 80014ac:	4413      	add	r3, r2
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f001 f84f 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80014b8:	787a      	ldrb	r2, [r7, #1]
 80014ba:	78bb      	ldrb	r3, [r7, #2]
 80014bc:	4413      	add	r3, r2
 80014be:	b2d9      	uxtb	r1, r3
 80014c0:	7c3a      	ldrb	r2, [r7, #16]
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	4413      	add	r3, r2
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f001 f843 	bl	8002556 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80014d0:	7d3b      	ldrb	r3, [r7, #20]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d017      	beq.n	800150a <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 80014da:	787a      	ldrb	r2, [r7, #1]
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	b2d9      	uxtb	r1, r3
 80014e2:	7c3a      	ldrb	r2, [r7, #16]
 80014e4:	78bb      	ldrb	r3, [r7, #2]
 80014e6:	4413      	add	r3, r2
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f001 f832 	bl	8002556 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 80014f2:	787a      	ldrb	r2, [r7, #1]
 80014f4:	78bb      	ldrb	r3, [r7, #2]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	7c3a      	ldrb	r2, [r7, #16]
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	4413      	add	r3, r2
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f001 f826 	bl	8002556 <u8g2_DrawPixel>
    }
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af02      	add	r7, sp, #8
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	4608      	mov	r0, r1
 800151c:	4611      	mov	r1, r2
 800151e:	461a      	mov	r2, r3
 8001520:	4603      	mov	r3, r0
 8001522:	70fb      	strb	r3, [r7, #3]
 8001524:	460b      	mov	r3, r1
 8001526:	70bb      	strb	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	787b      	ldrb	r3, [r7, #1]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8001542:	7b7a      	ldrb	r2, [r7, #13]
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 800154c:	7b7b      	ldrb	r3, [r7, #13]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	737b      	strb	r3, [r7, #13]
    x = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	733b      	strb	r3, [r7, #12]
    y = rad;
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 800155c:	78f8      	ldrb	r0, [r7, #3]
 800155e:	7afa      	ldrb	r2, [r7, #11]
 8001560:	7b39      	ldrb	r1, [r7, #12]
 8001562:	7e3b      	ldrb	r3, [r7, #24]
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	78bb      	ldrb	r3, [r7, #2]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	4603      	mov	r3, r0
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff4b 	bl	8001408 <u8g2_draw_circle_section>
    
    while ( x < y )
 8001572:	e026      	b.n	80015c2 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0b      	blt.n	8001594 <u8g2_draw_circle+0x82>
      {
        y--;
 800157c:	7afb      	ldrb	r3, [r7, #11]
 800157e:	3b01      	subs	r3, #1
 8001580:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 8001582:	7b7b      	ldrb	r3, [r7, #13]
 8001584:	3302      	adds	r3, #2
 8001586:	b2db      	uxtb	r3, r3
 8001588:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	4413      	add	r3, r2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	3301      	adds	r3, #1
 8001598:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 800159a:	7bbb      	ldrb	r3, [r7, #14]
 800159c:	3302      	adds	r3, #2
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	4413      	add	r3, r2
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 80015ac:	78f8      	ldrb	r0, [r7, #3]
 80015ae:	7afa      	ldrb	r2, [r7, #11]
 80015b0:	7b39      	ldrb	r1, [r7, #12]
 80015b2:	7e3b      	ldrb	r3, [r7, #24]
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	78bb      	ldrb	r3, [r7, #2]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4603      	mov	r3, r0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff23 	bl	8001408 <u8g2_draw_circle_section>
    while ( x < y )
 80015c2:	7b3a      	ldrb	r2, [r7, #12]
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d3d4      	bcc.n	8001574 <u8g2_draw_circle+0x62>
    }
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80015d2:	b590      	push	{r4, r7, lr}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af02      	add	r7, sp, #8
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	4608      	mov	r0, r1
 80015dc:	4611      	mov	r1, r2
 80015de:	461a      	mov	r2, r3
 80015e0:	4603      	mov	r3, r0
 80015e2:	70fb      	strb	r3, [r7, #3]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70bb      	strb	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	787b      	ldrb	r3, [r7, #1]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	b2d9      	uxtb	r1, r3
 80015f4:	78ba      	ldrb	r2, [r7, #2]
 80015f6:	787b      	ldrb	r3, [r7, #1]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	787b      	ldrb	r3, [r7, #1]
 8001600:	4413      	add	r3, r2
 8001602:	b2db      	uxtb	r3, r3
 8001604:	3301      	adds	r3, #1
 8001606:	b2dc      	uxtb	r4, r3
 8001608:	78ba      	ldrb	r2, [r7, #2]
 800160a:	787b      	ldrb	r3, [r7, #1]
 800160c:	4413      	add	r3, r2
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3301      	adds	r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	4623      	mov	r3, r4
 8001618:	4602      	mov	r2, r0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f001 f817 	bl	800264e <u8g2_IsIntersection>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 8001626:	7878      	ldrb	r0, [r7, #1]
 8001628:	78ba      	ldrb	r2, [r7, #2]
 800162a:	78f9      	ldrb	r1, [r7, #3]
 800162c:	7e3b      	ldrb	r3, [r7, #24]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4603      	mov	r3, r0
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff6d 	bl	8001512 <u8g2_draw_circle>
 8001638:	e000      	b.n	800163c <u8g2_DrawCircle+0x6a>
      return;
 800163a:	bf00      	nop
}
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bd90      	pop	{r4, r7, pc}
	...

08001644 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2208      	movs	r2, #8
 8001650:	701a      	strb	r2, [r3, #0]
  return buf;
 8001652:	4b03      	ldr	r3, [pc, #12]	; (8001660 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000294 	.word	0x20000294

08001664 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 800167a:	490c      	ldr	r1, [pc, #48]	; (80016ac <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f001 feb7 	bl	80033f0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001682:	f107 0313 	add.w	r3, r7, #19
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ffdc 	bl	8001644 <u8g2_m_16_8_f>
 800168c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800168e:	7cfa      	ldrb	r2, [r7, #19]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 8001696:	6979      	ldr	r1, [r7, #20]
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f001 f8c0 	bl	800281e <u8g2_SetupBuffer>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08002fb5 	.word	0x08002fb5
 80016ac:	08003151 	.word	0x08003151
 80016b0:	080026a5 	.word	0x080026a5

080016b4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	81fb      	strh	r3, [r7, #14]
    font++;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3301      	adds	r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80016f6:	89fb      	ldrh	r3, [r7, #14]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b29a      	uxth	r2, r3
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	4413      	add	r3, r2
 8001706:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001708:	89fb      	ldrh	r3, [r7, #14]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800171e:	2100      	movs	r1, #0
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f7ff ffc7 	bl	80016b4 <u8g2_font_get_byte>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800172e:	2101      	movs	r1, #1
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f7ff ffbf 	bl	80016b4 <u8g2_font_get_byte>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800173e:	2102      	movs	r1, #2
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f7ff ffb7 	bl	80016b4 <u8g2_font_get_byte>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800174e:	2103      	movs	r1, #3
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f7ff ffaf 	bl	80016b4 <u8g2_font_get_byte>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800175e:	2104      	movs	r1, #4
 8001760:	6838      	ldr	r0, [r7, #0]
 8001762:	f7ff ffa7 	bl	80016b4 <u8g2_font_get_byte>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800176e:	2105      	movs	r1, #5
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f7ff ff9f 	bl	80016b4 <u8g2_font_get_byte>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800177e:	2106      	movs	r1, #6
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f7ff ff97 	bl	80016b4 <u8g2_font_get_byte>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800178e:	2107      	movs	r1, #7
 8001790:	6838      	ldr	r0, [r7, #0]
 8001792:	f7ff ff8f 	bl	80016b4 <u8g2_font_get_byte>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800179e:	2108      	movs	r1, #8
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f7ff ff87 	bl	80016b4 <u8g2_font_get_byte>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80017ae:	2109      	movs	r1, #9
 80017b0:	6838      	ldr	r0, [r7, #0]
 80017b2:	f7ff ff7f 	bl	80016b4 <u8g2_font_get_byte>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b25a      	sxtb	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80017be:	210a      	movs	r1, #10
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f7ff ff77 	bl	80016b4 <u8g2_font_get_byte>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80017ce:	210b      	movs	r1, #11
 80017d0:	6838      	ldr	r0, [r7, #0]
 80017d2:	f7ff ff6f 	bl	80016b4 <u8g2_font_get_byte>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b25a      	sxtb	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80017de:	210c      	movs	r1, #12
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	f7ff ff67 	bl	80016b4 <u8g2_font_get_byte>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b25a      	sxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80017ee:	210d      	movs	r1, #13
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7ff ff5f 	bl	80016b4 <u8g2_font_get_byte>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b25a      	sxtb	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80017fe:	210e      	movs	r1, #14
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f7ff ff57 	bl	80016b4 <u8g2_font_get_byte>
 8001806:	4603      	mov	r3, r0
 8001808:	b25a      	sxtb	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800180e:	210f      	movs	r1, #15
 8001810:	6838      	ldr	r0, [r7, #0]
 8001812:	f7ff ff4f 	bl	80016b4 <u8g2_font_get_byte>
 8001816:	4603      	mov	r3, r0
 8001818:	b25a      	sxtb	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800181e:	2110      	movs	r1, #16
 8001820:	6838      	ldr	r0, [r7, #0]
 8001822:	f7ff ff47 	bl	80016b4 <u8g2_font_get_byte>
 8001826:	4603      	mov	r3, r0
 8001828:	b25a      	sxtb	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800182e:	2111      	movs	r1, #17
 8001830:	6838      	ldr	r0, [r7, #0]
 8001832:	f7ff ff50 	bl	80016d6 <u8g2_font_get_word>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800183e:	2113      	movs	r1, #19
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f7ff ff48 	bl	80016d6 <u8g2_font_get_word>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800184e:	2115      	movs	r1, #21
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f7ff ff40 	bl	80016d6 <u8g2_font_get_word>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	82da      	strh	r2, [r3, #22]
#endif
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	460b      	mov	r3, r1
 8001870:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7a9b      	ldrb	r3, [r3, #10]
 8001876:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	7b7b      	ldrb	r3, [r7, #13]
 8001884:	fa42 f303 	asr.w	r3, r2, r3
 8001888:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800188a:	7b7b      	ldrb	r3, [r7, #13]
 800188c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800188e:	7bba      	ldrb	r2, [r7, #14]
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	4413      	add	r3, r2
 8001894:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001896:	7bbb      	ldrb	r3, [r7, #14]
 8001898:	2b07      	cmp	r3, #7
 800189a:	d91a      	bls.n	80018d2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800189c:	2308      	movs	r3, #8
 800189e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80018a0:	7b3a      	ldrb	r2, [r7, #12]
 80018a2:	7b7b      	ldrb	r3, [r7, #13]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	7b3b      	ldrb	r3, [r7, #12]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	b25a      	sxtb	r2, r3
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	3b08      	subs	r3, #8
 80018d0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	4013      	ands	r3, r2
 80018e6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7bba      	ldrb	r2, [r7, #14]
 80018ec:	729a      	strb	r2, [r3, #10]
  return val;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	4619      	mov	r1, r3
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffab 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	3b01      	subs	r3, #1
 800191c:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800191e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	7bbb      	ldrb	r3, [r7, #14]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	73fb      	strb	r3, [r7, #15]
  return v;
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001940:	b490      	push	{r4, r7}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4604      	mov	r4, r0
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4623      	mov	r3, r4
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	4603      	mov	r3, r0
 8001954:	71bb      	strb	r3, [r7, #6]
 8001956:	460b      	mov	r3, r1
 8001958:	717b      	strb	r3, [r7, #5]
 800195a:	4613      	mov	r3, r2
 800195c:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800195e:	793b      	ldrb	r3, [r7, #4]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d008      	beq.n	8001976 <u8g2_add_vector_y+0x36>
 8001964:	2b02      	cmp	r3, #2
 8001966:	d00b      	beq.n	8001980 <u8g2_add_vector_y+0x40>
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10e      	bne.n	800198a <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 800196c:	797a      	ldrb	r2, [r7, #5]
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	4413      	add	r3, r2
 8001972:	71fb      	strb	r3, [r7, #7]
      break;
 8001974:	e00e      	b.n	8001994 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8001976:	79ba      	ldrb	r2, [r7, #6]
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	4413      	add	r3, r2
 800197c:	71fb      	strb	r3, [r7, #7]
      break;
 800197e:	e009      	b.n	8001994 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	79fa      	ldrb	r2, [r7, #7]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	71fb      	strb	r3, [r7, #7]
      break;
 8001988:	e004      	b.n	8001994 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 800198a:	79bb      	ldrb	r3, [r7, #6]
 800198c:	79fa      	ldrb	r2, [r7, #7]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	71fb      	strb	r3, [r7, #7]
      break;      
 8001992:	bf00      	nop
  }
  return dy;
 8001994:	79fb      	ldrb	r3, [r7, #7]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bc90      	pop	{r4, r7}
 800199e:	4770      	bx	lr

080019a0 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80019a0:	b490      	push	{r4, r7}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4604      	mov	r4, r0
 80019a8:	4608      	mov	r0, r1
 80019aa:	4611      	mov	r1, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	4603      	mov	r3, r0
 80019b4:	71bb      	strb	r3, [r7, #6]
 80019b6:	460b      	mov	r3, r1
 80019b8:	717b      	strb	r3, [r7, #5]
 80019ba:	4613      	mov	r3, r2
 80019bc:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80019be:	793b      	ldrb	r3, [r7, #4]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d008      	beq.n	80019d6 <u8g2_add_vector_x+0x36>
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d00b      	beq.n	80019e0 <u8g2_add_vector_x+0x40>
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10e      	bne.n	80019ea <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 80019cc:	79ba      	ldrb	r2, [r7, #6]
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4413      	add	r3, r2
 80019d2:	71fb      	strb	r3, [r7, #7]
      break;
 80019d4:	e00e      	b.n	80019f4 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 80019d6:	797b      	ldrb	r3, [r7, #5]
 80019d8:	79fa      	ldrb	r2, [r7, #7]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	71fb      	strb	r3, [r7, #7]
      break;
 80019de:	e009      	b.n	80019f4 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	79fa      	ldrb	r2, [r7, #7]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	71fb      	strb	r3, [r7, #7]
      break;
 80019e8:	e004      	b.n	80019f4 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 80019ea:	797a      	ldrb	r2, [r7, #5]
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	4413      	add	r3, r2
 80019f0:	71fb      	strb	r3, [r7, #7]
      break;      
 80019f2:	bf00      	nop
  }
  return dx;
 80019f4:	79fb      	ldrb	r3, [r7, #7]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc90      	pop	{r4, r7}
 80019fe:	4770      	bx	lr

08001a00 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70fb      	strb	r3, [r7, #3]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3354      	adds	r3, #84	; 0x54
 8001a14:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001a20:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001a28:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a30:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	7d7b      	ldrb	r3, [r7, #21]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001a3e:	7dfa      	ldrb	r2, [r7, #23]
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d201      	bcs.n	8001a4a <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	791b      	ldrb	r3, [r3, #4]
 8001a4e:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	795b      	ldrb	r3, [r3, #5]
 8001a54:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001a56:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a5a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	7b9b      	ldrb	r3, [r3, #14]
 8001a62:	7bb8      	ldrb	r0, [r7, #14]
 8001a64:	f7ff ff9c 	bl	80019a0 <u8g2_add_vector_x>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001a6c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a70:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	7b9b      	ldrb	r3, [r3, #14]
 8001a78:	7b78      	ldrb	r0, [r7, #13]
 8001a7a:	f7ff ff61 	bl	8001940 <u8g2_add_vector_y>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001a82:	78bb      	ldrb	r3, [r7, #2]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00f      	beq.n	8001aa8 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	7b1a      	ldrb	r2, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	7b9b      	ldrb	r3, [r3, #14]
 8001a96:	7db8      	ldrb	r0, [r7, #22]
 8001a98:	7b7a      	ldrb	r2, [r7, #13]
 8001a9a:	7bb9      	ldrb	r1, [r7, #14]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fca1 	bl	80023e8 <u8g2_DrawHVLine>
 8001aa6:	e012      	b.n	8001ace <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	7adb      	ldrb	r3, [r3, #11]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10e      	bne.n	8001ace <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	7b5a      	ldrb	r2, [r3, #13]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	7b9b      	ldrb	r3, [r3, #14]
 8001abe:	7db8      	ldrb	r0, [r7, #22]
 8001ac0:	7b7a      	ldrb	r2, [r7, #13]
 8001ac2:	7bb9      	ldrb	r1, [r7, #14]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fc8d 	bl	80023e8 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001ace:	7dfa      	ldrb	r2, [r7, #23]
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d309      	bcc.n	8001aea <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001ad6:	7dfa      	ldrb	r2, [r7, #23]
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	757b      	strb	r3, [r7, #21]
    ly++;
 8001ae2:	7d3b      	ldrb	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001ae8:	e79f      	b.n	8001a2a <u8g2_font_decode_len+0x2a>
      break;
 8001aea:	bf00      	nop
  }
  lx += cnt;
 8001aec:	7d7a      	ldrb	r2, [r7, #21]
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
 8001af0:	4413      	add	r3, r2
 8001af2:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001af4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001afc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	71da      	strb	r2, [r3, #7]
  
}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3354      	adds	r3, #84	; 0x54
 8001b1a:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001b2e:	4619      	mov	r1, r3
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff fe98 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b25a      	sxtb	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001b44:	4619      	mov	r1, r3
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7ff fe8d 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b25a      	sxtb	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	7b1b      	ldrb	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf0c      	ite	eq
 8001b66:	2301      	moveq	r3, #1
 8001b68:	2300      	movne	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	735a      	strb	r2, [r3, #13]
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3354      	adds	r3, #84	; 0x54
 8001b8a:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffbc 	bl	8001b0c <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b9a:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6938      	ldr	r0, [r7, #16]
 8001ba6:	f7ff fea8 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001baa:	4603      	mov	r3, r0
 8001bac:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	6938      	ldr	r0, [r7, #16]
 8001bb8:	f7ff fe9f 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6938      	ldr	r0, [r7, #16]
 8001bca:	f7ff fe96 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f340 80cf 	ble.w	8001d7c <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	7918      	ldrb	r0, [r3, #4]
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	7b7b      	ldrb	r3, [r7, #13]
 8001be6:	4413      	add	r3, r2
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	425b      	negs	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	b25a      	sxtb	r2, r3
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	7b9b      	ldrb	r3, [r3, #14]
 8001bf4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001bf8:	f7ff fed2 	bl	80019a0 <u8g2_add_vector_x>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	7958      	ldrb	r0, [r3, #5]
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	7b7b      	ldrb	r3, [r7, #13]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	425b      	negs	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	b25a      	sxtb	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	7b9b      	ldrb	r3, [r3, #14]
 8001c1a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001c1e:	f7ff fe8f 	bl	8001940 <u8g2_add_vector_y>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461a      	mov	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	791b      	ldrb	r3, [r3, #4]
 8001c2e:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	795b      	ldrb	r3, [r3, #5]
 8001c34:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001c3a:	7d7b      	ldrb	r3, [r7, #21]
 8001c3c:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	7b9b      	ldrb	r3, [r3, #14]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d852      	bhi.n	8001cec <u8g2_font_decode_glyph+0x170>
 8001c46:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <u8g2_font_decode_glyph+0xd0>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001c5d 	.word	0x08001c5d
 8001c50:	08001c75 	.word	0x08001c75
 8001c54:	08001c99 	.word	0x08001c99
 8001c58:	08001cc9 	.word	0x08001cc9
      {
	case 0:
	    x1 += decode->glyph_width;
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	7dbb      	ldrb	r3, [r7, #22]
 8001c66:	4413      	add	r3, r2
 8001c68:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	7d3b      	ldrb	r3, [r7, #20]
 8001c6e:	4413      	add	r3, r2
 8001c70:	753b      	strb	r3, [r7, #20]
	    break;
 8001c72:	e03b      	b.n	8001cec <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	7dfa      	ldrb	r2, [r7, #23]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001c82:	7dbb      	ldrb	r3, [r7, #22]
 8001c84:	3301      	adds	r3, #1
 8001c86:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	7d3b      	ldrb	r3, [r7, #20]
 8001c92:	4413      	add	r3, r2
 8001c94:	753b      	strb	r3, [r7, #20]
	    break;
 8001c96:	e029      	b.n	8001cec <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	7dfa      	ldrb	r2, [r7, #23]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001cac:	7dbb      	ldrb	r3, [r7, #22]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	7d7a      	ldrb	r2, [r7, #21]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cba:	7d7b      	ldrb	r3, [r7, #21]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001cc0:	7d3b      	ldrb	r3, [r7, #20]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001cc6:	e011      	b.n	8001cec <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	7dbb      	ldrb	r3, [r7, #22]
 8001ccc:	4413      	add	r3, r2
 8001cce:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	7d7a      	ldrb	r2, [r7, #21]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cde:	7d7b      	ldrb	r3, [r7, #21]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001ce4:	7d3b      	ldrb	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001cea:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001cec:	7db8      	ldrb	r0, [r7, #22]
 8001cee:	7d7a      	ldrb	r2, [r7, #21]
 8001cf0:	7df9      	ldrb	r1, [r7, #23]
 8001cf2:	7d3b      	ldrb	r3, [r7, #20]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fca8 	bl	800264e <u8g2_IsIntersection>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <u8g2_font_decode_glyph+0x18e>
	return d;
 8001d04:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001d08:	e03a      	b.n	8001d80 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2200      	movs	r2, #0
 8001d14:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6938      	ldr	r0, [r7, #16]
 8001d20:	f7ff fda1 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001d24:	4603      	mov	r3, r0
 8001d26:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6938      	ldr	r0, [r7, #16]
 8001d32:	f7ff fd98 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001d36:	4603      	mov	r3, r0
 8001d38:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fe5d 	bl	8001a00 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001d46:	7abb      	ldrb	r3, [r7, #10]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fe57 	bl	8001a00 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001d52:	2101      	movs	r1, #1
 8001d54:	6938      	ldr	r0, [r7, #16]
 8001d56:	f7ff fd86 	bl	8001866 <u8g2_font_decode_get_unsigned_bits>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ec      	bne.n	8001d3a <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001d66:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dd00      	ble.n	8001d70 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001d6e:	e7d2      	b.n	8001d16 <u8g2_font_decode_glyph+0x19a>
	break;
 8001d70:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	7b1a      	ldrb	r2, [r3, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8001d7c:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3317      	adds	r3, #23
 8001d9e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	d82a      	bhi.n	8001dfc <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	2b60      	cmp	r3, #96	; 0x60
 8001daa:	d907      	bls.n	8001dbc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001db2:	461a      	mov	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e009      	b.n	8001dd0 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d906      	bls.n	8001dd0 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001dc8:	461a      	mov	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d04e      	beq.n	8001e78 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	887a      	ldrh	r2, [r7, #2]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d102      	bne.n	8001dec <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3302      	adds	r3, #2
 8001dea:	e049      	b.n	8001e80 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	4413      	add	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001dfa:	e7e9      	b.n	8001dd0 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001e02:	461a      	mov	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	4413      	add	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6938      	ldr	r0, [r7, #16]
 8001e12:	f7ff fc60 	bl	80016d6 <u8g2_font_get_word>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001e20:	2102      	movs	r1, #2
 8001e22:	6938      	ldr	r0, [r7, #16]
 8001e24:	f7ff fc57 	bl	80016d6 <u8g2_font_get_word>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001e32:	89fa      	ldrh	r2, [r7, #14]
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3e9      	bcc.n	8001e0e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001e40:	89fb      	ldrh	r3, [r7, #14]
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	89fb      	ldrh	r3, [r7, #14]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d010      	beq.n	8001e7c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001e5a:	89fa      	ldrh	r2, [r7, #14]
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d102      	bne.n	8001e68 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3303      	adds	r3, #3
 8001e66:	e00b      	b.n	8001e80 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4413      	add	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001e76:	e7e0      	b.n	8001e3a <u8g2_font_get_glyph_data+0xb2>
	break;
 8001e78:	bf00      	nop
 8001e7a:	e000      	b.n	8001e7e <u8g2_font_get_glyph_data+0xf6>
	break;
 8001e7c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	4608      	mov	r0, r1
 8001e92:	4611      	mov	r1, r2
 8001e94:	461a      	mov	r2, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	70fb      	strb	r3, [r7, #3]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	70bb      	strb	r3, [r7, #2]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	78ba      	ldrb	r2, [r7, #2]
 8001eb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001eb6:	883b      	ldrh	r3, [r7, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ff64 	bl	8001d88 <u8g2_font_get_glyph_data>
 8001ec0:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fe56 	bl	8001b7c <u8g2_font_decode_glyph>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	4619      	mov	r1, r3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ff4a 	bl	8001d88 <u8g2_font_get_glyph_data>
 8001ef4:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001efc:	2300      	movs	r3, #0
 8001efe:	e027      	b.n	8001f50 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fe02 	bl	8001b0c <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001f14:	4619      	mov	r1, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f7ff fcef 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f7ff fce0 	bl	80018fa <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001f46:	4619      	mov	r1, r3
 8001f48:	4610      	mov	r0, r2
 8001f4a:	f7ff fcd6 	bl	80018fa <u8g2_font_decode_get_signed_bits>
 8001f4e:	4603      	mov	r3, r0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	4608      	mov	r0, r1
 8001f82:	4611      	mov	r1, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4603      	mov	r3, r0
 8001f88:	70fb      	strb	r3, [r7, #3]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70bb      	strb	r3, [r7, #2]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d833      	bhi.n	8002004 <u8g2_DrawGlyph+0x8c>
 8001f9c:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <u8g2_DrawGlyph+0x2c>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fc9 	.word	0x08001fc9
 8001fac:	08001fdd 	.word	0x08001fdd
 8001fb0:	08001ff1 	.word	0x08001ff1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	78bb      	ldrb	r3, [r7, #2]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	70bb      	strb	r3, [r7, #2]
      break;
 8001fc6:	e01d      	b.n	8002004 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	70fb      	strb	r3, [r7, #3]
      break;
 8001fda:	e013      	b.n	8002004 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	78bb      	ldrb	r3, [r7, #2]
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	70bb      	strb	r3, [r7, #2]
      break;
 8001fee:	e009      	b.n	8002004 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	4413      	add	r3, r2
 8002000:	70fb      	strb	r3, [r7, #3]
      break;
 8002002:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002004:	883b      	ldrh	r3, [r7, #0]
 8002006:	78ba      	ldrb	r2, [r7, #2]
 8002008:	78f9      	ldrb	r1, [r7, #3]
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff3c 	bl	8001e88 <u8g2_font_draw_glyph>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop

0800201c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	72fb      	strb	r3, [r7, #11]
 800202a:	4613      	mov	r3, r2
 800202c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fec2 	bl	8002db8 <u8x8_utf8_init>
  sum = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	4611      	mov	r1, r2
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	4798      	blx	r3
 8002046:	4603      	mov	r3, r0
 8002048:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800204a:	8abb      	ldrh	r3, [r7, #20]
 800204c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002050:	4293      	cmp	r3, r2
 8002052:	d038      	beq.n	80020c6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3301      	adds	r3, #1
 8002058:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800205a:	8abb      	ldrh	r3, [r7, #20]
 800205c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002060:	4293      	cmp	r3, r2
 8002062:	d0e9      	beq.n	8002038 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002064:	8abb      	ldrh	r3, [r7, #20]
 8002066:	7aba      	ldrb	r2, [r7, #10]
 8002068:	7af9      	ldrb	r1, [r7, #11]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff ff84 	bl	8001f78 <u8g2_DrawGlyph>
 8002070:	4603      	mov	r3, r0
 8002072:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800207a:	2b03      	cmp	r3, #3
 800207c:	d81e      	bhi.n	80020bc <u8g2_draw_string+0xa0>
 800207e:	a201      	add	r2, pc, #4	; (adr r2, 8002084 <u8g2_draw_string+0x68>)
 8002080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002084:	08002095 	.word	0x08002095
 8002088:	0800209f 	.word	0x0800209f
 800208c:	080020a9 	.word	0x080020a9
 8002090:	080020b3 	.word	0x080020b3
      {
	case 0:
	  x += delta;
 8002094:	7afa      	ldrb	r2, [r7, #11]
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	4413      	add	r3, r2
 800209a:	72fb      	strb	r3, [r7, #11]
	  break;
 800209c:	e00e      	b.n	80020bc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800209e:	7aba      	ldrb	r2, [r7, #10]
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	4413      	add	r3, r2
 80020a4:	72bb      	strb	r3, [r7, #10]
	  break;
 80020a6:	e009      	b.n	80020bc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80020a8:	7afa      	ldrb	r2, [r7, #11]
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	72fb      	strb	r3, [r7, #11]
	  break;
 80020b0:	e004      	b.n	80020bc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80020b2:	7aba      	ldrb	r2, [r7, #10]
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	72bb      	strb	r3, [r7, #10]
	  break;
 80020ba:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80020bc:	7dfa      	ldrb	r2, [r7, #23]
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	4413      	add	r3, r2
 80020c2:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80020c4:	e7b8      	b.n	8002038 <u8g2_draw_string+0x1c>
      break;
 80020c6:	bf00      	nop
    }
  }
  return sum;
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop

080020d4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	72fb      	strb	r3, [r7, #11]
 80020e2:	4613      	mov	r3, r2
 80020e4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <u8g2_DrawStr+0x30>)
 80020ea:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80020ec:	7aba      	ldrb	r2, [r7, #10]
 80020ee:	7af9      	ldrb	r1, [r7, #11]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff ff92 	bl	800201c <u8g2_draw_string>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	08002dd3 	.word	0x08002dd3

08002108 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d05d      	beq.n	80021d4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04d      	beq.n	80021d6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002140:	2b01      	cmp	r3, #1
 8002142:	d11c      	bne.n	800217e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8002150:	429a      	cmp	r2, r3
 8002152:	da05      	bge.n	8002160 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800216c:	429a      	cmp	r2, r3
 800216e:	dd32      	ble.n	80021d6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800217c:	e02b      	b.n	80021d6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002184:	461a      	mov	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 800218c:	4619      	mov	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8002194:	440b      	add	r3, r1
 8002196:	429a      	cmp	r2, r3
 8002198:	da0d      	bge.n	80021b6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	b25a      	sxtb	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dd07      	ble.n	80021d6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80021d2:	e000      	b.n	80021d6 <u8g2_UpdateRefHeight+0xce>
    return;
 80021d4:	bf00      	nop
  }  
}
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  return 0;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
	...

080021f4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a03      	ldr	r2, [pc, #12]	; (800220c <u8g2_SetFontPosBaseline+0x18>)
 8002200:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	080021df 	.word	0x080021df

08002210 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d00b      	beq.n	800223c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3364      	adds	r3, #100	; 0x64
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fa6f 	bl	8001714 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff66 	bl	8002108 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fdae 	bl	8002db8 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	4611      	mov	r1, r2
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
 8002272:	4603      	mov	r3, r0
 8002274:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 8002276:	89bb      	ldrh	r3, [r7, #12]
 8002278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <u8g2_string_width+0x64>
      break;
    str++;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8002286:	89bb      	ldrh	r3, [r7, #12]
 8002288:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800228c:	4293      	cmp	r3, r2
 800228e:	d0e9      	beq.n	8002264 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002290:	89bb      	ldrh	r3, [r7, #12]
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fe22 	bl	8001ede <u8g2_GetGlyphWidth>
 800229a:	4603      	mov	r3, r0
 800229c:	73bb      	strb	r3, [r7, #14]
      w += dx;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	7bbb      	ldrb	r3, [r7, #14]
 80022a2:	4413      	add	r3, r2
 80022a4:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80022a6:	e7dd      	b.n	8002264 <u8g2_string_width+0x20>
      break;
 80022a8:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d011      	beq.n	80022d8 <u8g2_string_width+0x94>
  {
    w -= dx;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	4413      	add	r3, r2
 80022c8:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	4413      	add	r3, r2
 80022d6:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a05      	ldr	r2, [pc, #20]	; (8002308 <u8g2_GetStrWidth+0x24>)
 80022f2:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa4 	bl	8002244 <u8g2_string_width>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	08002dd3 	.word	0x08002dd3

0800230c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	460b      	mov	r3, r1
 800231c:	71fb      	strb	r3, [r7, #7]
 800231e:	4613      	mov	r3, r2
 8002320:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	7dbb      	ldrb	r3, [r7, #22]
 8002332:	4413      	add	r3, r2
 8002334:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002336:	7dfa      	ldrb	r2, [r7, #23]
 8002338:	7dbb      	ldrb	r3, [r7, #22]
 800233a:	429a      	cmp	r2, r3
 800233c:	d90b      	bls.n	8002356 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800233e:	7dfa      	ldrb	r2, [r7, #23]
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	429a      	cmp	r2, r3
 8002344:	d205      	bcs.n	8002352 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002346:	79bb      	ldrb	r3, [r7, #6]
 8002348:	75bb      	strb	r3, [r7, #22]
      b--;
 800234a:	7dbb      	ldrb	r3, [r7, #22]
 800234c:	3b01      	subs	r3, #1
 800234e:	75bb      	strb	r3, [r7, #22]
 8002350:	e001      	b.n	8002356 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002356:	7dfa      	ldrb	r2, [r7, #23]
 8002358:	79bb      	ldrb	r3, [r7, #6]
 800235a:	429a      	cmp	r2, r3
 800235c:	d301      	bcc.n	8002362 <u8g2_clip_intersection2+0x56>
    return 0;
 800235e:	2300      	movs	r3, #0
 8002360:	e01c      	b.n	800239c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002362:	7dba      	ldrb	r2, [r7, #22]
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	429a      	cmp	r2, r3
 8002368:	d801      	bhi.n	800236e <u8g2_clip_intersection2+0x62>
    return 0;
 800236a:	2300      	movs	r3, #0
 800236c:	e016      	b.n	800239c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800236e:	7dfa      	ldrb	r2, [r7, #23]
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	429a      	cmp	r2, r3
 8002374:	d201      	bcs.n	800237a <u8g2_clip_intersection2+0x6e>
    a = c;
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800237a:	7dba      	ldrb	r2, [r7, #22]
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	429a      	cmp	r2, r3
 8002380:	d901      	bls.n	8002386 <u8g2_clip_intersection2+0x7a>
    b = d;
 8002382:	79bb      	ldrb	r3, [r7, #6]
 8002384:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	7dfa      	ldrb	r2, [r7, #23]
 800238a:	701a      	strb	r2, [r3, #0]
  b -= a;
 800238c:	7dba      	ldrb	r2, [r7, #22]
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	7dba      	ldrb	r2, [r7, #22]
 8002398:	701a      	strb	r2, [r3, #0]
  return 1;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023a6:	b590      	push	{r4, r7, lr}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af02      	add	r7, sp, #8
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	4608      	mov	r0, r1
 80023b0:	4611      	mov	r1, r2
 80023b2:	461a      	mov	r2, r3
 80023b4:	4603      	mov	r3, r0
 80023b6:	70fb      	strb	r3, [r7, #3]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70bb      	strb	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c6:	78ba      	ldrb	r2, [r7, #2]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80023d0:	7878      	ldrb	r0, [r7, #1]
 80023d2:	78ba      	ldrb	r2, [r7, #2]
 80023d4:	78f9      	ldrb	r1, [r7, #3]
 80023d6:	7e3b      	ldrb	r3, [r7, #24]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	4603      	mov	r3, r0
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	47a0      	blx	r4
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}

080023e8 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	4608      	mov	r0, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	70fb      	strb	r3, [r7, #3]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70bb      	strb	r3, [r7, #2]
 80023fe:	4613      	mov	r3, r2
 8002400:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d06d      	beq.n	80024e8 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d06a      	beq.n	80024e8 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002412:	787b      	ldrb	r3, [r7, #1]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d918      	bls.n	800244a <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8002418:	7e3b      	ldrb	r3, [r7, #24]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d109      	bne.n	8002432 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	70fb      	strb	r3, [r7, #3]
	  x++;
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	3301      	adds	r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	70fb      	strb	r3, [r7, #3]
 8002430:	e00b      	b.n	800244a <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8002432:	7e3b      	ldrb	r3, [r7, #24]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d108      	bne.n	800244a <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8002438:	78ba      	ldrb	r2, [r7, #2]
 800243a:	787b      	ldrb	r3, [r7, #1]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	70bb      	strb	r3, [r7, #2]
	  y++;
 8002442:	78bb      	ldrb	r3, [r7, #2]
 8002444:	3301      	adds	r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800244a:	7e3b      	ldrb	r3, [r7, #24]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002452:	7e3b      	ldrb	r3, [r7, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d119      	bne.n	800248c <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800245e:	78bb      	ldrb	r3, [r7, #2]
 8002460:	429a      	cmp	r2, r3
 8002462:	d838      	bhi.n	80024d6 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800246a:	78bb      	ldrb	r3, [r7, #2]
 800246c:	429a      	cmp	r2, r3
 800246e:	d934      	bls.n	80024da <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800247c:	1c79      	adds	r1, r7, #1
 800247e:	1cf8      	adds	r0, r7, #3
 8002480:	f7ff ff44 	bl	800230c <u8g2_clip_intersection2>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d119      	bne.n	80024be <u8g2_DrawHVLine+0xd6>
	  return;
 800248a:	e02d      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	429a      	cmp	r2, r3
 8002496:	d822      	bhi.n	80024de <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d91e      	bls.n	80024e2 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024b0:	1c79      	adds	r1, r7, #1
 80024b2:	1cb8      	adds	r0, r7, #2
 80024b4:	f7ff ff2a 	bl	800230c <u8g2_clip_intersection2>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d013      	beq.n	80024e6 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	689c      	ldr	r4, [r3, #8]
 80024c4:	78f9      	ldrb	r1, [r7, #3]
 80024c6:	78ba      	ldrb	r2, [r7, #2]
 80024c8:	7878      	ldrb	r0, [r7, #1]
 80024ca:	7e3b      	ldrb	r3, [r7, #24]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4603      	mov	r3, r0
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	47a0      	blx	r4
 80024d4:	e008      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024d6:	bf00      	nop
 80024d8:	e006      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024da:	bf00      	nop
 80024dc:	e004      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024de:	bf00      	nop
 80024e0:	e002      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024e2:	bf00      	nop
 80024e4:	e000      	b.n	80024e8 <u8g2_DrawHVLine+0x100>
	  return;
 80024e6:	bf00      	nop
    }
}
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd90      	pop	{r4, r7, pc}

080024ee <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af02      	add	r7, sp, #8
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	4608      	mov	r0, r1
 80024f8:	4611      	mov	r1, r2
 80024fa:	461a      	mov	r2, r3
 80024fc:	4603      	mov	r3, r0
 80024fe:	70fb      	strb	r3, [r7, #3]
 8002500:	460b      	mov	r3, r1
 8002502:	70bb      	strb	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8002508:	7878      	ldrb	r0, [r7, #1]
 800250a:	78ba      	ldrb	r2, [r7, #2]
 800250c:	78f9      	ldrb	r1, [r7, #3]
 800250e:	2300      	movs	r3, #0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	4603      	mov	r3, r0
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff67 	bl	80023e8 <u8g2_DrawHVLine>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af02      	add	r7, sp, #8
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	4608      	mov	r0, r1
 800252c:	4611      	mov	r1, r2
 800252e:	461a      	mov	r2, r3
 8002530:	4603      	mov	r3, r0
 8002532:	70fb      	strb	r3, [r7, #3]
 8002534:	460b      	mov	r3, r1
 8002536:	70bb      	strb	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 800253c:	7878      	ldrb	r0, [r7, #1]
 800253e:	78ba      	ldrb	r2, [r7, #2]
 8002540:	78f9      	ldrb	r1, [r7, #3]
 8002542:	2301      	movs	r3, #1
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4603      	mov	r3, r0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff4d 	bl	80023e8 <u8g2_DrawHVLine>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af02      	add	r7, sp, #8
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	70fb      	strb	r3, [r7, #3]
 8002562:	4613      	mov	r3, r2
 8002564:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800256c:	78ba      	ldrb	r2, [r7, #2]
 800256e:	429a      	cmp	r2, r3
 8002570:	d31a      	bcc.n	80025a8 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002578:	78ba      	ldrb	r2, [r7, #2]
 800257a:	429a      	cmp	r2, r3
 800257c:	d216      	bcs.n	80025ac <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	429a      	cmp	r2, r3
 8002588:	d312      	bcc.n	80025b0 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	429a      	cmp	r2, r3
 8002594:	d20e      	bcs.n	80025b4 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002596:	78ba      	ldrb	r2, [r7, #2]
 8002598:	78f9      	ldrb	r1, [r7, #3]
 800259a:	2300      	movs	r3, #0
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2301      	movs	r3, #1
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff21 	bl	80023e8 <u8g2_DrawHVLine>
 80025a6:	e006      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025a8:	bf00      	nop
 80025aa:	e004      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025ac:	bf00      	nop
 80025ae:	e002      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025b0:	bf00      	nop
 80025b2:	e000      	b.n	80025b6 <u8g2_DrawPixel+0x60>
    return;
 80025b4:	bf00      	nop
}
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d903      	bls.n	80025de <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80025e8:	b490      	push	{r4, r7}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4604      	mov	r4, r0
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	4603      	mov	r3, r0
 80025fc:	71bb      	strb	r3, [r7, #6]
 80025fe:	460b      	mov	r3, r1
 8002600:	717b      	strb	r3, [r7, #5]
 8002602:	4613      	mov	r3, r2
 8002604:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8002606:	797a      	ldrb	r2, [r7, #5]
 8002608:	79bb      	ldrb	r3, [r7, #6]
 800260a:	429a      	cmp	r2, r3
 800260c:	d20d      	bcs.n	800262a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800260e:	793a      	ldrb	r2, [r7, #4]
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	429a      	cmp	r2, r3
 8002614:	d901      	bls.n	800261a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002616:	2301      	movs	r3, #1
 8002618:	e014      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800261a:	797a      	ldrb	r2, [r7, #5]
 800261c:	793b      	ldrb	r3, [r7, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	d901      	bls.n	8002626 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002622:	2301      	movs	r3, #1
 8002624:	e00e      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002626:	2300      	movs	r3, #0
 8002628:	e00c      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800262a:	793a      	ldrb	r2, [r7, #4]
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	429a      	cmp	r2, r3
 8002630:	d907      	bls.n	8002642 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002632:	797a      	ldrb	r2, [r7, #5]
 8002634:	793b      	ldrb	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d901      	bls.n	800263e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800263a:	2301      	movs	r3, #1
 800263c:	e002      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002642:	2300      	movs	r3, #0
    }
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bc90      	pop	{r4, r7}
 800264c:	4770      	bx	lr

0800264e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	4608      	mov	r0, r1
 8002658:	4611      	mov	r1, r2
 800265a:	461a      	mov	r2, r3
 800265c:	4603      	mov	r3, r0
 800265e:	70fb      	strb	r3, [r7, #3]
 8002660:	460b      	mov	r3, r1
 8002662:	70bb      	strb	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8002674:	7c3b      	ldrb	r3, [r7, #16]
 8002676:	78ba      	ldrb	r2, [r7, #2]
 8002678:	f7ff ffb6 	bl	80025e8 <u8g2_is_intersection_decision_tree>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <u8g2_IsIntersection+0x38>
    return 0; 
 8002682:	2300      	movs	r3, #0
 8002684:	e00a      	b.n	800269c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8002692:	787b      	ldrb	r3, [r7, #1]
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	f7ff ffa7 	bl	80025e8 <u8g2_is_intersection_decision_tree>
 800269a:	4603      	mov	r3, r0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	4608      	mov	r0, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	70fb      	strb	r3, [r7, #3]
 80026b6:	460b      	mov	r3, r1
 80026b8:	70bb      	strb	r3, [r7, #2]
 80026ba:	4613      	mov	r3, r2
 80026bc:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80026be:	78bb      	ldrb	r3, [r7, #2]
 80026c0:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 80026ce:	7c3a      	ldrb	r2, [r7, #16]
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d801      	bhi.n	80026ee <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80026ea:	7c3b      	ldrb	r3, [r7, #16]
 80026ec:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d001      	beq.n	80026fc <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80026f8:	7c3b      	ldrb	r3, [r7, #16]
 80026fa:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80026fc:	78bb      	ldrb	r3, [r7, #2]
 80026fe:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	f023 0307 	bic.w	r3, r3, #7
 8002706:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	7c1b      	ldrb	r3, [r3, #16]
 800270e:	b29b      	uxth	r3, r3
 8002710:	89fa      	ldrh	r2, [r7, #14]
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800271e:	89fb      	ldrh	r3, [r7, #14]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4413      	add	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
  ptr += x;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4413      	add	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800272e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d117      	bne.n	8002766 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	7cbb      	ldrb	r3, [r7, #18]
 800273c:	4313      	orrs	r3, r2
 800273e:	b2da      	uxtb	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	4053      	eors	r3, r2
 800274c:	b2da      	uxtb	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
	len--;
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	3b01      	subs	r3, #1
 800275c:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800275e:	787b      	ldrb	r3, [r7, #1]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e8      	bne.n	8002736 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002764:	e039      	b.n	80027da <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	7cbb      	ldrb	r3, [r7, #18]
 800276c:	4313      	orrs	r3, r2
 800276e:	b2da      	uxtb	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	7c7b      	ldrb	r3, [r7, #17]
 800277a:	4053      	eors	r3, r2
 800277c:	b2da      	uxtb	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	3301      	adds	r3, #1
 8002786:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	74fb      	strb	r3, [r7, #19]
      len--;
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	3b01      	subs	r3, #1
 8002794:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d115      	bne.n	80027c8 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027a2:	461a      	mov	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	4413      	add	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d801      	bhi.n	80027b8 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80027b4:	2301      	movs	r3, #1
 80027b6:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d008      	beq.n	80027d4 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	747b      	strb	r3, [r7, #17]
 80027c6:	e005      	b.n	80027d4 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80027c8:	7cbb      	ldrb	r3, [r7, #18]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 80027ce:	7c7b      	ldrb	r3, [r7, #17]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1c5      	bne.n	8002766 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	22ff      	movs	r2, #255	; 0xff
 8002800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	22ff      	movs	r2, #255	; 0xff
 8002808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	79fa      	ldrb	r2, [r7, #7]
 8002844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff ffaf 	bl	80027e4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff fcb4 	bl	80021f4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028b0:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	7c1b      	ldrb	r3, [r3, #16]
 80028c4:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b1f      	cmp	r3, #31
 80028ca:	d901      	bls.n	80028d0 <u8g2_update_dimension_common+0x34>
    t = 31;
 80028cc:	231f      	movs	r3, #31
 80028ce:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028e4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028fa:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002904:	4413      	add	r3, r2
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	7c52      	ldrb	r2, [r2, #17]
 800290a:	4293      	cmp	r3, r2
 800290c:	dd06      	ble.n	800291c <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	7c5a      	ldrb	r2, [r3, #17]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	4413      	add	r3, r2
 8002944:	b2da      	uxtb	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	22f0      	movs	r2, #240	; 0xf0
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	8a9b      	ldrh	r3, [r3, #20]
 8002958:	2bf0      	cmp	r3, #240	; 0xf0
 800295a:	d805      	bhi.n	8002968 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	8a9b      	ldrh	r3, [r3, #20]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	8adb      	ldrh	r3, [r3, #22]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af02      	add	r7, sp, #8
 8002984:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4603      	mov	r3, r0
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fe53 	bl	800264e <u8g2_IsIntersection>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80029b6:	e03b      	b.n	8002a30 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d205      	bcs.n	80029dc <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d905      	bls.n	80029f8 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d205      	bcs.n	8002a14 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d905      	bls.n	8002a30 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff2b 	bl	800289c <u8g2_update_dimension_common>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ff7b 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff feff 	bl	800289c <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	8a9b      	ldrh	r3, [r3, #20]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	8adb      	ldrh	r3, [r3, #22]
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ff41 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fec5 	bl	800289c <u8g2_update_dimension_common>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d30a      	bcc.n	8002b64 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff feff 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fe83 	bl	800289c <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	8a9b      	ldrh	r3, [r3, #20]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	8adb      	ldrh	r3, [r3, #22]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d30a      	bcc.n	8002bf0 <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff feaf 	bl	800297e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	70fb      	strb	r3, [r7, #3]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70bb      	strb	r3, [r7, #2]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002c42:	7878      	ldrb	r0, [r7, #1]
 8002c44:	78ba      	ldrb	r2, [r7, #2]
 8002c46:	78f9      	ldrb	r1, [r7, #3]
 8002c48:	7c3b      	ldrb	r3, [r7, #16]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fba9 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	4608      	mov	r0, r1
 8002c66:	4611      	mov	r1, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	70fb      	strb	r3, [r7, #3]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	70bb      	strb	r3, [r7, #2]
 8002c72:	4613      	mov	r3, r2
 8002c74:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c80:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	78bb      	ldrb	r3, [r7, #2]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	73fb      	strb	r3, [r7, #15]
  xx--;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8002c90:	7e3b      	ldrb	r3, [r7, #24]
 8002c92:	3301      	adds	r3, #1
 8002c94:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8002c96:	7e3b      	ldrb	r3, [r7, #24]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d108      	bne.n	8002cae <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	787b      	ldrb	r3, [r7, #1]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	73fb      	strb	r3, [r7, #15]
    xx++;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002cae:	7878      	ldrb	r0, [r7, #1]
 8002cb0:	7bba      	ldrb	r2, [r7, #14]
 8002cb2:	7bf9      	ldrb	r1, [r7, #15]
 8002cb4:	7e3b      	ldrb	r3, [r7, #24]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4603      	mov	r3, r0
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fb73 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	70fb      	strb	r3, [r7, #3]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	70bb      	strb	r3, [r7, #2]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce8:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8002cea:	7bba      	ldrb	r2, [r7, #14]
 8002cec:	78bb      	ldrb	r3, [r7, #2]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cf8:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002d02:	7e3b      	ldrb	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8002d08:	7bbb      	ldrb	r3, [r7, #14]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e009      	b.n	8002d2c <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8002d18:	7e3b      	ldrb	r3, [r7, #24]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d106      	bne.n	8002d2c <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002d24:	7bba      	ldrb	r2, [r7, #14]
 8002d26:	787b      	ldrb	r3, [r7, #1]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002d2c:	7878      	ldrb	r0, [r7, #1]
 8002d2e:	7bba      	ldrb	r2, [r7, #14]
 8002d30:	7bf9      	ldrb	r1, [r7, #15]
 8002d32:	7e3b      	ldrb	r3, [r7, #24]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	4603      	mov	r3, r0
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff fb34 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af02      	add	r7, sp, #8
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	4608      	mov	r0, r1
 8002d50:	4611      	mov	r1, r2
 8002d52:	461a      	mov	r2, r3
 8002d54:	4603      	mov	r3, r0
 8002d56:	70fb      	strb	r3, [r7, #3]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70bb      	strb	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8002d60:	78bb      	ldrb	r3, [r7, #2]
 8002d62:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d6a:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002d74:	7e3b      	ldrb	r3, [r7, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	787b      	ldrb	r3, [r7, #1]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	73fb      	strb	r3, [r7, #15]
    yy++;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	763b      	strb	r3, [r7, #24]
 8002d92:	e004      	b.n	8002d9e <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002d9e:	7878      	ldrb	r0, [r7, #1]
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	7bb9      	ldrb	r1, [r7, #14]
 8002da4:	7e3b      	ldrb	r3, [r7, #24]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	4603      	mov	r3, r0
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fafb 	bl	80023a6 <u8g2_draw_hv_line_2dir>
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <u8x8_ascii_next+0x18>
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	2b0a      	cmp	r3, #10
 8002de8:	d102      	bne.n	8002df0 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dee:	e001      	b.n	8002df4 <u8x8_ascii_next+0x22>
  return b;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	b29b      	uxth	r3, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002dfe:	b590      	push	{r4, r7, lr}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691c      	ldr	r4, [r3, #16]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	2300      	movs	r3, #0
 8002e12:	2120      	movs	r1, #32
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	47a0      	blx	r4
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}

08002e22 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002e22:	b590      	push	{r4, r7, lr}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691c      	ldr	r4, [r3, #16]
 8002e34:	7afa      	ldrb	r2, [r7, #11]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2117      	movs	r1, #23
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	47a0      	blx	r4
 8002e3e:	4603      	mov	r3, r0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002e54:	1cfb      	adds	r3, r7, #3
 8002e56:	461a      	mov	r2, r3
 8002e58:	2101      	movs	r1, #1
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ffe1 	bl	8002e22 <u8x8_byte_SendBytes>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002e6a:	b590      	push	{r4, r7, lr}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68dc      	ldr	r4, [r3, #12]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2115      	movs	r1, #21
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	47a0      	blx	r4
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd90      	pop	{r4, r7, pc}

08002e8e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002e8e:	b590      	push	{r4, r7, lr}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68dc      	ldr	r4, [r3, #12]
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2116      	movs	r1, #22
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	47a0      	blx	r4
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}

08002eb2 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002eb2:	b590      	push	{r4, r7, lr}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68dc      	ldr	r4, [r3, #12]
 8002ec4:	7afa      	ldrb	r2, [r7, #11]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2117      	movs	r1, #23
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	47a0      	blx	r4
 8002ece:	4603      	mov	r3, r0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd90      	pop	{r4, r7, pc}

08002ed8 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68dc      	ldr	r4, [r3, #12]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2118      	movs	r1, #24
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	47a0      	blx	r4
 8002eee:	4603      	mov	r3, r0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd90      	pop	{r4, r7, pc}

08002ef8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68dc      	ldr	r4, [r3, #12]
 8002f04:	2300      	movs	r3, #0
 8002f06:	2200      	movs	r2, #0
 8002f08:	2119      	movs	r1, #25
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	47a0      	blx	r4
 8002f0e:	4603      	mov	r3, r0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd90      	pop	{r4, r7, pc}

08002f18 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	73fb      	strb	r3, [r7, #15]
    data++;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b17      	cmp	r3, #23
 8002f32:	d017      	beq.n	8002f64 <u8x8_cad_SendSequence+0x4c>
 8002f34:	2b17      	cmp	r3, #23
 8002f36:	dc02      	bgt.n	8002f3e <u8x8_cad_SendSequence+0x26>
 8002f38:	2b15      	cmp	r3, #21
 8002f3a:	db37      	blt.n	8002fac <u8x8_cad_SendSequence+0x94>
 8002f3c:	e004      	b.n	8002f48 <u8x8_cad_SendSequence+0x30>
 8002f3e:	2b19      	cmp	r3, #25
 8002f40:	dd1e      	ble.n	8002f80 <u8x8_cad_SendSequence+0x68>
 8002f42:	2bfe      	cmp	r3, #254	; 0xfe
 8002f44:	d024      	beq.n	8002f90 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002f46:	e031      	b.n	8002fac <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68dc      	ldr	r4, [r3, #12]
 8002f52:	7bba      	ldrb	r2, [r7, #14]
 8002f54:	7bf9      	ldrb	r1, [r7, #15]
 8002f56:	2300      	movs	r3, #0
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	47a0      	blx	r4
	  data++;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	603b      	str	r3, [r7, #0]
	  break;
 8002f62:	e022      	b.n	8002faa <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002f6a:	f107 030e 	add.w	r3, r7, #14
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2101      	movs	r1, #1
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff9d 	bl	8002eb2 <u8x8_cad_SendData>
	  data++;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	603b      	str	r3, [r7, #0]
	  break;
 8002f7e:	e014      	b.n	8002faa <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68dc      	ldr	r4, [r3, #12]
 8002f84:	7bf9      	ldrb	r1, [r7, #15]
 8002f86:	2300      	movs	r3, #0
 8002f88:	2200      	movs	r2, #0
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	47a0      	blx	r4
	  break;
 8002f8e:	e00c      	b.n	8002faa <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2129      	movs	r1, #41	; 0x29
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f9d7 	bl	8003350 <u8x8_gpio_call>
	  data++;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	603b      	str	r3, [r7, #0]
	  break;
 8002fa8:	bf00      	nop
    cmd = *data;
 8002faa:	e7ba      	b.n	8002f22 <u8x8_cad_SendSequence+0xa>
	return;
 8002fac:	bf00      	nop
    }
  }
}
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}

08002fb4 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	72fb      	strb	r3, [r7, #11]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	3b14      	subs	r3, #20
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d82f      	bhi.n	800302e <u8x8_cad_001+0x7a>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <u8x8_cad_001+0x20>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	0800301d 	.word	0x0800301d
 8002fd8:	08002fed 	.word	0x08002fed
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	0800301d 	.word	0x0800301d
 8002fe8:	0800301d 	.word	0x0800301d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002fec:	2100      	movs	r1, #0
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff ff05 	bl	8002dfe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002ff4:	7abb      	ldrb	r3, [r7, #10]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff ff25 	bl	8002e48 <u8x8_byte_SendByte>
      break;
 8002ffe:	e018      	b.n	8003032 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003000:	2100      	movs	r1, #0
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff fefb 	bl	8002dfe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003008:	7abb      	ldrb	r3, [r7, #10]
 800300a:	4619      	mov	r1, r3
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f7ff ff1b 	bl	8002e48 <u8x8_byte_SendByte>
      break;
 8003012:	e00e      	b.n	8003032 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003014:	2101      	movs	r1, #1
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff fef1 	bl	8002dfe <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	691c      	ldr	r4, [r3, #16]
 8003020:	7aba      	ldrb	r2, [r7, #10]
 8003022:	7af9      	ldrb	r1, [r7, #11]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	47a0      	blx	r4
 800302a:	4603      	mov	r3, r0
 800302c:	e002      	b.n	8003034 <u8x8_cad_001+0x80>
    default:
      return 0;
 800302e:	2300      	movs	r3, #0
 8003030:	e000      	b.n	8003034 <u8x8_cad_001+0x80>
  }
  return 1;
 8003032:	2301      	movs	r3, #1
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bd90      	pop	{r4, r7, pc}

0800303c <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	72fb      	strb	r3, [r7, #11]
 800304a:	4613      	mov	r3, r2
 800304c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800304e:	7afb      	ldrb	r3, [r7, #11]
 8003050:	2b0e      	cmp	r3, #14
 8003052:	d05f      	beq.n	8003114 <u8x8_d_st7565_common+0xd8>
 8003054:	2b0f      	cmp	r3, #15
 8003056:	d002      	beq.n	800305e <u8x8_d_st7565_common+0x22>
 8003058:	2b0b      	cmp	r3, #11
 800305a:	d04e      	beq.n	80030fa <u8x8_d_st7565_common+0xbe>
 800305c:	e06c      	b.n	8003138 <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff ff3a 	bl	8002ed8 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	795b      	ldrb	r3, [r3, #5]
 8003068:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 800306a:	7dbb      	ldrb	r3, [r7, #22]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003076:	7dbb      	ldrb	r3, [r7, #22]
 8003078:	4413      	add	r3, r2
 800307a:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800307c:	7dbb      	ldrb	r3, [r7, #22]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f043 0310 	orr.w	r3, r3, #16
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff feed 	bl	8002e6a <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003090:	7dbb      	ldrb	r3, [r7, #22]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4619      	mov	r1, r3
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff fee5 	bl	8002e6a <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	799b      	ldrb	r3, [r3, #6]
 80030a4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	4619      	mov	r1, r3
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff fedc 	bl	8002e6a <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	791b      	ldrb	r3, [r3, #4]
 80030b6:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 80030c4:	7dfa      	ldrb	r2, [r7, #23]
 80030c6:	7dbb      	ldrb	r3, [r7, #22]
 80030c8:	4413      	add	r3, r2
 80030ca:	2b84      	cmp	r3, #132	; 0x84
 80030cc:	d905      	bls.n	80030da <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 80030ce:	2384      	movs	r3, #132	; 0x84
 80030d0:	75fb      	strb	r3, [r7, #23]
	c -= x;
 80030d2:	7dfa      	ldrb	r2, [r7, #23]
 80030d4:	7dbb      	ldrb	r3, [r7, #22]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4619      	mov	r1, r3
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fee6 	bl	8002eb2 <u8x8_cad_SendData>
	arg_int--;
 80030e6:	7abb      	ldrb	r3, [r7, #10]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80030ec:	7abb      	ldrb	r3, [r7, #10]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f3      	bne.n	80030da <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff ff00 	bl	8002ef8 <u8x8_cad_EndTransfer>
      break;
 80030f8:	e020      	b.n	800313c <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80030fa:	7abb      	ldrb	r3, [r7, #10]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8003100:	4911      	ldr	r1, [pc, #68]	; (8003148 <u8x8_d_st7565_common+0x10c>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff ff08 	bl	8002f18 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8003108:	e018      	b.n	800313c <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800310a:	4910      	ldr	r1, [pc, #64]	; (800314c <u8x8_d_st7565_common+0x110>)
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff ff03 	bl	8002f18 <u8x8_cad_SendSequence>
      break;
 8003112:	e013      	b.n	800313c <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff fedf 	bl	8002ed8 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800311a:	2181      	movs	r1, #129	; 0x81
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff fea4 	bl	8002e6a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8003122:	7abb      	ldrb	r3, [r7, #10]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	b2db      	uxtb	r3, r3
 8003128:	4619      	mov	r1, r3
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff feaf 	bl	8002e8e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff fee1 	bl	8002ef8 <u8x8_cad_EndTransfer>
      break;
 8003136:	e001      	b.n	800313c <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <u8x8_d_st7565_common+0x102>
  }
  return 1;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	080181fc 	.word	0x080181fc
 800314c:	08018204 	.word	0x08018204

08003150 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	72fb      	strb	r3, [r7, #11]
 800315e:	4613      	mov	r3, r2
 8003160:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003162:	7aba      	ldrb	r2, [r7, #10]
 8003164:	7af9      	ldrb	r1, [r7, #11]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff ff67 	bl	800303c <u8x8_d_st7565_common>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d12e      	bne.n	80031d2 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003174:	7afb      	ldrb	r3, [r7, #11]
 8003176:	2b0a      	cmp	r3, #10
 8003178:	d008      	beq.n	800318c <u8x8_d_st7565_nhd_c12864+0x3c>
 800317a:	2b0d      	cmp	r3, #13
 800317c:	d00e      	beq.n	800319c <u8x8_d_st7565_nhd_c12864+0x4c>
 800317e:	2b09      	cmp	r3, #9
 8003180:	d125      	bne.n	80031ce <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8003182:	4917      	ldr	r1, [pc, #92]	; (80031e0 <u8x8_d_st7565_nhd_c12864+0x90>)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f833 	bl	80031f0 <u8x8_d_helper_display_setup_memory>
	break;
 800318a:	e023      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f842 	bl	8003216 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8003192:	4914      	ldr	r1, [pc, #80]	; (80031e4 <u8x8_d_st7565_nhd_c12864+0x94>)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff febf 	bl	8002f18 <u8x8_cad_SendSequence>
	break;
 800319a:	e01b      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 800319c:	7abb      	ldrb	r3, [r7, #10]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80031a2:	4911      	ldr	r1, [pc, #68]	; (80031e8 <u8x8_d_st7565_nhd_c12864+0x98>)
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff feb7 	bl	8002f18 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	7c9a      	ldrb	r2, [r3, #18]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 80031b6:	e00d      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 80031b8:	490c      	ldr	r1, [pc, #48]	; (80031ec <u8x8_d_st7565_nhd_c12864+0x9c>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff feac 	bl	8002f18 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	7cda      	ldrb	r2, [r3, #19]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 80031cc:	e002      	b.n	80031d4 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 80031ce:	2300      	movs	r3, #0
 80031d0:	e001      	b.n	80031d6 <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 80031d2:	bf00      	nop
  return 1;
 80031d4:	2301      	movs	r3, #1
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	0801821c 	.word	0x0801821c
 80031e4:	08018234 	.word	0x08018234
 80031e8:	0801820c 	.word	0x0801820c
 80031ec:	08018214 	.word	0x08018214

080031f0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	7c9a      	ldrb	r2, [r3, #18]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003216:	b590      	push	{r4, r7, lr}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695c      	ldr	r4, [r3, #20]
 8003222:	2300      	movs	r3, #0
 8003224:	2200      	movs	r2, #0
 8003226:	2128      	movs	r1, #40	; 0x28
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68dc      	ldr	r4, [r3, #12]
 8003230:	2300      	movs	r3, #0
 8003232:	2200      	movs	r2, #0
 8003234:	2114      	movs	r1, #20
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800323a:	2201      	movs	r2, #1
 800323c:	214b      	movs	r1, #75	; 0x4b
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f886 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	791b      	ldrb	r3, [r3, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	2129      	movs	r1, #41	; 0x29
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f87e 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	214b      	movs	r1, #75	; 0x4b
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f879 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	791b      	ldrb	r3, [r3, #4]
 8003264:	461a      	mov	r2, r3
 8003266:	2129      	movs	r1, #41	; 0x29
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f871 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800326e:	2201      	movs	r2, #1
 8003270:	214b      	movs	r1, #75	; 0x4b
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f86c 	bl	8003350 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	795b      	ldrb	r3, [r3, #5]
 800327e:	461a      	mov	r2, r3
 8003280:	2129      	movs	r1, #41	; 0x29
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f864 	bl	8003350 <u8x8_gpio_call>
}    
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bd90      	pop	{r4, r7, pc}

08003290 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	4608      	mov	r0, r1
 800329a:	4611      	mov	r1, r2
 800329c:	461a      	mov	r2, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	70fb      	strb	r3, [r7, #3]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70bb      	strb	r3, [r7, #2]
 80032a6:	4613      	mov	r3, r2
 80032a8:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80032ae:	78bb      	ldrb	r3, [r7, #2]
 80032b0:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80032b2:	787b      	ldrb	r3, [r7, #1]
 80032b4:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689c      	ldr	r4, [r3, #8]
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	2201      	movs	r2, #1
 80032c4:	210f      	movs	r1, #15
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	47a0      	blx	r4
 80032ca:	4603      	mov	r3, r0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}

080032d4 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689c      	ldr	r4, [r3, #8]
 80032e0:	2300      	movs	r3, #0
 80032e2:	2200      	movs	r2, #0
 80032e4:	2109      	movs	r1, #9
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	47a0      	blx	r4
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}

080032f2 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80032f2:	b590      	push	{r4, r7, lr}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689c      	ldr	r4, [r3, #8]
 80032fe:	2300      	movs	r3, #0
 8003300:	2200      	movs	r2, #0
 8003302:	210a      	movs	r1, #10
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	47a0      	blx	r4
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bd90      	pop	{r4, r7, pc}

08003310 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689c      	ldr	r4, [r3, #8]
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	2300      	movs	r3, #0
 8003324:	210b      	movs	r1, #11
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	47a0      	blx	r4
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}

08003332 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003332:	b590      	push	{r4, r7, lr}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689c      	ldr	r4, [r3, #8]
 800333e:	2300      	movs	r3, #0
 8003340:	2200      	movs	r2, #0
 8003342:	2110      	movs	r1, #16
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	47a0      	blx	r4
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}

08003350 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
 800335c:	4613      	mov	r3, r2
 800335e:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695c      	ldr	r4, [r3, #20]
 8003364:	78ba      	ldrb	r2, [r7, #2]
 8003366:	78f9      	ldrb	r1, [r7, #3]
 8003368:	2300      	movs	r3, #0
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	47a0      	blx	r4
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bd90      	pop	{r4, r7, pc}

08003376 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	72fb      	strb	r3, [r7, #11]
 8003384:	4613      	mov	r3, r2
 8003386:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a11      	ldr	r2, [pc, #68]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033a6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a10      	ldr	r2, [pc, #64]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033ac:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033b2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <u8x8_SetupDefaults+0x58>)
 80033b8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	22ff      	movs	r2, #255	; 0xff
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	08003377 	.word	0x08003377

080033f0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff ffc8 	bl	8003394 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff ff59 	bl	80032d4 <u8x8_SetupMemory>
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	70fb      	strb	r3, [r7, #3]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	741a      	strb	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	745a      	strb	r2, [r3, #17]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d802      	bhi.n	800346c <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	701a      	strb	r2, [r3, #0]
}
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d031      	beq.n	80034f0 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d826      	bhi.n	80034e2 <_ZN11ChronoTimer8setTimerEm+0x6a>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <_ZN11ChronoTimer8setTimerEm+0x24>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034c5 	.word	0x080034c5
 80034a8:	080034d5 	.word	0x080034d5
		{
		case MILLIS:
			timeDelay = SetDelay;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	605a      	str	r2, [r3, #4]
			break;
 80034b2:	e017      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034ba:	fb02 f203 	mul.w	r2, r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	605a      	str	r2, [r3, #4]
			break;
 80034c2:	e00f      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80034ca:	fb02 f203 	mul.w	r2, r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	605a      	str	r2, [r3, #4]
			break;
 80034d2:	e007      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <_ZN11ChronoTimer8setTimerEm+0x84>)
 80034d8:	fb02 f203 	mul.w	r2, r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	605a      	str	r2, [r3, #4]
			break;
 80034e0:	e000      	b.n	80034e4 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 80034e2:	bf00      	nop
		}
		isSetted = true;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	609a      	str	r2, [r3, #8]
	}

}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	0036ee80 	.word	0x0036ee80

08003500 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	7c9b      	ldrb	r3, [r3, #18]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <_ZN11ChronoTimer10startTimerEv+0x2e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7c1b      	ldrb	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 8003524:	f008 fe68 	bl	800c1f8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60da      	str	r2, [r3, #12]
	}
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
	if(isStarted)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7c5b      	ldrb	r3, [r3, #17]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]
	}
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
	stopTimer();
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffe3 	bl	8003536 <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ffc5 	bl	8003500 <_ZN11ChronoTimer10startTimerEv>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	460b      	mov	r3, r1
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 800358c:	2300      	movs	r3, #0
 800358e:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7ff ff6d 	bl	8003478 <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f7ff ffae 	bl	8003500 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 80035a4:	f008 fe28 	bl	800c1f8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	1ad2      	subs	r2, r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	bf2c      	ite	cs
 80035b8:	2301      	movcs	r3, #1
 80035ba:	2300      	movcc	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff ffc5 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <_ZNSt7__cxx119to_stringEi+0x24>)
 80035f6:	2210      	movs	r2, #16
 80035f8:	4904      	ldr	r1, [pc, #16]	; (800360c <_ZNSt7__cxx119to_stringEi+0x28>)
 80035fa:	f000 fd45 	bl	8004088 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	08014fb8 	.word	0x08014fb8
 800360c:	0801310d 	.word	0x0801310d

08003610 <_ZL7bcd2binh>:
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	111b      	asrs	r3, r3, #4
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	4413      	add	r3, r2
 800362e:	b2db      	uxtb	r3, r3
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
	...

0800363c <_ZL7bin2bcdh>:
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	4a08      	ldr	r2, [pc, #32]	; (800366c <_ZL7bin2bcdh+0x30>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	08db      	lsrs	r3, r3, #3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	0052      	lsls	r2, r2, #1
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	4413      	add	r3, r2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	cccccccd 	.word	0xcccccccd

08003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t; // @suppress("Return with parenthesis")
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 8003678:	23d0      	movs	r3, #208	; 0xd0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f00d fe33 	bl	80112fe <memset>
	i2cBufferIndex = 0;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2020 	strb.w	r2, [r3, #32]
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ffd9 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffcc 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80036d8:	4603      	mov	r3, r0
 80036da:	4619      	mov	r1, r3
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	2301      	movs	r3, #1
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2300      	movs	r3, #0
 80036e4:	4803      	ldr	r0, [pc, #12]	; (80036f4 <_ZN10DS1307_RTC5setupEv+0x30>)
 80036e6:	f00a f985 	bl	800d9f4 <HAL_I2C_Master_Transmit>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200006d8 	.word	0x200006d8

080036f8 <_ZN10DS1307_RTC9isRunningEv>:



bool DS1307_RTC::isRunning()
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	6078      	str	r0, [r7, #4]
	bool Live = false;
 8003700:	2300      	movs	r3, #0
 8003702:	75fb      	strb	r3, [r7, #23]
	uint8_t RxData = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ffb1 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800370e:	4603      	mov	r3, r0
 8003710:	4619      	mov	r1, r3
 8003712:	2301      	movs	r3, #1
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	2301      	movs	r3, #1
 8003718:	2200      	movs	r2, #0
 800371a:	4823      	ldr	r0, [pc, #140]	; (80037a8 <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 800371c:	f00a f96a 	bl	800d9f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 1, 1);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ffa5 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003726:	4603      	mov	r3, r0
 8003728:	4619      	mov	r1, r3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	2301      	movs	r3, #1
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2301      	movs	r3, #1
 8003732:	481d      	ldr	r0, [pc, #116]	; (80037a8 <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 8003734:	f00a fa5c 	bl	800dbf0 <HAL_I2C_Master_Receive>
	RxData = i2cBuffer[0];
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	75bb      	strb	r3, [r7, #22]
	clearI2CBuff();
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ffa0 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	if(RxData >> 7 == 0x00)
 8003744:	7dbb      	ldrb	r3, [r7, #22]
 8003746:	11db      	asrs	r3, r3, #7
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <_ZN10DS1307_RTC9isRunningEv+0x58>
	{
		Live = true;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
	}
	if(Live)
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d022      	beq.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
	{
		TIME_DATE_T ReadTime;
		getTimeDate(ReadTime);
 8003756:	f107 030c 	add.w	r3, r7, #12
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f8cf 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		if(ReadTime.year == 0  && ReadTime.month == 0  && ReadTime.day == 0)
 8003762:	8a7b      	ldrh	r3, [r7, #18]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d119      	bne.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
 8003768:	7c3b      	ldrb	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d116      	bne.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d113      	bne.n	800379c <_ZN10DS1307_RTC9isRunningEv+0xa4>
		{
			ReadTime.hour = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	73bb      	strb	r3, [r7, #14]
			ReadTime.minute = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	737b      	strb	r3, [r7, #13]
			ReadTime.second = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	733b      	strb	r3, [r7, #12]
			ReadTime.day = 1;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
			ReadTime.month = 1;
 8003784:	2301      	movs	r3, #1
 8003786:	743b      	strb	r3, [r7, #16]
			ReadTime.year = 2020;
 8003788:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800378c:	827b      	strh	r3, [r7, #18]
			adjustTimeDate(ReadTime);
 800378e:	f107 030c 	add.w	r3, r7, #12
 8003792:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f808 	bl	80037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
		}
	}
	return Live;
 800379c:	7dfb      	ldrb	r3, [r7, #23]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200006d8 	.word	0x200006d8

080037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>:



void DS1307_RTC::adjustTimeDate(TIME_DATE_T AdjustVar)
{
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	e883 0006 	stmia.w	r3, {r1, r2}
	clearI2CBuff();
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff ff62 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	i2cBuffer[i2cBufferIndex++] = 0;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	b2d1      	uxtb	r1, r2
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	f882 1020 	strb.w	r1, [r2, #32]
 80037d0:	461a      	mov	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2100      	movs	r1, #0
 80037d6:	5499      	strb	r1, [r3, r2]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.second);
 80037d8:	7939      	ldrb	r1, [r7, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	b2d0      	uxtb	r0, r2
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	f882 0020 	strb.w	r0, [r2, #32]
 80037ea:	461c      	mov	r4, r3
 80037ec:	4608      	mov	r0, r1
 80037ee:	f7ff ff25 	bl	800363c <_ZL7bin2bcdh>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.minute);
 80037fa:	7979      	ldrb	r1, [r7, #5]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	b2d0      	uxtb	r0, r2
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	f882 0020 	strb.w	r0, [r2, #32]
 800380c:	461c      	mov	r4, r3
 800380e:	4608      	mov	r0, r1
 8003810:	f7ff ff14 	bl	800363c <_ZL7bin2bcdh>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.hour);
 800381c:	79b9      	ldrb	r1, [r7, #6]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	b2d0      	uxtb	r0, r2
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	f882 0020 	strb.w	r0, [r2, #32]
 800382e:	461c      	mov	r4, r3
 8003830:	4608      	mov	r0, r1
 8003832:	f7ff ff03 	bl	800363c <_ZL7bin2bcdh>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(0);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	b2d1      	uxtb	r1, r2
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	f882 1020 	strb.w	r1, [r2, #32]
 800384e:	461c      	mov	r4, r3
 8003850:	2000      	movs	r0, #0
 8003852:	f7ff fef3 	bl	800363c <_ZL7bin2bcdh>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.day);
 800385e:	79f9      	ldrb	r1, [r7, #7]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	b2d0      	uxtb	r0, r2
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	f882 0020 	strb.w	r0, [r2, #32]
 8003870:	461c      	mov	r4, r3
 8003872:	4608      	mov	r0, r1
 8003874:	f7ff fee2 	bl	800363c <_ZL7bin2bcdh>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.month);
 8003880:	7a39      	ldrb	r1, [r7, #8]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	b2d0      	uxtb	r0, r2
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	f882 0020 	strb.w	r0, [r2, #32]
 8003892:	461c      	mov	r4, r3
 8003894:	4608      	mov	r0, r1
 8003896:	f7ff fed1 	bl	800363c <_ZL7bin2bcdh>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.year - 2000);
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	3330      	adds	r3, #48	; 0x30
 80038a8:	b2d9      	uxtb	r1, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	b2d0      	uxtb	r0, r2
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	f882 0020 	strb.w	r0, [r2, #32]
 80038ba:	461c      	mov	r4, r3
 80038bc:	4608      	mov	r0, r1
 80038be:	f7ff febd 	bl	800363c <_ZL7bin2bcdh>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	551a      	strb	r2, [r3, r4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff fed0 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4618      	mov	r0, r3
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038dc:	b299      	uxth	r1, r3
 80038de:	2301      	movs	r3, #1
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	460b      	mov	r3, r1
 80038e4:	4601      	mov	r1, r0
 80038e6:	4805      	ldr	r0, [pc, #20]	; (80038fc <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE+0x150>)
 80038e8:	f00a f884 	bl	800d9f4 <HAL_I2C_Master_Transmit>
	clearI2CBuff();
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff fec9 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200006d8 	.word	0x200006d8

08003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af02      	add	r7, sp, #8
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff feba 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff fead 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003916:	4603      	mov	r3, r0
 8003918:	4619      	mov	r1, r3
 800391a:	2301      	movs	r3, #1
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2301      	movs	r3, #1
 8003920:	2200      	movs	r2, #0
 8003922:	4848      	ldr	r0, [pc, #288]	; (8003a44 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8003924:	f00a f866 	bl	800d9f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fea1 	bl	8003670 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800392e:	4603      	mov	r3, r0
 8003930:	4619      	mov	r1, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	2301      	movs	r3, #1
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2307      	movs	r3, #7
 800393a:	4842      	ldr	r0, [pc, #264]	; (8003a44 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 800393c:	f00a f958 	bl	800dbf0 <HAL_I2C_Master_Receive>
	RetTimeDate.second = bcd2bin(i2cBuffer[i2cBufferIndex++] & 0x7F);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	b2d1      	uxtb	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	f882 1020 	strb.w	r1, [r2, #32]
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	5c9b      	ldrb	r3, [r3, r2]
 8003956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800395a:	b2db      	uxtb	r3, r3
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fe57 	bl	8003610 <_ZL7bcd2binh>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	b2d1      	uxtb	r1, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	f882 1020 	strb.w	r1, [r2, #32]
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fe45 	bl	8003610 <_ZL7bcd2binh>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	b2d1      	uxtb	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	f882 1020 	strb.w	r1, [r2, #32]
 800399e:	461a      	mov	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	5c9b      	ldrb	r3, [r3, r2]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fe33 	bl	8003610 <_ZL7bcd2binh>
 80039aa:	4603      	mov	r3, r0
 80039ac:	461a      	mov	r2, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b8:	3301      	adds	r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	b2d1      	uxtb	r1, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	f882 1020 	strb.w	r1, [r2, #32]
 80039d2:	461a      	mov	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	5c9b      	ldrb	r3, [r3, r2]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fe19 	bl	8003610 <_ZL7bcd2binh>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	b2d1      	uxtb	r1, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	f882 1020 	strb.w	r1, [r2, #32]
 80039f6:	461a      	mov	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	5c9b      	ldrb	r3, [r3, r2]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fe07 	bl	8003610 <_ZL7bcd2binh>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461a      	mov	r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bcd2bin(i2cBuffer[i2cBufferIndex++]) + 2000;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	b2d1      	uxtb	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f882 1020 	strb.w	r1, [r2, #32]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	5c9b      	ldrb	r3, [r3, r2]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fdf5 	bl	8003610 <_ZL7bcd2binh>
 8003a26:	4603      	mov	r3, r0
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fe25 	bl	8003684 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200006d8 	.word	0x200006d8

08003a48 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	6018      	str	r0, [r3, #0]
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	6019      	str	r1, [r3, #0]
 8003a5c:	1dfb      	adds	r3, r7, #7
 8003a5e:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003a60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a64:	4618      	mov	r0, r3
 8003a66:	f00d f945 	bl	8010cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f00d f940 	bl	8010cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f00d f93b 	bl	8010cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a82:	4618      	mov	r0, r3
 8003a84:	f00d f936 	bl	8010cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f00d f931 	bl	8010cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a92:	f107 031c 	add.w	r3, r7, #28
 8003a96:	4618      	mov	r0, r3
 8003a98:	f00d f92c 	bl	8010cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f00d f817 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8003aa6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	49df      	ldr	r1, [pc, #892]	; (8003e2c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e4>)
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	f00d fad7 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003ab6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003aba:	4618      	mov	r0, r3
 8003abc:	f00d f80b 	bl	8010ad6 <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 8003ac0:	f107 0214 	add.w	r2, r7, #20
 8003ac4:	f107 0308 	add.w	r3, r7, #8
 8003ac8:	4611      	mov	r1, r2
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	f7ff ff18 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = TimeDate.second > 9 ? std::to_string(TimeDate.second) : "0" + std::to_string(TimeDate.second);
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2400      	movs	r4, #0
 8003ad8:	2b09      	cmp	r3, #9
 8003ada:	d90a      	bls.n	8003af2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xaa>
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fd7a 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003af0:	e012      	b.n	8003b18 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xd0>
 8003af2:	f107 0314 	add.w	r3, r7, #20
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fd6f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003b06:	2401      	movs	r4, #1
 8003b08:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b0c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003b10:	49c7      	ldr	r1, [pc, #796]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 faf0 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b18:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003b1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f00d f913 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f00d f902 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b32:	2c00      	cmp	r4, #0
 8003b34:	d004      	beq.n	8003b40 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xf8>
 8003b36:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f00d f8fb 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = TimeDate.minute > 9 ? std::to_string(TimeDate.minute) : "0" + std::to_string(TimeDate.minute);
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	785b      	ldrb	r3, [r3, #1]
 8003b46:	2400      	movs	r4, #0
 8003b48:	2b09      	cmp	r3, #9
 8003b4a:	d90a      	bls.n	8003b62 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x11a>
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fd42 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003b60:	e012      	b.n	8003b88 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x140>
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fd37 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003b76:	2401      	movs	r4, #1
 8003b78:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b7c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8003b80:	49ab      	ldr	r1, [pc, #684]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fab8 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b88:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003b8c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f00d f8db 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b98:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f00d f8ca 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ba2:	2c00      	cmp	r4, #0
 8003ba4:	d004      	beq.n	8003bb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x168>
 8003ba6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003baa:	4618      	mov	r0, r3
 8003bac:	f00d f8c3 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = TimeDate.hour > 9 ? std::to_string(TimeDate.hour) : "0" + std::to_string(TimeDate.hour);
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	789b      	ldrb	r3, [r3, #2]
 8003bb6:	2400      	movs	r4, #0
 8003bb8:	2b09      	cmp	r3, #9
 8003bba:	d90a      	bls.n	8003bd2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x18a>
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	789b      	ldrb	r3, [r3, #2]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fd0a 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003bd0:	e012      	b.n	8003bf8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1b0>
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	789b      	ldrb	r3, [r3, #2]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fcff 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003be6:	2401      	movs	r4, #1
 8003be8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bec:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003bf0:	498f      	ldr	r1, [pc, #572]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fa80 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003bf8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003bfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f00d f8a3 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f00d f892 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c12:	2c00      	cmp	r4, #0
 8003c14:	d004      	beq.n	8003c20 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1d8>
 8003c16:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f00d f88b 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = TimeDate.day > 9 ? std::to_string(TimeDate.day) : "0" + std::to_string(TimeDate.day);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	78db      	ldrb	r3, [r3, #3]
 8003c26:	2400      	movs	r4, #0
 8003c28:	2b09      	cmp	r3, #9
 8003c2a:	d90a      	bls.n	8003c42 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1fa>
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	78db      	ldrb	r3, [r3, #3]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c38:	4611      	mov	r1, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fcd2 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003c40:	e012      	b.n	8003c68 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x220>
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	78db      	ldrb	r3, [r3, #3]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fcc7 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003c56:	2401      	movs	r4, #1
 8003c58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c5c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003c60:	4973      	ldr	r1, [pc, #460]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fa48 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003c68:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003c6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f00d f86b 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f00d f85a 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c82:	2c00      	cmp	r4, #0
 8003c84:	d004      	beq.n	8003c90 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x248>
 8003c86:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f00d f853 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = TimeDate.month > 9 ? std::to_string(TimeDate.month) : "0" + std::to_string(TimeDate.month);
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	791b      	ldrb	r3, [r3, #4]
 8003c96:	2400      	movs	r4, #0
 8003c98:	2b09      	cmp	r3, #9
 8003c9a:	d90a      	bls.n	8003cb2 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x26a>
 8003c9c:	f107 0314 	add.w	r3, r7, #20
 8003ca0:	791b      	ldrb	r3, [r3, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fc9a 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003cb0:	e012      	b.n	8003cd8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x290>
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	791b      	ldrb	r3, [r3, #4]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fc8f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003cc6:	2401      	movs	r4, #1
 8003cc8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003ccc:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003cd0:	4957      	ldr	r1, [pc, #348]	; (8003e30 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fa10 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003cd8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003cdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f00d f833 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003ce8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003cec:	4618      	mov	r0, r3
 8003cee:	f00d f822 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cf2:	2c00      	cmp	r4, #0
 8003cf4:	d004      	beq.n	8003d00 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x2b8>
 8003cf6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f00d f81b 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year % 100);
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	88db      	ldrh	r3, [r3, #6]
 8003d06:	4a4b      	ldr	r2, [pc, #300]	; (8003e34 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3ec>)
 8003d08:	fba2 1203 	umull	r1, r2, r2, r3
 8003d0c:	0952      	lsrs	r2, r2, #5
 8003d0e:	2164      	movs	r1, #100	; 0x64
 8003d10:	fb01 f202 	mul.w	r2, r1, r2
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fc5f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8003d26:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003d2a:	f107 031c 	add.w	r3, r7, #28
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f00d f80c 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003d36:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f00c fffb 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 8003d40:	1dfb      	adds	r3, r7, #7
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	f200 816c 	bhi.w	8004022 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5da>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x308>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d65 	.word	0x08003d65
 8003d54:	08003de3 	.word	0x08003de3
 8003d58:	08003e3d 	.word	0x08003e3d
 8003d5c:	08003ebb 	.word	0x08003ebb
 8003d60:	08003f03 	.word	0x08003f03
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 8003d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d68:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d6c:	4a32      	ldr	r2, [pc, #200]	; (8003e38 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f9da 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d74:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d78:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d7c:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f9e4 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d86:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d8a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003d8e:	4a2a      	ldr	r2, [pc, #168]	; (8003e38 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f9f3 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d96:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d9a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d9e:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f9d3 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003da8:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8003dac:	f107 030c 	add.w	r3, r7, #12
 8003db0:	4611      	mov	r1, r2
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	f00c ffcb 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003db8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f00c ffba 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dc2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f00c ffb5 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dcc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f00c ffb0 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f00c ffab 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003de0:	e120      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 8003de2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003de6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003dea:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f99b 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003df2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003df6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003dfa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f9a5 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e04:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	f00c ff9d 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003e14:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f00c ff8c 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e1e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003e22:	4618      	mov	r0, r3
 8003e24:	f00c ff87 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e28:	e0fc      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
 8003e2a:	bf00      	nop
 8003e2c:	0801502c 	.word	0x0801502c
 8003e30:	08015038 	.word	0x08015038
 8003e34:	51eb851f 	.word	0x51eb851f
 8003e38:	0801503c 	.word	0x0801503c
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 8003e3c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003e40:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003e44:	4a8d      	ldr	r2, [pc, #564]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f96e 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003e4c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003e50:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e54:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f978 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e62:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8003e66:	4a85      	ldr	r2, [pc, #532]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f987 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003e6e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e72:	f107 021c 	add.w	r2, r7, #28
 8003e76:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f967 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e80:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003e84:	f107 030c 	add.w	r3, r7, #12
 8003e88:	4611      	mov	r1, r2
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	f00c ff5f 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003e90:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e94:	4618      	mov	r0, r3
 8003e96:	f00c ff4e 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f00c ff49 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ea4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f00c ff44 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003eae:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f00c ff3f 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003eb8:	e0b4      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 8003eba:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003ebe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003ec2:	4a6e      	ldr	r2, [pc, #440]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f92f 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003eca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003ece:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ed2:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f939 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003edc:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	f00c ff31 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003eec:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f00c ff20 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ef6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f00c ff1b 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003f00:	e090      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 8003f02:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003f06:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003f0a:	4a5d      	ldr	r2, [pc, #372]	; (8004080 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f90b 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003f12:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003f16:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003f1a:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f915 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f24:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003f28:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8003f2c:	4a54      	ldr	r2, [pc, #336]	; (8004080 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f924 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f34:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003f38:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003f3c:	f507 7160 	add.w	r1, r7, #896	; 0x380
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 f904 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f46:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003f4a:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8003f4e:	4a4d      	ldr	r2, [pc, #308]	; (8004084 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x63c>)
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 f913 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f56:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003f5a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003f5e:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f8f3 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f68:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003f6c:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8003f70:	4a42      	ldr	r2, [pc, #264]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f902 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f78:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f80:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 f8e2 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f8a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003f8e:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8003f92:	4a3a      	ldr	r2, [pc, #232]	; (800407c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 f8f1 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f9a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003f9e:	f107 021c 	add.w	r2, r7, #28
 8003fa2:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f8d1 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003fac:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003fb0:	f107 030c 	add.w	r3, r7, #12
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	f00c fec9 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003fbc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f00c feb8 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fc6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f00c feb3 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fd0:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f00c feae 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fda:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f00c fea9 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fe4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f00c fea4 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fee:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f00c fe9f 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ff8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f00c fe9a 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004002:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8004006:	4618      	mov	r0, r3
 8004008:	f00c fe95 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800400c:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8004010:	4618      	mov	r0, r3
 8004012:	f00c fe90 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004016:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800401a:	4618      	mov	r0, r3
 800401c:	f00c fe8b 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8004020:	e000      	b.n	8004024 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	default:
		break;
 8004022:	bf00      	nop
	}
	return RetStr;
 8004024:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8004026:	f107 031c 	add.w	r3, r7, #28
 800402a:	4618      	mov	r0, r3
 800402c:	f00c fe83 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004030:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004034:	4618      	mov	r0, r3
 8004036:	f00c fe7e 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800403a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800403e:	4618      	mov	r0, r3
 8004040:	f00c fe79 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004044:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004048:	4618      	mov	r0, r3
 800404a:	f00c fe74 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800404e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004052:	4618      	mov	r0, r3
 8004054:	f00c fe6f 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004058:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800405c:	4618      	mov	r0, r3
 800405e:	f00c fe6a 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 8004062:	f107 030c 	add.w	r3, r7, #12
 8004066:	f107 020c 	add.w	r2, r7, #12
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	f107 030c 	add.w	r3, r7, #12
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 8004078:	46bd      	mov	sp, r7
 800407a:	bd90      	pop	{r4, r7, pc}
 800407c:	08015040 	.word	0x08015040
 8004080:	0801503c 	.word	0x0801503c
 8004084:	08015044 	.word	0x08015044

08004088 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8004088:	b408      	push	{r3}
 800408a:	b590      	push	{r4, r7, lr}
 800408c:	b088      	sub	sp, #32
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3307      	adds	r3, #7
 800409a:	3307      	adds	r3, #7
 800409c:	08db      	lsrs	r3, r3, #3
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	ebad 0d03 	sub.w	sp, sp, r3
 80040a4:	466b      	mov	r3, sp
 80040a6:	3307      	adds	r3, #7
 80040a8:	08db      	lsrs	r3, r3, #3
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 80040ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040b2:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 80040b4:	68bc      	ldr	r4, [r7, #8]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	69f8      	ldr	r0, [r7, #28]
 80040be:	47a0      	blx	r4
 80040c0:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	18d4      	adds	r4, r2, r3
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	4618      	mov	r0, r3
 80040ce:	f00c fd01 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	4622      	mov	r2, r4
 80040d8:	69f9      	ldr	r1, [r7, #28]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f865 	bl	80041aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	4618      	mov	r0, r3
 80040e6:	f00c fcf6 	bl	8010ad6 <_ZNSaIcED1Ev>
    }
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80040f4:	b001      	add	sp, #4
 80040f6:	4770      	bx	lr

080040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	2100      	movs	r1, #0
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f00c ff15 	bl	8010f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 800410e:	4603      	mov	r3, r0
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f865 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8004116:	4603      	mov	r3, r0
 8004118:	4619      	mov	r1, r3
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f00c fdf1 	bl	8010d02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f00c ff61 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f00c ff30 	bl	8010fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8004144:	bf00      	nop
    }
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	68b8      	ldr	r0, [r7, #8]
 800415e:	f00c ff1b 	bl	8010f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8004162:	4603      	mov	r3, r0
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f83b 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800416a:	4603      	mov	r3, r0
 800416c:	4619      	mov	r1, r3
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f00c fdc7 	bl	8010d02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	68b8      	ldr	r0, [r7, #8]
 800418c:	f00c ff0a 	bl	8010fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8004190:	4603      	mov	r3, r0
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f824 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8004198:	4603      	mov	r3, r0
 800419a:	4619      	mov	r1, r3
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f00c fdb0 	bl	8010d02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 80041aa:	b590      	push	{r4, r7, lr}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 80041b8:	68fc      	ldr	r4, [r7, #12]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f00c fcc3 	bl	8010b46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80041c0:	4603      	mov	r3, r0
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	4619      	mov	r1, r3
 80041c6:	4620      	mov	r0, r4
 80041c8:	f00c ff17 	bl	8010ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f80f 	bl	80041f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd90      	pop	{r4, r7, pc}

080041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f804 	bl	8004212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800420a:	bf00      	nop
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8004212:	b590      	push	{r4, r7, lr}
 8004214:	b087      	sub	sp, #28
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8004220:	4623      	mov	r3, r4
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f804 	bl	8004234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	bd90      	pop	{r4, r7, pc}

08004234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8004242:	68b8      	ldr	r0, [r7, #8]
 8004244:	f000 f83e 	bl	80042c4 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d001      	beq.n	800425a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8004260:	4817      	ldr	r0, [pc, #92]	; (80042c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8004262:	f00c fc3c 	bl	8010ade <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	68b8      	ldr	r0, [r7, #8]
 800426a:	f000 f843 	bl	80042f4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800426e:	4603      	mov	r3, r0
 8004270:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b0f      	cmp	r3, #15
 8004276:	d910      	bls.n	800429a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	2200      	movs	r2, #0
 800427e:	4619      	mov	r1, r3
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f00c fc69 	bl	8010b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004286:	4603      	mov	r3, r0
 8004288:	4619      	mov	r1, r3
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f00c fc57 	bl	8010b3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	4619      	mov	r1, r3
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f00c fc58 	bl	8010b4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f00c fc51 	bl	8010b42 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80042a0:	4603      	mov	r3, r0
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f00c fcb3 	bl	8010c12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4619      	mov	r1, r3
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f00c fc4c 	bl	8010b4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80042b6:	bf00      	nop
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	08015048 	.word	0x08015048

080042c4 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80042f4:	b5b0      	push	{r4, r5, r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80042fe:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004300:	1d3b      	adds	r3, r7, #4
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ffed 	bl	80042e2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8004308:	462a      	mov	r2, r5
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	4620      	mov	r0, r4
 800430e:	f000 f805 	bl	800431c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8004312:	4603      	mov	r3, r0
    }
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bdb0      	pop	{r4, r5, r7, pc}

0800431c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
    }
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <_Z7DelayNsm>:
#include "Display.h"
#include "tim.h"


void DelayNs(uint32_t NsDelay)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b0f      	cmp	r3, #15
 8004344:	d801      	bhi.n	800434a <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 8004346:	2310      	movs	r3, #16
 8004348:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <_Z7DelayNsm+0x3c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <_Z7DelayNsm+0x3c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	429a      	cmp	r2, r3
 800435c:	bf8c      	ite	hi
 800435e:	2301      	movhi	r3, #1
 8004360:	2300      	movls	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d000      	beq.n	800436a <_Z7DelayNsm+0x32>
 8004368:	e7f3      	b.n	8004352 <_Z7DelayNsm+0x1a>
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	20000784 	.word	0x20000784

08004378 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	72fb      	strb	r3, [r7, #11]
 8004386:	4613      	mov	r3, r2
 8004388:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 800438a:	7afb      	ldrb	r3, [r7, #11]
 800438c:	3b28      	subs	r3, #40	; 0x28
 800438e:	2b23      	cmp	r3, #35	; 0x23
 8004390:	d86b      	bhi.n	800446a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	08004475 	.word	0x08004475
 800439c:	08004437 	.word	0x08004437
 80043a0:	0800442d 	.word	0x0800442d
 80043a4:	08004429 	.word	0x08004429
 80043a8:	08004475 	.word	0x08004475
 80043ac:	0800446b 	.word	0x0800446b
 80043b0:	0800446b 	.word	0x0800446b
 80043b4:	0800446b 	.word	0x0800446b
 80043b8:	0800446b 	.word	0x0800446b
 80043bc:	0800446b 	.word	0x0800446b
 80043c0:	0800446b 	.word	0x0800446b
 80043c4:	0800446b 	.word	0x0800446b
 80043c8:	0800446b 	.word	0x0800446b
 80043cc:	0800446b 	.word	0x0800446b
 80043d0:	0800446b 	.word	0x0800446b
 80043d4:	0800446b 	.word	0x0800446b
 80043d8:	0800446b 	.word	0x0800446b
 80043dc:	0800446b 	.word	0x0800446b
 80043e0:	0800446b 	.word	0x0800446b
 80043e4:	0800446b 	.word	0x0800446b
 80043e8:	0800446b 	.word	0x0800446b
 80043ec:	0800446b 	.word	0x0800446b
 80043f0:	0800446b 	.word	0x0800446b
 80043f4:	0800446b 	.word	0x0800446b
 80043f8:	0800446b 	.word	0x0800446b
 80043fc:	0800446b 	.word	0x0800446b
 8004400:	0800446b 	.word	0x0800446b
 8004404:	0800446b 	.word	0x0800446b
 8004408:	0800446b 	.word	0x0800446b
 800440c:	0800446b 	.word	0x0800446b
 8004410:	0800446b 	.word	0x0800446b
 8004414:	0800446b 	.word	0x0800446b
 8004418:	0800446b 	.word	0x0800446b
 800441c:	08004441 	.word	0x08004441
 8004420:	0800444f 	.word	0x0800444f
 8004424:	0800445d 	.word	0x0800445d
		case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
			//		DelayNs(arg_int);
			break;
		case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
			//		DelayNs(arg_int);
			__NOP();
 8004428:	bf00      	nop
			break;
 800442a:	e024      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
			DelayNs(10000);
 800442c:	f242 7010 	movw	r0, #10000	; 0x2710
 8004430:	f7ff ff82 	bl	8004338 <_Z7DelayNsm>
			//		for (uint16_t n = 0; n < 320; n++)
			//		{
			//			__NOP();
			//		}
			break;
 8004434:	e01f      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
			HAL_Delay(arg_int);
 8004436:	7abb      	ldrb	r3, [r7, #10]
 8004438:	4618      	mov	r0, r3
 800443a:	f007 fee7 	bl	800c20c <HAL_Delay>
			break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 800443e:	e01a      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
			//	case U8X8_MSG_GPIO_SPI_DATA:
			//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
			//		break;
		case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8004440:	7abb      	ldrb	r3, [r7, #10]
 8004442:	461a      	mov	r2, r3
 8004444:	2108      	movs	r1, #8
 8004446:	480e      	ldr	r0, [pc, #56]	; (8004480 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004448:	f009 f8c2 	bl	800d5d0 <HAL_GPIO_WritePin>
			break;
 800444c:	e013      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 800444e:	7abb      	ldrb	r3, [r7, #10]
 8004450:	461a      	mov	r2, r3
 8004452:	2110      	movs	r1, #16
 8004454:	480a      	ldr	r0, [pc, #40]	; (8004480 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004456:	f009 f8bb 	bl	800d5d0 <HAL_GPIO_WritePin>
			break;
 800445a:	e00c      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 800445c:	7abb      	ldrb	r3, [r7, #10]
 800445e:	461a      	mov	r2, r3
 8004460:	2140      	movs	r1, #64	; 0x40
 8004462:	4807      	ldr	r0, [pc, #28]	; (8004480 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004464:	f009 f8b4 	bl	800d5d0 <HAL_GPIO_WritePin>
			break;
 8004468:	e005      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		default:
			u8x8_SetGPIOResult(u8x8, 1);			// default return value
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			break;
 8004472:	e000      	b.n	8004476 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			break;							// can be used to setup pins
 8004474:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 8004476:	2301      	movs	r3, #1
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40010800 	.word	0x40010800

08004484 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	72fb      	strb	r3, [r7, #11]
 8004492:	4613      	mov	r3, r2
 8004494:	72bb      	strb	r3, [r7, #10]
	//	uint8_t byte;
	//	uint8_t *data;
	switch(msg)
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	3b14      	subs	r3, #20
 800449a:	2b0c      	cmp	r3, #12
 800449c:	d848      	bhi.n	8004530 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044e9 	.word	0x080044e9
 80044a8:	08004531 	.word	0x08004531
 80044ac:	08004531 	.word	0x08004531
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	08004509 	.word	0x08004509
 80044b8:	0800451d 	.word	0x0800451d
 80044bc:	08004531 	.word	0x08004531
 80044c0:	08004531 	.word	0x08004531
 80044c4:	08004531 	.word	0x08004531
 80044c8:	08004531 	.word	0x08004531
 80044cc:	08004531 	.word	0x08004531
 80044d0:	08004531 	.word	0x08004531
 80044d4:	080044fb 	.word	0x080044fb
			//			byte = *data;
			//			data++;
			//			arg_int--;
			//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
			//		}
			HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 80044d8:	7abb      	ldrb	r3, [r7, #10]
 80044da:	b29a      	uxth	r2, r3
 80044dc:	230a      	movs	r3, #10
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4817      	ldr	r0, [pc, #92]	; (8004540 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 80044e2:	f00b f8d9 	bl	800f698 <HAL_SPI_Transmit>
			break;
 80044e6:	e025      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_INIT:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	461a      	mov	r2, r3
 80044f0:	2149      	movs	r1, #73	; 0x49
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7fe ff2c 	bl	8003350 <u8x8_gpio_call>
			break;
 80044f8:	e01c      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_SET_DC:
			u8x8_gpio_SetDC(u8g2, arg_int);
 80044fa:	7abb      	ldrb	r3, [r7, #10]
 80044fc:	461a      	mov	r2, r3
 80044fe:	214a      	movs	r1, #74	; 0x4a
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7fe ff25 	bl	8003350 <u8x8_gpio_call>
			break;
 8004506:	e015      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_START_TRANSFER:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	2149      	movs	r1, #73	; 0x49
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7fe ff1c 	bl	8003350 <u8x8_gpio_call>
			__NOP();
 8004518:	bf00      	nop
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
			break;
 800451a:	e00b      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_END_TRANSFER:
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
			__NOP();
 800451c:	bf00      	nop
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	461a      	mov	r2, r3
 8004526:	2149      	movs	r1, #73	; 0x49
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7fe ff11 	bl	8003350 <u8x8_gpio_call>
			break;
 800452e:	e001      	b.n	8004534 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		default:
			return 0;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 8004534:	2301      	movs	r3, #1
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	2000072c 	.word	0x2000072c

08004544 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4618      	mov	r0, r3
 8004550:	f00c fbd0 	bl	8010cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 8004560:	b5b0      	push	{r4, r5, r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff ffe8 	bl	8004544 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2020 	strb.w	r2, [r3, #32]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <_ZN13NHDST7565_LCDC1Eh+0x48>)
 8004580:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8004584:	4615      	mov	r5, r2
 8004586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800458a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800458e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f808 	bl	80045ac <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bdb0      	pop	{r4, r5, r7, pc}
 80045a6:	bf00      	nop
 80045a8:	08015074 	.word	0x08015074

080045ac <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d004      	beq.n	80045d4 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x28>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d108      	bne.n	80045e6 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3a>
	{
		dispParams.width = 64;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2240      	movs	r2, #64	; 0x40
 80045d8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 128;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2280      	movs	r2, #128	; 0x80
 80045e0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80045e4:	e007      	b.n	80045f6 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x4a>
	}
	else
	{
		dispParams.width = 128;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2280      	movs	r2, #128	; 0x80
 80045ea:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 64;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2240      	movs	r2, #64	; 0x40
 80045f2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	}
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>:


void NHDST7565_LCD::assignTextParams(String Text, const uint8_t *Font)
{
 8004600:	b590      	push	{r4, r7, lr}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
	textToWrite.textLen = 0;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	761a      	strb	r2, [r3, #24]
	textToWrite.textHigh = 0;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	765a      	strb	r2, [r3, #25]
	textToWrite.text = "";
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4930      	ldr	r1, [pc, #192]	; (80046dc <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 800461c:	4618      	mov	r0, r3
 800461e:	f00c fc6e 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textFont = Font;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	61da      	str	r2, [r3, #28]
	//	if(textToWrite.textFont != Font)
	//	{
	u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7fd fdeb 	bl	8002210 <u8g2_SetFont>
	textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004640:	b2da      	uxtb	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	765a      	strb	r2, [r3, #25]
	//	}
	if(Text != "")
 8004646:	4925      	ldr	r1, [pc, #148]	; (80046dc <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 8004648:	68b8      	ldr	r0, [r7, #8]
 800464a:	f000 fda7 	bl	800519c <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00e      	beq.n	8004672 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x72>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800465a:	68b8      	ldr	r0, [r7, #8]
 800465c:	f00c fcb8 	bl	8010fd0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004660:	4603      	mov	r3, r0
 8004662:	4619      	mov	r1, r3
 8004664:	4620      	mov	r0, r4
 8004666:	f7fd fe3d 	bl	80022e4 <u8g2_GetStrWidth>
 800466a:	4603      	mov	r3, r0
 800466c:	461a      	mov	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	761a      	strb	r2, [r3, #24]

	if(textToWrite.textLen < dispParams.width)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	7e1a      	ldrb	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800467c:	429a      	cmp	r2, r3
 800467e:	d205      	bcs.n	800468c <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x8c>
	{
		textToWrite.text = Text;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	4618      	mov	r0, r3
 8004686:	f00c fb5c 	bl	8010d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		textToWrite.textFont = displayFonts[W_5_H_8];
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
	}
}
 800468a:	e022      	b.n	80046d2 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xd2>
		textToWrite.textFont = displayFonts[W_5_H_8];
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	61da      	str	r2, [r3, #28]
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f7fd fdb4 	bl	8002210 <u8g2_SetFont>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80046ae:	68b8      	ldr	r0, [r7, #8]
 80046b0:	f00c fc8e 	bl	8010fd0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4619      	mov	r1, r3
 80046b8:	4620      	mov	r0, r4
 80046ba:	f7fd fe13 	bl	80022e4 <u8g2_GetStrWidth>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	761a      	strb	r2, [r3, #24]
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	765a      	strb	r2, [r3, #25]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd90      	pop	{r4, r7, pc}
 80046da:	bf00      	nop
 80046dc:	08015090 	.word	0x08015090

080046e0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>:

void NHDST7565_LCD::assignNewDrawCoord(uint8_t OldXPos, uint8_t OldYPos,
		uint8_t &NewXPos, uint8_t &NewYPos)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	72fb      	strb	r3, [r7, #11]
 80046ee:	4613      	mov	r3, r2
 80046f0:	72bb      	strb	r3, [r7, #10]
	if(OldXPos <= dispParams.width && OldYPos <= dispParams.high)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80046f8:	7afa      	ldrb	r2, [r7, #11]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d80c      	bhi.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004704:	7aba      	ldrb	r2, [r7, #10]
 8004706:	429a      	cmp	r2, r3
 8004708:	d806      	bhi.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
	{
		NewXPos = OldXPos;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	7afa      	ldrb	r2, [r7, #11]
 800470e:	701a      	strb	r2, [r3, #0]
		NewYPos = OldYPos;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	7aba      	ldrb	r2, [r7, #10]
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e0bb      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
	}
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800471e:	7afa      	ldrb	r2, [r7, #11]
 8004720:	429a      	cmp	r2, r3
 8004722:	d930      	bls.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800472a:	7aba      	ldrb	r2, [r7, #10]
 800472c:	429a      	cmp	r2, r3
 800472e:	d82a      	bhi.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
	{
		NewYPos = OldYPos;
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	7aba      	ldrb	r2, [r7, #10]
 8004734:	701a      	strb	r2, [r3, #0]
		switch(OldXPos)
 8004736:	7afb      	ldrb	r3, [r7, #11]
 8004738:	2b83      	cmp	r3, #131	; 0x83
 800473a:	d00b      	beq.n	8004754 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x74>
 800473c:	2b84      	cmp	r3, #132	; 0x84
 800473e:	d011      	beq.n	8004764 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x84>
 8004740:	2b82      	cmp	r3, #130	; 0x82
 8004742:	d117      	bne.n	8004774 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x94>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f901 	bl	800494c <_ZN13NHDST7565_LCD11setTextLeftEv>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	701a      	strb	r2, [r3, #0]
				break;
 8004752:	e017      	b.n	8004784 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f905 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	701a      	strb	r2, [r3, #0]
				break;
 8004762:	e00f      	b.n	8004784 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f914 	bl	8004992 <_ZN13NHDST7565_LCD12setTextRightEv>
 800476a:	4603      	mov	r3, r0
 800476c:	461a      	mov	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	701a      	strb	r2, [r3, #0]
				break;
 8004772:	e007      	b.n	8004784 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			default:
				NewXPos = setTextCenter();
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f8f5 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	701a      	strb	r2, [r3, #0]
				break;
 8004782:	bf00      	nop
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 8004784:	e084      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800478c:	7afa      	ldrb	r2, [r7, #11]
 800478e:	429a      	cmp	r2, r3
 8004790:	d830      	bhi.n	80047f4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004798:	7aba      	ldrb	r2, [r7, #10]
 800479a:	429a      	cmp	r2, r3
 800479c:	d92a      	bls.n	80047f4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
	{
		NewXPos = OldXPos;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	7afa      	ldrb	r2, [r7, #11]
 80047a2:	701a      	strb	r2, [r3, #0]
		switch(OldYPos)
 80047a4:	7abb      	ldrb	r3, [r7, #10]
 80047a6:	2b47      	cmp	r3, #71	; 0x47
 80047a8:	d00b      	beq.n	80047c2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xe2>
 80047aa:	2b48      	cmp	r3, #72	; 0x48
 80047ac:	d011      	beq.n	80047d2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xf2>
 80047ae:	2b46      	cmp	r3, #70	; 0x46
 80047b0:	d117      	bne.n	80047e2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x102>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f900 	bl	80049b8 <_ZN13NHDST7565_LCD10setTextTopEv>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	701a      	strb	r2, [r3, #0]
				break;
 80047c0:	e017      	b.n	80047f2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f906 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	701a      	strb	r2, [r3, #0]
				break;
 80047d0:	e00f      	b.n	80047f2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f920 	bl	8004a18 <_ZN13NHDST7565_LCD13setTextBottomEv>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	701a      	strb	r2, [r3, #0]
				break;
 80047e0:	e007      	b.n	80047f2 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			default:
				NewYPos = setTextMiddle();
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f8f6 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	701a      	strb	r2, [r3, #0]
				break;
 80047f0:	bf00      	nop
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 80047f2:	e04d      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else
	{
		switch(OldXPos)
 80047f4:	7afb      	ldrb	r3, [r7, #11]
 80047f6:	2b83      	cmp	r3, #131	; 0x83
 80047f8:	d00b      	beq.n	8004812 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x132>
 80047fa:	2b84      	cmp	r3, #132	; 0x84
 80047fc:	d011      	beq.n	8004822 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x142>
 80047fe:	2b82      	cmp	r3, #130	; 0x82
 8004800:	d117      	bne.n	8004832 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x152>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f8a2 	bl	800494c <_ZN13NHDST7565_LCD11setTextLeftEv>
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	701a      	strb	r2, [r3, #0]
				break;
 8004810:	e017      	b.n	8004842 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f8a6 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 8004818:	4603      	mov	r3, r0
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	701a      	strb	r2, [r3, #0]
				break;
 8004820:	e00f      	b.n	8004842 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f8b5 	bl	8004992 <_ZN13NHDST7565_LCD12setTextRightEv>
 8004828:	4603      	mov	r3, r0
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	701a      	strb	r2, [r3, #0]
				break;
 8004830:	e007      	b.n	8004842 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			default:
				NewXPos = setTextCenter();
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f896 	bl	8004964 <_ZN13NHDST7565_LCD13setTextCenterEv>
 8004838:	4603      	mov	r3, r0
 800483a:	461a      	mov	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	701a      	strb	r2, [r3, #0]
				break;
 8004840:	bf00      	nop
		}
		switch(OldYPos)
 8004842:	7abb      	ldrb	r3, [r7, #10]
 8004844:	2b47      	cmp	r3, #71	; 0x47
 8004846:	d00b      	beq.n	8004860 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x180>
 8004848:	2b48      	cmp	r3, #72	; 0x48
 800484a:	d011      	beq.n	8004870 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x190>
 800484c:	2b46      	cmp	r3, #70	; 0x46
 800484e:	d117      	bne.n	8004880 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1a0>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f8b1 	bl	80049b8 <_ZN13NHDST7565_LCD10setTextTopEv>
 8004856:	4603      	mov	r3, r0
 8004858:	461a      	mov	r2, r3
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	701a      	strb	r2, [r3, #0]
				break;
 800485e:	e017      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f8b7 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8004866:	4603      	mov	r3, r0
 8004868:	461a      	mov	r2, r3
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	701a      	strb	r2, [r3, #0]
				break;
 800486e:	e00f      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f8d1 	bl	8004a18 <_ZN13NHDST7565_LCD13setTextBottomEv>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	701a      	strb	r2, [r3, #0]
				break;
 800487e:	e007      	b.n	8004890 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			default:
				NewYPos = setTextMiddle();
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f8a7 	bl	80049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 8004886:	4603      	mov	r3, r0
 8004888:	461a      	mov	r2, r3
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	701a      	strb	r2, [r3, #0]
				break;
 800488e:	bf00      	nop
		}
	}
}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d816      	bhi.n	80048d8 <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048c7 	.word	0x080048c7
 80048b8:	080048cd 	.word	0x080048cd
 80048bc:	080048d3 	.word	0x080048d3
	{
		case LANDSCAPE_1:
			DisplayRotation = &u8g2_cb_r2;
 80048c0:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 80048c2:	60fb      	str	r3, [r7, #12]
			break;
 80048c4:	e00b      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case LANDSCAPE_2:
			DisplayRotation = &u8g2_cb_r0;
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 80048c8:	60fb      	str	r3, [r7, #12]
			break;
 80048ca:	e008      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_1:
			DisplayRotation = &u8g2_cb_r1;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <_ZN13NHDST7565_LCD8setupLcdEv+0xa4>)
 80048ce:	60fb      	str	r3, [r7, #12]
			break;
 80048d0:	e005      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_2:
			DisplayRotation = &u8g2_cb_r3;
 80048d2:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <_ZN13NHDST7565_LCD8setupLcdEv+0xa8>)
 80048d4:	60fb      	str	r3, [r7, #12]
			break;
 80048d6:	e002      	b.n	80048de <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		default:
			DisplayRotation = &u8g2_cb_r0;
 80048d8:	4b17      	ldr	r3, [pc, #92]	; (8004938 <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 80048da:	60fb      	str	r3, [r7, #12]
			break;
 80048dc:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <_ZN13NHDST7565_LCD8setupLcdEv+0xac>)
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <_ZN13NHDST7565_LCD8setupLcdEv+0xb0>)
 80048e8:	68f9      	ldr	r1, [r7, #12]
 80048ea:	f7fc febb 	bl	8001664 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3324      	adds	r3, #36	; 0x24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe fcfd 	bl	80032f2 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3324      	adds	r3, #36	; 0x24
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe fd06 	bl	8003310 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3324      	adds	r3, #36	; 0x24
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fb24 	bl	8001f58 <u8g2_SetFontMode>
	u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7fd fe4c 	bl	80025bc <u8g2_SetDrawColor>
	clearScreen();
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8a6 	bl	8004a76 <_ZN13NHDST7565_LCD11clearScreenEv>
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	080181e4 	.word	0x080181e4
 8004938:	080181cc 	.word	0x080181cc
 800493c:	080181d8 	.word	0x080181d8
 8004940:	080181f0 	.word	0x080181f0
 8004944:	08004379 	.word	0x08004379
 8004948:	08004485 	.word	0x08004485

0800494c <_ZN13NHDST7565_LCD11setTextLeftEv>:


uint8_t NHDST7565_LCD::setTextLeft()
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	73fb      	strb	r3, [r7, #15]
	//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr

08004964 <_ZN13NHDST7565_LCD13setTextCenterEv>:

uint8_t NHDST7565_LCD::setTextCenter()
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen) / 2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004976:	461a      	mov	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7e1b      	ldrb	r3, [r3, #24]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	0fda      	lsrs	r2, r3, #31
 8004980:	4413      	add	r3, r2
 8004982:	105b      	asrs	r3, r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004986:	7bfb      	ldrb	r3, [r7, #15]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <_ZN13NHDST7565_LCD12setTextRightEv>:

uint8_t NHDST7565_LCD::setTextRight()
{
 8004992:	b480      	push	{r7}
 8004994:	b085      	sub	sp, #20
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	7e1b      	ldrb	r3, [r3, #24]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <_ZN13NHDST7565_LCD10setTextTopEv>:

uint8_t NHDST7565_LCD::setTextTop()
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	73fb      	strb	r3, [r7, #15]
	NewPos = 1;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <_ZN13NHDST7565_LCD13setTextMiddleEv>:

uint8_t NHDST7565_LCD::setTextMiddle()
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	73fb      	strb	r3, [r7, #15]
	NewPos = ((dispParams.high - textToWrite.textHigh + 1) / 2) + (textToWrite.textHigh / 2) - textToWrite.textHigh;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80049e6:	461a      	mov	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	7e5b      	ldrb	r3, [r3, #25]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	3301      	adds	r3, #1
 80049f0:	0fda      	lsrs	r2, r3, #31
 80049f2:	4413      	add	r3, r2
 80049f4:	105b      	asrs	r3, r3, #1
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	7e5b      	ldrb	r3, [r3, #25]
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	7e5b      	ldrb	r3, [r3, #25]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <_ZN13NHDST7565_LCD13setTextBottomEv>:

uint8_t NHDST7565_LCD::setTextBottom()
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]
	//	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	NewPos = dispParams.high - 1 - textToWrite.textHigh;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	7e5b      	ldrb	r3, [r3, #25]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>:



void NHDST7565_LCD::clearFrameBuffer()
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3324      	adds	r3, #36	; 0x24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fc fc59 	bl	8001306 <u8g2_ClearBuffer>
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3324      	adds	r3, #36	; 0x24
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fc fcbf 	bl	80013ec <u8g2_SendBuffer>
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff ffdf 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ffe9 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZN13NHDST7565_LCD7drawBoxEhhhh>:

void NHDST7565_LCD::drawBox(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
 8004a92:	b590      	push	{r4, r7, lr}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af02      	add	r7, sp, #8
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	4608      	mov	r0, r1
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	70fb      	strb	r3, [r7, #3]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70bb      	strb	r3, [r7, #2]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	707b      	strb	r3, [r7, #1]
	u8g2_DrawBox(&U8G2_Display, x, y, w, h);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ab2:	787c      	ldrb	r4, [r7, #1]
 8004ab4:	78ba      	ldrb	r2, [r7, #2]
 8004ab6:	78f9      	ldrb	r1, [r7, #3]
 8004ab8:	7e3b      	ldrb	r3, [r7, #24]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4623      	mov	r3, r4
 8004abe:	f7fc fad1 	bl	8001064 <u8g2_DrawBox>
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd90      	pop	{r4, r7, pc}

08004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>:
	if(Color != figureColorSetted)
		u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
}

void NHDST7565_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos, const uint8_t *u8g2Font)
{
 8004aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004acc:	b08f      	sub	sp, #60	; 0x3c
 8004ace:	af02      	add	r7, sp, #8
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	460b      	mov	r3, r1
 8004ada:	71fb      	strb	r3, [r7, #7]
 8004adc:	4613      	mov	r3, r2
 8004ade:	71bb      	strb	r3, [r7, #6]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	75fb      	strb	r3, [r7, #23]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	75bb      	strb	r3, [r7, #22]
	assignTextParams(Text, u8g2Font);
 8004ae8:	f107 0318 	add.w	r3, r7, #24
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f00c fa85 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004af4:	f107 0318 	add.w	r3, r7, #24
 8004af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004afa:	4619      	mov	r1, r3
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff fd7f 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004b02:	f107 0318 	add.w	r3, r7, #24
 8004b06:	4618      	mov	r0, r3
 8004b08:	f00c f915 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004b0c:	f107 0017 	add.w	r0, r7, #23
 8004b10:	79ba      	ldrb	r2, [r7, #6]
 8004b12:	79f9      	ldrb	r1, [r7, #7]
 8004b14:	f107 0316 	add.w	r3, r7, #22
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff fddf 	bl	80046e0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
//				NewYPos = setTextMiddle();
//				break;
//		}
//	}

	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos + textToWrite.textHigh, textToWrite.text.c_str());
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004b28:	7dfd      	ldrb	r5, [r7, #23]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	7e5a      	ldrb	r2, [r3, #25]
 8004b2e:	7dbb      	ldrb	r3, [r7, #22]
 8004b30:	4413      	add	r3, r2
 8004b32:	b2de      	uxtb	r6, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f00c fa4a 	bl	8010fd0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	4632      	mov	r2, r6
 8004b40:	4629      	mov	r1, r5
 8004b42:	4620      	mov	r0, r4
 8004b44:	f7fd fac6 	bl	80020d4 <u8g2_DrawStr>
}
 8004b48:	bf00      	nop
 8004b4a:	3734      	adds	r7, #52	; 0x34
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b50 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>:
}


uint8_t NHDST7565_LCD::drawMenuList(uint8_t FirstItemXPos, uint8_t FirstItemYPos, uint8_t FirsListItem, uint8_t ItemSel, const char **MenuItems, uint8_t MaxItems,
		bool WithCheckBox, bool MenuSelected, bool *ItemsChecked, const uint8_t *u8g2Font)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b0a3      	sub	sp, #140	; 0x8c
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	70fb      	strb	r3, [r7, #3]
 8004b62:	460b      	mov	r3, r1
 8004b64:	70bb      	strb	r3, [r7, #2]
 8004b66:	4613      	mov	r3, r2
 8004b68:	707b      	strb	r3, [r7, #1]
	assignTextParams("", u8g2Font);
 8004b6a:	f107 0320 	add.w	r3, r7, #32
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f00b ffb0 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8004b74:	f107 0220 	add.w	r2, r7, #32
 8004b78:	f107 0308 	add.w	r3, r7, #8
 8004b7c:	49a8      	ldr	r1, [pc, #672]	; (8004e20 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d0>)
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f00c fa70 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004b84:	f107 0308 	add.w	r3, r7, #8
 8004b88:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fd36 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004b94:	f107 0308 	add.w	r3, r7, #8
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f00c f8cc 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004b9e:	f107 0320 	add.w	r3, r7, #32
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f00b ff97 	bl	8010ad6 <_ZNSaIcED1Ev>
	uint8_t MaxLines = (dispParams.high - FirstItemYPos) / (textToWrite.textHigh + MENU_ITEM_INTERLINE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004bae:	461a      	mov	r2, r3
 8004bb0:	78bb      	ldrb	r3, [r7, #2]
 8004bb2:	1ad2      	subs	r2, r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	7e5b      	ldrb	r3, [r3, #25]
 8004bb8:	3303      	adds	r3, #3
 8004bba:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t NextItem = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t MaxTexLen = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t FrameHigh = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	for(int Item = 0; Item < MaxLines; Item++)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bd8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004bdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bde:	429a      	cmp	r2, r3
 8004be0:	f280 81bd 	bge.w	8004f5e <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40e>
	{
		NextItem = FirsListItem + Item;
 8004be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	787b      	ldrb	r3, [r7, #1]
 8004bea:	4413      	add	r3, r2
 8004bec:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if(NextItem >= MaxItems)
 8004bf0:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004bf4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	f080 81af 	bcs.w	8004f5c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40c>
			break;
		if(NextItem == ItemSel && MenuSelected)
 8004bfe:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004c02:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004c06:	429a      	cmp	r2, r3
 8004c08:	f040 810c 	bne.w	8004e24 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
 8004c0c:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8107 	beq.w	8004e24 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
		{
			assignTextParams(MenuItems[NextItem], u8g2Font);
 8004c16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c20:	4413      	add	r3, r2
 8004c22:	681c      	ldr	r4, [r3, #0]
 8004c24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f00b ff53 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8004c2e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c36:	4621      	mov	r1, r4
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f00c fa13 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c46:	4619      	mov	r1, r3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fcd9 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c52:	4618      	mov	r0, r3
 8004c54:	f00c f86f 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004c58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f00b ff3a 	bl	8010ad6 <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 0);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3324      	adds	r3, #36	; 0x24
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd f975 	bl	8001f58 <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 0);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3324      	adds	r3, #36	; 0x24
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fd fca1 	bl	80025bc <u8g2_SetDrawColor>
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004c7a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c84:	4413      	add	r3, r2
 8004c86:	681c      	ldr	r4, [r3, #0]
 8004c88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f00b ff21 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8004c92:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004c96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f00c f9e1 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	7e5b      	ldrb	r3, [r3, #25]
 8004ca6:	3303      	adds	r3, #3
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	78bb      	ldrb	r3, [r7, #2]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	b2d8      	uxtb	r0, r3
 8004cba:	78fa      	ldrb	r2, [r7, #3]
 8004cbc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff fefe 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004cce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f00c f82f 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004cd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f00b fefa 	bl	8010ad6 <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3324      	adds	r3, #36	; 0x24
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fd f935 	bl	8001f58 <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3324      	adds	r3, #36	; 0x24
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fd fc61 	bl	80025bc <u8g2_SetDrawColor>
			if(!WithCheckBox)
 8004cfa:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004cfe:	f083 0301 	eor.w	r3, r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d033      	beq.n	8004d70 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x220>
			{
				u8g2_SetFont(&U8G2_Display, displayFonts[W_8_H_8_ICON]);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f7fd fa7a 	bl	8002210 <u8g2_SetFont>
				u8g2_DrawGlyph(&U8G2_Display, FirstItemXPos + textToWrite.textLen + 1, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 1, 0x006F);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7e1a      	ldrb	r2, [r3, #24]
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	4413      	add	r3, r2
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	b2dc      	uxtb	r4, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	7e5a      	ldrb	r2, [r3, #25]
 8004d34:	78bb      	ldrb	r3, [r7, #2]
 8004d36:	4413      	add	r3, r2
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	7e5b      	ldrb	r3, [r3, #25]
 8004d3e:	3303      	adds	r3, #3
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004d44:	b2c9      	uxtb	r1, r1
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	3301      	adds	r3, #1
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	236f      	movs	r3, #111	; 0x6f
 8004d56:	4621      	mov	r1, r4
 8004d58:	f7fd f90e 	bl	8001f78 <u8g2_DrawGlyph>
				u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f7fd fa51 	bl	8002210 <u8g2_SetFont>
			if(!WithCheckBox)
 8004d6e:	e0e7      	b.n	8004f40 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			}
			else
			{
				if(ItemsChecked[NextItem])
 8004d70:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004d74:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004d78:	4413      	add	r3, r2
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d034      	beq.n	8004dea <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x29a>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d8c:	3b0b      	subs	r3, #11
 8004d8e:	b2d9      	uxtb	r1, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	7e5b      	ldrb	r3, [r3, #25]
 8004d94:	3303      	adds	r3, #3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	fb02 f303 	mul.w	r3, r2, r3
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	78bb      	ldrb	r3, [r7, #2]
 8004da4:	4413      	add	r3, r2
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	2308      	movs	r3, #8
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	2308      	movs	r3, #8
 8004dae:	f7fc f990 	bl	80010d2 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004dbe:	3b09      	subs	r3, #9
 8004dc0:	b2d9      	uxtb	r1, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7e5b      	ldrb	r3, [r3, #25]
 8004dc6:	3303      	adds	r3, #3
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	78bb      	ldrb	r3, [r7, #2]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	3302      	adds	r3, #2
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	2304      	movs	r3, #4
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	2304      	movs	r3, #4
 8004de4:	f7fc f93e 	bl	8001064 <u8g2_DrawBox>
			if(!WithCheckBox)
 8004de8:	e0aa      	b.n	8004f40 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004df6:	3b0b      	subs	r3, #11
 8004df8:	b2d9      	uxtb	r1, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7e5b      	ldrb	r3, [r3, #25]
 8004dfe:	3303      	adds	r3, #3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	fb02 f303 	mul.w	r3, r2, r3
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	78bb      	ldrb	r3, [r7, #2]
 8004e0e:	4413      	add	r3, r2
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	2308      	movs	r3, #8
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	2308      	movs	r3, #8
 8004e18:	f7fc f95b 	bl	80010d2 <u8g2_DrawFrame>
			if(!WithCheckBox)
 8004e1c:	e090      	b.n	8004f40 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
 8004e1e:	bf00      	nop
 8004e20:	08015090 	.word	0x08015090
				}
			}
		}
		else
		{
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004e24:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e2e:	4413      	add	r3, r2
 8004e30:	681c      	ldr	r4, [r3, #0]
 8004e32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e36:	4618      	mov	r0, r3
 8004e38:	f00b fe4c 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8004e3c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8004e40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004e44:	4621      	mov	r1, r4
 8004e46:	4618      	mov	r0, r3
 8004e48:	f00c f90c 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7e5b      	ldrb	r3, [r3, #25]
 8004e50:	3303      	adds	r3, #3
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	78bb      	ldrb	r3, [r7, #2]
 8004e60:	4413      	add	r3, r2
 8004e62:	b2d8      	uxtb	r0, r3
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	4603      	mov	r3, r0
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fe29 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004e78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f00b ff5a 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004e82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e86:	4618      	mov	r0, r3
 8004e88:	f00b fe25 	bl	8010ad6 <_ZNSaIcED1Ev>
			if(WithCheckBox)
 8004e8c:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d055      	beq.n	8004f40 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			{
				if(ItemsChecked[NextItem])
 8004e94:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004e98:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004e9c:	4413      	add	r3, r2
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d034      	beq.n	8004f0e <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3be>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004eb0:	3b0b      	subs	r3, #11
 8004eb2:	b2d9      	uxtb	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	7e5b      	ldrb	r3, [r3, #25]
 8004eb8:	3303      	adds	r3, #3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	fb02 f303 	mul.w	r3, r2, r3
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	78bb      	ldrb	r3, [r7, #2]
 8004ec8:	4413      	add	r3, r2
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	2308      	movs	r3, #8
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	f7fc f8fe 	bl	80010d2 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004ee2:	3b09      	subs	r3, #9
 8004ee4:	b2d9      	uxtb	r1, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7e5b      	ldrb	r3, [r3, #25]
 8004eea:	3303      	adds	r3, #3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	78bb      	ldrb	r3, [r7, #2]
 8004efa:	4413      	add	r3, r2
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	3302      	adds	r3, #2
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	2304      	movs	r3, #4
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2304      	movs	r3, #4
 8004f08:	f7fc f8ac 	bl	8001064 <u8g2_DrawBox>
 8004f0c:	e018      	b.n	8004f40 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004f1a:	3b0b      	subs	r3, #11
 8004f1c:	b2d9      	uxtb	r1, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	7e5b      	ldrb	r3, [r3, #25]
 8004f22:	3303      	adds	r3, #3
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	78bb      	ldrb	r3, [r7, #2]
 8004f32:	4413      	add	r3, r2
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	2308      	movs	r3, #8
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	f7fc f8c9 	bl	80010d2 <u8g2_DrawFrame>
				}
			}
		}
		if(MaxTexLen < textToWrite.textLen)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	7e1b      	ldrb	r3, [r3, #24]
 8004f44:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d203      	bcs.n	8004f54 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x404>
			MaxTexLen = textToWrite.textLen;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7e1b      	ldrb	r3, [r3, #24]
 8004f50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for(int Item = 0; Item < MaxLines; Item++)
 8004f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f56:	3301      	adds	r3, #1
 8004f58:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f5a:	e63d      	b.n	8004bd8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x88>
			break;
 8004f5c:	bf00      	nop
	}
	if((textToWrite.textHigh * (MaxItems + 1)) + 2 < dispParams.high - FirstItemYPos - 1 )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	7e5b      	ldrb	r3, [r3, #25]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004f68:	3301      	adds	r3, #1
 8004f6a:	fb03 f302 	mul.w	r3, r3, r2
 8004f6e:	1c9a      	adds	r2, r3, #2
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004f76:	4619      	mov	r1, r3
 8004f78:	78bb      	ldrb	r3, [r7, #2]
 8004f7a:	1acb      	subs	r3, r1, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	da0c      	bge.n	8004f9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x44c>
		FrameHigh = (textToWrite.textHigh * (MaxItems + 1)) + 2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7e5b      	ldrb	r3, [r3, #25]
 8004f86:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8004f8a:	3201      	adds	r2, #1
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	3302      	adds	r3, #2
 8004f96:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004f9a:	e008      	b.n	8004fae <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x45e>
	else
		FrameHigh = dispParams.high - FirstItemYPos - 1;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004fa2:	78bb      	ldrb	r3, [r7, #2]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	if(!WithCheckBox)
 8004fae:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004fb2:	f083 0301 	eor.w	r3, r3, #1
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d015      	beq.n	8004fe8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x498>
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, MaxTexLen + 10, FrameHigh, 3);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b2d9      	uxtb	r1, r3
 8004fc8:	78bb      	ldrb	r3, [r7, #2]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004fd2:	330a      	adds	r3, #10
 8004fd4:	b2dc      	uxtb	r4, r3
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	4623      	mov	r3, r4
 8004fe2:	f7fc f8d7 	bl	8001194 <u8g2_DrawRFrame>
 8004fe6:	e019      	b.n	800501c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x4cc>
	}
	else
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, dispParams.width - FirstItemXPos - 1, FrameHigh, 3);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b2d9      	uxtb	r1, r3
 8004ff4:	78bb      	ldrb	r3, [r7, #2]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b2dc      	uxtb	r4, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	b2db      	uxtb	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b2da      	uxtb	r2, r3
 800500a:	2303      	movs	r3, #3
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	4622      	mov	r2, r4
 8005018:	f7fc f8bc 	bl	8001194 <u8g2_DrawRFrame>
	}
	return MaxLines;
 800501c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005020:	4618      	mov	r0, r3
 8005022:	3784      	adds	r7, #132	; 0x84
 8005024:	46bd      	mov	sp, r7
 8005026:	bd90      	pop	{r4, r7, pc}

08005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>:

void NHDST7565_LCD::drawSymbol(uint8_t XPos, uint8_t YPos, const uint8_t *SymbolFont, uint16_t SymbolCode)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08e      	sub	sp, #56	; 0x38
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	72fb      	strb	r3, [r7, #11]
 8005036:	4613      	mov	r3, r2
 8005038:	72bb      	strb	r3, [r7, #10]
	uint8_t NewXPos = 0, NewYPos = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	74fb      	strb	r3, [r7, #19]
 800503e:	2300      	movs	r3, #0
 8005040:	74bb      	strb	r3, [r7, #18]
	assignTextParams("", SymbolFont);
 8005042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005046:	4618      	mov	r0, r3
 8005048:	f00b fd44 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800504c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005050:	f107 0314 	add.w	r3, r7, #20
 8005054:	4915      	ldr	r1, [pc, #84]	; (80050ac <_ZN13NHDST7565_LCD10drawSymbolEhhPKht+0x84>)
 8005056:	4618      	mov	r0, r3
 8005058:	f00c f804 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800505c:	f107 0314 	add.w	r3, r7, #20
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	4619      	mov	r1, r3
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f7ff facb 	bl	8004600 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 800506a:	f107 0314 	add.w	r3, r7, #20
 800506e:	4618      	mov	r0, r3
 8005070:	f00b fe61 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005078:	4618      	mov	r0, r3
 800507a:	f00b fd2c 	bl	8010ad6 <_ZNSaIcED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 800507e:	f107 0013 	add.w	r0, r7, #19
 8005082:	7aba      	ldrb	r2, [r7, #10]
 8005084:	7af9      	ldrb	r1, [r7, #11]
 8005086:	f107 0312 	add.w	r3, r7, #18
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	4603      	mov	r3, r0
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff fb26 	bl	80046e0 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
	u8g2_DrawGlyph(&U8G2_Display, NewXPos, NewYPos, SymbolCode);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800509a:	7cf9      	ldrb	r1, [r7, #19]
 800509c:	7cba      	ldrb	r2, [r7, #18]
 800509e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80050a0:	f7fc ff6a 	bl	8001f78 <u8g2_DrawGlyph>
}
 80050a4:	bf00      	nop
 80050a6:	3730      	adds	r7, #48	; 0x30
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	08015090 	.word	0x08015090

080050b0 <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:


void NHDST7565_LCD::drawTimeDate(String Time, String Date)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b092      	sub	sp, #72	; 0x48
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
	drawString(Time, LEFT_POS, TOP_POS, displayFonts[W_3_H_6]);
 80050bc:	f107 0310 	add.w	r3, r7, #16
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f00b ff9b 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050ce:	f107 0110 	add.w	r1, r7, #16
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	2346      	movs	r3, #70	; 0x46
 80050d6:	2282      	movs	r2, #130	; 0x82
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff fcf6 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80050de:	f107 0310 	add.w	r3, r7, #16
 80050e2:	4618      	mov	r0, r3
 80050e4:	f00b fe27 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	drawString(Date, RIGHT_POS, TOP_POS, displayFonts[W_3_H_6]);
 80050e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f00b ff85 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	2346      	movs	r3, #70	; 0x46
 8005102:	2284      	movs	r2, #132	; 0x84
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff fce0 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800510a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800510e:	4618      	mov	r0, r3
 8005110:	f00b fe11 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005114:	bf00      	nop
 8005116:	3740      	adds	r7, #64	; 0x40
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

void NHDST7565_LCD::drawFullScreenPopUp(String Text, uint16_t Delay)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08c      	sub	sp, #48	; 0x30
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
	clearFrameBuffer();
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fc89 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	u8g2_DrawRFrame(&U8G2_Display, 1, 1, dispParams.width - 1, dispParams.high - 1, 2);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800513c:	3b01      	subs	r3, #1
 800513e:	b2d9      	uxtb	r1, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8005146:	3b01      	subs	r3, #1
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2202      	movs	r2, #2
 800514c:	9201      	str	r2, [sp, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	460b      	mov	r3, r1
 8005152:	2201      	movs	r2, #1
 8005154:	2101      	movs	r1, #1
 8005156:	f7fc f81d 	bl	8001194 <u8g2_DrawRFrame>
	drawString(Text, CENTER_POS, MIDDLE_POS, displayFonts[W_6_H_13_B]);
 800515a:	f107 0310 	add.w	r3, r7, #16
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f00b ff4c 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800516c:	f107 0110 	add.w	r1, r7, #16
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	2347      	movs	r3, #71	; 0x47
 8005174:	2283      	movs	r2, #131	; 0x83
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff fca7 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	4618      	mov	r0, r3
 8005182:	f00b fdd8 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	sendFrameBuffer();
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff fc68 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
	HAL_Delay(Delay);
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	4618      	mov	r0, r3
 8005190:	f007 f83c 	bl	800c20c <HAL_Delay>
}
 8005194:	bf00      	nop
 8005196:	3728      	adds	r7, #40	; 0x28
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 80051a6:	6839      	ldr	r1, [r7, #0]
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f808 	bl	80051be <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f083 0301 	eor.w	r3, r3, #1
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f00b ff02 	bl	8010fd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <_ZN12STM32_EEPROM6formatEv>:

// ERASE

//##########################################################################################################
bool STM32_EEPROM::format(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	bool RetVal = false;
 80051ec:	2300      	movs	r3, #0
 80051ee:	77fb      	strb	r3, [r7, #31]
	uint32_t	error;
	HAL_FLASH_Unlock();
 80051f0:	f007 fd66 	bl	800ccc0 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 80051f4:	2301      	movs	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
	flashErase.Banks = FLASH_BANK_1;
 80051f8:	2301      	movs	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 80051fc:	4b12      	ldr	r3, [pc, #72]	; (8005248 <_ZN12STM32_EEPROM6formatEv+0x64>)
 80051fe:	613b      	str	r3, [r7, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8005200:	2300      	movs	r3, #0
 8005202:	60bb      	str	r3, [r7, #8]
	if(HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8005204:	f107 0218 	add.w	r2, r7, #24
 8005208:	f107 0308 	add.w	r3, r7, #8
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f007 fe3e 	bl	800ce90 <HAL_FLASHEx_Erase>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <_ZN12STM32_EEPROM6formatEv+0x56>
	{
		HAL_FLASH_Lock();
 8005224:	f007 fd72 	bl	800cd0c <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d002      	beq.n	8005236 <_ZN12STM32_EEPROM6formatEv+0x52>
			RetVal = false;
 8005230:	2300      	movs	r3, #0
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e001      	b.n	800523a <_ZN12STM32_EEPROM6formatEv+0x56>
		else
			RetVal = true;
 8005236:	2301      	movs	r3, #1
 8005238:	77fb      	strb	r3, [r7, #31]
	}
	HAL_FLASH_Lock();
 800523a:	f007 fd67 	bl	800cd0c <HAL_FLASH_Lock>
	return RetVal;
 800523e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3720      	adds	r7, #32
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	0801f400 	.word	0x0801f400

0800524c <_ZN12STM32_EEPROM10singleReadEtPm>:
//##########################################################################################################



bool STM32_EEPROM::singleRead(uint16_t VirtualAddress, uint32_t* Data)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	460b      	mov	r3, r1
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	817b      	strh	r3, [r7, #10]
	if(VirtualAddress >= (_EEPROM_FLASH_PAGE_SIZE/4))
 800525a:	897b      	ldrh	r3, [r7, #10]
 800525c:	2bff      	cmp	r3, #255	; 0xff
 800525e:	d901      	bls.n	8005264 <_ZN12STM32_EEPROM10singleReadEtPm+0x18>
		return false;
 8005260:	2300      	movs	r3, #0
 8005262:	e009      	b.n	8005278 <_ZN12STM32_EEPROM10singleReadEtPm+0x2c>
	*Data =  (*(uint32_t*)((VirtualAddress*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 8005264:	897b      	ldrh	r3, [r7, #10]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800526c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
	return true;
 8005276:	2301      	movs	r3, #1
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr

08005282 <_ZN12STM32_EEPROM9multiReadEttPm>:


bool STM32_EEPROM::multiRead(uint16_t StartVirtualAddress,uint16_t HowMuchToRead, uint32_t* Data)
{
 8005282:	b480      	push	{r7}
 8005284:	b087      	sub	sp, #28
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	607b      	str	r3, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	817b      	strh	r3, [r7, #10]
 8005290:	4613      	mov	r3, r2
 8005292:	813b      	strh	r3, [r7, #8]
	bool RetVal = false;
 8005294:	2300      	movs	r3, #0
 8005296:	75fb      	strb	r3, [r7, #23]
	if((StartVirtualAddress+HowMuchToRead) <= (_EEPROM_FLASH_PAGE_SIZE/4))
 8005298:	897a      	ldrh	r2, [r7, #10]
 800529a:	893b      	ldrh	r3, [r7, #8]
 800529c:	4413      	add	r3, r2
 800529e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a2:	dc19      	bgt.n	80052d8 <_ZN12STM32_EEPROM9multiReadEttPm+0x56>
	{
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 80052a4:	897b      	ldrh	r3, [r7, #10]
 80052a6:	82bb      	strh	r3, [r7, #20]
 80052a8:	8aba      	ldrh	r2, [r7, #20]
 80052aa:	8939      	ldrh	r1, [r7, #8]
 80052ac:	897b      	ldrh	r3, [r7, #10]
 80052ae:	440b      	add	r3, r1
 80052b0:	429a      	cmp	r2, r3
 80052b2:	da0f      	bge.n	80052d4 <_ZN12STM32_EEPROM9multiReadEttPm+0x52>
		{
			*Data =  (*(uint32_t*)((i*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 80052b4:	8abb      	ldrh	r3, [r7, #20]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80052bc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
			Data++;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	607b      	str	r3, [r7, #4]
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 80052cc:	8abb      	ldrh	r3, [r7, #20]
 80052ce:	3301      	adds	r3, #1
 80052d0:	82bb      	strh	r3, [r7, #20]
 80052d2:	e7e9      	b.n	80052a8 <_ZN12STM32_EEPROM9multiReadEttPm+0x26>
		}
		RetVal = true;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
	}
	return RetVal;
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <_ZN12STM32_EEPROM5writeEPm>:
// SCRITTURA

//##########################################################################################################

bool STM32_EEPROM::write(uint32_t Data[])
{
 80052e4:	b590      	push	{r4, r7, lr}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
    uint32_t OldValue = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]
    bool RetVal = false;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]
	if(format())
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff ff74 	bl	80051e4 <_ZN12STM32_EEPROM6formatEv>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d03c      	beq.n	800537c <_ZN12STM32_EEPROM5writeEPm+0x98>
	{
		HAL_FLASH_Unlock();
 8005302:	f007 fcdd 	bl	800ccc0 <HAL_FLASH_Unlock>
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8005306:	2300      	movs	r3, #0
 8005308:	81bb      	strh	r3, [r7, #12]
 800530a:	89bb      	ldrh	r3, [r7, #12]
 800530c:	2bff      	cmp	r3, #255	; 0xff
 800530e:	d833      	bhi.n	8005378 <_ZN12STM32_EEPROM5writeEPm+0x94>
		{
			singleRead(i, &OldValue);
 8005310:	f107 0208 	add.w	r2, r7, #8
 8005314:	89bb      	ldrh	r3, [r7, #12]
 8005316:	4619      	mov	r1, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff ff97 	bl	800524c <_ZN12STM32_EEPROM10singleReadEtPm>
			if(Data[i] != OldValue)
 800531e:	89bb      	ldrh	r3, [r7, #12]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	4413      	add	r3, r2
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	429a      	cmp	r2, r3
 800532c:	d020      	beq.n	8005370 <_ZN12STM32_EEPROM5writeEPm+0x8c>
			{
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (i*4) + _EEPROM_FLASH_PAGE_ADDRESS, (uint64_t)Data[i]) != HAL_OK)
 800532e:	89bb      	ldrh	r3, [r7, #12]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8005336:	f501 31fa 	add.w	r1, r1, #128000	; 0x1f400
 800533a:	89bb      	ldrh	r3, [r7, #12]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	4413      	add	r3, r2
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	461a      	mov	r2, r3
 800534a:	4623      	mov	r3, r4
 800534c:	2002      	movs	r0, #2
 800534e:	f007 fc07 	bl	800cb60 <HAL_FLASH_Program>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <_ZN12STM32_EEPROM5writeEPm+0x88>
				{
					HAL_FLASH_Lock();
 8005362:	f007 fcd3 	bl	800cd0c <HAL_FLASH_Lock>
					RetVal = false;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
					break;
 800536a:	e005      	b.n	8005378 <_ZN12STM32_EEPROM5writeEPm+0x94>
				}
				RetVal = true;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8005370:	89bb      	ldrh	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	81bb      	strh	r3, [r7, #12]
 8005376:	e7c8      	b.n	800530a <_ZN12STM32_EEPROM5writeEPm+0x26>
			}
		}
		HAL_FLASH_Lock();
 8005378:	f007 fcc8 	bl	800cd0c <HAL_FLASH_Lock>
	}
	return RetVal;
 800537c:	7bfb      	ldrb	r3, [r7, #15]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bd90      	pop	{r4, r7, pc}

08005386 <_ZN12STM32_EEPROM16transferRamToMemEPm>:

//##########################################################################################################


void STM32_EEPROM::transferRamToMem(uint32_t *RamVector)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
    write(RamVector);
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff ffa6 	bl	80052e4 <_ZN12STM32_EEPROM5writeEPm>
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_ZN12STM32_EEPROM15tranferMemToRamEPm>:

void STM32_EEPROM::tranferMemToRam(uint32_t *RamVector)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
    multiRead(EEPROM_VIRTUAL_ADDR_BEGIN, MAX_DIM_EEPROM_ARRAY, RamVector);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053b0:	2100      	movs	r1, #0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff ff65 	bl	8005282 <_ZN12STM32_EEPROM9multiReadEttPm>
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <_ZN12STM32_EEPROM11eraseMemoryEv>:

void STM32_EEPROM::eraseMemory()
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	format();
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff ff0b 	bl	80051e4 <_ZN12STM32_EEPROM6formatEv>
	tranferMemToRam(eepromArray);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff ffe3 	bl	80053a0 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
    return;
 80053da:	bf00      	nop
}
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <_ZN12STM32_EEPROM11memoryEmptyEv>:


bool STM32_EEPROM::memoryEmpty()
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 80053ea:	2300      	movs	r3, #0
 80053ec:	81fb      	strh	r3, [r7, #14]
 80053ee:	89fb      	ldrh	r3, [r7, #14]
 80053f0:	2bff      	cmp	r3, #255	; 0xff
 80053f2:	d80e      	bhi.n	8005412 <_ZN12STM32_EEPROM11memoryEmptyEv+0x30>
    {
        if(eepromArray[i] != BLANK_VALUE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	89fb      	ldrh	r3, [r7, #14]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d001      	beq.n	800540a <_ZN12STM32_EEPROM11memoryEmptyEv+0x28>
            return false;
 8005406:	2300      	movs	r3, #0
 8005408:	e004      	b.n	8005414 <_ZN12STM32_EEPROM11memoryEmptyEv+0x32>
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 800540a:	89fb      	ldrh	r3, [r7, #14]
 800540c:	3301      	adds	r3, #1
 800540e:	81fb      	strh	r3, [r7, #14]
 8005410:	e7ed      	b.n	80053ee <_ZN12STM32_EEPROM11memoryEmptyEv+0xc>
    }
    return true;
 8005412:	2301      	movs	r3, #1
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <_ZN12STM32_EEPROMC1Ev>:


STM32_EEPROM::STM32_EEPROM()
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 800542c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005430:	f00b fb32 	bl	8010a98 <_Znaj>
 8005434:	4603      	mov	r3, r0
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
	tranferMemToRam(eepromArray);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4619      	mov	r1, r3
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff ffac 	bl	80053a0 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
}
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>:

void STM32_EEPROM::writeToMemory(uint16_t Address, uint32_t Val, bool Transfer)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	461a      	mov	r2, r3
 800545e:	460b      	mov	r3, r1
 8005460:	817b      	strh	r3, [r7, #10]
 8005462:	4613      	mov	r3, r2
 8005464:	727b      	strb	r3, [r7, #9]
	eepromArray[Address] = Val;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	897b      	ldrh	r3, [r7, #10]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	601a      	str	r2, [r3, #0]
	if(Transfer)
 8005474:	7a7b      	ldrb	r3, [r7, #9]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <_ZN12STM32_EEPROM13writeToMemoryEtmb+0x34>
	{
		transferRamToMem(eepromArray);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4619      	mov	r1, r3
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff ff80 	bl	8005386 <_ZN12STM32_EEPROM16transferRamToMemEPm>
	}
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>:

void STM32_EEPROM::loadMemory(uint16_t Address, uint32_t *Val)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	460b      	mov	r3, r1
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	817b      	strh	r3, [r7, #10]
	tranferMemToRam(eepromArray);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4619      	mov	r1, r3
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff ff7c 	bl	80053a0 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
	*Val = eepromArray[Address];
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	897b      	ldrh	r3, [r7, #10]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	601a      	str	r2, [r3, #0]
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	bool State = false;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	889b      	ldrh	r3, [r3, #4]
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f008 f854 	bl	800d584 <HAL_GPIO_ReadPin>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf0c      	ite	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	2300      	movne	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	4611      	mov	r1, r2
 8005506:	461a      	mov	r2, r3
 8005508:	460b      	mov	r3, r1
 800550a:	80fb      	strh	r3, [r7, #6]
 800550c:	4613      	mov	r3, r2
 800550e:	80bb      	strh	r3, [r7, #4]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	609a      	str	r2, [r3, #8]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	819a      	strh	r2, [r3, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88ba      	ldrh	r2, [r7, #4]
 8005532:	819a      	strh	r2, [r3, #12]
}
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 8005548:	2302      	movs	r3, #2
 800554a:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 800554c:	2300      	movs	r3, #0
 800554e:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ffb5 	bl	80054c0 <_ZN6BUTTON7readPinEv>
 8005556:	4603      	mov	r3, r0
 8005558:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 800555a:	7b7b      	ldrb	r3, [r7, #13]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d03c      	beq.n	80055da <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 8005560:	f006 fe4a 	bl	800c1f8 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 800556a:	7b7b      	ldrb	r3, [r7, #13]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d015      	beq.n	800559c <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff ffa5 	bl	80054c0 <_ZN6BUTTON7readPinEv>
 8005576:	4603      	mov	r3, r0
 8005578:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 800557a:	f006 fe3d 	bl	800c1f8 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	8992      	ldrh	r2, [r2, #12]
 800558a:	4293      	cmp	r3, r2
 800558c:	bf8c      	ite	hi
 800558e:	2301      	movhi	r3, #1
 8005590:	2300      	movls	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0e8      	beq.n	800556a <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 8005598:	2301      	movs	r3, #1
 800559a:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 800559c:	7bbb      	ldrb	r3, [r7, #14]
 800559e:	f083 0301 	eor.w	r3, r3, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00d      	beq.n	80055c4 <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	7b9b      	ldrb	r3, [r3, #14]
 80055ac:	f083 0301 	eor.w	r3, r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
 80055ba:	e008      	b.n	80055ce <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	739a      	strb	r2, [r3, #14]
 80055c2:	e004      	b.n	80055ce <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 80055d4:	200a      	movs	r0, #10
 80055d6:	f006 fe19 	bl	800c20c <HAL_Delay>
	}
	return Status;
 80055da:	7bfb      	ldrb	r3, [r7, #15]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 80055e4:	b590      	push	{r4, r7, lr}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 80055ec:	2010      	movs	r0, #16
 80055ee:	f00b fa55 	bl	8010a9c <_Znwj>
 80055f2:	4603      	mov	r3, r0
 80055f4:	461c      	mov	r4, r3
 80055f6:	23fa      	movs	r3, #250	; 0xfa
 80055f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055fc:	491b      	ldr	r1, [pc, #108]	; (800566c <_ZN8DryerKeyC1Ev+0x88>)
 80055fe:	4620      	mov	r0, r4
 8005600:	f7ff ff7b 	bl	80054fa <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 8005608:	2010      	movs	r0, #16
 800560a:	f00b fa47 	bl	8010a9c <_Znwj>
 800560e:	4603      	mov	r3, r0
 8005610:	461c      	mov	r4, r3
 8005612:	23fa      	movs	r3, #250	; 0xfa
 8005614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005618:	4914      	ldr	r1, [pc, #80]	; (800566c <_ZN8DryerKeyC1Ev+0x88>)
 800561a:	4620      	mov	r0, r4
 800561c:	f7ff ff6d 	bl	80054fa <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 500);
 8005624:	2010      	movs	r0, #16
 8005626:	f00b fa39 	bl	8010a9c <_Znwj>
 800562a:	4603      	mov	r3, r0
 800562c:	461c      	mov	r4, r3
 800562e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005636:	490d      	ldr	r1, [pc, #52]	; (800566c <_ZN8DryerKeyC1Ev+0x88>)
 8005638:	4620      	mov	r0, r4
 800563a:	f7ff ff5e 	bl	80054fa <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 500);
 8005642:	2010      	movs	r0, #16
 8005644:	f00b fa2a 	bl	8010a9c <_Znwj>
 8005648:	4603      	mov	r3, r0
 800564a:	461c      	mov	r4, r3
 800564c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005650:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005654:	4905      	ldr	r1, [pc, #20]	; (800566c <_ZN8DryerKeyC1Ev+0x88>)
 8005656:	4620      	mov	r0, r4
 8005658:	f7ff ff4f 	bl	80054fa <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60dc      	str	r4, [r3, #12]
}
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	bd90      	pop	{r4, r7, pc}
 800566a:	bf00      	nop
 800566c:	40010c00 	.word	0x40010c00

08005670 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8005678:	2308      	movs	r3, #8
 800567a:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 800567c:	2300      	movs	r3, #0
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	2b03      	cmp	r3, #3
 8005684:	dc1d      	bgt.n	80056c2 <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ff56 	bl	8005540 <_ZN6BUTTON11checkButtonEv>
 8005694:	4603      	mov	r3, r0
 8005696:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	75fb      	strb	r3, [r7, #23]
 80056a2:	e006      	b.n	80056b2 <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d103      	bne.n	80056b2 <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	3304      	adds	r3, #4
 80056b0:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d103      	bne.n	80056c0 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3301      	adds	r3, #1
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	e7df      	b.n	8005680 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 80056c0:	bf00      	nop
		}
	}
	return KeyPressed;
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d006      	beq.n	80056ec <_ZN4RELE6setPinE9PIN_STATE+0x20>
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d003      	beq.n	80056ec <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	719a      	strb	r2, [r3, #6]
 80056ea:	e007      	b.n	80056fc <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	799b      	ldrb	r3, [r3, #6]
 80056f0:	78fa      	ldrb	r2, [r7, #3]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d002      	beq.n	80056fc <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8899      	ldrh	r1, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	799b      	ldrb	r3, [r3, #6]
 8005708:	461a      	mov	r2, r3
 800570a:	f007 ff61 	bl	800d5d0 <HAL_GPIO_WritePin>
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	4611      	mov	r1, r2
 8005722:	461a      	mov	r2, r3
 8005724:	460b      	mov	r3, r1
 8005726:	80fb      	strh	r3, [r7, #6]
 8005728:	4613      	mov	r3, r2
 800572a:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	88fa      	ldrh	r2, [r7, #6]
 8005736:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	797a      	ldrb	r2, [r7, #5]
 800573c:	719a      	strb	r2, [r3, #6]

}
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	460b      	mov	r3, r1
 8005754:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ffb6 	bl	80056cc <_ZN4RELE6setPinE9PIN_STATE>
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f00b fc2b 	bl	8010fd0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800577a:	4602      	mov	r2, r0
			     __idx, __base); }
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4904      	ldr	r1, [pc, #16]	; (8005794 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8005784:	4804      	ldr	r0, [pc, #16]	; (8005798 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8005786:	f000 fbe8 	bl	8005f5a <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800578a:	4603      	mov	r3, r0
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	0801509c 	.word	0x0801509c
 8005798:	08013089 	.word	0x08013089

0800579c <_ZN13SerialMessage11writeSerialEv>:
//{
//	RxReady = true;
//}

void SerialMessage::writeSerial()
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f00b faf6 	bl	8010d98 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80057ac:	4603      	mov	r3, r0
 80057ae:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f00b fc0c 	bl	8010fd0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80057b8:	4601      	mov	r1, r0
 80057ba:	89fa      	ldrh	r2, [r7, #14]
 80057bc:	2364      	movs	r3, #100	; 0x64
 80057be:	4803      	ldr	r0, [pc, #12]	; (80057cc <_ZN13SerialMessage11writeSerialEv+0x30>)
 80057c0:	f00a fec8 	bl	8010554 <HAL_UART_Transmit>
}
 80057c4:	bf00      	nop
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	200007c4 	.word	0x200007c4

080057d0 <_ZN13SerialMessageC1Ev>:


SerialMessage::SerialMessage()
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	687c      	ldr	r4, [r7, #4]
 80057da:	f107 0308 	add.w	r3, r7, #8
 80057de:	4618      	mov	r0, r3
 80057e0:	f00b f978 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80057e4:	f107 0308 	add.w	r3, r7, #8
 80057e8:	461a      	mov	r2, r3
 80057ea:	4918      	ldr	r1, [pc, #96]	; (800584c <_ZN13SerialMessageC1Ev+0x7c>)
 80057ec:	4620      	mov	r0, r4
 80057ee:	f00b fc39 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80057f2:	f107 0308 	add.w	r3, r7, #8
 80057f6:	4618      	mov	r0, r3
 80057f8:	f00b f96d 	bl	8010ad6 <_ZNSaIcED1Ev>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f103 0418 	add.w	r4, r3, #24
 8005802:	f107 030c 	add.w	r3, r7, #12
 8005806:	4618      	mov	r0, r3
 8005808:	f00b f964 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800580c:	f107 030c 	add.w	r3, r7, #12
 8005810:	461a      	mov	r2, r3
 8005812:	490e      	ldr	r1, [pc, #56]	; (800584c <_ZN13SerialMessageC1Ev+0x7c>)
 8005814:	4620      	mov	r0, r4
 8005816:	f00b fc25 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800581a:	f107 030c 	add.w	r3, r7, #12
 800581e:	4618      	mov	r0, r3
 8005820:	f00b f959 	bl	8010ad6 <_ZNSaIcED1Ev>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f04f 32ff 	mov.w	r2, #4294967295
 8005832:	63da      	str	r2, [r3, #60]	; 0x3c
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
	rxBuffer = new uint8_t[RECEIVE_BUFFER_LEN];
 8005834:	2019      	movs	r0, #25
 8005836:	f00b f92f 	bl	8010a98 <_Znaj>
 800583a:	4603      	mov	r3, r0
 800583c:	461a      	mov	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	bd90      	pop	{r4, r7, pc}
 800584c:	080150a4 	.word	0x080150a4

08005850 <_ZN13SerialMessage11clearRxBuffEv>:

void SerialMessage::clearRxBuff()
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	memset(rxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585c:	2219      	movs	r2, #25
 800585e:	2100      	movs	r1, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f00b fd4c 	bl	80112fe <memset>
}
 8005866:	bf00      	nop
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>:


void SerialMessage::sendMessage(String Message, bool NewLine)
{
 8005870:	b590      	push	{r4, r7, lr}
 8005872:	b08b      	sub	sp, #44	; 0x2c
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	4613      	mov	r3, r2
 800587c:	71fb      	strb	r3, [r7, #7]
	if(!Message.empty())
 800587e:	68b8      	ldr	r0, [r7, #8]
 8005880:	f00b fa8e 	bl	8010da0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8005884:	4603      	mov	r3, r0
 8005886:	f083 0301 	eor.w	r3, r3, #1
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01f      	beq.n	80058d0 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x60>
	{
		if(NewLine)
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d013      	beq.n	80058be <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x4e>
			serialBuffer = Message + "\n";
 8005896:	68fc      	ldr	r4, [r7, #12]
 8005898:	f107 0310 	add.w	r3, r7, #16
 800589c:	4a11      	ldr	r2, [pc, #68]	; (80058e4 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x74>)
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fc41 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80058a6:	f107 0310 	add.w	r3, r7, #16
 80058aa:	4619      	mov	r1, r3
 80058ac:	4620      	mov	r0, r4
 80058ae:	f00b fa4e 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80058b2:	f107 0310 	add.w	r3, r7, #16
 80058b6:	4618      	mov	r0, r3
 80058b8:	f00b fa3d 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80058bc:	e004      	b.n	80058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x58>
		else
			serialBuffer = Message;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f00b fa3d 	bl	8010d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		writeSerial();
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff ff67 	bl	800579c <_ZN13SerialMessage11writeSerialEv>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
	}
}
 80058ce:	e004      	b.n	80058da <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x6a>
		serialBuffer = "Errore: messaggio mancante";
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4905      	ldr	r1, [pc, #20]	; (80058e8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x78>)
 80058d4:	4618      	mov	r0, r3
 80058d6:	f00b fb12 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 80058da:	bf00      	nop
 80058dc:	372c      	adds	r7, #44	; 0x2c
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd90      	pop	{r4, r7, pc}
 80058e2:	bf00      	nop
 80058e4:	080150a8 	.word	0x080150a8
 80058e8:	080150ac 	.word	0x080150ac

080058ec <_ZN13SerialMessage17readSerialPollingEv>:

bool SerialMessage::readSerialPolling()
{
 80058ec:	b590      	push	{r4, r7, lr}
 80058ee:	b08d      	sub	sp, #52	; 0x34
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	bool Ready = false;
 80058f4:	2300      	movs	r3, #0
 80058f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	String CommandStr = "";
 80058fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058fe:	4618      	mov	r0, r3
 8005900:	f00b f8e8 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8005904:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005908:	f107 030c 	add.w	r3, r7, #12
 800590c:	492a      	ldr	r1, [pc, #168]	; (80059b8 <_ZN13SerialMessage17readSerialPollingEv+0xcc>)
 800590e:	4618      	mov	r0, r3
 8005910:	f00b fba8 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005918:	4618      	mov	r0, r3
 800591a:	f00b f8dc 	bl	8010ad6 <_ZNSaIcED1Ev>
	clearRxBuff();
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff ff96 	bl	8005850 <_ZN13SerialMessage11clearRxBuffEv>
	HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 100);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005928:	2364      	movs	r3, #100	; 0x64
 800592a:	2219      	movs	r2, #25
 800592c:	4823      	ldr	r0, [pc, #140]	; (80059bc <_ZN13SerialMessage17readSerialPollingEv+0xd0>)
 800592e:	f00a feaa 	bl	8010686 <HAL_UART_Receive>
	if(rxBuffer[0] == '$' && (rxBuffer[3] == '=' || rxBuffer[3] == '$'))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b24      	cmp	r3, #36	; 0x24
 800593a:	d10f      	bne.n	800595c <_ZN13SerialMessage17readSerialPollingEv+0x70>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005940:	3303      	adds	r3, #3
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b3d      	cmp	r3, #61	; 0x3d
 8005946:	d005      	beq.n	8005954 <_ZN13SerialMessage17readSerialPollingEv+0x68>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594c:	3303      	adds	r3, #3
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b24      	cmp	r3, #36	; 0x24
 8005952:	d103      	bne.n	800595c <_ZN13SerialMessage17readSerialPollingEv+0x70>
	{
		Ready = true;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800595a:	e021      	b.n	80059a0 <_ZN13SerialMessage17readSerialPollingEv+0xb4>
	}
	else
	{
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 800595c:	2300      	movs	r3, #0
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	2b18      	cmp	r3, #24
 8005964:	dc0e      	bgt.n	8005984 <_ZN13SerialMessage17readSerialPollingEv+0x98>
		{
			CommandStr.push_back(rxBuffer[i]);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	4413      	add	r3, r2
 800596e:	781a      	ldrb	r2, [r3, #0]
 8005970:	f107 030c 	add.w	r3, r7, #12
 8005974:	4611      	mov	r1, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f00b fa1a 	bl	8010db0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	3301      	adds	r3, #1
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
 8005982:	e7ed      	b.n	8005960 <_ZN13SerialMessage17readSerialPollingEv+0x74>
		}
		commandReceived = CommandStr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3318      	adds	r3, #24
 8005988:	f107 020c 	add.w	r2, r7, #12
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f00b f9d7 	bl	8010d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		clearRxBuff();
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ff5b 	bl	8005850 <_ZN13SerialMessage11clearRxBuffEv>
		Ready = false;
 800599a:	2300      	movs	r3, #0
 800599c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	return Ready;
 80059a0:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
	String CommandStr = "";
 80059a4:	f107 030c 	add.w	r3, r7, #12
 80059a8:	4618      	mov	r0, r3
 80059aa:	f00b f9c4 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Ready;
 80059ae:	4623      	mov	r3, r4
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3734      	adds	r7, #52	; 0x34
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd90      	pop	{r4, r7, pc}
 80059b8:	080150a4 	.word	0x080150a4
 80059bc:	200007c4 	.word	0x200007c4

080059c0 <_ZN13SerialMessage15getStartStopReqEPc>:

int16_t SerialMessage::getStartStopReq(char *Req)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
	int16_t RetVal = INVALID_MESSAGE;
 80059ca:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80059ce:	81fb      	strh	r3, [r7, #14]
	if(valueSetted == UINT32_MAX)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d13a      	bne.n	8005a50 <_ZN13SerialMessage15getStartStopReqEPc+0x90>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b2f      	cmp	r3, #47	; 0x2f
 80059e0:	d92b      	bls.n	8005a3a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b39      	cmp	r3, #57	; 0x39
 80059e8:	d827      	bhi.n	8005a3a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b2f      	cmp	r3, #47	; 0x2f
 80059f2:	d922      	bls.n	8005a3a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b39      	cmp	r3, #57	; 0x39
 80059fc:	d81d      	bhi.n	8005a3a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
		{
			if(Req[0] == '0')
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b30      	cmp	r3, #48	; 0x30
 8005a04:	d107      	bne.n	8005a16 <_ZN13SerialMessage15getStartStopReqEPc+0x56>
			{
				RetVal = START_STOP_COMMANDS_START + (Req[1] - '0');
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3398      	adds	r3, #152	; 0x98
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	81fb      	strh	r3, [r7, #14]
 8005a14:	e011      	b.n	8005a3a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
			}
			else
			{
				RetVal = START_STOP_COMMANDS_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	3b30      	subs	r3, #48	; 0x30
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	0092      	lsls	r2, r2, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	4413      	add	r3, r2
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3398      	adds	r3, #152	; 0x98
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	81fb      	strh	r3, [r7, #14]
			}
		}
		if(RetVal >= MAX_START_STOP_COMMANDS && RetVal == START_STOP_COMMANDS_START)
 8005a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a3e:	2bd2      	cmp	r3, #210	; 0xd2
 8005a40:	dd06      	ble.n	8005a50 <_ZN13SerialMessage15getStartStopReqEPc+0x90>
 8005a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a46:	2bc8      	cmp	r3, #200	; 0xc8
 8005a48:	d102      	bne.n	8005a50 <_ZN13SerialMessage15getStartStopReqEPc+0x90>
		{
			RetVal = INVALID_MESSAGE;
 8005a4a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005a4e:	81fb      	strh	r3, [r7, #14]
		}
	}
	return RetVal;
 8005a50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr
	...

08005a60 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

int16_t SerialMessage::getSetReq(char *Req, String Command)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08e      	sub	sp, #56	; 0x38
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
	int16_t RetVal = INVALID_MESSAGE;
 8005a6c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005a70:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(valueSetted == UINT32_MAX)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	f040 80b0 	bne.w	8005bde <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17e>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b2f      	cmp	r3, #47	; 0x2f
 8005a84:	d92b      	bls.n	8005ade <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b39      	cmp	r3, #57	; 0x39
 8005a8c:	d827      	bhi.n	8005ade <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3301      	adds	r3, #1
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b2f      	cmp	r3, #47	; 0x2f
 8005a96:	d922      	bls.n	8005ade <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b39      	cmp	r3, #57	; 0x39
 8005aa0:	d81d      	bhi.n	8005ade <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
		{
			if(Req[0] == '0')
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b30      	cmp	r3, #48	; 0x30
 8005aa8:	d107      	bne.n	8005aba <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
			{
				RetVal = SET_COMMAND_START + (Req[1] - '0');
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	3301      	adds	r3, #1
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b26      	subs	r3, #38	; 0x26
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005ab8:	e011      	b.n	8005ade <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
			}
			else
			{
				RetVal = SET_COMMAND_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	3b30      	subs	r3, #48	; 0x30
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	4413      	add	r3, r2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b26      	subs	r3, #38	; 0x26
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	86fb      	strh	r3, [r7, #54]	; 0x36
			}
		}
		if(RetVal >= MAX_SET_COMMANDS && RetVal == SET_COMMAND_START)
 8005ade:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005ae2:	2b1a      	cmp	r3, #26
 8005ae4:	dd06      	ble.n	8005af4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
 8005ae6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005aea:	2b0a      	cmp	r3, #10
 8005aec:	d102      	bne.n	8005af4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
		{
			RetVal = INVALID_MESSAGE;
 8005aee:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005af2:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		String ValStr = "";
 8005af4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005af8:	4618      	mov	r0, r3
 8005afa:	f00a ffeb 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8005afe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b02:	f107 0310 	add.w	r3, r7, #16
 8005b06:	4939      	ldr	r1, [pc, #228]	; (8005bec <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18c>)
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f00b faab 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b12:	4618      	mov	r0, r3
 8005b14:	f00a ffdf 	bl	8010ad6 <_ZNSaIcED1Ev>
		bool ZeroChecked = false;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		for(int i = 4; i < Command.length() - 1; i++)
 8005b1e:	2304      	movs	r3, #4
 8005b20:	633b      	str	r3, [r7, #48]	; 0x30
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f00b f93a 	bl	8010d9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	1e5a      	subs	r2, r3, #1
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	bf8c      	ite	hi
 8005b32:	2301      	movhi	r3, #1
 8005b34:	2300      	movls	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d041      	beq.n	8005bc0 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x160>
		{
			int ValLen = Command.length() - 5;
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f00b f92d 	bl	8010d9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005b42:	4603      	mov	r3, r0
 8005b44:	3b05      	subs	r3, #5
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(ValLen > 1)
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	dd27      	ble.n	8005b9e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13e>
			{
				while(i < Command.length() && !ZeroChecked)
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f00b f924 	bl	8010d9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d908      	bls.n	8005b6e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10e>
 8005b5c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005b60:	f083 0301 	eor.w	r3, r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10e>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x110>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d014      	beq.n	8005b9e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x13e>
				{
					if(Command[i] == '0')
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f00b f916 	bl	8010daa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b30      	cmp	r3, #48	; 0x30
 8005b84:	bf0c      	ite	eq
 8005b86:	2301      	moveq	r3, #1
 8005b88:	2300      	movne	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x138>
						i++;
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	3301      	adds	r3, #1
 8005b94:	633b      	str	r3, [r7, #48]	; 0x30
 8005b96:	e7da      	b.n	8005b4e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xee>
					else
					{
						ZeroChecked = true;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
						break;
					}
				}
			}
			ValStr.push_back(Command[i]);
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f00b f901 	bl	8010daa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	f107 0310 	add.w	r3, r7, #16
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f00b f8fc 	bl	8010db0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		for(int i = 4; i < Command.length() - 1; i++)
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	3301      	adds	r3, #1
 8005bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8005bbe:	e7b0      	b.n	8005b22 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc2>
		}
		valueSetted = std::stoul(ValStr);
 8005bc0:	f107 0310 	add.w	r3, r7, #16
 8005bc4:	220a      	movs	r2, #10
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fdcd 	bl	8005768 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	63da      	str	r2, [r3, #60]	; 0x3c
		String ValStr = "";
 8005bd4:	f107 0310 	add.w	r3, r7, #16
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f00b f8ac 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	return RetVal;
 8005bde:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3738      	adds	r7, #56	; 0x38
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	080150a4 	.word	0x080150a4

08005bf0 <_ZN13SerialMessage17isDeviceConnectedEv>:


bool SerialMessage::isDeviceConnected()
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	; 0x28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	bool Connected = false, GetSomething = false;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t Timeout = SEARCH_DEVICE_TIMEOUT_MS;
 8005c04:	23fa      	movs	r3, #250	; 0xfa
 8005c06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	clearRxBuff();
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fe20 	bl	8005850 <_ZN13SerialMessage11clearRxBuffEv>
	sendMessage("$?$", false);
 8005c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c14:	4618      	mov	r0, r3
 8005c16:	f00a ff5d 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8005c1a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005c1e:	f107 030c 	add.w	r3, r7, #12
 8005c22:	4928      	ldr	r1, [pc, #160]	; (8005cc4 <_ZN13SerialMessage17isDeviceConnectedEv+0xd4>)
 8005c24:	4618      	mov	r0, r3
 8005c26:	f00b fa1d 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005c2a:	f107 030c 	add.w	r3, r7, #12
 8005c2e:	2200      	movs	r2, #0
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff fe1c 	bl	8005870 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8005c38:	f107 030c 	add.w	r3, r7, #12
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f00b f87a 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c46:	4618      	mov	r0, r3
 8005c48:	f00a ff45 	bl	8010ad6 <_ZNSaIcED1Ev>
	while(Timeout > 0)
 8005c4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d018      	beq.n	8005c86 <_ZN13SerialMessage17isDeviceConnectedEv+0x96>
	{
		HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 200);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c58:	23c8      	movs	r3, #200	; 0xc8
 8005c5a:	2219      	movs	r2, #25
 8005c5c:	481a      	ldr	r0, [pc, #104]	; (8005cc8 <_ZN13SerialMessage17isDeviceConnectedEv+0xd8>)
 8005c5e:	f00a fd12 	bl	8010686 <HAL_UART_Receive>
		if(rxBuffer[0] != 0x00)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <_ZN13SerialMessage17isDeviceConnectedEv+0x84>
		{
			GetSomething = true;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 8005c72:	e008      	b.n	8005c86 <_ZN13SerialMessage17isDeviceConnectedEv+0x96>
		}
		Timeout--;
 8005c74:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		HAL_Delay(1);
 8005c7e:	2001      	movs	r0, #1
 8005c80:	f006 fac4 	bl	800c20c <HAL_Delay>
	while(Timeout > 0)
 8005c84:	e7e2      	b.n	8005c4c <_ZN13SerialMessage17isDeviceConnectedEv+0x5c>
	}
	if(GetSomething)
 8005c86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d013      	beq.n	8005cb6 <_ZN13SerialMessage17isDeviceConnectedEv+0xc6>
	{
		if(rxBuffer[0] == '$' && rxBuffer[1] == '!' && rxBuffer[2] == '$')
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b24      	cmp	r3, #36	; 0x24
 8005c96:	d10e      	bne.n	8005cb6 <_ZN13SerialMessage17isDeviceConnectedEv+0xc6>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b21      	cmp	r3, #33	; 0x21
 8005ca2:	d108      	bne.n	8005cb6 <_ZN13SerialMessage17isDeviceConnectedEv+0xc6>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca8:	3302      	adds	r3, #2
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b24      	cmp	r3, #36	; 0x24
 8005cae:	d102      	bne.n	8005cb6 <_ZN13SerialMessage17isDeviceConnectedEv+0xc6>
		{
			Connected = true;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}
	return Connected;
 8005cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3728      	adds	r7, #40	; 0x28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	080150c8 	.word	0x080150c8
 8005cc8:	200007c4 	.word	0x200007c4

08005ccc <_ZN13SerialMessage20receiveSerialCommandEv>:


int16_t SerialMessage::receiveSerialCommand()
{
 8005ccc:	b590      	push	{r4, r7, lr}
 8005cce:	b09b      	sub	sp, #108	; 0x6c
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	String CommandStr = "";
 8005cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f00a fefb 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8005cde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ce2:	f107 0310 	add.w	r3, r7, #16
 8005ce6:	4969      	ldr	r1, [pc, #420]	; (8005e8c <_ZN13SerialMessage20receiveSerialCommandEv+0x1c0>)
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f00b f9bb 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f00a feef 	bl	8010ad6 <_ZNSaIcED1Ev>
	int16_t Command = NO_COMMANDS;
 8005cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cfc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	bool InvalidMsg = false;
 8005d00:	2300      	movs	r3, #0
 8005d02:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	char Req[MAX_REQ_LEN];
	if(readSerialPolling())
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff fdf0 	bl	80058ec <_ZN13SerialMessage17readSerialPollingEv>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 80b0 	beq.w	8005e74 <_ZN13SerialMessage20receiveSerialCommandEv+0x1a8>
	{
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005d14:	2300      	movs	r3, #0
 8005d16:	663b      	str	r3, [r7, #96]	; 0x60
 8005d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d1a:	2b18      	cmp	r3, #24
 8005d1c:	dc2a      	bgt.n	8005d74 <_ZN13SerialMessage20receiveSerialCommandEv+0xa8>
		{
			bool EndMsg = false;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if(rxBuffer[i] == '$' && i > 0)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d2a:	4413      	add	r3, r2
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b24      	cmp	r3, #36	; 0x24
 8005d30:	d106      	bne.n	8005d40 <_ZN13SerialMessage20receiveSerialCommandEv+0x74>
 8005d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dd03      	ble.n	8005d40 <_ZN13SerialMessage20receiveSerialCommandEv+0x74>
			{
				EndMsg = true;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005d3e:	e002      	b.n	8005d46 <_ZN13SerialMessage20receiveSerialCommandEv+0x7a>
			}
			else
			{
				InvalidMsg = true;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}
			CommandStr.push_back(rxBuffer[i]);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d4c:	4413      	add	r3, r2
 8005d4e:	781a      	ldrb	r2, [r3, #0]
 8005d50:	f107 0310 	add.w	r3, r7, #16
 8005d54:	4611      	mov	r1, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f00b f82a 	bl	8010db0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			if(EndMsg)
 8005d5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <_ZN13SerialMessage20receiveSerialCommandEv+0xa0>
			{
				InvalidMsg = false;
 8005d64:	2300      	movs	r3, #0
 8005d66:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				break;
 8005d6a:	e003      	b.n	8005d74 <_ZN13SerialMessage20receiveSerialCommandEv+0xa8>
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005d6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d6e:	3301      	adds	r3, #1
 8005d70:	663b      	str	r3, [r7, #96]	; 0x60
 8005d72:	e7d1      	b.n	8005d18 <_ZN13SerialMessage20receiveSerialCommandEv+0x4c>
			}
		}
		commandReceived = CommandStr;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3318      	adds	r3, #24
 8005d78:	f107 0210 	add.w	r2, r7, #16
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f00a ffdf 	bl	8010d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		memset(rxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	2219      	movs	r2, #25
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f00b fab6 	bl	80112fe <memset>
		if(InvalidMsg)
 8005d92:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d004      	beq.n	8005da4 <_ZN13SerialMessage20receiveSerialCommandEv+0xd8>
		{
			Command = INVALID_MESSAGE;
 8005d9a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005d9e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005da2:	e042      	b.n	8005e2a <_ZN13SerialMessage20receiveSerialCommandEv+0x15e>
		}
		else
		{
			Req[0] = CommandStr[1];
 8005da4:	f107 0310 	add.w	r3, r7, #16
 8005da8:	2101      	movs	r1, #1
 8005daa:	4618      	mov	r0, r3
 8005dac:	f00a fffd 	bl	8010daa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005db0:	4603      	mov	r3, r0
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	733b      	strb	r3, [r7, #12]
			Req[1] = CommandStr[2];
 8005db6:	f107 0310 	add.w	r3, r7, #16
 8005dba:	2102      	movs	r1, #2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f00a fff4 	bl	8010daa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	737b      	strb	r3, [r7, #13]
			if(CommandStr[3] == '$')
 8005dc8:	f107 0310 	add.w	r3, r7, #16
 8005dcc:	2103      	movs	r1, #3
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f00a ffeb 	bl	8010daa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b24      	cmp	r3, #36	; 0x24
 8005dda:	bf0c      	ite	eq
 8005ddc:	2301      	moveq	r3, #1
 8005dde:	2300      	movne	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <_ZN13SerialMessage20receiveSerialCommandEv+0x12e>
			{
				Command = getStartStopReq(Req);
 8005de6:	f107 030c 	add.w	r3, r7, #12
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff fde7 	bl	80059c0 <_ZN13SerialMessage15getStartStopReqEPc>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005df8:	e017      	b.n	8005e2a <_ZN13SerialMessage20receiveSerialCommandEv+0x15e>
			}
			else
			{
				Command = getSetReq(Req, CommandStr);
 8005dfa:	f107 0210 	add.w	r2, r7, #16
 8005dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e02:	4611      	mov	r1, r2
 8005e04:	4618      	mov	r0, r3
 8005e06:	f00b f8fa 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005e0a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005e0e:	f107 030c 	add.w	r3, r7, #12
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff fe23 	bl	8005a60 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e24:	4618      	mov	r0, r3
 8005e26:	f00a ff86 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}

		}
		if(!InvalidMsg)
 8005e2a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005e2e:	f083 0301 	eor.w	r3, r3, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01d      	beq.n	8005e74 <_ZN13SerialMessage20receiveSerialCommandEv+0x1a8>
		{
			sendMessage("$!$", false);
 8005e38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f00a fe49 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8005e42:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005e46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e4a:	4911      	ldr	r1, [pc, #68]	; (8005e90 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c4>)
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f00b f909 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e56:	2200      	movs	r2, #0
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fd08 	bl	8005870 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8005e60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e64:	4618      	mov	r0, r3
 8005e66:	f00a ff66 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f00a fe31 	bl	8010ad6 <_ZNSaIcED1Ev>
		}
	}
	return Command;
 8005e74:	f9b7 4066 	ldrsh.w	r4, [r7, #102]	; 0x66
	String CommandStr = "";
 8005e78:	f107 0310 	add.w	r3, r7, #16
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f00a ff5a 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Command;
 8005e82:	4623      	mov	r3, r4
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	376c      	adds	r7, #108	; 0x6c
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd90      	pop	{r4, r7, pc}
 8005e8c:	080150a4 	.word	0x080150a4
 8005e90:	080150cc 	.word	0x080150cc

08005e94 <_ZN13SerialMessage14getValueSettedEv>:

uint32_t SerialMessage::getValueSetted()
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	uint32_t RetVal = valueSetted;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea0:	60fb      	str	r3, [r7, #12]
	valueSetted = UINT32_MAX;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea8:	63da      	str	r2, [r3, #60]	; 0x3c
	return RetVal;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr
	...

08005eb8 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>:



std::string SerialMessage::getCommandReceived()
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
	String RetCommand = commandReceived;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	3318      	adds	r3, #24
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f00b f898 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	commandReceived = "";
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	3318      	adds	r3, #24
 8005ed2:	4904      	ldr	r1, [pc, #16]	; (8005ee4 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev+0x2c>)
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f00b f812 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	return RetCommand;
 8005eda:	bf00      	nop
}
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	080150a4 	.word	0x080150a4

08005ee8 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	f00b f98a 	bl	8011208 <__errno>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	f00b f984 	bl	8011208 <__errno>
 8005f00:	4602      	mov	r2, r0
 8005f02:	2300      	movs	r3, #0
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	f00b f976 	bl	8011208 <__errno>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf0c      	ite	eq
 8005f24:	2301      	moveq	r3, #1
 8005f26:	2300      	movne	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8005f2e:	f00b f96b 	bl	8011208 <__errno>
 8005f32:	4602      	mov	r2, r0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	7039      	strb	r1, [r7, #0]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr

08005f5a <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8005f5a:	b590      	push	{r4, r7, lr}
 8005f5c:	b08b      	sub	sp, #44	; 0x2c
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8005f68:	f107 0314 	add.w	r3, r7, #20
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff ffbb 	bl	8005ee8 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8005f72:	f107 0118 	add.w	r1, r7, #24
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	4798      	blx	r3
 8005f7e:	6278      	str	r0, [r7, #36]	; 0x24
      if (__endptr == __str)
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d102      	bne.n	8005f8e <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8005f88:	68b8      	ldr	r0, [r7, #8]
 8005f8a:	f00a fdab 	bl	8010ae4 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8005f8e:	f00b f93b 	bl	8011208 <__errno>
 8005f92:	4603      	mov	r3, r0
 8005f94:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8005f96:	2b22      	cmp	r3, #34	; 0x22
 8005f98:	d006      	beq.n	8005fa8 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f9e:	f7ff ffd1 	bl	8005f44 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8005fac:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8005fb2:	68b8      	ldr	r0, [r7, #8]
 8005fb4:	f00a fd9c 	bl	8010af0 <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	623b      	str	r3, [r7, #32]
      if (__idx)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d006      	beq.n	8005fd0 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x76>
	*__idx = __endptr - __str;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	601a      	str	r2, [r3, #0]
      return __ret;
 8005fd0:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8005fd2:	f107 0314 	add.w	r3, r7, #20
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff ff9a 	bl	8005f10 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8005fdc:	4623      	mov	r3, r4
    }
 8005fde:	4618      	mov	r0, r3
 8005fe0:	372c      	adds	r7, #44	; 0x2c
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd90      	pop	{r4, r7, pc}

08005fe6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr

08005ffc <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af02      	add	r7, sp, #8
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	4b04      	ldr	r3, [pc, #16]	; (8006020 <_ZNSt7__cxx119to_stringEm+0x24>)
 800600e:	2210      	movs	r2, #16
 8006010:	4904      	ldr	r1, [pc, #16]	; (8006024 <_ZNSt7__cxx119to_stringEm+0x28>)
 8006012:	f7fe f839 	bl	8004088 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	080150d4 	.word	0x080150d4
 8006024:	0801310d 	.word	0x0801310d

08006028 <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2020 	strb.w	r2, [r3, #32]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>:
		bool withChebox;
		bool *itemsChecked;
		void *paramAssociated;
		uint8_t paramType;
		bool menuSelected;
	}MENU_STRUCTURE;
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4618      	mov	r0, r3
 8006050:	f00a fe50 	bl	8010cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>:
	}DRYER_PARAMS;
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	705a      	strb	r2, [r3, #1]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	709a      	strb	r2, [r3, #2]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <_ZN10SmartDryer12DRYER_PARAMSC1Ev+0x40>)
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	721a      	strb	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	725a      	strb	r2, [r3, #9]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	729a      	strb	r2, [r3, #10]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	41f00000 	.word	0x41f00000

080060a4 <_ZN10SmartDryerC1Ev>:
		"Programma 3",
};



SmartDryer::SmartDryer()
 80060a4:	b590      	push	{r4, r7, lr}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	334c      	adds	r3, #76	; 0x4c
 80060b8:	2248      	movs	r2, #72	; 0x48
 80060ba:	2100      	movs	r1, #0
 80060bc:	4618      	mov	r0, r3
 80060be:	f00b f91e 	bl	80112fe <memset>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2202      	movs	r2, #2
 80060c6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	33a4      	adds	r3, #164	; 0xa4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f004 fe10 	bl	800acf4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 80060f4:	20c8      	movs	r0, #200	; 0xc8
 80060f6:	f00a fcd1 	bl	8010a9c <_Znwj>
 80060fa:	4603      	mov	r3, r0
 80060fc:	461c      	mov	r4, r3
 80060fe:	2101      	movs	r1, #1
 8006100:	4620      	mov	r0, r4
 8006102:	f7fe fa2d 	bl	8004560 <_ZN13NHDST7565_LCDC1Eh>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	601c      	str	r4, [r3, #0]
	keyboard = new DryerKey();
 800610a:	2010      	movs	r0, #16
 800610c:	f00a fcc6 	bl	8010a9c <_Znwj>
 8006110:	4603      	mov	r3, r0
 8006112:	461c      	mov	r4, r3
 8006114:	4620      	mov	r0, r4
 8006116:	f7ff fa65 	bl	80055e4 <_ZN8DryerKeyC1Ev>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 800611e:	2021      	movs	r0, #33	; 0x21
 8006120:	f00a fcbc 	bl	8010a9c <_Znwj>
 8006124:	4603      	mov	r3, r0
 8006126:	461c      	mov	r4, r3
 8006128:	4620      	mov	r0, r4
 800612a:	2321      	movs	r3, #33	; 0x21
 800612c:	461a      	mov	r2, r3
 800612e:	2100      	movs	r1, #0
 8006130:	f00b f8e5 	bl	80112fe <memset>
 8006134:	4620      	mov	r0, r4
 8006136:	f7ff ff77 	bl	8006028 <_ZN13THERMO_SENSORC1Ev>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 800613e:	2008      	movs	r0, #8
 8006140:	f00a fcac 	bl	8010a9c <_Znwj>
 8006144:	4603      	mov	r3, r0
 8006146:	461c      	mov	r4, r3
 8006148:	2300      	movs	r3, #0
 800614a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800614e:	4992      	ldr	r1, [pc, #584]	; (8006398 <_ZN10SmartDryerC1Ev+0x2f4>)
 8006150:	4620      	mov	r0, r4
 8006152:	f7ff fae0 	bl	8005716 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 800615a:	2008      	movs	r0, #8
 800615c:	f00a fc9e 	bl	8010a9c <_Znwj>
 8006160:	4603      	mov	r3, r0
 8006162:	461c      	mov	r4, r3
 8006164:	2300      	movs	r3, #0
 8006166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800616a:	498b      	ldr	r1, [pc, #556]	; (8006398 <_ZN10SmartDryerC1Ev+0x2f4>)
 800616c:	4620      	mov	r0, r4
 800616e:	f7ff fad2 	bl	8005716 <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 8006176:	2008      	movs	r0, #8
 8006178:	f00a fc90 	bl	8010a9c <_Znwj>
 800617c:	4603      	mov	r3, r0
 800617e:	461c      	mov	r4, r3
 8006180:	4620      	mov	r0, r4
 8006182:	f7ff f94c 	bl	800541e <_ZN12STM32_EEPROMC1Ev>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800618a:	2014      	movs	r0, #20
 800618c:	f00a fc86 	bl	8010a9c <_Znwj>
 8006190:	4603      	mov	r3, r0
 8006192:	461c      	mov	r4, r3
 8006194:	2100      	movs	r1, #0
 8006196:	4620      	mov	r0, r4
 8006198:	f7fd f947 	bl	800342a <_ZN11ChronoTimerC1Eh>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80061a0:	2014      	movs	r0, #20
 80061a2:	f00a fc7b 	bl	8010a9c <_Znwj>
 80061a6:	4603      	mov	r3, r0
 80061a8:	461c      	mov	r4, r3
 80061aa:	2100      	movs	r1, #0
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7fd f93c 	bl	800342a <_ZN11ChronoTimerC1Eh>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80061b6:	2014      	movs	r0, #20
 80061b8:	f00a fc70 	bl	8010a9c <_Znwj>
 80061bc:	4603      	mov	r3, r0
 80061be:	461c      	mov	r4, r3
 80061c0:	2100      	movs	r1, #0
 80061c2:	4620      	mov	r0, r4
 80061c4:	f7fd f931 	bl	800342a <_ZN11ChronoTimerC1Eh>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	625c      	str	r4, [r3, #36]	; 0x24
	takeTimeTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80061cc:	2014      	movs	r0, #20
 80061ce:	f00a fc65 	bl	8010a9c <_Znwj>
 80061d2:	4603      	mov	r3, r0
 80061d4:	461c      	mov	r4, r3
 80061d6:	2100      	movs	r1, #0
 80061d8:	4620      	mov	r0, r4
 80061da:	f7fd f926 	bl	800342a <_ZN11ChronoTimerC1Eh>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	629c      	str	r4, [r3, #40]	; 0x28
	showHelpMessageTimer = new ChronoTimer(ChronoTimer::SECONDS);
 80061e2:	2014      	movs	r0, #20
 80061e4:	f00a fc5a 	bl	8010a9c <_Znwj>
 80061e8:	4603      	mov	r3, r0
 80061ea:	461c      	mov	r4, r3
 80061ec:	2101      	movs	r1, #1
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7fd f91b 	bl	800342a <_ZN11ChronoTimerC1Eh>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	62dc      	str	r4, [r3, #44]	; 0x2c
	programStartedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80061f8:	2014      	movs	r0, #20
 80061fa:	f00a fc4f 	bl	8010a9c <_Znwj>
 80061fe:	4603      	mov	r3, r0
 8006200:	461c      	mov	r4, r3
 8006202:	2100      	movs	r1, #0
 8006204:	4620      	mov	r0, r4
 8006206:	f7fd f910 	bl	800342a <_ZN11ChronoTimerC1Eh>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	631c      	str	r4, [r3, #48]	; 0x30
	blinkSerialIconTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800620e:	2014      	movs	r0, #20
 8006210:	f00a fc44 	bl	8010a9c <_Znwj>
 8006214:	4603      	mov	r3, r0
 8006216:	461c      	mov	r4, r3
 8006218:	2100      	movs	r1, #0
 800621a:	4620      	mov	r0, r4
 800621c:	f7fd f905 	bl	800342a <_ZN11ChronoTimerC1Eh>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	635c      	str	r4, [r3, #52]	; 0x34
	checkSerialDeviceTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8006224:	2014      	movs	r0, #20
 8006226:	f00a fc39 	bl	8010a9c <_Znwj>
 800622a:	4603      	mov	r3, r0
 800622c:	461c      	mov	r4, r3
 800622e:	2100      	movs	r1, #0
 8006230:	4620      	mov	r0, r4
 8006232:	f7fd f8fa 	bl	800342a <_ZN11ChronoTimerC1Eh>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	639c      	str	r4, [r3, #56]	; 0x38

	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800623a:	2014      	movs	r0, #20
 800623c:	f00a fc2e 	bl	8010a9c <_Znwj>
 8006240:	4603      	mov	r3, r0
 8006242:	461c      	mov	r4, r3
 8006244:	2100      	movs	r1, #0
 8006246:	4620      	mov	r0, r4
 8006248:	f7fd f8ef 	bl	800342a <_ZN11ChronoTimerC1Eh>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	63dc      	str	r4, [r3, #60]	; 0x3c

	externalCommand = new SerialMessage();
 8006250:	2040      	movs	r0, #64	; 0x40
 8006252:	f00a fc23 	bl	8010a9c <_Znwj>
 8006256:	4603      	mov	r3, r0
 8006258:	461c      	mov	r4, r3
 800625a:	4620      	mov	r0, r4
 800625c:	f7ff fab8 	bl	80057d0 <_ZN13SerialMessageC1Ev>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	641c      	str	r4, [r3, #64]	; 0x40

	clock = new DS1307_RTC();
 8006264:	2021      	movs	r0, #33	; 0x21
 8006266:	f00a fc19 	bl	8010a9c <_Znwj>
 800626a:	4603      	mov	r3, r0
 800626c:	461c      	mov	r4, r3
 800626e:	4620      	mov	r0, r4
 8006270:	f7fd fa1a 	bl	80036a8 <_ZN10DS1307_RTCC1Ev>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	605c      	str	r4, [r3, #4]

	mainMenu = new MENU_STRUCTURE();
 8006278:	2038      	movs	r0, #56	; 0x38
 800627a:	f00a fc0f 	bl	8010a9c <_Znwj>
 800627e:	4603      	mov	r3, r0
 8006280:	461c      	mov	r4, r3
 8006282:	4620      	mov	r0, r4
 8006284:	2338      	movs	r3, #56	; 0x38
 8006286:	461a      	mov	r2, r3
 8006288:	2100      	movs	r1, #0
 800628a:	f00b f838 	bl	80112fe <memset>
 800628e:	4620      	mov	r0, r4
 8006290:	f7ff fed8 	bl	8006044 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
	thermoMenuCtrl = new MENU_STRUCTURE();
 800629a:	2038      	movs	r0, #56	; 0x38
 800629c:	f00a fbfe 	bl	8010a9c <_Znwj>
 80062a0:	4603      	mov	r3, r0
 80062a2:	461c      	mov	r4, r3
 80062a4:	4620      	mov	r0, r4
 80062a6:	2338      	movs	r3, #56	; 0x38
 80062a8:	461a      	mov	r2, r3
 80062aa:	2100      	movs	r1, #0
 80062ac:	f00b f827 	bl	80112fe <memset>
 80062b0:	4620      	mov	r0, r4
 80062b2:	f7ff fec7 	bl	8006044 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
	fanMenuCtrl = new MENU_STRUCTURE();
 80062bc:	2038      	movs	r0, #56	; 0x38
 80062be:	f00a fbed 	bl	8010a9c <_Znwj>
 80062c2:	4603      	mov	r3, r0
 80062c4:	461c      	mov	r4, r3
 80062c6:	4620      	mov	r0, r4
 80062c8:	2338      	movs	r3, #56	; 0x38
 80062ca:	461a      	mov	r2, r3
 80062cc:	2100      	movs	r1, #0
 80062ce:	f00b f816 	bl	80112fe <memset>
 80062d2:	4620      	mov	r0, r4
 80062d4:	f7ff feb6 	bl	8006044 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
	tempMenuCtrl = new MENU_STRUCTURE();
 80062de:	2038      	movs	r0, #56	; 0x38
 80062e0:	f00a fbdc 	bl	8010a9c <_Znwj>
 80062e4:	4603      	mov	r3, r0
 80062e6:	461c      	mov	r4, r3
 80062e8:	4620      	mov	r0, r4
 80062ea:	2338      	movs	r3, #56	; 0x38
 80062ec:	461a      	mov	r2, r3
 80062ee:	2100      	movs	r1, #0
 80062f0:	f00b f805 	bl	80112fe <memset>
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff fea5 	bl	8006044 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
	startDryerMenu = new MENU_STRUCTURE();
 8006300:	2038      	movs	r0, #56	; 0x38
 8006302:	f00a fbcb 	bl	8010a9c <_Znwj>
 8006306:	4603      	mov	r3, r0
 8006308:	461c      	mov	r4, r3
 800630a:	4620      	mov	r0, r4
 800630c:	2338      	movs	r3, #56	; 0x38
 800630e:	461a      	mov	r2, r3
 8006310:	2100      	movs	r1, #0
 8006312:	f00a fff4 	bl	80112fe <memset>
 8006316:	4620      	mov	r0, r4
 8006318:	f7ff fe94 	bl	8006044 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
	changeProgramsMenu = new MENU_STRUCTURE();
 8006322:	2038      	movs	r0, #56	; 0x38
 8006324:	f00a fbba 	bl	8010a9c <_Znwj>
 8006328:	4603      	mov	r3, r0
 800632a:	461c      	mov	r4, r3
 800632c:	4620      	mov	r0, r4
 800632e:	2338      	movs	r3, #56	; 0x38
 8006330:	461a      	mov	r2, r3
 8006332:	2100      	movs	r1, #0
 8006334:	f00a ffe3 	bl	80112fe <memset>
 8006338:	4620      	mov	r0, r4
 800633a:	f7ff fe83 	bl	8006044 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
	startProgramsMenu = new MENU_STRUCTURE();
 8006344:	2038      	movs	r0, #56	; 0x38
 8006346:	f00a fba9 	bl	8010a9c <_Znwj>
 800634a:	4603      	mov	r3, r0
 800634c:	461c      	mov	r4, r3
 800634e:	4620      	mov	r0, r4
 8006350:	2338      	movs	r3, #56	; 0x38
 8006352:	461a      	mov	r2, r3
 8006354:	2100      	movs	r1, #0
 8006356:	f00a ffd2 	bl	80112fe <memset>
 800635a:	4620      	mov	r0, r4
 800635c:	f7ff fe72 	bl	8006044 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8

	statusParam = new DRYER_PARAMS();
 8006366:	200c      	movs	r0, #12
 8006368:	f00a fb98 	bl	8010a9c <_Znwj>
 800636c:	4603      	mov	r3, r0
 800636e:	461c      	mov	r4, r3
 8006370:	4622      	mov	r2, r4
 8006372:	2300      	movs	r3, #0
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	6053      	str	r3, [r2, #4]
 8006378:	6093      	str	r3, [r2, #8]
 800637a:	4620      	mov	r0, r4
 800637c:	f7ff fe70 	bl	8006060 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	649c      	str	r4, [r3, #72]	; 0x48

	chamberTemperature.readedValueInt = 0;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	bd90      	pop	{r4, r7, pc}
 8006396:	bf00      	nop
 8006398:	40010800 	.word	0x40010800

0800639c <_ZN10SmartDryer11floatStringB5cxx11Efh>:

String SmartDryer::floatString(float Number, uint8_t NDecimal)
{
 800639c:	b590      	push	{r4, r7, lr}
 800639e:	b08d      	sub	sp, #52	; 0x34
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	70fb      	strb	r3, [r7, #3]
	char CharArray[6];
	char Format[6];
	snprintf(Format, 6, "%%.%df", NDecimal);
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	f107 0014 	add.w	r0, r7, #20
 80063b0:	4a13      	ldr	r2, [pc, #76]	; (8006400 <_ZN10SmartDryer11floatStringB5cxx11Efh+0x64>)
 80063b2:	2106      	movs	r1, #6
 80063b4:	f00b feda 	bl	801216c <sniprintf>
	snprintf(CharArray, 6, Format, Number);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7fa f835 	bl	8000428 <__aeabi_f2d>
 80063be:	4603      	mov	r3, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	f107 0214 	add.w	r2, r7, #20
 80063c6:	f107 001c 	add.w	r0, r7, #28
 80063ca:	e9cd 3400 	strd	r3, r4, [sp]
 80063ce:	2106      	movs	r1, #6
 80063d0:	f00b fecc 	bl	801216c <sniprintf>
	return String(CharArray);
 80063d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063d8:	4618      	mov	r0, r3
 80063da:	f00a fb7b 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80063de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80063e2:	f107 031c 	add.w	r3, r7, #28
 80063e6:	4619      	mov	r1, r3
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f00a fe3b 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80063ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f00a fb6f 	bl	8010ad6 <_ZNSaIcED1Ev>
}
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	372c      	adds	r7, #44	; 0x2c
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd90      	pop	{r4, r7, pc}
 8006400:	080151b0 	.word	0x080151b0

08006404 <_ZN10SmartDryer8blinkLedEht>:

void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
 8006410:	4613      	mov	r3, r2
 8006412:	803b      	strh	r3, [r7, #0]
	//	GPIO_TypeDef *LedPort;
	//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 8006414:	883b      	ldrh	r3, [r7, #0]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d801      	bhi.n	800641e <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 800641a:	2302      	movs	r3, #2
 800641c:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <_ZN10SmartDryer8blinkLedEht+0x26>
 8006424:	2b01      	cmp	r3, #1
 8006426:	d010      	beq.n	800644a <_ZN10SmartDryer8blinkLedEht+0x46>
			}
			//		LedPort = GreenLed_GPIO_Port;
			//		LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8006428:	e022      	b.n	8006470 <_ZN10SmartDryer8blinkLedEht+0x6c>
			if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	883a      	ldrh	r2, [r7, #0]
 8006430:	2101      	movs	r1, #1
 8006432:	4618      	mov	r0, r3
 8006434:	f7fd f8a3 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d015      	beq.n	800646a <_ZN10SmartDryer8blinkLedEht+0x66>
				toggleLed(WichLed);
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f818 	bl	8006478 <_ZN10SmartDryer9toggleLedEh>
			break;
 8006448:	e00f      	b.n	800646a <_ZN10SmartDryer8blinkLedEht+0x66>
			if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	883a      	ldrh	r2, [r7, #0]
 8006450:	2101      	movs	r1, #1
 8006452:	4618      	mov	r0, r3
 8006454:	f7fd f893 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <_ZN10SmartDryer8blinkLedEht+0x6a>
				toggleLed(WichLed);
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f808 	bl	8006478 <_ZN10SmartDryer9toggleLedEh>
			break;
 8006468:	e001      	b.n	800646e <_ZN10SmartDryer8blinkLedEht+0x6a>
			break;
 800646a:	bf00      	nop
 800646c:	e000      	b.n	8006470 <_ZN10SmartDryer8blinkLedEht+0x6c>
			break;
 800646e:	bf00      	nop
	}

}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <_ZN10SmartDryer9toggleLedEh+0x1c>
 800648e:	2b01      	cmp	r3, #1
 8006490:	d006      	beq.n	80064a0 <_ZN10SmartDryer9toggleLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8006492:	e00b      	b.n	80064ac <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8006494:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <_ZN10SmartDryer9toggleLedEh+0x48>)
 8006496:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8006498:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800649c:	817b      	strh	r3, [r7, #10]
			break;
 800649e:	e005      	b.n	80064ac <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 80064a0:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <_ZN10SmartDryer9toggleLedEh+0x48>)
 80064a2:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 80064a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064a8:	817b      	strh	r3, [r7, #10]
			break;
 80064aa:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 80064ac:	897b      	ldrh	r3, [r7, #10]
 80064ae:	4619      	mov	r1, r3
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f007 f8bf 	bl	800d634 <HAL_GPIO_TogglePin>
}
 80064b6:	bf00      	nop
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40010800 	.word	0x40010800

080064c4 <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <_ZN10SmartDryer9turnOnLedEh+0x1c>
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d006      	beq.n	80064ec <_ZN10SmartDryer9turnOnLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80064de:	e00b      	b.n	80064f8 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <_ZN10SmartDryer9turnOnLedEh+0x48>)
 80064e2:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 80064e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064e8:	817b      	strh	r3, [r7, #10]
			break;
 80064ea:	e005      	b.n	80064f8 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 80064ec:	4b07      	ldr	r3, [pc, #28]	; (800650c <_ZN10SmartDryer9turnOnLedEh+0x48>)
 80064ee:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 80064f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064f4:	817b      	strh	r3, [r7, #10]
			break;
 80064f6:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 80064f8:	897b      	ldrh	r3, [r7, #10]
 80064fa:	2201      	movs	r2, #1
 80064fc:	4619      	mov	r1, r3
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f007 f866 	bl	800d5d0 <HAL_GPIO_WritePin>
}
 8006504:	bf00      	nop
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40010800 	.word	0x40010800

08006510 <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <_ZN10SmartDryer10turnOffLedEh+0x1c>
 8006526:	2b01      	cmp	r3, #1
 8006528:	d006      	beq.n	8006538 <_ZN10SmartDryer10turnOffLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 800652a:	e00b      	b.n	8006544 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 800652c:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 800652e:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8006530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006534:	817b      	strh	r3, [r7, #10]
			break;
 8006536:	e005      	b.n	8006544 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8006538:	4b07      	ldr	r3, [pc, #28]	; (8006558 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 800653a:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 800653c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006540:	817b      	strh	r3, [r7, #10]
			break;
 8006542:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 8006544:	897b      	ldrh	r3, [r7, #10]
 8006546:	2200      	movs	r2, #0
 8006548:	4619      	mov	r1, r3
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f007 f840 	bl	800d5d0 <HAL_GPIO_WritePin>
}
 8006550:	bf00      	nop
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40010800 	.word	0x40010800

0800655c <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800656a:	2b03      	cmp	r3, #3
 800656c:	d031      	beq.n	80065d2 <_ZN10SmartDryer10ledControlEv+0x76>
 800656e:	2b03      	cmp	r3, #3
 8006570:	dc06      	bgt.n	8006580 <_ZN10SmartDryer10ledControlEv+0x24>
 8006572:	2b01      	cmp	r3, #1
 8006574:	d019      	beq.n	80065aa <_ZN10SmartDryer10ledControlEv+0x4e>
 8006576:	2b01      	cmp	r3, #1
 8006578:	dc22      	bgt.n	80065c0 <_ZN10SmartDryer10ledControlEv+0x64>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00b      	beq.n	8006596 <_ZN10SmartDryer10ledControlEv+0x3a>
 800657e:	e07b      	b.n	8006678 <_ZN10SmartDryer10ledControlEv+0x11c>
 8006580:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006584:	4293      	cmp	r3, r2
 8006586:	d03d      	beq.n	8006604 <_ZN10SmartDryer10ledControlEv+0xa8>
 8006588:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800658c:	d057      	beq.n	800663e <_ZN10SmartDryer10ledControlEv+0xe2>
 800658e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006592:	d02a      	beq.n	80065ea <_ZN10SmartDryer10ledControlEv+0x8e>
 8006594:	e070      	b.n	8006678 <_ZN10SmartDryer10ledControlEv+0x11c>
	{
		case THERMO_ON_FAN_OFF:
			blinkLed(RED_LED, 10);
 8006596:	220a      	movs	r2, #10
 8006598:	2100      	movs	r1, #0
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff ff32 	bl	8006404 <_ZN10SmartDryer8blinkLedEht>
			turnOffLed(GREEN_LED);
 80065a0:	2101      	movs	r1, #1
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff ffb4 	bl	8006510 <_ZN10SmartDryer10turnOffLedEh>
			break;
 80065a8:	e073      	b.n	8006692 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_ON:
			turnOffLed(RED_LED);
 80065aa:	2100      	movs	r1, #0
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff ffaf 	bl	8006510 <_ZN10SmartDryer10turnOffLedEh>
			blinkLed(GREEN_LED, 500);
 80065b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80065b6:	2101      	movs	r1, #1
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7ff ff23 	bl	8006404 <_ZN10SmartDryer8blinkLedEht>
			break;
 80065be:	e068      	b.n	8006692 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_OFF:
			turnOffLed(GREEN_LED);
 80065c0:	2101      	movs	r1, #1
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff ffa4 	bl	8006510 <_ZN10SmartDryer10turnOffLedEh>
			turnOffLed(RED_LED);
 80065c8:	2100      	movs	r1, #0
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff ffa0 	bl	8006510 <_ZN10SmartDryer10turnOffLedEh>
			break;
 80065d0:	e05f      	b.n	8006692 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_ON_FAN_ON:
			blinkLed(RED_LED, 10);
 80065d2:	220a      	movs	r2, #10
 80065d4:	2100      	movs	r1, #0
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff ff14 	bl	8006404 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 500);
 80065dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80065e0:	2101      	movs	r1, #1
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff ff0e 	bl	8006404 <_ZN10SmartDryer8blinkLedEht>
			break;
 80065e8:	e053      	b.n	8006692 <_ZN10SmartDryer10ledControlEv+0x136>
		case TEMP_REACHED:
			turnOnLed(RED_LED);
 80065ea:	2100      	movs	r1, #0
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff ff69 	bl	80064c4 <_ZN10SmartDryer9turnOnLedEh>
			HAL_Delay(250);
 80065f2:	20fa      	movs	r0, #250	; 0xfa
 80065f4:	f005 fe0a 	bl	800c20c <HAL_Delay>
			ledStatus = UNKNOWN_STATE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f240 12f7 	movw	r2, #503	; 0x1f7
 80065fe:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
			break;
 8006602:	e046      	b.n	8006692 <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_INIT:
			for(int i = 0; i < 50*10; i++)
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800660e:	da10      	bge.n	8006632 <_ZN10SmartDryer10ledControlEv+0xd6>
			{
				blinkLed(RED_LED, 50);
 8006610:	2232      	movs	r2, #50	; 0x32
 8006612:	2100      	movs	r1, #0
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7ff fef5 	bl	8006404 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 800661a:	2232      	movs	r2, #50	; 0x32
 800661c:	2101      	movs	r1, #1
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff fef0 	bl	8006404 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 8006624:	2001      	movs	r0, #1
 8006626:	f005 fdf1 	bl	800c20c <HAL_Delay>
			for(int i = 0; i < 50*10; i++)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3301      	adds	r3, #1
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	e7ea      	b.n	8006608 <_ZN10SmartDryer10ledControlEv+0xac>
			};
			ledStatus = UNKNOWN_STATE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006638:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
			break;
 800663c:	e029      	b.n	8006692 <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_END:
			for(int i = 0; i < 50*20; i++)
 800663e:	2300      	movs	r3, #0
 8006640:	60bb      	str	r3, [r7, #8]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006648:	da10      	bge.n	800666c <_ZN10SmartDryer10ledControlEv+0x110>
			{
				blinkLed(RED_LED, 50);
 800664a:	2232      	movs	r2, #50	; 0x32
 800664c:	2100      	movs	r1, #0
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fed8 	bl	8006404 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 8006654:	2232      	movs	r2, #50	; 0x32
 8006656:	2101      	movs	r1, #1
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff fed3 	bl	8006404 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 800665e:	2001      	movs	r0, #1
 8006660:	f005 fdd4 	bl	800c20c <HAL_Delay>
			for(int i = 0; i < 50*20; i++)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	3301      	adds	r3, #1
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	e7ea      	b.n	8006642 <_ZN10SmartDryer10ledControlEv+0xe6>
			};
			ledStatus = UNKNOWN_STATE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006672:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
			break;
 8006676:	e00c      	b.n	8006692 <_ZN10SmartDryer10ledControlEv+0x136>
		case UNKNOWN_STATE:
		default:
			blinkLed(RED_LED, 1000);
 8006678:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800667c:	2100      	movs	r1, #0
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff fec0 	bl	8006404 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 1000);
 8006684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006688:	2101      	movs	r1, #1
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff feba 	bl	8006404 <_ZN10SmartDryer8blinkLedEht>
			break;
 8006690:	bf00      	nop
	}
}
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <_ZN10SmartDryer16thermoRegulationEf>:

void SmartDryer::thermoRegulation(float WichTemp)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
	uint32_t ReadedTemp = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]
	uint32_t TempTarget = (uint32_t)roundf(WichTemp * 10);
 80066aa:	497e      	ldr	r1, [pc, #504]	; (80068a4 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 80066ac:	6838      	ldr	r0, [r7, #0]
 80066ae:	f7fa fb69 	bl	8000d84 <__aeabi_fmul>
 80066b2:	4603      	mov	r3, r0
 80066b4:	4618      	mov	r0, r3
 80066b6:	f00a fd7b 	bl	80111b0 <roundf>
 80066ba:	4603      	mov	r3, r0
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fa fcb1 	bl	8001024 <__aeabi_f2uiz>
 80066c2:	4603      	mov	r3, r0
 80066c4:	60fb      	str	r3, [r7, #12]
	bool Reading = false;
 80066c6:	2300      	movs	r3, #0
 80066c8:	74fb      	strb	r3, [r7, #19]
	if(statusParam->dryerOn)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80a7 	beq.w	8006824 <_ZN10SmartDryer16thermoRegulationEf+0x188>
	{
		if(getTempTimer->isFinished(true, 750))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80066de:	2101      	movs	r1, #1
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fc ff4c 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d024      	beq.n	8006736 <_ZN10SmartDryer16thermoRegulationEf+0x9a>
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f005 fbe4 	bl	800bebe <_ZN13THERMO_SENSOR14getTemperatureEv>
 80066f6:	4602      	mov	r2, r0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			chamberHumity.readedValueFL = tempSens->getHumidity();
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	4618      	mov	r0, r3
 8006704:	f005 fbc7 	bl	800be96 <_ZN13THERMO_SENSOR11getHumidityEv>
 8006708:	4602      	mov	r2, r0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			ReadedTemp = (uint32_t)roundf(chamberTemperature.readedValueFL * 10);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006716:	4963      	ldr	r1, [pc, #396]	; (80068a4 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 8006718:	4618      	mov	r0, r3
 800671a:	f7fa fb33 	bl	8000d84 <__aeabi_fmul>
 800671e:	4603      	mov	r3, r0
 8006720:	4618      	mov	r0, r3
 8006722:	f00a fd45 	bl	80111b0 <roundf>
 8006726:	4603      	mov	r3, r0
 8006728:	4618      	mov	r0, r3
 800672a:	f7fa fc7b 	bl	8001024 <__aeabi_f2uiz>
 800672e:	4603      	mov	r3, r0
 8006730:	617b      	str	r3, [r7, #20]
			Reading = true;
 8006732:	2301      	movs	r3, #1
 8006734:	74fb      	strb	r3, [r7, #19]
		}
		if(ReadedTemp != 0 && Reading)
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 80af 	beq.w	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
 800673e:	7cfb      	ldrb	r3, [r7, #19]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80ab 	beq.w	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
		{
			if(ReadedTemp >= TempTarget - TOLLERANCE_DEGREES)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3b37      	subs	r3, #55	; 0x37
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	429a      	cmp	r2, r3
 800674e:	d31b      	bcc.n	8006788 <_ZN10SmartDryer16thermoRegulationEf+0xec>
			{
				statusParam->fanOn = true;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006754:	2201      	movs	r2, #1
 8006756:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675c:	2201      	movs	r2, #1
 800675e:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006766:	f240 12f5 	movw	r2, #501	; 0x1f5
 800676a:	4293      	cmp	r3, r2
 800676c:	f000 8096 	beq.w	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006776:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800677a:	f000 808f 	beq.w	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_ON;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2203      	movs	r2, #3
 8006782:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
			chamberHumity.readedValueFL = tempSens->getHumidity();
		}
	}
}
 8006786:	e089      	b.n	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp >= TempTarget)
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	429a      	cmp	r2, r3
 800678e:	d324      	bcc.n	80067da <_ZN10SmartDryer16thermoRegulationEf+0x13e>
				statusParam->fanOn = true;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006794:	2201      	movs	r2, #1
 8006796:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = false;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679c:	2200      	movs	r2, #0
 800679e:	705a      	strb	r2, [r3, #1]
				ledStatus = TEMP_REACHED;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80067a6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80067b0:	f240 12f5 	movw	r2, #501	; 0x1f5
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d071      	beq.n	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80067be:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80067c2:	d06b      	beq.n	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80067ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80067ce:	d065      	beq.n	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_OFF_FAN_ON;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
}
 80067d8:	e060      	b.n	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp < TempTarget - TOLLERANCE_DEGREES)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3b37      	subs	r3, #55	; 0x37
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d25b      	bcs.n	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
				statusParam->fanOn = false;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e8:	2200      	movs	r2, #0
 80067ea:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f0:	2201      	movs	r2, #1
 80067f2:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80067fa:	f240 12f5 	movw	r2, #501	; 0x1f5
 80067fe:	4293      	cmp	r3, r2
 8006800:	d04c      	beq.n	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006808:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800680c:	d046      	beq.n	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006814:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006818:	d040      	beq.n	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_OFF;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
}
 8006822:	e03b      	b.n	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
		statusParam->fanOn = false;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006828:	2200      	movs	r2, #0
 800682a:	709a      	strb	r2, [r3, #2]
		statusParam->thermoOn = false;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006830:	2200      	movs	r2, #0
 8006832:	705a      	strb	r2, [r3, #1]
		if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800683a:	f240 12f5 	movw	r2, #501	; 0x1f5
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006848:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800684c:	d009      	beq.n	8006862 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006854:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006858:	d003      	beq.n	8006862 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
			ledStatus = THERMO_OFF_FAN_OFF;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		if(getTempTimer->isFinished(true, 750))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f240 22ee 	movw	r2, #750	; 0x2ee
 800686a:	2101      	movs	r1, #1
 800686c:	4618      	mov	r0, r3
 800686e:	f7fc fe86 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d011      	beq.n	800689c <_ZN10SmartDryer16thermoRegulationEf+0x200>
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	4618      	mov	r0, r3
 800687e:	f005 fb1e 	bl	800bebe <_ZN13THERMO_SENSOR14getTemperatureEv>
 8006882:	4602      	mov	r2, r0
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			chamberHumity.readedValueFL = tempSens->getHumidity();
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	4618      	mov	r0, r3
 8006890:	f005 fb01 	bl	800be96 <_ZN13THERMO_SENSOR11getHumidityEv>
 8006894:	4602      	mov	r2, r0
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 800689c:	bf00      	nop
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	41200000 	.word	0x41200000

080068a8 <_ZN10SmartDryer16physicalReleCtrlEv>:

void SmartDryer::physicalReleCtrl()
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	if(statusParam->dryerOn)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d024      	beq.n	8006904 <_ZN10SmartDryer16physicalReleCtrlEv+0x5c>
	{
		if(statusParam->fanOn)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068be:	789b      	ldrb	r3, [r3, #2]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d006      	beq.n	80068d2 <_ZN10SmartDryer16physicalReleCtrlEv+0x2a>
		{
			fanCtrl->setState(HIGH);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2101      	movs	r1, #1
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe ff3d 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
 80068d0:	e005      	b.n	80068de <_ZN10SmartDryer16physicalReleCtrlEv+0x36>
		}
		else
		{
			fanCtrl->setState(LOW);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2100      	movs	r1, #0
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe ff36 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
		}
		if(statusParam->thermoOn)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e2:	785b      	ldrb	r3, [r3, #1]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d006      	beq.n	80068f6 <_ZN10SmartDryer16physicalReleCtrlEv+0x4e>
		{
			thermoCtrl->setState(HIGH);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	2101      	movs	r1, #1
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe ff2b 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
	else
	{
		fanCtrl->setState(LOW);
		thermoCtrl->setState(LOW);
	}
}
 80068f4:	e012      	b.n	800691c <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
			thermoCtrl->setState(LOW);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe ff24 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
}
 8006902:	e00b      	b.n	800691c <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
		fanCtrl->setState(LOW);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe ff1d 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
		thermoCtrl->setState(LOW);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe ff17 	bl	800574a <_ZN4RELE8setStateE9PIN_STATE>
}
 800691c:	bf00      	nop
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <_ZN10SmartDryer18peripheralsControlEv>:

void SmartDryer::peripheralsControl()
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	thermoRegulation(statusParam->temperatureSetted);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff feb1 	bl	800669c <_ZN10SmartDryer16thermoRegulationEf>
	physicalReleCtrl();
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff ffb4 	bl	80068a8 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff fe0b 	bl	800655c <_ZN10SmartDryer10ledControlEv>
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:


void SmartDryer::showTimeDate(String &Time, String &Date)
{
 800694e:	b590      	push	{r4, r7, lr}
 8006950:	b09d      	sub	sp, #116	; 0x74
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
	if(takeTimeTimer->isFinished(true, 500))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006962:	2101      	movs	r1, #1
 8006964:	4618      	mov	r0, r3
 8006966:	f7fc fe0a 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d025      	beq.n	80069bc <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x6e>
	{
		Time = clock->getTimeDateStr(DS1307_RTC::ONLY_TIME_NO_SEC);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6859      	ldr	r1, [r3, #4]
 8006974:	f107 0310 	add.w	r3, r7, #16
 8006978:	2201      	movs	r2, #1
 800697a:	4618      	mov	r0, r3
 800697c:	f7fd f864 	bl	8003a48 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8006980:	f107 0310 	add.w	r3, r7, #16
 8006984:	4619      	mov	r1, r3
 8006986:	68b8      	ldr	r0, [r7, #8]
 8006988:	f00a f9e1 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800698c:	f107 0310 	add.w	r3, r7, #16
 8006990:	4618      	mov	r0, r3
 8006992:	f00a f9d0 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Date = clock->getTimeDateStr(DS1307_RTC::ONLY_DATE_NO_YEAR);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6859      	ldr	r1, [r3, #4]
 800699a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800699e:	2203      	movs	r2, #3
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fd f851 	bl	8003a48 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 80069a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f00a f9ce 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80069b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069b6:	4618      	mov	r0, r3
 80069b8:	f00a f9bd 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	display->drawTimeDate(Time, Date);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681c      	ldr	r4, [r3, #0]
 80069c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f00a fb19 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80069cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f00a fb13 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80069d8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80069dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069e0:	4619      	mov	r1, r3
 80069e2:	4620      	mov	r0, r4
 80069e4:	f7fe fb64 	bl	80050b0 <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 80069e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80069ec:	4618      	mov	r0, r3
 80069ee:	f00a f9a2 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80069f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069f6:	4618      	mov	r0, r3
 80069f8:	f00a f99d 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80069fc:	bf00      	nop
 80069fe:	3774      	adds	r7, #116	; 0x74
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd90      	pop	{r4, r7, pc}

08006a04 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>:

void SmartDryer::writeDefaultsDryerProgram(uint8_t WichProgram)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
	dryerPrograms[WichProgram].programSetted = false;
 8006a10:	78fa      	ldrb	r2, [r7, #3]
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	4413      	add	r3, r2
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	440b      	add	r3, r1
 8006a1e:	334c      	adds	r3, #76	; 0x4c
 8006a20:	2200      	movs	r2, #0
 8006a22:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.second = 0;
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	4413      	add	r3, r2
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	440b      	add	r3, r1
 8006a32:	334e      	adds	r3, #78	; 0x4e
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.minute = 0;
 8006a38:	78fa      	ldrb	r2, [r7, #3]
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	4413      	add	r3, r2
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	440b      	add	r3, r1
 8006a46:	334f      	adds	r3, #79	; 0x4f
 8006a48:	2200      	movs	r2, #0
 8006a4a:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = 0;
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	4613      	mov	r3, r2
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	4413      	add	r3, r2
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	440b      	add	r3, r1
 8006a5a:	3350      	adds	r3, #80	; 0x50
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.day = 1;
 8006a60:	78fa      	ldrb	r2, [r7, #3]
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	4613      	mov	r3, r2
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	4413      	add	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	440b      	add	r3, r1
 8006a6e:	3351      	adds	r3, #81	; 0x51
 8006a70:	2201      	movs	r2, #1
 8006a72:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.month = 1;
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	4413      	add	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	440b      	add	r3, r1
 8006a82:	3352      	adds	r3, #82	; 0x52
 8006a84:	2201      	movs	r2, #1
 8006a86:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.year = 2020;
 8006a88:	78fa      	ldrb	r2, [r7, #3]
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	4413      	add	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	440b      	add	r3, r1
 8006a96:	3354      	adds	r3, #84	; 0x54
 8006a98:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006a9c:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.second = 0;
 8006a9e:	78fa      	ldrb	r2, [r7, #3]
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4413      	add	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	440b      	add	r3, r1
 8006aac:	3356      	adds	r3, #86	; 0x56
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = 10;
 8006ab2:	78fa      	ldrb	r2, [r7, #3]
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	4413      	add	r3, r2
 8006abc:	00db      	lsls	r3, r3, #3
 8006abe:	440b      	add	r3, r1
 8006ac0:	3357      	adds	r3, #87	; 0x57
 8006ac2:	220a      	movs	r2, #10
 8006ac4:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = 0;
 8006ac6:	78fa      	ldrb	r2, [r7, #3]
 8006ac8:	6879      	ldr	r1, [r7, #4]
 8006aca:	4613      	mov	r3, r2
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	4413      	add	r3, r2
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	440b      	add	r3, r1
 8006ad4:	3358      	adds	r3, #88	; 0x58
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.day = 1;
 8006ada:	78fa      	ldrb	r2, [r7, #3]
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	4413      	add	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	440b      	add	r3, r1
 8006ae8:	3359      	adds	r3, #89	; 0x59
 8006aea:	2201      	movs	r2, #1
 8006aec:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.month = 1;
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	4613      	mov	r3, r2
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	4413      	add	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	440b      	add	r3, r1
 8006afc:	335a      	adds	r3, #90	; 0x5a
 8006afe:	2201      	movs	r2, #1
 8006b00:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.year = 2020;
 8006b02:	78fa      	ldrb	r2, [r7, #3]
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	4413      	add	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	440b      	add	r3, r1
 8006b10:	335c      	adds	r3, #92	; 0x5c
 8006b12:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006b16:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].tempSetted = 30.0;
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	4413      	add	r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	440b      	add	r3, r1
 8006b26:	3360      	adds	r3, #96	; 0x60
 8006b28:	4a03      	ldr	r2, [pc, #12]	; (8006b38 <_ZN10SmartDryer25writeDefaultsDryerProgramEh+0x134>)
 8006b2a:	601a      	str	r2, [r3, #0]
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	41f00000 	.word	0x41f00000

08006b3c <_ZN10SmartDryer16saveDryerProgramEh>:

void SmartDryer::saveDryerProgram(uint8_t WichProgram)
{
 8006b3c:	b590      	push	{r4, r7, lr}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006b48:	230e      	movs	r3, #14
 8006b4a:	73fb      	strb	r3, [r7, #15]
	uint32_t TempToSave = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60bb      	str	r3, [r7, #8]
	TempToSave = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8006b50:	78fa      	ldrb	r2, [r7, #3]
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4613      	mov	r3, r2
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	4413      	add	r3, r2
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	440b      	add	r3, r1
 8006b5e:	3360      	adds	r3, #96	; 0x60
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fa fa5e 	bl	8001024 <__aeabi_f2uiz>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	60bb      	str	r3, [r7, #8]
	memory->writeToMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].programSetted, NO_MEM_TRANSFER);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6998      	ldr	r0, [r3, #24]
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	00d2      	lsls	r2, r2, #3
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3301      	adds	r3, #1
 8006b80:	b29c      	uxth	r4, r3
 8006b82:	78fa      	ldrb	r2, [r7, #3]
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	4413      	add	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	440b      	add	r3, r1
 8006b90:	334c      	adds	r3, #76	; 0x4c
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	2300      	movs	r3, #0
 8006b98:	4621      	mov	r1, r4
 8006b9a:	f7fe fc5a 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.second, NO_MEM_TRANSFER);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6998      	ldr	r0, [r3, #24]
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	00d2      	lsls	r2, r2, #3
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	b29c      	uxth	r4, r3
 8006bb4:	78fa      	ldrb	r2, [r7, #3]
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	4413      	add	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	440b      	add	r3, r1
 8006bc2:	334e      	adds	r3, #78	; 0x4e
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4621      	mov	r1, r4
 8006bcc:	f7fe fc41 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.minute, NO_MEM_TRANSFER);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6998      	ldr	r0, [r3, #24]
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	461a      	mov	r2, r3
 8006bda:	00d2      	lsls	r2, r2, #3
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3303      	adds	r3, #3
 8006be4:	b29c      	uxth	r4, r3
 8006be6:	78fa      	ldrb	r2, [r7, #3]
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	4413      	add	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	440b      	add	r3, r1
 8006bf4:	334f      	adds	r3, #79	; 0x4f
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	f7fe fc28 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.hour, NO_MEM_TRANSFER);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6998      	ldr	r0, [r3, #24]
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	00d2      	lsls	r2, r2, #3
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3304      	adds	r3, #4
 8006c16:	b29c      	uxth	r4, r3
 8006c18:	78fa      	ldrb	r2, [r7, #3]
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	4413      	add	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	440b      	add	r3, r1
 8006c26:	3350      	adds	r3, #80	; 0x50
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4621      	mov	r1, r4
 8006c30:	f7fe fc0f 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.day, NO_MEM_TRANSFER);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6998      	ldr	r0, [r3, #24]
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	00d2      	lsls	r2, r2, #3
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3305      	adds	r3, #5
 8006c48:	b29c      	uxth	r4, r3
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	440b      	add	r3, r1
 8006c58:	3351      	adds	r3, #81	; 0x51
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4621      	mov	r1, r4
 8006c62:	f7fe fbf6 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.month, NO_MEM_TRANSFER);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6998      	ldr	r0, [r3, #24]
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	00d2      	lsls	r2, r2, #3
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	3306      	adds	r3, #6
 8006c7a:	b29c      	uxth	r4, r3
 8006c7c:	78fa      	ldrb	r2, [r7, #3]
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4613      	mov	r3, r2
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	4413      	add	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	440b      	add	r3, r1
 8006c8a:	3352      	adds	r3, #82	; 0x52
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	2300      	movs	r3, #0
 8006c92:	4621      	mov	r1, r4
 8006c94:	f7fe fbdd 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.year, NO_MEM_TRANSFER);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6998      	ldr	r0, [r3, #24]
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	00d2      	lsls	r2, r2, #3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3307      	adds	r3, #7
 8006cac:	b29c      	uxth	r4, r3
 8006cae:	78fa      	ldrb	r2, [r7, #3]
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	440b      	add	r3, r1
 8006cbc:	3354      	adds	r3, #84	; 0x54
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	f7fe fbc4 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.second, NO_MEM_TRANSFER);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6998      	ldr	r0, [r3, #24]
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	00d2      	lsls	r2, r2, #3
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3308      	adds	r3, #8
 8006cde:	b29c      	uxth	r4, r3
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	4413      	add	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	440b      	add	r3, r1
 8006cee:	3356      	adds	r3, #86	; 0x56
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	f7fe fbab 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.minute, NO_MEM_TRANSFER);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6998      	ldr	r0, [r3, #24]
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	00d2      	lsls	r2, r2, #3
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	3309      	adds	r3, #9
 8006d10:	b29c      	uxth	r4, r3
 8006d12:	78fa      	ldrb	r2, [r7, #3]
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	4613      	mov	r3, r2
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	440b      	add	r3, r1
 8006d20:	3357      	adds	r3, #87	; 0x57
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	2300      	movs	r3, #0
 8006d28:	4621      	mov	r1, r4
 8006d2a:	f7fe fb92 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.hour, NO_MEM_TRANSFER);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6998      	ldr	r0, [r3, #24]
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	00d2      	lsls	r2, r2, #3
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	330a      	adds	r3, #10
 8006d42:	b29c      	uxth	r4, r3
 8006d44:	78fa      	ldrb	r2, [r7, #3]
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	4413      	add	r3, r2
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	440b      	add	r3, r1
 8006d52:	3358      	adds	r3, #88	; 0x58
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	f7fe fb79 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.day, NO_MEM_TRANSFER);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6998      	ldr	r0, [r3, #24]
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	461a      	mov	r2, r3
 8006d6a:	00d2      	lsls	r2, r2, #3
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	330b      	adds	r3, #11
 8006d74:	b29c      	uxth	r4, r3
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	440b      	add	r3, r1
 8006d84:	3359      	adds	r3, #89	; 0x59
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	f7fe fb60 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.month, NO_MEM_TRANSFER);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6998      	ldr	r0, [r3, #24]
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	00d2      	lsls	r2, r2, #3
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	330c      	adds	r3, #12
 8006da6:	b29c      	uxth	r4, r3
 8006da8:	78fa      	ldrb	r2, [r7, #3]
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	4413      	add	r3, r2
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	440b      	add	r3, r1
 8006db6:	335a      	adds	r3, #90	; 0x5a
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	f7fe fb47 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.year, NO_MEM_TRANSFER);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6998      	ldr	r0, [r3, #24]
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	00d2      	lsls	r2, r2, #3
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	330d      	adds	r3, #13
 8006dd8:	b29c      	uxth	r4, r3
 8006dda:	78fa      	ldrb	r2, [r7, #3]
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	4413      	add	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	440b      	add	r3, r1
 8006de8:	335c      	adds	r3, #92	; 0x5c
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	2300      	movs	r3, #0
 8006df0:	4621      	mov	r1, r4
 8006df2:	f7fe fb2e 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), TempToSave, MEM_TRANSFER);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6998      	ldr	r0, [r3, #24]
 8006dfa:	78fb      	ldrb	r3, [r7, #3]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	00d2      	lsls	r2, r2, #3
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	b299      	uxth	r1, r3
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	f7fe fb20 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>

}
 8006e12:	bf00      	nop
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd90      	pop	{r4, r7, pc}

08006e1a <_ZN10SmartDryer16loadDryerProgramEh>:

void SmartDryer::loadDryerProgram(uint8_t WichProgram)
{
 8006e1a:	b590      	push	{r4, r7, lr}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006e26:	230e      	movs	r3, #14
 8006e28:	73fb      	strb	r3, [r7, #15]
	uint32_t TempSaved = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60bb      	str	r3, [r7, #8]
	memory->loadMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].programSetted);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6998      	ldr	r0, [r3, #24]
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	461a      	mov	r2, r3
 8006e38:	00d2      	lsls	r2, r2, #3
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3301      	adds	r3, #1
 8006e42:	b299      	uxth	r1, r3
 8006e44:	78fa      	ldrb	r2, [r7, #3]
 8006e46:	4613      	mov	r3, r2
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	4413      	add	r3, r2
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	3348      	adds	r3, #72	; 0x48
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	4413      	add	r3, r2
 8006e54:	3304      	adds	r3, #4
 8006e56:	461a      	mov	r2, r3
 8006e58:	f7fe fb19 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.second);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6998      	ldr	r0, [r3, #24]
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	00d2      	lsls	r2, r2, #3
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3302      	adds	r3, #2
 8006e70:	b299      	uxth	r1, r3
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	4613      	mov	r3, r2
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	4413      	add	r3, r2
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	3348      	adds	r3, #72	; 0x48
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	4413      	add	r3, r2
 8006e82:	3306      	adds	r3, #6
 8006e84:	461a      	mov	r2, r3
 8006e86:	f7fe fb02 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.minute);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6998      	ldr	r0, [r3, #24]
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	00d2      	lsls	r2, r2, #3
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3303      	adds	r3, #3
 8006e9e:	b299      	uxth	r1, r3
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	4413      	add	r3, r2
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	3348      	adds	r3, #72	; 0x48
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	4413      	add	r3, r2
 8006eb0:	3307      	adds	r3, #7
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f7fe faeb 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.hour);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6998      	ldr	r0, [r3, #24]
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	00d2      	lsls	r2, r2, #3
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3304      	adds	r3, #4
 8006ecc:	b299      	uxth	r1, r3
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	4413      	add	r3, r2
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	3348      	adds	r3, #72	; 0x48
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4413      	add	r3, r2
 8006ede:	3308      	adds	r3, #8
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f7fe fad4 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.day);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6998      	ldr	r0, [r3, #24]
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	00d2      	lsls	r2, r2, #3
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3305      	adds	r3, #5
 8006efa:	b299      	uxth	r1, r3
 8006efc:	78fa      	ldrb	r2, [r7, #3]
 8006efe:	4613      	mov	r3, r2
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	4413      	add	r3, r2
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	3348      	adds	r3, #72	; 0x48
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	3309      	adds	r3, #9
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f7fe fabd 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.month);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6998      	ldr	r0, [r3, #24]
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	00d2      	lsls	r2, r2, #3
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3306      	adds	r3, #6
 8006f28:	b299      	uxth	r1, r3
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	4413      	add	r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	3348      	adds	r3, #72	; 0x48
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	4413      	add	r3, r2
 8006f3a:	330a      	adds	r3, #10
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f7fe faa6 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.year);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6998      	ldr	r0, [r3, #24]
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	00d2      	lsls	r2, r2, #3
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	3307      	adds	r3, #7
 8006f56:	b299      	uxth	r1, r3
 8006f58:	78fa      	ldrb	r2, [r7, #3]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	4413      	add	r3, r2
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	3348      	adds	r3, #72	; 0x48
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	4413      	add	r3, r2
 8006f68:	330c      	adds	r3, #12
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f7fe fa8f 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.second);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6998      	ldr	r0, [r3, #24]
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	00d2      	lsls	r2, r2, #3
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3308      	adds	r3, #8
 8006f84:	b299      	uxth	r1, r3
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	4413      	add	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	3350      	adds	r3, #80	; 0x50
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4413      	add	r3, r2
 8006f96:	3306      	adds	r3, #6
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f7fe fa78 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.minute);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6998      	ldr	r0, [r3, #24]
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	00d2      	lsls	r2, r2, #3
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3309      	adds	r3, #9
 8006fb2:	b299      	uxth	r1, r3
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	3350      	adds	r3, #80	; 0x50
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3307      	adds	r3, #7
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f7fe fa61 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.hour);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6998      	ldr	r0, [r3, #24]
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	00d2      	lsls	r2, r2, #3
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	330a      	adds	r3, #10
 8006fe0:	b299      	uxth	r1, r3
 8006fe2:	78fa      	ldrb	r2, [r7, #3]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	4413      	add	r3, r2
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	3350      	adds	r3, #80	; 0x50
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f7fe fa4a 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.day);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6998      	ldr	r0, [r3, #24]
 8006ffe:	78fb      	ldrb	r3, [r7, #3]
 8007000:	b29b      	uxth	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	00d2      	lsls	r2, r2, #3
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	b29b      	uxth	r3, r3
 800700c:	330b      	adds	r3, #11
 800700e:	b299      	uxth	r1, r3
 8007010:	78fa      	ldrb	r2, [r7, #3]
 8007012:	4613      	mov	r3, r2
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	4413      	add	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	3350      	adds	r3, #80	; 0x50
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	4413      	add	r3, r2
 8007020:	3309      	adds	r3, #9
 8007022:	461a      	mov	r2, r3
 8007024:	f7fe fa33 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.month);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6998      	ldr	r0, [r3, #24]
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	b29b      	uxth	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	00d2      	lsls	r2, r2, #3
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	b29b      	uxth	r3, r3
 800703a:	330c      	adds	r3, #12
 800703c:	b299      	uxth	r1, r3
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	4613      	mov	r3, r2
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	4413      	add	r3, r2
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	3350      	adds	r3, #80	; 0x50
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4413      	add	r3, r2
 800704e:	330a      	adds	r3, #10
 8007050:	461a      	mov	r2, r3
 8007052:	f7fe fa1c 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.year);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6998      	ldr	r0, [r3, #24]
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	b29b      	uxth	r3, r3
 800705e:	461a      	mov	r2, r3
 8007060:	00d2      	lsls	r2, r2, #3
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	b29b      	uxth	r3, r3
 8007068:	330d      	adds	r3, #13
 800706a:	b299      	uxth	r1, r3
 800706c:	78fa      	ldrb	r2, [r7, #3]
 800706e:	4613      	mov	r3, r2
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	4413      	add	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	3350      	adds	r3, #80	; 0x50
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	4413      	add	r3, r2
 800707c:	330c      	adds	r3, #12
 800707e:	461a      	mov	r2, r3
 8007080:	f7fe fa05 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&TempSaved);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6998      	ldr	r0, [r3, #24]
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	3301      	adds	r3, #1
 800708c:	b29b      	uxth	r3, r3
 800708e:	461a      	mov	r2, r3
 8007090:	00d2      	lsls	r2, r2, #3
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	b29b      	uxth	r3, r3
 8007098:	f107 0208 	add.w	r2, r7, #8
 800709c:	4619      	mov	r1, r3
 800709e:	f7fe f9f6 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
	dryerPrograms[WichProgram].tempSetted = (float)TempSaved;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	78fc      	ldrb	r4, [r7, #3]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7f9 fe14 	bl	8000cd4 <__aeabi_ui2f>
 80070ac:	4601      	mov	r1, r0
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	4623      	mov	r3, r4
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	4423      	add	r3, r4
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	4413      	add	r3, r2
 80070ba:	3360      	adds	r3, #96	; 0x60
 80070bc:	6019      	str	r1, [r3, #0]
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd90      	pop	{r4, r7, pc}
	...

080070c8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>:


void SmartDryer::checkSettedProgramTime(uint8_t WichProgram, PROGRAM_STRUCURE ProgramToSet)
{
 80070c8:	b082      	sub	sp, #8
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	f107 0010 	add.w	r0, r7, #16
 80070d6:	e880 000c 	stmia.w	r0, {r2, r3}
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
	clock->getTimeDate(dryerPrograms[WichProgram].startTime);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6858      	ldr	r0, [r3, #4]
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	4613      	mov	r3, r2
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	4413      	add	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	3348      	adds	r3, #72	; 0x48
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4413      	add	r3, r2
 80070f2:	3306      	adds	r3, #6
 80070f4:	4619      	mov	r1, r3
 80070f6:	f7fc fc03 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	HAL_Delay(250);
 80070fa:	20fa      	movs	r0, #250	; 0xfa
 80070fc:	f005 f886 	bl	800c20c <HAL_Delay>
	clock->getTimeDate(dryerPrograms[WichProgram].endTime);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6858      	ldr	r0, [r3, #4]
 8007104:	78fa      	ldrb	r2, [r7, #3]
 8007106:	4613      	mov	r3, r2
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	4413      	add	r3, r2
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	3350      	adds	r3, #80	; 0x50
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	4413      	add	r3, r2
 8007114:	3306      	adds	r3, #6
 8007116:	4619      	mov	r1, r3
 8007118:	f7fc fbf2 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	dryerPrograms[WichProgram].startTime.minute = ProgramToSet.startTime.minute;
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	7cf8      	ldrb	r0, [r7, #19]
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	4413      	add	r3, r2
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	440b      	add	r3, r1
 800712c:	334f      	adds	r3, #79	; 0x4f
 800712e:	4602      	mov	r2, r0
 8007130:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 8007132:	78fa      	ldrb	r2, [r7, #3]
 8007134:	7ef8      	ldrb	r0, [r7, #27]
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	4613      	mov	r3, r2
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	4413      	add	r3, r2
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	440b      	add	r3, r1
 8007142:	3357      	adds	r3, #87	; 0x57
 8007144:	4602      	mov	r2, r0
 8007146:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = ProgramToSet.startTime.hour;
 8007148:	78fa      	ldrb	r2, [r7, #3]
 800714a:	7d38      	ldrb	r0, [r7, #20]
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	4413      	add	r3, r2
 8007154:	00db      	lsls	r3, r3, #3
 8007156:	440b      	add	r3, r1
 8007158:	3350      	adds	r3, #80	; 0x50
 800715a:	4602      	mov	r2, r0
 800715c:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = ProgramToSet.endTime.hour;
 800715e:	78fa      	ldrb	r2, [r7, #3]
 8007160:	7f38      	ldrb	r0, [r7, #28]
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	4613      	mov	r3, r2
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	4413      	add	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	440b      	add	r3, r1
 800716e:	3358      	adds	r3, #88	; 0x58
 8007170:	4602      	mov	r2, r0
 8007172:	701a      	strb	r2, [r3, #0]
	if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 8007174:	7d3a      	ldrb	r2, [r7, #20]
 8007176:	7f3b      	ldrb	r3, [r7, #28]
 8007178:	429a      	cmp	r2, r3
 800717a:	d94d      	bls.n	8007218 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x150>
	{
		if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 800717c:	78fa      	ldrb	r2, [r7, #3]
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	4613      	mov	r3, r2
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	4413      	add	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	440b      	add	r3, r1
 800718a:	3359      	adds	r3, #89	; 0x59
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	1c59      	adds	r1, r3, #1
 8007190:	78fa      	ldrb	r2, [r7, #3]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4613      	mov	r3, r2
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	4413      	add	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4403      	add	r3, r0
 800719e:	335a      	adds	r3, #90	; 0x5a
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	4a60      	ldr	r2, [pc, #384]	; (8007328 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 80071a6:	5cd3      	ldrb	r3, [r2, r3]
 80071a8:	4299      	cmp	r1, r3
 80071aa:	da15      	bge.n	80071d8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x110>
			dryerPrograms[WichProgram].endTime.day += 1;
 80071ac:	78fa      	ldrb	r2, [r7, #3]
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	4613      	mov	r3, r2
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	4413      	add	r3, r2
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	440b      	add	r3, r1
 80071ba:	3359      	adds	r3, #89	; 0x59
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	78fa      	ldrb	r2, [r7, #3]
 80071c0:	3301      	adds	r3, #1
 80071c2:	b2d8      	uxtb	r0, r3
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4413      	add	r3, r2
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	440b      	add	r3, r1
 80071d0:	3359      	adds	r3, #89	; 0x59
 80071d2:	4602      	mov	r2, r0
 80071d4:	701a      	strb	r2, [r3, #0]
//	dryerPrograms[WichProgram].programSetted = true;
//	if(eepromEnabled)
//	{
//		saveDryerProgram(WichProgram);
//	}
}
 80071d6:	e09f      	b.n	8007318 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			dryerPrograms[WichProgram].endTime.day = 1;
 80071d8:	78fa      	ldrb	r2, [r7, #3]
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	4613      	mov	r3, r2
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	4413      	add	r3, r2
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	440b      	add	r3, r1
 80071e6:	3359      	adds	r3, #89	; 0x59
 80071e8:	2201      	movs	r2, #1
 80071ea:	701a      	strb	r2, [r3, #0]
			dryerPrograms[WichProgram].endTime.month += 1;
 80071ec:	78fa      	ldrb	r2, [r7, #3]
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	4613      	mov	r3, r2
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	4413      	add	r3, r2
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	440b      	add	r3, r1
 80071fa:	335a      	adds	r3, #90	; 0x5a
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	3301      	adds	r3, #1
 8007202:	b2d8      	uxtb	r0, r3
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	4613      	mov	r3, r2
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	4413      	add	r3, r2
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	440b      	add	r3, r1
 8007210:	335a      	adds	r3, #90	; 0x5a
 8007212:	4602      	mov	r2, r0
 8007214:	701a      	strb	r2, [r3, #0]
}
 8007216:	e07f      	b.n	8007318 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
	else if(ProgramToSet.endTime.hour == ProgramToSet.startTime.hour)
 8007218:	7f3a      	ldrb	r2, [r7, #28]
 800721a:	7d3b      	ldrb	r3, [r7, #20]
 800721c:	429a      	cmp	r2, r3
 800721e:	d17b      	bne.n	8007318 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
		if(ProgramToSet.startTime.minute > ProgramToSet.endTime.minute)
 8007220:	7cfa      	ldrb	r2, [r7, #19]
 8007222:	7efb      	ldrb	r3, [r7, #27]
 8007224:	429a      	cmp	r2, r3
 8007226:	d977      	bls.n	8007318 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			if(ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute) < 50)
 8007228:	7cfb      	ldrb	r3, [r7, #19]
 800722a:	2b31      	cmp	r3, #49	; 0x31
 800722c:	d80b      	bhi.n	8007246 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x17e>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute);
 800722e:	78fa      	ldrb	r2, [r7, #3]
 8007230:	7cf8      	ldrb	r0, [r7, #19]
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	4613      	mov	r3, r2
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	4413      	add	r3, r2
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	440b      	add	r3, r1
 800723e:	3357      	adds	r3, #87	; 0x57
 8007240:	4602      	mov	r2, r0
 8007242:	701a      	strb	r2, [r3, #0]
}
 8007244:	e068      	b.n	8007318 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 8007246:	78fa      	ldrb	r2, [r7, #3]
 8007248:	7ef8      	ldrb	r0, [r7, #27]
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	4613      	mov	r3, r2
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	4413      	add	r3, r2
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	440b      	add	r3, r1
 8007256:	3357      	adds	r3, #87	; 0x57
 8007258:	4602      	mov	r2, r0
 800725a:	701a      	strb	r2, [r3, #0]
				dryerPrograms[WichProgram].endTime.hour = ProgramToSet.startTime.hour + 1;
 800725c:	7d3b      	ldrb	r3, [r7, #20]
 800725e:	78fa      	ldrb	r2, [r7, #3]
 8007260:	3301      	adds	r3, #1
 8007262:	b2d8      	uxtb	r0, r3
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	4413      	add	r3, r2
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	440b      	add	r3, r1
 8007270:	3358      	adds	r3, #88	; 0x58
 8007272:	4602      	mov	r2, r0
 8007274:	701a      	strb	r2, [r3, #0]
				if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 8007276:	7d3a      	ldrb	r2, [r7, #20]
 8007278:	7f3b      	ldrb	r3, [r7, #28]
 800727a:	429a      	cmp	r2, r3
 800727c:	d94c      	bls.n	8007318 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
					if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 800727e:	78fa      	ldrb	r2, [r7, #3]
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	4413      	add	r3, r2
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	440b      	add	r3, r1
 800728c:	3359      	adds	r3, #89	; 0x59
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	1c59      	adds	r1, r3, #1
 8007292:	78fa      	ldrb	r2, [r7, #3]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	4413      	add	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	4403      	add	r3, r0
 80072a0:	335a      	adds	r3, #90	; 0x5a
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	4a20      	ldr	r2, [pc, #128]	; (8007328 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 80072a8:	5cd3      	ldrb	r3, [r2, r3]
 80072aa:	4299      	cmp	r1, r3
 80072ac:	da15      	bge.n	80072da <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x212>
						dryerPrograms[WichProgram].endTime.day += 1;
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	4413      	add	r3, r2
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	440b      	add	r3, r1
 80072bc:	3359      	adds	r3, #89	; 0x59
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	78fa      	ldrb	r2, [r7, #3]
 80072c2:	3301      	adds	r3, #1
 80072c4:	b2d8      	uxtb	r0, r3
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	4613      	mov	r3, r2
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	4413      	add	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	440b      	add	r3, r1
 80072d2:	3359      	adds	r3, #89	; 0x59
 80072d4:	4602      	mov	r2, r0
 80072d6:	701a      	strb	r2, [r3, #0]
}
 80072d8:	e01e      	b.n	8007318 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
						dryerPrograms[WichProgram].endTime.day = 1;
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	6879      	ldr	r1, [r7, #4]
 80072de:	4613      	mov	r3, r2
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	4413      	add	r3, r2
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	440b      	add	r3, r1
 80072e8:	3359      	adds	r3, #89	; 0x59
 80072ea:	2201      	movs	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
						dryerPrograms[WichProgram].endTime.month += 1;
 80072ee:	78fa      	ldrb	r2, [r7, #3]
 80072f0:	6879      	ldr	r1, [r7, #4]
 80072f2:	4613      	mov	r3, r2
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	4413      	add	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	440b      	add	r3, r1
 80072fc:	335a      	adds	r3, #90	; 0x5a
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	78fa      	ldrb	r2, [r7, #3]
 8007302:	3301      	adds	r3, #1
 8007304:	b2d8      	uxtb	r0, r3
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4613      	mov	r3, r2
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	4413      	add	r3, r2
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	440b      	add	r3, r1
 8007312:	335a      	adds	r3, #90	; 0x5a
 8007314:	4602      	mov	r2, r0
 8007316:	701a      	strb	r2, [r3, #0]
}
 8007318:	bf00      	nop
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007322:	b002      	add	sp, #8
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	08018258 	.word	0x08018258

0800732c <_ZN10SmartDryer22serialComunicationCtrlEv>:

void SmartDryer::serialComunicationCtrl()
{
 800732c:	b5b0      	push	{r4, r5, r7, lr}
 800732e:	b0a0      	sub	sp, #128	; 0x80
 8007330:	af04      	add	r7, sp, #16
 8007332:	6078      	str	r0, [r7, #4]
	int16_t Command = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	bool TempFound = false;
 800733a:	2300      	movs	r3, #0
 800733c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	bool SetProgramTime = false;
 8007340:	2300      	movs	r3, #0
 8007342:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	float OldTemp = 0.0;
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t WichProgram = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	PROGRAM_STRUCURE ProgramToSet;
 8007352:	f107 030c 	add.w	r3, r7, #12
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	605a      	str	r2, [r3, #4]
 800735c:	609a      	str	r2, [r3, #8]
 800735e:	60da      	str	r2, [r3, #12]
 8007360:	611a      	str	r2, [r3, #16]
 8007362:	615a      	str	r2, [r3, #20]
	Command = externalCommand->receiveSerialCommand();
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	4618      	mov	r0, r3
 800736a:	f7fe fcaf 	bl	8005ccc <_ZN13SerialMessage20receiveSerialCommandEv>
 800736e:	4603      	mov	r3, r0
 8007370:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	if(Command != SerialMessage::NO_COMMANDS && Command != SerialMessage::INVALID_MESSAGE)
 8007374:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	f000 83c9 	beq.w	8007b12 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
 8007380:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007384:	f113 0f02 	cmn.w	r3, #2
 8007388:	f000 83c3 	beq.w	8007b12 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
	{
		statusParam->serialCommandReceived = true;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007390:	2201      	movs	r2, #1
 8007392:	729a      	strb	r2, [r3, #10]
		switch(Command)
 8007394:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007398:	3b0b      	subs	r3, #11
 800739a:	2bc7      	cmp	r3, #199	; 0xc7
 800739c:	f200 83af 	bhi.w	8007afe <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d2>
 80073a0:	a201      	add	r2, pc, #4	; (adr r2, 80073a8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7c>)
 80073a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a6:	bf00      	nop
 80073a8:	080076c9 	.word	0x080076c9
 80073ac:	0800773f 	.word	0x0800773f
 80073b0:	0800776f 	.word	0x0800776f
 80073b4:	0800779f 	.word	0x0800779f
 80073b8:	080077cf 	.word	0x080077cf
 80073bc:	080077ff 	.word	0x080077ff
 80073c0:	08007871 	.word	0x08007871
 80073c4:	080078a1 	.word	0x080078a1
 80073c8:	080078d1 	.word	0x080078d1
 80073cc:	08007901 	.word	0x08007901
 80073d0:	08007931 	.word	0x08007931
 80073d4:	080079a3 	.word	0x080079a3
 80073d8:	080079d3 	.word	0x080079d3
 80073dc:	08007a03 	.word	0x08007a03
 80073e0:	08007a33 	.word	0x08007a33
 80073e4:	08007a63 	.word	0x08007a63
 80073e8:	08007aff 	.word	0x08007aff
 80073ec:	08007aff 	.word	0x08007aff
 80073f0:	08007aff 	.word	0x08007aff
 80073f4:	08007aff 	.word	0x08007aff
 80073f8:	08007aff 	.word	0x08007aff
 80073fc:	08007aff 	.word	0x08007aff
 8007400:	08007aff 	.word	0x08007aff
 8007404:	08007aff 	.word	0x08007aff
 8007408:	08007aff 	.word	0x08007aff
 800740c:	08007aff 	.word	0x08007aff
 8007410:	08007aff 	.word	0x08007aff
 8007414:	08007aff 	.word	0x08007aff
 8007418:	08007aff 	.word	0x08007aff
 800741c:	08007aff 	.word	0x08007aff
 8007420:	08007aff 	.word	0x08007aff
 8007424:	08007aff 	.word	0x08007aff
 8007428:	08007aff 	.word	0x08007aff
 800742c:	08007aff 	.word	0x08007aff
 8007430:	08007aff 	.word	0x08007aff
 8007434:	08007aff 	.word	0x08007aff
 8007438:	08007aff 	.word	0x08007aff
 800743c:	08007aff 	.word	0x08007aff
 8007440:	08007aff 	.word	0x08007aff
 8007444:	08007aff 	.word	0x08007aff
 8007448:	08007aff 	.word	0x08007aff
 800744c:	08007aff 	.word	0x08007aff
 8007450:	08007aff 	.word	0x08007aff
 8007454:	08007aff 	.word	0x08007aff
 8007458:	08007aff 	.word	0x08007aff
 800745c:	08007aff 	.word	0x08007aff
 8007460:	08007aff 	.word	0x08007aff
 8007464:	08007aff 	.word	0x08007aff
 8007468:	08007aff 	.word	0x08007aff
 800746c:	08007aff 	.word	0x08007aff
 8007470:	08007aff 	.word	0x08007aff
 8007474:	08007aff 	.word	0x08007aff
 8007478:	08007aff 	.word	0x08007aff
 800747c:	08007aff 	.word	0x08007aff
 8007480:	08007aff 	.word	0x08007aff
 8007484:	08007aff 	.word	0x08007aff
 8007488:	08007aff 	.word	0x08007aff
 800748c:	08007aff 	.word	0x08007aff
 8007490:	08007aff 	.word	0x08007aff
 8007494:	08007aff 	.word	0x08007aff
 8007498:	08007aff 	.word	0x08007aff
 800749c:	08007aff 	.word	0x08007aff
 80074a0:	08007aff 	.word	0x08007aff
 80074a4:	08007aff 	.word	0x08007aff
 80074a8:	08007aff 	.word	0x08007aff
 80074ac:	08007aff 	.word	0x08007aff
 80074b0:	08007aff 	.word	0x08007aff
 80074b4:	08007aff 	.word	0x08007aff
 80074b8:	08007aff 	.word	0x08007aff
 80074bc:	08007aff 	.word	0x08007aff
 80074c0:	08007aff 	.word	0x08007aff
 80074c4:	08007aff 	.word	0x08007aff
 80074c8:	08007aff 	.word	0x08007aff
 80074cc:	08007aff 	.word	0x08007aff
 80074d0:	08007aff 	.word	0x08007aff
 80074d4:	08007aff 	.word	0x08007aff
 80074d8:	08007aff 	.word	0x08007aff
 80074dc:	08007aff 	.word	0x08007aff
 80074e0:	08007aff 	.word	0x08007aff
 80074e4:	08007aff 	.word	0x08007aff
 80074e8:	08007aff 	.word	0x08007aff
 80074ec:	08007aff 	.word	0x08007aff
 80074f0:	08007aff 	.word	0x08007aff
 80074f4:	08007aff 	.word	0x08007aff
 80074f8:	08007aff 	.word	0x08007aff
 80074fc:	08007aff 	.word	0x08007aff
 8007500:	08007aff 	.word	0x08007aff
 8007504:	08007aff 	.word	0x08007aff
 8007508:	08007aff 	.word	0x08007aff
 800750c:	08007aff 	.word	0x08007aff
 8007510:	08007aff 	.word	0x08007aff
 8007514:	08007aff 	.word	0x08007aff
 8007518:	08007aff 	.word	0x08007aff
 800751c:	08007aff 	.word	0x08007aff
 8007520:	08007aff 	.word	0x08007aff
 8007524:	08007aff 	.word	0x08007aff
 8007528:	08007aff 	.word	0x08007aff
 800752c:	08007aff 	.word	0x08007aff
 8007530:	08007aff 	.word	0x08007aff
 8007534:	08007aff 	.word	0x08007aff
 8007538:	08007aff 	.word	0x08007aff
 800753c:	08007aff 	.word	0x08007aff
 8007540:	08007aff 	.word	0x08007aff
 8007544:	08007aff 	.word	0x08007aff
 8007548:	08007aff 	.word	0x08007aff
 800754c:	08007aff 	.word	0x08007aff
 8007550:	08007aff 	.word	0x08007aff
 8007554:	08007aff 	.word	0x08007aff
 8007558:	08007aff 	.word	0x08007aff
 800755c:	08007aff 	.word	0x08007aff
 8007560:	08007aff 	.word	0x08007aff
 8007564:	08007aff 	.word	0x08007aff
 8007568:	08007aff 	.word	0x08007aff
 800756c:	08007aff 	.word	0x08007aff
 8007570:	08007aff 	.word	0x08007aff
 8007574:	08007aff 	.word	0x08007aff
 8007578:	08007aff 	.word	0x08007aff
 800757c:	08007aff 	.word	0x08007aff
 8007580:	08007aff 	.word	0x08007aff
 8007584:	08007aff 	.word	0x08007aff
 8007588:	08007aff 	.word	0x08007aff
 800758c:	08007aff 	.word	0x08007aff
 8007590:	08007aff 	.word	0x08007aff
 8007594:	08007aff 	.word	0x08007aff
 8007598:	08007aff 	.word	0x08007aff
 800759c:	08007aff 	.word	0x08007aff
 80075a0:	08007aff 	.word	0x08007aff
 80075a4:	08007aff 	.word	0x08007aff
 80075a8:	08007aff 	.word	0x08007aff
 80075ac:	08007aff 	.word	0x08007aff
 80075b0:	08007aff 	.word	0x08007aff
 80075b4:	08007aff 	.word	0x08007aff
 80075b8:	08007aff 	.word	0x08007aff
 80075bc:	08007aff 	.word	0x08007aff
 80075c0:	08007aff 	.word	0x08007aff
 80075c4:	08007aff 	.word	0x08007aff
 80075c8:	08007aff 	.word	0x08007aff
 80075cc:	08007aff 	.word	0x08007aff
 80075d0:	08007aff 	.word	0x08007aff
 80075d4:	08007aff 	.word	0x08007aff
 80075d8:	08007aff 	.word	0x08007aff
 80075dc:	08007aff 	.word	0x08007aff
 80075e0:	08007aff 	.word	0x08007aff
 80075e4:	08007aff 	.word	0x08007aff
 80075e8:	08007aff 	.word	0x08007aff
 80075ec:	08007aff 	.word	0x08007aff
 80075f0:	08007aff 	.word	0x08007aff
 80075f4:	08007aff 	.word	0x08007aff
 80075f8:	08007aff 	.word	0x08007aff
 80075fc:	08007aff 	.word	0x08007aff
 8007600:	08007aff 	.word	0x08007aff
 8007604:	08007aff 	.word	0x08007aff
 8007608:	08007aff 	.word	0x08007aff
 800760c:	08007aff 	.word	0x08007aff
 8007610:	08007aff 	.word	0x08007aff
 8007614:	08007aff 	.word	0x08007aff
 8007618:	08007aff 	.word	0x08007aff
 800761c:	08007aff 	.word	0x08007aff
 8007620:	08007aff 	.word	0x08007aff
 8007624:	08007aff 	.word	0x08007aff
 8007628:	08007aff 	.word	0x08007aff
 800762c:	08007aff 	.word	0x08007aff
 8007630:	08007aff 	.word	0x08007aff
 8007634:	08007aff 	.word	0x08007aff
 8007638:	08007aff 	.word	0x08007aff
 800763c:	08007aff 	.word	0x08007aff
 8007640:	08007aff 	.word	0x08007aff
 8007644:	08007aff 	.word	0x08007aff
 8007648:	08007aff 	.word	0x08007aff
 800764c:	08007aff 	.word	0x08007aff
 8007650:	08007aff 	.word	0x08007aff
 8007654:	08007aff 	.word	0x08007aff
 8007658:	08007aff 	.word	0x08007aff
 800765c:	08007aff 	.word	0x08007aff
 8007660:	08007aff 	.word	0x08007aff
 8007664:	08007aff 	.word	0x08007aff
 8007668:	08007aff 	.word	0x08007aff
 800766c:	08007aff 	.word	0x08007aff
 8007670:	08007aff 	.word	0x08007aff
 8007674:	08007aff 	.word	0x08007aff
 8007678:	08007aff 	.word	0x08007aff
 800767c:	08007aff 	.word	0x08007aff
 8007680:	08007aff 	.word	0x08007aff
 8007684:	08007aff 	.word	0x08007aff
 8007688:	08007aff 	.word	0x08007aff
 800768c:	08007aff 	.word	0x08007aff
 8007690:	08007aff 	.word	0x08007aff
 8007694:	08007aff 	.word	0x08007aff
 8007698:	08007aff 	.word	0x08007aff
 800769c:	08007aff 	.word	0x08007aff
 80076a0:	08007ad7 	.word	0x08007ad7
 80076a4:	08007ae1 	.word	0x08007ae1
 80076a8:	08007aeb 	.word	0x08007aeb
 80076ac:	08007af5 	.word	0x08007af5
 80076b0:	08007aff 	.word	0x08007aff
 80076b4:	08007aff 	.word	0x08007aff
 80076b8:	08007aff 	.word	0x08007aff
 80076bc:	08007aff 	.word	0x08007aff
 80076c0:	08007aff 	.word	0x08007aff
 80076c4:	08007aff 	.word	0x08007aff
		{
			case SerialMessage::SET_TEMP:
				OldTemp = statusParam->temperatureSetted;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fbdd 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 80076da:	4602      	mov	r2, r0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80076e0:	4610      	mov	r0, r2
 80076e2:	f7f9 faf7 	bl	8000cd4 <__aeabi_ui2f>
 80076e6:	4603      	mov	r3, r0
 80076e8:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 80076ea:	2300      	movs	r3, #0
 80076ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80076ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076f0:	2b0c      	cmp	r3, #12
 80076f2:	dc17      	bgt.n	8007724 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7f9 fc92 	bl	8001024 <__aeabi_f2uiz>
 8007700:	4603      	mov	r3, r0
 8007702:	b2da      	uxtb	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800770a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800770c:	440b      	add	r3, r1
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d103      	bne.n	800771c <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f0>
					{
						TempFound = true;
 8007714:	2301      	movs	r3, #1
 8007716:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 800771a:	e003      	b.n	8007724 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				for(int i = 0; i < NTemps; i++)
 800771c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800771e:	3301      	adds	r3, #1
 8007720:	66bb      	str	r3, [r7, #104]	; 0x68
 8007722:	e7e4      	b.n	80076ee <_ZN10SmartDryer22serialComunicationCtrlEv+0x3c2>
					}
				}
				if(!TempFound)
 8007724:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007728:	f083 0301 	eor.w	r3, r3, #1
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 81e7 	beq.w	8007b02 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
				{
					statusParam->temperatureSetted = OldTemp;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800773a:	605a      	str	r2, [r3, #4]
				}
				break;
 800773c:	e1e1      	b.n	8007b02 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
			case SerialMessage::SET_START_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	f107 030c 	add.w	r3, r7, #12
 8007746:	3302      	adds	r3, #2
 8007748:	4619      	mov	r1, r3
 800774a:	4610      	mov	r0, r2
 800774c:	f7fc f8d8 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe fb9d 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 800775a:	4603      	mov	r3, r0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_1;
 8007760:	2300      	movs	r3, #0
 8007762:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 800776c:	e1d0      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	f107 030c 	add.w	r3, r7, #12
 8007776:	3302      	adds	r3, #2
 8007778:	4619      	mov	r1, r3
 800777a:	4610      	mov	r0, r2
 800777c:	f7fc f8c0 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe fb85 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 800778a:	4603      	mov	r3, r0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_1;
 8007790:	2300      	movs	r3, #0
 8007792:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 800779c:	e1b8      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	f107 030c 	add.w	r3, r7, #12
 80077a6:	330a      	adds	r3, #10
 80077a8:	4619      	mov	r1, r3
 80077aa:	4610      	mov	r0, r2
 80077ac:	f7fc f8a8 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fe fb6d 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 80077ba:	4603      	mov	r3, r0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_1;
 80077c0:	2300      	movs	r3, #0
 80077c2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80077cc:	e1a0      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	f107 030c 	add.w	r3, r7, #12
 80077d6:	330a      	adds	r3, #10
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f7fc f890 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fe fb55 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 80077ea:	4603      	mov	r3, r0
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_1;
 80077f0:	2300      	movs	r3, #0
 80077f2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80077f6:	2301      	movs	r3, #1
 80077f8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80077fc:	e188      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_1:
				OldTemp = dryerPrograms[DRYER_PROGRAM_1].tempSetted;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007802:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe fb43 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 800780e:	4602      	mov	r2, r0
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007814:	4610      	mov	r0, r2
 8007816:	f7f9 fa5d 	bl	8000cd4 <__aeabi_ui2f>
 800781a:	4603      	mov	r3, r0
 800781c:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 800781e:	2300      	movs	r3, #0
 8007820:	667b      	str	r3, [r7, #100]	; 0x64
 8007822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007824:	2b0c      	cmp	r3, #12
 8007826:	dc17      	bgt.n	8007858 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	4618      	mov	r0, r3
 8007830:	f7f9 fbf8 	bl	8001024 <__aeabi_f2uiz>
 8007834:	4603      	mov	r3, r0
 8007836:	b2da      	uxtb	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800783e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007840:	440b      	add	r3, r1
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d103      	bne.n	8007850 <_ZN10SmartDryer22serialComunicationCtrlEv+0x524>
					{
						TempFound = true;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 800784e:	e003      	b.n	8007858 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				for(int i = 0; i < NTemps; i++)
 8007850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007852:	3301      	adds	r3, #1
 8007854:	667b      	str	r3, [r7, #100]	; 0x64
 8007856:	e7e4      	b.n	8007822 <_ZN10SmartDryer22serialComunicationCtrlEv+0x4f6>
					}
				}
				if(!TempFound)
 8007858:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800785c:	f083 0301 	eor.w	r3, r3, #1
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 814f 	beq.w	8007b06 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
				{
					dryerPrograms[DRYER_PROGRAM_1].tempSetted = OldTemp;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800786c:	661a      	str	r2, [r3, #96]	; 0x60
				}
				break;
 800786e:	e14a      	b.n	8007b06 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
			case SerialMessage::SET_START_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	f107 030c 	add.w	r3, r7, #12
 8007878:	3302      	adds	r3, #2
 800787a:	4619      	mov	r1, r3
 800787c:	4610      	mov	r0, r2
 800787e:	f7fc f83f 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fb04 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 800788c:	4603      	mov	r3, r0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_2;
 8007892:	2301      	movs	r3, #1
 8007894:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007898:	2301      	movs	r3, #1
 800789a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 800789e:	e137      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	f107 030c 	add.w	r3, r7, #12
 80078a8:	3302      	adds	r3, #2
 80078aa:	4619      	mov	r1, r3
 80078ac:	4610      	mov	r0, r2
 80078ae:	f7fc f827 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe faec 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 80078bc:	4603      	mov	r3, r0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_2;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80078ce:	e11f      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	f107 030c 	add.w	r3, r7, #12
 80078d8:	330a      	adds	r3, #10
 80078da:	4619      	mov	r1, r3
 80078dc:	4610      	mov	r0, r2
 80078de:	f7fc f80f 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fad4 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 80078ec:	4603      	mov	r3, r0
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_2;
 80078f2:	2301      	movs	r3, #1
 80078f4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80078fe:	e107      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	f107 030c 	add.w	r3, r7, #12
 8007908:	330a      	adds	r3, #10
 800790a:	4619      	mov	r1, r3
 800790c:	4610      	mov	r0, r2
 800790e:	f7fb fff7 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	4618      	mov	r0, r3
 8007918:	f7fe fabc 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 800791c:	4603      	mov	r3, r0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_2;
 8007922:	2301      	movs	r3, #1
 8007924:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007928:	2301      	movs	r3, #1
 800792a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 800792e:	e0ef      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_2:
				OldTemp = dryerPrograms[DRYER_PROGRAM_2].tempSetted;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007934:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe faaa 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 8007940:	4602      	mov	r2, r0
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007946:	4610      	mov	r0, r2
 8007948:	f7f9 f9c4 	bl	8000cd4 <__aeabi_ui2f>
 800794c:	4603      	mov	r3, r0
 800794e:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007950:	2300      	movs	r3, #0
 8007952:	663b      	str	r3, [r7, #96]	; 0x60
 8007954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007956:	2b0c      	cmp	r3, #12
 8007958:	dc17      	bgt.n	800798a <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	4618      	mov	r0, r3
 8007962:	f7f9 fb5f 	bl	8001024 <__aeabi_f2uiz>
 8007966:	4603      	mov	r3, r0
 8007968:	b2da      	uxtb	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8007970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007972:	440b      	add	r3, r1
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d103      	bne.n	8007982 <_ZN10SmartDryer22serialComunicationCtrlEv+0x656>
					{
						TempFound = true;
 800797a:	2301      	movs	r3, #1
 800797c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007980:	e003      	b.n	800798a <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				for(int i = 0; i < NTemps; i++)
 8007982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007984:	3301      	adds	r3, #1
 8007986:	663b      	str	r3, [r7, #96]	; 0x60
 8007988:	e7e4      	b.n	8007954 <_ZN10SmartDryer22serialComunicationCtrlEv+0x628>
					}
				}
				if(!TempFound)
 800798a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800798e:	f083 0301 	eor.w	r3, r3, #1
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 80b8 	beq.w	8007b0a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
				{
					dryerPrograms[DRYER_PROGRAM_2].tempSetted = OldTemp;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800799e:	679a      	str	r2, [r3, #120]	; 0x78
				}
				break;
 80079a0:	e0b3      	b.n	8007b0a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
			case SerialMessage::SET_START_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	f107 030c 	add.w	r3, r7, #12
 80079aa:	3302      	adds	r3, #2
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f7fb ffa6 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fa6b 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 80079be:	4603      	mov	r3, r0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_3;
 80079c4:	2302      	movs	r3, #2
 80079c6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80079ca:	2301      	movs	r3, #1
 80079cc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80079d0:	e09e      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	f107 030c 	add.w	r3, r7, #12
 80079da:	3302      	adds	r3, #2
 80079dc:	4619      	mov	r1, r3
 80079de:	4610      	mov	r0, r2
 80079e0:	f7fb ff8e 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe fa53 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 80079ee:	4603      	mov	r3, r0
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_3;
 80079f4:	2302      	movs	r3, #2
 80079f6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a00:	e086      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	f107 030c 	add.w	r3, r7, #12
 8007a0a:	330a      	adds	r3, #10
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f7fb ff76 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fe fa3b 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_3;
 8007a24:	2302      	movs	r3, #2
 8007a26:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a30:	e06e      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	f107 030c 	add.w	r3, r7, #12
 8007a3a:	330a      	adds	r3, #10
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4610      	mov	r0, r2
 8007a40:	f7fb ff5e 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fa23 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_3;
 8007a54:	2302      	movs	r3, #2
 8007a56:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a60:	e056      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_3:
				OldTemp = dryerPrograms[DRYER_PROGRAM_3].tempSetted;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a68:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe fa10 	bl	8005e94 <_ZN13SerialMessage14getValueSettedEv>
 8007a74:	4602      	mov	r2, r0
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7f9 f92a 	bl	8000cd4 <__aeabi_ui2f>
 8007a80:	4603      	mov	r3, r0
 8007a82:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007a84:	2300      	movs	r3, #0
 8007a86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a8a:	2b0c      	cmp	r3, #12
 8007a8c:	dc17      	bgt.n	8007abe <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7f9 fac5 	bl	8001024 <__aeabi_f2uiz>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8007aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa6:	440b      	add	r3, r1
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d103      	bne.n	8007ab6 <_ZN10SmartDryer22serialComunicationCtrlEv+0x78a>
					{
						TempFound = true;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007ab4:	e003      	b.n	8007abe <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				for(int i = 0; i < NTemps; i++)
 8007ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab8:	3301      	adds	r3, #1
 8007aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007abc:	e7e4      	b.n	8007a88 <_ZN10SmartDryer22serialComunicationCtrlEv+0x75c>
					}
				}
				if(!TempFound)
 8007abe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007ac2:	f083 0301 	eor.w	r3, r3, #1
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d020      	beq.n	8007b0e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>
				{
					dryerPrograms[DRYER_PROGRAM_3].tempSetted = OldTemp;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				}
				break;
 8007ad4:	e01b      	b.n	8007b0e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>


			case SerialMessage::DRYER_ON:
				statusParam->dryerOn = true;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ada:	2201      	movs	r2, #1
 8007adc:	701a      	strb	r2, [r3, #0]
				break;
 8007ade:	e017      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::DRYER_OFF:
				statusParam->dryerOn = false;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
				break;
 8007ae8:	e012      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_ON:
				statusParam->fanOn = true;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aee:	2201      	movs	r2, #1
 8007af0:	709a      	strb	r2, [r3, #2]
				break;
 8007af2:	e00d      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_OFF:
				statusParam->fanOn = false;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af8:	2200      	movs	r2, #0
 8007afa:	709a      	strb	r2, [r3, #2]
				break;
 8007afc:	e008      	b.n	8007b10 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
				break;
			case SerialMessage::STOP_PROG_3:
				break;

			default:
				break;
 8007afe:	bf00      	nop
 8007b00:	e038      	b.n	8007b74 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007b02:	bf00      	nop
 8007b04:	e036      	b.n	8007b74 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007b06:	bf00      	nop
 8007b08:	e034      	b.n	8007b74 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007b0a:	bf00      	nop
 8007b0c:	e032      	b.n	8007b74 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007b0e:	bf00      	nop
		}
 8007b10:	e030      	b.n	8007b74 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
	}
	else if(Command == SerialMessage::INVALID_MESSAGE)
 8007b12:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007b16:	f113 0f02 	cmn.w	r3, #2
 8007b1a:	d127      	bne.n	8007b6c <_ZN10SmartDryer22serialComunicationCtrlEv+0x840>
	{
		externalCommand->sendMessage("Comando invalido, ricevuto: " + externalCommand->getCommandReceived());
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b28:	4611      	mov	r1, r2
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe f9c4 	bl	8005eb8 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>
 8007b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b34:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007b38:	4925      	ldr	r1, [pc, #148]	; (8007bd0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x8a4>)
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fc fadc 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8007b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b44:	2201      	movs	r2, #1
 8007b46:	4619      	mov	r1, r3
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f7fd fe91 	bl	8005870 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8007b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b52:	4618      	mov	r0, r3
 8007b54:	f009 f8ef 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007b58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f009 f8ea 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		statusParam->serialCommandReceived = true;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b66:	2201      	movs	r2, #1
 8007b68:	729a      	strb	r2, [r3, #10]
 8007b6a:	e003      	b.n	8007b74 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
	}
	else
	{
		statusParam->serialCommandReceived = false;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b70:	2200      	movs	r2, #0
 8007b72:	729a      	strb	r2, [r3, #10]
	}
	if(SetProgramTime)
 8007b74:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d024      	beq.n	8007bc6 <_ZN10SmartDryer22serialComunicationCtrlEv+0x89a>
	{
		checkSettedProgramTime(WichProgram, ProgramToSet);
 8007b7c:	f897 506d 	ldrb.w	r5, [r7, #109]	; 0x6d
 8007b80:	466c      	mov	r4, sp
 8007b82:	f107 0314 	add.w	r3, r7, #20
 8007b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007b8c:	f107 030c 	add.w	r3, r7, #12
 8007b90:	cb0c      	ldmia	r3, {r2, r3}
 8007b92:	4629      	mov	r1, r5
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff fa97 	bl	80070c8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
		dryerPrograms[WichProgram].programSetted = true;
 8007b9a:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	4413      	add	r3, r2
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	440b      	add	r3, r1
 8007baa:	334c      	adds	r3, #76	; 0x4c
 8007bac:	2201      	movs	r2, #1
 8007bae:	701a      	strb	r2, [r3, #0]
		if(eepromEnabled)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d005      	beq.n	8007bc6 <_ZN10SmartDryer22serialComunicationCtrlEv+0x89a>
		{
			saveDryerProgram(WichProgram);
 8007bba:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7fe ffbb 	bl	8006b3c <_ZN10SmartDryer16saveDryerProgramEh>
		}
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	3770      	adds	r7, #112	; 0x70
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	080151b8 	.word	0x080151b8

08007bd4 <_ZN10SmartDryer7navMenuEv>:



void SmartDryer::navMenu()
{
 8007bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd8:	b0a6      	sub	sp, #152	; 0x98
 8007bda:	af08      	add	r7, sp, #32
 8007bdc:	6078      	str	r0, [r7, #4]
	bool ExitNavMenu = false;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	MENU_STRUCTURE *ActualMenu = mainMenu;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bea:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t MenuSel = MAIN_MENU;
 8007bec:	2300      	movs	r3, #0
 8007bee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	showHelpMessageTimer->restart();
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fb fcb3 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	String Time = "", Date = "";
 8007bfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c00:	4618      	mov	r0, r3
 8007c02:	f008 ff67 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8007c06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007c0a:	f107 0320 	add.w	r3, r7, #32
 8007c0e:	49b9      	ldr	r1, [pc, #740]	; (8007ef4 <_ZN10SmartDryer7navMenuEv+0x320>)
 8007c10:	4618      	mov	r0, r3
 8007c12:	f009 fa27 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007c16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f008 ff5b 	bl	8010ad6 <_ZNSaIcED1Ev>
 8007c20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c24:	4618      	mov	r0, r3
 8007c26:	f008 ff55 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8007c2a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007c2e:	f107 0308 	add.w	r3, r7, #8
 8007c32:	49b0      	ldr	r1, [pc, #704]	; (8007ef4 <_ZN10SmartDryer7navMenuEv+0x320>)
 8007c34:	4618      	mov	r0, r3
 8007c36:	f009 fa15 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007c3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f008 ff49 	bl	8010ad6 <_ZNSaIcED1Ev>
	checkSerialDeviceTimer->restart();
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fb fc8a 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	while(!ExitNavMenu)
 8007c4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f040 82bf 	bne.w	80081d6 <_ZN10SmartDryer7navMenuEv+0x602>
	{
		uint8_t WichKey = DryerKey::NO_KEY;
 8007c58:	2308      	movs	r3, #8
 8007c5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		display->clearFrameBuffer();
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fc feed 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8007c68:	f107 0208 	add.w	r2, r7, #8
 8007c6c:	f107 0320 	add.w	r3, r7, #32
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7fe fe6b 	bl	800694e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(ActualMenu->menuTitle, NHDST7565_LCD::CENTER_POS, MENU_TITLE_YPOS, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681c      	ldr	r4, [r3, #0]
 8007c7c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c82:	4611      	mov	r1, r2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f009 f9ba 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007c92:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	2307      	movs	r3, #7
 8007c9a:	2283      	movs	r2, #131	; 0x83
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f7fc ff14 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007ca2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f009 f845 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ActualMenu->maxMenuLines = display->drawMenuList(ActualMenu->XPos, ActualMenu->YPos, ActualMenu->topItemPos,
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	603b      	str	r3, [r7, #0]
 8007cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cb4:	f893 c01c 	ldrb.w	ip, [r3, #28]
 8007cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cba:	f893 e01d 	ldrb.w	lr, [r3, #29]
 8007cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cc0:	f893 8024 	ldrb.w	r8, [r3, #36]	; 0x24
 8007cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007cca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ccc:	6992      	ldr	r2, [r2, #24]
 8007cce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007cd0:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8007cd4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007cd6:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 8007cda:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8007cdc:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 8007ce0:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8007ce2:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8007ce4:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8007ce6:	6a36      	ldr	r6, [r6, #32]
 8007ce8:	9606      	str	r6, [sp, #24]
 8007cea:	9505      	str	r5, [sp, #20]
 8007cec:	9404      	str	r4, [sp, #16]
 8007cee:	9003      	str	r0, [sp, #12]
 8007cf0:	9102      	str	r1, [sp, #8]
 8007cf2:	9201      	str	r2, [sp, #4]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4643      	mov	r3, r8
 8007cf8:	4672      	mov	r2, lr
 8007cfa:	4661      	mov	r1, ip
 8007cfc:	6838      	ldr	r0, [r7, #0]
 8007cfe:	f7fc ff27 	bl	8004b50 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>
 8007d02:	4603      	mov	r3, r0
 8007d04:	461a      	mov	r2, r3
 8007d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				ActualMenu->itemSelected, ActualMenu->menuVoices, ActualMenu->maxMenuItems,
				ActualMenu->withChebox, ActualMenu->menuSelected, ActualMenu->itemsChecked, ActualMenu->menuFont);
		if(statusParam->serialDeviceAttached)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d10:	7a5b      	ldrb	r3, [r3, #9]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d008      	beq.n	8007d28 <_ZN10SmartDryer7navMenuEv+0x154>
		{
			display->drawBox(50, 0, 6, 6);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	2306      	movs	r3, #6
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	2306      	movs	r3, #6
 8007d20:	2200      	movs	r2, #0
 8007d22:	2132      	movs	r1, #50	; 0x32
 8007d24:	f7fc feb5 	bl	8004a92 <_ZN13NHDST7565_LCD7drawBoxEhhhh>
//			{
//				showHelpMessageTimer->restart();
//			}
//		}

		display->sendFrameBuffer();
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fc fe95 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		WichKey = keyboard->checkKey();
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fd fc9a 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		switch(WichKey)
 8007d42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d46:	2b07      	cmp	r3, #7
 8007d48:	f200 81c4 	bhi.w	80080d4 <_ZN10SmartDryer7navMenuEv+0x500>
 8007d4c:	a201      	add	r2, pc, #4	; (adr r2, 8007d54 <_ZN10SmartDryer7navMenuEv+0x180>)
 8007d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d52:	bf00      	nop
 8007d54:	08007d75 	.word	0x08007d75
 8007d58:	08007da3 	.word	0x08007da3
 8007d5c:	08007dd3 	.word	0x08007dd3
 8007d60:	08007fe7 	.word	0x08007fe7
 8007d64:	08007d75 	.word	0x08007d75
 8007d68:	08007da3 	.word	0x08007da3
 8007d6c:	08008091 	.word	0x08008091
 8007d70:	080080d5 	.word	0x080080d5
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(ActualMenu->itemSelected > 0)
 8007d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d008      	beq.n	8007d90 <_ZN10SmartDryer7navMenuEv+0x1bc>
					ActualMenu->itemSelected--;
 8007d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
				break;
 8007d8e:	e1a4      	b.n	80080da <_ZN10SmartDryer7navMenuEv+0x506>
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
 8007d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d92:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8007da0:	e19b      	b.n	80080da <_ZN10SmartDryer7navMenuEv+0x506>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(ActualMenu->itemSelected < ActualMenu->maxMenuItems - 1)
 8007da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007da4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007da8:	461a      	mov	r2, r3
 8007daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dac:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007db0:	3b01      	subs	r3, #1
 8007db2:	429a      	cmp	r2, r3
 8007db4:	da08      	bge.n	8007dc8 <_ZN10SmartDryer7navMenuEv+0x1f4>
					ActualMenu->itemSelected++;
 8007db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007db8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = 0;
				break;
 8007dc6:	e188      	b.n	80080da <_ZN10SmartDryer7navMenuEv+0x506>
					ActualMenu->itemSelected = 0;
 8007dc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8007dd0:	e183      	b.n	80080da <_ZN10SmartDryer7navMenuEv+0x506>
			case DryerKey::LEFT_KEY:
				switch(MenuSel)
 8007dd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007dd6:	2b07      	cmp	r3, #7
 8007dd8:	f000 80db 	beq.w	8007f92 <_ZN10SmartDryer7navMenuEv+0x3be>
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	f000 80e4 	beq.w	8007faa <_ZN10SmartDryer7navMenuEv+0x3d6>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d000      	beq.n	8007de8 <_ZN10SmartDryer7navMenuEv+0x214>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
							ExitNavMenu = true;
						}
						break;
					default:
						break;
 8007de6:	e0fd      	b.n	8007fe4 <_ZN10SmartDryer7navMenuEv+0x410>
						switch(ActualMenu->itemSelected + 1)
 8007de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007dee:	3301      	adds	r3, #1
 8007df0:	3b01      	subs	r3, #1
 8007df2:	2b08      	cmp	r3, #8
 8007df4:	d85c      	bhi.n	8007eb0 <_ZN10SmartDryer7navMenuEv+0x2dc>
 8007df6:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <_ZN10SmartDryer7navMenuEv+0x228>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e21 	.word	0x08007e21
 8007e00:	08007e31 	.word	0x08007e31
 8007e04:	08007e41 	.word	0x08007e41
 8007e08:	08007e51 	.word	0x08007e51
 8007e0c:	08007e61 	.word	0x08007e61
 8007e10:	08007e71 	.word	0x08007e71
 8007e14:	08007e81 	.word	0x08007e81
 8007e18:	08007e91 	.word	0x08007e91
 8007e1c:	08007ea1 	.word	0x08007ea1
								MenuSel = THERMO_CTRL;
 8007e20:	2301      	movs	r3, #1
 8007e22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = thermoMenuCtrl;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007e2c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007e2e:	e040      	b.n	8007eb2 <_ZN10SmartDryer7navMenuEv+0x2de>
								MenuSel = FAN_CTRL;
 8007e30:	2302      	movs	r3, #2
 8007e32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = fanMenuCtrl;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e3c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007e3e:	e038      	b.n	8007eb2 <_ZN10SmartDryer7navMenuEv+0x2de>
								MenuSel = TEMP_CTRL;
 8007e40:	2303      	movs	r3, #3
 8007e42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = tempMenuCtrl;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007e4c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007e4e:	e030      	b.n	8007eb2 <_ZN10SmartDryer7navMenuEv+0x2de>
								MenuSel = START_DRYER_CTRL;
 8007e50:	2304      	movs	r3, #4
 8007e52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startDryerMenu;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007e5c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007e5e:	e028      	b.n	8007eb2 <_ZN10SmartDryer7navMenuEv+0x2de>
								screen = CHANGE_TIME;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
								ExitNavMenu = true;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8007e6e:	e020      	b.n	8007eb2 <_ZN10SmartDryer7navMenuEv+0x2de>
								screen = CHANGE_DATE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
								ExitNavMenu = true;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8007e7e:	e018      	b.n	8007eb2 <_ZN10SmartDryer7navMenuEv+0x2de>
								MenuSel = CHANGE_PROGRAMS_LIST;
 8007e80:	2307      	movs	r3, #7
 8007e82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = changeProgramsMenu;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007e8c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007e8e:	e010      	b.n	8007eb2 <_ZN10SmartDryer7navMenuEv+0x2de>
								MenuSel = START_PROGRAMS_LIST;
 8007e90:	2308      	movs	r3, #8
 8007e92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startProgramsMenu;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007e9c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007e9e:	e008      	b.n	8007eb2 <_ZN10SmartDryer7navMenuEv+0x2de>
								screen = SHOW_INFO;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2203      	movs	r2, #3
 8007ea4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
								ExitNavMenu = true;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8007eae:	e000      	b.n	8007eb2 <_ZN10SmartDryer7navMenuEv+0x2de>
								break;
 8007eb0:	bf00      	nop
						if(ActualMenu->withChebox)
 8007eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 8090 	beq.w	8007fde <_ZN10SmartDryer7navMenuEv+0x40a>
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ec4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	da09      	bge.n	8007ee4 <_ZN10SmartDryer7navMenuEv+0x310>
								ActualMenu->itemsChecked[i] = false;
 8007ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ed6:	4413      	add	r3, r2
 8007ed8:	2200      	movs	r2, #0
 8007eda:	701a      	strb	r2, [r3, #0]
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ede:	3301      	adds	r3, #1
 8007ee0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ee2:	e7ee      	b.n	8007ec2 <_ZN10SmartDryer7navMenuEv+0x2ee>
							switch(ActualMenu->paramType)
 8007ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d004      	beq.n	8007ef8 <_ZN10SmartDryer7navMenuEv+0x324>
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d01b      	beq.n	8007f2a <_ZN10SmartDryer7navMenuEv+0x356>
									break;
 8007ef2:	e04d      	b.n	8007f90 <_ZN10SmartDryer7navMenuEv+0x3bc>
 8007ef4:	080151d8 	.word	0x080151d8
									if(*(bool *)ActualMenu->paramAssociated)
 8007ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <_ZN10SmartDryer7navMenuEv+0x342>
										ActualMenu->itemsChecked[0] = false;
 8007f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = true;
 8007f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0e:	3301      	adds	r3, #1
 8007f10:	2201      	movs	r2, #1
 8007f12:	701a      	strb	r2, [r3, #0]
									break;
 8007f14:	e03c      	b.n	8007f90 <_ZN10SmartDryer7navMenuEv+0x3bc>
										ActualMenu->itemsChecked[0] = true;
 8007f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = false;
 8007f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f22:	3301      	adds	r3, #1
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
									break;
 8007f28:	e032      	b.n	8007f90 <_ZN10SmartDryer7navMenuEv+0x3bc>
									switch(MenuSel)
 8007f2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d000      	beq.n	8007f34 <_ZN10SmartDryer7navMenuEv+0x360>
											break;
 8007f32:	e02c      	b.n	8007f8e <_ZN10SmartDryer7navMenuEv+0x3ba>
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007f34:	2300      	movs	r3, #0
 8007f36:	667b      	str	r3, [r7, #100]	; 0x64
 8007f38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f3a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007f3e:	461a      	mov	r2, r3
 8007f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f42:	4293      	cmp	r3, r2
 8007f44:	da22      	bge.n	8007f8c <_ZN10SmartDryer7navMenuEv+0x3b8>
												uint32_t TempSetted = (uint32_t)*(float *)ActualMenu->paramAssociated;
 8007f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7f9 f869 	bl	8001024 <__aeabi_f2uiz>
 8007f52:	4603      	mov	r3, r0
 8007f54:	65bb      	str	r3, [r7, #88]	; 0x58
												if(TempSetted == (uint32_t)paramTemperatures[i])
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f5e:	4413      	add	r3, r2
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d106      	bne.n	8007f78 <_ZN10SmartDryer7navMenuEv+0x3a4>
													ActualMenu->itemsChecked[i] = true;
 8007f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f70:	4413      	add	r3, r2
 8007f72:	2201      	movs	r2, #1
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	e005      	b.n	8007f84 <_ZN10SmartDryer7navMenuEv+0x3b0>
													ActualMenu->itemsChecked[i] = false;
 8007f78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f7e:	4413      	add	r3, r2
 8007f80:	2200      	movs	r2, #0
 8007f82:	701a      	strb	r2, [r3, #0]
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f86:	3301      	adds	r3, #1
 8007f88:	667b      	str	r3, [r7, #100]	; 0x64
 8007f8a:	e7d5      	b.n	8007f38 <_ZN10SmartDryer7navMenuEv+0x364>
											break;
 8007f8c:	bf00      	nop
									break;
 8007f8e:	bf00      	nop
						break; // case MAIN_MENU
 8007f90:	e025      	b.n	8007fde <_ZN10SmartDryer7navMenuEv+0x40a>
						screen = ActualMenu->itemSelected + CHANGE_PROGRAM_1;
 8007f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f98:	3304      	adds	r3, #4
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
						ExitNavMenu = true;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8007fa8:	e01c      	b.n	8007fe4 <_ZN10SmartDryer7navMenuEv+0x410>
						if(dryerPrograms[ ActualMenu->itemSelected].programSetted)
 8007faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	440b      	add	r3, r1
 8007fba:	00db      	lsls	r3, r3, #3
 8007fbc:	4413      	add	r3, r2
 8007fbe:	334c      	adds	r3, #76	; 0x4c
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00d      	beq.n	8007fe2 <_ZN10SmartDryer7navMenuEv+0x40e>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
 8007fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007fcc:	3307      	adds	r3, #7
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
							ExitNavMenu = true;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8007fdc:	e001      	b.n	8007fe2 <_ZN10SmartDryer7navMenuEv+0x40e>
						break; // case MAIN_MENU
 8007fde:	bf00      	nop
 8007fe0:	e07b      	b.n	80080da <_ZN10SmartDryer7navMenuEv+0x506>
						break;
 8007fe2:	bf00      	nop
				}
			break;// case LEFT_KEY
 8007fe4:	e079      	b.n	80080da <_ZN10SmartDryer7navMenuEv+0x506>
			case DryerKey::OK_KEY:
				if(ActualMenu->withChebox)
 8007fe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d073      	beq.n	80080d8 <_ZN10SmartDryer7navMenuEv+0x504>
				{
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8007ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ff6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ffe:	4293      	cmp	r3, r2
 8008000:	da09      	bge.n	8008016 <_ZN10SmartDryer7navMenuEv+0x442>
						ActualMenu->itemsChecked[i] = false;
 8008002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008008:	4413      	add	r3, r2
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 800800e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008010:	3301      	adds	r3, #1
 8008012:	663b      	str	r3, [r7, #96]	; 0x60
 8008014:	e7ee      	b.n	8007ff4 <_ZN10SmartDryer7navMenuEv+0x420>
					ActualMenu->itemsChecked[ActualMenu->itemSelected] = true;
 8008016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800801c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008020:	4413      	add	r3, r2
 8008022:	2201      	movs	r2, #1
 8008024:	701a      	strb	r2, [r3, #0]
					switch(ActualMenu->paramType)
 8008026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008028:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800802c:	2b01      	cmp	r3, #1
 800802e:	d002      	beq.n	8008036 <_ZN10SmartDryer7navMenuEv+0x462>
 8008030:	2b04      	cmp	r3, #4
 8008032:	d00f      	beq.n	8008054 <_ZN10SmartDryer7navMenuEv+0x480>
								default:
									break;
							}
							break;
						default:
							break;
 8008034:	e024      	b.n	8008080 <_ZN10SmartDryer7navMenuEv+0x4ac>
							if(ActualMenu->itemSelected == 0)
 8008036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008038:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800803c:	2b00      	cmp	r3, #0
 800803e:	d104      	bne.n	800804a <_ZN10SmartDryer7navMenuEv+0x476>
								*(bool *)ActualMenu->paramAssociated = false;
 8008040:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008044:	2200      	movs	r2, #0
 8008046:	701a      	strb	r2, [r3, #0]
							break;
 8008048:	e01a      	b.n	8008080 <_ZN10SmartDryer7navMenuEv+0x4ac>
								*(bool *)ActualMenu->paramAssociated = true;
 800804a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	2201      	movs	r2, #1
 8008050:	701a      	strb	r2, [r3, #0]
							break;
 8008052:	e015      	b.n	8008080 <_ZN10SmartDryer7navMenuEv+0x4ac>
							switch(MenuSel)
 8008054:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008058:	2b03      	cmp	r3, #3
 800805a:	d000      	beq.n	800805e <_ZN10SmartDryer7navMenuEv+0x48a>
									break;
 800805c:	e00f      	b.n	800807e <_ZN10SmartDryer7navMenuEv+0x4aa>
									*(float *)ActualMenu->paramAssociated = (float)paramTemperatures[ActualMenu->itemSelected];
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008064:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008066:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800806a:	4413      	add	r3, r2
 800806c:	781a      	ldrb	r2, [r3, #0]
 800806e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008070:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8008072:	4610      	mov	r0, r2
 8008074:	f7f8 fe2e 	bl	8000cd4 <__aeabi_ui2f>
 8008078:	4603      	mov	r3, r0
 800807a:	6023      	str	r3, [r4, #0]
									break;
 800807c:	bf00      	nop
							break;
 800807e:	bf00      	nop
					}
					MenuSel = MAIN_MENU;
 8008080:	2300      	movs	r3, #0
 8008082:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					ActualMenu = mainMenu;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800808c:	673b      	str	r3, [r7, #112]	; 0x70
				}
				break;
 800808e:	e023      	b.n	80080d8 <_ZN10SmartDryer7navMenuEv+0x504>
			case DryerKey::LONG_LEFT_KEY:
				switch(MenuSel)
 8008090:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008094:	3b01      	subs	r3, #1
 8008096:	2b07      	cmp	r3, #7
 8008098:	d81a      	bhi.n	80080d0 <_ZN10SmartDryer7navMenuEv+0x4fc>
 800809a:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <_ZN10SmartDryer7navMenuEv+0x4cc>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	080080c1 	.word	0x080080c1
 80080a4:	080080c1 	.word	0x080080c1
 80080a8:	080080c1 	.word	0x080080c1
 80080ac:	080080c1 	.word	0x080080c1
 80080b0:	080080d1 	.word	0x080080d1
 80080b4:	080080d1 	.word	0x080080d1
 80080b8:	080080c1 	.word	0x080080c1
 80080bc:	080080c1 	.word	0x080080c1
					case FAN_CTRL:
					case TEMP_CTRL:
					case START_DRYER_CTRL:
					case CHANGE_PROGRAMS_LIST:
					case START_PROGRAMS_LIST:
						MenuSel = MAIN_MENU;
 80080c0:	2300      	movs	r3, #0
 80080c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						ActualMenu = mainMenu;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080cc:	673b      	str	r3, [r7, #112]	; 0x70
						break;
 80080ce:	e000      	b.n	80080d2 <_ZN10SmartDryer7navMenuEv+0x4fe>
					default:
						break;
 80080d0:	bf00      	nop
				}
				break;
 80080d2:	e002      	b.n	80080da <_ZN10SmartDryer7navMenuEv+0x506>
			case DryerKey::LONG_OK_KEY:
				break;
			default:
				break;
 80080d4:	bf00      	nop
 80080d6:	e000      	b.n	80080da <_ZN10SmartDryer7navMenuEv+0x506>
				break;
 80080d8:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 80080da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080de:	2b08      	cmp	r3, #8
 80080e0:	d04d      	beq.n	800817e <_ZN10SmartDryer7navMenuEv+0x5aa>
 80080e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d049      	beq.n	800817e <_ZN10SmartDryer7navMenuEv+0x5aa>
		{
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 80080ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80080f0:	461a      	mov	r2, r3
 80080f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80080f8:	3b02      	subs	r3, #2
 80080fa:	429a      	cmp	r2, r3
 80080fc:	dd3a      	ble.n	8008174 <_ZN10SmartDryer7navMenuEv+0x5a0>
			{
				if(ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2) < ActualMenu->maxMenuItems - 1)
 80080fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008100:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008104:	461a      	mov	r2, r3
 8008106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008108:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800810c:	3b02      	subs	r3, #2
 800810e:	1ad2      	subs	r2, r2, r3
 8008110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008112:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008116:	3b01      	subs	r3, #1
 8008118:	429a      	cmp	r2, r3
 800811a:	da0d      	bge.n	8008138 <_ZN10SmartDryer7navMenuEv+0x564>
					ActualMenu->topItemPos = ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2);
 800811c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800811e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8008122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008124:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	b2db      	uxtb	r3, r3
 800812c:	3302      	adds	r3, #2
 800812e:	b2da      	uxtb	r2, r3
 8008130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008136:	e003      	b.n	8008140 <_ZN10SmartDryer7navMenuEv+0x56c>
				else
					ActualMenu->topItemPos = 0;
 8008138:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if(ActualMenu->itemSelected >= ActualMenu->maxMenuItems - ActualMenu->maxMenuLines)
 8008140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008146:	461a      	mov	r2, r3
 8008148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800814a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800814e:	4619      	mov	r1, r3
 8008150:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008152:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008156:	1acb      	subs	r3, r1, r3
 8008158:	429a      	cmp	r2, r3
 800815a:	db1a      	blt.n	8008192 <_ZN10SmartDryer7navMenuEv+0x5be>
				{
					ActualMenu->topItemPos = ActualMenu->maxMenuItems - ActualMenu->maxMenuLines;
 800815c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800815e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8008162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008164:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	b2da      	uxtb	r2, r3
 800816c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800816e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8008172:	e00e      	b.n	8008192 <_ZN10SmartDryer7navMenuEv+0x5be>
				}
			}
			else
				ActualMenu->topItemPos = 0;
 8008174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 800817c:	e009      	b.n	8008192 <_ZN10SmartDryer7navMenuEv+0x5be>

		}
		else if(WichKey != DryerKey::NO_KEY)
 800817e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008182:	2b08      	cmp	r3, #8
 8008184:	d006      	beq.n	8008194 <_ZN10SmartDryer7navMenuEv+0x5c0>
		{
			showHelpMessageTimer->restart();
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	4618      	mov	r0, r3
 800818c:	f7fb f9e9 	bl	8003562 <_ZN11ChronoTimer7restartEv>
 8008190:	e000      	b.n	8008194 <_ZN10SmartDryer7navMenuEv+0x5c0>
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8008192:	bf00      	nop
		}
		peripheralsControl();
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7fe fbc5 	bl	8006924 <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, DELAY_SERIAL_ALIVE_TIMER))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	f241 3288 	movw	r2, #5000	; 0x1388
 80081a2:	2101      	movs	r1, #1
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fb f9ea 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d008      	beq.n	80081c2 <_ZN10SmartDryer7navMenuEv+0x5ee>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80081b8:	4610      	mov	r0, r2
 80081ba:	f7fd fd19 	bl	8005bf0 <_ZN13SerialMessage17isDeviceConnectedEv>
 80081be:	4603      	mov	r3, r0
 80081c0:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c6:	7a5b      	ldrb	r3, [r3, #9]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f43f ad40 	beq.w	8007c4e <_ZN10SmartDryer7navMenuEv+0x7a>
		{
			serialComunicationCtrl();
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff f8ac 	bl	800732c <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitNavMenu)
 80081d4:	e53b      	b.n	8007c4e <_ZN10SmartDryer7navMenuEv+0x7a>
	String Time = "", Date = "";
 80081d6:	f107 0308 	add.w	r3, r7, #8
 80081da:	4618      	mov	r0, r3
 80081dc:	f008 fdab 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80081e0:	f107 0320 	add.w	r3, r7, #32
 80081e4:	4618      	mov	r0, r3
 80081e6:	f008 fda6 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}

}
 80081ea:	bf00      	nop
 80081ec:	3778      	adds	r7, #120	; 0x78
 80081ee:	46bd      	mov	sp, r7
 80081f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081f4 <_ZN10SmartDryer4testEv>:


void SmartDryer::test()
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]

}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr
	...

08008208 <_ZN10SmartDryer5setupEv>:

void SmartDryer::setup()
{
 8008208:	b590      	push	{r4, r7, lr}
 800820a:	b0d1      	sub	sp, #324	; 0x144
 800820c:	af00      	add	r7, sp, #0
 800820e:	1d3b      	adds	r3, r7, #4
 8008210:	6018      	str	r0, [r3, #0]
	uint32_t FirstBootVal = 0;
 8008212:	f107 0308 	add.w	r3, r7, #8
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
	display->setupLcd();
 800821a:	1d3b      	adds	r3, r7, #4
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f7fc fb39 	bl	8004898 <_ZN13NHDST7565_LCD8setupLcdEv>
	clock->setup();
 8008226:	1d3b      	adds	r3, r7, #4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	4618      	mov	r0, r3
 800822e:	f7fb fa49 	bl	80036c4 <_ZN10DS1307_RTC5setupEv>
	rtcRunning = clock->isRunning();
 8008232:	1d3b      	adds	r3, r7, #4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	4618      	mov	r0, r3
 800823a:	f7fb fa5d 	bl	80036f8 <_ZN10DS1307_RTC9isRunningEv>
 800823e:	4603      	mov	r3, r0
 8008240:	461a      	mov	r2, r3
 8008242:	1d3b      	adds	r3, r7, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44


	paramTemperatures = new uint8_t[NTemps];
 800824a:	200d      	movs	r0, #13
 800824c:	f008 fc24 	bl	8010a98 <_Znaj>
 8008250:	4603      	mov	r3, r0
 8008252:	461a      	mov	r2, r3
 8008254:	1d3b      	adds	r3, r7, #4
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	for(int i = 0; i < NTemps; i++)
 800825c:	2300      	movs	r3, #0
 800825e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8008262:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008266:	2b0c      	cmp	r3, #12
 8008268:	dc16      	bgt.n	8008298 <_ZN10SmartDryer5setupEv+0x90>
	{
		paramTemperatures[i] = 30 + (i * 5);
 800826a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800826e:	b2db      	uxtb	r3, r3
 8008270:	461a      	mov	r2, r3
 8008272:	0092      	lsls	r2, r2, #2
 8008274:	4413      	add	r3, r2
 8008276:	b2da      	uxtb	r2, r3
 8008278:	1d3b      	adds	r3, r7, #4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8008280:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008284:	440b      	add	r3, r1
 8008286:	321e      	adds	r2, #30
 8008288:	b2d2      	uxtb	r2, r2
 800828a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NTemps; i++)
 800828c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008290:	3301      	adds	r3, #1
 8008292:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8008296:	e7e4      	b.n	8008262 <_ZN10SmartDryer5setupEv+0x5a>
	}

	physicalReleCtrl();
 8008298:	1d3b      	adds	r3, r7, #4
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	f7fe fb04 	bl	80068a8 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 80082a0:	1d3b      	adds	r3, r7, #4
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	f7fe f95a 	bl	800655c <_ZN10SmartDryer10ledControlEv>


	mainMenuHelpMsgs.push_back("Accende o spegne la resistenza");
 80082a8:	1d3b      	adds	r3, r7, #4
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80082b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f008 fc0d 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80082ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80082be:	f107 030c 	add.w	r3, r7, #12
 80082c2:	49af      	ldr	r1, [pc, #700]	; (8008580 <_ZN10SmartDryer5setupEv+0x378>)
 80082c4:	4618      	mov	r0, r3
 80082c6:	f008 fecd 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80082ca:	f107 030c 	add.w	r3, r7, #12
 80082ce:	4619      	mov	r1, r3
 80082d0:	4620      	mov	r0, r4
 80082d2:	f002 fd1c 	bl	800ad0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80082d6:	f107 030c 	add.w	r3, r7, #12
 80082da:	4618      	mov	r0, r3
 80082dc:	f008 fd2b 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80082e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082e4:	4618      	mov	r0, r3
 80082e6:	f008 fbf6 	bl	8010ad6 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Accende o spegne la ventola");
 80082ea:	1d3b      	adds	r3, r7, #4
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80082f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082f6:	4618      	mov	r0, r3
 80082f8:	f008 fbec 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80082fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008304:	499f      	ldr	r1, [pc, #636]	; (8008584 <_ZN10SmartDryer5setupEv+0x37c>)
 8008306:	4618      	mov	r0, r3
 8008308:	f008 feac 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800830c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008310:	4619      	mov	r1, r3
 8008312:	4620      	mov	r0, r4
 8008314:	f002 fcfb 	bl	800ad0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800831c:	4618      	mov	r0, r3
 800831e:	f008 fd0a 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008322:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008326:	4618      	mov	r0, r3
 8008328:	f008 fbd5 	bl	8010ad6 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta la temperatura di servizio");
 800832c:	1d3b      	adds	r3, r7, #4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8008334:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008338:	4618      	mov	r0, r3
 800833a:	f008 fbcb 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800833e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8008342:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008346:	4990      	ldr	r1, [pc, #576]	; (8008588 <_ZN10SmartDryer5setupEv+0x380>)
 8008348:	4618      	mov	r0, r3
 800834a:	f008 fe8b 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800834e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008352:	4619      	mov	r1, r3
 8008354:	4620      	mov	r0, r4
 8008356:	f002 fcda 	bl	800ad0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800835a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800835e:	4618      	mov	r0, r3
 8008360:	f008 fce9 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008368:	4618      	mov	r0, r3
 800836a:	f008 fbb4 	bl	8010ad6 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Avvia il dryer manualmente");
 800836e:	1d3b      	adds	r3, r7, #4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8008376:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800837a:	4618      	mov	r0, r3
 800837c:	f008 fbaa 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8008380:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008384:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008388:	4980      	ldr	r1, [pc, #512]	; (800858c <_ZN10SmartDryer5setupEv+0x384>)
 800838a:	4618      	mov	r0, r3
 800838c:	f008 fe6a 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008390:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008394:	4619      	mov	r1, r3
 8008396:	4620      	mov	r0, r4
 8008398:	f002 fcb9 	bl	800ad0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800839c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80083a0:	4618      	mov	r0, r3
 80083a2:	f008 fcc8 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80083a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80083aa:	4618      	mov	r0, r3
 80083ac:	f008 fb93 	bl	8010ad6 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica l'ora di sistema");
 80083b0:	1d3b      	adds	r3, r7, #4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80083b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80083bc:	4618      	mov	r0, r3
 80083be:	f008 fb89 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80083c2:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80083c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80083ca:	4971      	ldr	r1, [pc, #452]	; (8008590 <_ZN10SmartDryer5setupEv+0x388>)
 80083cc:	4618      	mov	r0, r3
 80083ce:	f008 fe49 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80083d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80083d6:	4619      	mov	r1, r3
 80083d8:	4620      	mov	r0, r4
 80083da:	f002 fc98 	bl	800ad0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80083de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80083e2:	4618      	mov	r0, r3
 80083e4:	f008 fca7 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80083e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80083ec:	4618      	mov	r0, r3
 80083ee:	f008 fb72 	bl	8010ad6 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica la data di sistema");
 80083f2:	1d3b      	adds	r3, r7, #4
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80083fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80083fe:	4618      	mov	r0, r3
 8008400:	f008 fb68 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8008404:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008408:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800840c:	4961      	ldr	r1, [pc, #388]	; (8008594 <_ZN10SmartDryer5setupEv+0x38c>)
 800840e:	4618      	mov	r0, r3
 8008410:	f008 fe28 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008414:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008418:	4619      	mov	r1, r3
 800841a:	4620      	mov	r0, r4
 800841c:	f002 fc77 	bl	800ad0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008420:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008424:	4618      	mov	r0, r3
 8008426:	f008 fc86 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800842a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800842e:	4618      	mov	r0, r3
 8008430:	f008 fb51 	bl	8010ad6 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta i programmi");
 8008434:	1d3b      	adds	r3, r7, #4
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800843c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008440:	4618      	mov	r0, r3
 8008442:	f008 fb47 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8008446:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800844a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800844e:	4952      	ldr	r1, [pc, #328]	; (8008598 <_ZN10SmartDryer5setupEv+0x390>)
 8008450:	4618      	mov	r0, r3
 8008452:	f008 fe07 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008456:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800845a:	4619      	mov	r1, r3
 800845c:	4620      	mov	r0, r4
 800845e:	f002 fc56 	bl	800ad0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008462:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008466:	4618      	mov	r0, r3
 8008468:	f008 fc65 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800846c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008470:	4618      	mov	r0, r3
 8008472:	f008 fb30 	bl	8010ad6 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Seleziona il programma da avviare");
 8008476:	1d3b      	adds	r3, r7, #4
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800847e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008482:	4618      	mov	r0, r3
 8008484:	f008 fb26 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8008488:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800848c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008490:	4942      	ldr	r1, [pc, #264]	; (800859c <_ZN10SmartDryer5setupEv+0x394>)
 8008492:	4618      	mov	r0, r3
 8008494:	f008 fde6 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008498:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800849c:	4619      	mov	r1, r3
 800849e:	4620      	mov	r0, r4
 80084a0:	f002 fc35 	bl	800ad0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80084a4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80084a8:	4618      	mov	r0, r3
 80084aa:	f008 fc44 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80084ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80084b2:	4618      	mov	r0, r3
 80084b4:	f008 fb0f 	bl	8010ad6 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Mostra info sistema");
 80084b8:	1d3b      	adds	r3, r7, #4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80084c0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80084c4:	4618      	mov	r0, r3
 80084c6:	f008 fb05 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80084ca:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80084ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80084d2:	4933      	ldr	r1, [pc, #204]	; (80085a0 <_ZN10SmartDryer5setupEv+0x398>)
 80084d4:	4618      	mov	r0, r3
 80084d6:	f008 fdc5 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084da:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80084de:	4619      	mov	r1, r3
 80084e0:	4620      	mov	r0, r4
 80084e2:	f002 fc14 	bl	800ad0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80084e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80084ea:	4618      	mov	r0, r3
 80084ec:	f008 fc23 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80084f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80084f4:	4618      	mov	r0, r3
 80084f6:	f008 faee 	bl	8010ad6 <_ZNSaIcED1Ev>
	if(mainMenuHelpMsgs.size() < MAX_MENU_ITEMS)
 80084fa:	1d3b      	adds	r3, r7, #4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	33a4      	adds	r3, #164	; 0xa4
 8008500:	4618      	mov	r0, r3
 8008502:	f002 fc15 	bl	800ad30 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008506:	4603      	mov	r3, r0
 8008508:	2b09      	cmp	r3, #9
 800850a:	bf94      	ite	ls
 800850c:	2301      	movls	r3, #1
 800850e:	2300      	movhi	r3, #0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d048      	beq.n	80085a8 <_ZN10SmartDryer5setupEv+0x3a0>
	{
		mainMenuHelpMsgs.clear();
 8008516:	1d3b      	adds	r3, r7, #4
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	33a4      	adds	r3, #164	; 0xa4
 800851c:	4618      	mov	r0, r3
 800851e:	f002 fc1d 	bl	800ad5c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 8008522:	2300      	movs	r3, #0
 8008524:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8008528:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800852c:	2b09      	cmp	r3, #9
 800852e:	dc3b      	bgt.n	80085a8 <_ZN10SmartDryer5setupEv+0x3a0>
		{
			mainMenuHelpMsgs.push_back("");
 8008530:	1d3b      	adds	r3, r7, #4
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8008538:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800853c:	4618      	mov	r0, r3
 800853e:	f008 fac9 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8008542:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854a:	4916      	ldr	r1, [pc, #88]	; (80085a4 <_ZN10SmartDryer5setupEv+0x39c>)
 800854c:	4618      	mov	r0, r3
 800854e:	f008 fd89 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008556:	4619      	mov	r1, r3
 8008558:	4620      	mov	r0, r4
 800855a:	f002 fbd8 	bl	800ad0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800855e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008562:	4618      	mov	r0, r3
 8008564:	f008 fbe7 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008568:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800856c:	4618      	mov	r0, r3
 800856e:	f008 fab2 	bl	8010ad6 <_ZNSaIcED1Ev>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 8008572:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008576:	3301      	adds	r3, #1
 8008578:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800857c:	e7d4      	b.n	8008528 <_ZN10SmartDryer5setupEv+0x320>
 800857e:	bf00      	nop
 8008580:	080151dc 	.word	0x080151dc
 8008584:	080151fc 	.word	0x080151fc
 8008588:	08015218 	.word	0x08015218
 800858c:	0801523c 	.word	0x0801523c
 8008590:	08015258 	.word	0x08015258
 8008594:	08015274 	.word	0x08015274
 8008598:	08015290 	.word	0x08015290
 800859c:	080152a4 	.word	0x080152a4
 80085a0:	080152c8 	.word	0x080152c8
 80085a4:	080151d8 	.word	0x080151d8
		}
	}


	mainMenu->menuTitle = "Menu principale";
 80085a8:	1d3b      	adds	r3, r7, #4
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085b0:	49cc      	ldr	r1, [pc, #816]	; (80088e4 <_ZN10SmartDryer5setupEv+0x6dc>)
 80085b2:	4618      	mov	r0, r3
 80085b4:	f008 fca3 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	mainMenu->menuVoices = mainMenuVoices;
 80085b8:	1d3b      	adds	r3, r7, #4
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085c0:	4ac9      	ldr	r2, [pc, #804]	; (80088e8 <_ZN10SmartDryer5setupEv+0x6e0>)
 80085c2:	619a      	str	r2, [r3, #24]
	mainMenu->XPos = MENU_LEFT_LIST_XPOS;
 80085c4:	1d3b      	adds	r3, r7, #4
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085cc:	2205      	movs	r2, #5
 80085ce:	771a      	strb	r2, [r3, #28]
	mainMenu->YPos = MENU_LIST_YPOS;
 80085d0:	1d3b      	adds	r3, r7, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085d8:	2214      	movs	r2, #20
 80085da:	775a      	strb	r2, [r3, #29]
	mainMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80085dc:	1d3b      	adds	r3, r7, #4
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	1d3b      	adds	r3, r7, #4
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085ea:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80085ee:	621a      	str	r2, [r3, #32]
	mainMenu->topItemPos = 0;
 80085f0:	1d3b      	adds	r3, r7, #4
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainMenu->itemSelected = 0;
 80085fe:	1d3b      	adds	r3, r7, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	mainMenu->maxMenuLines = 0;
 800860c:	1d3b      	adds	r3, r7, #4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	mainMenu->maxMenuItems = sizeof(mainMenuVoices)/sizeof(mainMenuVoices[0]);
 800861a:	1d3b      	adds	r3, r7, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008622:	2209      	movs	r2, #9
 8008624:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	mainMenu->withChebox = false;
 8008628:	1d3b      	adds	r3, r7, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	mainMenu->itemsChecked = NULL;
 8008636:	1d3b      	adds	r3, r7, #4
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800863e:	2200      	movs	r2, #0
 8008640:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu->paramAssociated = NULL;
 8008642:	1d3b      	adds	r3, r7, #4
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800864a:	2200      	movs	r2, #0
 800864c:	631a      	str	r2, [r3, #48]	; 0x30
	mainMenu->paramType = NO_TYPE;
 800864e:	1d3b      	adds	r3, r7, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mainMenu->menuSelected = true;
 800865c:	1d3b      	adds	r3, r7, #4
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	thermoMenuCtrl->menuTitle = "Ctrl. thermo";
 800866a:	1d3b      	adds	r3, r7, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008672:	499e      	ldr	r1, [pc, #632]	; (80088ec <_ZN10SmartDryer5setupEv+0x6e4>)
 8008674:	4618      	mov	r0, r3
 8008676:	f008 fc42 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	thermoMenuCtrl->menuVoices = OnOff;
 800867a:	1d3b      	adds	r3, r7, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008682:	4a9b      	ldr	r2, [pc, #620]	; (80088f0 <_ZN10SmartDryer5setupEv+0x6e8>)
 8008684:	619a      	str	r2, [r3, #24]
	thermoMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8008686:	1d3b      	adds	r3, r7, #4
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800868e:	223c      	movs	r2, #60	; 0x3c
 8008690:	771a      	strb	r2, [r3, #28]
	thermoMenuCtrl->YPos = MENU_LIST_YPOS;
 8008692:	1d3b      	adds	r3, r7, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800869a:	2214      	movs	r2, #20
 800869c:	775a      	strb	r2, [r3, #29]
	thermoMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800869e:	1d3b      	adds	r3, r7, #4
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	1d3b      	adds	r3, r7, #4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086ac:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80086b0:	621a      	str	r2, [r3, #32]
	thermoMenuCtrl->topItemPos = 0;
 80086b2:	1d3b      	adds	r3, r7, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	thermoMenuCtrl->itemSelected = 0;
 80086c0:	1d3b      	adds	r3, r7, #4
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	thermoMenuCtrl->maxMenuLines = 0;
 80086ce:	1d3b      	adds	r3, r7, #4
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	thermoMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 80086dc:	1d3b      	adds	r3, r7, #4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086e4:	2202      	movs	r2, #2
 80086e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	thermoMenuCtrl->withChebox = true;
 80086ea:	1d3b      	adds	r3, r7, #4
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	thermoMenuCtrl->itemsChecked = new bool(thermoMenuCtrl->maxMenuItems);
 80086f8:	2001      	movs	r0, #1
 80086fa:	f008 f9cf 	bl	8010a9c <_Znwj>
 80086fe:	4603      	mov	r3, r0
 8008700:	1d3a      	adds	r2, r7, #4
 8008702:	6812      	ldr	r2, [r2, #0]
 8008704:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8008708:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800870c:	2a00      	cmp	r2, #0
 800870e:	bf14      	ite	ne
 8008710:	2201      	movne	r2, #1
 8008712:	2200      	moveq	r2, #0
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	701a      	strb	r2, [r3, #0]
 8008718:	1d3a      	adds	r2, r7, #4
 800871a:	6812      	ldr	r2, [r2, #0]
 800871c:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8008720:	62d3      	str	r3, [r2, #44]	; 0x2c
	thermoMenuCtrl->paramAssociated = (bool *)&statusParam->thermoOn;
 8008722:	1d3b      	adds	r3, r7, #4
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008728:	1d3b      	adds	r3, r7, #4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008730:	3201      	adds	r2, #1
 8008732:	631a      	str	r2, [r3, #48]	; 0x30
	thermoMenuCtrl->paramType = PARAM_BOOL_TYPE;
 8008734:	1d3b      	adds	r3, r7, #4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	thermoMenuCtrl->menuSelected = true;
 8008742:	1d3b      	adds	r3, r7, #4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	fanMenuCtrl->menuTitle = "Ctrl. ventola";
 8008750:	1d3b      	adds	r3, r7, #4
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008758:	4966      	ldr	r1, [pc, #408]	; (80088f4 <_ZN10SmartDryer5setupEv+0x6ec>)
 800875a:	4618      	mov	r0, r3
 800875c:	f008 fbcf 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	fanMenuCtrl->menuVoices = OnOff;
 8008760:	1d3b      	adds	r3, r7, #4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008768:	4a61      	ldr	r2, [pc, #388]	; (80088f0 <_ZN10SmartDryer5setupEv+0x6e8>)
 800876a:	619a      	str	r2, [r3, #24]
	fanMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 800876c:	1d3b      	adds	r3, r7, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008774:	223c      	movs	r2, #60	; 0x3c
 8008776:	771a      	strb	r2, [r3, #28]
	fanMenuCtrl->YPos = MENU_LIST_YPOS;
 8008778:	1d3b      	adds	r3, r7, #4
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008780:	2214      	movs	r2, #20
 8008782:	775a      	strb	r2, [r3, #29]
	fanMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008784:	1d3b      	adds	r3, r7, #4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	1d3b      	adds	r3, r7, #4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008792:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008796:	621a      	str	r2, [r3, #32]
	fanMenuCtrl->topItemPos = 0;
 8008798:	1d3b      	adds	r3, r7, #4
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	fanMenuCtrl->itemSelected = 0;
 80087a6:	1d3b      	adds	r3, r7, #4
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	fanMenuCtrl->maxMenuLines = 0;
 80087b4:	1d3b      	adds	r3, r7, #4
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	fanMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 80087c2:	1d3b      	adds	r3, r7, #4
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	fanMenuCtrl->withChebox = true;
 80087d0:	1d3b      	adds	r3, r7, #4
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	fanMenuCtrl->itemsChecked = new bool(fanMenuCtrl->maxMenuItems);
 80087de:	2001      	movs	r0, #1
 80087e0:	f008 f95c 	bl	8010a9c <_Znwj>
 80087e4:	4603      	mov	r3, r0
 80087e6:	1d3a      	adds	r2, r7, #4
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 80087ee:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	bf14      	ite	ne
 80087f6:	2201      	movne	r2, #1
 80087f8:	2200      	moveq	r2, #0
 80087fa:	b2d2      	uxtb	r2, r2
 80087fc:	701a      	strb	r2, [r3, #0]
 80087fe:	1d3a      	adds	r2, r7, #4
 8008800:	6812      	ldr	r2, [r2, #0]
 8008802:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8008806:	62d3      	str	r3, [r2, #44]	; 0x2c
	fanMenuCtrl->paramAssociated = (bool *)&statusParam->fanOn;
 8008808:	1d3b      	adds	r3, r7, #4
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800880e:	1d3b      	adds	r3, r7, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008816:	3202      	adds	r2, #2
 8008818:	631a      	str	r2, [r3, #48]	; 0x30
	fanMenuCtrl->paramType = PARAM_BOOL_TYPE;
 800881a:	1d3b      	adds	r3, r7, #4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fanMenuCtrl->menuSelected = true;
 8008828:	1d3b      	adds	r3, r7, #4
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startDryerMenu->menuTitle = "Avvia dryer";
 8008836:	1d3b      	adds	r3, r7, #4
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800883e:	492e      	ldr	r1, [pc, #184]	; (80088f8 <_ZN10SmartDryer5setupEv+0x6f0>)
 8008840:	4618      	mov	r0, r3
 8008842:	f008 fb5c 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startDryerMenu->menuVoices = OnOff;
 8008846:	1d3b      	adds	r3, r7, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800884e:	4a28      	ldr	r2, [pc, #160]	; (80088f0 <_ZN10SmartDryer5setupEv+0x6e8>)
 8008850:	619a      	str	r2, [r3, #24]
	startDryerMenu->XPos = MENU_RIGHT_LIST_XPOS;
 8008852:	1d3b      	adds	r3, r7, #4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800885a:	223c      	movs	r2, #60	; 0x3c
 800885c:	771a      	strb	r2, [r3, #28]
	startDryerMenu->YPos = MENU_LIST_YPOS;
 800885e:	1d3b      	adds	r3, r7, #4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008866:	2214      	movs	r2, #20
 8008868:	775a      	strb	r2, [r3, #29]
	startDryerMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800886a:	1d3b      	adds	r3, r7, #4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	1d3b      	adds	r3, r7, #4
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008878:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800887c:	621a      	str	r2, [r3, #32]
	startDryerMenu->topItemPos = 0;
 800887e:	1d3b      	adds	r3, r7, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startDryerMenu->itemSelected = 0;
 800888c:	1d3b      	adds	r3, r7, #4
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startDryerMenu->maxMenuLines = 0;
 800889a:	1d3b      	adds	r3, r7, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startDryerMenu->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 80088a8:	1d3b      	adds	r3, r7, #4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80088b0:	2202      	movs	r2, #2
 80088b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startDryerMenu->withChebox = true;
 80088b6:	1d3b      	adds	r3, r7, #4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startDryerMenu->itemsChecked = new bool(startDryerMenu->maxMenuItems);
 80088c4:	2001      	movs	r0, #1
 80088c6:	f008 f8e9 	bl	8010a9c <_Znwj>
 80088ca:	4603      	mov	r3, r0
 80088cc:	1d3a      	adds	r2, r7, #4
 80088ce:	6812      	ldr	r2, [r2, #0]
 80088d0:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 80088d4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80088d8:	2a00      	cmp	r2, #0
 80088da:	bf14      	ite	ne
 80088dc:	2201      	movne	r2, #1
 80088de:	2200      	moveq	r2, #0
 80088e0:	e00c      	b.n	80088fc <_ZN10SmartDryer5setupEv+0x6f4>
 80088e2:	bf00      	nop
 80088e4:	080152dc 	.word	0x080152dc
 80088e8:	20000030 	.word	0x20000030
 80088ec:	080152ec 	.word	0x080152ec
 80088f0:	20000054 	.word	0x20000054
 80088f4:	080152fc 	.word	0x080152fc
 80088f8:	080150f8 	.word	0x080150f8
 80088fc:	b2d2      	uxtb	r2, r2
 80088fe:	701a      	strb	r2, [r3, #0]
 8008900:	1d3a      	adds	r2, r7, #4
 8008902:	6812      	ldr	r2, [r2, #0]
 8008904:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8008908:	62d3      	str	r3, [r2, #44]	; 0x2c
	startDryerMenu->paramAssociated = (bool *)&statusParam->dryerOn;
 800890a:	1d3b      	adds	r3, r7, #4
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008910:	1d3b      	adds	r3, r7, #4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008918:	631a      	str	r2, [r3, #48]	; 0x30
	startDryerMenu->paramType = PARAM_BOOL_TYPE;
 800891a:	1d3b      	adds	r3, r7, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startDryerMenu->menuSelected = true;
 8008928:	1d3b      	adds	r3, r7, #4
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	tempMenuCtrl->menuTitle = "Imposta temp.";
 8008936:	1d3b      	adds	r3, r7, #4
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800893e:	49cc      	ldr	r1, [pc, #816]	; (8008c70 <_ZN10SmartDryer5setupEv+0xa68>)
 8008940:	4618      	mov	r0, r3
 8008942:	f008 fadc 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	tempMenuCtrl->menuVoices = Temps;
 8008946:	1d3b      	adds	r3, r7, #4
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800894e:	4ac9      	ldr	r2, [pc, #804]	; (8008c74 <_ZN10SmartDryer5setupEv+0xa6c>)
 8008950:	619a      	str	r2, [r3, #24]
	tempMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8008952:	1d3b      	adds	r3, r7, #4
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800895a:	223c      	movs	r2, #60	; 0x3c
 800895c:	771a      	strb	r2, [r3, #28]
	tempMenuCtrl->YPos = MENU_LIST_YPOS;
 800895e:	1d3b      	adds	r3, r7, #4
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008966:	2214      	movs	r2, #20
 8008968:	775a      	strb	r2, [r3, #29]
	tempMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800896a:	1d3b      	adds	r3, r7, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	1d3b      	adds	r3, r7, #4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008978:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800897c:	621a      	str	r2, [r3, #32]
	tempMenuCtrl->topItemPos = 0;
 800897e:	1d3b      	adds	r3, r7, #4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	tempMenuCtrl->itemSelected = 0;
 800898c:	1d3b      	adds	r3, r7, #4
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	tempMenuCtrl->maxMenuLines = 0;
 800899a:	1d3b      	adds	r3, r7, #4
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	tempMenuCtrl->maxMenuItems = sizeof(Temps)/sizeof(Temps[0]);;
 80089a8:	1d3b      	adds	r3, r7, #4
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089b0:	220d      	movs	r2, #13
 80089b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	tempMenuCtrl->withChebox = true;
 80089b6:	1d3b      	adds	r3, r7, #4
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tempMenuCtrl->itemsChecked = new bool(tempMenuCtrl->maxMenuItems);
 80089c4:	2001      	movs	r0, #1
 80089c6:	f008 f869 	bl	8010a9c <_Znwj>
 80089ca:	4603      	mov	r3, r0
 80089cc:	1d3a      	adds	r2, r7, #4
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 80089d4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80089d8:	2a00      	cmp	r2, #0
 80089da:	bf14      	ite	ne
 80089dc:	2201      	movne	r2, #1
 80089de:	2200      	moveq	r2, #0
 80089e0:	b2d2      	uxtb	r2, r2
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	1d3a      	adds	r2, r7, #4
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 80089ec:	62d3      	str	r3, [r2, #44]	; 0x2c
	tempMenuCtrl->paramAssociated = (float *)&statusParam->temperatureSetted;
 80089ee:	1d3b      	adds	r3, r7, #4
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089f4:	1d3b      	adds	r3, r7, #4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089fc:	3204      	adds	r2, #4
 80089fe:	631a      	str	r2, [r3, #48]	; 0x30
	tempMenuCtrl->paramType = PARAM_FLOAT_TYPE;
 8008a00:	1d3b      	adds	r3, r7, #4
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a08:	2204      	movs	r2, #4
 8008a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tempMenuCtrl->menuSelected = true;
 8008a0e:	1d3b      	adds	r3, r7, #4
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	changeProgramsMenu->menuTitle = "Modifica programma";
 8008a1c:	1d3b      	adds	r3, r7, #4
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008a24:	4994      	ldr	r1, [pc, #592]	; (8008c78 <_ZN10SmartDryer5setupEv+0xa70>)
 8008a26:	4618      	mov	r0, r3
 8008a28:	f008 fa69 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	changeProgramsMenu->menuVoices = programsMenuVoices;
 8008a2c:	1d3b      	adds	r3, r7, #4
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008a34:	4a91      	ldr	r2, [pc, #580]	; (8008c7c <_ZN10SmartDryer5setupEv+0xa74>)
 8008a36:	619a      	str	r2, [r3, #24]
	changeProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008a38:	1d3b      	adds	r3, r7, #4
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008a40:	2205      	movs	r2, #5
 8008a42:	771a      	strb	r2, [r3, #28]
	changeProgramsMenu->YPos = MENU_LIST_YPOS;
 8008a44:	1d3b      	adds	r3, r7, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008a4c:	2214      	movs	r2, #20
 8008a4e:	775a      	strb	r2, [r3, #29]
	changeProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008a50:	1d3b      	adds	r3, r7, #4
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	1d3b      	adds	r3, r7, #4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008a5e:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008a62:	621a      	str	r2, [r3, #32]
	changeProgramsMenu->topItemPos = 0;
 8008a64:	1d3b      	adds	r3, r7, #4
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	changeProgramsMenu->itemSelected = 0;
 8008a72:	1d3b      	adds	r3, r7, #4
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	changeProgramsMenu->maxMenuLines = 0;
 8008a80:	1d3b      	adds	r3, r7, #4
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	changeProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8008a8e:	1d3b      	adds	r3, r7, #4
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008a96:	2203      	movs	r2, #3
 8008a98:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	changeProgramsMenu->withChebox = false;
 8008a9c:	1d3b      	adds	r3, r7, #4
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	changeProgramsMenu->itemsChecked = NULL;
 8008aaa:	1d3b      	adds	r3, r7, #4
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	62da      	str	r2, [r3, #44]	; 0x2c
	changeProgramsMenu->paramAssociated = NULL;
 8008ab6:	1d3b      	adds	r3, r7, #4
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008abe:	2200      	movs	r2, #0
 8008ac0:	631a      	str	r2, [r3, #48]	; 0x30
	changeProgramsMenu->paramType = NO_TYPE;
 8008ac2:	1d3b      	adds	r3, r7, #4
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	changeProgramsMenu->menuSelected = true;
 8008ad0:	1d3b      	adds	r3, r7, #4
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startProgramsMenu->menuTitle = "Avvia programma";
 8008ade:	1d3b      	adds	r3, r7, #4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008ae6:	4966      	ldr	r1, [pc, #408]	; (8008c80 <_ZN10SmartDryer5setupEv+0xa78>)
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f008 fa08 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startProgramsMenu->menuVoices = programsMenuVoices;
 8008aee:	1d3b      	adds	r3, r7, #4
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008af6:	4a61      	ldr	r2, [pc, #388]	; (8008c7c <_ZN10SmartDryer5setupEv+0xa74>)
 8008af8:	619a      	str	r2, [r3, #24]
	startProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008afa:	1d3b      	adds	r3, r7, #4
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b02:	2205      	movs	r2, #5
 8008b04:	771a      	strb	r2, [r3, #28]
	startProgramsMenu->YPos = MENU_LIST_YPOS;
 8008b06:	1d3b      	adds	r3, r7, #4
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b0e:	2214      	movs	r2, #20
 8008b10:	775a      	strb	r2, [r3, #29]
	startProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008b12:	1d3b      	adds	r3, r7, #4
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	1d3b      	adds	r3, r7, #4
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b20:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008b24:	621a      	str	r2, [r3, #32]
	startProgramsMenu->topItemPos = 0;
 8008b26:	1d3b      	adds	r3, r7, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startProgramsMenu->itemSelected = 0;
 8008b34:	1d3b      	adds	r3, r7, #4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startProgramsMenu->maxMenuLines = 0;
 8008b42:	1d3b      	adds	r3, r7, #4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8008b50:	1d3b      	adds	r3, r7, #4
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b58:	2203      	movs	r2, #3
 8008b5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startProgramsMenu->withChebox = false;
 8008b5e:	1d3b      	adds	r3, r7, #4
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startProgramsMenu->itemsChecked = NULL;
 8008b6c:	1d3b      	adds	r3, r7, #4
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b74:	2200      	movs	r2, #0
 8008b76:	62da      	str	r2, [r3, #44]	; 0x2c
	startProgramsMenu->paramAssociated = NULL;
 8008b78:	1d3b      	adds	r3, r7, #4
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b80:	2200      	movs	r2, #0
 8008b82:	631a      	str	r2, [r3, #48]	; 0x30
	startProgramsMenu->paramType = NO_TYPE;
 8008b84:	1d3b      	adds	r3, r7, #4
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startProgramsMenu->menuSelected = true;
 8008b92:	1d3b      	adds	r3, r7, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	if(eepromEnabled)
 8008ba0:	1d3b      	adds	r3, r7, #4
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 80d5 	beq.w	8008d58 <_ZN10SmartDryer5setupEv+0xb50>
	{
		if(resetMemory)
 8008bae:	1d3b      	adds	r3, r7, #4
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d010      	beq.n	8008bdc <_ZN10SmartDryer5setupEv+0x9d4>
		{
			FirstBootVal = 500;
 8008bba:	f107 0308 	add.w	r3, r7, #8
 8008bbe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008bc2:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, MEM_TRANSFER);
 8008bc4:	1d3b      	adds	r3, r7, #4
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6998      	ldr	r0, [r3, #24]
 8008bca:	f107 0308 	add.w	r3, r7, #8
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	f7fc fc3d 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			ResetSystem;
 8008bd8:	f003 ffb2 	bl	800cb40 <HAL_NVIC_SystemReset>
		}
		if(!memory->memoryEmpty())
 8008bdc:	1d3b      	adds	r3, r7, #4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fc fbfd 	bl	80053e2 <_ZN12STM32_EEPROM11memoryEmptyEv>
 8008be8:	4603      	mov	r3, r0
 8008bea:	f083 0301 	eor.w	r3, r3, #1
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d073      	beq.n	8008cdc <_ZN10SmartDryer5setupEv+0xad4>
		{
			memory->loadMemory(FIRST_BOOT, &FirstBootVal);
 8008bf4:	1d3b      	adds	r3, r7, #4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	f107 0208 	add.w	r2, r7, #8
 8008bfe:	2100      	movs	r1, #0
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fc fc44 	bl	800548e <_ZN12STM32_EEPROM10loadMemoryEtPm>
			if(FirstBootVal == 200)
 8008c06:	f107 0308 	add.w	r3, r7, #8
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2bc8      	cmp	r3, #200	; 0xc8
 8008c0e:	d115      	bne.n	8008c3c <_ZN10SmartDryer5setupEv+0xa34>
			{
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008c10:	2300      	movs	r3, #0
 8008c12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008c16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	f300 809c 	bgt.w	8008d58 <_ZN10SmartDryer5setupEv+0xb50>
				{
					loadDryerProgram(i);
 8008c20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	1d3b      	adds	r3, r7, #4
 8008c28:	4611      	mov	r1, r2
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	f7fe f8f5 	bl	8006e1a <_ZN10SmartDryer16loadDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008c30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c34:	3301      	adds	r3, #1
 8008c36:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008c3a:	e7ec      	b.n	8008c16 <_ZN10SmartDryer5setupEv+0xa0e>
				}
			}
			else
			{
				FirstBootVal = 200;
 8008c3c:	f107 0308 	add.w	r3, r7, #8
 8008c40:	22c8      	movs	r2, #200	; 0xc8
 8008c42:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008c44:	2300      	movs	r3, #0
 8008c46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008c4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	dc18      	bgt.n	8008c84 <_ZN10SmartDryer5setupEv+0xa7c>
				{
					writeDefaultsDryerProgram(i);
 8008c52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	1d3b      	adds	r3, r7, #4
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	6818      	ldr	r0, [r3, #0]
 8008c5e:	f7fd fed1 	bl	8006a04 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008c62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c66:	3301      	adds	r3, #1
 8008c68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008c6c:	e7ed      	b.n	8008c4a <_ZN10SmartDryer5setupEv+0xa42>
 8008c6e:	bf00      	nop
 8008c70:	080150e8 	.word	0x080150e8
 8008c74:	2000005c 	.word	0x2000005c
 8008c78:	0801530c 	.word	0x0801530c
 8008c7c:	20000090 	.word	0x20000090
 8008c80:	08015134 	.word	0x08015134
				}
				memory->eraseMemory();
 8008c84:	1d3b      	adds	r3, r7, #4
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fc fb98 	bl	80053c0 <_ZN12STM32_EEPROM11eraseMemoryEv>
				memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8008c90:	1d3b      	adds	r3, r7, #4
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6998      	ldr	r0, [r3, #24]
 8008c96:	f107 0308 	add.w	r3, r7, #8
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	f7fc fbd7 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	dc11      	bgt.n	8008cd6 <_ZN10SmartDryer5setupEv+0xace>
				{
					saveDryerProgram(i);
 8008cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	1d3b      	adds	r3, r7, #4
 8008cba:	4611      	mov	r1, r2
 8008cbc:	6818      	ldr	r0, [r3, #0]
 8008cbe:	f7fd ff3d 	bl	8006b3c <_ZN10SmartDryer16saveDryerProgramEh>
					HAL_Delay(500);
 8008cc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008cc6:	f003 faa1 	bl	800c20c <HAL_Delay>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cce:	3301      	adds	r3, #1
 8008cd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008cd4:	e7e9      	b.n	8008caa <_ZN10SmartDryer5setupEv+0xaa2>
				}
				ResetSystem;
 8008cd6:	f003 ff33 	bl	800cb40 <HAL_NVIC_SystemReset>
			}
			ResetSystem;
		}
	}

}
 8008cda:	e03d      	b.n	8008d58 <_ZN10SmartDryer5setupEv+0xb50>
			FirstBootVal = 200;
 8008cdc:	f107 0308 	add.w	r3, r7, #8
 8008ce0:	22c8      	movs	r2, #200	; 0xc8
 8008ce2:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8008ce4:	1d3b      	adds	r3, r7, #4
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6998      	ldr	r0, [r3, #24]
 8008cea:	f107 0308 	add.w	r3, r7, #8
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	f7fc fbad 	bl	8005452 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008cfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	dc0d      	bgt.n	8008d22 <_ZN10SmartDryer5setupEv+0xb1a>
				writeDefaultsDryerProgram(i);
 8008d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	1d3b      	adds	r3, r7, #4
 8008d0e:	4611      	mov	r1, r2
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	f7fd fe77 	bl	8006a04 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008d16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008d20:	e7ed      	b.n	8008cfe <_ZN10SmartDryer5setupEv+0xaf6>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008d22:	2300      	movs	r3, #0
 8008d24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	dc11      	bgt.n	8008d54 <_ZN10SmartDryer5setupEv+0xb4c>
				saveDryerProgram(i);
 8008d30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	1d3b      	adds	r3, r7, #4
 8008d38:	4611      	mov	r1, r2
 8008d3a:	6818      	ldr	r0, [r3, #0]
 8008d3c:	f7fd fefe 	bl	8006b3c <_ZN10SmartDryer16saveDryerProgramEh>
				HAL_Delay(500);
 8008d40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d44:	f003 fa62 	bl	800c20c <HAL_Delay>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008d48:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d52:	e7e9      	b.n	8008d28 <_ZN10SmartDryer5setupEv+0xb20>
			ResetSystem;
 8008d54:	f003 fef4 	bl	800cb40 <HAL_NVIC_SystemReset>
}
 8008d58:	bf00      	nop
 8008d5a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd90      	pop	{r4, r7, pc}
 8008d62:	bf00      	nop

08008d64 <_ZN10SmartDryer10changeTimeEv>:


void SmartDryer::changeTime()
{
 8008d64:	b590      	push	{r4, r7, lr}
 8008d66:	b0bd      	sub	sp, #244	; 0xf4
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	6078      	str	r0, [r7, #4]
	bool ExitChangeTime = false;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t Hour = 0, Minute = 0;
 8008d72:	2300      	movs	r3, #0
 8008d74:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	bool IsHours = true;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	String Title = "", Number = "";
 8008d84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f007 fea3 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8008d8e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008d92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d96:	49d0      	ldr	r1, [pc, #832]	; (80090d8 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f008 f963 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008da2:	4618      	mov	r0, r3
 8008da4:	f007 fe97 	bl	8010ad6 <_ZNSaIcED1Ev>
 8008da8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008dac:	4618      	mov	r0, r3
 8008dae:	f007 fe91 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8008db2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8008db6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008dba:	49c7      	ldr	r1, [pc, #796]	; (80090d8 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f008 f951 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008dc2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f007 fe85 	bl	8010ad6 <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8008dcc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f007 fe7f 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8008dd6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008dde:	49be      	ldr	r1, [pc, #760]	; (80090d8 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008de0:	4618      	mov	r0, r3
 8008de2:	f008 f93f 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008de6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008dea:	4618      	mov	r0, r3
 8008dec:	f007 fe73 	bl	8010ad6 <_ZNSaIcED1Ev>
 8008df0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008df4:	4618      	mov	r0, r3
 8008df6:	f007 fe6d 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8008dfa:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008dfe:	f107 0310 	add.w	r3, r7, #16
 8008e02:	49b5      	ldr	r1, [pc, #724]	; (80090d8 <_ZN10SmartDryer10changeTimeEv+0x374>)
 8008e04:	4618      	mov	r0, r3
 8008e06:	f008 f92d 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008e0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f007 fe61 	bl	8010ad6 <_ZNSaIcED1Ev>
	checkSerialDeviceTimer->restart();
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fa fba2 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	while(!ExitChangeTime)
 8008e1e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f040 815e 	bne.w	80090e4 <_ZN10SmartDryer10changeTimeEv+0x380>
	{
		display->clearFrameBuffer();
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fb fe08 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8008e32:	f107 0210 	add.w	r2, r7, #16
 8008e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7fd fd86 	bl	800694e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(IsHours)
 8008e42:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d01b      	beq.n	8008e82 <_ZN10SmartDryer10changeTimeEv+0x11e>
		{
			Title = "Imposta ora";
 8008e4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e4e:	49a3      	ldr	r1, [pc, #652]	; (80090dc <_ZN10SmartDryer10changeTimeEv+0x378>)
 8008e50:	4618      	mov	r0, r3
 8008e52:	f008 f854 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Hour);
 8008e56:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 8008e5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008e5e:	4611      	mov	r1, r2
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fa fbbf 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008e66:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008e6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e6e:	4611      	mov	r1, r2
 8008e70:	4618      	mov	r0, r3
 8008e72:	f007 ff6c 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008e76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f007 ff5b 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008e80:	e01a      	b.n	8008eb8 <_ZN10SmartDryer10changeTimeEv+0x154>
		}
		else
		{
			Title = "Imposta minuto";
 8008e82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e86:	4996      	ldr	r1, [pc, #600]	; (80090e0 <_ZN10SmartDryer10changeTimeEv+0x37c>)
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f008 f838 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Minute);
 8008e8e:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8008e92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fa fba3 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8008e9e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008ea2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f007 ff50 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008eae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f007 ff3f 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681c      	ldr	r4, [r3, #0]
 8008ebc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008ec0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f008 f899 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008ed4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	2305      	movs	r3, #5
 8008edc:	2283      	movs	r2, #131	; 0x83
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f7fb fdf3 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008ee4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f007 ff24 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681c      	ldr	r4, [r3, #0]
 8008ef2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008ef6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008efa:	4611      	mov	r1, r2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f008 f87e 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008f0a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	231e      	movs	r3, #30
 8008f12:	2283      	movs	r2, #131	; 0x83
 8008f14:	4620      	mov	r0, r4
 8008f16:	f7fb fdd8 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008f1a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f007 ff09 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6818      	ldr	r0, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008f30:	2370      	movs	r3, #112	; 0x70
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	4613      	mov	r3, r2
 8008f36:	221e      	movs	r2, #30
 8008f38:	213c      	movs	r1, #60	; 0x3c
 8008f3a:	f7fc f875 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008f4a:	236d      	movs	r3, #109	; 0x6d
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	2237      	movs	r2, #55	; 0x37
 8008f52:	213c      	movs	r1, #60	; 0x3c
 8008f54:	f7fc f868 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fb fd7d 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8008f62:	2308      	movs	r3, #8
 8008f64:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		WichKey = keyboard->checkKey();
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fc fb7f 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		switch(WichKey)
 8008f78:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008f7c:	2b07      	cmp	r3, #7
 8008f7e:	f200 8086 	bhi.w	800908e <_ZN10SmartDryer10changeTimeEv+0x32a>
 8008f82:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <_ZN10SmartDryer10changeTimeEv+0x224>)
 8008f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f88:	08008fa9 	.word	0x08008fa9
 8008f8c:	08008fe9 	.word	0x08008fe9
 8008f90:	0800908f 	.word	0x0800908f
 8008f94:	08009029 	.word	0x08009029
 8008f98:	08008fa9 	.word	0x08008fa9
 8008f9c:	08008fe9 	.word	0x08008fe9
 8008fa0:	08009087 	.word	0x08009087
 8008fa4:	08009071 	.word	0x08009071
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(IsHours)
 8008fa8:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00d      	beq.n	8008fcc <_ZN10SmartDryer10changeTimeEv+0x268>
				{
					if(Hour > 0)
 8008fb0:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <_ZN10SmartDryer10changeTimeEv+0x260>
						Hour--;
 8008fb8:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute > 0)
						Minute--;
					else
						Minute = 59;
				}
				break;
 8008fc2:	e067      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
						Hour = 23;
 8008fc4:	2317      	movs	r3, #23
 8008fc6:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 8008fca:	e063      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
					if(Minute > 0)
 8008fcc:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d005      	beq.n	8008fe0 <_ZN10SmartDryer10changeTimeEv+0x27c>
						Minute--;
 8008fd4:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8008fde:	e059      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
						Minute = 59;
 8008fe0:	233b      	movs	r3, #59	; 0x3b
 8008fe2:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8008fe6:	e055      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(IsHours)
 8008fe8:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00d      	beq.n	800900c <_ZN10SmartDryer10changeTimeEv+0x2a8>
				{
					if(Hour < 23)
 8008ff0:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008ff4:	2b16      	cmp	r3, #22
 8008ff6:	d805      	bhi.n	8009004 <_ZN10SmartDryer10changeTimeEv+0x2a0>
						Hour++;
 8008ff8:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute < 59)
						Minute++;
					else
						Minute = 0;
				}
				break;
 8009002:	e047      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
						Hour = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 800900a:	e043      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
					if(Minute < 59)
 800900c:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8009010:	2b3a      	cmp	r3, #58	; 0x3a
 8009012:	d805      	bhi.n	8009020 <_ZN10SmartDryer10changeTimeEv+0x2bc>
						Minute++;
 8009014:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8009018:	3301      	adds	r3, #1
 800901a:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 800901e:	e039      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
						Minute = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8009026:	e035      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
			case DryerKey::OK_KEY:
				if(IsHours)
 8009028:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <_ZN10SmartDryer10changeTimeEv+0x2d4>
				{
					IsHours = false;
 8009030:	2300      	movs	r3, #0
 8009032:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
					NewTime.minute = Minute;
					NewTime.second = 0;
					clock->adjustTimeDate(NewTime);
					ExitChangeTime = true;
				}
				break;
 8009036:	e02d      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
					clock->getTimeDate(NewTime);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f107 0208 	add.w	r2, r7, #8
 8009040:	4611      	mov	r1, r2
 8009042:	4618      	mov	r0, r3
 8009044:	f7fa fc5c 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewTime.hour = Hour;
 8009048:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800904c:	72bb      	strb	r3, [r7, #10]
					NewTime.minute = Minute;
 800904e:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8009052:	727b      	strb	r3, [r7, #9]
					NewTime.second = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	723b      	strb	r3, [r7, #8]
					clock->adjustTimeDate(NewTime);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6858      	ldr	r0, [r3, #4]
 800905c:	f107 0308 	add.w	r3, r7, #8
 8009060:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009064:	f7fa fba2 	bl	80037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeTime = true;
 8009068:	2301      	movs	r3, #1
 800906a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 800906e:	e011      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
			case DryerKey::LONG_OK_KEY:
				if(!IsHours)
 8009070:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8009074:	f083 0301 	eor.w	r3, r3, #1
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d009      	beq.n	8009092 <_ZN10SmartDryer10changeTimeEv+0x32e>
				{
					IsHours = true;
 800907e:	2301      	movs	r3, #1
 8009080:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
				}
				break;
 8009084:	e005      	b.n	8009092 <_ZN10SmartDryer10changeTimeEv+0x32e>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeTime = true;
 8009086:	2301      	movs	r3, #1
 8009088:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 800908c:	e002      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
			default:
				break;
 800908e:	bf00      	nop
 8009090:	e000      	b.n	8009094 <_ZN10SmartDryer10changeTimeEv+0x330>
				break;
 8009092:	bf00      	nop
		}
		peripheralsControl();
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7fd fc45 	bl	8006924 <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, DELAY_SERIAL_ALIVE_TIMER))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a2:	2101      	movs	r1, #1
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fa fa6a 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d008      	beq.n	80090c2 <_ZN10SmartDryer10changeTimeEv+0x35e>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80090b8:	4610      	mov	r0, r2
 80090ba:	f7fc fd99 	bl	8005bf0 <_ZN13SerialMessage17isDeviceConnectedEv>
 80090be:	4603      	mov	r3, r0
 80090c0:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090c6:	7a5b      	ldrb	r3, [r3, #9]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f43f aea8 	beq.w	8008e1e <_ZN10SmartDryer10changeTimeEv+0xba>
		{
			serialComunicationCtrl();
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7fe f92c 	bl	800732c <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeTime)
 80090d4:	e6a3      	b.n	8008e1e <_ZN10SmartDryer10changeTimeEv+0xba>
 80090d6:	bf00      	nop
 80090d8:	080151d8 	.word	0x080151d8
 80090dc:	08015104 	.word	0x08015104
 80090e0:	08015320 	.word	0x08015320
	String Time = "", Date = "";
 80090e4:	f107 0310 	add.w	r3, r7, #16
 80090e8:	4618      	mov	r0, r3
 80090ea:	f007 fe24 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80090ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090f2:	4618      	mov	r0, r3
 80090f4:	f007 fe1f 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 80090f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80090fc:	4618      	mov	r0, r3
 80090fe:	f007 fe1a 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009102:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009106:	4618      	mov	r0, r3
 8009108:	f007 fe15 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800910c:	bf00      	nop
 800910e:	37ec      	adds	r7, #236	; 0xec
 8009110:	46bd      	mov	sp, r7
 8009112:	bd90      	pop	{r4, r7, pc}

08009114 <_ZN10SmartDryer10changeDateEv>:

void SmartDryer::changeDate()
{
 8009114:	b590      	push	{r4, r7, lr}
 8009116:	b0c5      	sub	sp, #276	; 0x114
 8009118:	af02      	add	r7, sp, #8
 800911a:	1d3b      	adds	r3, r7, #4
 800911c:	6018      	str	r0, [r3, #0]
	bool ExitChangeDate = false;
 800911e:	2300      	movs	r3, #0
 8009120:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t Day = 1, Month = 1, Year = 20;
 8009124:	2301      	movs	r3, #1
 8009126:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 800912a:	2301      	movs	r3, #1
 800912c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8009130:	2314      	movs	r3, #20
 8009132:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t WichDateVar = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	String Title = "", Number = "";
 800913c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009140:	4618      	mov	r0, r3
 8009142:	f007 fcc7 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8009146:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800914a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800914e:	49d9      	ldr	r1, [pc, #868]	; (80094b4 <_ZN10SmartDryer10changeDateEv+0x3a0>)
 8009150:	4618      	mov	r0, r3
 8009152:	f007 ff87 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009156:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800915a:	4618      	mov	r0, r3
 800915c:	f007 fcbb 	bl	8010ad6 <_ZNSaIcED1Ev>
 8009160:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009164:	4618      	mov	r0, r3
 8009166:	f007 fcb5 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800916a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800916e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009172:	49d0      	ldr	r1, [pc, #832]	; (80094b4 <_ZN10SmartDryer10changeDateEv+0x3a0>)
 8009174:	4618      	mov	r0, r3
 8009176:	f007 ff75 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800917a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800917e:	4618      	mov	r0, r3
 8009180:	f007 fca9 	bl	8010ad6 <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8009184:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009188:	4618      	mov	r0, r3
 800918a:	f007 fca3 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800918e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8009192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009196:	49c7      	ldr	r1, [pc, #796]	; (80094b4 <_ZN10SmartDryer10changeDateEv+0x3a0>)
 8009198:	4618      	mov	r0, r3
 800919a:	f007 ff63 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800919e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80091a2:	4618      	mov	r0, r3
 80091a4:	f007 fc97 	bl	8010ad6 <_ZNSaIcED1Ev>
 80091a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80091ac:	4618      	mov	r0, r3
 80091ae:	f007 fc91 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80091b2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80091b6:	f107 0314 	add.w	r3, r7, #20
 80091ba:	49be      	ldr	r1, [pc, #760]	; (80094b4 <_ZN10SmartDryer10changeDateEv+0x3a0>)
 80091bc:	4618      	mov	r0, r3
 80091be:	f007 ff51 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80091c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80091c6:	4618      	mov	r0, r3
 80091c8:	f007 fc85 	bl	8010ad6 <_ZNSaIcED1Ev>
	checkSerialDeviceTimer->restart();
 80091cc:	1d3b      	adds	r3, r7, #4
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fa f9c5 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	while(!ExitChangeDate)
 80091d8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f040 81da 	bne.w	8009596 <_ZN10SmartDryer10changeDateEv+0x482>
	{
		display->clearFrameBuffer();
 80091e2:	1d3b      	adds	r3, r7, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fb fc2a 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80091ee:	f107 0214 	add.w	r2, r7, #20
 80091f2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80091f6:	1d3b      	adds	r3, r7, #4
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	f7fd fba8 	bl	800694e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(WichDateVar == 0)
 80091fe:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009202:	2b00      	cmp	r3, #0
 8009204:	d12b      	bne.n	800925e <_ZN10SmartDryer10changeDateEv+0x14a>
		{
			Title = "Imposta mese";
 8009206:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800920a:	49ab      	ldr	r1, [pc, #684]	; (80094b8 <_ZN10SmartDryer10changeDateEv+0x3a4>)
 800920c:	4618      	mov	r0, r3
 800920e:	f007 fe76 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = String(monthNames[Month - 1]);
 8009212:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009216:	3b01      	subs	r3, #1
 8009218:	4aa8      	ldr	r2, [pc, #672]	; (80094bc <_ZN10SmartDryer10changeDateEv+0x3a8>)
 800921a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800921e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009222:	4618      	mov	r0, r3
 8009224:	f007 fc56 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8009228:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800922c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009230:	4621      	mov	r1, r4
 8009232:	4618      	mov	r0, r3
 8009234:	f007 ff16 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009238:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800923c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009240:	4611      	mov	r1, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f007 fd83 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009248:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800924c:	4618      	mov	r0, r3
 800924e:	f007 fd72 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009252:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009256:	4618      	mov	r0, r3
 8009258:	f007 fc3d 	bl	8010ad6 <_ZNSaIcED1Ev>
 800925c:	e03a      	b.n	80092d4 <_ZN10SmartDryer10changeDateEv+0x1c0>
		}
		else if(WichDateVar == 1)
 800925e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009262:	2b01      	cmp	r3, #1
 8009264:	d11b      	bne.n	800929e <_ZN10SmartDryer10changeDateEv+0x18a>
		{
			Title = "Imposta giorno";
 8009266:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800926a:	4995      	ldr	r1, [pc, #596]	; (80094c0 <_ZN10SmartDryer10changeDateEv+0x3ac>)
 800926c:	4618      	mov	r0, r3
 800926e:	f007 fe46 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Day);
 8009272:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8009276:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7fa f9b1 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009282:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8009286:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800928a:	4611      	mov	r1, r2
 800928c:	4618      	mov	r0, r3
 800928e:	f007 fd5e 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009292:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009296:	4618      	mov	r0, r3
 8009298:	f007 fd4d 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800929c:	e01a      	b.n	80092d4 <_ZN10SmartDryer10changeDateEv+0x1c0>
		}
		else
		{
			Title = "Imposta anno";
 800929e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80092a2:	4988      	ldr	r1, [pc, #544]	; (80094c4 <_ZN10SmartDryer10changeDateEv+0x3b0>)
 80092a4:	4618      	mov	r0, r3
 80092a6:	f007 fe2a 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Year);
 80092aa:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 80092ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80092b2:	4611      	mov	r1, r2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fa f995 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 80092ba:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80092be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80092c2:	4611      	mov	r1, r2
 80092c4:	4618      	mov	r0, r3
 80092c6:	f007 fd42 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80092ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80092ce:	4618      	mov	r0, r3
 80092d0:	f007 fd31 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80092d4:	1d3b      	adds	r3, r7, #4
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681c      	ldr	r4, [r3, #0]
 80092da:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80092de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80092e2:	4611      	mov	r1, r2
 80092e4:	4618      	mov	r0, r3
 80092e6:	f007 fe8a 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80092ea:	1d3b      	adds	r3, r7, #4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80092f4:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	2305      	movs	r3, #5
 80092fc:	2283      	movs	r2, #131	; 0x83
 80092fe:	4620      	mov	r0, r4
 8009300:	f7fb fbe3 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009304:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009308:	4618      	mov	r0, r3
 800930a:	f007 fd14 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 800930e:	1d3b      	adds	r3, r7, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681c      	ldr	r4, [r3, #0]
 8009314:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8009318:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f007 fe6d 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009324:	1d3b      	adds	r3, r7, #4
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800932e:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	231e      	movs	r3, #30
 8009336:	2283      	movs	r2, #131	; 0x83
 8009338:	4620      	mov	r0, r4
 800933a:	f7fb fbc6 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800933e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009342:	4618      	mov	r0, r3
 8009344:	f007 fcf7 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8009348:	1d3b      	adds	r3, r7, #4
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	1d3b      	adds	r3, r7, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009358:	2370      	movs	r3, #112	; 0x70
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	4613      	mov	r3, r2
 800935e:	221e      	movs	r2, #30
 8009360:	213c      	movs	r1, #60	; 0x3c
 8009362:	f7fb fe61 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8009366:	1d3b      	adds	r3, r7, #4
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6818      	ldr	r0, [r3, #0]
 800936c:	1d3b      	adds	r3, r7, #4
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009376:	236d      	movs	r3, #109	; 0x6d
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	4613      	mov	r3, r2
 800937c:	2237      	movs	r2, #55	; 0x37
 800937e:	213c      	movs	r1, #60	; 0x3c
 8009380:	f7fb fe52 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8009384:	1d3b      	adds	r3, r7, #4
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4618      	mov	r0, r3
 800938c:	f7fb fb66 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009390:	2308      	movs	r3, #8
 8009392:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		WichKey = keyboard->checkKey();
 8009396:	1d3b      	adds	r3, r7, #4
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	4618      	mov	r0, r3
 800939e:	f7fc f967 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		switch(WichKey)
 80093a8:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80093ac:	2b07      	cmp	r3, #7
 80093ae:	f200 80c8 	bhi.w	8009542 <_ZN10SmartDryer10changeDateEv+0x42e>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <_ZN10SmartDryer10changeDateEv+0x2a4>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	080093d9 	.word	0x080093d9
 80093bc:	08009445 	.word	0x08009445
 80093c0:	08009543 	.word	0x08009543
 80093c4:	080094cd 	.word	0x080094cd
 80093c8:	080093d9 	.word	0x080093d9
 80093cc:	08009445 	.word	0x08009445
 80093d0:	0800953b 	.word	0x0800953b
 80093d4:	08009527 	.word	0x08009527
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(WichDateVar == 1)
 80093d8:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d111      	bne.n	8009404 <_ZN10SmartDryer10changeDateEv+0x2f0>
				{
					if(Day > 1)
 80093e0:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d905      	bls.n	80093f4 <_ZN10SmartDryer10changeDateEv+0x2e0>
						Day--;
 80093e8:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80093ec:	3b01      	subs	r3, #1
 80093ee:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year > 20)
						Year--;
					else
						Year = 99;
				}
				break;
 80093f2:	e0a9      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
						Day = daysInMonth[Month - 1];
 80093f4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80093f8:	3b01      	subs	r3, #1
 80093fa:	4a33      	ldr	r2, [pc, #204]	; (80094c8 <_ZN10SmartDryer10changeDateEv+0x3b4>)
 80093fc:	5cd3      	ldrb	r3, [r2, r3]
 80093fe:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8009402:	e0a1      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
				else if(WichDateVar == 0)
 8009404:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10d      	bne.n	8009428 <_ZN10SmartDryer10changeDateEv+0x314>
					if(Month > 1)
 800940c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009410:	2b01      	cmp	r3, #1
 8009412:	d905      	bls.n	8009420 <_ZN10SmartDryer10changeDateEv+0x30c>
						Month--;
 8009414:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009418:	3b01      	subs	r3, #1
 800941a:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 800941e:	e093      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
						Month = 12;
 8009420:	230c      	movs	r3, #12
 8009422:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009426:	e08f      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
					if(Year > 20)
 8009428:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800942c:	2b14      	cmp	r3, #20
 800942e:	d905      	bls.n	800943c <_ZN10SmartDryer10changeDateEv+0x328>
						Year--;
 8009430:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009434:	3b01      	subs	r3, #1
 8009436:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 800943a:	e085      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
						Year = 99;
 800943c:	2363      	movs	r3, #99	; 0x63
 800943e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8009442:	e081      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(WichDateVar == 1)
 8009444:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009448:	2b01      	cmp	r3, #1
 800944a:	d112      	bne.n	8009472 <_ZN10SmartDryer10changeDateEv+0x35e>
				{
					if(Day < daysInMonth[Month - 1])
 800944c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009450:	3b01      	subs	r3, #1
 8009452:	4a1d      	ldr	r2, [pc, #116]	; (80094c8 <_ZN10SmartDryer10changeDateEv+0x3b4>)
 8009454:	5cd3      	ldrb	r3, [r2, r3]
 8009456:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 800945a:	429a      	cmp	r2, r3
 800945c:	d205      	bcs.n	800946a <_ZN10SmartDryer10changeDateEv+0x356>
						Day++;
 800945e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8009462:	3301      	adds	r3, #1
 8009464:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year < 99)
						Year++;
					else
						Year = 20;
				}
				break;
 8009468:	e06e      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
						Day = 1;
 800946a:	2301      	movs	r3, #1
 800946c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8009470:	e06a      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
				else if(WichDateVar == 0)
 8009472:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10d      	bne.n	8009496 <_ZN10SmartDryer10changeDateEv+0x382>
					if(Month < 12)
 800947a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800947e:	2b0b      	cmp	r3, #11
 8009480:	d805      	bhi.n	800948e <_ZN10SmartDryer10changeDateEv+0x37a>
						Month++;
 8009482:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009486:	3301      	adds	r3, #1
 8009488:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 800948c:	e05c      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
						Month = 1;
 800948e:	2301      	movs	r3, #1
 8009490:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009494:	e058      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
					if(Year < 99)
 8009496:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800949a:	2b62      	cmp	r3, #98	; 0x62
 800949c:	d805      	bhi.n	80094aa <_ZN10SmartDryer10changeDateEv+0x396>
						Year++;
 800949e:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80094a2:	3301      	adds	r3, #1
 80094a4:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 80094a8:	e04e      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
						Year = 20;
 80094aa:	2314      	movs	r3, #20
 80094ac:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 80094b0:	e04a      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
 80094b2:	bf00      	nop
 80094b4:	080151d8 	.word	0x080151d8
 80094b8:	08015330 	.word	0x08015330
 80094bc:	20000000 	.word	0x20000000
 80094c0:	08015340 	.word	0x08015340
 80094c4:	08015350 	.word	0x08015350
 80094c8:	08018258 	.word	0x08018258
			case DryerKey::OK_KEY:
				if(WichDateVar < 2)
 80094cc:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d805      	bhi.n	80094e0 <_ZN10SmartDryer10changeDateEv+0x3cc>
				{
					WichDateVar++;
 80094d4:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80094d8:	3301      	adds	r3, #1
 80094da:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
					NewDate.month = Month;
					NewDate.year = Year + 2000;
					clock->adjustTimeDate(NewDate);
					ExitChangeDate = true;
				}
				break;
 80094de:	e033      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
					clock->getTimeDate(NewDate);
 80094e0:	1d3b      	adds	r3, r7, #4
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f107 020c 	add.w	r2, r7, #12
 80094ea:	4611      	mov	r1, r2
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fa fa07 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewDate.day = Day;
 80094f2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80094f6:	73fb      	strb	r3, [r7, #15]
					NewDate.month = Month;
 80094f8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80094fc:	743b      	strb	r3, [r7, #16]
					NewDate.year = Year + 2000;
 80094fe:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009502:	b29b      	uxth	r3, r3
 8009504:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8009508:	b29b      	uxth	r3, r3
 800950a:	827b      	strh	r3, [r7, #18]
					clock->adjustTimeDate(NewDate);
 800950c:	1d3b      	adds	r3, r7, #4
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6858      	ldr	r0, [r3, #4]
 8009512:	f107 030c 	add.w	r3, r7, #12
 8009516:	e893 0006 	ldmia.w	r3, {r1, r2}
 800951a:	f7fa f947 	bl	80037ac <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeDate = true;
 800951e:	2301      	movs	r3, #1
 8009520:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8009524:	e010      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
			case DryerKey::LONG_OK_KEY:
				if(WichDateVar > 0)
 8009526:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00b      	beq.n	8009546 <_ZN10SmartDryer10changeDateEv+0x432>
				{
					WichDateVar--;
 800952e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009532:	3b01      	subs	r3, #1
 8009534:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				}
				break;
 8009538:	e005      	b.n	8009546 <_ZN10SmartDryer10changeDateEv+0x432>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeDate = true;
 800953a:	2301      	movs	r3, #1
 800953c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8009540:	e002      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
			default:
				break;
 8009542:	bf00      	nop
 8009544:	e000      	b.n	8009548 <_ZN10SmartDryer10changeDateEv+0x434>
				break;
 8009546:	bf00      	nop
		}
		peripheralsControl();
 8009548:	1d3b      	adds	r3, r7, #4
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	f7fd f9ea 	bl	8006924 <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, DELAY_SERIAL_ALIVE_TIMER))
 8009550:	1d3b      	adds	r3, r7, #4
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009556:	f241 3288 	movw	r2, #5000	; 0x1388
 800955a:	2101      	movs	r1, #1
 800955c:	4618      	mov	r0, r3
 800955e:	f7fa f80e 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00a      	beq.n	800957e <_ZN10SmartDryer10changeDateEv+0x46a>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 8009568:	1d3b      	adds	r3, r7, #4
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800956e:	1d3b      	adds	r3, r7, #4
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8009574:	4610      	mov	r0, r2
 8009576:	f7fc fb3b 	bl	8005bf0 <_ZN13SerialMessage17isDeviceConnectedEv>
 800957a:	4603      	mov	r3, r0
 800957c:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 800957e:	1d3b      	adds	r3, r7, #4
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009584:	7a5b      	ldrb	r3, [r3, #9]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f43f ae26 	beq.w	80091d8 <_ZN10SmartDryer10changeDateEv+0xc4>
		{
			serialComunicationCtrl();
 800958c:	1d3b      	adds	r3, r7, #4
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	f7fd fecc 	bl	800732c <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeDate)
 8009594:	e620      	b.n	80091d8 <_ZN10SmartDryer10changeDateEv+0xc4>
	String Time = "", Date = "";
 8009596:	f107 0314 	add.w	r3, r7, #20
 800959a:	4618      	mov	r0, r3
 800959c:	f007 fbcb 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80095a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095a4:	4618      	mov	r0, r3
 80095a6:	f007 fbc6 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 80095aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80095ae:	4618      	mov	r0, r3
 80095b0:	f007 fbc1 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80095b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80095b8:	4618      	mov	r0, r3
 80095ba:	f007 fbbc 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 80095be:	bf00      	nop
 80095c0:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd90      	pop	{r4, r7, pc}

080095c8 <_ZN10SmartDryer8showInfoEv>:

void SmartDryer::showInfo()
{
 80095c8:	b590      	push	{r4, r7, lr}
 80095ca:	b0cd      	sub	sp, #308	; 0x134
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	1d3b      	adds	r3, r7, #4
 80095d0:	6018      	str	r0, [r3, #0]
	bool ExitShowInfo = false;
 80095d2:	2300      	movs	r3, #0
 80095d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	String Time = "", Date = "";
 80095d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80095dc:	4618      	mov	r0, r3
 80095de:	f007 fa79 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80095e2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80095e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80095ea:	49af      	ldr	r1, [pc, #700]	; (80098a8 <_ZN10SmartDryer8showInfoEv+0x2e0>)
 80095ec:	4618      	mov	r0, r3
 80095ee:	f007 fd39 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80095f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80095f6:	4618      	mov	r0, r3
 80095f8:	f007 fa6d 	bl	8010ad6 <_ZNSaIcED1Ev>
 80095fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009600:	4618      	mov	r0, r3
 8009602:	f007 fa67 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8009606:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800960a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800960e:	49a6      	ldr	r1, [pc, #664]	; (80098a8 <_ZN10SmartDryer8showInfoEv+0x2e0>)
 8009610:	4618      	mov	r0, r3
 8009612:	f007 fd27 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009616:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800961a:	4618      	mov	r0, r3
 800961c:	f007 fa5b 	bl	8010ad6 <_ZNSaIcED1Ev>
	checkSerialDeviceTimer->restart();
 8009620:	1d3b      	adds	r3, r7, #4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009626:	4618      	mov	r0, r3
 8009628:	f7f9 ff9b 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	while(!ExitShowInfo)
 800962c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009630:	2b00      	cmp	r3, #0
 8009632:	f040 8129 	bne.w	8009888 <_ZN10SmartDryer8showInfoEv+0x2c0>
	{
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 8009636:	1d3b      	adds	r3, r7, #4
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800963e:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8009642:	1d39      	adds	r1, r7, #4
 8009644:	2301      	movs	r3, #1
 8009646:	6809      	ldr	r1, [r1, #0]
 8009648:	f7fc fea8 	bl	800639c <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800964c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009650:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8009654:	4a95      	ldr	r2, [pc, #596]	; (80098ac <_ZN10SmartDryer8showInfoEv+0x2e4>)
 8009656:	4618      	mov	r0, r3
 8009658:	f7fa fd90 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800965c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009660:	4618      	mov	r0, r3
 8009662:	f007 fb68 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 8009666:	1d3b      	adds	r3, r7, #4
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800966e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8009672:	1d39      	adds	r1, r7, #4
 8009674:	2301      	movs	r3, #1
 8009676:	6809      	ldr	r1, [r1, #0]
 8009678:	f7fc fe90 	bl	800639c <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800967c:	f107 030c 	add.w	r3, r7, #12
 8009680:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8009684:	4a8a      	ldr	r2, [pc, #552]	; (80098b0 <_ZN10SmartDryer8showInfoEv+0x2e8>)
 8009686:	4618      	mov	r0, r3
 8009688:	f7fa fd78 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800968c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009690:	4618      	mov	r0, r3
 8009692:	f007 fb50 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 8009696:	1d3b      	adds	r3, r7, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f7fb f9d0 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80096a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80096a6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80096aa:	1d3b      	adds	r3, r7, #4
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	f7fd f94e 	bl	800694e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Condizioni camera", NHDST7565_LCD::CENTER_POS, 8, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 80096b2:	1d3b      	adds	r3, r7, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681c      	ldr	r4, [r3, #0]
 80096b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80096bc:	4618      	mov	r0, r3
 80096be:	f007 fa09 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80096c2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80096c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80096ca:	497a      	ldr	r1, [pc, #488]	; (80098b4 <_ZN10SmartDryer8showInfoEv+0x2ec>)
 80096cc:	4618      	mov	r0, r3
 80096ce:	f007 fcc9 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80096d2:	1d3b      	adds	r3, r7, #4
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096dc:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	2308      	movs	r3, #8
 80096e4:	2283      	movs	r2, #131	; 0x83
 80096e6:	4620      	mov	r0, r4
 80096e8:	f7fb f9ef 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80096ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80096f0:	4618      	mov	r0, r3
 80096f2:	f007 fb20 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80096f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80096fa:	4618      	mov	r0, r3
 80096fc:	f007 f9eb 	bl	8010ad6 <_ZNSaIcED1Ev>
		display->drawString(TempReaded + "    " + HumidityReaded, NHDST7565_LCD::CENTER_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009700:	1d3b      	adds	r3, r7, #4
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681c      	ldr	r4, [r3, #0]
 8009706:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800970a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800970e:	4a6a      	ldr	r2, [pc, #424]	; (80098b8 <_ZN10SmartDryer8showInfoEv+0x2f0>)
 8009710:	4618      	mov	r0, r3
 8009712:	f7fa fd09 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8009716:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800971a:	f107 020c 	add.w	r2, r7, #12
 800971e:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8009722:	4618      	mov	r0, r3
 8009724:	f7fa fd13 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8009728:	1d3b      	adds	r3, r7, #4
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009732:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	2314      	movs	r3, #20
 800973a:	2283      	movs	r2, #131	; 0x83
 800973c:	4620      	mov	r0, r4
 800973e:	f7fb f9c4 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009742:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009746:	4618      	mov	r0, r3
 8009748:	f007 faf5 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800974c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009750:	4618      	mov	r0, r3
 8009752:	f007 faf0 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Versione SW", NHDST7565_LCD::CENTER_POS, 40, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 8009756:	1d3b      	adds	r3, r7, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681c      	ldr	r4, [r3, #0]
 800975c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009760:	4618      	mov	r0, r3
 8009762:	f007 f9b7 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8009766:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800976a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800976e:	4953      	ldr	r1, [pc, #332]	; (80098bc <_ZN10SmartDryer8showInfoEv+0x2f4>)
 8009770:	4618      	mov	r0, r3
 8009772:	f007 fc77 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009776:	1d3b      	adds	r3, r7, #4
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009780:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	2328      	movs	r3, #40	; 0x28
 8009788:	2283      	movs	r2, #131	; 0x83
 800978a:	4620      	mov	r0, r4
 800978c:	f7fb f99d 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009790:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009794:	4618      	mov	r0, r3
 8009796:	f007 face 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800979a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800979e:	4618      	mov	r0, r3
 80097a0:	f007 f999 	bl	8010ad6 <_ZNSaIcED1Ev>
		display->drawString(String(SW_VERSION), NHDST7565_LCD::CENTER_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80097a4:	1d3b      	adds	r3, r7, #4
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681c      	ldr	r4, [r3, #0]
 80097aa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80097ae:	4618      	mov	r0, r3
 80097b0:	f007 f990 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80097b4:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80097b8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80097bc:	4940      	ldr	r1, [pc, #256]	; (80098c0 <_ZN10SmartDryer8showInfoEv+0x2f8>)
 80097be:	4618      	mov	r0, r3
 80097c0:	f007 fc50 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80097c4:	1d3b      	adds	r3, r7, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80097ce:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	2332      	movs	r3, #50	; 0x32
 80097d6:	2283      	movs	r2, #131	; 0x83
 80097d8:	4620      	mov	r0, r4
 80097da:	f7fb f976 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80097de:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80097e2:	4618      	mov	r0, r3
 80097e4:	f007 faa7 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80097e8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80097ec:	4618      	mov	r0, r3
 80097ee:	f007 f972 	bl	8010ad6 <_ZNSaIcED1Ev>
		display->sendFrameBuffer();
 80097f2:	1d3b      	adds	r3, r7, #4
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fb f92f 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 80097fe:	2308      	movs	r3, #8
 8009800:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		WichKey = keyboard->checkKey();
 8009804:	1d3b      	adds	r3, r7, #4
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	4618      	mov	r0, r3
 800980c:	f7fb ff30 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 8009810:	4603      	mov	r3, r0
 8009812:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		switch(WichKey)
 8009816:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800981a:	2b06      	cmp	r3, #6
 800981c:	d000      	beq.n	8009820 <_ZN10SmartDryer8showInfoEv+0x258>
		{
			case DryerKey::LONG_LEFT_KEY:
				ExitShowInfo = true;
				break;
			default:
				break;
 800981e:	e003      	b.n	8009828 <_ZN10SmartDryer8showInfoEv+0x260>
				ExitShowInfo = true;
 8009820:	2301      	movs	r3, #1
 8009822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				break;
 8009826:	bf00      	nop
		}
		peripheralsControl();
 8009828:	1d3b      	adds	r3, r7, #4
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	f7fd f87a 	bl	8006924 <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, DELAY_SERIAL_ALIVE_TIMER))
 8009830:	1d3b      	adds	r3, r7, #4
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009836:	f241 3288 	movw	r2, #5000	; 0x1388
 800983a:	2101      	movs	r1, #1
 800983c:	4618      	mov	r0, r3
 800983e:	f7f9 fe9e 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00a      	beq.n	800985e <_ZN10SmartDryer8showInfoEv+0x296>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 8009848:	1d3b      	adds	r3, r7, #4
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800984e:	1d3b      	adds	r3, r7, #4
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8009854:	4610      	mov	r0, r2
 8009856:	f7fc f9cb 	bl	8005bf0 <_ZN13SerialMessage17isDeviceConnectedEv>
 800985a:	4603      	mov	r3, r0
 800985c:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 800985e:	1d3b      	adds	r3, r7, #4
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009864:	7a5b      	ldrb	r3, [r3, #9]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <_ZN10SmartDryer8showInfoEv+0x2aa>
		{
			serialComunicationCtrl();
 800986a:	1d3b      	adds	r3, r7, #4
 800986c:	6818      	ldr	r0, [r3, #0]
 800986e:	f7fd fd5d 	bl	800732c <_ZN10SmartDryer22serialComunicationCtrlEv>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 8009872:	f107 030c 	add.w	r3, r7, #12
 8009876:	4618      	mov	r0, r3
 8009878:	f007 fa5d 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 800987c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009880:	4618      	mov	r0, r3
 8009882:	f007 fa58 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitShowInfo)
 8009886:	e6d1      	b.n	800962c <_ZN10SmartDryer8showInfoEv+0x64>
	String Time = "", Date = "";
 8009888:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800988c:	4618      	mov	r0, r3
 800988e:	f007 fa52 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009892:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009896:	4618      	mov	r0, r3
 8009898:	f007 fa4d 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800989c:	bf00      	nop
 800989e:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd90      	pop	{r4, r7, pc}
 80098a6:	bf00      	nop
 80098a8:	080151d8 	.word	0x080151d8
 80098ac:	08015360 	.word	0x08015360
 80098b0:	08015364 	.word	0x08015364
 80098b4:	08015368 	.word	0x08015368
 80098b8:	0801537c 	.word	0x0801537c
 80098bc:	08015384 	.word	0x08015384
 80098c0:	08015390 	.word	0x08015390

080098c4 <_ZN10SmartDryer13changeProgramEh>:

void SmartDryer::changeProgram(uint8_t WichProgram)
{
 80098c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098c6:	b0ef      	sub	sp, #444	; 0x1bc
 80098c8:	af04      	add	r7, sp, #16
 80098ca:	1d3b      	adds	r3, r7, #4
 80098cc:	6018      	str	r0, [r3, #0]
 80098ce:	460a      	mov	r2, r1
 80098d0:	1cfb      	adds	r3, r7, #3
 80098d2:	701a      	strb	r2, [r3, #0]
	bool ExitChangeProgram = false;
 80098d4:	2300      	movs	r3, #0
 80098d6:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
	uint8_t WichSetting = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
	const uint8_t MAX_SETTINGS = 5;
 80098e0:	2305      	movs	r3, #5
 80098e2:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	PROGRAM_STRUCURE NewProgram = dryerPrograms[WichProgram];
 80098e6:	1cfb      	adds	r3, r7, #3
 80098e8:	781a      	ldrb	r2, [r3, #0]
 80098ea:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80098ee:	1d3b      	adds	r3, r7, #4
 80098f0:	6819      	ldr	r1, [r3, #0]
 80098f2:	4613      	mov	r3, r2
 80098f4:	005b      	lsls	r3, r3, #1
 80098f6:	4413      	add	r3, r2
 80098f8:	00db      	lsls	r3, r3, #3
 80098fa:	440b      	add	r3, r1
 80098fc:	3348      	adds	r3, #72	; 0x48
 80098fe:	4605      	mov	r5, r0
 8009900:	1d1c      	adds	r4, r3, #4
 8009902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009906:	e894 0003 	ldmia.w	r4, {r0, r1}
 800990a:	e885 0003 	stmia.w	r5, {r0, r1}
//	uint8_t StartHour = dryerPrograms[WichProgram].startTime.hour, StartMinute = dryerPrograms[WichProgram].startTime.minute;
//	uint8_t EndHour = dryerPrograms[WichProgram].endTime.hour, EndMinute = dryerPrograms[WichProgram].endTime.minute;
	uint32_t TemperatureSetted = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 800990e:	1cfb      	adds	r3, r7, #3
 8009910:	781a      	ldrb	r2, [r3, #0]
 8009912:	1d3b      	adds	r3, r7, #4
 8009914:	6819      	ldr	r1, [r3, #0]
 8009916:	4613      	mov	r3, r2
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	4413      	add	r3, r2
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	440b      	add	r3, r1
 8009920:	3360      	adds	r3, #96	; 0x60
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f7f7 fb7d 	bl	8001024 <__aeabi_f2uiz>
 800992a:	4603      	mov	r3, r0
 800992c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	String Time = "", Date = "";
 8009930:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009934:	4618      	mov	r0, r3
 8009936:	f007 f8cd 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800993a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800993e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009942:	4992      	ldr	r1, [pc, #584]	; (8009b8c <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 8009944:	4618      	mov	r0, r3
 8009946:	f007 fb8d 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800994a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800994e:	4618      	mov	r0, r3
 8009950:	f007 f8c1 	bl	8010ad6 <_ZNSaIcED1Ev>
 8009954:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009958:	4618      	mov	r0, r3
 800995a:	f007 f8bb 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800995e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8009962:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009966:	4989      	ldr	r1, [pc, #548]	; (8009b8c <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 8009968:	4618      	mov	r0, r3
 800996a:	f007 fb7b 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800996e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009972:	4618      	mov	r0, r3
 8009974:	f007 f8af 	bl	8010ad6 <_ZNSaIcED1Ev>
	String Title = "", SubTitle = "", Number = "";
 8009978:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800997c:	4618      	mov	r0, r3
 800997e:	f007 f8a9 	bl	8010ad4 <_ZNSaIcEC1Ev>
 8009982:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8009986:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800998a:	4980      	ldr	r1, [pc, #512]	; (8009b8c <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 800998c:	4618      	mov	r0, r3
 800998e:	f007 fb69 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009992:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009996:	4618      	mov	r0, r3
 8009998:	f007 f89d 	bl	8010ad6 <_ZNSaIcED1Ev>
 800999c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80099a0:	4618      	mov	r0, r3
 80099a2:	f007 f897 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80099a6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80099aa:	f107 0320 	add.w	r3, r7, #32
 80099ae:	4977      	ldr	r1, [pc, #476]	; (8009b8c <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 80099b0:	4618      	mov	r0, r3
 80099b2:	f007 fb57 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80099b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80099ba:	4618      	mov	r0, r3
 80099bc:	f007 f88b 	bl	8010ad6 <_ZNSaIcED1Ev>
 80099c0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80099c4:	4618      	mov	r0, r3
 80099c6:	f007 f885 	bl	8010ad4 <_ZNSaIcEC1Ev>
 80099ca:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80099ce:	f107 0308 	add.w	r3, r7, #8
 80099d2:	496e      	ldr	r1, [pc, #440]	; (8009b8c <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 80099d4:	4618      	mov	r0, r3
 80099d6:	f007 fb45 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80099da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80099de:	4618      	mov	r0, r3
 80099e0:	f007 f879 	bl	8010ad6 <_ZNSaIcED1Ev>
	checkSerialDeviceTimer->restart();
 80099e4:	1d3b      	adds	r3, r7, #4
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f9 fdb9 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	while(!ExitChangeProgram)
 80099f0:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f040 82e2 	bne.w	8009fbe <_ZN10SmartDryer13changeProgramEh+0x6fa>
	{
		Title = "Programma " + std::to_string(WichProgram + 1);
 80099fa:	1cfb      	adds	r3, r7, #3
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009a04:	4611      	mov	r1, r2
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7f9 fdec 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009a0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009a10:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8009a14:	495e      	ldr	r1, [pc, #376]	; (8009b90 <_ZN10SmartDryer13changeProgramEh+0x2cc>)
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fa fb6e 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8009a1c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009a20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a24:	4611      	mov	r1, r2
 8009a26:	4618      	mov	r0, r3
 8009a28:	f007 f991 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009a2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009a30:	4618      	mov	r0, r3
 8009a32:	f007 f980 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f007 f97b 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		switch(WichSetting)
 8009a40:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	f200 80af 	bhi.w	8009ba8 <_ZN10SmartDryer13changeProgramEh+0x2e4>
 8009a4a:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <_ZN10SmartDryer13changeProgramEh+0x18c>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009a65 	.word	0x08009a65
 8009a54:	08009aa1 	.word	0x08009aa1
 8009a58:	08009add 	.word	0x08009add
 8009a5c:	08009b19 	.word	0x08009b19
 8009a60:	08009b55 	.word	0x08009b55
		{
			case 0:
				SubTitle = "Ora di inizio";
 8009a64:	f107 0320 	add.w	r3, r7, #32
 8009a68:	494a      	ldr	r1, [pc, #296]	; (8009b94 <_ZN10SmartDryer13changeProgramEh+0x2d0>)
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f007 fa47 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.hour);
 8009a70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009a74:	791b      	ldrb	r3, [r3, #4]
 8009a76:	461a      	mov	r2, r3
 8009a78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7f9 fdb0 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009a84:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8009a88:	f107 0308 	add.w	r3, r7, #8
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f007 f95d 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009a94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f007 f94c 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009a9e:	e084      	b.n	8009baa <_ZN10SmartDryer13changeProgramEh+0x2e6>
			case 1:
				SubTitle = "Minuto di inizio";
 8009aa0:	f107 0320 	add.w	r3, r7, #32
 8009aa4:	493c      	ldr	r1, [pc, #240]	; (8009b98 <_ZN10SmartDryer13changeProgramEh+0x2d4>)
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f007 fa29 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.minute);
 8009aac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ab0:	78db      	ldrb	r3, [r3, #3]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7f9 fd92 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009ac0:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8009ac4:	f107 0308 	add.w	r3, r7, #8
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f007 f93f 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009ad0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f007 f92e 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009ada:	e066      	b.n	8009baa <_ZN10SmartDryer13changeProgramEh+0x2e6>
			case 2:
				SubTitle = "Ora di fine";
 8009adc:	f107 0320 	add.w	r3, r7, #32
 8009ae0:	492e      	ldr	r1, [pc, #184]	; (8009b9c <_ZN10SmartDryer13changeProgramEh+0x2d8>)
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f007 fa0b 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.hour);
 8009ae8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009aec:	7b1b      	ldrb	r3, [r3, #12]
 8009aee:	461a      	mov	r2, r3
 8009af0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009af4:	4611      	mov	r1, r2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f9 fd74 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009afc:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8009b00:	f107 0308 	add.w	r3, r7, #8
 8009b04:	4611      	mov	r1, r2
 8009b06:	4618      	mov	r0, r3
 8009b08:	f007 f921 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009b0c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009b10:	4618      	mov	r0, r3
 8009b12:	f007 f910 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009b16:	e048      	b.n	8009baa <_ZN10SmartDryer13changeProgramEh+0x2e6>
			case 3:
				SubTitle = "Minuto di fine";
 8009b18:	f107 0320 	add.w	r3, r7, #32
 8009b1c:	4920      	ldr	r1, [pc, #128]	; (8009ba0 <_ZN10SmartDryer13changeProgramEh+0x2dc>)
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f007 f9ed 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.minute);
 8009b24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009b28:	7adb      	ldrb	r3, [r3, #11]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009b30:	4611      	mov	r1, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f9 fd56 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 8009b38:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8009b3c:	f107 0308 	add.w	r3, r7, #8
 8009b40:	4611      	mov	r1, r2
 8009b42:	4618      	mov	r0, r3
 8009b44:	f007 f903 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009b48:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f007 f8f2 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009b52:	e02a      	b.n	8009baa <_ZN10SmartDryer13changeProgramEh+0x2e6>
			case 4:
				SubTitle = "Temperatura";
 8009b54:	f107 0320 	add.w	r3, r7, #32
 8009b58:	4912      	ldr	r1, [pc, #72]	; (8009ba4 <_ZN10SmartDryer13changeProgramEh+0x2e0>)
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f007 f9cf 	bl	8010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(TemperatureSetted);
 8009b60:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009b64:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fc fa47 	bl	8005ffc <_ZNSt7__cxx119to_stringEm>
 8009b6e:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009b72:	f107 0308 	add.w	r3, r7, #8
 8009b76:	4611      	mov	r1, r2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f007 f8e8 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009b7e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009b82:	4618      	mov	r0, r3
 8009b84:	f007 f8d7 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009b88:	e00f      	b.n	8009baa <_ZN10SmartDryer13changeProgramEh+0x2e6>
 8009b8a:	bf00      	nop
 8009b8c:	080151d8 	.word	0x080151d8
 8009b90:	08015398 	.word	0x08015398
 8009b94:	080153a4 	.word	0x080153a4
 8009b98:	080153b4 	.word	0x080153b4
 8009b9c:	080153c8 	.word	0x080153c8
 8009ba0:	080153d4 	.word	0x080153d4
 8009ba4:	080153e4 	.word	0x080153e4
			default:
				break;
 8009ba8:	bf00      	nop
		}
		display->clearFrameBuffer();
 8009baa:	1d3b      	adds	r3, r7, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fa ff46 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8009bb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009bba:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009bbe:	1d3b      	adds	r3, r7, #4
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	f7fc fec4 	bl	800694e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 7, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009bc6:	1d3b      	adds	r3, r7, #4
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681c      	ldr	r4, [r3, #0]
 8009bcc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009bd0:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f007 fa11 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009bdc:	1d3b      	adds	r3, r7, #4
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009be6:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	2307      	movs	r3, #7
 8009bee:	2283      	movs	r2, #131	; 0x83
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f7fa ff6a 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009bf6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f007 f89b 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(SubTitle, NHDST7565_LCD::CENTER_POS, 22, display->displayFonts[NHDST7565_LCD::W_6_H_10]);
 8009c00:	1d3b      	adds	r3, r7, #4
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681c      	ldr	r4, [r3, #0]
 8009c06:	f107 0220 	add.w	r2, r7, #32
 8009c0a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009c0e:	4611      	mov	r1, r2
 8009c10:	4618      	mov	r0, r3
 8009c12:	f007 f9f4 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009c16:	1d3b      	adds	r3, r7, #4
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009c20:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	2316      	movs	r3, #22
 8009c28:	2283      	movs	r2, #131	; 0x83
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f7fa ff4d 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009c30:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009c34:	4618      	mov	r0, r3
 8009c36:	f007 f87e 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 41, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009c3a:	1d3b      	adds	r3, r7, #4
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681c      	ldr	r4, [r3, #0]
 8009c40:	f107 0208 	add.w	r2, r7, #8
 8009c44:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009c48:	4611      	mov	r1, r2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f007 f9d7 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009c50:	1d3b      	adds	r3, r7, #4
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009c5a:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	2329      	movs	r3, #41	; 0x29
 8009c62:	2283      	movs	r2, #131	; 0x83
 8009c64:	4620      	mov	r0, r4
 8009c66:	f7fa ff30 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009c6a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f007 f861 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 40, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8009c74:	1d3b      	adds	r3, r7, #4
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6818      	ldr	r0, [r3, #0]
 8009c7a:	1d3b      	adds	r3, r7, #4
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009c84:	2370      	movs	r3, #112	; 0x70
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	2228      	movs	r2, #40	; 0x28
 8009c8c:	213c      	movs	r1, #60	; 0x3c
 8009c8e:	f7fb f9cb 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 60, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8009c92:	1d3b      	adds	r3, r7, #4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6818      	ldr	r0, [r3, #0]
 8009c98:	1d3b      	adds	r3, r7, #4
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009ca2:	236d      	movs	r3, #109	; 0x6d
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	223c      	movs	r2, #60	; 0x3c
 8009caa:	213c      	movs	r1, #60	; 0x3c
 8009cac:	f7fb f9bc 	bl	8005028 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8009cb0:	1d3b      	adds	r3, r7, #4
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fa fed0 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009cbc:	2308      	movs	r3, #8
 8009cbe:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		WichKey = keyboard->checkKey();
 8009cc2:	1d3b      	adds	r3, r7, #4
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fb fcd1 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		switch(WichKey)
 8009cd4:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8009cd8:	2b07      	cmp	r3, #7
 8009cda:	f200 8146 	bhi.w	8009f6a <_ZN10SmartDryer13changeProgramEh+0x6a6>
 8009cde:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <_ZN10SmartDryer13changeProgramEh+0x420>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009d05 	.word	0x08009d05
 8009ce8:	08009de1 	.word	0x08009de1
 8009cec:	08009f4f 	.word	0x08009f4f
 8009cf0:	08009ebd 	.word	0x08009ebd
 8009cf4:	08009d05 	.word	0x08009d05
 8009cf8:	08009de1 	.word	0x08009de1
 8009cfc:	08009f63 	.word	0x08009f63
 8009d00:	08009f6b 	.word	0x08009f6b
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				switch(WichSetting)
 8009d04:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009d08:	2b04      	cmp	r3, #4
 8009d0a:	d867      	bhi.n	8009ddc <_ZN10SmartDryer13changeProgramEh+0x518>
 8009d0c:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <_ZN10SmartDryer13changeProgramEh+0x450>)
 8009d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d12:	bf00      	nop
 8009d14:	08009d29 	.word	0x08009d29
 8009d18:	08009d4f 	.word	0x08009d4f
 8009d1c:	08009d75 	.word	0x08009d75
 8009d20:	08009d9b 	.word	0x08009d9b
 8009d24:	08009dc1 	.word	0x08009dc1
				{
					case 0:
						if(NewProgram.startTime.hour > 0)
 8009d28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d2c:	791b      	ldrb	r3, [r3, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d008      	beq.n	8009d44 <_ZN10SmartDryer13changeProgramEh+0x480>
							NewProgram.startTime.hour--;
 8009d32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d36:	791b      	ldrb	r3, [r3, #4]
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d40:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 23;
						break;
 8009d42:	e04c      	b.n	8009dde <_ZN10SmartDryer13changeProgramEh+0x51a>
							NewProgram.startTime.hour = 23;
 8009d44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d48:	2217      	movs	r2, #23
 8009d4a:	711a      	strb	r2, [r3, #4]
						break;
 8009d4c:	e047      	b.n	8009dde <_ZN10SmartDryer13changeProgramEh+0x51a>
					case 1:
						if(NewProgram.startTime.minute > 0)
 8009d4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d52:	78db      	ldrb	r3, [r3, #3]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d008      	beq.n	8009d6a <_ZN10SmartDryer13changeProgramEh+0x4a6>
							NewProgram.startTime.minute -= 10;
 8009d58:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d5c:	78db      	ldrb	r3, [r3, #3]
 8009d5e:	3b0a      	subs	r3, #10
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d66:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 50;
						break;
 8009d68:	e039      	b.n	8009dde <_ZN10SmartDryer13changeProgramEh+0x51a>
							NewProgram.startTime.minute = 50;
 8009d6a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d6e:	2232      	movs	r2, #50	; 0x32
 8009d70:	70da      	strb	r2, [r3, #3]
						break;
 8009d72:	e034      	b.n	8009dde <_ZN10SmartDryer13changeProgramEh+0x51a>
					case 2:
						if(NewProgram.endTime.hour > 0)
 8009d74:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d78:	7b1b      	ldrb	r3, [r3, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d008      	beq.n	8009d90 <_ZN10SmartDryer13changeProgramEh+0x4cc>
							NewProgram.endTime.hour--;
 8009d7e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d82:	7b1b      	ldrb	r3, [r3, #12]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d8c:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 23;
						break;
 8009d8e:	e026      	b.n	8009dde <_ZN10SmartDryer13changeProgramEh+0x51a>
							NewProgram.endTime.hour = 23;
 8009d90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d94:	2217      	movs	r2, #23
 8009d96:	731a      	strb	r2, [r3, #12]
						break;
 8009d98:	e021      	b.n	8009dde <_ZN10SmartDryer13changeProgramEh+0x51a>
					case 3:
						if(NewProgram.endTime.minute > 0)
 8009d9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d9e:	7adb      	ldrb	r3, [r3, #11]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d008      	beq.n	8009db6 <_ZN10SmartDryer13changeProgramEh+0x4f2>
							NewProgram.endTime.minute -= 10;
 8009da4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009da8:	7adb      	ldrb	r3, [r3, #11]
 8009daa:	3b0a      	subs	r3, #10
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009db2:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 50;
						break;
 8009db4:	e013      	b.n	8009dde <_ZN10SmartDryer13changeProgramEh+0x51a>
							NewProgram.endTime.minute = 50;
 8009db6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009dba:	2232      	movs	r2, #50	; 0x32
 8009dbc:	72da      	strb	r2, [r3, #11]
						break;
 8009dbe:	e00e      	b.n	8009dde <_ZN10SmartDryer13changeProgramEh+0x51a>
					case 4:
						if(TemperatureSetted > 30)
 8009dc0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009dc4:	2b1e      	cmp	r3, #30
 8009dc6:	d905      	bls.n	8009dd4 <_ZN10SmartDryer13changeProgramEh+0x510>
							TemperatureSetted -= 5;
 8009dc8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009dcc:	3b05      	subs	r3, #5
 8009dce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 90;
						break;
 8009dd2:	e004      	b.n	8009dde <_ZN10SmartDryer13changeProgramEh+0x51a>
							TemperatureSetted = 90;
 8009dd4:	235a      	movs	r3, #90	; 0x5a
 8009dd6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 8009dda:	e000      	b.n	8009dde <_ZN10SmartDryer13changeProgramEh+0x51a>
					default:
						break;
 8009ddc:	bf00      	nop
				}
				break;
 8009dde:	e0c7      	b.n	8009f70 <_ZN10SmartDryer13changeProgramEh+0x6ac>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				switch(WichSetting)
 8009de0:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009de4:	2b04      	cmp	r3, #4
 8009de6:	d867      	bhi.n	8009eb8 <_ZN10SmartDryer13changeProgramEh+0x5f4>
 8009de8:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <_ZN10SmartDryer13changeProgramEh+0x52c>)
 8009dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dee:	bf00      	nop
 8009df0:	08009e05 	.word	0x08009e05
 8009df4:	08009e2b 	.word	0x08009e2b
 8009df8:	08009e51 	.word	0x08009e51
 8009dfc:	08009e77 	.word	0x08009e77
 8009e00:	08009e9d 	.word	0x08009e9d
				{
					case 0:
						if(NewProgram.startTime.hour < 23)
 8009e04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e08:	791b      	ldrb	r3, [r3, #4]
 8009e0a:	2b16      	cmp	r3, #22
 8009e0c:	d808      	bhi.n	8009e20 <_ZN10SmartDryer13changeProgramEh+0x55c>
							NewProgram.startTime.hour++;
 8009e0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e12:	791b      	ldrb	r3, [r3, #4]
 8009e14:	3301      	adds	r3, #1
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e1c:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 0;
						break;
 8009e1e:	e04c      	b.n	8009eba <_ZN10SmartDryer13changeProgramEh+0x5f6>
							NewProgram.startTime.hour = 0;
 8009e20:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e24:	2200      	movs	r2, #0
 8009e26:	711a      	strb	r2, [r3, #4]
						break;
 8009e28:	e047      	b.n	8009eba <_ZN10SmartDryer13changeProgramEh+0x5f6>
					case 1:
						if(NewProgram.startTime.minute < 50)
 8009e2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e2e:	78db      	ldrb	r3, [r3, #3]
 8009e30:	2b31      	cmp	r3, #49	; 0x31
 8009e32:	d808      	bhi.n	8009e46 <_ZN10SmartDryer13changeProgramEh+0x582>
							NewProgram.startTime.minute += 10;
 8009e34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e38:	78db      	ldrb	r3, [r3, #3]
 8009e3a:	330a      	adds	r3, #10
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e42:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 0;
						break;
 8009e44:	e039      	b.n	8009eba <_ZN10SmartDryer13changeProgramEh+0x5f6>
							NewProgram.startTime.minute = 0;
 8009e46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	70da      	strb	r2, [r3, #3]
						break;
 8009e4e:	e034      	b.n	8009eba <_ZN10SmartDryer13changeProgramEh+0x5f6>
					case 2:
						if(NewProgram.endTime.hour < 23)
 8009e50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e54:	7b1b      	ldrb	r3, [r3, #12]
 8009e56:	2b16      	cmp	r3, #22
 8009e58:	d808      	bhi.n	8009e6c <_ZN10SmartDryer13changeProgramEh+0x5a8>
							NewProgram.endTime.hour++;
 8009e5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e5e:	7b1b      	ldrb	r3, [r3, #12]
 8009e60:	3301      	adds	r3, #1
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e68:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 0;
						break;
 8009e6a:	e026      	b.n	8009eba <_ZN10SmartDryer13changeProgramEh+0x5f6>
							NewProgram.endTime.hour = 0;
 8009e6c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e70:	2200      	movs	r2, #0
 8009e72:	731a      	strb	r2, [r3, #12]
						break;
 8009e74:	e021      	b.n	8009eba <_ZN10SmartDryer13changeProgramEh+0x5f6>
					case 3:
						if(NewProgram.endTime.minute < 50)
 8009e76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e7a:	7adb      	ldrb	r3, [r3, #11]
 8009e7c:	2b31      	cmp	r3, #49	; 0x31
 8009e7e:	d808      	bhi.n	8009e92 <_ZN10SmartDryer13changeProgramEh+0x5ce>
							NewProgram.endTime.minute += 10;
 8009e80:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e84:	7adb      	ldrb	r3, [r3, #11]
 8009e86:	330a      	adds	r3, #10
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e8e:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 0;
						break;
 8009e90:	e013      	b.n	8009eba <_ZN10SmartDryer13changeProgramEh+0x5f6>
							NewProgram.endTime.minute = 0;
 8009e92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e96:	2200      	movs	r2, #0
 8009e98:	72da      	strb	r2, [r3, #11]
						break;
 8009e9a:	e00e      	b.n	8009eba <_ZN10SmartDryer13changeProgramEh+0x5f6>
					case 4:
						if(TemperatureSetted < 90)
 8009e9c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009ea0:	2b59      	cmp	r3, #89	; 0x59
 8009ea2:	d805      	bhi.n	8009eb0 <_ZN10SmartDryer13changeProgramEh+0x5ec>
							TemperatureSetted += 5;
 8009ea4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009ea8:	3305      	adds	r3, #5
 8009eaa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 30;
						break;
 8009eae:	e004      	b.n	8009eba <_ZN10SmartDryer13changeProgramEh+0x5f6>
							TemperatureSetted = 30;
 8009eb0:	231e      	movs	r3, #30
 8009eb2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 8009eb6:	e000      	b.n	8009eba <_ZN10SmartDryer13changeProgramEh+0x5f6>
					default:
						break;
 8009eb8:	bf00      	nop
				}
				break;
 8009eba:	e059      	b.n	8009f70 <_ZN10SmartDryer13changeProgramEh+0x6ac>
			case DryerKey::OK_KEY:
				if(WichSetting < MAX_SETTINGS - 1)
 8009ebc:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d805      	bhi.n	8009ed0 <_ZN10SmartDryer13changeProgramEh+0x60c>
					WichSetting++;
 8009ec4:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009ec8:	3301      	adds	r3, #1
 8009eca:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
					{
						saveDryerProgram(WichProgram);
					}
					ExitChangeProgram = true;
				}
				break;
 8009ece:	e04f      	b.n	8009f70 <_ZN10SmartDryer13changeProgramEh+0x6ac>
					checkSettedProgramTime(WichProgram, NewProgram);
 8009ed0:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8009ed4:	1cfb      	adds	r3, r7, #3
 8009ed6:	f893 c000 	ldrb.w	ip, [r3]
 8009eda:	1d3d      	adds	r5, r7, #4
 8009edc:	466e      	mov	r6, sp
 8009ede:	f104 0308 	add.w	r3, r4, #8
 8009ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009ee4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8009ee8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009eec:	4661      	mov	r1, ip
 8009eee:	6828      	ldr	r0, [r5, #0]
 8009ef0:	f7fd f8ea 	bl	80070c8 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
					dryerPrograms[WichProgram].tempSetted = (float)TemperatureSetted;
 8009ef4:	1cfb      	adds	r3, r7, #3
 8009ef6:	781c      	ldrb	r4, [r3, #0]
 8009ef8:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8009efc:	f7f6 feea 	bl	8000cd4 <__aeabi_ui2f>
 8009f00:	4601      	mov	r1, r0
 8009f02:	1d3b      	adds	r3, r7, #4
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	4623      	mov	r3, r4
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	4423      	add	r3, r4
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	4413      	add	r3, r2
 8009f10:	3360      	adds	r3, #96	; 0x60
 8009f12:	6019      	str	r1, [r3, #0]
					dryerPrograms[WichProgram].programSetted = true;
 8009f14:	1cfb      	adds	r3, r7, #3
 8009f16:	781a      	ldrb	r2, [r3, #0]
 8009f18:	1d3b      	adds	r3, r7, #4
 8009f1a:	6819      	ldr	r1, [r3, #0]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	005b      	lsls	r3, r3, #1
 8009f20:	4413      	add	r3, r2
 8009f22:	00db      	lsls	r3, r3, #3
 8009f24:	440b      	add	r3, r1
 8009f26:	334c      	adds	r3, #76	; 0x4c
 8009f28:	2201      	movs	r2, #1
 8009f2a:	701a      	strb	r2, [r3, #0]
					if(eepromEnabled)
 8009f2c:	1d3b      	adds	r3, r7, #4
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d006      	beq.n	8009f46 <_ZN10SmartDryer13changeProgramEh+0x682>
						saveDryerProgram(WichProgram);
 8009f38:	1cfb      	adds	r3, r7, #3
 8009f3a:	781a      	ldrb	r2, [r3, #0]
 8009f3c:	1d3b      	adds	r3, r7, #4
 8009f3e:	4611      	mov	r1, r2
 8009f40:	6818      	ldr	r0, [r3, #0]
 8009f42:	f7fc fdfb 	bl	8006b3c <_ZN10SmartDryer16saveDryerProgramEh>
					ExitChangeProgram = true;
 8009f46:	2301      	movs	r3, #1
 8009f48:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 8009f4c:	e010      	b.n	8009f70 <_ZN10SmartDryer13changeProgramEh+0x6ac>
			case DryerKey::LEFT_KEY:
				if(WichSetting > 0)
 8009f4e:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00b      	beq.n	8009f6e <_ZN10SmartDryer13changeProgramEh+0x6aa>
					WichSetting--;
 8009f56:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
				break;
 8009f60:	e005      	b.n	8009f6e <_ZN10SmartDryer13changeProgramEh+0x6aa>
			case DryerKey::LONG_OK_KEY:

				break;
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeProgram = true;
 8009f62:	2301      	movs	r3, #1
 8009f64:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 8009f68:	e002      	b.n	8009f70 <_ZN10SmartDryer13changeProgramEh+0x6ac>
			default:
				break;
 8009f6a:	bf00      	nop
 8009f6c:	e000      	b.n	8009f70 <_ZN10SmartDryer13changeProgramEh+0x6ac>
				break;
 8009f6e:	bf00      	nop
		}
		peripheralsControl();
 8009f70:	1d3b      	adds	r3, r7, #4
 8009f72:	6818      	ldr	r0, [r3, #0]
 8009f74:	f7fc fcd6 	bl	8006924 <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, DELAY_SERIAL_ALIVE_TIMER))
 8009f78:	1d3b      	adds	r3, r7, #4
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f82:	2101      	movs	r1, #1
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7f9 fafa 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00a      	beq.n	8009fa6 <_ZN10SmartDryer13changeProgramEh+0x6e2>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 8009f90:	1d3b      	adds	r3, r7, #4
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f96:	1d3b      	adds	r3, r7, #4
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	f7fb fe27 	bl	8005bf0 <_ZN13SerialMessage17isDeviceConnectedEv>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 8009fa6:	1d3b      	adds	r3, r7, #4
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fac:	7a5b      	ldrb	r3, [r3, #9]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f43f ad1e 	beq.w	80099f0 <_ZN10SmartDryer13changeProgramEh+0x12c>
		{
			serialComunicationCtrl();
 8009fb4:	1d3b      	adds	r3, r7, #4
 8009fb6:	6818      	ldr	r0, [r3, #0]
 8009fb8:	f7fd f9b8 	bl	800732c <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeProgram)
 8009fbc:	e518      	b.n	80099f0 <_ZN10SmartDryer13changeProgramEh+0x12c>
	String Title = "", SubTitle = "", Number = "";
 8009fbe:	f107 0308 	add.w	r3, r7, #8
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f006 feb7 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009fc8:	f107 0320 	add.w	r3, r7, #32
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f006 feb2 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009fd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f006 fead 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 8009fdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f006 fea8 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009fe6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009fea:	4618      	mov	r0, r3
 8009fec:	f006 fea3 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8009ff0:	bf00      	nop
 8009ff2:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ffa:	bf00      	nop

08009ffc <_ZN10SmartDryer12startProgramEh>:

void SmartDryer::startProgram(uint8_t WichProgram)
{
 8009ffc:	b590      	push	{r4, r7, lr}
 8009ffe:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 800a002:	af02      	add	r7, sp, #8
 800a004:	1d3b      	adds	r3, r7, #4
 800a006:	6018      	str	r0, [r3, #0]
 800a008:	460a      	mov	r2, r1
 800a00a:	1cfb      	adds	r3, r7, #3
 800a00c:	701a      	strb	r2, [r3, #0]
	bool ExitStartProgram = false;
 800a00e:	2300      	movs	r3, #0
 800a010:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
	bool ProgramEnd = false;
 800a014:	2300      	movs	r3, #0
 800a016:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
	String Time = "", Date = "";
 800a01a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a01e:	4618      	mov	r0, r3
 800a020:	f006 fd58 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a024:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800a028:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a02c:	49ce      	ldr	r1, [pc, #824]	; (800a368 <_ZN10SmartDryer12startProgramEh+0x36c>)
 800a02e:	4618      	mov	r0, r3
 800a030:	f007 f818 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a034:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a038:	4618      	mov	r0, r3
 800a03a:	f006 fd4c 	bl	8010ad6 <_ZNSaIcED1Ev>
 800a03e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800a042:	4618      	mov	r0, r3
 800a044:	f006 fd46 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a048:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800a04c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a050:	49c5      	ldr	r1, [pc, #788]	; (800a368 <_ZN10SmartDryer12startProgramEh+0x36c>)
 800a052:	4618      	mov	r0, r3
 800a054:	f007 f806 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a058:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800a05c:	4618      	mov	r0, r3
 800a05e:	f006 fd3a 	bl	8010ad6 <_ZNSaIcED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 800a062:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a066:	4618      	mov	r0, r3
 800a068:	f006 fd34 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a06c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800a070:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a074:	49bc      	ldr	r1, [pc, #752]	; (800a368 <_ZN10SmartDryer12startProgramEh+0x36c>)
 800a076:	4618      	mov	r0, r3
 800a078:	f006 fff4 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a07c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a080:	4618      	mov	r0, r3
 800a082:	f006 fd28 	bl	8010ad6 <_ZNSaIcED1Ev>
 800a086:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a08a:	4618      	mov	r0, r3
 800a08c:	f006 fd22 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a090:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800a094:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a098:	49b3      	ldr	r1, [pc, #716]	; (800a368 <_ZN10SmartDryer12startProgramEh+0x36c>)
 800a09a:	4618      	mov	r0, r3
 800a09c:	f006 ffe2 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a0a0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f006 fd16 	bl	8010ad6 <_ZNSaIcED1Ev>
 800a0aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f006 fd10 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a0b4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800a0b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a0bc:	49aa      	ldr	r1, [pc, #680]	; (800a368 <_ZN10SmartDryer12startProgramEh+0x36c>)
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f006 ffd0 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a0c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f006 fd04 	bl	8010ad6 <_ZNSaIcED1Ev>
 800a0ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f006 fcfe 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a0d8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800a0dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a0e0:	49a1      	ldr	r1, [pc, #644]	; (800a368 <_ZN10SmartDryer12startProgramEh+0x36c>)
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f006 ffbe 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a0e8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f006 fcf2 	bl	8010ad6 <_ZNSaIcED1Ev>
	String TempRead = "0C", TempSet = "0";
 800a0f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f006 fcec 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a0fc:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800a100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a104:	4999      	ldr	r1, [pc, #612]	; (800a36c <_ZN10SmartDryer12startProgramEh+0x370>)
 800a106:	4618      	mov	r0, r3
 800a108:	f006 ffac 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a10c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a110:	4618      	mov	r0, r3
 800a112:	f006 fce0 	bl	8010ad6 <_ZNSaIcED1Ev>
 800a116:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800a11a:	4618      	mov	r0, r3
 800a11c:	f006 fcda 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a120:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a124:	f107 0314 	add.w	r3, r7, #20
 800a128:	4991      	ldr	r1, [pc, #580]	; (800a370 <_ZN10SmartDryer12startProgramEh+0x374>)
 800a12a:	4618      	mov	r0, r3
 800a12c:	f006 ff9a 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a130:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800a134:	4618      	mov	r0, r3
 800a136:	f006 fcce 	bl	8010ad6 <_ZNSaIcED1Ev>
	DS1307_RTC::TIME_DATE_T ActualTime;
	checkSerialDeviceTimer->restart();
 800a13a:	1d3b      	adds	r3, r7, #4
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a140:	4618      	mov	r0, r3
 800a142:	f7f9 fa0e 	bl	8003562 <_ZN11ChronoTimer7restartEv>
	StartHour = dryerPrograms[WichProgram].startTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.hour);
 800a146:	1cfb      	adds	r3, r7, #3
 800a148:	781a      	ldrb	r2, [r3, #0]
 800a14a:	1d3b      	adds	r3, r7, #4
 800a14c:	6819      	ldr	r1, [r3, #0]
 800a14e:	4613      	mov	r3, r2
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	4413      	add	r3, r2
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	440b      	add	r3, r1
 800a158:	3350      	adds	r3, #80	; 0x50
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2400      	movs	r4, #0
 800a15e:	2b09      	cmp	r3, #9
 800a160:	d912      	bls.n	800a188 <_ZN10SmartDryer12startProgramEh+0x18c>
 800a162:	1cfb      	adds	r3, r7, #3
 800a164:	781a      	ldrb	r2, [r3, #0]
 800a166:	1d3b      	adds	r3, r7, #4
 800a168:	6819      	ldr	r1, [r3, #0]
 800a16a:	4613      	mov	r3, r2
 800a16c:	005b      	lsls	r3, r3, #1
 800a16e:	4413      	add	r3, r2
 800a170:	00db      	lsls	r3, r3, #3
 800a172:	440b      	add	r3, r1
 800a174:	3350      	adds	r3, #80	; 0x50
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	461a      	mov	r2, r3
 800a17a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a17e:	4611      	mov	r1, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f7f9 fa2f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a186:	e01a      	b.n	800a1be <_ZN10SmartDryer12startProgramEh+0x1c2>
 800a188:	1cfb      	adds	r3, r7, #3
 800a18a:	781a      	ldrb	r2, [r3, #0]
 800a18c:	1d3b      	adds	r3, r7, #4
 800a18e:	6819      	ldr	r1, [r3, #0]
 800a190:	4613      	mov	r3, r2
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	4413      	add	r3, r2
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	440b      	add	r3, r1
 800a19a:	3350      	adds	r3, #80	; 0x50
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7f9 fa1c 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a1ac:	2401      	movs	r4, #1
 800a1ae:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a1b2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800a1b6:	496e      	ldr	r1, [pc, #440]	; (800a370 <_ZN10SmartDryer12startProgramEh+0x374>)
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7f9 ff9d 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a1be:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800a1c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f006 fdc0 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a1ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f006 fdaf 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a1d8:	2c00      	cmp	r4, #0
 800a1da:	d004      	beq.n	800a1e6 <_ZN10SmartDryer12startProgramEh+0x1ea>
 800a1dc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f006 fda8 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	StartMinute = dryerPrograms[WichProgram].startTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.minute);
 800a1e6:	1cfb      	adds	r3, r7, #3
 800a1e8:	781a      	ldrb	r2, [r3, #0]
 800a1ea:	1d3b      	adds	r3, r7, #4
 800a1ec:	6819      	ldr	r1, [r3, #0]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	005b      	lsls	r3, r3, #1
 800a1f2:	4413      	add	r3, r2
 800a1f4:	00db      	lsls	r3, r3, #3
 800a1f6:	440b      	add	r3, r1
 800a1f8:	334f      	adds	r3, #79	; 0x4f
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2400      	movs	r4, #0
 800a1fe:	2b09      	cmp	r3, #9
 800a200:	d912      	bls.n	800a228 <_ZN10SmartDryer12startProgramEh+0x22c>
 800a202:	1cfb      	adds	r3, r7, #3
 800a204:	781a      	ldrb	r2, [r3, #0]
 800a206:	1d3b      	adds	r3, r7, #4
 800a208:	6819      	ldr	r1, [r3, #0]
 800a20a:	4613      	mov	r3, r2
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	4413      	add	r3, r2
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	440b      	add	r3, r1
 800a214:	334f      	adds	r3, #79	; 0x4f
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	461a      	mov	r2, r3
 800a21a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a21e:	4611      	mov	r1, r2
 800a220:	4618      	mov	r0, r3
 800a222:	f7f9 f9df 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a226:	e01a      	b.n	800a25e <_ZN10SmartDryer12startProgramEh+0x262>
 800a228:	1cfb      	adds	r3, r7, #3
 800a22a:	781a      	ldrb	r2, [r3, #0]
 800a22c:	1d3b      	adds	r3, r7, #4
 800a22e:	6819      	ldr	r1, [r3, #0]
 800a230:	4613      	mov	r3, r2
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	4413      	add	r3, r2
 800a236:	00db      	lsls	r3, r3, #3
 800a238:	440b      	add	r3, r1
 800a23a:	334f      	adds	r3, #79	; 0x4f
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a244:	4611      	mov	r1, r2
 800a246:	4618      	mov	r0, r3
 800a248:	f7f9 f9cc 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a24c:	2401      	movs	r4, #1
 800a24e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a252:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800a256:	4946      	ldr	r1, [pc, #280]	; (800a370 <_ZN10SmartDryer12startProgramEh+0x374>)
 800a258:	4618      	mov	r0, r3
 800a25a:	f7f9 ff4d 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a25e:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800a262:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a266:	4611      	mov	r1, r2
 800a268:	4618      	mov	r0, r3
 800a26a:	f006 fd70 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a26e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a272:	4618      	mov	r0, r3
 800a274:	f006 fd5f 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a278:	2c00      	cmp	r4, #0
 800a27a:	d004      	beq.n	800a286 <_ZN10SmartDryer12startProgramEh+0x28a>
 800a27c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a280:	4618      	mov	r0, r3
 800a282:	f006 fd58 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndHour = dryerPrograms[WichProgram].endTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.hour);
 800a286:	1cfb      	adds	r3, r7, #3
 800a288:	781a      	ldrb	r2, [r3, #0]
 800a28a:	1d3b      	adds	r3, r7, #4
 800a28c:	6819      	ldr	r1, [r3, #0]
 800a28e:	4613      	mov	r3, r2
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	4413      	add	r3, r2
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	440b      	add	r3, r1
 800a298:	3358      	adds	r3, #88	; 0x58
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	2400      	movs	r4, #0
 800a29e:	2b09      	cmp	r3, #9
 800a2a0:	d912      	bls.n	800a2c8 <_ZN10SmartDryer12startProgramEh+0x2cc>
 800a2a2:	1cfb      	adds	r3, r7, #3
 800a2a4:	781a      	ldrb	r2, [r3, #0]
 800a2a6:	1d3b      	adds	r3, r7, #4
 800a2a8:	6819      	ldr	r1, [r3, #0]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	005b      	lsls	r3, r3, #1
 800a2ae:	4413      	add	r3, r2
 800a2b0:	00db      	lsls	r3, r3, #3
 800a2b2:	440b      	add	r3, r1
 800a2b4:	3358      	adds	r3, #88	; 0x58
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a2be:	4611      	mov	r1, r2
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7f9 f98f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a2c6:	e01a      	b.n	800a2fe <_ZN10SmartDryer12startProgramEh+0x302>
 800a2c8:	1cfb      	adds	r3, r7, #3
 800a2ca:	781a      	ldrb	r2, [r3, #0]
 800a2cc:	1d3b      	adds	r3, r7, #4
 800a2ce:	6819      	ldr	r1, [r3, #0]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	005b      	lsls	r3, r3, #1
 800a2d4:	4413      	add	r3, r2
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	440b      	add	r3, r1
 800a2da:	3358      	adds	r3, #88	; 0x58
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7f9 f97c 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a2ec:	2401      	movs	r4, #1
 800a2ee:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a2f2:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800a2f6:	491e      	ldr	r1, [pc, #120]	; (800a370 <_ZN10SmartDryer12startProgramEh+0x374>)
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7f9 fefd 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a2fe:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800a302:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a306:	4611      	mov	r1, r2
 800a308:	4618      	mov	r0, r3
 800a30a:	f006 fd20 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a30e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a312:	4618      	mov	r0, r3
 800a314:	f006 fd0f 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a318:	2c00      	cmp	r4, #0
 800a31a:	d004      	beq.n	800a326 <_ZN10SmartDryer12startProgramEh+0x32a>
 800a31c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a320:	4618      	mov	r0, r3
 800a322:	f006 fd08 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndMinute = dryerPrograms[WichProgram].endTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.minute);
 800a326:	1cfb      	adds	r3, r7, #3
 800a328:	781a      	ldrb	r2, [r3, #0]
 800a32a:	1d3b      	adds	r3, r7, #4
 800a32c:	6819      	ldr	r1, [r3, #0]
 800a32e:	4613      	mov	r3, r2
 800a330:	005b      	lsls	r3, r3, #1
 800a332:	4413      	add	r3, r2
 800a334:	00db      	lsls	r3, r3, #3
 800a336:	440b      	add	r3, r1
 800a338:	3357      	adds	r3, #87	; 0x57
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	2400      	movs	r4, #0
 800a33e:	2b09      	cmp	r3, #9
 800a340:	d918      	bls.n	800a374 <_ZN10SmartDryer12startProgramEh+0x378>
 800a342:	1cfb      	adds	r3, r7, #3
 800a344:	781a      	ldrb	r2, [r3, #0]
 800a346:	1d3b      	adds	r3, r7, #4
 800a348:	6819      	ldr	r1, [r3, #0]
 800a34a:	4613      	mov	r3, r2
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	4413      	add	r3, r2
 800a350:	00db      	lsls	r3, r3, #3
 800a352:	440b      	add	r3, r1
 800a354:	3357      	adds	r3, #87	; 0x57
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	461a      	mov	r2, r3
 800a35a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f7f9 f93f 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a366:	e020      	b.n	800a3aa <_ZN10SmartDryer12startProgramEh+0x3ae>
 800a368:	080151d8 	.word	0x080151d8
 800a36c:	080153f0 	.word	0x080153f0
 800a370:	080153f4 	.word	0x080153f4
 800a374:	1cfb      	adds	r3, r7, #3
 800a376:	781a      	ldrb	r2, [r3, #0]
 800a378:	1d3b      	adds	r3, r7, #4
 800a37a:	6819      	ldr	r1, [r3, #0]
 800a37c:	4613      	mov	r3, r2
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	4413      	add	r3, r2
 800a382:	00db      	lsls	r3, r3, #3
 800a384:	440b      	add	r3, r1
 800a386:	3357      	adds	r3, #87	; 0x57
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a390:	4611      	mov	r1, r2
 800a392:	4618      	mov	r0, r3
 800a394:	f7f9 f926 	bl	80035e4 <_ZNSt7__cxx119to_stringEi>
 800a398:	2401      	movs	r4, #1
 800a39a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a39e:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800a3a2:	49de      	ldr	r1, [pc, #888]	; (800a71c <_ZN10SmartDryer12startProgramEh+0x720>)
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7f9 fea7 	bl	80040f8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a3aa:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800a3ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f006 fcca 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a3ba:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f006 fcb9 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a3c4:	2c00      	cmp	r4, #0
 800a3c6:	d004      	beq.n	800a3d2 <_ZN10SmartDryer12startProgramEh+0x3d6>
 800a3c8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f006 fcb2 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	TempSet = floatString(dryerPrograms[WichProgram].tempSetted, 1) + "C";
 800a3d2:	1cfb      	adds	r3, r7, #3
 800a3d4:	781a      	ldrb	r2, [r3, #0]
 800a3d6:	1d3b      	adds	r3, r7, #4
 800a3d8:	6819      	ldr	r1, [r3, #0]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	4413      	add	r3, r2
 800a3e0:	00db      	lsls	r3, r3, #3
 800a3e2:	440b      	add	r3, r1
 800a3e4:	3360      	adds	r3, #96	; 0x60
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 800a3ec:	1d39      	adds	r1, r7, #4
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	6809      	ldr	r1, [r1, #0]
 800a3f2:	f7fb ffd3 	bl	800639c <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a3f6:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a3fa:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 800a3fe:	4ac8      	ldr	r2, [pc, #800]	; (800a720 <_ZN10SmartDryer12startProgramEh+0x724>)
 800a400:	4618      	mov	r0, r3
 800a402:	f7f9 febb 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a406:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800a40a:	f107 0314 	add.w	r3, r7, #20
 800a40e:	4611      	mov	r1, r2
 800a410:	4618      	mov	r0, r3
 800a412:	f006 fc9c 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a416:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a41a:	4618      	mov	r0, r3
 800a41c:	f006 fc8b 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a420:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800a424:	4618      	mov	r0, r3
 800a426:	f006 fc86 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitStartProgram)
 800a42a:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f040 83b2 	bne.w	800ab98 <_ZN10SmartDryer12startProgramEh+0xb9c>
	{
		if(programStartedTimer->isFinished(true, 500))
 800a434:	1d3b      	adds	r3, r7, #4
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a43e:	2101      	movs	r1, #1
 800a440:	4618      	mov	r0, r3
 800a442:	f7f9 f89c 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d008      	beq.n	800a45e <_ZN10SmartDryer12startProgramEh+0x462>
		{
			clock->getTimeDate(ActualTime);
 800a44c:	1d3b      	adds	r3, r7, #4
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f107 020c 	add.w	r2, r7, #12
 800a456:	4611      	mov	r1, r2
 800a458:	4618      	mov	r0, r3
 800a45a:	f7f9 fa51 	bl	8003900 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		}
		TempRead = floatString(chamberTemperature.readedValueFL, 1) + "C";
 800a45e:	1d3b      	adds	r3, r7, #4
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a466:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 800a46a:	1d39      	adds	r1, r7, #4
 800a46c:	2301      	movs	r3, #1
 800a46e:	6809      	ldr	r1, [r1, #0]
 800a470:	f7fb ff94 	bl	800639c <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a474:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a478:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 800a47c:	4aa8      	ldr	r2, [pc, #672]	; (800a720 <_ZN10SmartDryer12startProgramEh+0x724>)
 800a47e:	4618      	mov	r0, r3
 800a480:	f7f9 fe7c 	bl	800417c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a484:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 800a488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a48c:	4611      	mov	r1, r2
 800a48e:	4618      	mov	r0, r3
 800a490:	f006 fc5d 	bl	8010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a494:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a498:	4618      	mov	r0, r3
 800a49a:	f006 fc4c 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a49e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f006 fc47 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 800a4a8:	1d3b      	adds	r3, r7, #4
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fa fac7 	bl	8004a42 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800a4b4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800a4b8:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800a4bc:	1d3b      	adds	r3, r7, #4
 800a4be:	6818      	ldr	r0, [r3, #0]
 800a4c0:	f7fc fa45 	bl	800694e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Temp. letta", NHDST7565_LCD::LEFT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a4c4:	1d3b      	adds	r3, r7, #4
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681c      	ldr	r4, [r3, #0]
 800a4ca:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f006 fb00 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a4d4:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 800a4d8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a4dc:	4991      	ldr	r1, [pc, #580]	; (800a724 <_ZN10SmartDryer12startProgramEh+0x728>)
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f006 fdc0 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a4e4:	1d3b      	adds	r3, r7, #4
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a4ee:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	230a      	movs	r3, #10
 800a4f6:	2282      	movs	r2, #130	; 0x82
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f7fa fae6 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a4fe:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a502:	4618      	mov	r0, r3
 800a504:	f006 fc17 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a508:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a50c:	4618      	mov	r0, r3
 800a50e:	f006 fae2 	bl	8010ad6 <_ZNSaIcED1Ev>
		display->drawString("Temp. target", NHDST7565_LCD::RIGHT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a512:	1d3b      	adds	r3, r7, #4
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681c      	ldr	r4, [r3, #0]
 800a518:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a51c:	4618      	mov	r0, r3
 800a51e:	f006 fad9 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a522:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a526:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a52a:	497f      	ldr	r1, [pc, #508]	; (800a728 <_ZN10SmartDryer12startProgramEh+0x72c>)
 800a52c:	4618      	mov	r0, r3
 800a52e:	f006 fd99 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a532:	1d3b      	adds	r3, r7, #4
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a53c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	230a      	movs	r3, #10
 800a544:	2284      	movs	r2, #132	; 0x84
 800a546:	4620      	mov	r0, r4
 800a548:	f7fa fabf 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a54c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a550:	4618      	mov	r0, r3
 800a552:	f006 fbf0 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a556:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a55a:	4618      	mov	r0, r3
 800a55c:	f006 fabb 	bl	8010ad6 <_ZNSaIcED1Ev>
		display->drawString(TempRead, NHDST7565_LCD::LEFT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a560:	1d3b      	adds	r3, r7, #4
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681c      	ldr	r4, [r3, #0]
 800a566:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a56a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a56e:	4611      	mov	r1, r2
 800a570:	4618      	mov	r0, r3
 800a572:	f006 fd44 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a576:	1d3b      	adds	r3, r7, #4
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a580:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	2314      	movs	r3, #20
 800a588:	2282      	movs	r2, #130	; 0x82
 800a58a:	4620      	mov	r0, r4
 800a58c:	f7fa fa9d 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a590:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a594:	4618      	mov	r0, r3
 800a596:	f006 fbce 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(TempSet, NHDST7565_LCD::RIGHT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a59a:	1d3b      	adds	r3, r7, #4
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681c      	ldr	r4, [r3, #0]
 800a5a0:	f107 0214 	add.w	r2, r7, #20
 800a5a4:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f006 fd27 	bl	8010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a5b0:	1d3b      	adds	r3, r7, #4
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a5ba:	f507 7119 	add.w	r1, r7, #612	; 0x264
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	2314      	movs	r3, #20
 800a5c2:	2284      	movs	r2, #132	; 0x84
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f7fa fa80 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a5ca:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f006 fbb1 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Inizio programma", NHDST7565_LCD::LEFT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a5d4:	1d3b      	adds	r3, r7, #4
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681c      	ldr	r4, [r3, #0]
 800a5da:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f006 fa78 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a5e4:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800a5e8:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800a5ec:	494f      	ldr	r1, [pc, #316]	; (800a72c <_ZN10SmartDryer12startProgramEh+0x730>)
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f006 fd38 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a5f4:	1d3b      	adds	r3, r7, #4
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a5fe:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	2328      	movs	r3, #40	; 0x28
 800a606:	2282      	movs	r2, #130	; 0x82
 800a608:	4620      	mov	r0, r4
 800a60a:	f7fa fa5e 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a60e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800a612:	4618      	mov	r0, r3
 800a614:	f006 fb8f 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a618:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800a61c:	4618      	mov	r0, r3
 800a61e:	f006 fa5a 	bl	8010ad6 <_ZNSaIcED1Ev>
		display->drawString("Fine programma", NHDST7565_LCD::RIGHT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a622:	1d3b      	adds	r3, r7, #4
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681c      	ldr	r4, [r3, #0]
 800a628:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800a62c:	4618      	mov	r0, r3
 800a62e:	f006 fa51 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a632:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 800a636:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800a63a:	493d      	ldr	r1, [pc, #244]	; (800a730 <_ZN10SmartDryer12startProgramEh+0x734>)
 800a63c:	4618      	mov	r0, r3
 800a63e:	f006 fd11 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a642:	1d3b      	adds	r3, r7, #4
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a64c:	f507 7126 	add.w	r1, r7, #664	; 0x298
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	2328      	movs	r3, #40	; 0x28
 800a654:	2284      	movs	r2, #132	; 0x84
 800a656:	4620      	mov	r0, r4
 800a658:	f7fa fa37 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a65c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800a660:	4618      	mov	r0, r3
 800a662:	f006 fb68 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a666:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800a66a:	4618      	mov	r0, r3
 800a66c:	f006 fa33 	bl	8010ad6 <_ZNSaIcED1Ev>
		display->drawString(StartHour + ":" + StartMinute, NHDST7565_LCD::LEFT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a670:	1d3b      	adds	r3, r7, #4
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681c      	ldr	r4, [r3, #0]
 800a676:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800a67a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800a67e:	4a2d      	ldr	r2, [pc, #180]	; (800a734 <_ZN10SmartDryer12startProgramEh+0x738>)
 800a680:	4618      	mov	r0, r3
 800a682:	f7f9 fd51 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800a686:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800a68a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800a68e:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 800a692:	4618      	mov	r0, r3
 800a694:	f7f9 fd5b 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800a698:	1d3b      	adds	r3, r7, #4
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a6a2:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	2332      	movs	r3, #50	; 0x32
 800a6aa:	2282      	movs	r2, #130	; 0x82
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f7fa fa0c 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a6b2:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f006 fb3d 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a6bc:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f006 fb38 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(EndHour + ":" + EndMinute, NHDST7565_LCD::RIGHT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a6c6:	1d3b      	adds	r3, r7, #4
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681c      	ldr	r4, [r3, #0]
 800a6cc:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a6d0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800a6d4:	4a17      	ldr	r2, [pc, #92]	; (800a734 <_ZN10SmartDryer12startProgramEh+0x738>)
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7f9 fd26 	bl	8004128 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800a6dc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800a6e0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a6e4:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7f9 fd30 	bl	800414e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800a6ee:	1d3b      	adds	r3, r7, #4
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a6f8:	f507 7139 	add.w	r1, r7, #740	; 0x2e4
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	2332      	movs	r3, #50	; 0x32
 800a700:	2284      	movs	r2, #132	; 0x84
 800a702:	4620      	mov	r0, r4
 800a704:	f7fa f9e1 	bl	8004aca <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a708:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800a70c:	4618      	mov	r0, r3
 800a70e:	f006 fb12 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a712:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a716:	4618      	mov	r0, r3
 800a718:	e00e      	b.n	800a738 <_ZN10SmartDryer12startProgramEh+0x73c>
 800a71a:	bf00      	nop
 800a71c:	080153f4 	.word	0x080153f4
 800a720:	08015360 	.word	0x08015360
 800a724:	080153f8 	.word	0x080153f8
 800a728:	08015404 	.word	0x08015404
 800a72c:	08015414 	.word	0x08015414
 800a730:	08015428 	.word	0x08015428
 800a734:	08015438 	.word	0x08015438
 800a738:	f006 fafd 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->sendFrameBuffer();
 800a73c:	1d3b      	adds	r3, r7, #4
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4618      	mov	r0, r3
 800a744:	f7fa f98a 	bl	8004a5c <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800a748:	2308      	movs	r3, #8
 800a74a:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		WichKey = keyboard->checkKey();
 800a74e:	1d3b      	adds	r3, r7, #4
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	4618      	mov	r0, r3
 800a756:	f7fa ff8b 	bl	8005670 <_ZN8DryerKey8checkKeyEv>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		switch(WichKey)
 800a760:	f897 3365 	ldrb.w	r3, [r7, #869]	; 0x365
 800a764:	2b03      	cmp	r3, #3
 800a766:	d055      	beq.n	800a814 <_ZN10SmartDryer12startProgramEh+0x818>
 800a768:	2b06      	cmp	r3, #6
 800a76a:	d000      	beq.n	800a76e <_ZN10SmartDryer12startProgramEh+0x772>
					saveDryerProgram(WichProgram);
				}
				ExitStartProgram = true;
				break;
			default:
				break;
 800a76c:	e053      	b.n	800a816 <_ZN10SmartDryer12startProgramEh+0x81a>
				statusParam->dryerOn = false;
 800a76e:	1d3b      	adds	r3, r7, #4
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a774:	2200      	movs	r2, #0
 800a776:	701a      	strb	r2, [r3, #0]
				statusParam->programStarted = false;
 800a778:	1d3b      	adds	r3, r7, #4
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a77e:	2200      	movs	r2, #0
 800a780:	721a      	strb	r2, [r3, #8]
				ledStatus = PROGRAM_END;
 800a782:	1d3b      	adds	r3, r7, #4
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800a78a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				display->drawFullScreenPopUp("Programma terminato", 2000);
 800a78e:	1d3b      	adds	r3, r7, #4
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681c      	ldr	r4, [r3, #0]
 800a794:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a798:	4618      	mov	r0, r3
 800a79a:	f006 f99b 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a79e:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 800a7a2:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a7a6:	4993      	ldr	r1, [pc, #588]	; (800a9f4 <_ZN10SmartDryer12startProgramEh+0x9f8>)
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f006 fc5b 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a7ae:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a7b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f7fa fcaf 	bl	800511c <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800a7be:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f006 fab7 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a7c8:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f006 f982 	bl	8010ad6 <_ZNSaIcED1Ev>
				programStartedTimer->stopTimer();
 800a7d2:	1d3b      	adds	r3, r7, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7f8 feac 	bl	8003536 <_ZN11ChronoTimer9stopTimerEv>
				ProgramEnd = true;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
				if(eepromEnabled)
 800a7e4:	1d3b      	adds	r3, r7, #4
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00d      	beq.n	800a80c <_ZN10SmartDryer12startProgramEh+0x810>
					writeDefaultsDryerProgram(WichProgram);
 800a7f0:	1cfb      	adds	r3, r7, #3
 800a7f2:	781a      	ldrb	r2, [r3, #0]
 800a7f4:	1d3b      	adds	r3, r7, #4
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	f7fc f903 	bl	8006a04 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
					saveDryerProgram(WichProgram);
 800a7fe:	1cfb      	adds	r3, r7, #3
 800a800:	781a      	ldrb	r2, [r3, #0]
 800a802:	1d3b      	adds	r3, r7, #4
 800a804:	4611      	mov	r1, r2
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	f7fc f998 	bl	8006b3c <_ZN10SmartDryer16saveDryerProgramEh>
				ExitStartProgram = true;
 800a80c:	2301      	movs	r3, #1
 800a80e:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
				break;
 800a812:	e000      	b.n	800a816 <_ZN10SmartDryer12startProgramEh+0x81a>
				break;
 800a814:	bf00      	nop
		}

		if(!statusParam->programStarted && !ProgramEnd)
 800a816:	1d3b      	adds	r3, r7, #4
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a81c:	7a1b      	ldrb	r3, [r3, #8]
 800a81e:	f083 0301 	eor.w	r3, r3, #1
 800a822:	b2db      	uxtb	r3, r3
 800a824:	2b00      	cmp	r3, #0
 800a826:	f000 80e9 	beq.w	800a9fc <_ZN10SmartDryer12startProgramEh+0xa00>
 800a82a:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800a82e:	f083 0301 	eor.w	r3, r3, #1
 800a832:	b2db      	uxtb	r3, r3
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 80e1 	beq.w	800a9fc <_ZN10SmartDryer12startProgramEh+0xa00>
		{
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a83a:	f107 030c 	add.w	r3, r7, #12
 800a83e:	7899      	ldrb	r1, [r3, #2]
 800a840:	1cfb      	adds	r3, r7, #3
 800a842:	781a      	ldrb	r2, [r3, #0]
 800a844:	1d3b      	adds	r3, r7, #4
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	4613      	mov	r3, r2
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	4413      	add	r3, r2
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	4403      	add	r3, r0
 800a852:	3350      	adds	r3, #80	; 0x50
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	4299      	cmp	r1, r3
 800a858:	f0c0 8176 	bcc.w	800ab48 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800a85c:	f107 030c 	add.w	r3, r7, #12
 800a860:	7859      	ldrb	r1, [r3, #1]
 800a862:	1cfb      	adds	r3, r7, #3
 800a864:	781a      	ldrb	r2, [r3, #0]
 800a866:	1d3b      	adds	r3, r7, #4
 800a868:	6818      	ldr	r0, [r3, #0]
 800a86a:	4613      	mov	r3, r2
 800a86c:	005b      	lsls	r3, r3, #1
 800a86e:	4413      	add	r3, r2
 800a870:	00db      	lsls	r3, r3, #3
 800a872:	4403      	add	r3, r0
 800a874:	334f      	adds	r3, #79	; 0x4f
 800a876:	781b      	ldrb	r3, [r3, #0]
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a878:	4299      	cmp	r1, r3
 800a87a:	f0c0 8165 	bcc.w	800ab48 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800a87e:	f107 030c 	add.w	r3, r7, #12
 800a882:	78d9      	ldrb	r1, [r3, #3]
 800a884:	1cfb      	adds	r3, r7, #3
 800a886:	781a      	ldrb	r2, [r3, #0]
 800a888:	1d3b      	adds	r3, r7, #4
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	4613      	mov	r3, r2
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	4413      	add	r3, r2
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	4403      	add	r3, r0
 800a896:	3351      	adds	r3, #81	; 0x51
 800a898:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800a89a:	4299      	cmp	r1, r3
 800a89c:	f0c0 8154 	bcc.w	800ab48 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800a8a0:	f107 030c 	add.w	r3, r7, #12
 800a8a4:	7919      	ldrb	r1, [r3, #4]
 800a8a6:	1cfb      	adds	r3, r7, #3
 800a8a8:	781a      	ldrb	r2, [r3, #0]
 800a8aa:	1d3b      	adds	r3, r7, #4
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	005b      	lsls	r3, r3, #1
 800a8b2:	4413      	add	r3, r2
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	4403      	add	r3, r0
 800a8b8:	3352      	adds	r3, #82	; 0x52
 800a8ba:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800a8bc:	4299      	cmp	r1, r3
 800a8be:	f0c0 8143 	bcc.w	800ab48 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800a8c2:	f107 030c 	add.w	r3, r7, #12
 800a8c6:	88d9      	ldrh	r1, [r3, #6]
 800a8c8:	1cfb      	adds	r3, r7, #3
 800a8ca:	781a      	ldrb	r2, [r3, #0]
 800a8cc:	1d3b      	adds	r3, r7, #4
 800a8ce:	6818      	ldr	r0, [r3, #0]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	4413      	add	r3, r2
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	4403      	add	r3, r0
 800a8da:	3354      	adds	r3, #84	; 0x54
 800a8dc:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800a8de:	4299      	cmp	r1, r3
 800a8e0:	f0c0 8132 	bcc.w	800ab48 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800a8e4:	f107 030c 	add.w	r3, r7, #12
 800a8e8:	78d9      	ldrb	r1, [r3, #3]
 800a8ea:	1cfb      	adds	r3, r7, #3
 800a8ec:	781a      	ldrb	r2, [r3, #0]
 800a8ee:	1d3b      	adds	r3, r7, #4
 800a8f0:	6818      	ldr	r0, [r3, #0]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	4413      	add	r3, r2
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	4403      	add	r3, r0
 800a8fc:	3359      	adds	r3, #89	; 0x59
 800a8fe:	781b      	ldrb	r3, [r3, #0]
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800a900:	4299      	cmp	r1, r3
 800a902:	f200 8121 	bhi.w	800ab48 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800a906:	f107 030c 	add.w	r3, r7, #12
 800a90a:	7899      	ldrb	r1, [r3, #2]
 800a90c:	1cfb      	adds	r3, r7, #3
 800a90e:	781a      	ldrb	r2, [r3, #0]
 800a910:	1d3b      	adds	r3, r7, #4
 800a912:	6818      	ldr	r0, [r3, #0]
 800a914:	4613      	mov	r3, r2
 800a916:	005b      	lsls	r3, r3, #1
 800a918:	4413      	add	r3, r2
 800a91a:	00db      	lsls	r3, r3, #3
 800a91c:	4403      	add	r3, r0
 800a91e:	3358      	adds	r3, #88	; 0x58
 800a920:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800a922:	4299      	cmp	r1, r3
 800a924:	f200 8110 	bhi.w	800ab48 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800a928:	f107 030c 	add.w	r3, r7, #12
 800a92c:	7859      	ldrb	r1, [r3, #1]
 800a92e:	1cfb      	adds	r3, r7, #3
 800a930:	781a      	ldrb	r2, [r3, #0]
 800a932:	1d3b      	adds	r3, r7, #4
 800a934:	6818      	ldr	r0, [r3, #0]
 800a936:	4613      	mov	r3, r2
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	4413      	add	r3, r2
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	4403      	add	r3, r0
 800a940:	3357      	adds	r3, #87	; 0x57
 800a942:	781b      	ldrb	r3, [r3, #0]
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800a944:	4299      	cmp	r1, r3
 800a946:	f200 80ff 	bhi.w	800ab48 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800a94a:	f107 030c 	add.w	r3, r7, #12
 800a94e:	7919      	ldrb	r1, [r3, #4]
 800a950:	1cfb      	adds	r3, r7, #3
 800a952:	781a      	ldrb	r2, [r3, #0]
 800a954:	1d3b      	adds	r3, r7, #4
 800a956:	6818      	ldr	r0, [r3, #0]
 800a958:	4613      	mov	r3, r2
 800a95a:	005b      	lsls	r3, r3, #1
 800a95c:	4413      	add	r3, r2
 800a95e:	00db      	lsls	r3, r3, #3
 800a960:	4403      	add	r3, r0
 800a962:	335a      	adds	r3, #90	; 0x5a
 800a964:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800a966:	4299      	cmp	r1, r3
 800a968:	f200 80ee 	bhi.w	800ab48 <_ZN10SmartDryer12startProgramEh+0xb4c>
					ActualTime.year <= dryerPrograms[WichProgram].endTime.year)
 800a96c:	f107 030c 	add.w	r3, r7, #12
 800a970:	88d9      	ldrh	r1, [r3, #6]
 800a972:	1cfb      	adds	r3, r7, #3
 800a974:	781a      	ldrb	r2, [r3, #0]
 800a976:	1d3b      	adds	r3, r7, #4
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	4613      	mov	r3, r2
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	4413      	add	r3, r2
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	4403      	add	r3, r0
 800a984:	335c      	adds	r3, #92	; 0x5c
 800a986:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800a988:	4299      	cmp	r1, r3
 800a98a:	f200 80dd 	bhi.w	800ab48 <_ZN10SmartDryer12startProgramEh+0xb4c>
			{
				statusParam->programStarted = true;
 800a98e:	1d3b      	adds	r3, r7, #4
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a994:	2201      	movs	r2, #1
 800a996:	721a      	strb	r2, [r3, #8]
				statusParam->dryerOn = true;
 800a998:	1d3b      	adds	r3, r7, #4
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a99e:	2201      	movs	r2, #1
 800a9a0:	701a      	strb	r2, [r3, #0]
				ledStatus = PROGRAM_INIT;
 800a9a2:	1d3b      	adds	r3, r7, #4
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f240 12f5 	movw	r2, #501	; 0x1f5
 800a9aa:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				display->drawFullScreenPopUp("Programma iniziato", 2000);
 800a9ae:	1d3b      	adds	r3, r7, #4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681c      	ldr	r4, [r3, #0]
 800a9b4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f006 f88b 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800a9be:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800a9c2:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800a9c6:	490c      	ldr	r1, [pc, #48]	; (800a9f8 <_ZN10SmartDryer12startProgramEh+0x9fc>)
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f006 fb4b 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a9ce:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800a9d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f7fa fb9f 	bl	800511c <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800a9de:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f006 f9a7 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a9e8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f006 f872 	bl	8010ad6 <_ZNSaIcED1Ev>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a9f2:	e0a9      	b.n	800ab48 <_ZN10SmartDryer12startProgramEh+0xb4c>
 800a9f4:	0801543c 	.word	0x0801543c
 800a9f8:	08015450 	.word	0x08015450
//				ExitStartProgram = true;
//			}
		}
		else
		{
			if(!ProgramEnd)
 800a9fc:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800aa00:	f083 0301 	eor.w	r3, r3, #1
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 809f 	beq.w	800ab4a <_ZN10SmartDryer12startProgramEh+0xb4e>
			{
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800aa0c:	f107 030c 	add.w	r3, r7, #12
 800aa10:	7899      	ldrb	r1, [r3, #2]
 800aa12:	1cfb      	adds	r3, r7, #3
 800aa14:	781a      	ldrb	r2, [r3, #0]
 800aa16:	1d3b      	adds	r3, r7, #4
 800aa18:	6818      	ldr	r0, [r3, #0]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	4413      	add	r3, r2
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	4403      	add	r3, r0
 800aa24:	3358      	adds	r3, #88	; 0x58
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	4299      	cmp	r1, r3
 800aa2a:	f040 808e 	bne.w	800ab4a <_ZN10SmartDryer12startProgramEh+0xb4e>
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800aa2e:	f107 030c 	add.w	r3, r7, #12
 800aa32:	7859      	ldrb	r1, [r3, #1]
 800aa34:	1cfb      	adds	r3, r7, #3
 800aa36:	781a      	ldrb	r2, [r3, #0]
 800aa38:	1d3b      	adds	r3, r7, #4
 800aa3a:	6818      	ldr	r0, [r3, #0]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	005b      	lsls	r3, r3, #1
 800aa40:	4413      	add	r3, r2
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	4403      	add	r3, r0
 800aa46:	3357      	adds	r3, #87	; 0x57
 800aa48:	781b      	ldrb	r3, [r3, #0]
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800aa4a:	4299      	cmp	r1, r3
 800aa4c:	d17d      	bne.n	800ab4a <_ZN10SmartDryer12startProgramEh+0xb4e>
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800aa4e:	f107 030c 	add.w	r3, r7, #12
 800aa52:	78d9      	ldrb	r1, [r3, #3]
 800aa54:	1cfb      	adds	r3, r7, #3
 800aa56:	781a      	ldrb	r2, [r3, #0]
 800aa58:	1d3b      	adds	r3, r7, #4
 800aa5a:	6818      	ldr	r0, [r3, #0]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	005b      	lsls	r3, r3, #1
 800aa60:	4413      	add	r3, r2
 800aa62:	00db      	lsls	r3, r3, #3
 800aa64:	4403      	add	r3, r0
 800aa66:	3359      	adds	r3, #89	; 0x59
 800aa68:	781b      	ldrb	r3, [r3, #0]
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800aa6a:	4299      	cmp	r1, r3
 800aa6c:	d16d      	bne.n	800ab4a <_ZN10SmartDryer12startProgramEh+0xb4e>
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800aa6e:	f107 030c 	add.w	r3, r7, #12
 800aa72:	7919      	ldrb	r1, [r3, #4]
 800aa74:	1cfb      	adds	r3, r7, #3
 800aa76:	781a      	ldrb	r2, [r3, #0]
 800aa78:	1d3b      	adds	r3, r7, #4
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	4413      	add	r3, r2
 800aa82:	00db      	lsls	r3, r3, #3
 800aa84:	4403      	add	r3, r0
 800aa86:	335a      	adds	r3, #90	; 0x5a
 800aa88:	781b      	ldrb	r3, [r3, #0]
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800aa8a:	4299      	cmp	r1, r3
 800aa8c:	d15d      	bne.n	800ab4a <_ZN10SmartDryer12startProgramEh+0xb4e>
						ActualTime.year == dryerPrograms[WichProgram].endTime.year)
 800aa8e:	f107 030c 	add.w	r3, r7, #12
 800aa92:	88d9      	ldrh	r1, [r3, #6]
 800aa94:	1cfb      	adds	r3, r7, #3
 800aa96:	781a      	ldrb	r2, [r3, #0]
 800aa98:	1d3b      	adds	r3, r7, #4
 800aa9a:	6818      	ldr	r0, [r3, #0]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	4413      	add	r3, r2
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	4403      	add	r3, r0
 800aaa6:	335c      	adds	r3, #92	; 0x5c
 800aaa8:	881b      	ldrh	r3, [r3, #0]
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800aaaa:	4299      	cmp	r1, r3
 800aaac:	d14d      	bne.n	800ab4a <_ZN10SmartDryer12startProgramEh+0xb4e>
				{
					statusParam->programStarted = false;
 800aaae:	1d3b      	adds	r3, r7, #4
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aab4:	2200      	movs	r2, #0
 800aab6:	721a      	strb	r2, [r3, #8]
					statusParam->dryerOn = false;
 800aab8:	1d3b      	adds	r3, r7, #4
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aabe:	2200      	movs	r2, #0
 800aac0:	701a      	strb	r2, [r3, #0]
					ledStatus = PROGRAM_END;
 800aac2:	1d3b      	adds	r3, r7, #4
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800aaca:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
					ProgramEnd = true;
 800aace:	2301      	movs	r3, #1
 800aad0:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
					display->drawFullScreenPopUp("Programma terminato", 2000);
 800aad4:	1d3b      	adds	r3, r7, #4
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681c      	ldr	r4, [r3, #0]
 800aada:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800aade:	4618      	mov	r0, r3
 800aae0:	f005 fff8 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800aae4:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800aae8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800aaec:	4941      	ldr	r1, [pc, #260]	; (800abf4 <_ZN10SmartDryer12startProgramEh+0xbf8>)
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f006 fab8 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aaf4:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800aaf8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aafc:	4619      	mov	r1, r3
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7fa fb0c 	bl	800511c <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800ab04:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f006 f914 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab0e:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800ab12:	4618      	mov	r0, r3
 800ab14:	f005 ffdf 	bl	8010ad6 <_ZNSaIcED1Ev>
					if(eepromEnabled)
 800ab18:	1d3b      	adds	r3, r7, #4
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00d      	beq.n	800ab40 <_ZN10SmartDryer12startProgramEh+0xb44>
					{
						writeDefaultsDryerProgram(WichProgram);
 800ab24:	1cfb      	adds	r3, r7, #3
 800ab26:	781a      	ldrb	r2, [r3, #0]
 800ab28:	1d3b      	adds	r3, r7, #4
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	f7fb ff69 	bl	8006a04 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
						saveDryerProgram(WichProgram);
 800ab32:	1cfb      	adds	r3, r7, #3
 800ab34:	781a      	ldrb	r2, [r3, #0]
 800ab36:	1d3b      	adds	r3, r7, #4
 800ab38:	4611      	mov	r1, r2
 800ab3a:	6818      	ldr	r0, [r3, #0]
 800ab3c:	f7fb fffe 	bl	8006b3c <_ZN10SmartDryer16saveDryerProgramEh>
					}
					ExitStartProgram = true;
 800ab40:	2301      	movs	r3, #1
 800ab42:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
 800ab46:	e000      	b.n	800ab4a <_ZN10SmartDryer12startProgramEh+0xb4e>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800ab48:	bf00      	nop
				}
			}
		}
		peripheralsControl();
 800ab4a:	1d3b      	adds	r3, r7, #4
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	f7fb fee9 	bl	8006924 <_ZN10SmartDryer18peripheralsControlEv>
		if(checkSerialDeviceTimer->isFinished(true, DELAY_SERIAL_ALIVE_TIMER))
 800ab52:	1d3b      	adds	r3, r7, #4
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7f8 fd0d 	bl	800357e <_ZN11ChronoTimer10isFinishedEbm>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <_ZN10SmartDryer12startProgramEh+0xb84>
		{
			statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800ab6a:	1d3b      	adds	r3, r7, #4
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab70:	1d3b      	adds	r3, r7, #4
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800ab76:	4610      	mov	r0, r2
 800ab78:	f7fb f83a 	bl	8005bf0 <_ZN13SerialMessage17isDeviceConnectedEv>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	7263      	strb	r3, [r4, #9]
		}
		if(statusParam->serialDeviceAttached)
 800ab80:	1d3b      	adds	r3, r7, #4
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab86:	7a5b      	ldrb	r3, [r3, #9]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f43f ac4e 	beq.w	800a42a <_ZN10SmartDryer12startProgramEh+0x42e>
		{
			serialComunicationCtrl();
 800ab8e:	1d3b      	adds	r3, r7, #4
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	f7fc fbcb 	bl	800732c <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitStartProgram)
 800ab96:	e448      	b.n	800a42a <_ZN10SmartDryer12startProgramEh+0x42e>
	String TempRead = "0C", TempSet = "0";
 800ab98:	f107 0314 	add.w	r3, r7, #20
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f006 f8ca 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aba6:	4618      	mov	r0, r3
 800aba8:	f006 f8c5 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 800abac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800abb0:	4618      	mov	r0, r3
 800abb2:	f006 f8c0 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800abb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800abba:	4618      	mov	r0, r3
 800abbc:	f006 f8bb 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800abc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800abc4:	4618      	mov	r0, r3
 800abc6:	f006 f8b6 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800abca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800abce:	4618      	mov	r0, r3
 800abd0:	f006 f8b1 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 800abd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800abd8:	4618      	mov	r0, r3
 800abda:	f006 f8ac 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800abde:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800abe2:	4618      	mov	r0, r3
 800abe4:	f006 f8a7 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800abe8:	bf00      	nop
 800abea:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd90      	pop	{r4, r7, pc}
 800abf2:	bf00      	nop
 800abf4:	0801543c 	.word	0x0801543c

0800abf8 <_ZN10SmartDryer3runEv>:

void SmartDryer::run()
{
 800abf8:	b590      	push	{r4, r7, lr}
 800abfa:	b08b      	sub	sp, #44	; 0x2c
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
	display->drawFullScreenPopUp("Smart Dryer", 1000);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681c      	ldr	r4, [r3, #0]
 800ac04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f005 ff63 	bl	8010ad4 <_ZNSaIcEC1Ev>
 800ac0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ac12:	f107 030c 	add.w	r3, r7, #12
 800ac16:	4936      	ldr	r1, [pc, #216]	; (800acf0 <_ZN10SmartDryer3runEv+0xf8>)
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f006 fa23 	bl	8011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ac1e:	f107 030c 	add.w	r3, r7, #12
 800ac22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac26:	4619      	mov	r1, r3
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f7fa fa77 	bl	800511c <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800ac2e:	f107 030c 	add.w	r3, r7, #12
 800ac32:	4618      	mov	r0, r3
 800ac34:	f006 f87f 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ac38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f005 ff4a 	bl	8010ad6 <_ZNSaIcED1Ev>
	while(1)
	{
		switch(screen)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800ac48:	2b09      	cmp	r3, #9
 800ac4a:	d84f      	bhi.n	800acec <_ZN10SmartDryer3runEv+0xf4>
 800ac4c:	a201      	add	r2, pc, #4	; (adr r2, 800ac54 <_ZN10SmartDryer3runEv+0x5c>)
 800ac4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac52:	bf00      	nop
 800ac54:	0800ac7d 	.word	0x0800ac7d
 800ac58:	0800ac85 	.word	0x0800ac85
 800ac5c:	0800ac95 	.word	0x0800ac95
 800ac60:	0800aca5 	.word	0x0800aca5
 800ac64:	0800acb5 	.word	0x0800acb5
 800ac68:	0800acb5 	.word	0x0800acb5
 800ac6c:	0800acb5 	.word	0x0800acb5
 800ac70:	0800acd1 	.word	0x0800acd1
 800ac74:	0800acd1 	.word	0x0800acd1
 800ac78:	0800acd1 	.word	0x0800acd1
		{
			case NAV_MENU:
				navMenu();
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7fc ffa9 	bl	8007bd4 <_ZN10SmartDryer7navMenuEv>
				break;
 800ac82:	e034      	b.n	800acee <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_TIME:
				changeTime();
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7fe f86d 	bl	8008d64 <_ZN10SmartDryer10changeTimeEv>
				screen = NAV_MENU;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
				break;
 800ac92:	e02c      	b.n	800acee <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_DATE:
				changeDate();
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7fe fa3d 	bl	8009114 <_ZN10SmartDryer10changeDateEv>
				screen = NAV_MENU;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
				break;
 800aca2:	e024      	b.n	800acee <_ZN10SmartDryer3runEv+0xf6>
			case SHOW_INFO:
				showInfo();
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f7fe fc8f 	bl	80095c8 <_ZN10SmartDryer8showInfoEv>
				screen = NAV_MENU;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
				break;
 800acb2:	e01c      	b.n	800acee <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_PROGRAM_1:
			case CHANGE_PROGRAM_2:
			case CHANGE_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				changeProgram(screen - CHANGE_PROGRAM_1);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800acba:	3b04      	subs	r3, #4
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7fe fdff 	bl	80098c4 <_ZN10SmartDryer13changeProgramEh>
				screen = NAV_MENU;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
				break;
 800acce:	e00e      	b.n	800acee <_ZN10SmartDryer3runEv+0xf6>
			case START_PROGRAM_1:
			case START_PROGRAM_2:
			case START_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				startProgram(screen - START_PROGRAM_1);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800acd6:	3b07      	subs	r3, #7
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff f98d 	bl	8009ffc <_ZN10SmartDryer12startProgramEh>
				screen = NAV_MENU;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
				break;
 800acea:	e000      	b.n	800acee <_ZN10SmartDryer3runEv+0xf6>
			default:
				break;
 800acec:	bf00      	nop
		switch(screen)
 800acee:	e7a8      	b.n	800ac42 <_ZN10SmartDryer3runEv+0x4a>
 800acf0:	08015464 	.word	0x08015464

0800acf4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 f83a 	bl	800ad78 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4618      	mov	r0, r3
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b082      	sub	sp, #8
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800ad18:	6838      	ldr	r0, [r7, #0]
 800ad1a:	f7f9 fa61 	bl	80041e0 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f857 	bl	800add6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 800ad28:	bf00      	nop
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	10db      	asrs	r3, r3, #3
 800ad46:	4a04      	ldr	r2, [pc, #16]	; (800ad58 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800ad48:	fb02 f303 	mul.w	r3, r2, r3
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bc80      	pop	{r7}
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	aaaaaaab 	.word	0xaaaaaaab

0800ad5c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4619      	mov	r1, r3
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f862 	bl	800ae34 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 f86e 	bl	800ae64 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bc80      	pop	{r7}
 800ada4:	4770      	bx	lr

0800ada6 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800adb2:	68b9      	ldr	r1, [r7, #8]
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f000 f87d 	bl	800aeb4 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800adba:	bf00      	nop
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800adc2:	b480      	push	{r7}
 800adc4:	b083      	sub	sp, #12
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4618      	mov	r0, r3
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	bc80      	pop	{r7}
 800add4:	4770      	bx	lr

0800add6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800add6:	b5b0      	push	{r4, r5, r7, lr}
 800add8:	b082      	sub	sp, #8
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d012      	beq.n	800ae12 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800adec:	687c      	ldr	r4, [r7, #4]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685d      	ldr	r5, [r3, #4]
 800adf2:	6838      	ldr	r0, [r7, #0]
 800adf4:	f7ff ffe5 	bl	800adc2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800adf8:	4603      	mov	r3, r0
 800adfa:	461a      	mov	r2, r3
 800adfc:	4629      	mov	r1, r5
 800adfe:	4620      	mov	r0, r4
 800ae00:	f000 f865 	bl	800aece <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	f103 0218 	add.w	r2, r3, #24
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800ae10:	e00c      	b.n	800ae2c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f86e 	bl	800aef4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800ae18:	4604      	mov	r4, r0
 800ae1a:	6838      	ldr	r0, [r7, #0]
 800ae1c:	f7ff ffd1 	bl	800adc2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ae20:	4603      	mov	r3, r0
 800ae22:	461a      	mov	r2, r3
 800ae24:	4621      	mov	r1, r4
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f876 	bl	800af18 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 800ae2c:	bf00      	nop
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bdb0      	pop	{r4, r5, r7, pc}

0800ae34 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800ae34:	b590      	push	{r4, r7, lr}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685c      	ldr	r4, [r3, #4]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7ff ffa4 	bl	800ad92 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	4621      	mov	r1, r4
 800ae50:	6838      	ldr	r0, [r7, #0]
 800ae52:	f7ff ffa8 	bl	800ada6 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	683a      	ldr	r2, [r7, #0]
 800ae5a:	605a      	str	r2, [r3, #4]
      }
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd90      	pop	{r4, r7, pc}

0800ae64 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f8eb 	bl	800b048 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	601a      	str	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	605a      	str	r2, [r3, #4]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	609a      	str	r2, [r3, #8]
	{ }
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4618      	mov	r0, r3
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b084      	sub	sp, #16
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	607a      	str	r2, [r7, #4]
	if (__p)
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d005      	beq.n	800aeac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	68b9      	ldr	r1, [r7, #8]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 f8da 	bl	800b060 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 800aeac:	bf00      	nop
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f8e6 	bl	800b092 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800aec6:	bf00      	nop
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	60b9      	str	r1, [r7, #8]
 800aed8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f7ff ff71 	bl	800adc2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800aee0:	4603      	mov	r3, r0
 800aee2:	461a      	mov	r2, r3
 800aee4:	68b9      	ldr	r1, [r7, #8]
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	f000 f8eb 	bl	800b0c2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 800aeec:	bf00      	nop
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	1d1a      	adds	r2, r3, #4
 800af00:	f107 030c 	add.w	r3, r7, #12
 800af04:	4611      	mov	r1, r2
 800af06:	4618      	mov	r0, r3
 800af08:	f000 f8f5 	bl	800b0f6 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800af18:	b5b0      	push	{r4, r5, r7, lr}
 800af1a:	b08a      	sub	sp, #40	; 0x28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800af24:	4a46      	ldr	r2, [pc, #280]	; (800b040 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 800af26:	2101      	movs	r1, #1
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f000 f8f3 	bl	800b114 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 800af2e:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f000 f937 	bl	800b1a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800af36:	4603      	mov	r3, r0
 800af38:	617b      	str	r3, [r7, #20]
 800af3a:	f107 0214 	add.w	r2, r7, #20
 800af3e:	f107 0308 	add.w	r3, r7, #8
 800af42:	4611      	mov	r1, r2
 800af44:	4618      	mov	r0, r3
 800af46:	f000 f93d 	bl	800b1c4 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 800af4a:	4603      	mov	r3, r0
 800af4c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af52:	4618      	mov	r0, r3
 800af54:	f000 f952 	bl	800b1fc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800af58:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800af5e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800af60:	6a3a      	ldr	r2, [r7, #32]
 800af62:	4613      	mov	r3, r2
 800af64:	005b      	lsls	r3, r3, #1
 800af66:	4413      	add	r3, r2
 800af68:	00db      	lsls	r3, r3, #3
 800af6a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	189d      	adds	r5, r3, r2
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f7ff ff26 	bl	800adc2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800af76:	4603      	mov	r3, r0
 800af78:	461a      	mov	r2, r3
 800af7a:	4629      	mov	r1, r5
 800af7c:	4620      	mov	r0, r4
 800af7e:	f7ff ffa6 	bl	800aece <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800af82:	2300      	movs	r3, #0
 800af84:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681c      	ldr	r4, [r3, #0]
 800af8a:	f107 0308 	add.w	r3, r7, #8
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 f948 	bl	800b224 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800af94:	4603      	mov	r3, r0
 800af96:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7ff fef9 	bl	800ad92 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800afa0:	4603      	mov	r3, r0
	  __new_finish
 800afa2:	69fa      	ldr	r2, [r7, #28]
 800afa4:	4629      	mov	r1, r5
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 f946 	bl	800b238 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800afac:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	3318      	adds	r3, #24
 800afb2:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800afb4:	f107 0308 	add.w	r3, r7, #8
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 f933 	bl	800b224 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800afbe:	4603      	mov	r3, r0
 800afc0:	681c      	ldr	r4, [r3, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff fee2 	bl	800ad92 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800afce:	4603      	mov	r3, r0
	  __new_finish
 800afd0:	69ba      	ldr	r2, [r7, #24]
 800afd2:	4629      	mov	r1, r5
 800afd4:	4620      	mov	r0, r4
 800afd6:	f000 f92f 	bl	800b238 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800afda:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681c      	ldr	r4, [r3, #0]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7ff fed3 	bl	800ad92 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800afec:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800afee:	461a      	mov	r2, r3
 800aff0:	4629      	mov	r1, r5
 800aff2:	4620      	mov	r0, r4
 800aff4:	f7ff fed7 	bl	800ada6 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800b002:	461a      	mov	r2, r3
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	10db      	asrs	r3, r3, #3
 800b00c:	4a0d      	ldr	r2, [pc, #52]	; (800b044 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 800b00e:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 800b012:	461a      	mov	r2, r3
 800b014:	f7ff ff3b 	bl	800ae8e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	69fa      	ldr	r2, [r7, #28]
 800b01c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	69ba      	ldr	r2, [r7, #24]
 800b022:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b026:	4613      	mov	r3, r2
 800b028:	005b      	lsls	r3, r3, #1
 800b02a:	4413      	add	r3, r2
 800b02c:	00db      	lsls	r3, r3, #3
 800b02e:	461a      	mov	r2, r3
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	441a      	add	r2, r3
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	609a      	str	r2, [r3, #8]
    }
 800b038:	bf00      	nop
 800b03a:	3728      	adds	r7, #40	; 0x28
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bdb0      	pop	{r4, r5, r7, pc}
 800b040:	08015470 	.word	0x08015470
 800b044:	aaaaaaab 	.word	0xaaaaaaab

0800b048 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f90a 	bl	800b26a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4618      	mov	r0, r3
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f000 f904 	bl	800b27e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 800b076:	bf00      	nop
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b07e:	b480      	push	{r7}
 800b080:	b083      	sub	sp, #12
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4618      	mov	r0, r3
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bc80      	pop	{r7}
 800b090:	4770      	bx	lr

0800b092 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b092:	b580      	push	{r7, lr}
 800b094:	b082      	sub	sp, #8
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d00a      	beq.n	800b0ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7ff ffea 	bl	800b07e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f000 f8f3 	bl	800b298 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3318      	adds	r3, #24
 800b0b6:	607b      	str	r3, [r7, #4]
 800b0b8:	e7f0      	b.n	800b09c <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 800b0ba:	bf00      	nop
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800b0c2:	b590      	push	{r4, r7, lr}
 800b0c4:	b085      	sub	sp, #20
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	60f8      	str	r0, [r7, #12]
 800b0ca:	60b9      	str	r1, [r7, #8]
 800b0cc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7ff fe77 	bl	800adc2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	2018      	movs	r0, #24
 800b0dc:	f7fa ff83 	bl	8005fe6 <_ZnwjPv>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d003      	beq.n	800b0ee <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x2c>
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f005 fe0a 	bl	8010d02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b0ee:	bf00      	nop
 800b0f0:	3714      	adds	r7, #20
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd90      	pop	{r4, r7, pc}

0800b0f6 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b0f6:	b480      	push	{r7}
 800b0f8:	b083      	sub	sp, #12
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	601a      	str	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4618      	mov	r0, r3
 800b10c:	370c      	adds	r7, #12
 800b10e:	46bd      	mov	sp, r7
 800b110:	bc80      	pop	{r7}
 800b112:	4770      	bx	lr

0800b114 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800b114:	b590      	push	{r4, r7, lr}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 f8c4 	bl	800b2ae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b126:	4604      	mov	r4, r0
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f7ff fe01 	bl	800ad30 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b12e:	4603      	mov	r3, r0
 800b130:	1ae2      	subs	r2, r4, r3
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	429a      	cmp	r2, r3
 800b136:	bf34      	ite	cc
 800b138:	2301      	movcc	r3, #1
 800b13a:	2300      	movcs	r3, #0
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d003      	beq.n	800b14a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4618      	mov	r0, r3
 800b146:	f005 fcd0 	bl	8010aea <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f7ff fdf0 	bl	800ad30 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b150:	4604      	mov	r4, r0
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f7ff fdec 	bl	800ad30 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b158:	4603      	mov	r3, r0
 800b15a:	613b      	str	r3, [r7, #16]
 800b15c:	f107 0208 	add.w	r2, r7, #8
 800b160:	f107 0310 	add.w	r3, r7, #16
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f000 f8b2 	bl	800b2d0 <_ZSt3maxIjERKT_S2_S2_>
 800b16c:	4603      	mov	r3, r0
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4423      	add	r3, r4
 800b172:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f7ff fddb 	bl	800ad30 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b17a:	4602      	mov	r2, r0
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	4293      	cmp	r3, r2
 800b180:	d306      	bcc.n	800b190 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f000 f893 	bl	800b2ae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b188:	4602      	mov	r2, r0
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d904      	bls.n	800b19a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 f88c 	bl	800b2ae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b196:	4603      	mov	r3, r0
 800b198:	e000      	b.n	800b19c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 800b19a:	697b      	ldr	r3, [r7, #20]
      }
 800b19c:	4618      	mov	r0, r3
 800b19e:	371c      	adds	r7, #28
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd90      	pop	{r4, r7, pc}

0800b1a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	f107 030c 	add.w	r3, r7, #12
 800b1b2:	4611      	mov	r1, r2
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff ff9e 	bl	800b0f6 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b1c4:	b590      	push	{r4, r7, lr}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f828 	bl	800b224 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	461c      	mov	r4, r3
 800b1da:	6838      	ldr	r0, [r7, #0]
 800b1dc:	f000 f822 	bl	800b224 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	1ae3      	subs	r3, r4, r3
 800b1e6:	10db      	asrs	r3, r3, #3
 800b1e8:	4a03      	ldr	r2, [pc, #12]	; (800b1f8 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 800b1ea:	fb02 f303 	mul.w	r3, r2, r3
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd90      	pop	{r4, r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	aaaaaaab 	.word	0xaaaaaaab

0800b1fc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d006      	beq.n	800b21a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	4618      	mov	r0, r3
 800b212:	f000 f870 	bl	800b2f6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 800b216:	4603      	mov	r3, r0
 800b218:	e000      	b.n	800b21c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 800b21a:	2300      	movs	r3, #0
      }
 800b21c:	4618      	mov	r0, r3
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4618      	mov	r0, r3
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	bc80      	pop	{r7}
 800b236:	4770      	bx	lr

0800b238 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800b238:	b590      	push	{r4, r7, lr}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
 800b244:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f000 f864 	bl	800b314 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b24c:	4604      	mov	r4, r0
 800b24e:	68b8      	ldr	r0, [r7, #8]
 800b250:	f000 f860 	bl	800b314 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b254:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 f869 	bl	800b332 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800b260:	4603      	mov	r3, r0
    }
 800b262:	4618      	mov	r0, r3
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	bd90      	pop	{r4, r7, pc}

0800b26a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b26a:	b480      	push	{r7}
 800b26c:	b083      	sub	sp, #12
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	bc80      	pop	{r7}
 800b27c:	4770      	bx	lr

0800b27e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800b27e:	b580      	push	{r7, lr}
 800b280:	b084      	sub	sp, #16
 800b282:	af00      	add	r7, sp, #0
 800b284:	60f8      	str	r0, [r7, #12]
 800b286:	60b9      	str	r1, [r7, #8]
 800b288:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800b28a:	68b8      	ldr	r0, [r7, #8]
 800b28c:	f005 fc20 	bl	8010ad0 <_ZdlPv>
      }
 800b290:	bf00      	nop
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f005 fd48 	bl	8010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b2a6:	bf00      	nop
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b082      	sub	sp, #8
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 f857 	bl	800b36c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 f847 	bl	800b354 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d201      	bcs.n	800b2ea <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	e000      	b.n	800b2ec <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800b2ea:	687b      	ldr	r3, [r7, #4]
    }
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bc80      	pop	{r7}
 800b2f4:	4770      	bx	lr

0800b2f6 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b082      	sub	sp, #8
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b300:	2200      	movs	r2, #0
 800b302:	6839      	ldr	r1, [r7, #0]
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f83b 	bl	800b380 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800b30a:	4603      	mov	r3, r0
 800b30c:	4618      	mov	r0, r3
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800b31c:	f107 030c 	add.w	r3, r7, #12
 800b320:	6879      	ldr	r1, [r7, #4]
 800b322:	4618      	mov	r0, r3
 800b324:	f000 f84d 	bl	800b3c2 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	60f8      	str	r0, [r7, #12]
 800b33a:	60b9      	str	r1, [r7, #8]
 800b33c:	607a      	str	r2, [r7, #4]
 800b33e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	68b9      	ldr	r1, [r7, #8]
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 f84a 	bl	800b3de <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800b34a:	4603      	mov	r3, r0
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f851 	bl	800b404 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b362:	4603      	mov	r3, r0
 800b364:	4618      	mov	r0, r3
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4618      	mov	r0, r3
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bc80      	pop	{r7}
 800b37e:	4770      	bx	lr

0800b380 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 f839 	bl	800b404 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b392:	4602      	mov	r2, r0
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	4293      	cmp	r3, r2
 800b398:	bf8c      	ite	hi
 800b39a:	2301      	movhi	r3, #1
 800b39c:	2300      	movls	r3, #0
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d001      	beq.n	800b3a8 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800b3a4:	f005 fb98 	bl	8010ad8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	005b      	lsls	r3, r3, #1
 800b3ae:	4413      	add	r3, r2
 800b3b0:	00db      	lsls	r3, r3, #3
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f005 fb72 	bl	8010a9c <_Znwj>
 800b3b8:	4603      	mov	r3, r0
      }
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800b3c2:	b480      	push	{r7}
 800b3c4:	b083      	sub	sp, #12
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bc80      	pop	{r7}
 800b3dc:	4770      	bx	lr

0800b3de <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b086      	sub	sp, #24
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	60f8      	str	r0, [r7, #12]
 800b3e6:	60b9      	str	r1, [r7, #8]
 800b3e8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	68b9      	ldr	r1, [r7, #8]
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f000 f812 	bl	800b41c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800b3f8:	4603      	mov	r3, r0
    }
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
	...

0800b404 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800b40c:	4b02      	ldr	r3, [pc, #8]	; (800b418 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800b40e:	4618      	mov	r0, r3
 800b410:	370c      	adds	r7, #12
 800b412:	46bd      	mov	sp, r7
 800b414:	bc80      	pop	{r7}
 800b416:	4770      	bx	lr
 800b418:	0aaaaaaa 	.word	0x0aaaaaaa

0800b41c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b41c:	b590      	push	{r4, r7, lr}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800b42c:	f107 0208 	add.w	r2, r7, #8
 800b430:	f107 030c 	add.w	r3, r7, #12
 800b434:	4611      	mov	r1, r2
 800b436:	4618      	mov	r0, r3
 800b438:	f000 f81f 	bl	800b47a <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d016      	beq.n	800b470 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800b442:	6978      	ldr	r0, [r7, #20]
 800b444:	f7ff fe1b 	bl	800b07e <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b448:	4604      	mov	r4, r0
 800b44a:	f107 030c 	add.w	r3, r7, #12
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 f834 	bl	800b4bc <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800b454:	4603      	mov	r3, r0
 800b456:	4619      	mov	r1, r3
 800b458:	4620      	mov	r0, r4
 800b45a:	f000 f83a 	bl	800b4d2 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800b45e:	f107 030c 	add.w	r3, r7, #12
 800b462:	4618      	mov	r0, r3
 800b464:	f000 f81a 	bl	800b49c <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	3318      	adds	r3, #24
 800b46c:	617b      	str	r3, [r7, #20]
 800b46e:	e7dd      	b.n	800b42c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800b470:	697b      	ldr	r3, [r7, #20]
	}
 800b472:	4618      	mov	r0, r3
 800b474:	371c      	adds	r7, #28
 800b476:	46bd      	mov	sp, r7
 800b478:	bd90      	pop	{r4, r7, pc}

0800b47a <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b082      	sub	sp, #8
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f83c 	bl	800b504 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b48c:	4603      	mov	r3, r0
 800b48e:	f083 0301 	eor.w	r3, r3, #1
 800b492:	b2db      	uxtb	r3, r3
 800b494:	4618      	mov	r0, r3
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f103 0218 	add.w	r2, r3, #24
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	601a      	str	r2, [r3, #0]
	return *this;
 800b4b0:	687b      	ldr	r3, [r7, #4]
      }
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	370c      	adds	r7, #12
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bc80      	pop	{r7}
 800b4ba:	4770      	bx	lr

0800b4bc <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bc80      	pop	{r7}
 800b4d0:	4770      	bx	lr

0800b4d2 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800b4d2:	b590      	push	{r4, r7, lr}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800b4dc:	6838      	ldr	r0, [r7, #0]
 800b4de:	f7ff fc70 	bl	800adc2 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	2018      	movs	r0, #24
 800b4ea:	f7fa fd7c 	bl	8005fe6 <_ZnwjPv>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d003      	beq.n	800b4fc <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f005 fc03 	bl	8010d02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	bd90      	pop	{r4, r7, pc}

0800b504 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800b504:	b590      	push	{r4, r7, lr}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f80e 	bl	800b530 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b514:	4604      	mov	r4, r0
 800b516:	6838      	ldr	r0, [r7, #0]
 800b518:	f000 f80a 	bl	800b530 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b51c:	4603      	mov	r3, r0
 800b51e:	429c      	cmp	r4, r3
 800b520:	bf0c      	ite	eq
 800b522:	2301      	moveq	r3, #1
 800b524:	2300      	movne	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	4618      	mov	r0, r3
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd90      	pop	{r4, r7, pc}

0800b530 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4618      	mov	r0, r3
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	bc80      	pop	{r7}
 800b544:	4770      	bx	lr
	...

0800b548 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800b54e:	1d3b      	adds	r3, r7, #4
 800b550:	2200      	movs	r2, #0
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	605a      	str	r2, [r3, #4]
 800b556:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800b558:	4b18      	ldr	r3, [pc, #96]	; (800b5bc <MX_ADC1_Init+0x74>)
 800b55a:	4a19      	ldr	r2, [pc, #100]	; (800b5c0 <MX_ADC1_Init+0x78>)
 800b55c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b55e:	4b17      	ldr	r3, [pc, #92]	; (800b5bc <MX_ADC1_Init+0x74>)
 800b560:	2200      	movs	r2, #0
 800b562:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b564:	4b15      	ldr	r3, [pc, #84]	; (800b5bc <MX_ADC1_Init+0x74>)
 800b566:	2200      	movs	r2, #0
 800b568:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b56a:	4b14      	ldr	r3, [pc, #80]	; (800b5bc <MX_ADC1_Init+0x74>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b570:	4b12      	ldr	r3, [pc, #72]	; (800b5bc <MX_ADC1_Init+0x74>)
 800b572:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800b576:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b578:	4b10      	ldr	r3, [pc, #64]	; (800b5bc <MX_ADC1_Init+0x74>)
 800b57a:	2200      	movs	r2, #0
 800b57c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800b57e:	4b0f      	ldr	r3, [pc, #60]	; (800b5bc <MX_ADC1_Init+0x74>)
 800b580:	2201      	movs	r2, #1
 800b582:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b584:	480d      	ldr	r0, [pc, #52]	; (800b5bc <MX_ADC1_Init+0x74>)
 800b586:	f000 fe63 	bl	800c250 <HAL_ADC_Init>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d001      	beq.n	800b594 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800b590:	f000 f9d4 	bl	800b93c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800b594:	2300      	movs	r3, #0
 800b596:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b598:	2301      	movs	r3, #1
 800b59a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b59c:	2300      	movs	r3, #0
 800b59e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b5a0:	1d3b      	adds	r3, r7, #4
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4805      	ldr	r0, [pc, #20]	; (800b5bc <MX_ADC1_Init+0x74>)
 800b5a6:	f000 ffbd 	bl	800c524 <HAL_ADC_ConfigChannel>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800b5b0:	f000 f9c4 	bl	800b93c <Error_Handler>
  }

}
 800b5b4:	bf00      	nop
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	200006a8 	.word	0x200006a8
 800b5c0:	40012400 	.word	0x40012400

0800b5c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b088      	sub	sp, #32
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5cc:	f107 0310 	add.w	r3, r7, #16
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	605a      	str	r2, [r3, #4]
 800b5d6:	609a      	str	r2, [r3, #8]
 800b5d8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a14      	ldr	r2, [pc, #80]	; (800b630 <HAL_ADC_MspInit+0x6c>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d121      	bne.n	800b628 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b5e4:	4b13      	ldr	r3, [pc, #76]	; (800b634 <HAL_ADC_MspInit+0x70>)
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	4a12      	ldr	r2, [pc, #72]	; (800b634 <HAL_ADC_MspInit+0x70>)
 800b5ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5ee:	6193      	str	r3, [r2, #24]
 800b5f0:	4b10      	ldr	r3, [pc, #64]	; (800b634 <HAL_ADC_MspInit+0x70>)
 800b5f2:	699b      	ldr	r3, [r3, #24]
 800b5f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5fc:	4b0d      	ldr	r3, [pc, #52]	; (800b634 <HAL_ADC_MspInit+0x70>)
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	4a0c      	ldr	r2, [pc, #48]	; (800b634 <HAL_ADC_MspInit+0x70>)
 800b602:	f043 0304 	orr.w	r3, r3, #4
 800b606:	6193      	str	r3, [r2, #24]
 800b608:	4b0a      	ldr	r3, [pc, #40]	; (800b634 <HAL_ADC_MspInit+0x70>)
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	f003 0304 	and.w	r3, r3, #4
 800b610:	60bb      	str	r3, [r7, #8]
 800b612:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 800b614:	2301      	movs	r3, #1
 800b616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b618:	2303      	movs	r3, #3
 800b61a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 800b61c:	f107 0310 	add.w	r3, r7, #16
 800b620:	4619      	mov	r1, r3
 800b622:	4805      	ldr	r0, [pc, #20]	; (800b638 <HAL_ADC_MspInit+0x74>)
 800b624:	f001 fd74 	bl	800d110 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800b628:	bf00      	nop
 800b62a:	3720      	adds	r7, #32
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	40012400 	.word	0x40012400
 800b634:	40021000 	.word	0x40021000
 800b638:	40010800 	.word	0x40010800

0800b63c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b642:	f107 0308 	add.w	r3, r7, #8
 800b646:	2200      	movs	r2, #0
 800b648:	601a      	str	r2, [r3, #0]
 800b64a:	605a      	str	r2, [r3, #4]
 800b64c:	609a      	str	r2, [r3, #8]
 800b64e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b650:	4b28      	ldr	r3, [pc, #160]	; (800b6f4 <MX_GPIO_Init+0xb8>)
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	4a27      	ldr	r2, [pc, #156]	; (800b6f4 <MX_GPIO_Init+0xb8>)
 800b656:	f043 0304 	orr.w	r3, r3, #4
 800b65a:	6193      	str	r3, [r2, #24]
 800b65c:	4b25      	ldr	r3, [pc, #148]	; (800b6f4 <MX_GPIO_Init+0xb8>)
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	f003 0304 	and.w	r3, r3, #4
 800b664:	607b      	str	r3, [r7, #4]
 800b666:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b668:	4b22      	ldr	r3, [pc, #136]	; (800b6f4 <MX_GPIO_Init+0xb8>)
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	4a21      	ldr	r2, [pc, #132]	; (800b6f4 <MX_GPIO_Init+0xb8>)
 800b66e:	f043 0308 	orr.w	r3, r3, #8
 800b672:	6193      	str	r3, [r2, #24]
 800b674:	4b1f      	ldr	r3, [pc, #124]	; (800b6f4 <MX_GPIO_Init+0xb8>)
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	f003 0308 	and.w	r3, r3, #8
 800b67c:	603b      	str	r3, [r7, #0]
 800b67e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 800b680:	2201      	movs	r2, #1
 800b682:	210c      	movs	r1, #12
 800b684:	481c      	ldr	r0, [pc, #112]	; (800b6f8 <MX_GPIO_Init+0xbc>)
 800b686:	f001 ffa3 	bl	800d5d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 800b68a:	2200      	movs	r2, #0
 800b68c:	f641 6150 	movw	r1, #7760	; 0x1e50
 800b690:	4819      	ldr	r0, [pc, #100]	; (800b6f8 <MX_GPIO_Init+0xbc>)
 800b692:	f001 ff9d 	bl	800d5d0 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 800b696:	f240 435c 	movw	r3, #1116	; 0x45c
 800b69a:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b69c:	2301      	movs	r3, #1
 800b69e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6a8:	f107 0308 	add.w	r3, r7, #8
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	4812      	ldr	r0, [pc, #72]	; (800b6f8 <MX_GPIO_Init+0xbc>)
 800b6b0:	f001 fd2e 	bl	800d110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 800b6b4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b6b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6c2:	f107 0308 	add.w	r3, r7, #8
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	480c      	ldr	r0, [pc, #48]	; (800b6fc <MX_GPIO_Init+0xc0>)
 800b6ca:	f001 fd21 	bl	800d110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 800b6ce:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800b6d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6dc:	2302      	movs	r3, #2
 800b6de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6e0:	f107 0308 	add.w	r3, r7, #8
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4804      	ldr	r0, [pc, #16]	; (800b6f8 <MX_GPIO_Init+0xbc>)
 800b6e8:	f001 fd12 	bl	800d110 <HAL_GPIO_Init>

}
 800b6ec:	bf00      	nop
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	40021000 	.word	0x40021000
 800b6f8:	40010800 	.word	0x40010800
 800b6fc:	40010c00 	.word	0x40010c00

0800b700 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800b704:	4b12      	ldr	r3, [pc, #72]	; (800b750 <MX_I2C1_Init+0x50>)
 800b706:	4a13      	ldr	r2, [pc, #76]	; (800b754 <MX_I2C1_Init+0x54>)
 800b708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800b70a:	4b11      	ldr	r3, [pc, #68]	; (800b750 <MX_I2C1_Init+0x50>)
 800b70c:	4a12      	ldr	r2, [pc, #72]	; (800b758 <MX_I2C1_Init+0x58>)
 800b70e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b710:	4b0f      	ldr	r3, [pc, #60]	; (800b750 <MX_I2C1_Init+0x50>)
 800b712:	2200      	movs	r2, #0
 800b714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b716:	4b0e      	ldr	r3, [pc, #56]	; (800b750 <MX_I2C1_Init+0x50>)
 800b718:	2200      	movs	r2, #0
 800b71a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b71c:	4b0c      	ldr	r3, [pc, #48]	; (800b750 <MX_I2C1_Init+0x50>)
 800b71e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b724:	4b0a      	ldr	r3, [pc, #40]	; (800b750 <MX_I2C1_Init+0x50>)
 800b726:	2200      	movs	r2, #0
 800b728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b72a:	4b09      	ldr	r3, [pc, #36]	; (800b750 <MX_I2C1_Init+0x50>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b730:	4b07      	ldr	r3, [pc, #28]	; (800b750 <MX_I2C1_Init+0x50>)
 800b732:	2200      	movs	r2, #0
 800b734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b736:	4b06      	ldr	r3, [pc, #24]	; (800b750 <MX_I2C1_Init+0x50>)
 800b738:	2200      	movs	r2, #0
 800b73a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b73c:	4804      	ldr	r0, [pc, #16]	; (800b750 <MX_I2C1_Init+0x50>)
 800b73e:	f001 ff9f 	bl	800d680 <HAL_I2C_Init>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d001      	beq.n	800b74c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800b748:	f000 f8f8 	bl	800b93c <Error_Handler>
  }

}
 800b74c:	bf00      	nop
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	200006d8 	.word	0x200006d8
 800b754:	40005400 	.word	0x40005400
 800b758:	000186a0 	.word	0x000186a0

0800b75c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b08a      	sub	sp, #40	; 0x28
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b764:	f107 0314 	add.w	r3, r7, #20
 800b768:	2200      	movs	r2, #0
 800b76a:	601a      	str	r2, [r3, #0]
 800b76c:	605a      	str	r2, [r3, #4]
 800b76e:	609a      	str	r2, [r3, #8]
 800b770:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a1d      	ldr	r2, [pc, #116]	; (800b7ec <HAL_I2C_MspInit+0x90>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d132      	bne.n	800b7e2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b77c:	4b1c      	ldr	r3, [pc, #112]	; (800b7f0 <HAL_I2C_MspInit+0x94>)
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	4a1b      	ldr	r2, [pc, #108]	; (800b7f0 <HAL_I2C_MspInit+0x94>)
 800b782:	f043 0308 	orr.w	r3, r3, #8
 800b786:	6193      	str	r3, [r2, #24]
 800b788:	4b19      	ldr	r3, [pc, #100]	; (800b7f0 <HAL_I2C_MspInit+0x94>)
 800b78a:	699b      	ldr	r3, [r3, #24]
 800b78c:	f003 0308 	and.w	r3, r3, #8
 800b790:	613b      	str	r3, [r7, #16]
 800b792:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800b794:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b79a:	2312      	movs	r3, #18
 800b79c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b79e:	2303      	movs	r3, #3
 800b7a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7a2:	f107 0314 	add.w	r3, r7, #20
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	4812      	ldr	r0, [pc, #72]	; (800b7f4 <HAL_I2C_MspInit+0x98>)
 800b7aa:	f001 fcb1 	bl	800d110 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800b7ae:	4b12      	ldr	r3, [pc, #72]	; (800b7f8 <HAL_I2C_MspInit+0x9c>)
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800b7ba:	627b      	str	r3, [r7, #36]	; 0x24
 800b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7be:	f043 0302 	orr.w	r3, r3, #2
 800b7c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b7c4:	4a0c      	ldr	r2, [pc, #48]	; (800b7f8 <HAL_I2C_MspInit+0x9c>)
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b7ca:	4b09      	ldr	r3, [pc, #36]	; (800b7f0 <HAL_I2C_MspInit+0x94>)
 800b7cc:	69db      	ldr	r3, [r3, #28]
 800b7ce:	4a08      	ldr	r2, [pc, #32]	; (800b7f0 <HAL_I2C_MspInit+0x94>)
 800b7d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7d4:	61d3      	str	r3, [r2, #28]
 800b7d6:	4b06      	ldr	r3, [pc, #24]	; (800b7f0 <HAL_I2C_MspInit+0x94>)
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b7de:	60fb      	str	r3, [r7, #12]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800b7e2:	bf00      	nop
 800b7e4:	3728      	adds	r7, #40	; 0x28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	40005400 	.word	0x40005400
 800b7f0:	40021000 	.word	0x40021000
 800b7f4:	40010c00 	.word	0x40010c00
 800b7f8:	40010000 	.word	0x40010000

0800b7fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800b7fc:	b598      	push	{r3, r4, r7, lr}
 800b7fe:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800b800:	f000 fca2 	bl	800c148 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 800b804:	f000 f836 	bl	800b874 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800b808:	f7ff ff18 	bl	800b63c <MX_GPIO_Init>
	MX_ADC1_Init();
 800b80c:	f7ff fe9c 	bl	800b548 <MX_ADC1_Init>
	MX_I2C1_Init();
 800b810:	f7ff ff76 	bl	800b700 <MX_I2C1_Init>
	MX_SPI1_Init();
 800b814:	f000 f8a2 	bl	800b95c <MX_SPI1_Init>
	MX_TIM2_Init();
 800b818:	f000 fb84 	bl	800bf24 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800b81c:	f000 fbea 	bl	800bff4 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 800b820:	4812      	ldr	r0, [pc, #72]	; (800b86c <main+0x70>)
 800b822:	f004 f98b 	bl	800fb3c <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 800b826:	20d0      	movs	r0, #208	; 0xd0
 800b828:	f005 f938 	bl	8010a9c <_Znwj>
 800b82c:	4603      	mov	r3, r0
 800b82e:	461c      	mov	r4, r3
 800b830:	4620      	mov	r0, r4
 800b832:	f7fa fc37 	bl	80060a4 <_ZN10SmartDryerC1Ev>
 800b836:	4b0e      	ldr	r3, [pc, #56]	; (800b870 <main+0x74>)
 800b838:	601c      	str	r4, [r3, #0]

	DryerApplication->setup();
 800b83a:	4b0d      	ldr	r3, [pc, #52]	; (800b870 <main+0x74>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fc fce2 	bl	8008208 <_ZN10SmartDryer5setupEv>

	if(DryerApplication->enableTest)
 800b844:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <main+0x74>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d005      	beq.n	800b85c <main+0x60>
	{
		DryerApplication->test();
 800b850:	4b07      	ldr	r3, [pc, #28]	; (800b870 <main+0x74>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4618      	mov	r0, r3
 800b856:	f7fc fccd 	bl	80081f4 <_ZN10SmartDryer4testEv>
 800b85a:	e004      	b.n	800b866 <main+0x6a>
	}
	else
	{
		DryerApplication->run();
 800b85c:	4b04      	ldr	r3, [pc, #16]	; (800b870 <main+0x74>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4618      	mov	r0, r3
 800b862:	f7ff f9c9 	bl	800abf8 <_ZN10SmartDryer3runEv>
	}
}
 800b866:	2300      	movs	r3, #0
 800b868:	4618      	mov	r0, r3
 800b86a:	bd98      	pop	{r3, r4, r7, pc}
 800b86c:	20000784 	.word	0x20000784
 800b870:	20000694 	.word	0x20000694

0800b874 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b094      	sub	sp, #80	; 0x50
 800b878:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b87a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b87e:	2228      	movs	r2, #40	; 0x28
 800b880:	2100      	movs	r1, #0
 800b882:	4618      	mov	r0, r3
 800b884:	f005 fd3b 	bl	80112fe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b888:	f107 0314 	add.w	r3, r7, #20
 800b88c:	2200      	movs	r2, #0
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	605a      	str	r2, [r3, #4]
 800b892:	609a      	str	r2, [r3, #8]
 800b894:	60da      	str	r2, [r3, #12]
 800b896:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b898:	1d3b      	adds	r3, r7, #4
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	605a      	str	r2, [r3, #4]
 800b8a0:	609a      	str	r2, [r3, #8]
 800b8a2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b8ac:	2310      	movs	r3, #16
 800b8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b8b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b8bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b8be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f002 ff1a 	bl	800e6fc <HAL_RCC_OscConfig>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	bf14      	ite	ne
 800b8ce:	2301      	movne	r3, #1
 800b8d0:	2300      	moveq	r3, #0
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d001      	beq.n	800b8dc <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 800b8d8:	f000 f830 	bl	800b93c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b8dc:	230f      	movs	r3, #15
 800b8de:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b8e0:	2302      	movs	r3, #2
 800b8e2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800b8f0:	f107 0314 	add.w	r3, r7, #20
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f003 fa70 	bl	800eddc <HAL_RCC_ClockConfig>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bf14      	ite	ne
 800b902:	2301      	movne	r3, #1
 800b904:	2300      	moveq	r3, #0
 800b906:	b2db      	uxtb	r3, r3
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 800b90c:	f000 f816 	bl	800b93c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800b910:	2302      	movs	r3, #2
 800b912:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800b914:	2300      	movs	r3, #0
 800b916:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b918:	1d3b      	adds	r3, r7, #4
 800b91a:	4618      	mov	r0, r3
 800b91c:	f003 fca0 	bl	800f260 <HAL_RCCEx_PeriphCLKConfig>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	bf14      	ite	ne
 800b926:	2301      	movne	r3, #1
 800b928:	2300      	moveq	r3, #0
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 800b930:	f000 f804 	bl	800b93c <Error_Handler>
	}
}
 800b934:	bf00      	nop
 800b936:	3750      	adds	r7, #80	; 0x50
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800b93c:	b480      	push	{r7}
 800b93e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800b940:	bf00      	nop
 800b942:	46bd      	mov	sp, r7
 800b944:	bc80      	pop	{r7}
 800b946:	4770      	bx	lr

0800b948 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800b952:	bf00      	nop
 800b954:	370c      	adds	r7, #12
 800b956:	46bd      	mov	sp, r7
 800b958:	bc80      	pop	{r7}
 800b95a:	4770      	bx	lr

0800b95c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800b960:	4b18      	ldr	r3, [pc, #96]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b962:	4a19      	ldr	r2, [pc, #100]	; (800b9c8 <MX_SPI1_Init+0x6c>)
 800b964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b966:	4b17      	ldr	r3, [pc, #92]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b96c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800b96e:	4b15      	ldr	r3, [pc, #84]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b970:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b974:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800b976:	4b13      	ldr	r3, [pc, #76]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b978:	2200      	movs	r2, #0
 800b97a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b97c:	4b11      	ldr	r3, [pc, #68]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b97e:	2200      	movs	r2, #0
 800b980:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b982:	4b10      	ldr	r3, [pc, #64]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b984:	2200      	movs	r2, #0
 800b986:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800b988:	4b0e      	ldr	r3, [pc, #56]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b98a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b98e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800b990:	4b0c      	ldr	r3, [pc, #48]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b992:	2228      	movs	r2, #40	; 0x28
 800b994:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b996:	4b0b      	ldr	r3, [pc, #44]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b998:	2200      	movs	r2, #0
 800b99a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b99c:	4b09      	ldr	r3, [pc, #36]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b99e:	2200      	movs	r2, #0
 800b9a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9a2:	4b08      	ldr	r3, [pc, #32]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800b9a8:	4b06      	ldr	r3, [pc, #24]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b9aa:	220a      	movs	r2, #10
 800b9ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b9ae:	4805      	ldr	r0, [pc, #20]	; (800b9c4 <MX_SPI1_Init+0x68>)
 800b9b0:	f003 fd60 	bl	800f474 <HAL_SPI_Init>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800b9ba:	f7ff ffbf 	bl	800b93c <Error_Handler>
  }

}
 800b9be:	bf00      	nop
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	2000072c 	.word	0x2000072c
 800b9c8:	40013000 	.word	0x40013000

0800b9cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9d4:	f107 0310 	add.w	r3, r7, #16
 800b9d8:	2200      	movs	r2, #0
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	605a      	str	r2, [r3, #4]
 800b9de:	609a      	str	r2, [r3, #8]
 800b9e0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a15      	ldr	r2, [pc, #84]	; (800ba3c <HAL_SPI_MspInit+0x70>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d123      	bne.n	800ba34 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b9ec:	4b14      	ldr	r3, [pc, #80]	; (800ba40 <HAL_SPI_MspInit+0x74>)
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	4a13      	ldr	r2, [pc, #76]	; (800ba40 <HAL_SPI_MspInit+0x74>)
 800b9f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b9f6:	6193      	str	r3, [r2, #24]
 800b9f8:	4b11      	ldr	r3, [pc, #68]	; (800ba40 <HAL_SPI_MspInit+0x74>)
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba00:	60fb      	str	r3, [r7, #12]
 800ba02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba04:	4b0e      	ldr	r3, [pc, #56]	; (800ba40 <HAL_SPI_MspInit+0x74>)
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	4a0d      	ldr	r2, [pc, #52]	; (800ba40 <HAL_SPI_MspInit+0x74>)
 800ba0a:	f043 0304 	orr.w	r3, r3, #4
 800ba0e:	6193      	str	r3, [r2, #24]
 800ba10:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <HAL_SPI_MspInit+0x74>)
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	f003 0304 	and.w	r3, r3, #4
 800ba18:	60bb      	str	r3, [r7, #8]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 800ba1c:	23a0      	movs	r3, #160	; 0xa0
 800ba1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba20:	2302      	movs	r3, #2
 800ba22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ba24:	2303      	movs	r3, #3
 800ba26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba28:	f107 0310 	add.w	r3, r7, #16
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4805      	ldr	r0, [pc, #20]	; (800ba44 <HAL_SPI_MspInit+0x78>)
 800ba30:	f001 fb6e 	bl	800d110 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800ba34:	bf00      	nop
 800ba36:	3720      	adds	r7, #32
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	40013000 	.word	0x40013000
 800ba40:	40021000 	.word	0x40021000
 800ba44:	40010800 	.word	0x40010800

0800ba48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800ba4e:	4b15      	ldr	r3, [pc, #84]	; (800baa4 <HAL_MspInit+0x5c>)
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	4a14      	ldr	r2, [pc, #80]	; (800baa4 <HAL_MspInit+0x5c>)
 800ba54:	f043 0301 	orr.w	r3, r3, #1
 800ba58:	6193      	str	r3, [r2, #24]
 800ba5a:	4b12      	ldr	r3, [pc, #72]	; (800baa4 <HAL_MspInit+0x5c>)
 800ba5c:	699b      	ldr	r3, [r3, #24]
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	60bb      	str	r3, [r7, #8]
 800ba64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ba66:	4b0f      	ldr	r3, [pc, #60]	; (800baa4 <HAL_MspInit+0x5c>)
 800ba68:	69db      	ldr	r3, [r3, #28]
 800ba6a:	4a0e      	ldr	r2, [pc, #56]	; (800baa4 <HAL_MspInit+0x5c>)
 800ba6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba70:	61d3      	str	r3, [r2, #28]
 800ba72:	4b0c      	ldr	r3, [pc, #48]	; (800baa4 <HAL_MspInit+0x5c>)
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba7a:	607b      	str	r3, [r7, #4]
 800ba7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800ba7e:	4b0a      	ldr	r3, [pc, #40]	; (800baa8 <HAL_MspInit+0x60>)
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	60fb      	str	r3, [r7, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800ba8a:	60fb      	str	r3, [r7, #12]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	4a04      	ldr	r2, [pc, #16]	; (800baa8 <HAL_MspInit+0x60>)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ba9a:	bf00      	nop
 800ba9c:	3714      	adds	r7, #20
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bc80      	pop	{r7}
 800baa2:	4770      	bx	lr
 800baa4:	40021000 	.word	0x40021000
 800baa8:	40010000 	.word	0x40010000

0800baac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800baac:	b480      	push	{r7}
 800baae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800bab0:	bf00      	nop
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bc80      	pop	{r7}
 800bab6:	4770      	bx	lr

0800bab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800babc:	f001 f840 	bl	800cb40 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bac0:	e7fe      	b.n	800bac0 <HardFault_Handler+0x8>

0800bac2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bac2:	b480      	push	{r7}
 800bac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bac6:	e7fe      	b.n	800bac6 <MemManage_Handler+0x4>

0800bac8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bac8:	b480      	push	{r7}
 800baca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bacc:	e7fe      	b.n	800bacc <BusFault_Handler+0x4>

0800bace <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bace:	b480      	push	{r7}
 800bad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bad2:	e7fe      	b.n	800bad2 <UsageFault_Handler+0x4>

0800bad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bad4:	b480      	push	{r7}
 800bad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bad8:	bf00      	nop
 800bada:	46bd      	mov	sp, r7
 800badc:	bc80      	pop	{r7}
 800bade:	4770      	bx	lr

0800bae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bae0:	b480      	push	{r7}
 800bae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bae4:	bf00      	nop
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bc80      	pop	{r7}
 800baea:	4770      	bx	lr

0800baec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800baec:	b480      	push	{r7}
 800baee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800baf0:	bf00      	nop
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bc80      	pop	{r7}
 800baf6:	4770      	bx	lr

0800baf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bafc:	f000 fb6a 	bl	800c1d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bb00:	bf00      	nop
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bb04:	b480      	push	{r7}
 800bb06:	af00      	add	r7, sp, #0
	return 1;
 800bb08:	2301      	movs	r3, #1
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bc80      	pop	{r7}
 800bb10:	4770      	bx	lr

0800bb12 <_kill>:

int _kill(int pid, int sig)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800bb1c:	f005 fb74 	bl	8011208 <__errno>
 800bb20:	4602      	mov	r2, r0
 800bb22:	2316      	movs	r3, #22
 800bb24:	6013      	str	r3, [r2, #0]
	return -1;
 800bb26:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <_exit>:

void _exit (int status)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b082      	sub	sp, #8
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800bb3a:	f04f 31ff 	mov.w	r1, #4294967295
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7ff ffe7 	bl	800bb12 <_kill>
	while (1) {}		/* Make sure we hang here */
 800bb44:	e7fe      	b.n	800bb44 <_exit+0x12>
	...

0800bb48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bb50:	4a14      	ldr	r2, [pc, #80]	; (800bba4 <_sbrk+0x5c>)
 800bb52:	4b15      	ldr	r3, [pc, #84]	; (800bba8 <_sbrk+0x60>)
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bb5c:	4b13      	ldr	r3, [pc, #76]	; (800bbac <_sbrk+0x64>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d102      	bne.n	800bb6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bb64:	4b11      	ldr	r3, [pc, #68]	; (800bbac <_sbrk+0x64>)
 800bb66:	4a12      	ldr	r2, [pc, #72]	; (800bbb0 <_sbrk+0x68>)
 800bb68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bb6a:	4b10      	ldr	r3, [pc, #64]	; (800bbac <_sbrk+0x64>)
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4413      	add	r3, r2
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d207      	bcs.n	800bb88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bb78:	f005 fb46 	bl	8011208 <__errno>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	230c      	movs	r3, #12
 800bb80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800bb82:	f04f 33ff 	mov.w	r3, #4294967295
 800bb86:	e009      	b.n	800bb9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bb88:	4b08      	ldr	r3, [pc, #32]	; (800bbac <_sbrk+0x64>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bb8e:	4b07      	ldr	r3, [pc, #28]	; (800bbac <_sbrk+0x64>)
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4413      	add	r3, r2
 800bb96:	4a05      	ldr	r2, [pc, #20]	; (800bbac <_sbrk+0x64>)
 800bb98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3718      	adds	r7, #24
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	20005000 	.word	0x20005000
 800bba8:	00000400 	.word	0x00000400
 800bbac:	20000698 	.word	0x20000698
 800bbb0:	20000830 	.word	0x20000830

0800bbb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800bbb8:	4b15      	ldr	r3, [pc, #84]	; (800bc10 <SystemInit+0x5c>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a14      	ldr	r2, [pc, #80]	; (800bc10 <SystemInit+0x5c>)
 800bbbe:	f043 0301 	orr.w	r3, r3, #1
 800bbc2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800bbc4:	4b12      	ldr	r3, [pc, #72]	; (800bc10 <SystemInit+0x5c>)
 800bbc6:	685a      	ldr	r2, [r3, #4]
 800bbc8:	4911      	ldr	r1, [pc, #68]	; (800bc10 <SystemInit+0x5c>)
 800bbca:	4b12      	ldr	r3, [pc, #72]	; (800bc14 <SystemInit+0x60>)
 800bbcc:	4013      	ands	r3, r2
 800bbce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800bbd0:	4b0f      	ldr	r3, [pc, #60]	; (800bc10 <SystemInit+0x5c>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a0e      	ldr	r2, [pc, #56]	; (800bc10 <SystemInit+0x5c>)
 800bbd6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800bbda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbde:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bbe0:	4b0b      	ldr	r3, [pc, #44]	; (800bc10 <SystemInit+0x5c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a0a      	ldr	r2, [pc, #40]	; (800bc10 <SystemInit+0x5c>)
 800bbe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bbea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800bbec:	4b08      	ldr	r3, [pc, #32]	; (800bc10 <SystemInit+0x5c>)
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	4a07      	ldr	r2, [pc, #28]	; (800bc10 <SystemInit+0x5c>)
 800bbf2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800bbf6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800bbf8:	4b05      	ldr	r3, [pc, #20]	; (800bc10 <SystemInit+0x5c>)
 800bbfa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800bbfe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800bc00:	4b05      	ldr	r3, [pc, #20]	; (800bc18 <SystemInit+0x64>)
 800bc02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bc06:	609a      	str	r2, [r3, #8]
#endif 
}
 800bc08:	bf00      	nop
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bc80      	pop	{r7}
 800bc0e:	4770      	bx	lr
 800bc10:	40021000 	.word	0x40021000
 800bc14:	f8ff0000 	.word	0xf8ff0000
 800bc18:	e000ed00 	.word	0xe000ed00

0800bc1c <_ZN13THERMO_SENSOR12clearI2CBuffEv>:
// HOLD MASTER - SCL line is blocked (controlled by sensor) during measurement
// NO HOLD MASTER - allows other I2C communication tasks while sensor performing
// measurements.

void THERMO_SENSOR::clearI2CBuff()
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2220      	movs	r2, #32
 800bc28:	2100      	movs	r1, #0
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f005 fb67 	bl	80112fe <memset>
	i2cBufferIndex = 0;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 2020 	strb.w	r2, [r3, #32]
}
 800bc38:	bf00      	nop
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <_ZN13THERMO_SENSOR13readSensor_hmEh>:

uint16_t THERMO_SENSOR::readSensor_hm(uint8_t command)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af02      	add	r7, sp, #8
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	uint16_t result;
//	uint8_t n = 0;
	uint8_t d;

	if(command == TRIGGER_RH_MEASUREMENT_HM || command == TRIGGER_RH_MEASUREMENT_NHM)
 800bc4c:	78fb      	ldrb	r3, [r7, #3]
 800bc4e:	2be5      	cmp	r3, #229	; 0xe5
 800bc50:	d002      	beq.n	800bc58 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x18>
 800bc52:	78fb      	ldrb	r3, [r7, #3]
 800bc54:	2bf5      	cmp	r3, #245	; 0xf5
 800bc56:	d101      	bne.n	800bc5c <_ZN13THERMO_SENSOR13readSensor_hmEh+0x1c>
		d = 30;
 800bc58:	231e      	movs	r3, #30
 800bc5a:	737b      	strb	r3, [r7, #13]
	if(command == TRIGGER_T_MEASUREMENT_HM || command == TRIGGER_T_MEASUREMENT_NHM)
 800bc5c:	78fb      	ldrb	r3, [r7, #3]
 800bc5e:	2be3      	cmp	r3, #227	; 0xe3
 800bc60:	d002      	beq.n	800bc68 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x28>
 800bc62:	78fb      	ldrb	r3, [r7, #3]
 800bc64:	2bf3      	cmp	r3, #243	; 0xf3
 800bc66:	d101      	bne.n	800bc6c <_ZN13THERMO_SENSOR13readSensor_hmEh+0x2c>
		d = 85;
 800bc68:	2355      	movs	r3, #85	; 0x55
 800bc6a:	737b      	strb	r3, [r7, #13]

	clearI2CBuff();
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7ff ffd5 	bl	800bc1c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = command;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	78fa      	ldrb	r2, [r7, #3]
 800bc76:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	230a      	movs	r3, #10
 800bc7c:	9300      	str	r3, [sp, #0]
 800bc7e:	2301      	movs	r3, #1
 800bc80:	2180      	movs	r1, #128	; 0x80
 800bc82:	482d      	ldr	r0, [pc, #180]	; (800bd38 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800bc84:	f001 feb6 	bl	800d9f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(d);
 800bc88:	7b7b      	ldrb	r3, [r7, #13]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 fabe 	bl	800c20c <HAL_Delay>
	clearI2CBuff();
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f7ff ffc3 	bl	800bc1c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	HAL_I2C_Master_Receive(&hi2c1, I2CTEMPADDR, i2cBuffer, 3, 10);
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	230a      	movs	r3, #10
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	2180      	movs	r1, #128	; 0x80
 800bca0:	4825      	ldr	r0, [pc, #148]	; (800bd38 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800bca2:	f001 ffa5 	bl	800dbf0 <HAL_I2C_Master_Receive>
	data[0] = i2cBuffer[i2cBufferIndex++]; 	// read data (MSB)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bcac:	1c5a      	adds	r2, r3, #1
 800bcae:	b2d1      	uxtb	r1, r2
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	f882 1020 	strb.w	r1, [r2, #32]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	5c9b      	ldrb	r3, [r3, r2]
 800bcbc:	723b      	strb	r3, [r7, #8]
	data[1] = i2cBuffer[i2cBufferIndex++]; 	// read data (LSB)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	b2d1      	uxtb	r1, r2
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	f882 1020 	strb.w	r1, [r2, #32]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	5c9b      	ldrb	r3, [r3, r2]
 800bcd4:	727b      	strb	r3, [r7, #9]
	checksum = i2cBuffer[i2cBufferIndex++];	// read checksum
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	b2d1      	uxtb	r1, r2
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	f882 1020 	strb.w	r1, [r2, #32]
 800bce6:	461a      	mov	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	5c9b      	ldrb	r3, [r3, r2]
 800bcec:	733b      	strb	r3, [r7, #12]
	result = (data[0] << 8);
 800bcee:	7a3b      	ldrb	r3, [r7, #8]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	021b      	lsls	r3, r3, #8
 800bcf4:	81fb      	strh	r3, [r7, #14]
	result += data[1];
 800bcf6:	7a7b      	ldrb	r3, [r7, #9]
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	89fb      	ldrh	r3, [r7, #14]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	81fb      	strh	r3, [r7, #14]
	if(CRC_Checksum (data, 2, checksum))
 800bd00:	7b3b      	ldrb	r3, [r7, #12]
 800bd02:	f107 0108 	add.w	r1, r7, #8
 800bd06:	2202      	movs	r2, #2
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f87d 	bl	800be08 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	bf14      	ite	ne
 800bd14:	2301      	movne	r3, #1
 800bd16:	2300      	moveq	r3, #0
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d004      	beq.n	800bd28 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xe8>
	{
		reset();
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f8e2 	bl	800bee8 <_ZN13THERMO_SENSOR5resetEv>
		result = 1;
 800bd24:	2301      	movs	r3, #1
 800bd26:	81fb      	strh	r3, [r7, #14]
	}
	clearI2CBuff();
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7ff ff77 	bl	800bc1c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	return result; // @suppress("Return with parenthesis")
 800bd2e:	89fb      	ldrh	r3, [r7, #14]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	200006d8 	.word	0x200006d8

0800bd3c <_ZN13THERMO_SENSOR6CalcRHEt>:

float THERMO_SENSOR::CalcRH(uint16_t rh)
{
 800bd3c:	b590      	push	{r4, r7, lr}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	807b      	strh	r3, [r7, #2]
	rh &= ~0x0003;	// clean last two bits
 800bd48:	887b      	ldrh	r3, [r7, #2]
 800bd4a:	f023 0303 	bic.w	r3, r3, #3
 800bd4e:	807b      	strh	r3, [r7, #2]
  	return (-6.0 + 125.0/65536 * (float)rh); // return relative humidity
 800bd50:	887b      	ldrh	r3, [r7, #2]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7f4 ffbe 	bl	8000cd4 <__aeabi_ui2f>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7f4 fb64 	bl	8000428 <__aeabi_f2d>
 800bd60:	f04f 0200 	mov.w	r2, #0
 800bd64:	4b0b      	ldr	r3, [pc, #44]	; (800bd94 <_ZN13THERMO_SENSOR6CalcRHEt+0x58>)
 800bd66:	f7f4 fbb7 	bl	80004d8 <__aeabi_dmul>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	4618      	mov	r0, r3
 800bd70:	4621      	mov	r1, r4
 800bd72:	f04f 0200 	mov.w	r2, #0
 800bd76:	4b08      	ldr	r3, [pc, #32]	; (800bd98 <_ZN13THERMO_SENSOR6CalcRHEt+0x5c>)
 800bd78:	f7f4 f9f6 	bl	8000168 <__aeabi_dsub>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	460c      	mov	r4, r1
 800bd80:	4618      	mov	r0, r3
 800bd82:	4621      	mov	r1, r4
 800bd84:	f7f4 fea0 	bl	8000ac8 <__aeabi_d2f>
 800bd88:	4603      	mov	r3, r0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd90      	pop	{r4, r7, pc}
 800bd92:	bf00      	nop
 800bd94:	3f5f4000 	.word	0x3f5f4000
 800bd98:	40180000 	.word	0x40180000
 800bd9c:	00000000 	.word	0x00000000

0800bda0 <_ZN13THERMO_SENSOR5CalcTEt>:

float THERMO_SENSOR::CalcT(uint16_t t)
{
 800bda0:	b590      	push	{r4, r7, lr}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	807b      	strh	r3, [r7, #2]
	t &= ~0x0003;	// clean last two bits
 800bdac:	887b      	ldrh	r3, [r7, #2]
 800bdae:	f023 0303 	bic.w	r3, r3, #3
 800bdb2:	807b      	strh	r3, [r7, #2]
	return (-46.85 + 175.72/65536 * (float)t);
 800bdb4:	887b      	ldrh	r3, [r7, #2]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7f4 ff8c 	bl	8000cd4 <__aeabi_ui2f>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7f4 fb32 	bl	8000428 <__aeabi_f2d>
 800bdc4:	a30c      	add	r3, pc, #48	; (adr r3, 800bdf8 <_ZN13THERMO_SENSOR5CalcTEt+0x58>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 fb85 	bl	80004d8 <__aeabi_dmul>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	a30a      	add	r3, pc, #40	; (adr r3, 800be00 <_ZN13THERMO_SENSOR5CalcTEt+0x60>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	f7f4 f9c4 	bl	8000168 <__aeabi_dsub>
 800bde0:	4603      	mov	r3, r0
 800bde2:	460c      	mov	r4, r1
 800bde4:	4618      	mov	r0, r3
 800bde6:	4621      	mov	r1, r4
 800bde8:	f7f4 fe6e 	bl	8000ac8 <__aeabi_d2f>
 800bdec:	4603      	mov	r3, r0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	370c      	adds	r7, #12
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd90      	pop	{r4, r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	3d70a3d7 	.word	0x3d70a3d7
 800bdfc:	3f65f70a 	.word	0x3f65f70a
 800be00:	cccccccd 	.word	0xcccccccd
 800be04:	40476ccc 	.word	0x40476ccc

0800be08 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>:

uint8_t THERMO_SENSOR::CRC_Checksum(uint8_t data[], uint8_t no_of_bytes, uint8_t checksum)
{
 800be08:	b480      	push	{r7}
 800be0a:	b087      	sub	sp, #28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	4611      	mov	r1, r2
 800be14:	461a      	mov	r2, r3
 800be16:	460b      	mov	r3, r1
 800be18:	71fb      	strb	r3, [r7, #7]
 800be1a:	4613      	mov	r3, r2
 800be1c:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = 0;
 800be1e:	2300      	movs	r3, #0
 800be20:	75fb      	strb	r3, [r7, #23]
  	uint8_t byteCtr;
  	uint8_t ret = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	757b      	strb	r3, [r7, #21]

 	 //calculates 8-Bit checksum with given polynomial
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800be26:	2300      	movs	r3, #0
 800be28:	75bb      	strb	r3, [r7, #22]
 800be2a:	7dba      	ldrb	r2, [r7, #22]
 800be2c:	79fb      	ldrb	r3, [r7, #7]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d222      	bcs.n	800be78 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x70>
 	 {
		crc ^= (data[byteCtr]);
 800be32:	7dbb      	ldrb	r3, [r7, #22]
 800be34:	68ba      	ldr	r2, [r7, #8]
 800be36:	4413      	add	r3, r2
 800be38:	781a      	ldrb	r2, [r3, #0]
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	4053      	eors	r3, r2
 800be3e:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800be40:	2308      	movs	r3, #8
 800be42:	753b      	strb	r3, [r7, #20]
 800be44:	7d3b      	ldrb	r3, [r7, #20]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d012      	beq.n	800be70 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x68>
		{
		   if (crc & 0x80)
 800be4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	da07      	bge.n	800be62 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x5a>
			   crc = (crc << 1) ^ POLYNOMIAL;
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	b25b      	sxtb	r3, r3
 800be58:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800be5c:	b25b      	sxtb	r3, r3
 800be5e:	75fb      	strb	r3, [r7, #23]
 800be60:	e002      	b.n	800be68 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x60>
		   else
			   crc = (crc << 1);
 800be62:	7dfb      	ldrb	r3, [r7, #23]
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800be68:	7d3b      	ldrb	r3, [r7, #20]
 800be6a:	3b01      	subs	r3, #1
 800be6c:	753b      	strb	r3, [r7, #20]
 800be6e:	e7e9      	b.n	800be44 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x3c>
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800be70:	7dbb      	ldrb	r3, [r7, #22]
 800be72:	3301      	adds	r3, #1
 800be74:	75bb      	strb	r3, [r7, #22]
 800be76:	e7d8      	b.n	800be2a <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x22>
		}
 	 }
 	 if (crc != checksum)
 800be78:	7dfa      	ldrb	r2, [r7, #23]
 800be7a:	79bb      	ldrb	r3, [r7, #6]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d002      	beq.n	800be86 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x7e>
 		 ret = 1;
 800be80:	2301      	movs	r3, #1
 800be82:	757b      	strb	r3, [r7, #21]
 800be84:	e001      	b.n	800be8a <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x82>
 	 else
 		 ret = 0;
 800be86:	2300      	movs	r3, #0
 800be88:	757b      	strb	r3, [r7, #21]
 	 return ret;
 800be8a:	7d7b      	ldrb	r3, [r7, #21]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	371c      	adds	r7, #28
 800be90:	46bd      	mov	sp, r7
 800be92:	bc80      	pop	{r7}
 800be94:	4770      	bx	lr

0800be96 <_ZN13THERMO_SENSOR11getHumidityEv>:
	return SN; // @suppress("Return with parenthesis")

}

float THERMO_SENSOR::getHumidity(void)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_RH_MEASUREMENT_NHM);
 800be9e:	21f5      	movs	r1, #245	; 0xf5
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff fecd 	bl	800bc40 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800bea6:	4603      	mov	r3, r0
 800bea8:	81fb      	strh	r3, [r7, #14]

	return CalcRH(result);
 800beaa:	89fb      	ldrh	r3, [r7, #14]
 800beac:	4619      	mov	r1, r3
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f7ff ff44 	bl	800bd3c <_ZN13THERMO_SENSOR6CalcRHEt>
 800beb4:	4603      	mov	r3, r0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <_ZN13THERMO_SENSOR14getTemperatureEv>:

float THERMO_SENSOR::getTemperature(void)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b084      	sub	sp, #16
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_T_MEASUREMENT_NHM);
 800bec6:	21f3      	movs	r1, #243	; 0xf3
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7ff feb9 	bl	800bc40 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800bece:	4603      	mov	r3, r0
 800bed0:	81fb      	strh	r3, [r7, #14]

	return CalcT(result);
 800bed2:	89fb      	ldrh	r3, [r7, #14]
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7ff ff62 	bl	800bda0 <_ZN13THERMO_SENSOR5CalcTEt>
 800bedc:	4603      	mov	r3, r0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
	...

0800bee8 <_ZN13THERMO_SENSOR5resetEv>:

void THERMO_SENSOR::reset()
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af02      	add	r7, sp, #8
 800beee:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7ff fe93 	bl	800bc1c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = SOFT_RESET;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	22fe      	movs	r2, #254	; 0xfe
 800befa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	230a      	movs	r3, #10
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	2301      	movs	r3, #1
 800bf04:	2180      	movs	r1, #128	; 0x80
 800bf06:	4806      	ldr	r0, [pc, #24]	; (800bf20 <_ZN13THERMO_SENSOR5resetEv+0x38>)
 800bf08:	f001 fd74 	bl	800d9f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 800bf0c:	200f      	movs	r0, #15
 800bf0e:	f000 f97d 	bl	800c20c <HAL_Delay>
	clearI2CBuff();
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff fe82 	bl	800bc1c <_ZN13THERMO_SENSOR12clearI2CBuffEv>
}
 800bf18:	bf00      	nop
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	200006d8 	.word	0x200006d8

0800bf24 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b086      	sub	sp, #24
 800bf28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bf2a:	f107 0308 	add.w	r3, r7, #8
 800bf2e:	2200      	movs	r2, #0
 800bf30:	601a      	str	r2, [r3, #0]
 800bf32:	605a      	str	r2, [r3, #4]
 800bf34:	609a      	str	r2, [r3, #8]
 800bf36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bf38:	463b      	mov	r3, r7
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	601a      	str	r2, [r3, #0]
 800bf3e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800bf40:	4b1d      	ldr	r3, [pc, #116]	; (800bfb8 <MX_TIM2_Init+0x94>)
 800bf42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bf46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800bf48:	4b1b      	ldr	r3, [pc, #108]	; (800bfb8 <MX_TIM2_Init+0x94>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bf4e:	4b1a      	ldr	r3, [pc, #104]	; (800bfb8 <MX_TIM2_Init+0x94>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 800bf54:	4b18      	ldr	r3, [pc, #96]	; (800bfb8 <MX_TIM2_Init+0x94>)
 800bf56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bf5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bf5c:	4b16      	ldr	r3, [pc, #88]	; (800bfb8 <MX_TIM2_Init+0x94>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bf62:	4b15      	ldr	r3, [pc, #84]	; (800bfb8 <MX_TIM2_Init+0x94>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800bf68:	4813      	ldr	r0, [pc, #76]	; (800bfb8 <MX_TIM2_Init+0x94>)
 800bf6a:	f003 fd61 	bl	800fa30 <HAL_TIM_Base_Init>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d001      	beq.n	800bf78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800bf74:	f7ff fce2 	bl	800b93c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bf78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800bf7e:	f107 0308 	add.w	r3, r7, #8
 800bf82:	4619      	mov	r1, r3
 800bf84:	480c      	ldr	r0, [pc, #48]	; (800bfb8 <MX_TIM2_Init+0x94>)
 800bf86:	f003 fe1d 	bl	800fbc4 <HAL_TIM_ConfigClockSource>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800bf90:	f7ff fcd4 	bl	800b93c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bf94:	2300      	movs	r3, #0
 800bf96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800bf9c:	463b      	mov	r3, r7
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	4805      	ldr	r0, [pc, #20]	; (800bfb8 <MX_TIM2_Init+0x94>)
 800bfa2:	f004 f999 	bl	80102d8 <HAL_TIMEx_MasterConfigSynchronization>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d001      	beq.n	800bfb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800bfac:	f7ff fcc6 	bl	800b93c <Error_Handler>
  }

}
 800bfb0:	bf00      	nop
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20000784 	.word	0x20000784

0800bfbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfcc:	d10b      	bne.n	800bfe6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bfce:	4b08      	ldr	r3, [pc, #32]	; (800bff0 <HAL_TIM_Base_MspInit+0x34>)
 800bfd0:	69db      	ldr	r3, [r3, #28]
 800bfd2:	4a07      	ldr	r2, [pc, #28]	; (800bff0 <HAL_TIM_Base_MspInit+0x34>)
 800bfd4:	f043 0301 	orr.w	r3, r3, #1
 800bfd8:	61d3      	str	r3, [r2, #28]
 800bfda:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <HAL_TIM_Base_MspInit+0x34>)
 800bfdc:	69db      	ldr	r3, [r3, #28]
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	60fb      	str	r3, [r7, #12]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800bfe6:	bf00      	nop
 800bfe8:	3714      	adds	r7, #20
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bc80      	pop	{r7}
 800bfee:	4770      	bx	lr
 800bff0:	40021000 	.word	0x40021000

0800bff4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800bff8:	4b11      	ldr	r3, [pc, #68]	; (800c040 <MX_USART1_UART_Init+0x4c>)
 800bffa:	4a12      	ldr	r2, [pc, #72]	; (800c044 <MX_USART1_UART_Init+0x50>)
 800bffc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800bffe:	4b10      	ldr	r3, [pc, #64]	; (800c040 <MX_USART1_UART_Init+0x4c>)
 800c000:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c004:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c006:	4b0e      	ldr	r3, [pc, #56]	; (800c040 <MX_USART1_UART_Init+0x4c>)
 800c008:	2200      	movs	r2, #0
 800c00a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c00c:	4b0c      	ldr	r3, [pc, #48]	; (800c040 <MX_USART1_UART_Init+0x4c>)
 800c00e:	2200      	movs	r2, #0
 800c010:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c012:	4b0b      	ldr	r3, [pc, #44]	; (800c040 <MX_USART1_UART_Init+0x4c>)
 800c014:	2200      	movs	r2, #0
 800c016:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c018:	4b09      	ldr	r3, [pc, #36]	; (800c040 <MX_USART1_UART_Init+0x4c>)
 800c01a:	220c      	movs	r2, #12
 800c01c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c01e:	4b08      	ldr	r3, [pc, #32]	; (800c040 <MX_USART1_UART_Init+0x4c>)
 800c020:	2200      	movs	r2, #0
 800c022:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c024:	4b06      	ldr	r3, [pc, #24]	; (800c040 <MX_USART1_UART_Init+0x4c>)
 800c026:	2200      	movs	r2, #0
 800c028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c02a:	4805      	ldr	r0, [pc, #20]	; (800c040 <MX_USART1_UART_Init+0x4c>)
 800c02c:	f004 f9ea 	bl	8010404 <HAL_UART_Init>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c036:	f7ff fc81 	bl	800b93c <Error_Handler>
  }

}
 800c03a:	bf00      	nop
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	200007c4 	.word	0x200007c4
 800c044:	40013800 	.word	0x40013800

0800c048 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08a      	sub	sp, #40	; 0x28
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c050:	f107 0314 	add.w	r3, r7, #20
 800c054:	2200      	movs	r2, #0
 800c056:	601a      	str	r2, [r3, #0]
 800c058:	605a      	str	r2, [r3, #4]
 800c05a:	609a      	str	r2, [r3, #8]
 800c05c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a22      	ldr	r2, [pc, #136]	; (800c0ec <HAL_UART_MspInit+0xa4>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d13d      	bne.n	800c0e4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c068:	4b21      	ldr	r3, [pc, #132]	; (800c0f0 <HAL_UART_MspInit+0xa8>)
 800c06a:	699b      	ldr	r3, [r3, #24]
 800c06c:	4a20      	ldr	r2, [pc, #128]	; (800c0f0 <HAL_UART_MspInit+0xa8>)
 800c06e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c072:	6193      	str	r3, [r2, #24]
 800c074:	4b1e      	ldr	r3, [pc, #120]	; (800c0f0 <HAL_UART_MspInit+0xa8>)
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c07c:	613b      	str	r3, [r7, #16]
 800c07e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c080:	4b1b      	ldr	r3, [pc, #108]	; (800c0f0 <HAL_UART_MspInit+0xa8>)
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	4a1a      	ldr	r2, [pc, #104]	; (800c0f0 <HAL_UART_MspInit+0xa8>)
 800c086:	f043 0308 	orr.w	r3, r3, #8
 800c08a:	6193      	str	r3, [r2, #24]
 800c08c:	4b18      	ldr	r3, [pc, #96]	; (800c0f0 <HAL_UART_MspInit+0xa8>)
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	f003 0308 	and.w	r3, r3, #8
 800c094:	60fb      	str	r3, [r7, #12]
 800c096:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 800c098:	2340      	movs	r3, #64	; 0x40
 800c09a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c09c:	2302      	movs	r3, #2
 800c09e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c0a0:	2303      	movs	r3, #3
 800c0a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800c0a4:	f107 0314 	add.w	r3, r7, #20
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4812      	ldr	r0, [pc, #72]	; (800c0f4 <HAL_UART_MspInit+0xac>)
 800c0ac:	f001 f830 	bl	800d110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800c0b0:	2380      	movs	r3, #128	; 0x80
 800c0b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800c0bc:	f107 0314 	add.w	r3, r7, #20
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	480c      	ldr	r0, [pc, #48]	; (800c0f4 <HAL_UART_MspInit+0xac>)
 800c0c4:	f001 f824 	bl	800d110 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800c0c8:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <HAL_UART_MspInit+0xb0>)
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800c0d4:	627b      	str	r3, [r7, #36]	; 0x24
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d8:	f043 0304 	orr.w	r3, r3, #4
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c0de:	4a06      	ldr	r2, [pc, #24]	; (800c0f8 <HAL_UART_MspInit+0xb0>)
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c0e4:	bf00      	nop
 800c0e6:	3728      	adds	r7, #40	; 0x28
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	40013800 	.word	0x40013800
 800c0f0:	40021000 	.word	0x40021000
 800c0f4:	40010c00 	.word	0x40010c00
 800c0f8:	40010000 	.word	0x40010000

0800c0fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800c0fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800c0fe:	e003      	b.n	800c108 <LoopCopyDataInit>

0800c100 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800c100:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800c102:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800c104:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800c106:	3104      	adds	r1, #4

0800c108 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800c108:	480a      	ldr	r0, [pc, #40]	; (800c134 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800c10a:	4b0b      	ldr	r3, [pc, #44]	; (800c138 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800c10c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800c10e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800c110:	d3f6      	bcc.n	800c100 <CopyDataInit>
  ldr r2, =_sbss
 800c112:	4a0a      	ldr	r2, [pc, #40]	; (800c13c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800c114:	e002      	b.n	800c11c <LoopFillZerobss>

0800c116 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800c116:	2300      	movs	r3, #0
  str r3, [r2], #4
 800c118:	f842 3b04 	str.w	r3, [r2], #4

0800c11c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800c11c:	4b08      	ldr	r3, [pc, #32]	; (800c140 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800c11e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800c120:	d3f9      	bcc.n	800c116 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c122:	f7ff fd47 	bl	800bbb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c126:	f005 f875 	bl	8011214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c12a:	f7ff fb67 	bl	800b7fc <main>
  bx lr
 800c12e:	4770      	bx	lr
  ldr r3, =_sidata
 800c130:	080186d0 	.word	0x080186d0
  ldr r0, =_sdata
 800c134:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800c138:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 800c13c:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 800c140:	2000082c 	.word	0x2000082c

0800c144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c144:	e7fe      	b.n	800c144 <ADC1_2_IRQHandler>
	...

0800c148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c14c:	4b08      	ldr	r3, [pc, #32]	; (800c170 <HAL_Init+0x28>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a07      	ldr	r2, [pc, #28]	; (800c170 <HAL_Init+0x28>)
 800c152:	f043 0310 	orr.w	r3, r3, #16
 800c156:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c158:	2003      	movs	r0, #3
 800c15a:	f000 fca5 	bl	800caa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c15e:	2000      	movs	r0, #0
 800c160:	f000 f808 	bl	800c174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c164:	f7ff fc70 	bl	800ba48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	40022000 	.word	0x40022000

0800c174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c17c:	4b12      	ldr	r3, [pc, #72]	; (800c1c8 <HAL_InitTick+0x54>)
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	4b12      	ldr	r3, [pc, #72]	; (800c1cc <HAL_InitTick+0x58>)
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	4619      	mov	r1, r3
 800c186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c18a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c192:	4618      	mov	r0, r3
 800c194:	f000 fcd8 	bl	800cb48 <HAL_SYSTICK_Config>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d001      	beq.n	800c1a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e00e      	b.n	800c1c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b0f      	cmp	r3, #15
 800c1a6:	d80a      	bhi.n	800c1be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	6879      	ldr	r1, [r7, #4]
 800c1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b0:	f000 fc9a 	bl	800cae8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c1b4:	4a06      	ldr	r2, [pc, #24]	; (800c1d0 <HAL_InitTick+0x5c>)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e000      	b.n	800c1c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	2000009c 	.word	0x2000009c
 800c1cc:	200000a4 	.word	0x200000a4
 800c1d0:	200000a0 	.word	0x200000a0

0800c1d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c1d8:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <HAL_IncTick+0x1c>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	461a      	mov	r2, r3
 800c1de:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <HAL_IncTick+0x20>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	4a03      	ldr	r2, [pc, #12]	; (800c1f4 <HAL_IncTick+0x20>)
 800c1e6:	6013      	str	r3, [r2, #0]
}
 800c1e8:	bf00      	nop
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bc80      	pop	{r7}
 800c1ee:	4770      	bx	lr
 800c1f0:	200000a4 	.word	0x200000a4
 800c1f4:	20000804 	.word	0x20000804

0800c1f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	af00      	add	r7, sp, #0
  return uwTick;
 800c1fc:	4b02      	ldr	r3, [pc, #8]	; (800c208 <HAL_GetTick+0x10>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
}
 800c200:	4618      	mov	r0, r3
 800c202:	46bd      	mov	sp, r7
 800c204:	bc80      	pop	{r7}
 800c206:	4770      	bx	lr
 800c208:	20000804 	.word	0x20000804

0800c20c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c214:	f7ff fff0 	bl	800c1f8 <HAL_GetTick>
 800c218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c224:	d005      	beq.n	800c232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c226:	4b09      	ldr	r3, [pc, #36]	; (800c24c <HAL_Delay+0x40>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	461a      	mov	r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	4413      	add	r3, r2
 800c230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c232:	bf00      	nop
 800c234:	f7ff ffe0 	bl	800c1f8 <HAL_GetTick>
 800c238:	4602      	mov	r2, r0
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	429a      	cmp	r2, r3
 800c242:	d8f7      	bhi.n	800c234 <HAL_Delay+0x28>
  {
  }
}
 800c244:	bf00      	nop
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	200000a4 	.word	0x200000a4

0800c250 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800c25c:	2300      	movs	r3, #0
 800c25e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800c260:	2300      	movs	r3, #0
 800c262:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800c264:	2300      	movs	r3, #0
 800c266:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d101      	bne.n	800c272 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e153      	b.n	800c51a <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a9f      	ldr	r2, [pc, #636]	; (800c4f4 <HAL_ADC_Init+0x2a4>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d009      	beq.n	800c290 <HAL_ADC_Init+0x40>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a9d      	ldr	r2, [pc, #628]	; (800c4f8 <HAL_ADC_Init+0x2a8>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d004      	beq.n	800c290 <HAL_ADC_Init+0x40>
 800c286:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c28a:	489c      	ldr	r0, [pc, #624]	; (800c4fc <HAL_ADC_Init+0x2ac>)
 800c28c:	f7ff fb5c 	bl	800b948 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d009      	beq.n	800c2ac <HAL_ADC_Init+0x5c>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2a0:	d004      	beq.n	800c2ac <HAL_ADC_Init+0x5c>
 800c2a2:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800c2a6:	4895      	ldr	r0, [pc, #596]	; (800c4fc <HAL_ADC_Init+0x2ac>)
 800c2a8:	f7ff fb4e 	bl	800b948 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d009      	beq.n	800c2c8 <HAL_ADC_Init+0x78>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2bc:	d004      	beq.n	800c2c8 <HAL_ADC_Init+0x78>
 800c2be:	f240 11b5 	movw	r1, #437	; 0x1b5
 800c2c2:	488e      	ldr	r0, [pc, #568]	; (800c4fc <HAL_ADC_Init+0x2ac>)
 800c2c4:	f7ff fb40 	bl	800b948 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7b1b      	ldrb	r3, [r3, #12]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d008      	beq.n	800c2e2 <HAL_ADC_Init+0x92>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7b1b      	ldrb	r3, [r3, #12]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d004      	beq.n	800c2e2 <HAL_ADC_Init+0x92>
 800c2d8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800c2dc:	4887      	ldr	r0, [pc, #540]	; (800c4fc <HAL_ADC_Init+0x2ac>)
 800c2de:	f7ff fb33 	bl	800b948 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	69db      	ldr	r3, [r3, #28]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d022      	beq.n	800c330 <HAL_ADC_Init+0xe0>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2f2:	d01d      	beq.n	800c330 <HAL_ADC_Init+0xe0>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	69db      	ldr	r3, [r3, #28]
 800c2f8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c2fc:	d018      	beq.n	800c330 <HAL_ADC_Init+0xe0>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	69db      	ldr	r3, [r3, #28]
 800c302:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c306:	d013      	beq.n	800c330 <HAL_ADC_Init+0xe0>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	69db      	ldr	r3, [r3, #28]
 800c30c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800c310:	d00e      	beq.n	800c330 <HAL_ADC_Init+0xe0>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	69db      	ldr	r3, [r3, #28]
 800c316:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c31a:	d009      	beq.n	800c330 <HAL_ADC_Init+0xe0>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	69db      	ldr	r3, [r3, #28]
 800c320:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800c324:	d004      	beq.n	800c330 <HAL_ADC_Init+0xe0>
 800c326:	f240 11b7 	movw	r1, #439	; 0x1b7
 800c32a:	4874      	ldr	r0, [pc, #464]	; (800c4fc <HAL_ADC_Init+0x2ac>)
 800c32c:	f7ff fb0c 	bl	800b948 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d02a      	beq.n	800c38e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <HAL_ADC_Init+0xf8>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	2b10      	cmp	r3, #16
 800c346:	d904      	bls.n	800c352 <HAL_ADC_Init+0x102>
 800c348:	f240 11bb 	movw	r1, #443	; 0x1bb
 800c34c:	486b      	ldr	r0, [pc, #428]	; (800c4fc <HAL_ADC_Init+0x2ac>)
 800c34e:	f7ff fafb 	bl	800b948 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	7d1b      	ldrb	r3, [r3, #20]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d008      	beq.n	800c36c <HAL_ADC_Init+0x11c>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	7d1b      	ldrb	r3, [r3, #20]
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d004      	beq.n	800c36c <HAL_ADC_Init+0x11c>
 800c362:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800c366:	4865      	ldr	r0, [pc, #404]	; (800c4fc <HAL_ADC_Init+0x2ac>)
 800c368:	f7ff faee 	bl	800b948 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	7d1b      	ldrb	r3, [r3, #20]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00c      	beq.n	800c38e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	699b      	ldr	r3, [r3, #24]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <HAL_ADC_Init+0x134>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	2b08      	cmp	r3, #8
 800c382:	d904      	bls.n	800c38e <HAL_ADC_Init+0x13e>
 800c384:	f240 11bf 	movw	r1, #447	; 0x1bf
 800c388:	485c      	ldr	r0, [pc, #368]	; (800c4fc <HAL_ADC_Init+0x2ac>)
 800c38a:	f7ff fadd 	bl	800b948 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c392:	2b00      	cmp	r3, #0
 800c394:	d109      	bne.n	800c3aa <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7ff f90d 	bl	800b5c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fa7e 	bl	800c8ac <ADC_ConversionStop_Disable>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b8:	f003 0310 	and.w	r3, r3, #16
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f040 80a3 	bne.w	800c508 <HAL_ADC_Init+0x2b8>
 800c3c2:	7dfb      	ldrb	r3, [r7, #23]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f040 809f 	bne.w	800c508 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c3d2:	f023 0302 	bic.w	r3, r3, #2
 800c3d6:	f043 0202 	orr.w	r2, r3, #2
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c3e6:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	7b1b      	ldrb	r3, [r3, #12]
 800c3ec:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c3ee:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3fe:	d003      	beq.n	800c408 <HAL_ADC_Init+0x1b8>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d102      	bne.n	800c40e <HAL_ADC_Init+0x1be>
 800c408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c40c:	e000      	b.n	800c410 <HAL_ADC_Init+0x1c0>
 800c40e:	2300      	movs	r3, #0
 800c410:	693a      	ldr	r2, [r7, #16]
 800c412:	4313      	orrs	r3, r2
 800c414:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	7d1b      	ldrb	r3, [r3, #20]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d119      	bne.n	800c452 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	7b1b      	ldrb	r3, [r3, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d109      	bne.n	800c43a <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	699b      	ldr	r3, [r3, #24]
 800c42a:	3b01      	subs	r3, #1
 800c42c:	035a      	lsls	r2, r3, #13
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	4313      	orrs	r3, r2
 800c432:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c436:	613b      	str	r3, [r7, #16]
 800c438:	e00b      	b.n	800c452 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c43e:	f043 0220 	orr.w	r2, r3, #32
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44a:	f043 0201 	orr.w	r2, r3, #1
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	693a      	ldr	r2, [r7, #16]
 800c462:	430a      	orrs	r2, r1
 800c464:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	689a      	ldr	r2, [r3, #8]
 800c46c:	4b24      	ldr	r3, [pc, #144]	; (800c500 <HAL_ADC_Init+0x2b0>)
 800c46e:	4013      	ands	r3, r2
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	6812      	ldr	r2, [r2, #0]
 800c474:	68b9      	ldr	r1, [r7, #8]
 800c476:	430b      	orrs	r3, r1
 800c478:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c482:	d003      	beq.n	800c48c <HAL_ADC_Init+0x23c>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d104      	bne.n	800c496 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	3b01      	subs	r3, #1
 800c492:	051b      	lsls	r3, r3, #20
 800c494:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	689a      	ldr	r2, [r3, #8]
 800c4b0:	4b14      	ldr	r3, [pc, #80]	; (800c504 <HAL_ADC_Init+0x2b4>)
 800c4b2:	4013      	ands	r3, r2
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d10b      	bne.n	800c4d2 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c4:	f023 0303 	bic.w	r3, r3, #3
 800c4c8:	f043 0201 	orr.w	r2, r3, #1
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c4d0:	e022      	b.n	800c518 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d6:	f023 0312 	bic.w	r3, r3, #18
 800c4da:	f043 0210 	orr.w	r2, r3, #16
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e6:	f043 0201 	orr.w	r2, r3, #1
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c4f2:	e011      	b.n	800c518 <HAL_ADC_Init+0x2c8>
 800c4f4:	40012400 	.word	0x40012400
 800c4f8:	40012800 	.word	0x40012800
 800c4fc:	080154b8 	.word	0x080154b8
 800c500:	ffe1f7fd 	.word	0xffe1f7fd
 800c504:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c50c:	f043 0210 	orr.w	r2, r3, #16
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800c518:	7dfb      	ldrb	r3, [r7, #23]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3718      	adds	r7, #24
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop

0800c524 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c52e:	2300      	movs	r3, #0
 800c530:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800c532:	2300      	movs	r3, #0
 800c534:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a88      	ldr	r2, [pc, #544]	; (800c75c <HAL_ADC_ConfigChannel+0x238>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d009      	beq.n	800c554 <HAL_ADC_ConfigChannel+0x30>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a86      	ldr	r2, [pc, #536]	; (800c760 <HAL_ADC_ConfigChannel+0x23c>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d004      	beq.n	800c554 <HAL_ADC_ConfigChannel+0x30>
 800c54a:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800c54e:	4885      	ldr	r0, [pc, #532]	; (800c764 <HAL_ADC_ConfigChannel+0x240>)
 800c550:	f7ff f9fa 	bl	800b948 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d048      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d044      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d040      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b03      	cmp	r3, #3
 800c572:	d03c      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b04      	cmp	r3, #4
 800c57a:	d038      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b05      	cmp	r3, #5
 800c582:	d034      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b06      	cmp	r3, #6
 800c58a:	d030      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b07      	cmp	r3, #7
 800c592:	d02c      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b08      	cmp	r3, #8
 800c59a:	d028      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b09      	cmp	r3, #9
 800c5a2:	d024      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b0a      	cmp	r3, #10
 800c5aa:	d020      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b0b      	cmp	r3, #11
 800c5b2:	d01c      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b0c      	cmp	r3, #12
 800c5ba:	d018      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2b0d      	cmp	r3, #13
 800c5c2:	d014      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b0e      	cmp	r3, #14
 800c5ca:	d010      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b0f      	cmp	r3, #15
 800c5d2:	d00c      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b10      	cmp	r3, #16
 800c5da:	d008      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b11      	cmp	r3, #17
 800c5e2:	d004      	beq.n	800c5ee <HAL_ADC_ConfigChannel+0xca>
 800c5e4:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800c5e8:	485e      	ldr	r0, [pc, #376]	; (800c764 <HAL_ADC_ConfigChannel+0x240>)
 800c5ea:	f7ff f9ad 	bl	800b948 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d040      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d03c      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	2b03      	cmp	r3, #3
 800c604:	d038      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	d034      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	2b05      	cmp	r3, #5
 800c614:	d030      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	2b06      	cmp	r3, #6
 800c61c:	d02c      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	2b07      	cmp	r3, #7
 800c624:	d028      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	2b08      	cmp	r3, #8
 800c62c:	d024      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	2b09      	cmp	r3, #9
 800c634:	d020      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	2b0a      	cmp	r3, #10
 800c63c:	d01c      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	2b0b      	cmp	r3, #11
 800c644:	d018      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	2b0c      	cmp	r3, #12
 800c64c:	d014      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	2b0d      	cmp	r3, #13
 800c654:	d010      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	2b0e      	cmp	r3, #14
 800c65c:	d00c      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	2b0f      	cmp	r3, #15
 800c664:	d008      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	2b10      	cmp	r3, #16
 800c66c:	d004      	beq.n	800c678 <HAL_ADC_ConfigChannel+0x154>
 800c66e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c672:	483c      	ldr	r0, [pc, #240]	; (800c764 <HAL_ADC_ConfigChannel+0x240>)
 800c674:	f7ff f968 	bl	800b948 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d020      	beq.n	800c6c2 <HAL_ADC_ConfigChannel+0x19e>
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d01c      	beq.n	800c6c2 <HAL_ADC_ConfigChannel+0x19e>
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	2b02      	cmp	r3, #2
 800c68e:	d018      	beq.n	800c6c2 <HAL_ADC_ConfigChannel+0x19e>
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	2b03      	cmp	r3, #3
 800c696:	d014      	beq.n	800c6c2 <HAL_ADC_ConfigChannel+0x19e>
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	2b04      	cmp	r3, #4
 800c69e:	d010      	beq.n	800c6c2 <HAL_ADC_ConfigChannel+0x19e>
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	2b05      	cmp	r3, #5
 800c6a6:	d00c      	beq.n	800c6c2 <HAL_ADC_ConfigChannel+0x19e>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	2b06      	cmp	r3, #6
 800c6ae:	d008      	beq.n	800c6c2 <HAL_ADC_ConfigChannel+0x19e>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	2b07      	cmp	r3, #7
 800c6b6:	d004      	beq.n	800c6c2 <HAL_ADC_ConfigChannel+0x19e>
 800c6b8:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800c6bc:	4829      	ldr	r0, [pc, #164]	; (800c764 <HAL_ADC_ConfigChannel+0x240>)
 800c6be:	f7ff f943 	bl	800b948 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d101      	bne.n	800c6d0 <HAL_ADC_ConfigChannel+0x1ac>
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	e0e2      	b.n	800c896 <HAL_ADC_ConfigChannel+0x372>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	2b06      	cmp	r3, #6
 800c6de:	d81c      	bhi.n	800c71a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	685a      	ldr	r2, [r3, #4]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	4413      	add	r3, r2
 800c6f0:	3b05      	subs	r3, #5
 800c6f2:	221f      	movs	r2, #31
 800c6f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6f8:	43db      	mvns	r3, r3
 800c6fa:	4019      	ands	r1, r3
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	6818      	ldr	r0, [r3, #0]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	685a      	ldr	r2, [r3, #4]
 800c704:	4613      	mov	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	4413      	add	r3, r2
 800c70a:	3b05      	subs	r3, #5
 800c70c:	fa00 f203 	lsl.w	r2, r0, r3
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	430a      	orrs	r2, r1
 800c716:	635a      	str	r2, [r3, #52]	; 0x34
 800c718:	e042      	b.n	800c7a0 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	2b0c      	cmp	r3, #12
 800c720:	d822      	bhi.n	800c768 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	4613      	mov	r3, r2
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	4413      	add	r3, r2
 800c732:	3b23      	subs	r3, #35	; 0x23
 800c734:	221f      	movs	r2, #31
 800c736:	fa02 f303 	lsl.w	r3, r2, r3
 800c73a:	43db      	mvns	r3, r3
 800c73c:	4019      	ands	r1, r3
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	6818      	ldr	r0, [r3, #0]
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	685a      	ldr	r2, [r3, #4]
 800c746:	4613      	mov	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	3b23      	subs	r3, #35	; 0x23
 800c74e:	fa00 f203 	lsl.w	r2, r0, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	430a      	orrs	r2, r1
 800c758:	631a      	str	r2, [r3, #48]	; 0x30
 800c75a:	e021      	b.n	800c7a0 <HAL_ADC_ConfigChannel+0x27c>
 800c75c:	40012400 	.word	0x40012400
 800c760:	40012800 	.word	0x40012800
 800c764:	080154b8 	.word	0x080154b8
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	685a      	ldr	r2, [r3, #4]
 800c772:	4613      	mov	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	4413      	add	r3, r2
 800c778:	3b41      	subs	r3, #65	; 0x41
 800c77a:	221f      	movs	r2, #31
 800c77c:	fa02 f303 	lsl.w	r3, r2, r3
 800c780:	43db      	mvns	r3, r3
 800c782:	4019      	ands	r1, r3
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	6818      	ldr	r0, [r3, #0]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	4613      	mov	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4413      	add	r3, r2
 800c792:	3b41      	subs	r3, #65	; 0x41
 800c794:	fa00 f203 	lsl.w	r2, r0, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	430a      	orrs	r2, r1
 800c79e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b09      	cmp	r3, #9
 800c7a6:	d91c      	bls.n	800c7e2 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68d9      	ldr	r1, [r3, #12]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	4413      	add	r3, r2
 800c7b8:	3b1e      	subs	r3, #30
 800c7ba:	2207      	movs	r2, #7
 800c7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c0:	43db      	mvns	r3, r3
 800c7c2:	4019      	ands	r1, r3
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	6898      	ldr	r0, [r3, #8]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	005b      	lsls	r3, r3, #1
 800c7d0:	4413      	add	r3, r2
 800c7d2:	3b1e      	subs	r3, #30
 800c7d4:	fa00 f203 	lsl.w	r2, r0, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	60da      	str	r2, [r3, #12]
 800c7e0:	e019      	b.n	800c816 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6919      	ldr	r1, [r3, #16]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	005b      	lsls	r3, r3, #1
 800c7f0:	4413      	add	r3, r2
 800c7f2:	2207      	movs	r2, #7
 800c7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f8:	43db      	mvns	r3, r3
 800c7fa:	4019      	ands	r1, r3
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	6898      	ldr	r0, [r3, #8]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	4613      	mov	r3, r2
 800c806:	005b      	lsls	r3, r3, #1
 800c808:	4413      	add	r3, r2
 800c80a:	fa00 f203 	lsl.w	r2, r0, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	430a      	orrs	r2, r1
 800c814:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b10      	cmp	r3, #16
 800c81c:	d003      	beq.n	800c826 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c822:	2b11      	cmp	r3, #17
 800c824:	d132      	bne.n	800c88c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a1d      	ldr	r2, [pc, #116]	; (800c8a0 <HAL_ADC_ConfigChannel+0x37c>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d125      	bne.n	800c87c <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d126      	bne.n	800c88c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	689a      	ldr	r2, [r3, #8]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c84c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2b10      	cmp	r3, #16
 800c854:	d11a      	bne.n	800c88c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c856:	4b13      	ldr	r3, [pc, #76]	; (800c8a4 <HAL_ADC_ConfigChannel+0x380>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a13      	ldr	r2, [pc, #76]	; (800c8a8 <HAL_ADC_ConfigChannel+0x384>)
 800c85c:	fba2 2303 	umull	r2, r3, r2, r3
 800c860:	0c9a      	lsrs	r2, r3, #18
 800c862:	4613      	mov	r3, r2
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	4413      	add	r3, r2
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800c86c:	e002      	b.n	800c874 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	3b01      	subs	r3, #1
 800c872:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1f9      	bne.n	800c86e <HAL_ADC_ConfigChannel+0x34a>
 800c87a:	e007      	b.n	800c88c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c880:	f043 0220 	orr.w	r2, r3, #32
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800c888:	2301      	movs	r3, #1
 800c88a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800c894:	7bfb      	ldrb	r3, [r7, #15]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	40012400 	.word	0x40012400
 800c8a4:	2000009c 	.word	0x2000009c
 800c8a8:	431bde83 	.word	0x431bde83

0800c8ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	f003 0301 	and.w	r3, r3, #1
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d127      	bne.n	800c916 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	689a      	ldr	r2, [r3, #8]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f022 0201 	bic.w	r2, r2, #1
 800c8d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c8d6:	f7ff fc8f 	bl	800c1f8 <HAL_GetTick>
 800c8da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c8dc:	e014      	b.n	800c908 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c8de:	f7ff fc8b 	bl	800c1f8 <HAL_GetTick>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	d90d      	bls.n	800c908 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f0:	f043 0210 	orr.w	r2, r3, #16
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fc:	f043 0201 	orr.w	r2, r3, #1
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e007      	b.n	800c918 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	2b01      	cmp	r3, #1
 800c914:	d0e3      	beq.n	800c8de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3710      	adds	r7, #16
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f003 0307 	and.w	r3, r3, #7
 800c92e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c930:	4b0c      	ldr	r3, [pc, #48]	; (800c964 <__NVIC_SetPriorityGrouping+0x44>)
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c936:	68ba      	ldr	r2, [r7, #8]
 800c938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c93c:	4013      	ands	r3, r2
 800c93e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c94c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c952:	4a04      	ldr	r2, [pc, #16]	; (800c964 <__NVIC_SetPriorityGrouping+0x44>)
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	60d3      	str	r3, [r2, #12]
}
 800c958:	bf00      	nop
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bc80      	pop	{r7}
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop
 800c964:	e000ed00 	.word	0xe000ed00

0800c968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c968:	b480      	push	{r7}
 800c96a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c96c:	4b04      	ldr	r3, [pc, #16]	; (800c980 <__NVIC_GetPriorityGrouping+0x18>)
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	0a1b      	lsrs	r3, r3, #8
 800c972:	f003 0307 	and.w	r3, r3, #7
}
 800c976:	4618      	mov	r0, r3
 800c978:	46bd      	mov	sp, r7
 800c97a:	bc80      	pop	{r7}
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	e000ed00 	.word	0xe000ed00

0800c984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	4603      	mov	r3, r0
 800c98c:	6039      	str	r1, [r7, #0]
 800c98e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c994:	2b00      	cmp	r3, #0
 800c996:	db0a      	blt.n	800c9ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	490c      	ldr	r1, [pc, #48]	; (800c9d0 <__NVIC_SetPriority+0x4c>)
 800c99e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9a2:	0112      	lsls	r2, r2, #4
 800c9a4:	b2d2      	uxtb	r2, r2
 800c9a6:	440b      	add	r3, r1
 800c9a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c9ac:	e00a      	b.n	800c9c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	4908      	ldr	r1, [pc, #32]	; (800c9d4 <__NVIC_SetPriority+0x50>)
 800c9b4:	79fb      	ldrb	r3, [r7, #7]
 800c9b6:	f003 030f 	and.w	r3, r3, #15
 800c9ba:	3b04      	subs	r3, #4
 800c9bc:	0112      	lsls	r2, r2, #4
 800c9be:	b2d2      	uxtb	r2, r2
 800c9c0:	440b      	add	r3, r1
 800c9c2:	761a      	strb	r2, [r3, #24]
}
 800c9c4:	bf00      	nop
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bc80      	pop	{r7}
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	e000e100 	.word	0xe000e100
 800c9d4:	e000ed00 	.word	0xe000ed00

0800c9d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b089      	sub	sp, #36	; 0x24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f003 0307 	and.w	r3, r3, #7
 800c9ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	f1c3 0307 	rsb	r3, r3, #7
 800c9f2:	2b04      	cmp	r3, #4
 800c9f4:	bf28      	it	cs
 800c9f6:	2304      	movcs	r3, #4
 800c9f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	3304      	adds	r3, #4
 800c9fe:	2b06      	cmp	r3, #6
 800ca00:	d902      	bls.n	800ca08 <NVIC_EncodePriority+0x30>
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	3b03      	subs	r3, #3
 800ca06:	e000      	b.n	800ca0a <NVIC_EncodePriority+0x32>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ca0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	fa02 f303 	lsl.w	r3, r2, r3
 800ca16:	43da      	mvns	r2, r3
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	401a      	ands	r2, r3
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ca20:	f04f 31ff 	mov.w	r1, #4294967295
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	fa01 f303 	lsl.w	r3, r1, r3
 800ca2a:	43d9      	mvns	r1, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ca30:	4313      	orrs	r3, r2
         );
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3724      	adds	r7, #36	; 0x24
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bc80      	pop	{r7}
 800ca3a:	4770      	bx	lr

0800ca3c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ca40:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ca44:	4b05      	ldr	r3, [pc, #20]	; (800ca5c <__NVIC_SystemReset+0x20>)
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ca4c:	4903      	ldr	r1, [pc, #12]	; (800ca5c <__NVIC_SystemReset+0x20>)
 800ca4e:	4b04      	ldr	r3, [pc, #16]	; (800ca60 <__NVIC_SystemReset+0x24>)
 800ca50:	4313      	orrs	r3, r2
 800ca52:	60cb      	str	r3, [r1, #12]
 800ca54:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ca58:	bf00      	nop
 800ca5a:	e7fd      	b.n	800ca58 <__NVIC_SystemReset+0x1c>
 800ca5c:	e000ed00 	.word	0xe000ed00
 800ca60:	05fa0004 	.word	0x05fa0004

0800ca64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ca74:	d301      	bcc.n	800ca7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ca76:	2301      	movs	r3, #1
 800ca78:	e00f      	b.n	800ca9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ca7a:	4a0a      	ldr	r2, [pc, #40]	; (800caa4 <SysTick_Config+0x40>)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ca82:	210f      	movs	r1, #15
 800ca84:	f04f 30ff 	mov.w	r0, #4294967295
 800ca88:	f7ff ff7c 	bl	800c984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ca8c:	4b05      	ldr	r3, [pc, #20]	; (800caa4 <SysTick_Config+0x40>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ca92:	4b04      	ldr	r3, [pc, #16]	; (800caa4 <SysTick_Config+0x40>)
 800ca94:	2207      	movs	r2, #7
 800ca96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	e000e010 	.word	0xe000e010

0800caa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b07      	cmp	r3, #7
 800cab4:	d00f      	beq.n	800cad6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b06      	cmp	r3, #6
 800caba:	d00c      	beq.n	800cad6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b05      	cmp	r3, #5
 800cac0:	d009      	beq.n	800cad6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b04      	cmp	r3, #4
 800cac6:	d006      	beq.n	800cad6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b03      	cmp	r3, #3
 800cacc:	d003      	beq.n	800cad6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cace:	2192      	movs	r1, #146	; 0x92
 800cad0:	4804      	ldr	r0, [pc, #16]	; (800cae4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800cad2:	f7fe ff39 	bl	800b948 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f7ff ff22 	bl	800c920 <__NVIC_SetPriorityGrouping>
}
 800cadc:	bf00      	nop
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	080154f0 	.word	0x080154f0

0800cae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	4603      	mov	r3, r0
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
 800caf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800caf6:	2300      	movs	r3, #0
 800caf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2b0f      	cmp	r3, #15
 800cafe:	d903      	bls.n	800cb08 <HAL_NVIC_SetPriority+0x20>
 800cb00:	21aa      	movs	r1, #170	; 0xaa
 800cb02:	480e      	ldr	r0, [pc, #56]	; (800cb3c <HAL_NVIC_SetPriority+0x54>)
 800cb04:	f7fe ff20 	bl	800b948 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	2b0f      	cmp	r3, #15
 800cb0c:	d903      	bls.n	800cb16 <HAL_NVIC_SetPriority+0x2e>
 800cb0e:	21ab      	movs	r1, #171	; 0xab
 800cb10:	480a      	ldr	r0, [pc, #40]	; (800cb3c <HAL_NVIC_SetPriority+0x54>)
 800cb12:	f7fe ff19 	bl	800b948 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cb16:	f7ff ff27 	bl	800c968 <__NVIC_GetPriorityGrouping>
 800cb1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	68b9      	ldr	r1, [r7, #8]
 800cb20:	6978      	ldr	r0, [r7, #20]
 800cb22:	f7ff ff59 	bl	800c9d8 <NVIC_EncodePriority>
 800cb26:	4602      	mov	r2, r0
 800cb28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb2c:	4611      	mov	r1, r2
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7ff ff28 	bl	800c984 <__NVIC_SetPriority>
}
 800cb34:	bf00      	nop
 800cb36:	3718      	adds	r7, #24
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	080154f0 	.word	0x080154f0

0800cb40 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800cb44:	f7ff ff7a 	bl	800ca3c <__NVIC_SystemReset>

0800cb48 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7ff ff87 	bl	800ca64 <SysTick_Config>
 800cb56:	4603      	mov	r3, r0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800cb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb62:	b087      	sub	sp, #28
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cb7a:	4b49      	ldr	r3, [pc, #292]	; (800cca0 <HAL_FLASH_Program+0x140>)
 800cb7c:	7e1b      	ldrb	r3, [r3, #24]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d101      	bne.n	800cb86 <HAL_FLASH_Program+0x26>
 800cb82:	2302      	movs	r3, #2
 800cb84:	e088      	b.n	800cc98 <HAL_FLASH_Program+0x138>
 800cb86:	4b46      	ldr	r3, [pc, #280]	; (800cca0 <HAL_FLASH_Program+0x140>)
 800cb88:	2201      	movs	r2, #1
 800cb8a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d009      	beq.n	800cba6 <HAL_FLASH_Program+0x46>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	d006      	beq.n	800cba6 <HAL_FLASH_Program+0x46>
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d003      	beq.n	800cba6 <HAL_FLASH_Program+0x46>
 800cb9e:	21b2      	movs	r1, #178	; 0xb2
 800cba0:	4840      	ldr	r0, [pc, #256]	; (800cca4 <HAL_FLASH_Program+0x144>)
 800cba2:	f7fe fed1 	bl	800b948 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbac:	d31e      	bcc.n	800cbec <HAL_FLASH_Program+0x8c>
 800cbae:	4b3e      	ldr	r3, [pc, #248]	; (800cca8 <HAL_FLASH_Program+0x148>)
 800cbb0:	881b      	ldrh	r3, [r3, #0]
 800cbb2:	2b80      	cmp	r3, #128	; 0x80
 800cbb4:	d104      	bne.n	800cbc0 <HAL_FLASH_Program+0x60>
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	4a3c      	ldr	r2, [pc, #240]	; (800ccac <HAL_FLASH_Program+0x14c>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d816      	bhi.n	800cbec <HAL_FLASH_Program+0x8c>
 800cbbe:	e019      	b.n	800cbf4 <HAL_FLASH_Program+0x94>
 800cbc0:	4b39      	ldr	r3, [pc, #228]	; (800cca8 <HAL_FLASH_Program+0x148>)
 800cbc2:	881b      	ldrh	r3, [r3, #0]
 800cbc4:	2b40      	cmp	r3, #64	; 0x40
 800cbc6:	d104      	bne.n	800cbd2 <HAL_FLASH_Program+0x72>
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	4a39      	ldr	r2, [pc, #228]	; (800ccb0 <HAL_FLASH_Program+0x150>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d80d      	bhi.n	800cbec <HAL_FLASH_Program+0x8c>
 800cbd0:	e010      	b.n	800cbf4 <HAL_FLASH_Program+0x94>
 800cbd2:	4b35      	ldr	r3, [pc, #212]	; (800cca8 <HAL_FLASH_Program+0x148>)
 800cbd4:	881b      	ldrh	r3, [r3, #0]
 800cbd6:	2b20      	cmp	r3, #32
 800cbd8:	d104      	bne.n	800cbe4 <HAL_FLASH_Program+0x84>
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	4a35      	ldr	r2, [pc, #212]	; (800ccb4 <HAL_FLASH_Program+0x154>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d804      	bhi.n	800cbec <HAL_FLASH_Program+0x8c>
 800cbe2:	e007      	b.n	800cbf4 <HAL_FLASH_Program+0x94>
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	4a34      	ldr	r2, [pc, #208]	; (800ccb8 <HAL_FLASH_Program+0x158>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d903      	bls.n	800cbf4 <HAL_FLASH_Program+0x94>
 800cbec:	21b3      	movs	r1, #179	; 0xb3
 800cbee:	482d      	ldr	r0, [pc, #180]	; (800cca4 <HAL_FLASH_Program+0x144>)
 800cbf0:	f7fe feaa 	bl	800b948 <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cbf4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cbf8:	f000 f8b4 	bl	800cd64 <FLASH_WaitForLastOperation>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800cc00:	7dfb      	ldrb	r3, [r7, #23]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d144      	bne.n	800cc90 <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d102      	bne.n	800cc12 <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	757b      	strb	r3, [r7, #21]
 800cc10:	e007      	b.n	800cc22 <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d102      	bne.n	800cc1e <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800cc18:	2302      	movs	r3, #2
 800cc1a:	757b      	strb	r3, [r7, #21]
 800cc1c:	e001      	b.n	800cc22 <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800cc1e:	2304      	movs	r3, #4
 800cc20:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800cc22:	2300      	movs	r3, #0
 800cc24:	75bb      	strb	r3, [r7, #22]
 800cc26:	e02d      	b.n	800cc84 <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800cc28:	7dbb      	ldrb	r3, [r7, #22]
 800cc2a:	005a      	lsls	r2, r3, #1
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	eb02 0c03 	add.w	ip, r2, r3
 800cc32:	7dbb      	ldrb	r3, [r7, #22]
 800cc34:	0119      	lsls	r1, r3, #4
 800cc36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc3a:	f1c1 0620 	rsb	r6, r1, #32
 800cc3e:	f1a1 0020 	sub.w	r0, r1, #32
 800cc42:	fa22 f401 	lsr.w	r4, r2, r1
 800cc46:	fa03 f606 	lsl.w	r6, r3, r6
 800cc4a:	4334      	orrs	r4, r6
 800cc4c:	fa23 f000 	lsr.w	r0, r3, r0
 800cc50:	4304      	orrs	r4, r0
 800cc52:	fa23 f501 	lsr.w	r5, r3, r1
 800cc56:	b2a3      	uxth	r3, r4
 800cc58:	4619      	mov	r1, r3
 800cc5a:	4660      	mov	r0, ip
 800cc5c:	f000 f866 	bl	800cd2c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cc60:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cc64:	f000 f87e 	bl	800cd64 <FLASH_WaitForLastOperation>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800cc6c:	4b13      	ldr	r3, [pc, #76]	; (800ccbc <HAL_FLASH_Program+0x15c>)
 800cc6e:	691b      	ldr	r3, [r3, #16]
 800cc70:	4a12      	ldr	r2, [pc, #72]	; (800ccbc <HAL_FLASH_Program+0x15c>)
 800cc72:	f023 0301 	bic.w	r3, r3, #1
 800cc76:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800cc78:	7dfb      	ldrb	r3, [r7, #23]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d107      	bne.n	800cc8e <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 800cc7e:	7dbb      	ldrb	r3, [r7, #22]
 800cc80:	3301      	adds	r3, #1
 800cc82:	75bb      	strb	r3, [r7, #22]
 800cc84:	7dba      	ldrb	r2, [r7, #22]
 800cc86:	7d7b      	ldrb	r3, [r7, #21]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d3cd      	bcc.n	800cc28 <HAL_FLASH_Program+0xc8>
 800cc8c:	e000      	b.n	800cc90 <HAL_FLASH_Program+0x130>
      {
        break;
 800cc8e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cc90:	4b03      	ldr	r3, [pc, #12]	; (800cca0 <HAL_FLASH_Program+0x140>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	761a      	strb	r2, [r3, #24]

  return status;
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	371c      	adds	r7, #28
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cca0:	20000808 	.word	0x20000808
 800cca4:	0801552c 	.word	0x0801552c
 800cca8:	1ffff7e0 	.word	0x1ffff7e0
 800ccac:	0801ffff 	.word	0x0801ffff
 800ccb0:	0800ffff 	.word	0x0800ffff
 800ccb4:	08007fff 	.word	0x08007fff
 800ccb8:	08003fff 	.word	0x08003fff
 800ccbc:	40022000 	.word	0x40022000

0800ccc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ccca:	4b0d      	ldr	r3, [pc, #52]	; (800cd00 <HAL_FLASH_Unlock+0x40>)
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00d      	beq.n	800ccf2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ccd6:	4b0a      	ldr	r3, [pc, #40]	; (800cd00 <HAL_FLASH_Unlock+0x40>)
 800ccd8:	4a0a      	ldr	r2, [pc, #40]	; (800cd04 <HAL_FLASH_Unlock+0x44>)
 800ccda:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ccdc:	4b08      	ldr	r3, [pc, #32]	; (800cd00 <HAL_FLASH_Unlock+0x40>)
 800ccde:	4a0a      	ldr	r2, [pc, #40]	; (800cd08 <HAL_FLASH_Unlock+0x48>)
 800cce0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cce2:	4b07      	ldr	r3, [pc, #28]	; (800cd00 <HAL_FLASH_Unlock+0x40>)
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d001      	beq.n	800ccf2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800ccf2:	79fb      	ldrb	r3, [r7, #7]
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bc80      	pop	{r7}
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	40022000 	.word	0x40022000
 800cd04:	45670123 	.word	0x45670123
 800cd08:	cdef89ab 	.word	0xcdef89ab

0800cd0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800cd10:	4b05      	ldr	r3, [pc, #20]	; (800cd28 <HAL_FLASH_Lock+0x1c>)
 800cd12:	691b      	ldr	r3, [r3, #16]
 800cd14:	4a04      	ldr	r2, [pc, #16]	; (800cd28 <HAL_FLASH_Lock+0x1c>)
 800cd16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd1a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bc80      	pop	{r7}
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	40022000 	.word	0x40022000

0800cd2c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	460b      	mov	r3, r1
 800cd36:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cd38:	4b08      	ldr	r3, [pc, #32]	; (800cd5c <FLASH_Program_HalfWord+0x30>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800cd3e:	4b08      	ldr	r3, [pc, #32]	; (800cd60 <FLASH_Program_HalfWord+0x34>)
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	4a07      	ldr	r2, [pc, #28]	; (800cd60 <FLASH_Program_HalfWord+0x34>)
 800cd44:	f043 0301 	orr.w	r3, r3, #1
 800cd48:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	887a      	ldrh	r2, [r7, #2]
 800cd4e:	801a      	strh	r2, [r3, #0]
}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bc80      	pop	{r7}
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	20000808 	.word	0x20000808
 800cd60:	40022000 	.word	0x40022000

0800cd64 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800cd6c:	f7ff fa44 	bl	800c1f8 <HAL_GetTick>
 800cd70:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cd72:	e010      	b.n	800cd96 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7a:	d00c      	beq.n	800cd96 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d007      	beq.n	800cd92 <FLASH_WaitForLastOperation+0x2e>
 800cd82:	f7ff fa39 	bl	800c1f8 <HAL_GetTick>
 800cd86:	4602      	mov	r2, r0
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	1ad3      	subs	r3, r2, r3
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d201      	bcs.n	800cd96 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800cd92:	2303      	movs	r3, #3
 800cd94:	e025      	b.n	800cde2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cd96:	4b15      	ldr	r3, [pc, #84]	; (800cdec <FLASH_WaitForLastOperation+0x88>)
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	f003 0301 	and.w	r3, r3, #1
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1e8      	bne.n	800cd74 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800cda2:	4b12      	ldr	r3, [pc, #72]	; (800cdec <FLASH_WaitForLastOperation+0x88>)
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	f003 0320 	and.w	r3, r3, #32
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cdae:	4b0f      	ldr	r3, [pc, #60]	; (800cdec <FLASH_WaitForLastOperation+0x88>)
 800cdb0:	2220      	movs	r2, #32
 800cdb2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800cdb4:	4b0d      	ldr	r3, [pc, #52]	; (800cdec <FLASH_WaitForLastOperation+0x88>)
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	f003 0310 	and.w	r3, r3, #16
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10b      	bne.n	800cdd8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800cdc0:	4b0a      	ldr	r3, [pc, #40]	; (800cdec <FLASH_WaitForLastOperation+0x88>)
 800cdc2:	69db      	ldr	r3, [r3, #28]
 800cdc4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d105      	bne.n	800cdd8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800cdcc:	4b07      	ldr	r3, [pc, #28]	; (800cdec <FLASH_WaitForLastOperation+0x88>)
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d003      	beq.n	800cde0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800cdd8:	f000 f80a 	bl	800cdf0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800cddc:	2301      	movs	r3, #1
 800cdde:	e000      	b.n	800cde2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	40022000 	.word	0x40022000

0800cdf0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800cdfa:	4b23      	ldr	r3, [pc, #140]	; (800ce88 <FLASH_SetErrorCode+0x98>)
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	f003 0310 	and.w	r3, r3, #16
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d009      	beq.n	800ce1a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ce06:	4b21      	ldr	r3, [pc, #132]	; (800ce8c <FLASH_SetErrorCode+0x9c>)
 800ce08:	69db      	ldr	r3, [r3, #28]
 800ce0a:	f043 0302 	orr.w	r3, r3, #2
 800ce0e:	4a1f      	ldr	r2, [pc, #124]	; (800ce8c <FLASH_SetErrorCode+0x9c>)
 800ce10:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f043 0310 	orr.w	r3, r3, #16
 800ce18:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ce1a:	4b1b      	ldr	r3, [pc, #108]	; (800ce88 <FLASH_SetErrorCode+0x98>)
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	f003 0304 	and.w	r3, r3, #4
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d009      	beq.n	800ce3a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800ce26:	4b19      	ldr	r3, [pc, #100]	; (800ce8c <FLASH_SetErrorCode+0x9c>)
 800ce28:	69db      	ldr	r3, [r3, #28]
 800ce2a:	f043 0301 	orr.w	r3, r3, #1
 800ce2e:	4a17      	ldr	r2, [pc, #92]	; (800ce8c <FLASH_SetErrorCode+0x9c>)
 800ce30:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f043 0304 	orr.w	r3, r3, #4
 800ce38:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800ce3a:	4b13      	ldr	r3, [pc, #76]	; (800ce88 <FLASH_SetErrorCode+0x98>)
 800ce3c:	69db      	ldr	r3, [r3, #28]
 800ce3e:	f003 0301 	and.w	r3, r3, #1
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00b      	beq.n	800ce5e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800ce46:	4b11      	ldr	r3, [pc, #68]	; (800ce8c <FLASH_SetErrorCode+0x9c>)
 800ce48:	69db      	ldr	r3, [r3, #28]
 800ce4a:	f043 0304 	orr.w	r3, r3, #4
 800ce4e:	4a0f      	ldr	r2, [pc, #60]	; (800ce8c <FLASH_SetErrorCode+0x9c>)
 800ce50:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800ce52:	4b0d      	ldr	r3, [pc, #52]	; (800ce88 <FLASH_SetErrorCode+0x98>)
 800ce54:	69db      	ldr	r3, [r3, #28]
 800ce56:	4a0c      	ldr	r2, [pc, #48]	; (800ce88 <FLASH_SetErrorCode+0x98>)
 800ce58:	f023 0301 	bic.w	r3, r3, #1
 800ce5c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f240 1201 	movw	r2, #257	; 0x101
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d106      	bne.n	800ce76 <FLASH_SetErrorCode+0x86>
 800ce68:	4b07      	ldr	r3, [pc, #28]	; (800ce88 <FLASH_SetErrorCode+0x98>)
 800ce6a:	69db      	ldr	r3, [r3, #28]
 800ce6c:	4a06      	ldr	r2, [pc, #24]	; (800ce88 <FLASH_SetErrorCode+0x98>)
 800ce6e:	f023 0301 	bic.w	r3, r3, #1
 800ce72:	61d3      	str	r3, [r2, #28]
}  
 800ce74:	e002      	b.n	800ce7c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800ce76:	4a04      	ldr	r2, [pc, #16]	; (800ce88 <FLASH_SetErrorCode+0x98>)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	60d3      	str	r3, [r2, #12]
}  
 800ce7c:	bf00      	nop
 800ce7e:	370c      	adds	r7, #12
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bc80      	pop	{r7}
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	40022000 	.word	0x40022000
 800ce8c:	20000808 	.word	0x20000808

0800ce90 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cea2:	4b70      	ldr	r3, [pc, #448]	; (800d064 <HAL_FLASHEx_Erase+0x1d4>)
 800cea4:	7e1b      	ldrb	r3, [r3, #24]
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d101      	bne.n	800ceae <HAL_FLASHEx_Erase+0x1e>
 800ceaa:	2302      	movs	r3, #2
 800ceac:	e0d5      	b.n	800d05a <HAL_FLASHEx_Erase+0x1ca>
 800ceae:	4b6d      	ldr	r3, [pc, #436]	; (800d064 <HAL_FLASHEx_Erase+0x1d4>)
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d007      	beq.n	800cecc <HAL_FLASHEx_Erase+0x3c>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d003      	beq.n	800cecc <HAL_FLASHEx_Erase+0x3c>
 800cec4:	21a8      	movs	r1, #168	; 0xa8
 800cec6:	4868      	ldr	r0, [pc, #416]	; (800d068 <HAL_FLASHEx_Erase+0x1d8>)
 800cec8:	f7fe fd3e 	bl	800b948 <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b02      	cmp	r3, #2
 800ced2:	d117      	bne.n	800cf04 <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800ced4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ced8:	f7ff ff44 	bl	800cd64 <FLASH_WaitForLastOperation>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f040 80b7 	bne.w	800d052 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800cee4:	2001      	movs	r0, #1
 800cee6:	f000 f8cd 	bl	800d084 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ceea:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ceee:	f7ff ff39 	bl	800cd64 <FLASH_WaitForLastOperation>
 800cef2:	4603      	mov	r3, r0
 800cef4:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800cef6:	4b5d      	ldr	r3, [pc, #372]	; (800d06c <HAL_FLASHEx_Erase+0x1dc>)
 800cef8:	691b      	ldr	r3, [r3, #16]
 800cefa:	4a5c      	ldr	r2, [pc, #368]	; (800d06c <HAL_FLASHEx_Erase+0x1dc>)
 800cefc:	f023 0304 	bic.w	r3, r3, #4
 800cf00:	6113      	str	r3, [r2, #16]
 800cf02:	e0a6      	b.n	800d052 <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf0c:	d322      	bcc.n	800cf54 <HAL_FLASHEx_Erase+0xc4>
 800cf0e:	4b58      	ldr	r3, [pc, #352]	; (800d070 <HAL_FLASHEx_Erase+0x1e0>)
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	2b80      	cmp	r3, #128	; 0x80
 800cf14:	d105      	bne.n	800cf22 <HAL_FLASHEx_Erase+0x92>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	4a56      	ldr	r2, [pc, #344]	; (800d074 <HAL_FLASHEx_Erase+0x1e4>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d819      	bhi.n	800cf54 <HAL_FLASHEx_Erase+0xc4>
 800cf20:	e01c      	b.n	800cf5c <HAL_FLASHEx_Erase+0xcc>
 800cf22:	4b53      	ldr	r3, [pc, #332]	; (800d070 <HAL_FLASHEx_Erase+0x1e0>)
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	2b40      	cmp	r3, #64	; 0x40
 800cf28:	d105      	bne.n	800cf36 <HAL_FLASHEx_Erase+0xa6>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	4a52      	ldr	r2, [pc, #328]	; (800d078 <HAL_FLASHEx_Erase+0x1e8>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d80f      	bhi.n	800cf54 <HAL_FLASHEx_Erase+0xc4>
 800cf34:	e012      	b.n	800cf5c <HAL_FLASHEx_Erase+0xcc>
 800cf36:	4b4e      	ldr	r3, [pc, #312]	; (800d070 <HAL_FLASHEx_Erase+0x1e0>)
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	2b20      	cmp	r3, #32
 800cf3c:	d105      	bne.n	800cf4a <HAL_FLASHEx_Erase+0xba>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	4a4e      	ldr	r2, [pc, #312]	; (800d07c <HAL_FLASHEx_Erase+0x1ec>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d805      	bhi.n	800cf54 <HAL_FLASHEx_Erase+0xc4>
 800cf48:	e008      	b.n	800cf5c <HAL_FLASHEx_Erase+0xcc>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	4a4c      	ldr	r2, [pc, #304]	; (800d080 <HAL_FLASHEx_Erase+0x1f0>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d903      	bls.n	800cf5c <HAL_FLASHEx_Erase+0xcc>
 800cf54:	21e9      	movs	r1, #233	; 0xe9
 800cf56:	4844      	ldr	r0, [pc, #272]	; (800d068 <HAL_FLASHEx_Erase+0x1d8>)
 800cf58:	f7fe fcf6 	bl	800b948 <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 800cf5c:	4b44      	ldr	r3, [pc, #272]	; (800d070 <HAL_FLASHEx_Erase+0x1e0>)
 800cf5e:	881b      	ldrh	r3, [r3, #0]
 800cf60:	2b80      	cmp	r3, #128	; 0x80
 800cf62:	d10d      	bne.n	800cf80 <HAL_FLASHEx_Erase+0xf0>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	689a      	ldr	r2, [r3, #8]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	029b      	lsls	r3, r3, #10
 800cf6e:	4413      	add	r3, r2
 800cf70:	3b01      	subs	r3, #1
 800cf72:	4a40      	ldr	r2, [pc, #256]	; (800d074 <HAL_FLASHEx_Erase+0x1e4>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	bf94      	ite	ls
 800cf78:	2301      	movls	r3, #1
 800cf7a:	2300      	movhi	r3, #0
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	e030      	b.n	800cfe2 <HAL_FLASHEx_Erase+0x152>
 800cf80:	4b3b      	ldr	r3, [pc, #236]	; (800d070 <HAL_FLASHEx_Erase+0x1e0>)
 800cf82:	881b      	ldrh	r3, [r3, #0]
 800cf84:	2b40      	cmp	r3, #64	; 0x40
 800cf86:	d10d      	bne.n	800cfa4 <HAL_FLASHEx_Erase+0x114>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	689a      	ldr	r2, [r3, #8]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	029b      	lsls	r3, r3, #10
 800cf92:	4413      	add	r3, r2
 800cf94:	3b01      	subs	r3, #1
 800cf96:	4a38      	ldr	r2, [pc, #224]	; (800d078 <HAL_FLASHEx_Erase+0x1e8>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	bf94      	ite	ls
 800cf9c:	2301      	movls	r3, #1
 800cf9e:	2300      	movhi	r3, #0
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	e01e      	b.n	800cfe2 <HAL_FLASHEx_Erase+0x152>
 800cfa4:	4b32      	ldr	r3, [pc, #200]	; (800d070 <HAL_FLASHEx_Erase+0x1e0>)
 800cfa6:	881b      	ldrh	r3, [r3, #0]
 800cfa8:	2b20      	cmp	r3, #32
 800cfaa:	d10d      	bne.n	800cfc8 <HAL_FLASHEx_Erase+0x138>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	689a      	ldr	r2, [r3, #8]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	029b      	lsls	r3, r3, #10
 800cfb6:	4413      	add	r3, r2
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	4a30      	ldr	r2, [pc, #192]	; (800d07c <HAL_FLASHEx_Erase+0x1ec>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	bf94      	ite	ls
 800cfc0:	2301      	movls	r3, #1
 800cfc2:	2300      	movhi	r3, #0
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	e00c      	b.n	800cfe2 <HAL_FLASHEx_Erase+0x152>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	689a      	ldr	r2, [r3, #8]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	029b      	lsls	r3, r3, #10
 800cfd2:	4413      	add	r3, r2
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	4a2a      	ldr	r2, [pc, #168]	; (800d080 <HAL_FLASHEx_Erase+0x1f0>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	bf94      	ite	ls
 800cfdc:	2301      	movls	r3, #1
 800cfde:	2300      	movhi	r3, #0
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d103      	bne.n	800cfee <HAL_FLASHEx_Erase+0x15e>
 800cfe6:	21ea      	movs	r1, #234	; 0xea
 800cfe8:	481f      	ldr	r0, [pc, #124]	; (800d068 <HAL_FLASHEx_Erase+0x1d8>)
 800cfea:	f7fe fcad 	bl	800b948 <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800cfee:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cff2:	f7ff feb7 	bl	800cd64 <FLASH_WaitForLastOperation>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d12a      	bne.n	800d052 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	f04f 32ff 	mov.w	r2, #4294967295
 800d002:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	60bb      	str	r3, [r7, #8]
 800d00a:	e019      	b.n	800d040 <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800d00c:	68b8      	ldr	r0, [r7, #8]
 800d00e:	f000 f85f 	bl	800d0d0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d012:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d016:	f7ff fea5 	bl	800cd64 <FLASH_WaitForLastOperation>
 800d01a:	4603      	mov	r3, r0
 800d01c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800d01e:	4b13      	ldr	r3, [pc, #76]	; (800d06c <HAL_FLASHEx_Erase+0x1dc>)
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	4a12      	ldr	r2, [pc, #72]	; (800d06c <HAL_FLASHEx_Erase+0x1dc>)
 800d024:	f023 0302 	bic.w	r3, r3, #2
 800d028:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800d02a:	7bfb      	ldrb	r3, [r7, #15]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d003      	beq.n	800d038 <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	601a      	str	r2, [r3, #0]
            break;
 800d036:	e00c      	b.n	800d052 <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d03e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	029a      	lsls	r2, r3, #10
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d3dc      	bcc.n	800d00c <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d052:	4b04      	ldr	r3, [pc, #16]	; (800d064 <HAL_FLASHEx_Erase+0x1d4>)
 800d054:	2200      	movs	r2, #0
 800d056:	761a      	strb	r2, [r3, #24]

  return status;
 800d058:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	20000808 	.word	0x20000808
 800d068:	08015568 	.word	0x08015568
 800d06c:	40022000 	.word	0x40022000
 800d070:	1ffff7e0 	.word	0x1ffff7e0
 800d074:	0801ffff 	.word	0x0801ffff
 800d078:	0800ffff 	.word	0x0800ffff
 800d07c:	08007fff 	.word	0x08007fff
 800d080:	08003fff 	.word	0x08003fff

0800d084 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d004      	beq.n	800d09c <FLASH_MassErase+0x18>
 800d092:	f240 2156 	movw	r1, #598	; 0x256
 800d096:	480b      	ldr	r0, [pc, #44]	; (800d0c4 <FLASH_MassErase+0x40>)
 800d098:	f7fe fc56 	bl	800b948 <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d09c:	4b0a      	ldr	r3, [pc, #40]	; (800d0c8 <FLASH_MassErase+0x44>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800d0a2:	4b0a      	ldr	r3, [pc, #40]	; (800d0cc <FLASH_MassErase+0x48>)
 800d0a4:	691b      	ldr	r3, [r3, #16]
 800d0a6:	4a09      	ldr	r2, [pc, #36]	; (800d0cc <FLASH_MassErase+0x48>)
 800d0a8:	f043 0304 	orr.w	r3, r3, #4
 800d0ac:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d0ae:	4b07      	ldr	r3, [pc, #28]	; (800d0cc <FLASH_MassErase+0x48>)
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	4a06      	ldr	r2, [pc, #24]	; (800d0cc <FLASH_MassErase+0x48>)
 800d0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0b8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d0ba:	bf00      	nop
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	08015568 	.word	0x08015568
 800d0c8:	20000808 	.word	0x20000808
 800d0cc:	40022000 	.word	0x40022000

0800d0d0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d0d8:	4b0b      	ldr	r3, [pc, #44]	; (800d108 <FLASH_PageErase+0x38>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d0de:	4b0b      	ldr	r3, [pc, #44]	; (800d10c <FLASH_PageErase+0x3c>)
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	4a0a      	ldr	r2, [pc, #40]	; (800d10c <FLASH_PageErase+0x3c>)
 800d0e4:	f043 0302 	orr.w	r3, r3, #2
 800d0e8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800d0ea:	4a08      	ldr	r2, [pc, #32]	; (800d10c <FLASH_PageErase+0x3c>)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d0f0:	4b06      	ldr	r3, [pc, #24]	; (800d10c <FLASH_PageErase+0x3c>)
 800d0f2:	691b      	ldr	r3, [r3, #16]
 800d0f4:	4a05      	ldr	r2, [pc, #20]	; (800d10c <FLASH_PageErase+0x3c>)
 800d0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0fa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d0fc:	bf00      	nop
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	bc80      	pop	{r7}
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	20000808 	.word	0x20000808
 800d10c:	40022000 	.word	0x40022000

0800d110 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b08a      	sub	sp, #40	; 0x28
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d11a:	2300      	movs	r3, #0
 800d11c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800d11e:	2300      	movs	r3, #0
 800d120:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a9c      	ldr	r2, [pc, #624]	; (800d398 <HAL_GPIO_Init+0x288>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d013      	beq.n	800d152 <HAL_GPIO_Init+0x42>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a9b      	ldr	r2, [pc, #620]	; (800d39c <HAL_GPIO_Init+0x28c>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d00f      	beq.n	800d152 <HAL_GPIO_Init+0x42>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a9a      	ldr	r2, [pc, #616]	; (800d3a0 <HAL_GPIO_Init+0x290>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d00b      	beq.n	800d152 <HAL_GPIO_Init+0x42>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4a99      	ldr	r2, [pc, #612]	; (800d3a4 <HAL_GPIO_Init+0x294>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d007      	beq.n	800d152 <HAL_GPIO_Init+0x42>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4a98      	ldr	r2, [pc, #608]	; (800d3a8 <HAL_GPIO_Init+0x298>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d003      	beq.n	800d152 <HAL_GPIO_Init+0x42>
 800d14a:	21bd      	movs	r1, #189	; 0xbd
 800d14c:	4897      	ldr	r0, [pc, #604]	; (800d3ac <HAL_GPIO_Init+0x29c>)
 800d14e:	f7fe fbfb 	bl	800b948 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	b29b      	uxth	r3, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d005      	beq.n	800d168 <HAL_GPIO_Init+0x58>
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	0c1b      	lsrs	r3, r3, #16
 800d162:	041b      	lsls	r3, r3, #16
 800d164:	2b00      	cmp	r3, #0
 800d166:	d003      	beq.n	800d170 <HAL_GPIO_Init+0x60>
 800d168:	21be      	movs	r1, #190	; 0xbe
 800d16a:	4890      	ldr	r0, [pc, #576]	; (800d3ac <HAL_GPIO_Init+0x29c>)
 800d16c:	f7fe fbec 	bl	800b948 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	2b00      	cmp	r3, #0
 800d176:	f000 81eb 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	2b01      	cmp	r3, #1
 800d180:	f000 81e6 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	2b11      	cmp	r3, #17
 800d18a:	f000 81e1 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	2b02      	cmp	r3, #2
 800d194:	f000 81dc 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	2b12      	cmp	r3, #18
 800d19e:	f000 81d7 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	4a82      	ldr	r2, [pc, #520]	; (800d3b0 <HAL_GPIO_Init+0x2a0>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	f000 81d1 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	4a80      	ldr	r2, [pc, #512]	; (800d3b4 <HAL_GPIO_Init+0x2a4>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	f000 81cb 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	4a7e      	ldr	r2, [pc, #504]	; (800d3b8 <HAL_GPIO_Init+0x2a8>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	f000 81c5 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	4a7c      	ldr	r2, [pc, #496]	; (800d3bc <HAL_GPIO_Init+0x2ac>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	f000 81bf 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	4a7a      	ldr	r2, [pc, #488]	; (800d3c0 <HAL_GPIO_Init+0x2b0>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	f000 81b9 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	4a78      	ldr	r2, [pc, #480]	; (800d3c4 <HAL_GPIO_Init+0x2b4>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	f000 81b3 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	2b03      	cmp	r3, #3
 800d1f0:	f000 81ae 	beq.w	800d550 <HAL_GPIO_Init+0x440>
 800d1f4:	21bf      	movs	r1, #191	; 0xbf
 800d1f6:	486d      	ldr	r0, [pc, #436]	; (800d3ac <HAL_GPIO_Init+0x29c>)
 800d1f8:	f7fe fba6 	bl	800b948 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d1fc:	e1a8      	b.n	800d550 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800d1fe:	2201      	movs	r2, #1
 800d200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d202:	fa02 f303 	lsl.w	r3, r2, r3
 800d206:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	69fa      	ldr	r2, [r7, #28]
 800d20e:	4013      	ands	r3, r2
 800d210:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800d212:	69ba      	ldr	r2, [r7, #24]
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	429a      	cmp	r2, r3
 800d218:	f040 8197 	bne.w	800d54a <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a5e      	ldr	r2, [pc, #376]	; (800d398 <HAL_GPIO_Init+0x288>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d013      	beq.n	800d24c <HAL_GPIO_Init+0x13c>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a5d      	ldr	r2, [pc, #372]	; (800d39c <HAL_GPIO_Init+0x28c>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d00f      	beq.n	800d24c <HAL_GPIO_Init+0x13c>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a5c      	ldr	r2, [pc, #368]	; (800d3a0 <HAL_GPIO_Init+0x290>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d00b      	beq.n	800d24c <HAL_GPIO_Init+0x13c>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a5b      	ldr	r2, [pc, #364]	; (800d3a4 <HAL_GPIO_Init+0x294>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d007      	beq.n	800d24c <HAL_GPIO_Init+0x13c>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4a5a      	ldr	r2, [pc, #360]	; (800d3a8 <HAL_GPIO_Init+0x298>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d003      	beq.n	800d24c <HAL_GPIO_Init+0x13c>
 800d244:	21cd      	movs	r1, #205	; 0xcd
 800d246:	4859      	ldr	r0, [pc, #356]	; (800d3ac <HAL_GPIO_Init+0x29c>)
 800d248:	f7fe fb7e 	bl	800b948 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	2b12      	cmp	r3, #18
 800d252:	d065      	beq.n	800d320 <HAL_GPIO_Init+0x210>
 800d254:	2b12      	cmp	r3, #18
 800d256:	d80e      	bhi.n	800d276 <HAL_GPIO_Init+0x166>
 800d258:	2b02      	cmp	r3, #2
 800d25a:	d04c      	beq.n	800d2f6 <HAL_GPIO_Init+0x1e6>
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	d804      	bhi.n	800d26a <HAL_GPIO_Init+0x15a>
 800d260:	2b00      	cmp	r3, #0
 800d262:	d072      	beq.n	800d34a <HAL_GPIO_Init+0x23a>
 800d264:	2b01      	cmp	r3, #1
 800d266:	d01d      	beq.n	800d2a4 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800d268:	e0b1      	b.n	800d3ce <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d26a:	2b03      	cmp	r3, #3
 800d26c:	f000 80ac 	beq.w	800d3c8 <HAL_GPIO_Init+0x2b8>
 800d270:	2b11      	cmp	r3, #17
 800d272:	d02b      	beq.n	800d2cc <HAL_GPIO_Init+0x1bc>
          break;
 800d274:	e0ab      	b.n	800d3ce <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d276:	4a4f      	ldr	r2, [pc, #316]	; (800d3b4 <HAL_GPIO_Init+0x2a4>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d066      	beq.n	800d34a <HAL_GPIO_Init+0x23a>
 800d27c:	4a4d      	ldr	r2, [pc, #308]	; (800d3b4 <HAL_GPIO_Init+0x2a4>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d806      	bhi.n	800d290 <HAL_GPIO_Init+0x180>
 800d282:	4a4b      	ldr	r2, [pc, #300]	; (800d3b0 <HAL_GPIO_Init+0x2a0>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d060      	beq.n	800d34a <HAL_GPIO_Init+0x23a>
 800d288:	4a4c      	ldr	r2, [pc, #304]	; (800d3bc <HAL_GPIO_Init+0x2ac>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d05d      	beq.n	800d34a <HAL_GPIO_Init+0x23a>
          break;
 800d28e:	e09e      	b.n	800d3ce <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d290:	4a49      	ldr	r2, [pc, #292]	; (800d3b8 <HAL_GPIO_Init+0x2a8>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d059      	beq.n	800d34a <HAL_GPIO_Init+0x23a>
 800d296:	4a4b      	ldr	r2, [pc, #300]	; (800d3c4 <HAL_GPIO_Init+0x2b4>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d056      	beq.n	800d34a <HAL_GPIO_Init+0x23a>
 800d29c:	4a48      	ldr	r2, [pc, #288]	; (800d3c0 <HAL_GPIO_Init+0x2b0>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d053      	beq.n	800d34a <HAL_GPIO_Init+0x23a>
          break;
 800d2a2:	e094      	b.n	800d3ce <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	2b02      	cmp	r3, #2
 800d2aa:	d00b      	beq.n	800d2c4 <HAL_GPIO_Init+0x1b4>
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d007      	beq.n	800d2c4 <HAL_GPIO_Init+0x1b4>
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d003      	beq.n	800d2c4 <HAL_GPIO_Init+0x1b4>
 800d2bc:	21d5      	movs	r1, #213	; 0xd5
 800d2be:	483b      	ldr	r0, [pc, #236]	; (800d3ac <HAL_GPIO_Init+0x29c>)
 800d2c0:	f7fe fb42 	bl	800b948 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	623b      	str	r3, [r7, #32]
          break;
 800d2ca:	e080      	b.n	800d3ce <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d00b      	beq.n	800d2ec <HAL_GPIO_Init+0x1dc>
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d007      	beq.n	800d2ec <HAL_GPIO_Init+0x1dc>
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	2b03      	cmp	r3, #3
 800d2e2:	d003      	beq.n	800d2ec <HAL_GPIO_Init+0x1dc>
 800d2e4:	21dc      	movs	r1, #220	; 0xdc
 800d2e6:	4831      	ldr	r0, [pc, #196]	; (800d3ac <HAL_GPIO_Init+0x29c>)
 800d2e8:	f7fe fb2e 	bl	800b948 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	3304      	adds	r3, #4
 800d2f2:	623b      	str	r3, [r7, #32]
          break;
 800d2f4:	e06b      	b.n	800d3ce <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	2b02      	cmp	r3, #2
 800d2fc:	d00b      	beq.n	800d316 <HAL_GPIO_Init+0x206>
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d007      	beq.n	800d316 <HAL_GPIO_Init+0x206>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d003      	beq.n	800d316 <HAL_GPIO_Init+0x206>
 800d30e:	21e3      	movs	r1, #227	; 0xe3
 800d310:	4826      	ldr	r0, [pc, #152]	; (800d3ac <HAL_GPIO_Init+0x29c>)
 800d312:	f7fe fb19 	bl	800b948 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	3308      	adds	r3, #8
 800d31c:	623b      	str	r3, [r7, #32]
          break;
 800d31e:	e056      	b.n	800d3ce <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	2b02      	cmp	r3, #2
 800d326:	d00b      	beq.n	800d340 <HAL_GPIO_Init+0x230>
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d007      	beq.n	800d340 <HAL_GPIO_Init+0x230>
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	2b03      	cmp	r3, #3
 800d336:	d003      	beq.n	800d340 <HAL_GPIO_Init+0x230>
 800d338:	21ea      	movs	r1, #234	; 0xea
 800d33a:	481c      	ldr	r0, [pc, #112]	; (800d3ac <HAL_GPIO_Init+0x29c>)
 800d33c:	f7fe fb04 	bl	800b948 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	330c      	adds	r3, #12
 800d346:	623b      	str	r3, [r7, #32]
          break;
 800d348:	e041      	b.n	800d3ce <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00b      	beq.n	800d36a <HAL_GPIO_Init+0x25a>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	2b01      	cmp	r3, #1
 800d358:	d007      	beq.n	800d36a <HAL_GPIO_Init+0x25a>
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d003      	beq.n	800d36a <HAL_GPIO_Init+0x25a>
 800d362:	21f7      	movs	r1, #247	; 0xf7
 800d364:	4811      	ldr	r0, [pc, #68]	; (800d3ac <HAL_GPIO_Init+0x29c>)
 800d366:	f7fe faef 	bl	800b948 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d102      	bne.n	800d378 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800d372:	2304      	movs	r3, #4
 800d374:	623b      	str	r3, [r7, #32]
          break;
 800d376:	e02a      	b.n	800d3ce <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	689b      	ldr	r3, [r3, #8]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d105      	bne.n	800d38c <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d380:	2308      	movs	r3, #8
 800d382:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	69fa      	ldr	r2, [r7, #28]
 800d388:	611a      	str	r2, [r3, #16]
          break;
 800d38a:	e020      	b.n	800d3ce <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d38c:	2308      	movs	r3, #8
 800d38e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	69fa      	ldr	r2, [r7, #28]
 800d394:	615a      	str	r2, [r3, #20]
          break;
 800d396:	e01a      	b.n	800d3ce <HAL_GPIO_Init+0x2be>
 800d398:	40010800 	.word	0x40010800
 800d39c:	40010c00 	.word	0x40010c00
 800d3a0:	40011000 	.word	0x40011000
 800d3a4:	40011400 	.word	0x40011400
 800d3a8:	40011800 	.word	0x40011800
 800d3ac:	080155a8 	.word	0x080155a8
 800d3b0:	10110000 	.word	0x10110000
 800d3b4:	10210000 	.word	0x10210000
 800d3b8:	10310000 	.word	0x10310000
 800d3bc:	10120000 	.word	0x10120000
 800d3c0:	10220000 	.word	0x10220000
 800d3c4:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	623b      	str	r3, [r7, #32]
          break;
 800d3cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	2bff      	cmp	r3, #255	; 0xff
 800d3d2:	d801      	bhi.n	800d3d8 <HAL_GPIO_Init+0x2c8>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	e001      	b.n	800d3dc <HAL_GPIO_Init+0x2cc>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	3304      	adds	r3, #4
 800d3dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	2bff      	cmp	r3, #255	; 0xff
 800d3e2:	d802      	bhi.n	800d3ea <HAL_GPIO_Init+0x2da>
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	e002      	b.n	800d3f0 <HAL_GPIO_Init+0x2e0>
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ec:	3b08      	subs	r3, #8
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	210f      	movs	r1, #15
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d3fe:	43db      	mvns	r3, r3
 800d400:	401a      	ands	r2, r3
 800d402:	6a39      	ldr	r1, [r7, #32]
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	fa01 f303 	lsl.w	r3, r1, r3
 800d40a:	431a      	orrs	r2, r3
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f000 8096 	beq.w	800d54a <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800d41e:	4b52      	ldr	r3, [pc, #328]	; (800d568 <HAL_GPIO_Init+0x458>)
 800d420:	699b      	ldr	r3, [r3, #24]
 800d422:	4a51      	ldr	r2, [pc, #324]	; (800d568 <HAL_GPIO_Init+0x458>)
 800d424:	f043 0301 	orr.w	r3, r3, #1
 800d428:	6193      	str	r3, [r2, #24]
 800d42a:	4b4f      	ldr	r3, [pc, #316]	; (800d568 <HAL_GPIO_Init+0x458>)
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	f003 0301 	and.w	r3, r3, #1
 800d432:	60bb      	str	r3, [r7, #8]
 800d434:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800d436:	4a4d      	ldr	r2, [pc, #308]	; (800d56c <HAL_GPIO_Init+0x45c>)
 800d438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43a:	089b      	lsrs	r3, r3, #2
 800d43c:	3302      	adds	r3, #2
 800d43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d442:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800d444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d446:	f003 0303 	and.w	r3, r3, #3
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	220f      	movs	r2, #15
 800d44e:	fa02 f303 	lsl.w	r3, r2, r3
 800d452:	43db      	mvns	r3, r3
 800d454:	68fa      	ldr	r2, [r7, #12]
 800d456:	4013      	ands	r3, r2
 800d458:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a44      	ldr	r2, [pc, #272]	; (800d570 <HAL_GPIO_Init+0x460>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d013      	beq.n	800d48a <HAL_GPIO_Init+0x37a>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a43      	ldr	r2, [pc, #268]	; (800d574 <HAL_GPIO_Init+0x464>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d00d      	beq.n	800d486 <HAL_GPIO_Init+0x376>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a42      	ldr	r2, [pc, #264]	; (800d578 <HAL_GPIO_Init+0x468>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d007      	beq.n	800d482 <HAL_GPIO_Init+0x372>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a41      	ldr	r2, [pc, #260]	; (800d57c <HAL_GPIO_Init+0x46c>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d101      	bne.n	800d47e <HAL_GPIO_Init+0x36e>
 800d47a:	2303      	movs	r3, #3
 800d47c:	e006      	b.n	800d48c <HAL_GPIO_Init+0x37c>
 800d47e:	2304      	movs	r3, #4
 800d480:	e004      	b.n	800d48c <HAL_GPIO_Init+0x37c>
 800d482:	2302      	movs	r3, #2
 800d484:	e002      	b.n	800d48c <HAL_GPIO_Init+0x37c>
 800d486:	2301      	movs	r3, #1
 800d488:	e000      	b.n	800d48c <HAL_GPIO_Init+0x37c>
 800d48a:	2300      	movs	r3, #0
 800d48c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d48e:	f002 0203 	and.w	r2, r2, #3
 800d492:	0092      	lsls	r2, r2, #2
 800d494:	4093      	lsls	r3, r2
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	4313      	orrs	r3, r2
 800d49a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800d49c:	4933      	ldr	r1, [pc, #204]	; (800d56c <HAL_GPIO_Init+0x45c>)
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	089b      	lsrs	r3, r3, #2
 800d4a2:	3302      	adds	r3, #2
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d006      	beq.n	800d4c4 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800d4b6:	4b32      	ldr	r3, [pc, #200]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	4931      	ldr	r1, [pc, #196]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	600b      	str	r3, [r1, #0]
 800d4c2:	e006      	b.n	800d4d2 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800d4c4:	4b2e      	ldr	r3, [pc, #184]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	43db      	mvns	r3, r3
 800d4cc:	492c      	ldr	r1, [pc, #176]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d4ce:	4013      	ands	r3, r2
 800d4d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d006      	beq.n	800d4ec <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800d4de:	4b28      	ldr	r3, [pc, #160]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d4e0:	685a      	ldr	r2, [r3, #4]
 800d4e2:	4927      	ldr	r1, [pc, #156]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	604b      	str	r3, [r1, #4]
 800d4ea:	e006      	b.n	800d4fa <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800d4ec:	4b24      	ldr	r3, [pc, #144]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d4ee:	685a      	ldr	r2, [r3, #4]
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	43db      	mvns	r3, r3
 800d4f4:	4922      	ldr	r1, [pc, #136]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d502:	2b00      	cmp	r3, #0
 800d504:	d006      	beq.n	800d514 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800d506:	4b1e      	ldr	r3, [pc, #120]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d508:	689a      	ldr	r2, [r3, #8]
 800d50a:	491d      	ldr	r1, [pc, #116]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	4313      	orrs	r3, r2
 800d510:	608b      	str	r3, [r1, #8]
 800d512:	e006      	b.n	800d522 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800d514:	4b1a      	ldr	r3, [pc, #104]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d516:	689a      	ldr	r2, [r3, #8]
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	43db      	mvns	r3, r3
 800d51c:	4918      	ldr	r1, [pc, #96]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d51e:	4013      	ands	r3, r2
 800d520:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d006      	beq.n	800d53c <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800d52e:	4b14      	ldr	r3, [pc, #80]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d530:	68da      	ldr	r2, [r3, #12]
 800d532:	4913      	ldr	r1, [pc, #76]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	4313      	orrs	r3, r2
 800d538:	60cb      	str	r3, [r1, #12]
 800d53a:	e006      	b.n	800d54a <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800d53c:	4b10      	ldr	r3, [pc, #64]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d53e:	68da      	ldr	r2, [r3, #12]
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	43db      	mvns	r3, r3
 800d544:	490e      	ldr	r1, [pc, #56]	; (800d580 <HAL_GPIO_Init+0x470>)
 800d546:	4013      	ands	r3, r2
 800d548:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	3301      	adds	r3, #1
 800d54e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d556:	fa22 f303 	lsr.w	r3, r2, r3
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f47f ae4f 	bne.w	800d1fe <HAL_GPIO_Init+0xee>
  }
}
 800d560:	bf00      	nop
 800d562:	3728      	adds	r7, #40	; 0x28
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	40021000 	.word	0x40021000
 800d56c:	40010000 	.word	0x40010000
 800d570:	40010800 	.word	0x40010800
 800d574:	40010c00 	.word	0x40010c00
 800d578:	40011000 	.word	0x40011000
 800d57c:	40011400 	.word	0x40011400
 800d580:	40010400 	.word	0x40010400

0800d584 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	460b      	mov	r3, r1
 800d58e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d590:	887b      	ldrh	r3, [r7, #2]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d004      	beq.n	800d5a0 <HAL_GPIO_ReadPin+0x1c>
 800d596:	887b      	ldrh	r3, [r7, #2]
 800d598:	0c1b      	lsrs	r3, r3, #16
 800d59a:	041b      	lsls	r3, r3, #16
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d004      	beq.n	800d5aa <HAL_GPIO_ReadPin+0x26>
 800d5a0:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800d5a4:	4809      	ldr	r0, [pc, #36]	; (800d5cc <HAL_GPIO_ReadPin+0x48>)
 800d5a6:	f7fe f9cf 	bl	800b948 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	689a      	ldr	r2, [r3, #8]
 800d5ae:	887b      	ldrh	r3, [r7, #2]
 800d5b0:	4013      	ands	r3, r2
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d002      	beq.n	800d5bc <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	73fb      	strb	r3, [r7, #15]
 800d5ba:	e001      	b.n	800d5c0 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	080155a8 	.word	0x080155a8

0800d5d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	807b      	strh	r3, [r7, #2]
 800d5dc:	4613      	mov	r3, r2
 800d5de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d5e0:	887b      	ldrh	r3, [r7, #2]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d004      	beq.n	800d5f0 <HAL_GPIO_WritePin+0x20>
 800d5e6:	887b      	ldrh	r3, [r7, #2]
 800d5e8:	0c1b      	lsrs	r3, r3, #16
 800d5ea:	041b      	lsls	r3, r3, #16
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d004      	beq.n	800d5fa <HAL_GPIO_WritePin+0x2a>
 800d5f0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d5f4:	480e      	ldr	r0, [pc, #56]	; (800d630 <HAL_GPIO_WritePin+0x60>)
 800d5f6:	f7fe f9a7 	bl	800b948 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800d5fa:	787b      	ldrb	r3, [r7, #1]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d007      	beq.n	800d610 <HAL_GPIO_WritePin+0x40>
 800d600:	787b      	ldrb	r3, [r7, #1]
 800d602:	2b01      	cmp	r3, #1
 800d604:	d004      	beq.n	800d610 <HAL_GPIO_WritePin+0x40>
 800d606:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d60a:	4809      	ldr	r0, [pc, #36]	; (800d630 <HAL_GPIO_WritePin+0x60>)
 800d60c:	f7fe f99c 	bl	800b948 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800d610:	787b      	ldrb	r3, [r7, #1]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d003      	beq.n	800d61e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d616:	887a      	ldrh	r2, [r7, #2]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800d61c:	e003      	b.n	800d626 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800d61e:	887b      	ldrh	r3, [r7, #2]
 800d620:	041a      	lsls	r2, r3, #16
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	611a      	str	r2, [r3, #16]
}
 800d626:	bf00      	nop
 800d628:	3708      	adds	r7, #8
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	080155a8 	.word	0x080155a8

0800d634 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	460b      	mov	r3, r1
 800d63e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d640:	887b      	ldrh	r3, [r7, #2]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d004      	beq.n	800d650 <HAL_GPIO_TogglePin+0x1c>
 800d646:	887b      	ldrh	r3, [r7, #2]
 800d648:	0c1b      	lsrs	r3, r3, #16
 800d64a:	041b      	lsls	r3, r3, #16
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d004      	beq.n	800d65a <HAL_GPIO_TogglePin+0x26>
 800d650:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800d654:	4809      	ldr	r0, [pc, #36]	; (800d67c <HAL_GPIO_TogglePin+0x48>)
 800d656:	f7fe f977 	bl	800b948 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	68da      	ldr	r2, [r3, #12]
 800d65e:	887b      	ldrh	r3, [r7, #2]
 800d660:	4013      	ands	r3, r2
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d666:	887a      	ldrh	r2, [r7, #2]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800d66c:	e002      	b.n	800d674 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d66e:	887a      	ldrh	r2, [r7, #2]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	611a      	str	r2, [r3, #16]
}
 800d674:	bf00      	nop
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	080155a8 	.word	0x080155a8

0800d680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d101      	bne.n	800d692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d68e:	2301      	movs	r3, #1
 800d690:	e1ab      	b.n	800d9ea <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4aa0      	ldr	r2, [pc, #640]	; (800d918 <HAL_I2C_Init+0x298>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d009      	beq.n	800d6b0 <HAL_I2C_Init+0x30>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a9e      	ldr	r2, [pc, #632]	; (800d91c <HAL_I2C_Init+0x29c>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d004      	beq.n	800d6b0 <HAL_I2C_Init+0x30>
 800d6a6:	f240 11d1 	movw	r1, #465	; 0x1d1
 800d6aa:	489d      	ldr	r0, [pc, #628]	; (800d920 <HAL_I2C_Init+0x2a0>)
 800d6ac:	f7fe f94c 	bl	800b948 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d004      	beq.n	800d6c2 <HAL_I2C_Init+0x42>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	4a99      	ldr	r2, [pc, #612]	; (800d924 <HAL_I2C_Init+0x2a4>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d904      	bls.n	800d6cc <HAL_I2C_Init+0x4c>
 800d6c2:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800d6c6:	4896      	ldr	r0, [pc, #600]	; (800d920 <HAL_I2C_Init+0x2a0>)
 800d6c8:	f7fe f93e 	bl	800b948 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d009      	beq.n	800d6e8 <HAL_I2C_Init+0x68>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	689b      	ldr	r3, [r3, #8]
 800d6d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d6dc:	d004      	beq.n	800d6e8 <HAL_I2C_Init+0x68>
 800d6de:	f240 11d3 	movw	r1, #467	; 0x1d3
 800d6e2:	488f      	ldr	r0, [pc, #572]	; (800d920 <HAL_I2C_Init+0x2a0>)
 800d6e4:	f7fe f930 	bl	800b948 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d6f0:	f023 0303 	bic.w	r3, r3, #3
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d004      	beq.n	800d702 <HAL_I2C_Init+0x82>
 800d6f8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d6fc:	4888      	ldr	r0, [pc, #544]	; (800d920 <HAL_I2C_Init+0x2a0>)
 800d6fe:	f7fe f923 	bl	800b948 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d70a:	d009      	beq.n	800d720 <HAL_I2C_Init+0xa0>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	691b      	ldr	r3, [r3, #16]
 800d710:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d714:	d004      	beq.n	800d720 <HAL_I2C_Init+0xa0>
 800d716:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d71a:	4881      	ldr	r0, [pc, #516]	; (800d920 <HAL_I2C_Init+0x2a0>)
 800d71c:	f7fe f914 	bl	800b948 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d008      	beq.n	800d73a <HAL_I2C_Init+0xba>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	695b      	ldr	r3, [r3, #20]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d004      	beq.n	800d73a <HAL_I2C_Init+0xba>
 800d730:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800d734:	487a      	ldr	r0, [pc, #488]	; (800d920 <HAL_I2C_Init+0x2a0>)
 800d736:	f7fe f907 	bl	800b948 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	699b      	ldr	r3, [r3, #24]
 800d73e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800d742:	2b00      	cmp	r3, #0
 800d744:	d004      	beq.n	800d750 <HAL_I2C_Init+0xd0>
 800d746:	f240 11d7 	movw	r1, #471	; 0x1d7
 800d74a:	4875      	ldr	r0, [pc, #468]	; (800d920 <HAL_I2C_Init+0x2a0>)
 800d74c:	f7fe f8fc 	bl	800b948 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	69db      	ldr	r3, [r3, #28]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d008      	beq.n	800d76a <HAL_I2C_Init+0xea>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	69db      	ldr	r3, [r3, #28]
 800d75c:	2b40      	cmp	r3, #64	; 0x40
 800d75e:	d004      	beq.n	800d76a <HAL_I2C_Init+0xea>
 800d760:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800d764:	486e      	ldr	r0, [pc, #440]	; (800d920 <HAL_I2C_Init+0x2a0>)
 800d766:	f7fe f8ef 	bl	800b948 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a1b      	ldr	r3, [r3, #32]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d008      	beq.n	800d784 <HAL_I2C_Init+0x104>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6a1b      	ldr	r3, [r3, #32]
 800d776:	2b80      	cmp	r3, #128	; 0x80
 800d778:	d004      	beq.n	800d784 <HAL_I2C_Init+0x104>
 800d77a:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d77e:	4868      	ldr	r0, [pc, #416]	; (800d920 <HAL_I2C_Init+0x2a0>)
 800d780:	f7fe f8e2 	bl	800b948 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d106      	bne.n	800d79e <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7fd ffdf 	bl	800b75c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2224      	movs	r2, #36	; 0x24
 800d7a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f022 0201 	bic.w	r2, r2, #1
 800d7b4:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d7c4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7d4:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d7d6:	f001 fcfd 	bl	800f1d4 <HAL_RCC_GetPCLK1Freq>
 800d7da:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	4a51      	ldr	r2, [pc, #324]	; (800d928 <HAL_I2C_Init+0x2a8>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d807      	bhi.n	800d7f6 <HAL_I2C_Init+0x176>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	4a50      	ldr	r2, [pc, #320]	; (800d92c <HAL_I2C_Init+0x2ac>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	bf94      	ite	ls
 800d7ee:	2301      	movls	r3, #1
 800d7f0:	2300      	movhi	r3, #0
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	e006      	b.n	800d804 <HAL_I2C_Init+0x184>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	4a4d      	ldr	r2, [pc, #308]	; (800d930 <HAL_I2C_Init+0x2b0>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	bf94      	ite	ls
 800d7fe:	2301      	movls	r3, #1
 800d800:	2300      	movhi	r3, #0
 800d802:	b2db      	uxtb	r3, r3
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	e0ee      	b.n	800d9ea <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	4a49      	ldr	r2, [pc, #292]	; (800d934 <HAL_I2C_Init+0x2b4>)
 800d810:	fba2 2303 	umull	r2, r3, r2, r3
 800d814:	0c9b      	lsrs	r3, r3, #18
 800d816:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	68ba      	ldr	r2, [r7, #8]
 800d828:	430a      	orrs	r2, r1
 800d82a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6a1b      	ldr	r3, [r3, #32]
 800d832:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	4a3b      	ldr	r2, [pc, #236]	; (800d928 <HAL_I2C_Init+0x2a8>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d802      	bhi.n	800d846 <HAL_I2C_Init+0x1c6>
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	3301      	adds	r3, #1
 800d844:	e009      	b.n	800d85a <HAL_I2C_Init+0x1da>
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d84c:	fb02 f303 	mul.w	r3, r2, r3
 800d850:	4a39      	ldr	r2, [pc, #228]	; (800d938 <HAL_I2C_Init+0x2b8>)
 800d852:	fba2 2303 	umull	r2, r3, r2, r3
 800d856:	099b      	lsrs	r3, r3, #6
 800d858:	3301      	adds	r3, #1
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	6812      	ldr	r2, [r2, #0]
 800d85e:	430b      	orrs	r3, r1
 800d860:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	69db      	ldr	r3, [r3, #28]
 800d868:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d86c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	492c      	ldr	r1, [pc, #176]	; (800d928 <HAL_I2C_Init+0x2a8>)
 800d876:	428b      	cmp	r3, r1
 800d878:	d80d      	bhi.n	800d896 <HAL_I2C_Init+0x216>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	1e59      	subs	r1, r3, #1
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	005b      	lsls	r3, r3, #1
 800d884:	fbb1 f3f3 	udiv	r3, r1, r3
 800d888:	3301      	adds	r3, #1
 800d88a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d88e:	2b04      	cmp	r3, #4
 800d890:	bf38      	it	cc
 800d892:	2304      	movcc	r3, #4
 800d894:	e062      	b.n	800d95c <HAL_I2C_Init+0x2dc>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d111      	bne.n	800d8c2 <HAL_I2C_Init+0x242>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	1e58      	subs	r0, r3, #1
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6859      	ldr	r1, [r3, #4]
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	005b      	lsls	r3, r3, #1
 800d8aa:	440b      	add	r3, r1
 800d8ac:	fbb0 f3f3 	udiv	r3, r0, r3
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	bf0c      	ite	eq
 800d8ba:	2301      	moveq	r3, #1
 800d8bc:	2300      	movne	r3, #0
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	e012      	b.n	800d8e8 <HAL_I2C_Init+0x268>
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	1e58      	subs	r0, r3, #1
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6859      	ldr	r1, [r3, #4]
 800d8ca:	460b      	mov	r3, r1
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	440b      	add	r3, r1
 800d8d0:	0099      	lsls	r1, r3, #2
 800d8d2:	440b      	add	r3, r1
 800d8d4:	fbb0 f3f3 	udiv	r3, r0, r3
 800d8d8:	3301      	adds	r3, #1
 800d8da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	bf0c      	ite	eq
 800d8e2:	2301      	moveq	r3, #1
 800d8e4:	2300      	movne	r3, #0
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d001      	beq.n	800d8f0 <HAL_I2C_Init+0x270>
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e035      	b.n	800d95c <HAL_I2C_Init+0x2dc>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d121      	bne.n	800d93c <HAL_I2C_Init+0x2bc>
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	1e58      	subs	r0, r3, #1
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6859      	ldr	r1, [r3, #4]
 800d900:	460b      	mov	r3, r1
 800d902:	005b      	lsls	r3, r3, #1
 800d904:	440b      	add	r3, r1
 800d906:	fbb0 f3f3 	udiv	r3, r0, r3
 800d90a:	3301      	adds	r3, #1
 800d90c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d914:	e022      	b.n	800d95c <HAL_I2C_Init+0x2dc>
 800d916:	bf00      	nop
 800d918:	40005400 	.word	0x40005400
 800d91c:	40005800 	.word	0x40005800
 800d920:	080155e4 	.word	0x080155e4
 800d924:	00061a80 	.word	0x00061a80
 800d928:	000186a0 	.word	0x000186a0
 800d92c:	001e847f 	.word	0x001e847f
 800d930:	003d08ff 	.word	0x003d08ff
 800d934:	431bde83 	.word	0x431bde83
 800d938:	10624dd3 	.word	0x10624dd3
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	1e58      	subs	r0, r3, #1
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6859      	ldr	r1, [r3, #4]
 800d944:	460b      	mov	r3, r1
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	440b      	add	r3, r1
 800d94a:	0099      	lsls	r1, r3, #2
 800d94c:	440b      	add	r3, r1
 800d94e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d952:	3301      	adds	r3, #1
 800d954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d95c:	6879      	ldr	r1, [r7, #4]
 800d95e:	6809      	ldr	r1, [r1, #0]
 800d960:	4313      	orrs	r3, r2
 800d962:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	69da      	ldr	r2, [r3, #28]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6a1b      	ldr	r3, [r3, #32]
 800d976:	431a      	orrs	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	430a      	orrs	r2, r1
 800d97e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d98a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	6911      	ldr	r1, [r2, #16]
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	68d2      	ldr	r2, [r2, #12]
 800d996:	4311      	orrs	r1, r2
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	6812      	ldr	r2, [r2, #0]
 800d99c:	430b      	orrs	r3, r1
 800d99e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	695a      	ldr	r2, [r3, #20]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	699b      	ldr	r3, [r3, #24]
 800d9b2:	431a      	orrs	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	430a      	orrs	r2, r1
 800d9ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f042 0201 	orr.w	r2, r2, #1
 800d9ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2220      	movs	r2, #32
 800d9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop

0800d9f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b088      	sub	sp, #32
 800d9f8:	af02      	add	r7, sp, #8
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	607a      	str	r2, [r7, #4]
 800d9fe:	461a      	mov	r2, r3
 800da00:	460b      	mov	r3, r1
 800da02:	817b      	strh	r3, [r7, #10]
 800da04:	4613      	mov	r3, r2
 800da06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800da08:	f7fe fbf6 	bl	800c1f8 <HAL_GetTick>
 800da0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da14:	b2db      	uxtb	r3, r3
 800da16:	2b20      	cmp	r3, #32
 800da18:	f040 80e0 	bne.w	800dbdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	2319      	movs	r3, #25
 800da22:	2201      	movs	r2, #1
 800da24:	4970      	ldr	r1, [pc, #448]	; (800dbe8 <HAL_I2C_Master_Transmit+0x1f4>)
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f000 fc8c 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d001      	beq.n	800da36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800da32:	2302      	movs	r3, #2
 800da34:	e0d3      	b.n	800dbde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d101      	bne.n	800da44 <HAL_I2C_Master_Transmit+0x50>
 800da40:	2302      	movs	r3, #2
 800da42:	e0cc      	b.n	800dbde <HAL_I2C_Master_Transmit+0x1ea>
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2201      	movs	r2, #1
 800da48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f003 0301 	and.w	r3, r3, #1
 800da56:	2b01      	cmp	r3, #1
 800da58:	d007      	beq.n	800da6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f042 0201 	orr.w	r2, r2, #1
 800da68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2221      	movs	r2, #33	; 0x21
 800da7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2210      	movs	r2, #16
 800da86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2200      	movs	r2, #0
 800da8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	893a      	ldrh	r2, [r7, #8]
 800da9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	4a50      	ldr	r2, [pc, #320]	; (800dbec <HAL_I2C_Master_Transmit+0x1f8>)
 800daaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800daac:	8979      	ldrh	r1, [r7, #10]
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	6a3a      	ldr	r2, [r7, #32]
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f000 faf6 	bl	800e0a4 <I2C_MasterRequestWrite>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	e08d      	b.n	800dbde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dac2:	2300      	movs	r3, #0
 800dac4:	613b      	str	r3, [r7, #16]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	695b      	ldr	r3, [r3, #20]
 800dacc:	613b      	str	r3, [r7, #16]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	613b      	str	r3, [r7, #16]
 800dad6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800dad8:	e066      	b.n	800dba8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dada:	697a      	ldr	r2, [r7, #20]
 800dadc:	6a39      	ldr	r1, [r7, #32]
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f000 fd06 	bl	800e4f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00d      	beq.n	800db06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daee:	2b04      	cmp	r3, #4
 800daf0:	d107      	bne.n	800db02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800db02:	2301      	movs	r3, #1
 800db04:	e06b      	b.n	800dbde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0a:	781a      	ldrb	r2, [r3, #0]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db16:	1c5a      	adds	r2, r3, #1
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db20:	b29b      	uxth	r3, r3
 800db22:	3b01      	subs	r3, #1
 800db24:	b29a      	uxth	r2, r3
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db2e:	3b01      	subs	r3, #1
 800db30:	b29a      	uxth	r2, r3
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	695b      	ldr	r3, [r3, #20]
 800db3c:	f003 0304 	and.w	r3, r3, #4
 800db40:	2b04      	cmp	r3, #4
 800db42:	d11b      	bne.n	800db7c <HAL_I2C_Master_Transmit+0x188>
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d017      	beq.n	800db7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db50:	781a      	ldrb	r2, [r3, #0]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5c:	1c5a      	adds	r2, r3, #1
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db66:	b29b      	uxth	r3, r3
 800db68:	3b01      	subs	r3, #1
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db74:	3b01      	subs	r3, #1
 800db76:	b29a      	uxth	r2, r3
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	6a39      	ldr	r1, [r7, #32]
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f000 fcf6 	bl	800e572 <I2C_WaitOnBTFFlagUntilTimeout>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d00d      	beq.n	800dba8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db90:	2b04      	cmp	r3, #4
 800db92:	d107      	bne.n	800dba4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dba2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dba4:	2301      	movs	r3, #1
 800dba6:	e01a      	b.n	800dbde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d194      	bne.n	800dada <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2220      	movs	r2, #32
 800dbc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	e000      	b.n	800dbde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800dbdc:	2302      	movs	r3, #2
  }
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	00100002 	.word	0x00100002
 800dbec:	ffff0000 	.word	0xffff0000

0800dbf0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b08c      	sub	sp, #48	; 0x30
 800dbf4:	af02      	add	r7, sp, #8
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	607a      	str	r2, [r7, #4]
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	817b      	strh	r3, [r7, #10]
 800dc00:	4613      	mov	r3, r2
 800dc02:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800dc04:	2300      	movs	r3, #0
 800dc06:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dc08:	f7fe faf6 	bl	800c1f8 <HAL_GetTick>
 800dc0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	2b20      	cmp	r3, #32
 800dc18:	f040 8238 	bne.w	800e08c <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	2319      	movs	r3, #25
 800dc22:	2201      	movs	r2, #1
 800dc24:	497e      	ldr	r1, [pc, #504]	; (800de20 <HAL_I2C_Master_Receive+0x230>)
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f000 fb8c 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800dc32:	2302      	movs	r3, #2
 800dc34:	e22b      	b.n	800e08e <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d101      	bne.n	800dc44 <HAL_I2C_Master_Receive+0x54>
 800dc40:	2302      	movs	r3, #2
 800dc42:	e224      	b.n	800e08e <HAL_I2C_Master_Receive+0x49e>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f003 0301 	and.w	r3, r3, #1
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d007      	beq.n	800dc6a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f042 0201 	orr.w	r2, r2, #1
 800dc68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dc78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2222      	movs	r2, #34	; 0x22
 800dc7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2210      	movs	r2, #16
 800dc86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	893a      	ldrh	r2, [r7, #8]
 800dc9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	4a5e      	ldr	r2, [pc, #376]	; (800de24 <HAL_I2C_Master_Receive+0x234>)
 800dcaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800dcac:	8979      	ldrh	r1, [r7, #10]
 800dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f000 fa78 	bl	800e1a8 <I2C_MasterRequestRead>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d001      	beq.n	800dcc2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e1e5      	b.n	800e08e <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d113      	bne.n	800dcf2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dcca:	2300      	movs	r3, #0
 800dccc:	61fb      	str	r3, [r7, #28]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	695b      	ldr	r3, [r3, #20]
 800dcd4:	61fb      	str	r3, [r7, #28]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	699b      	ldr	r3, [r3, #24]
 800dcdc:	61fb      	str	r3, [r7, #28]
 800dcde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dcee:	601a      	str	r2, [r3, #0]
 800dcf0:	e1b9      	b.n	800e066 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d11d      	bne.n	800dd36 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd0a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	61bb      	str	r3, [r7, #24]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	695b      	ldr	r3, [r3, #20]
 800dd16:	61bb      	str	r3, [r7, #24]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	61bb      	str	r3, [r7, #24]
 800dd20:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800dd32:	b662      	cpsie	i
 800dd34:	e197      	b.n	800e066 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd3a:	2b02      	cmp	r3, #2
 800dd3c:	d11d      	bne.n	800dd7a <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd4e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd50:	2300      	movs	r3, #0
 800dd52:	617b      	str	r3, [r7, #20]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	695b      	ldr	r3, [r3, #20]
 800dd5a:	617b      	str	r3, [r7, #20]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	617b      	str	r3, [r7, #20]
 800dd64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800dd76:	b662      	cpsie	i
 800dd78:	e175      	b.n	800e066 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dd88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	613b      	str	r3, [r7, #16]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	695b      	ldr	r3, [r3, #20]
 800dd94:	613b      	str	r3, [r7, #16]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	699b      	ldr	r3, [r3, #24]
 800dd9c:	613b      	str	r3, [r7, #16]
 800dd9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800dda0:	e161      	b.n	800e066 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	f200 811a 	bhi.w	800dfe0 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d123      	bne.n	800ddfc <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ddb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f000 fc1b 	bl	800e5f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d001      	beq.n	800ddc8 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	e162      	b.n	800e08e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	691a      	ldr	r2, [r3, #16]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd2:	b2d2      	uxtb	r2, r2
 800ddd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddda:	1c5a      	adds	r2, r3, #1
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dde4:	3b01      	subs	r3, #1
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	3b01      	subs	r3, #1
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ddfa:	e134      	b.n	800e066 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de00:	2b02      	cmp	r3, #2
 800de02:	d150      	bne.n	800dea6 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800de04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0a:	2200      	movs	r2, #0
 800de0c:	4906      	ldr	r1, [pc, #24]	; (800de28 <HAL_I2C_Master_Receive+0x238>)
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f000 fa98 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d008      	beq.n	800de2c <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	e137      	b.n	800e08e <HAL_I2C_Master_Receive+0x49e>
 800de1e:	bf00      	nop
 800de20:	00100002 	.word	0x00100002
 800de24:	ffff0000 	.word	0xffff0000
 800de28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800de2c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de3c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	691a      	ldr	r2, [r3, #16]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de48:	b2d2      	uxtb	r2, r2
 800de4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de50:	1c5a      	adds	r2, r3, #1
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de5a:	3b01      	subs	r3, #1
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de66:	b29b      	uxth	r3, r3
 800de68:	3b01      	subs	r3, #1
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800de70:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	691a      	ldr	r2, [r3, #16]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7c:	b2d2      	uxtb	r2, r2
 800de7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de84:	1c5a      	adds	r2, r3, #1
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de8e:	3b01      	subs	r3, #1
 800de90:	b29a      	uxth	r2, r3
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	3b01      	subs	r3, #1
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dea4:	e0df      	b.n	800e066 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deac:	2200      	movs	r2, #0
 800deae:	497a      	ldr	r1, [pc, #488]	; (800e098 <HAL_I2C_Master_Receive+0x4a8>)
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 fa47 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d001      	beq.n	800dec0 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800debc:	2301      	movs	r3, #1
 800debe:	e0e6      	b.n	800e08e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dece:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ded0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	691a      	ldr	r2, [r3, #16]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dedc:	b2d2      	uxtb	r2, r2
 800dede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee4:	1c5a      	adds	r2, r3, #1
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800deee:	3b01      	subs	r3, #1
 800def0:	b29a      	uxth	r2, r3
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800defa:	b29b      	uxth	r3, r3
 800defc:	3b01      	subs	r3, #1
 800defe:	b29a      	uxth	r2, r3
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800df04:	4b65      	ldr	r3, [pc, #404]	; (800e09c <HAL_I2C_Master_Receive+0x4ac>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	08db      	lsrs	r3, r3, #3
 800df0a:	4a65      	ldr	r2, [pc, #404]	; (800e0a0 <HAL_I2C_Master_Receive+0x4b0>)
 800df0c:	fba2 2303 	umull	r2, r3, r2, r3
 800df10:	0a1a      	lsrs	r2, r3, #8
 800df12:	4613      	mov	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	00da      	lsls	r2, r3, #3
 800df1a:	1ad3      	subs	r3, r2, r3
 800df1c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800df1e:	6a3b      	ldr	r3, [r7, #32]
 800df20:	3b01      	subs	r3, #1
 800df22:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800df24:	6a3b      	ldr	r3, [r7, #32]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d117      	bne.n	800df5a <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2200      	movs	r2, #0
 800df2e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2220      	movs	r2, #32
 800df34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df44:	f043 0220 	orr.w	r2, r3, #32
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800df4c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800df56:	2301      	movs	r3, #1
 800df58:	e099      	b.n	800e08e <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	695b      	ldr	r3, [r3, #20]
 800df60:	f003 0304 	and.w	r3, r3, #4
 800df64:	2b04      	cmp	r3, #4
 800df66:	d1da      	bne.n	800df1e <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	691a      	ldr	r2, [r3, #16]
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df82:	b2d2      	uxtb	r2, r2
 800df84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8a:	1c5a      	adds	r2, r3, #1
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df94:	3b01      	subs	r3, #1
 800df96:	b29a      	uxth	r2, r3
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	3b01      	subs	r3, #1
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dfaa:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	691a      	ldr	r2, [r3, #16]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb6:	b2d2      	uxtb	r2, r2
 800dfb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbe:	1c5a      	adds	r2, r3, #1
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	b29a      	uxth	r2, r3
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	3b01      	subs	r3, #1
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dfde:	e042      	b.n	800e066 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dfe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f000 fb05 	bl	800e5f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d001      	beq.n	800dff4 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800dff0:	2301      	movs	r3, #1
 800dff2:	e04c      	b.n	800e08e <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	691a      	ldr	r2, [r3, #16]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffe:	b2d2      	uxtb	r2, r2
 800e000:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e006:	1c5a      	adds	r2, r3, #1
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e010:	3b01      	subs	r3, #1
 800e012:	b29a      	uxth	r2, r3
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	3b01      	subs	r3, #1
 800e020:	b29a      	uxth	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	695b      	ldr	r3, [r3, #20]
 800e02c:	f003 0304 	and.w	r3, r3, #4
 800e030:	2b04      	cmp	r3, #4
 800e032:	d118      	bne.n	800e066 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	691a      	ldr	r2, [r3, #16]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03e:	b2d2      	uxtb	r2, r2
 800e040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	1c5a      	adds	r2, r3, #1
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e050:	3b01      	subs	r3, #1
 800e052:	b29a      	uxth	r2, r3
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	3b01      	subs	r3, #1
 800e060:	b29a      	uxth	r2, r3
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f47f ae99 	bne.w	800dda2 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2220      	movs	r2, #32
 800e074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2200      	movs	r2, #0
 800e084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e088:	2300      	movs	r3, #0
 800e08a:	e000      	b.n	800e08e <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800e08c:	2302      	movs	r3, #2
  }
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3728      	adds	r7, #40	; 0x28
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	00010004 	.word	0x00010004
 800e09c:	2000009c 	.word	0x2000009c
 800e0a0:	14f8b589 	.word	0x14f8b589

0800e0a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b088      	sub	sp, #32
 800e0a8:	af02      	add	r7, sp, #8
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	607a      	str	r2, [r7, #4]
 800e0ae:	603b      	str	r3, [r7, #0]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	2b08      	cmp	r3, #8
 800e0be:	d006      	beq.n	800e0ce <I2C_MasterRequestWrite+0x2a>
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	d003      	beq.n	800e0ce <I2C_MasterRequestWrite+0x2a>
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e0cc:	d108      	bne.n	800e0e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0dc:	601a      	str	r2, [r3, #0]
 800e0de:	e00b      	b.n	800e0f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0e4:	2b12      	cmp	r3, #18
 800e0e6:	d107      	bne.n	800e0f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	9300      	str	r3, [sp, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f000 f91d 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00d      	beq.n	800e12c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e11a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e11e:	d103      	bne.n	800e128 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e126:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e128:	2303      	movs	r3, #3
 800e12a:	e035      	b.n	800e198 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e134:	d108      	bne.n	800e148 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e136:	897b      	ldrh	r3, [r7, #10]
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	461a      	mov	r2, r3
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e144:	611a      	str	r2, [r3, #16]
 800e146:	e01b      	b.n	800e180 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e148:	897b      	ldrh	r3, [r7, #10]
 800e14a:	11db      	asrs	r3, r3, #7
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	f003 0306 	and.w	r3, r3, #6
 800e152:	b2db      	uxtb	r3, r3
 800e154:	f063 030f 	orn	r3, r3, #15
 800e158:	b2da      	uxtb	r2, r3
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	490e      	ldr	r1, [pc, #56]	; (800e1a0 <I2C_MasterRequestWrite+0xfc>)
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f000 f943 	bl	800e3f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e172:	2301      	movs	r3, #1
 800e174:	e010      	b.n	800e198 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e176:	897b      	ldrh	r3, [r7, #10]
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	4907      	ldr	r1, [pc, #28]	; (800e1a4 <I2C_MasterRequestWrite+0x100>)
 800e186:	68f8      	ldr	r0, [r7, #12]
 800e188:	f000 f933 	bl	800e3f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d001      	beq.n	800e196 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e192:	2301      	movs	r3, #1
 800e194:	e000      	b.n	800e198 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3718      	adds	r7, #24
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	00010008 	.word	0x00010008
 800e1a4:	00010002 	.word	0x00010002

0800e1a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b088      	sub	sp, #32
 800e1ac:	af02      	add	r7, sp, #8
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	607a      	str	r2, [r7, #4]
 800e1b2:	603b      	str	r3, [r7, #0]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e1cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	2b08      	cmp	r3, #8
 800e1d2:	d006      	beq.n	800e1e2 <I2C_MasterRequestRead+0x3a>
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d003      	beq.n	800e1e2 <I2C_MasterRequestRead+0x3a>
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e1e0:	d108      	bne.n	800e1f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1f0:	601a      	str	r2, [r3, #0]
 800e1f2:	e00b      	b.n	800e20c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f8:	2b11      	cmp	r3, #17
 800e1fa:	d107      	bne.n	800e20c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e20a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f000 f893 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00d      	beq.n	800e240 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e22e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e232:	d103      	bne.n	800e23c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e23a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e23c:	2303      	movs	r3, #3
 800e23e:	e079      	b.n	800e334 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	691b      	ldr	r3, [r3, #16]
 800e244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e248:	d108      	bne.n	800e25c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e24a:	897b      	ldrh	r3, [r7, #10]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	f043 0301 	orr.w	r3, r3, #1
 800e252:	b2da      	uxtb	r2, r3
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	611a      	str	r2, [r3, #16]
 800e25a:	e05f      	b.n	800e31c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e25c:	897b      	ldrh	r3, [r7, #10]
 800e25e:	11db      	asrs	r3, r3, #7
 800e260:	b2db      	uxtb	r3, r3
 800e262:	f003 0306 	and.w	r3, r3, #6
 800e266:	b2db      	uxtb	r3, r3
 800e268:	f063 030f 	orn	r3, r3, #15
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	4930      	ldr	r1, [pc, #192]	; (800e33c <I2C_MasterRequestRead+0x194>)
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f000 f8b9 	bl	800e3f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e286:	2301      	movs	r3, #1
 800e288:	e054      	b.n	800e334 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e28a:	897b      	ldrh	r3, [r7, #10]
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	4929      	ldr	r1, [pc, #164]	; (800e340 <I2C_MasterRequestRead+0x198>)
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f000 f8a9 	bl	800e3f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d001      	beq.n	800e2aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e044      	b.n	800e334 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	613b      	str	r3, [r7, #16]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	695b      	ldr	r3, [r3, #20]
 800e2b4:	613b      	str	r3, [r7, #16]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	699b      	ldr	r3, [r3, #24]
 800e2bc:	613b      	str	r3, [r7, #16]
 800e2be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	f000 f831 	bl	800e344 <I2C_WaitOnFlagUntilTimeout>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00d      	beq.n	800e304 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2f6:	d103      	bne.n	800e300 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e300:	2303      	movs	r3, #3
 800e302:	e017      	b.n	800e334 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e304:	897b      	ldrh	r3, [r7, #10]
 800e306:	11db      	asrs	r3, r3, #7
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	f003 0306 	and.w	r3, r3, #6
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	f063 030e 	orn	r3, r3, #14
 800e314:	b2da      	uxtb	r2, r3
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	4907      	ldr	r1, [pc, #28]	; (800e340 <I2C_MasterRequestRead+0x198>)
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f000 f865 	bl	800e3f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d001      	beq.n	800e332 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	e000      	b.n	800e334 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e332:	2300      	movs	r3, #0
}
 800e334:	4618      	mov	r0, r3
 800e336:	3718      	adds	r7, #24
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}
 800e33c:	00010008 	.word	0x00010008
 800e340:	00010002 	.word	0x00010002

0800e344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	603b      	str	r3, [r7, #0]
 800e350:	4613      	mov	r3, r2
 800e352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e354:	e025      	b.n	800e3a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e35c:	d021      	beq.n	800e3a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e35e:	f7fd ff4b 	bl	800c1f8 <HAL_GetTick>
 800e362:	4602      	mov	r2, r0
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d302      	bcc.n	800e374 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d116      	bne.n	800e3a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2220      	movs	r2, #32
 800e37e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e38e:	f043 0220 	orr.w	r2, r3, #32
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2200      	movs	r2, #0
 800e39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	e023      	b.n	800e3ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	0c1b      	lsrs	r3, r3, #16
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d10d      	bne.n	800e3c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	695b      	ldr	r3, [r3, #20]
 800e3b2:	43da      	mvns	r2, r3
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	bf0c      	ite	eq
 800e3be:	2301      	moveq	r3, #1
 800e3c0:	2300      	movne	r3, #0
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	e00c      	b.n	800e3e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	43da      	mvns	r2, r3
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	4013      	ands	r3, r2
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	bf0c      	ite	eq
 800e3da:	2301      	moveq	r3, #1
 800e3dc:	2300      	movne	r3, #0
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	79fb      	ldrb	r3, [r7, #7]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d0b6      	beq.n	800e356 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e3e8:	2300      	movs	r3, #0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3710      	adds	r7, #16
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b084      	sub	sp, #16
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	60f8      	str	r0, [r7, #12]
 800e3fa:	60b9      	str	r1, [r7, #8]
 800e3fc:	607a      	str	r2, [r7, #4]
 800e3fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e400:	e051      	b.n	800e4a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	695b      	ldr	r3, [r3, #20]
 800e408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e40c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e410:	d123      	bne.n	800e45a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e420:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e42a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2200      	movs	r2, #0
 800e430:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2220      	movs	r2, #32
 800e436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e446:	f043 0204 	orr.w	r2, r3, #4
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2200      	movs	r2, #0
 800e452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e046      	b.n	800e4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e460:	d021      	beq.n	800e4a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e462:	f7fd fec9 	bl	800c1f8 <HAL_GetTick>
 800e466:	4602      	mov	r2, r0
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	1ad3      	subs	r3, r2, r3
 800e46c:	687a      	ldr	r2, [r7, #4]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d302      	bcc.n	800e478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d116      	bne.n	800e4a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2200      	movs	r2, #0
 800e47c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2220      	movs	r2, #32
 800e482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e492:	f043 0220 	orr.w	r2, r3, #32
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e020      	b.n	800e4e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	0c1b      	lsrs	r3, r3, #16
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d10c      	bne.n	800e4ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	695b      	ldr	r3, [r3, #20]
 800e4b6:	43da      	mvns	r2, r3
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	4013      	ands	r3, r2
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	bf14      	ite	ne
 800e4c2:	2301      	movne	r3, #1
 800e4c4:	2300      	moveq	r3, #0
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	e00b      	b.n	800e4e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	699b      	ldr	r3, [r3, #24]
 800e4d0:	43da      	mvns	r2, r3
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	4013      	ands	r3, r2
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	bf14      	ite	ne
 800e4dc:	2301      	movne	r3, #1
 800e4de:	2300      	moveq	r3, #0
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d18d      	bne.n	800e402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3710      	adds	r7, #16
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e4fc:	e02d      	b.n	800e55a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f000 f8ce 	bl	800e6a0 <I2C_IsAcknowledgeFailed>
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	e02d      	b.n	800e56a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e514:	d021      	beq.n	800e55a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e516:	f7fd fe6f 	bl	800c1f8 <HAL_GetTick>
 800e51a:	4602      	mov	r2, r0
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	68ba      	ldr	r2, [r7, #8]
 800e522:	429a      	cmp	r2, r3
 800e524:	d302      	bcc.n	800e52c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d116      	bne.n	800e55a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2200      	movs	r2, #0
 800e530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2220      	movs	r2, #32
 800e536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e546:	f043 0220 	orr.w	r2, r3, #32
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2200      	movs	r2, #0
 800e552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e556:	2301      	movs	r3, #1
 800e558:	e007      	b.n	800e56a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	695b      	ldr	r3, [r3, #20]
 800e560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e564:	2b80      	cmp	r3, #128	; 0x80
 800e566:	d1ca      	bne.n	800e4fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b084      	sub	sp, #16
 800e576:	af00      	add	r7, sp, #0
 800e578:	60f8      	str	r0, [r7, #12]
 800e57a:	60b9      	str	r1, [r7, #8]
 800e57c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e57e:	e02d      	b.n	800e5dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f000 f88d 	bl	800e6a0 <I2C_IsAcknowledgeFailed>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e58c:	2301      	movs	r3, #1
 800e58e:	e02d      	b.n	800e5ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e596:	d021      	beq.n	800e5dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e598:	f7fd fe2e 	bl	800c1f8 <HAL_GetTick>
 800e59c:	4602      	mov	r2, r0
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	1ad3      	subs	r3, r2, r3
 800e5a2:	68ba      	ldr	r2, [r7, #8]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d302      	bcc.n	800e5ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d116      	bne.n	800e5dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2220      	movs	r2, #32
 800e5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c8:	f043 0220 	orr.w	r2, r3, #32
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	e007      	b.n	800e5ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	695b      	ldr	r3, [r3, #20]
 800e5e2:	f003 0304 	and.w	r3, r3, #4
 800e5e6:	2b04      	cmp	r3, #4
 800e5e8:	d1ca      	bne.n	800e580 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e5ea:	2300      	movs	r3, #0
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3710      	adds	r7, #16
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e600:	e042      	b.n	800e688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	695b      	ldr	r3, [r3, #20]
 800e608:	f003 0310 	and.w	r3, r3, #16
 800e60c:	2b10      	cmp	r3, #16
 800e60e:	d119      	bne.n	800e644 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f06f 0210 	mvn.w	r2, #16
 800e618:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2200      	movs	r2, #0
 800e61e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2220      	movs	r2, #32
 800e624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2200      	movs	r2, #0
 800e63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e640:	2301      	movs	r3, #1
 800e642:	e029      	b.n	800e698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e644:	f7fd fdd8 	bl	800c1f8 <HAL_GetTick>
 800e648:	4602      	mov	r2, r0
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	1ad3      	subs	r3, r2, r3
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	429a      	cmp	r2, r3
 800e652:	d302      	bcc.n	800e65a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d116      	bne.n	800e688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2200      	movs	r2, #0
 800e65e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2220      	movs	r2, #32
 800e664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2200      	movs	r2, #0
 800e66c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e674:	f043 0220 	orr.w	r2, r3, #32
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2200      	movs	r2, #0
 800e680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e684:	2301      	movs	r3, #1
 800e686:	e007      	b.n	800e698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	695b      	ldr	r3, [r3, #20]
 800e68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e692:	2b40      	cmp	r3, #64	; 0x40
 800e694:	d1b5      	bne.n	800e602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e696:	2300      	movs	r3, #0
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	695b      	ldr	r3, [r3, #20]
 800e6ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6b6:	d11b      	bne.n	800e6f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e6c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2220      	movs	r2, #32
 800e6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6dc:	f043 0204 	orr.w	r2, r3, #4
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e000      	b.n	800e6f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	370c      	adds	r7, #12
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bc80      	pop	{r7}
 800e6fa:	4770      	bx	lr

0800e6fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d101      	bne.n	800e70e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	e35c      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d01c      	beq.n	800e750 <HAL_RCC_OscConfig+0x54>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f003 0301 	and.w	r3, r3, #1
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d116      	bne.n	800e750 <HAL_RCC_OscConfig+0x54>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f003 0302 	and.w	r3, r3, #2
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d110      	bne.n	800e750 <HAL_RCC_OscConfig+0x54>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f003 0308 	and.w	r3, r3, #8
 800e736:	2b00      	cmp	r3, #0
 800e738:	d10a      	bne.n	800e750 <HAL_RCC_OscConfig+0x54>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f003 0304 	and.w	r3, r3, #4
 800e742:	2b00      	cmp	r3, #0
 800e744:	d104      	bne.n	800e750 <HAL_RCC_OscConfig+0x54>
 800e746:	f240 1167 	movw	r1, #359	; 0x167
 800e74a:	48a5      	ldr	r0, [pc, #660]	; (800e9e0 <HAL_RCC_OscConfig+0x2e4>)
 800e74c:	f7fd f8fc 	bl	800b948 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f003 0301 	and.w	r3, r3, #1
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f000 809a 	beq.w	800e892 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00e      	beq.n	800e784 <HAL_RCC_OscConfig+0x88>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e76e:	d009      	beq.n	800e784 <HAL_RCC_OscConfig+0x88>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e778:	d004      	beq.n	800e784 <HAL_RCC_OscConfig+0x88>
 800e77a:	f240 116d 	movw	r1, #365	; 0x16d
 800e77e:	4898      	ldr	r0, [pc, #608]	; (800e9e0 <HAL_RCC_OscConfig+0x2e4>)
 800e780:	f7fd f8e2 	bl	800b948 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e784:	4b97      	ldr	r3, [pc, #604]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	f003 030c 	and.w	r3, r3, #12
 800e78c:	2b04      	cmp	r3, #4
 800e78e:	d00c      	beq.n	800e7aa <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800e790:	4b94      	ldr	r3, [pc, #592]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	f003 030c 	and.w	r3, r3, #12
 800e798:	2b08      	cmp	r3, #8
 800e79a:	d112      	bne.n	800e7c2 <HAL_RCC_OscConfig+0xc6>
 800e79c:	4b91      	ldr	r3, [pc, #580]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e7a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7a8:	d10b      	bne.n	800e7c2 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e7aa:	4b8e      	ldr	r3, [pc, #568]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d06c      	beq.n	800e890 <HAL_RCC_OscConfig+0x194>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d168      	bne.n	800e890 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e302      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7ca:	d106      	bne.n	800e7da <HAL_RCC_OscConfig+0xde>
 800e7cc:	4b85      	ldr	r3, [pc, #532]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4a84      	ldr	r2, [pc, #528]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e7d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e7d6:	6013      	str	r3, [r2, #0]
 800e7d8:	e02e      	b.n	800e838 <HAL_RCC_OscConfig+0x13c>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d10c      	bne.n	800e7fc <HAL_RCC_OscConfig+0x100>
 800e7e2:	4b80      	ldr	r3, [pc, #512]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a7f      	ldr	r2, [pc, #508]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e7e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e7ec:	6013      	str	r3, [r2, #0]
 800e7ee:	4b7d      	ldr	r3, [pc, #500]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	4a7c      	ldr	r2, [pc, #496]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e7f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e7f8:	6013      	str	r3, [r2, #0]
 800e7fa:	e01d      	b.n	800e838 <HAL_RCC_OscConfig+0x13c>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e804:	d10c      	bne.n	800e820 <HAL_RCC_OscConfig+0x124>
 800e806:	4b77      	ldr	r3, [pc, #476]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4a76      	ldr	r2, [pc, #472]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e80c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e810:	6013      	str	r3, [r2, #0]
 800e812:	4b74      	ldr	r3, [pc, #464]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4a73      	ldr	r2, [pc, #460]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	e00b      	b.n	800e838 <HAL_RCC_OscConfig+0x13c>
 800e820:	4b70      	ldr	r3, [pc, #448]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a6f      	ldr	r2, [pc, #444]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e82a:	6013      	str	r3, [r2, #0]
 800e82c:	4b6d      	ldr	r3, [pc, #436]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a6c      	ldr	r2, [pc, #432]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d013      	beq.n	800e868 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e840:	f7fd fcda 	bl	800c1f8 <HAL_GetTick>
 800e844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e846:	e008      	b.n	800e85a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e848:	f7fd fcd6 	bl	800c1f8 <HAL_GetTick>
 800e84c:	4602      	mov	r2, r0
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	2b64      	cmp	r3, #100	; 0x64
 800e854:	d901      	bls.n	800e85a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800e856:	2303      	movs	r3, #3
 800e858:	e2b6      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e85a:	4b62      	ldr	r3, [pc, #392]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e862:	2b00      	cmp	r3, #0
 800e864:	d0f0      	beq.n	800e848 <HAL_RCC_OscConfig+0x14c>
 800e866:	e014      	b.n	800e892 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e868:	f7fd fcc6 	bl	800c1f8 <HAL_GetTick>
 800e86c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e86e:	e008      	b.n	800e882 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e870:	f7fd fcc2 	bl	800c1f8 <HAL_GetTick>
 800e874:	4602      	mov	r2, r0
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	1ad3      	subs	r3, r2, r3
 800e87a:	2b64      	cmp	r3, #100	; 0x64
 800e87c:	d901      	bls.n	800e882 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800e87e:	2303      	movs	r3, #3
 800e880:	e2a2      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e882:	4b58      	ldr	r3, [pc, #352]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d1f0      	bne.n	800e870 <HAL_RCC_OscConfig+0x174>
 800e88e:	e000      	b.n	800e892 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f003 0302 	and.w	r3, r3, #2
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d079      	beq.n	800e992 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	691b      	ldr	r3, [r3, #16]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d008      	beq.n	800e8b8 <HAL_RCC_OscConfig+0x1bc>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d004      	beq.n	800e8b8 <HAL_RCC_OscConfig+0x1bc>
 800e8ae:	f240 11a1 	movw	r1, #417	; 0x1a1
 800e8b2:	484b      	ldr	r0, [pc, #300]	; (800e9e0 <HAL_RCC_OscConfig+0x2e4>)
 800e8b4:	f7fd f848 	bl	800b948 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	695b      	ldr	r3, [r3, #20]
 800e8bc:	2b1f      	cmp	r3, #31
 800e8be:	d904      	bls.n	800e8ca <HAL_RCC_OscConfig+0x1ce>
 800e8c0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800e8c4:	4846      	ldr	r0, [pc, #280]	; (800e9e0 <HAL_RCC_OscConfig+0x2e4>)
 800e8c6:	f7fd f83f 	bl	800b948 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e8ca:	4b46      	ldr	r3, [pc, #280]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	f003 030c 	and.w	r3, r3, #12
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00b      	beq.n	800e8ee <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800e8d6:	4b43      	ldr	r3, [pc, #268]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	f003 030c 	and.w	r3, r3, #12
 800e8de:	2b08      	cmp	r3, #8
 800e8e0:	d11c      	bne.n	800e91c <HAL_RCC_OscConfig+0x220>
 800e8e2:	4b40      	ldr	r3, [pc, #256]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d116      	bne.n	800e91c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e8ee:	4b3d      	ldr	r3, [pc, #244]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f003 0302 	and.w	r3, r3, #2
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d005      	beq.n	800e906 <HAL_RCC_OscConfig+0x20a>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	691b      	ldr	r3, [r3, #16]
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d001      	beq.n	800e906 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800e902:	2301      	movs	r3, #1
 800e904:	e260      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e906:	4b37      	ldr	r3, [pc, #220]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	695b      	ldr	r3, [r3, #20]
 800e912:	00db      	lsls	r3, r3, #3
 800e914:	4933      	ldr	r1, [pc, #204]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e916:	4313      	orrs	r3, r2
 800e918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e91a:	e03a      	b.n	800e992 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	691b      	ldr	r3, [r3, #16]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d020      	beq.n	800e966 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e924:	4b30      	ldr	r3, [pc, #192]	; (800e9e8 <HAL_RCC_OscConfig+0x2ec>)
 800e926:	2201      	movs	r2, #1
 800e928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e92a:	f7fd fc65 	bl	800c1f8 <HAL_GetTick>
 800e92e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e930:	e008      	b.n	800e944 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e932:	f7fd fc61 	bl	800c1f8 <HAL_GetTick>
 800e936:	4602      	mov	r2, r0
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	2b02      	cmp	r3, #2
 800e93e:	d901      	bls.n	800e944 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800e940:	2303      	movs	r3, #3
 800e942:	e241      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e944:	4b27      	ldr	r3, [pc, #156]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f003 0302 	and.w	r3, r3, #2
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d0f0      	beq.n	800e932 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e950:	4b24      	ldr	r3, [pc, #144]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	695b      	ldr	r3, [r3, #20]
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	4921      	ldr	r1, [pc, #132]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e960:	4313      	orrs	r3, r2
 800e962:	600b      	str	r3, [r1, #0]
 800e964:	e015      	b.n	800e992 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e966:	4b20      	ldr	r3, [pc, #128]	; (800e9e8 <HAL_RCC_OscConfig+0x2ec>)
 800e968:	2200      	movs	r2, #0
 800e96a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e96c:	f7fd fc44 	bl	800c1f8 <HAL_GetTick>
 800e970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e972:	e008      	b.n	800e986 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e974:	f7fd fc40 	bl	800c1f8 <HAL_GetTick>
 800e978:	4602      	mov	r2, r0
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	1ad3      	subs	r3, r2, r3
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d901      	bls.n	800e986 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800e982:	2303      	movs	r3, #3
 800e984:	e220      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e986:	4b17      	ldr	r3, [pc, #92]	; (800e9e4 <HAL_RCC_OscConfig+0x2e8>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f003 0302 	and.w	r3, r3, #2
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1f0      	bne.n	800e974 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f003 0308 	and.w	r3, r3, #8
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d048      	beq.n	800ea30 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	699b      	ldr	r3, [r3, #24]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d008      	beq.n	800e9b8 <HAL_RCC_OscConfig+0x2bc>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	699b      	ldr	r3, [r3, #24]
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d004      	beq.n	800e9b8 <HAL_RCC_OscConfig+0x2bc>
 800e9ae:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800e9b2:	480b      	ldr	r0, [pc, #44]	; (800e9e0 <HAL_RCC_OscConfig+0x2e4>)
 800e9b4:	f7fc ffc8 	bl	800b948 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	699b      	ldr	r3, [r3, #24]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d021      	beq.n	800ea04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e9c0:	4b0a      	ldr	r3, [pc, #40]	; (800e9ec <HAL_RCC_OscConfig+0x2f0>)
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e9c6:	f7fd fc17 	bl	800c1f8 <HAL_GetTick>
 800e9ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e9cc:	e010      	b.n	800e9f0 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e9ce:	f7fd fc13 	bl	800c1f8 <HAL_GetTick>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	2b02      	cmp	r3, #2
 800e9da:	d909      	bls.n	800e9f0 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800e9dc:	2303      	movs	r3, #3
 800e9de:	e1f3      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
 800e9e0:	0801561c 	.word	0x0801561c
 800e9e4:	40021000 	.word	0x40021000
 800e9e8:	42420000 	.word	0x42420000
 800e9ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e9f0:	4b67      	ldr	r3, [pc, #412]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f4:	f003 0302 	and.w	r3, r3, #2
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d0e8      	beq.n	800e9ce <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800e9fc:	2001      	movs	r0, #1
 800e9fe:	f000 fc11 	bl	800f224 <RCC_Delay>
 800ea02:	e015      	b.n	800ea30 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ea04:	4b63      	ldr	r3, [pc, #396]	; (800eb94 <HAL_RCC_OscConfig+0x498>)
 800ea06:	2200      	movs	r2, #0
 800ea08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ea0a:	f7fd fbf5 	bl	800c1f8 <HAL_GetTick>
 800ea0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ea10:	e008      	b.n	800ea24 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ea12:	f7fd fbf1 	bl	800c1f8 <HAL_GetTick>
 800ea16:	4602      	mov	r2, r0
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d901      	bls.n	800ea24 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800ea20:	2303      	movs	r3, #3
 800ea22:	e1d1      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ea24:	4b5a      	ldr	r3, [pc, #360]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800ea26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea28:	f003 0302 	and.w	r3, r3, #2
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d1f0      	bne.n	800ea12 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f003 0304 	and.w	r3, r3, #4
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f000 80c0 	beq.w	800ebbe <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00c      	beq.n	800ea64 <HAL_RCC_OscConfig+0x368>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	68db      	ldr	r3, [r3, #12]
 800ea4e:	2b01      	cmp	r3, #1
 800ea50:	d008      	beq.n	800ea64 <HAL_RCC_OscConfig+0x368>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	2b05      	cmp	r3, #5
 800ea58:	d004      	beq.n	800ea64 <HAL_RCC_OscConfig+0x368>
 800ea5a:	f240 2111 	movw	r1, #529	; 0x211
 800ea5e:	484e      	ldr	r0, [pc, #312]	; (800eb98 <HAL_RCC_OscConfig+0x49c>)
 800ea60:	f7fc ff72 	bl	800b948 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ea64:	4b4a      	ldr	r3, [pc, #296]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800ea66:	69db      	ldr	r3, [r3, #28]
 800ea68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d10d      	bne.n	800ea8c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ea70:	4b47      	ldr	r3, [pc, #284]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800ea72:	69db      	ldr	r3, [r3, #28]
 800ea74:	4a46      	ldr	r2, [pc, #280]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800ea76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea7a:	61d3      	str	r3, [r2, #28]
 800ea7c:	4b44      	ldr	r3, [pc, #272]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800ea7e:	69db      	ldr	r3, [r3, #28]
 800ea80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea84:	60bb      	str	r3, [r7, #8]
 800ea86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea8c:	4b43      	ldr	r3, [pc, #268]	; (800eb9c <HAL_RCC_OscConfig+0x4a0>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d118      	bne.n	800eaca <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ea98:	4b40      	ldr	r3, [pc, #256]	; (800eb9c <HAL_RCC_OscConfig+0x4a0>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4a3f      	ldr	r2, [pc, #252]	; (800eb9c <HAL_RCC_OscConfig+0x4a0>)
 800ea9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eaa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eaa4:	f7fd fba8 	bl	800c1f8 <HAL_GetTick>
 800eaa8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eaaa:	e008      	b.n	800eabe <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eaac:	f7fd fba4 	bl	800c1f8 <HAL_GetTick>
 800eab0:	4602      	mov	r2, r0
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	1ad3      	subs	r3, r2, r3
 800eab6:	2b64      	cmp	r3, #100	; 0x64
 800eab8:	d901      	bls.n	800eabe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800eaba:	2303      	movs	r3, #3
 800eabc:	e184      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eabe:	4b37      	ldr	r3, [pc, #220]	; (800eb9c <HAL_RCC_OscConfig+0x4a0>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d0f0      	beq.n	800eaac <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d106      	bne.n	800eae0 <HAL_RCC_OscConfig+0x3e4>
 800ead2:	4b2f      	ldr	r3, [pc, #188]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800ead4:	6a1b      	ldr	r3, [r3, #32]
 800ead6:	4a2e      	ldr	r2, [pc, #184]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800ead8:	f043 0301 	orr.w	r3, r3, #1
 800eadc:	6213      	str	r3, [r2, #32]
 800eade:	e02d      	b.n	800eb3c <HAL_RCC_OscConfig+0x440>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d10c      	bne.n	800eb02 <HAL_RCC_OscConfig+0x406>
 800eae8:	4b29      	ldr	r3, [pc, #164]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eaea:	6a1b      	ldr	r3, [r3, #32]
 800eaec:	4a28      	ldr	r2, [pc, #160]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eaee:	f023 0301 	bic.w	r3, r3, #1
 800eaf2:	6213      	str	r3, [r2, #32]
 800eaf4:	4b26      	ldr	r3, [pc, #152]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eaf6:	6a1b      	ldr	r3, [r3, #32]
 800eaf8:	4a25      	ldr	r2, [pc, #148]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eafa:	f023 0304 	bic.w	r3, r3, #4
 800eafe:	6213      	str	r3, [r2, #32]
 800eb00:	e01c      	b.n	800eb3c <HAL_RCC_OscConfig+0x440>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	2b05      	cmp	r3, #5
 800eb08:	d10c      	bne.n	800eb24 <HAL_RCC_OscConfig+0x428>
 800eb0a:	4b21      	ldr	r3, [pc, #132]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eb0c:	6a1b      	ldr	r3, [r3, #32]
 800eb0e:	4a20      	ldr	r2, [pc, #128]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eb10:	f043 0304 	orr.w	r3, r3, #4
 800eb14:	6213      	str	r3, [r2, #32]
 800eb16:	4b1e      	ldr	r3, [pc, #120]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eb18:	6a1b      	ldr	r3, [r3, #32]
 800eb1a:	4a1d      	ldr	r2, [pc, #116]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eb1c:	f043 0301 	orr.w	r3, r3, #1
 800eb20:	6213      	str	r3, [r2, #32]
 800eb22:	e00b      	b.n	800eb3c <HAL_RCC_OscConfig+0x440>
 800eb24:	4b1a      	ldr	r3, [pc, #104]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eb26:	6a1b      	ldr	r3, [r3, #32]
 800eb28:	4a19      	ldr	r2, [pc, #100]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eb2a:	f023 0301 	bic.w	r3, r3, #1
 800eb2e:	6213      	str	r3, [r2, #32]
 800eb30:	4b17      	ldr	r3, [pc, #92]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eb32:	6a1b      	ldr	r3, [r3, #32]
 800eb34:	4a16      	ldr	r2, [pc, #88]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eb36:	f023 0304 	bic.w	r3, r3, #4
 800eb3a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d015      	beq.n	800eb70 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eb44:	f7fd fb58 	bl	800c1f8 <HAL_GetTick>
 800eb48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb4a:	e00a      	b.n	800eb62 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb4c:	f7fd fb54 	bl	800c1f8 <HAL_GetTick>
 800eb50:	4602      	mov	r2, r0
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	1ad3      	subs	r3, r2, r3
 800eb56:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d901      	bls.n	800eb62 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800eb5e:	2303      	movs	r3, #3
 800eb60:	e132      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eb62:	4b0b      	ldr	r3, [pc, #44]	; (800eb90 <HAL_RCC_OscConfig+0x494>)
 800eb64:	6a1b      	ldr	r3, [r3, #32]
 800eb66:	f003 0302 	and.w	r3, r3, #2
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d0ee      	beq.n	800eb4c <HAL_RCC_OscConfig+0x450>
 800eb6e:	e01d      	b.n	800ebac <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eb70:	f7fd fb42 	bl	800c1f8 <HAL_GetTick>
 800eb74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eb76:	e013      	b.n	800eba0 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb78:	f7fd fb3e 	bl	800c1f8 <HAL_GetTick>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	1ad3      	subs	r3, r2, r3
 800eb82:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d90a      	bls.n	800eba0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800eb8a:	2303      	movs	r3, #3
 800eb8c:	e11c      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
 800eb8e:	bf00      	nop
 800eb90:	40021000 	.word	0x40021000
 800eb94:	42420480 	.word	0x42420480
 800eb98:	0801561c 	.word	0x0801561c
 800eb9c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eba0:	4b8b      	ldr	r3, [pc, #556]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800eba2:	6a1b      	ldr	r3, [r3, #32]
 800eba4:	f003 0302 	and.w	r3, r3, #2
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1e5      	bne.n	800eb78 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ebac:	7dfb      	ldrb	r3, [r7, #23]
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d105      	bne.n	800ebbe <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ebb2:	4b87      	ldr	r3, [pc, #540]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800ebb4:	69db      	ldr	r3, [r3, #28]
 800ebb6:	4a86      	ldr	r2, [pc, #536]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800ebb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ebbc:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	69db      	ldr	r3, [r3, #28]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00c      	beq.n	800ebe0 <HAL_RCC_OscConfig+0x4e4>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	69db      	ldr	r3, [r3, #28]
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d008      	beq.n	800ebe0 <HAL_RCC_OscConfig+0x4e4>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	69db      	ldr	r3, [r3, #28]
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	d004      	beq.n	800ebe0 <HAL_RCC_OscConfig+0x4e4>
 800ebd6:	f240 21af 	movw	r1, #687	; 0x2af
 800ebda:	487e      	ldr	r0, [pc, #504]	; (800edd4 <HAL_RCC_OscConfig+0x6d8>)
 800ebdc:	f7fc feb4 	bl	800b948 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	69db      	ldr	r3, [r3, #28]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 80ee 	beq.w	800edc6 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ebea:	4b79      	ldr	r3, [pc, #484]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	f003 030c 	and.w	r3, r3, #12
 800ebf2:	2b08      	cmp	r3, #8
 800ebf4:	f000 80ce 	beq.w	800ed94 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	69db      	ldr	r3, [r3, #28]
 800ebfc:	2b02      	cmp	r3, #2
 800ebfe:	f040 80b2 	bne.w	800ed66 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6a1b      	ldr	r3, [r3, #32]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d009      	beq.n	800ec1e <HAL_RCC_OscConfig+0x522>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
 800ec0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec12:	d004      	beq.n	800ec1e <HAL_RCC_OscConfig+0x522>
 800ec14:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800ec18:	486e      	ldr	r0, [pc, #440]	; (800edd4 <HAL_RCC_OscConfig+0x6d8>)
 800ec1a:	f7fc fe95 	bl	800b948 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d04a      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ec2e:	d045      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ec38:	d040      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ec42:	d03b      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec4c:	d036      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec52:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800ec56:	d031      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ec60:	d02c      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec66:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800ec6a:	d027      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec74:	d022      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800ec7e:	d01d      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec84:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800ec88:	d018      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800ec92:	d013      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ec9c:	d00e      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca2:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800eca6:	d009      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecac:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800ecb0:	d004      	beq.n	800ecbc <HAL_RCC_OscConfig+0x5c0>
 800ecb2:	f240 21b9 	movw	r1, #697	; 0x2b9
 800ecb6:	4847      	ldr	r0, [pc, #284]	; (800edd4 <HAL_RCC_OscConfig+0x6d8>)
 800ecb8:	f7fc fe46 	bl	800b948 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ecbc:	4b46      	ldr	r3, [pc, #280]	; (800edd8 <HAL_RCC_OscConfig+0x6dc>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecc2:	f7fd fa99 	bl	800c1f8 <HAL_GetTick>
 800ecc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ecc8:	e008      	b.n	800ecdc <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ecca:	f7fd fa95 	bl	800c1f8 <HAL_GetTick>
 800ecce:	4602      	mov	r2, r0
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	1ad3      	subs	r3, r2, r3
 800ecd4:	2b02      	cmp	r3, #2
 800ecd6:	d901      	bls.n	800ecdc <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800ecd8:	2303      	movs	r3, #3
 800ecda:	e075      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ecdc:	4b3c      	ldr	r3, [pc, #240]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1f0      	bne.n	800ecca <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6a1b      	ldr	r3, [r3, #32]
 800ecec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecf0:	d116      	bne.n	800ed20 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d009      	beq.n	800ed0e <HAL_RCC_OscConfig+0x612>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	689b      	ldr	r3, [r3, #8]
 800ecfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ed02:	d004      	beq.n	800ed0e <HAL_RCC_OscConfig+0x612>
 800ed04:	f240 21cf 	movw	r1, #719	; 0x2cf
 800ed08:	4832      	ldr	r0, [pc, #200]	; (800edd4 <HAL_RCC_OscConfig+0x6d8>)
 800ed0a:	f7fc fe1d 	bl	800b948 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ed0e:	4b30      	ldr	r3, [pc, #192]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	689b      	ldr	r3, [r3, #8]
 800ed1a:	492d      	ldr	r1, [pc, #180]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ed20:	4b2b      	ldr	r3, [pc, #172]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6a19      	ldr	r1, [r3, #32]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed30:	430b      	orrs	r3, r1
 800ed32:	4927      	ldr	r1, [pc, #156]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800ed34:	4313      	orrs	r3, r2
 800ed36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ed38:	4b27      	ldr	r3, [pc, #156]	; (800edd8 <HAL_RCC_OscConfig+0x6dc>)
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed3e:	f7fd fa5b 	bl	800c1f8 <HAL_GetTick>
 800ed42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ed44:	e008      	b.n	800ed58 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed46:	f7fd fa57 	bl	800c1f8 <HAL_GetTick>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	2b02      	cmp	r3, #2
 800ed52:	d901      	bls.n	800ed58 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800ed54:	2303      	movs	r3, #3
 800ed56:	e037      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ed58:	4b1d      	ldr	r3, [pc, #116]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d0f0      	beq.n	800ed46 <HAL_RCC_OscConfig+0x64a>
 800ed64:	e02f      	b.n	800edc6 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed66:	4b1c      	ldr	r3, [pc, #112]	; (800edd8 <HAL_RCC_OscConfig+0x6dc>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed6c:	f7fd fa44 	bl	800c1f8 <HAL_GetTick>
 800ed70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ed72:	e008      	b.n	800ed86 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed74:	f7fd fa40 	bl	800c1f8 <HAL_GetTick>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	1ad3      	subs	r3, r2, r3
 800ed7e:	2b02      	cmp	r3, #2
 800ed80:	d901      	bls.n	800ed86 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800ed82:	2303      	movs	r3, #3
 800ed84:	e020      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ed86:	4b12      	ldr	r3, [pc, #72]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d1f0      	bne.n	800ed74 <HAL_RCC_OscConfig+0x678>
 800ed92:	e018      	b.n	800edc6 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	69db      	ldr	r3, [r3, #28]
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d101      	bne.n	800eda0 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	e013      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800eda0:	4b0b      	ldr	r3, [pc, #44]	; (800edd0 <HAL_RCC_OscConfig+0x6d4>)
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6a1b      	ldr	r3, [r3, #32]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d106      	bne.n	800edc2 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d001      	beq.n	800edc6 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e000      	b.n	800edc8 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3718      	adds	r7, #24
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	40021000 	.word	0x40021000
 800edd4:	0801561c 	.word	0x0801561c
 800edd8:	42420060 	.word	0x42420060

0800eddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d101      	bne.n	800edf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800edec:	2301      	movs	r3, #1
 800edee:	e176      	b.n	800f0de <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f003 0301 	and.w	r3, r3, #1
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d116      	bne.n	800ee2a <HAL_RCC_ClockConfig+0x4e>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f003 0302 	and.w	r3, r3, #2
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d110      	bne.n	800ee2a <HAL_RCC_ClockConfig+0x4e>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f003 0304 	and.w	r3, r3, #4
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d10a      	bne.n	800ee2a <HAL_RCC_ClockConfig+0x4e>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f003 0308 	and.w	r3, r3, #8
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d104      	bne.n	800ee2a <HAL_RCC_ClockConfig+0x4e>
 800ee20:	f44f 714e 	mov.w	r1, #824	; 0x338
 800ee24:	4874      	ldr	r0, [pc, #464]	; (800eff8 <HAL_RCC_ClockConfig+0x21c>)
 800ee26:	f7fc fd8f 	bl	800b948 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d00a      	beq.n	800ee46 <HAL_RCC_ClockConfig+0x6a>
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d007      	beq.n	800ee46 <HAL_RCC_ClockConfig+0x6a>
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	d004      	beq.n	800ee46 <HAL_RCC_ClockConfig+0x6a>
 800ee3c:	f240 3139 	movw	r1, #825	; 0x339
 800ee40:	486d      	ldr	r0, [pc, #436]	; (800eff8 <HAL_RCC_ClockConfig+0x21c>)
 800ee42:	f7fc fd81 	bl	800b948 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee46:	4b6d      	ldr	r3, [pc, #436]	; (800effc <HAL_RCC_ClockConfig+0x220>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f003 0307 	and.w	r3, r3, #7
 800ee4e:	683a      	ldr	r2, [r7, #0]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d910      	bls.n	800ee76 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee54:	4b69      	ldr	r3, [pc, #420]	; (800effc <HAL_RCC_ClockConfig+0x220>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f023 0207 	bic.w	r2, r3, #7
 800ee5c:	4967      	ldr	r1, [pc, #412]	; (800effc <HAL_RCC_ClockConfig+0x220>)
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	4313      	orrs	r3, r2
 800ee62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee64:	4b65      	ldr	r3, [pc, #404]	; (800effc <HAL_RCC_ClockConfig+0x220>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f003 0307 	and.w	r3, r3, #7
 800ee6c:	683a      	ldr	r2, [r7, #0]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d001      	beq.n	800ee76 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800ee72:	2301      	movs	r3, #1
 800ee74:	e133      	b.n	800f0de <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f003 0302 	and.w	r3, r3, #2
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d049      	beq.n	800ef16 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f003 0304 	and.w	r3, r3, #4
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d005      	beq.n	800ee9a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ee8e:	4b5c      	ldr	r3, [pc, #368]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	4a5b      	ldr	r2, [pc, #364]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800ee94:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ee98:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f003 0308 	and.w	r3, r3, #8
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d005      	beq.n	800eeb2 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800eea6:	4b56      	ldr	r3, [pc, #344]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	4a55      	ldr	r2, [pc, #340]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800eeac:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800eeb0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	689b      	ldr	r3, [r3, #8]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d024      	beq.n	800ef04 <HAL_RCC_ClockConfig+0x128>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	689b      	ldr	r3, [r3, #8]
 800eebe:	2b80      	cmp	r3, #128	; 0x80
 800eec0:	d020      	beq.n	800ef04 <HAL_RCC_ClockConfig+0x128>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	689b      	ldr	r3, [r3, #8]
 800eec6:	2b90      	cmp	r3, #144	; 0x90
 800eec8:	d01c      	beq.n	800ef04 <HAL_RCC_ClockConfig+0x128>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	2ba0      	cmp	r3, #160	; 0xa0
 800eed0:	d018      	beq.n	800ef04 <HAL_RCC_ClockConfig+0x128>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	2bb0      	cmp	r3, #176	; 0xb0
 800eed8:	d014      	beq.n	800ef04 <HAL_RCC_ClockConfig+0x128>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	2bc0      	cmp	r3, #192	; 0xc0
 800eee0:	d010      	beq.n	800ef04 <HAL_RCC_ClockConfig+0x128>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	2bd0      	cmp	r3, #208	; 0xd0
 800eee8:	d00c      	beq.n	800ef04 <HAL_RCC_ClockConfig+0x128>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	2be0      	cmp	r3, #224	; 0xe0
 800eef0:	d008      	beq.n	800ef04 <HAL_RCC_ClockConfig+0x128>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	2bf0      	cmp	r3, #240	; 0xf0
 800eef8:	d004      	beq.n	800ef04 <HAL_RCC_ClockConfig+0x128>
 800eefa:	f240 315f 	movw	r1, #863	; 0x35f
 800eefe:	483e      	ldr	r0, [pc, #248]	; (800eff8 <HAL_RCC_ClockConfig+0x21c>)
 800ef00:	f7fc fd22 	bl	800b948 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ef04:	4b3e      	ldr	r3, [pc, #248]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	493b      	ldr	r1, [pc, #236]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800ef12:	4313      	orrs	r3, r2
 800ef14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f003 0301 	and.w	r3, r3, #1
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d051      	beq.n	800efc6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00c      	beq.n	800ef44 <HAL_RCC_ClockConfig+0x168>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d008      	beq.n	800ef44 <HAL_RCC_ClockConfig+0x168>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	2b02      	cmp	r3, #2
 800ef38:	d004      	beq.n	800ef44 <HAL_RCC_ClockConfig+0x168>
 800ef3a:	f240 3166 	movw	r1, #870	; 0x366
 800ef3e:	482e      	ldr	r0, [pc, #184]	; (800eff8 <HAL_RCC_ClockConfig+0x21c>)
 800ef40:	f7fc fd02 	bl	800b948 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d107      	bne.n	800ef5c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef4c:	4b2c      	ldr	r3, [pc, #176]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d115      	bne.n	800ef84 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	e0c0      	b.n	800f0de <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	2b02      	cmp	r3, #2
 800ef62:	d107      	bne.n	800ef74 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ef64:	4b26      	ldr	r3, [pc, #152]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d109      	bne.n	800ef84 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800ef70:	2301      	movs	r3, #1
 800ef72:	e0b4      	b.n	800f0de <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef74:	4b22      	ldr	r3, [pc, #136]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f003 0302 	and.w	r3, r3, #2
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d101      	bne.n	800ef84 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800ef80:	2301      	movs	r3, #1
 800ef82:	e0ac      	b.n	800f0de <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ef84:	4b1e      	ldr	r3, [pc, #120]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	f023 0203 	bic.w	r2, r3, #3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	491b      	ldr	r1, [pc, #108]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800ef92:	4313      	orrs	r3, r2
 800ef94:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ef96:	f7fd f92f 	bl	800c1f8 <HAL_GetTick>
 800ef9a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef9c:	e00a      	b.n	800efb4 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ef9e:	f7fd f92b 	bl	800c1f8 <HAL_GetTick>
 800efa2:	4602      	mov	r2, r0
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	f241 3288 	movw	r2, #5000	; 0x1388
 800efac:	4293      	cmp	r3, r2
 800efae:	d901      	bls.n	800efb4 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800efb0:	2303      	movs	r3, #3
 800efb2:	e094      	b.n	800f0de <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800efb4:	4b12      	ldr	r3, [pc, #72]	; (800f000 <HAL_RCC_ClockConfig+0x224>)
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	f003 020c 	and.w	r2, r3, #12
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d1eb      	bne.n	800ef9e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800efc6:	4b0d      	ldr	r3, [pc, #52]	; (800effc <HAL_RCC_ClockConfig+0x220>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f003 0307 	and.w	r3, r3, #7
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d217      	bcs.n	800f004 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800efd4:	4b09      	ldr	r3, [pc, #36]	; (800effc <HAL_RCC_ClockConfig+0x220>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f023 0207 	bic.w	r2, r3, #7
 800efdc:	4907      	ldr	r1, [pc, #28]	; (800effc <HAL_RCC_ClockConfig+0x220>)
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	4313      	orrs	r3, r2
 800efe2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800efe4:	4b05      	ldr	r3, [pc, #20]	; (800effc <HAL_RCC_ClockConfig+0x220>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f003 0307 	and.w	r3, r3, #7
 800efec:	683a      	ldr	r2, [r7, #0]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d008      	beq.n	800f004 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e073      	b.n	800f0de <HAL_RCC_ClockConfig+0x302>
 800eff6:	bf00      	nop
 800eff8:	0801561c 	.word	0x0801561c
 800effc:	40022000 	.word	0x40022000
 800f000:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f003 0304 	and.w	r3, r3, #4
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d025      	beq.n	800f05c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d018      	beq.n	800f04a <HAL_RCC_ClockConfig+0x26e>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f020:	d013      	beq.n	800f04a <HAL_RCC_ClockConfig+0x26e>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	68db      	ldr	r3, [r3, #12]
 800f026:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f02a:	d00e      	beq.n	800f04a <HAL_RCC_ClockConfig+0x26e>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f034:	d009      	beq.n	800f04a <HAL_RCC_ClockConfig+0x26e>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f03e:	d004      	beq.n	800f04a <HAL_RCC_ClockConfig+0x26e>
 800f040:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800f044:	4828      	ldr	r0, [pc, #160]	; (800f0e8 <HAL_RCC_ClockConfig+0x30c>)
 800f046:	f7fc fc7f 	bl	800b948 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f04a:	4b28      	ldr	r3, [pc, #160]	; (800f0ec <HAL_RCC_ClockConfig+0x310>)
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	4925      	ldr	r1, [pc, #148]	; (800f0ec <HAL_RCC_ClockConfig+0x310>)
 800f058:	4313      	orrs	r3, r2
 800f05a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f003 0308 	and.w	r3, r3, #8
 800f064:	2b00      	cmp	r3, #0
 800f066:	d026      	beq.n	800f0b6 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	691b      	ldr	r3, [r3, #16]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d018      	beq.n	800f0a2 <HAL_RCC_ClockConfig+0x2c6>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	691b      	ldr	r3, [r3, #16]
 800f074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f078:	d013      	beq.n	800f0a2 <HAL_RCC_ClockConfig+0x2c6>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	691b      	ldr	r3, [r3, #16]
 800f07e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f082:	d00e      	beq.n	800f0a2 <HAL_RCC_ClockConfig+0x2c6>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	691b      	ldr	r3, [r3, #16]
 800f088:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f08c:	d009      	beq.n	800f0a2 <HAL_RCC_ClockConfig+0x2c6>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	691b      	ldr	r3, [r3, #16]
 800f092:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f096:	d004      	beq.n	800f0a2 <HAL_RCC_ClockConfig+0x2c6>
 800f098:	f240 31ab 	movw	r1, #939	; 0x3ab
 800f09c:	4812      	ldr	r0, [pc, #72]	; (800f0e8 <HAL_RCC_ClockConfig+0x30c>)
 800f09e:	f7fc fc53 	bl	800b948 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f0a2:	4b12      	ldr	r3, [pc, #72]	; (800f0ec <HAL_RCC_ClockConfig+0x310>)
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	691b      	ldr	r3, [r3, #16]
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	490e      	ldr	r1, [pc, #56]	; (800f0ec <HAL_RCC_ClockConfig+0x310>)
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f0b6:	f000 f821 	bl	800f0fc <HAL_RCC_GetSysClockFreq>
 800f0ba:	4601      	mov	r1, r0
 800f0bc:	4b0b      	ldr	r3, [pc, #44]	; (800f0ec <HAL_RCC_ClockConfig+0x310>)
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	091b      	lsrs	r3, r3, #4
 800f0c2:	f003 030f 	and.w	r3, r3, #15
 800f0c6:	4a0a      	ldr	r2, [pc, #40]	; (800f0f0 <HAL_RCC_ClockConfig+0x314>)
 800f0c8:	5cd3      	ldrb	r3, [r2, r3]
 800f0ca:	fa21 f303 	lsr.w	r3, r1, r3
 800f0ce:	4a09      	ldr	r2, [pc, #36]	; (800f0f4 <HAL_RCC_ClockConfig+0x318>)
 800f0d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800f0d2:	4b09      	ldr	r3, [pc, #36]	; (800f0f8 <HAL_RCC_ClockConfig+0x31c>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fd f84c 	bl	800c174 <HAL_InitTick>

  return HAL_OK;
 800f0dc:	2300      	movs	r3, #0
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3710      	adds	r7, #16
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	0801561c 	.word	0x0801561c
 800f0ec:	40021000 	.word	0x40021000
 800f0f0:	08018264 	.word	0x08018264
 800f0f4:	2000009c 	.word	0x2000009c
 800f0f8:	200000a0 	.word	0x200000a0

0800f0fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f0fc:	b490      	push	{r4, r7}
 800f0fe:	b08a      	sub	sp, #40	; 0x28
 800f100:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800f102:	4b2a      	ldr	r3, [pc, #168]	; (800f1ac <HAL_RCC_GetSysClockFreq+0xb0>)
 800f104:	1d3c      	adds	r4, r7, #4
 800f106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800f10c:	4b28      	ldr	r3, [pc, #160]	; (800f1b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800f10e:	881b      	ldrh	r3, [r3, #0]
 800f110:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800f112:	2300      	movs	r3, #0
 800f114:	61fb      	str	r3, [r7, #28]
 800f116:	2300      	movs	r3, #0
 800f118:	61bb      	str	r3, [r7, #24]
 800f11a:	2300      	movs	r3, #0
 800f11c:	627b      	str	r3, [r7, #36]	; 0x24
 800f11e:	2300      	movs	r3, #0
 800f120:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800f122:	2300      	movs	r3, #0
 800f124:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800f126:	4b23      	ldr	r3, [pc, #140]	; (800f1b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	f003 030c 	and.w	r3, r3, #12
 800f132:	2b04      	cmp	r3, #4
 800f134:	d002      	beq.n	800f13c <HAL_RCC_GetSysClockFreq+0x40>
 800f136:	2b08      	cmp	r3, #8
 800f138:	d003      	beq.n	800f142 <HAL_RCC_GetSysClockFreq+0x46>
 800f13a:	e02d      	b.n	800f198 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f13c:	4b1e      	ldr	r3, [pc, #120]	; (800f1b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800f13e:	623b      	str	r3, [r7, #32]
      break;
 800f140:	e02d      	b.n	800f19e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800f142:	69fb      	ldr	r3, [r7, #28]
 800f144:	0c9b      	lsrs	r3, r3, #18
 800f146:	f003 030f 	and.w	r3, r3, #15
 800f14a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f14e:	4413      	add	r3, r2
 800f150:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800f154:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d013      	beq.n	800f188 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800f160:	4b14      	ldr	r3, [pc, #80]	; (800f1b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	0c5b      	lsrs	r3, r3, #17
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f16e:	4413      	add	r3, r2
 800f170:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800f174:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	4a0f      	ldr	r2, [pc, #60]	; (800f1b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800f17a:	fb02 f203 	mul.w	r2, r2, r3
 800f17e:	69bb      	ldr	r3, [r7, #24]
 800f180:	fbb2 f3f3 	udiv	r3, r2, r3
 800f184:	627b      	str	r3, [r7, #36]	; 0x24
 800f186:	e004      	b.n	800f192 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	4a0c      	ldr	r2, [pc, #48]	; (800f1bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800f18c:	fb02 f303 	mul.w	r3, r2, r3
 800f190:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800f192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f194:	623b      	str	r3, [r7, #32]
      break;
 800f196:	e002      	b.n	800f19e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800f198:	4b07      	ldr	r3, [pc, #28]	; (800f1b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800f19a:	623b      	str	r3, [r7, #32]
      break;
 800f19c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f19e:	6a3b      	ldr	r3, [r7, #32]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3728      	adds	r7, #40	; 0x28
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bc90      	pop	{r4, r7}
 800f1a8:	4770      	bx	lr
 800f1aa:	bf00      	nop
 800f1ac:	08015654 	.word	0x08015654
 800f1b0:	08015664 	.word	0x08015664
 800f1b4:	40021000 	.word	0x40021000
 800f1b8:	007a1200 	.word	0x007a1200
 800f1bc:	003d0900 	.word	0x003d0900

0800f1c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f1c4:	4b02      	ldr	r3, [pc, #8]	; (800f1d0 <HAL_RCC_GetHCLKFreq+0x10>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bc80      	pop	{r7}
 800f1ce:	4770      	bx	lr
 800f1d0:	2000009c 	.word	0x2000009c

0800f1d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f1d8:	f7ff fff2 	bl	800f1c0 <HAL_RCC_GetHCLKFreq>
 800f1dc:	4601      	mov	r1, r0
 800f1de:	4b05      	ldr	r3, [pc, #20]	; (800f1f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	0a1b      	lsrs	r3, r3, #8
 800f1e4:	f003 0307 	and.w	r3, r3, #7
 800f1e8:	4a03      	ldr	r2, [pc, #12]	; (800f1f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f1ea:	5cd3      	ldrb	r3, [r2, r3]
 800f1ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	40021000 	.word	0x40021000
 800f1f8:	08018274 	.word	0x08018274

0800f1fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f200:	f7ff ffde 	bl	800f1c0 <HAL_RCC_GetHCLKFreq>
 800f204:	4601      	mov	r1, r0
 800f206:	4b05      	ldr	r3, [pc, #20]	; (800f21c <HAL_RCC_GetPCLK2Freq+0x20>)
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	0adb      	lsrs	r3, r3, #11
 800f20c:	f003 0307 	and.w	r3, r3, #7
 800f210:	4a03      	ldr	r2, [pc, #12]	; (800f220 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f212:	5cd3      	ldrb	r3, [r2, r3]
 800f214:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f218:	4618      	mov	r0, r3
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	40021000 	.word	0x40021000
 800f220:	08018274 	.word	0x08018274

0800f224 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800f224:	b480      	push	{r7}
 800f226:	b085      	sub	sp, #20
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800f22c:	4b0a      	ldr	r3, [pc, #40]	; (800f258 <RCC_Delay+0x34>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4a0a      	ldr	r2, [pc, #40]	; (800f25c <RCC_Delay+0x38>)
 800f232:	fba2 2303 	umull	r2, r3, r2, r3
 800f236:	0a5b      	lsrs	r3, r3, #9
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	fb02 f303 	mul.w	r3, r2, r3
 800f23e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800f240:	bf00      	nop
  }
  while (Delay --);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	1e5a      	subs	r2, r3, #1
 800f246:	60fa      	str	r2, [r7, #12]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d1f9      	bne.n	800f240 <RCC_Delay+0x1c>
}
 800f24c:	bf00      	nop
 800f24e:	3714      	adds	r7, #20
 800f250:	46bd      	mov	sp, r7
 800f252:	bc80      	pop	{r7}
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop
 800f258:	2000009c 	.word	0x2000009c
 800f25c:	10624dd3 	.word	0x10624dd3

0800f260 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b086      	sub	sp, #24
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800f268:	2300      	movs	r3, #0
 800f26a:	613b      	str	r3, [r7, #16]
 800f26c:	2300      	movs	r3, #0
 800f26e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f003 0301 	and.w	r3, r3, #1
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d10f      	bne.n	800f29c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f003 0302 	and.w	r3, r3, #2
 800f284:	2b00      	cmp	r3, #0
 800f286:	d109      	bne.n	800f29c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f003 0310 	and.w	r3, r3, #16
 800f290:	2b00      	cmp	r3, #0
 800f292:	d103      	bne.n	800f29c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f294:	216c      	movs	r1, #108	; 0x6c
 800f296:	4873      	ldr	r0, [pc, #460]	; (800f464 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f298:	f7fc fb56 	bl	800b948 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f003 0301 	and.w	r3, r3, #1
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f000 8095 	beq.w	800f3d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d012      	beq.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2ba:	d00d      	beq.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2c4:	d008      	beq.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2ce:	d003      	beq.n	800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f2d0:	2172      	movs	r1, #114	; 0x72
 800f2d2:	4864      	ldr	r0, [pc, #400]	; (800f464 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f2d4:	f7fc fb38 	bl	800b948 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f2dc:	4b62      	ldr	r3, [pc, #392]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f2de:	69db      	ldr	r3, [r3, #28]
 800f2e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d10d      	bne.n	800f304 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f2e8:	4b5f      	ldr	r3, [pc, #380]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f2ea:	69db      	ldr	r3, [r3, #28]
 800f2ec:	4a5e      	ldr	r2, [pc, #376]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f2ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2f2:	61d3      	str	r3, [r2, #28]
 800f2f4:	4b5c      	ldr	r3, [pc, #368]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f2f6:	69db      	ldr	r3, [r3, #28]
 800f2f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f2fc:	60bb      	str	r3, [r7, #8]
 800f2fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f300:	2301      	movs	r3, #1
 800f302:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f304:	4b59      	ldr	r3, [pc, #356]	; (800f46c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d118      	bne.n	800f342 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f310:	4b56      	ldr	r3, [pc, #344]	; (800f46c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a55      	ldr	r2, [pc, #340]	; (800f46c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f31a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f31c:	f7fc ff6c 	bl	800c1f8 <HAL_GetTick>
 800f320:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f322:	e008      	b.n	800f336 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f324:	f7fc ff68 	bl	800c1f8 <HAL_GetTick>
 800f328:	4602      	mov	r2, r0
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	1ad3      	subs	r3, r2, r3
 800f32e:	2b64      	cmp	r3, #100	; 0x64
 800f330:	d901      	bls.n	800f336 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800f332:	2303      	movs	r3, #3
 800f334:	e092      	b.n	800f45c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f336:	4b4d      	ldr	r3, [pc, #308]	; (800f46c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d0f0      	beq.n	800f324 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f342:	4b49      	ldr	r3, [pc, #292]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f344:	6a1b      	ldr	r3, [r3, #32]
 800f346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f34a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d02e      	beq.n	800f3b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f35a:	68fa      	ldr	r2, [r7, #12]
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d027      	beq.n	800f3b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f360:	4b41      	ldr	r3, [pc, #260]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f362:	6a1b      	ldr	r3, [r3, #32]
 800f364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f368:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f36a:	4b41      	ldr	r3, [pc, #260]	; (800f470 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f36c:	2201      	movs	r2, #1
 800f36e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f370:	4b3f      	ldr	r3, [pc, #252]	; (800f470 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f372:	2200      	movs	r2, #0
 800f374:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800f376:	4a3c      	ldr	r2, [pc, #240]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f003 0301 	and.w	r3, r3, #1
 800f382:	2b00      	cmp	r3, #0
 800f384:	d014      	beq.n	800f3b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f386:	f7fc ff37 	bl	800c1f8 <HAL_GetTick>
 800f38a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f38c:	e00a      	b.n	800f3a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f38e:	f7fc ff33 	bl	800c1f8 <HAL_GetTick>
 800f392:	4602      	mov	r2, r0
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	f241 3288 	movw	r2, #5000	; 0x1388
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d901      	bls.n	800f3a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800f3a0:	2303      	movs	r3, #3
 800f3a2:	e05b      	b.n	800f45c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f3a4:	4b30      	ldr	r3, [pc, #192]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f3a6:	6a1b      	ldr	r3, [r3, #32]
 800f3a8:	f003 0302 	and.w	r3, r3, #2
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d0ee      	beq.n	800f38e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f3b0:	4b2d      	ldr	r3, [pc, #180]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f3b2:	6a1b      	ldr	r3, [r3, #32]
 800f3b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	492a      	ldr	r1, [pc, #168]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800f3c2:	7dfb      	ldrb	r3, [r7, #23]
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d105      	bne.n	800f3d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f3c8:	4b27      	ldr	r3, [pc, #156]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f3ca:	69db      	ldr	r3, [r3, #28]
 800f3cc:	4a26      	ldr	r2, [pc, #152]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f3ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f3d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f003 0302 	and.w	r3, r3, #2
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d01f      	beq.n	800f420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	689b      	ldr	r3, [r3, #8]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d012      	beq.n	800f40e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f3f0:	d00d      	beq.n	800f40e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	689b      	ldr	r3, [r3, #8]
 800f3f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3fa:	d008      	beq.n	800f40e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f404:	d003      	beq.n	800f40e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f406:	21b9      	movs	r1, #185	; 0xb9
 800f408:	4816      	ldr	r0, [pc, #88]	; (800f464 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f40a:	f7fc fa9d 	bl	800b948 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f40e:	4b16      	ldr	r3, [pc, #88]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	689b      	ldr	r3, [r3, #8]
 800f41a:	4913      	ldr	r1, [pc, #76]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f41c:	4313      	orrs	r3, r2
 800f41e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f003 0310 	and.w	r3, r3, #16
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d016      	beq.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f434:	d008      	beq.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d004      	beq.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f43e:	f240 1115 	movw	r1, #277	; 0x115
 800f442:	4808      	ldr	r0, [pc, #32]	; (800f464 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f444:	f7fc fa80 	bl	800b948 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f448:	4b07      	ldr	r3, [pc, #28]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	4904      	ldr	r1, [pc, #16]	; (800f468 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f456:	4313      	orrs	r3, r2
 800f458:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800f45a:	2300      	movs	r3, #0
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3718      	adds	r7, #24
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	08015668 	.word	0x08015668
 800f468:	40021000 	.word	0x40021000
 800f46c:	40007000 	.word	0x40007000
 800f470:	42420440 	.word	0x42420440

0800f474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d101      	bne.n	800f486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f482:	2301      	movs	r3, #1
 800f484:	e0fd      	b.n	800f682 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4a80      	ldr	r2, [pc, #512]	; (800f68c <HAL_SPI_Init+0x218>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d009      	beq.n	800f4a4 <HAL_SPI_Init+0x30>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a7e      	ldr	r2, [pc, #504]	; (800f690 <HAL_SPI_Init+0x21c>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d004      	beq.n	800f4a4 <HAL_SPI_Init+0x30>
 800f49a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f49e:	487d      	ldr	r0, [pc, #500]	; (800f694 <HAL_SPI_Init+0x220>)
 800f4a0:	f7fc fa52 	bl	800b948 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d009      	beq.n	800f4c0 <HAL_SPI_Init+0x4c>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f4b4:	d004      	beq.n	800f4c0 <HAL_SPI_Init+0x4c>
 800f4b6:	f240 1159 	movw	r1, #345	; 0x159
 800f4ba:	4876      	ldr	r0, [pc, #472]	; (800f694 <HAL_SPI_Init+0x220>)
 800f4bc:	f7fc fa44 	bl	800b948 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	689b      	ldr	r3, [r3, #8]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00e      	beq.n	800f4e6 <HAL_SPI_Init+0x72>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	689b      	ldr	r3, [r3, #8]
 800f4cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4d0:	d009      	beq.n	800f4e6 <HAL_SPI_Init+0x72>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4da:	d004      	beq.n	800f4e6 <HAL_SPI_Init+0x72>
 800f4dc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800f4e0:	486c      	ldr	r0, [pc, #432]	; (800f694 <HAL_SPI_Init+0x220>)
 800f4e2:	f7fc fa31 	bl	800b948 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4ee:	d008      	beq.n	800f502 <HAL_SPI_Init+0x8e>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d004      	beq.n	800f502 <HAL_SPI_Init+0x8e>
 800f4f8:	f240 115b 	movw	r1, #347	; 0x15b
 800f4fc:	4865      	ldr	r0, [pc, #404]	; (800f694 <HAL_SPI_Init+0x220>)
 800f4fe:	f7fc fa23 	bl	800b948 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	699b      	ldr	r3, [r3, #24]
 800f506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f50a:	d00d      	beq.n	800f528 <HAL_SPI_Init+0xb4>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	699b      	ldr	r3, [r3, #24]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d009      	beq.n	800f528 <HAL_SPI_Init+0xb4>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	699b      	ldr	r3, [r3, #24]
 800f518:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f51c:	d004      	beq.n	800f528 <HAL_SPI_Init+0xb4>
 800f51e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800f522:	485c      	ldr	r0, [pc, #368]	; (800f694 <HAL_SPI_Init+0x220>)
 800f524:	f7fc fa10 	bl	800b948 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	69db      	ldr	r3, [r3, #28]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d020      	beq.n	800f572 <HAL_SPI_Init+0xfe>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	69db      	ldr	r3, [r3, #28]
 800f534:	2b08      	cmp	r3, #8
 800f536:	d01c      	beq.n	800f572 <HAL_SPI_Init+0xfe>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	69db      	ldr	r3, [r3, #28]
 800f53c:	2b10      	cmp	r3, #16
 800f53e:	d018      	beq.n	800f572 <HAL_SPI_Init+0xfe>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	69db      	ldr	r3, [r3, #28]
 800f544:	2b18      	cmp	r3, #24
 800f546:	d014      	beq.n	800f572 <HAL_SPI_Init+0xfe>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	69db      	ldr	r3, [r3, #28]
 800f54c:	2b20      	cmp	r3, #32
 800f54e:	d010      	beq.n	800f572 <HAL_SPI_Init+0xfe>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	69db      	ldr	r3, [r3, #28]
 800f554:	2b28      	cmp	r3, #40	; 0x28
 800f556:	d00c      	beq.n	800f572 <HAL_SPI_Init+0xfe>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	69db      	ldr	r3, [r3, #28]
 800f55c:	2b30      	cmp	r3, #48	; 0x30
 800f55e:	d008      	beq.n	800f572 <HAL_SPI_Init+0xfe>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	69db      	ldr	r3, [r3, #28]
 800f564:	2b38      	cmp	r3, #56	; 0x38
 800f566:	d004      	beq.n	800f572 <HAL_SPI_Init+0xfe>
 800f568:	f240 115d 	movw	r1, #349	; 0x15d
 800f56c:	4849      	ldr	r0, [pc, #292]	; (800f694 <HAL_SPI_Init+0x220>)
 800f56e:	f7fc f9eb 	bl	800b948 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6a1b      	ldr	r3, [r3, #32]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d008      	beq.n	800f58c <HAL_SPI_Init+0x118>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6a1b      	ldr	r3, [r3, #32]
 800f57e:	2b80      	cmp	r3, #128	; 0x80
 800f580:	d004      	beq.n	800f58c <HAL_SPI_Init+0x118>
 800f582:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800f586:	4843      	ldr	r0, [pc, #268]	; (800f694 <HAL_SPI_Init+0x220>)
 800f588:	f7fc f9de 	bl	800b948 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f590:	2b00      	cmp	r3, #0
 800f592:	d004      	beq.n	800f59e <HAL_SPI_Init+0x12a>
 800f594:	f240 1161 	movw	r1, #353	; 0x161
 800f598:	483e      	ldr	r0, [pc, #248]	; (800f694 <HAL_SPI_Init+0x220>)
 800f59a:	f7fc f9d5 	bl	800b948 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d119      	bne.n	800f5da <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	691b      	ldr	r3, [r3, #16]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d008      	beq.n	800f5c0 <HAL_SPI_Init+0x14c>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	691b      	ldr	r3, [r3, #16]
 800f5b2:	2b02      	cmp	r3, #2
 800f5b4:	d004      	beq.n	800f5c0 <HAL_SPI_Init+0x14c>
 800f5b6:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800f5ba:	4836      	ldr	r0, [pc, #216]	; (800f694 <HAL_SPI_Init+0x220>)
 800f5bc:	f7fc f9c4 	bl	800b948 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	695b      	ldr	r3, [r3, #20]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d008      	beq.n	800f5da <HAL_SPI_Init+0x166>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	695b      	ldr	r3, [r3, #20]
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	d004      	beq.n	800f5da <HAL_SPI_Init+0x166>
 800f5d0:	f240 1165 	movw	r1, #357	; 0x165
 800f5d4:	482f      	ldr	r0, [pc, #188]	; (800f694 <HAL_SPI_Init+0x220>)
 800f5d6:	f7fc f9b7 	bl	800b948 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d106      	bne.n	800f5fa <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7fc f9e9 	bl	800b9cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2202      	movs	r2, #2
 800f5fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	681a      	ldr	r2, [r3, #0]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f610:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	685a      	ldr	r2, [r3, #4]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	431a      	orrs	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	431a      	orrs	r2, r3
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	431a      	orrs	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	695b      	ldr	r3, [r3, #20]
 800f62c:	431a      	orrs	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	699b      	ldr	r3, [r3, #24]
 800f632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f636:	431a      	orrs	r2, r3
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	69db      	ldr	r3, [r3, #28]
 800f63c:	431a      	orrs	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6a1b      	ldr	r3, [r3, #32]
 800f642:	ea42 0103 	orr.w	r1, r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	430a      	orrs	r2, r1
 800f650:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	699b      	ldr	r3, [r3, #24]
 800f656:	0c1a      	lsrs	r2, r3, #16
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f002 0204 	and.w	r2, r2, #4
 800f660:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	69da      	ldr	r2, [r3, #28]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f670:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2200      	movs	r2, #0
 800f676:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2201      	movs	r2, #1
 800f67c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3708      	adds	r7, #8
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	40013000 	.word	0x40013000
 800f690:	40003800 	.word	0x40003800
 800f694:	080156b8 	.word	0x080156b8

0800f698 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b088      	sub	sp, #32
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	603b      	str	r3, [r7, #0]
 800f6a4:	4613      	mov	r3, r2
 800f6a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	689b      	ldr	r3, [r3, #8]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d009      	beq.n	800f6c8 <HAL_SPI_Transmit+0x30>
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6bc:	d004      	beq.n	800f6c8 <HAL_SPI_Transmit+0x30>
 800f6be:	f240 310a 	movw	r1, #778	; 0x30a
 800f6c2:	4896      	ldr	r0, [pc, #600]	; (800f91c <HAL_SPI_Transmit+0x284>)
 800f6c4:	f7fc f940 	bl	800b948 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d101      	bne.n	800f6d6 <HAL_SPI_Transmit+0x3e>
 800f6d2:	2302      	movs	r3, #2
 800f6d4:	e11e      	b.n	800f914 <HAL_SPI_Transmit+0x27c>
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2201      	movs	r2, #1
 800f6da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f6de:	f7fc fd8b 	bl	800c1f8 <HAL_GetTick>
 800f6e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f6e4:	88fb      	ldrh	r3, [r7, #6]
 800f6e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d002      	beq.n	800f6fa <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800f6f4:	2302      	movs	r3, #2
 800f6f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f6f8:	e103      	b.n	800f902 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d002      	beq.n	800f706 <HAL_SPI_Transmit+0x6e>
 800f700:	88fb      	ldrh	r3, [r7, #6]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d102      	bne.n	800f70c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800f706:	2301      	movs	r3, #1
 800f708:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f70a:	e0fa      	b.n	800f902 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2203      	movs	r2, #3
 800f710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2200      	movs	r2, #0
 800f718:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	68ba      	ldr	r2, [r7, #8]
 800f71e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	88fa      	ldrh	r2, [r7, #6]
 800f724:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	88fa      	ldrh	r2, [r7, #6]
 800f72a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2200      	movs	r2, #0
 800f730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2200      	movs	r2, #0
 800f736:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2200      	movs	r2, #0
 800f73c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2200      	movs	r2, #0
 800f742:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2200      	movs	r2, #0
 800f748:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f752:	d107      	bne.n	800f764 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f762:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f76e:	2b40      	cmp	r3, #64	; 0x40
 800f770:	d007      	beq.n	800f782 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f780:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	68db      	ldr	r3, [r3, #12]
 800f786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f78a:	d14b      	bne.n	800f824 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d002      	beq.n	800f79a <HAL_SPI_Transmit+0x102>
 800f794:	8afb      	ldrh	r3, [r7, #22]
 800f796:	2b01      	cmp	r3, #1
 800f798:	d13e      	bne.n	800f818 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f79e:	881a      	ldrh	r2, [r3, #0]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7aa:	1c9a      	adds	r2, r3, #2
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f7be:	e02b      	b.n	800f818 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	689b      	ldr	r3, [r3, #8]
 800f7c6:	f003 0302 	and.w	r3, r3, #2
 800f7ca:	2b02      	cmp	r3, #2
 800f7cc:	d112      	bne.n	800f7f4 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7d2:	881a      	ldrh	r2, [r3, #0]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7de:	1c9a      	adds	r2, r3, #2
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	3b01      	subs	r3, #1
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	86da      	strh	r2, [r3, #54]	; 0x36
 800f7f2:	e011      	b.n	800f818 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7f4:	f7fc fd00 	bl	800c1f8 <HAL_GetTick>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	1ad3      	subs	r3, r2, r3
 800f7fe:	683a      	ldr	r2, [r7, #0]
 800f800:	429a      	cmp	r2, r3
 800f802:	d803      	bhi.n	800f80c <HAL_SPI_Transmit+0x174>
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f80a:	d102      	bne.n	800f812 <HAL_SPI_Transmit+0x17a>
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d102      	bne.n	800f818 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800f812:	2303      	movs	r3, #3
 800f814:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f816:	e074      	b.n	800f902 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d1ce      	bne.n	800f7c0 <HAL_SPI_Transmit+0x128>
 800f822:	e04c      	b.n	800f8be <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d002      	beq.n	800f832 <HAL_SPI_Transmit+0x19a>
 800f82c:	8afb      	ldrh	r3, [r7, #22]
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d140      	bne.n	800f8b4 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	330c      	adds	r3, #12
 800f83c:	7812      	ldrb	r2, [r2, #0]
 800f83e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f844:	1c5a      	adds	r2, r3, #1
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f84e:	b29b      	uxth	r3, r3
 800f850:	3b01      	subs	r3, #1
 800f852:	b29a      	uxth	r2, r3
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f858:	e02c      	b.n	800f8b4 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	f003 0302 	and.w	r3, r3, #2
 800f864:	2b02      	cmp	r3, #2
 800f866:	d113      	bne.n	800f890 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	330c      	adds	r3, #12
 800f872:	7812      	ldrb	r2, [r2, #0]
 800f874:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f884:	b29b      	uxth	r3, r3
 800f886:	3b01      	subs	r3, #1
 800f888:	b29a      	uxth	r2, r3
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	86da      	strh	r2, [r3, #54]	; 0x36
 800f88e:	e011      	b.n	800f8b4 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f890:	f7fc fcb2 	bl	800c1f8 <HAL_GetTick>
 800f894:	4602      	mov	r2, r0
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	1ad3      	subs	r3, r2, r3
 800f89a:	683a      	ldr	r2, [r7, #0]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d803      	bhi.n	800f8a8 <HAL_SPI_Transmit+0x210>
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8a6:	d102      	bne.n	800f8ae <HAL_SPI_Transmit+0x216>
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d102      	bne.n	800f8b4 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800f8ae:	2303      	movs	r3, #3
 800f8b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f8b2:	e026      	b.n	800f902 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d1cd      	bne.n	800f85a <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f8be:	69ba      	ldr	r2, [r7, #24]
 800f8c0:	6839      	ldr	r1, [r7, #0]
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	f000 f896 	bl	800f9f4 <SPI_EndRxTxTransaction>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d002      	beq.n	800f8d4 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2220      	movs	r2, #32
 800f8d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d10a      	bne.n	800f8f2 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f8dc:	2300      	movs	r3, #0
 800f8de:	613b      	str	r3, [r7, #16]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	613b      	str	r3, [r7, #16]
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	689b      	ldr	r3, [r3, #8]
 800f8ee:	613b      	str	r3, [r7, #16]
 800f8f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d002      	beq.n	800f900 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	77fb      	strb	r3, [r7, #31]
 800f8fe:	e000      	b.n	800f902 <HAL_SPI_Transmit+0x26a>
  }

error:
 800f900:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2201      	movs	r2, #1
 800f906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2200      	movs	r2, #0
 800f90e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f912:	7ffb      	ldrb	r3, [r7, #31]
}
 800f914:	4618      	mov	r0, r3
 800f916:	3720      	adds	r7, #32
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	080156b8 	.word	0x080156b8

0800f920 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	60b9      	str	r1, [r7, #8]
 800f92a:	603b      	str	r3, [r7, #0]
 800f92c:	4613      	mov	r3, r2
 800f92e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f930:	e04c      	b.n	800f9cc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f938:	d048      	beq.n	800f9cc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f93a:	f7fc fc5d 	bl	800c1f8 <HAL_GetTick>
 800f93e:	4602      	mov	r2, r0
 800f940:	69bb      	ldr	r3, [r7, #24]
 800f942:	1ad3      	subs	r3, r2, r3
 800f944:	683a      	ldr	r2, [r7, #0]
 800f946:	429a      	cmp	r2, r3
 800f948:	d902      	bls.n	800f950 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d13d      	bne.n	800f9cc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	685a      	ldr	r2, [r3, #4]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f95e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f968:	d111      	bne.n	800f98e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	689b      	ldr	r3, [r3, #8]
 800f96e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f972:	d004      	beq.n	800f97e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	689b      	ldr	r3, [r3, #8]
 800f978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f97c:	d107      	bne.n	800f98e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f98c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f996:	d10f      	bne.n	800f9b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f9a6:	601a      	str	r2, [r3, #0]
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f9b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f9c8:	2303      	movs	r3, #3
 800f9ca:	e00f      	b.n	800f9ec <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	689a      	ldr	r2, [r3, #8]
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	4013      	ands	r3, r2
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	bf0c      	ite	eq
 800f9dc:	2301      	moveq	r3, #1
 800f9de:	2300      	movne	r3, #0
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	79fb      	ldrb	r3, [r7, #7]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d1a3      	bne.n	800f932 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3710      	adds	r7, #16
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b086      	sub	sp, #24
 800f9f8:	af02      	add	r7, sp, #8
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	2200      	movs	r2, #0
 800fa08:	2180      	movs	r1, #128	; 0x80
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	f7ff ff88 	bl	800f920 <SPI_WaitFlagStateUntilTimeout>
 800fa10:	4603      	mov	r3, r0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d007      	beq.n	800fa26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa1a:	f043 0220 	orr.w	r2, r3, #32
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800fa22:	2303      	movs	r3, #3
 800fa24:	e000      	b.n	800fa28 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3710      	adds	r7, #16
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d101      	bne.n	800fa42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e06f      	b.n	800fb22 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4a39      	ldr	r2, [pc, #228]	; (800fb2c <HAL_TIM_Base_Init+0xfc>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d013      	beq.n	800fa74 <HAL_TIM_Base_Init+0x44>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa54:	d00e      	beq.n	800fa74 <HAL_TIM_Base_Init+0x44>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4a35      	ldr	r2, [pc, #212]	; (800fb30 <HAL_TIM_Base_Init+0x100>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d009      	beq.n	800fa74 <HAL_TIM_Base_Init+0x44>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a33      	ldr	r2, [pc, #204]	; (800fb34 <HAL_TIM_Base_Init+0x104>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d004      	beq.n	800fa74 <HAL_TIM_Base_Init+0x44>
 800fa6a:	f44f 7189 	mov.w	r1, #274	; 0x112
 800fa6e:	4832      	ldr	r0, [pc, #200]	; (800fb38 <HAL_TIM_Base_Init+0x108>)
 800fa70:	f7fb ff6a 	bl	800b948 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	689b      	ldr	r3, [r3, #8]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d014      	beq.n	800faa6 <HAL_TIM_Base_Init+0x76>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	2b10      	cmp	r3, #16
 800fa82:	d010      	beq.n	800faa6 <HAL_TIM_Base_Init+0x76>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	689b      	ldr	r3, [r3, #8]
 800fa88:	2b20      	cmp	r3, #32
 800fa8a:	d00c      	beq.n	800faa6 <HAL_TIM_Base_Init+0x76>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	2b40      	cmp	r3, #64	; 0x40
 800fa92:	d008      	beq.n	800faa6 <HAL_TIM_Base_Init+0x76>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	689b      	ldr	r3, [r3, #8]
 800fa98:	2b60      	cmp	r3, #96	; 0x60
 800fa9a:	d004      	beq.n	800faa6 <HAL_TIM_Base_Init+0x76>
 800fa9c:	f240 1113 	movw	r1, #275	; 0x113
 800faa0:	4825      	ldr	r0, [pc, #148]	; (800fb38 <HAL_TIM_Base_Init+0x108>)
 800faa2:	f7fb ff51 	bl	800b948 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	691b      	ldr	r3, [r3, #16]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00e      	beq.n	800facc <HAL_TIM_Base_Init+0x9c>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	691b      	ldr	r3, [r3, #16]
 800fab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fab6:	d009      	beq.n	800facc <HAL_TIM_Base_Init+0x9c>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	691b      	ldr	r3, [r3, #16]
 800fabc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fac0:	d004      	beq.n	800facc <HAL_TIM_Base_Init+0x9c>
 800fac2:	f44f 718a 	mov.w	r1, #276	; 0x114
 800fac6:	481c      	ldr	r0, [pc, #112]	; (800fb38 <HAL_TIM_Base_Init+0x108>)
 800fac8:	f7fb ff3e 	bl	800b948 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	699b      	ldr	r3, [r3, #24]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d008      	beq.n	800fae6 <HAL_TIM_Base_Init+0xb6>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	699b      	ldr	r3, [r3, #24]
 800fad8:	2b80      	cmp	r3, #128	; 0x80
 800fada:	d004      	beq.n	800fae6 <HAL_TIM_Base_Init+0xb6>
 800fadc:	f240 1115 	movw	r1, #277	; 0x115
 800fae0:	4815      	ldr	r0, [pc, #84]	; (800fb38 <HAL_TIM_Base_Init+0x108>)
 800fae2:	f7fb ff31 	bl	800b948 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800faec:	b2db      	uxtb	r3, r3
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d106      	bne.n	800fb00 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7fc fa5e 	bl	800bfbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2202      	movs	r2, #2
 800fb04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	3304      	adds	r3, #4
 800fb10:	4619      	mov	r1, r3
 800fb12:	4610      	mov	r0, r2
 800fb14:	f000 fae8 	bl	80100e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb20:	2300      	movs	r3, #0
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3708      	adds	r7, #8
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	40012c00 	.word	0x40012c00
 800fb30:	40000400 	.word	0x40000400
 800fb34:	40000800 	.word	0x40000800
 800fb38:	080156f0 	.word	0x080156f0

0800fb3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4a1a      	ldr	r2, [pc, #104]	; (800fbb4 <HAL_TIM_Base_Start+0x78>)
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d013      	beq.n	800fb76 <HAL_TIM_Base_Start+0x3a>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb56:	d00e      	beq.n	800fb76 <HAL_TIM_Base_Start+0x3a>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4a16      	ldr	r2, [pc, #88]	; (800fbb8 <HAL_TIM_Base_Start+0x7c>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d009      	beq.n	800fb76 <HAL_TIM_Base_Start+0x3a>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	4a15      	ldr	r2, [pc, #84]	; (800fbbc <HAL_TIM_Base_Start+0x80>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d004      	beq.n	800fb76 <HAL_TIM_Base_Start+0x3a>
 800fb6c:	f240 1185 	movw	r1, #389	; 0x185
 800fb70:	4813      	ldr	r0, [pc, #76]	; (800fbc0 <HAL_TIM_Base_Start+0x84>)
 800fb72:	f7fb fee9 	bl	800b948 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2202      	movs	r2, #2
 800fb7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	689b      	ldr	r3, [r3, #8]
 800fb84:	f003 0307 	and.w	r3, r3, #7
 800fb88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2b06      	cmp	r3, #6
 800fb8e:	d007      	beq.n	800fba0 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f042 0201 	orr.w	r2, r2, #1
 800fb9e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2201      	movs	r2, #1
 800fba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800fba8:	2300      	movs	r3, #0
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	40012c00 	.word	0x40012c00
 800fbb8:	40000400 	.word	0x40000400
 800fbbc:	40000800 	.word	0x40000800
 800fbc0:	080156f0 	.word	0x080156f0

0800fbc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d101      	bne.n	800fbdc <HAL_TIM_ConfigClockSource+0x18>
 800fbd8:	2302      	movs	r3, #2
 800fbda:	e279      	b.n	80100d0 <HAL_TIM_ConfigClockSource+0x50c>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2202      	movs	r2, #2
 800fbe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbf4:	d029      	beq.n	800fc4a <HAL_TIM_ConfigClockSource+0x86>
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fbfe:	d024      	beq.n	800fc4a <HAL_TIM_ConfigClockSource+0x86>
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d020      	beq.n	800fc4a <HAL_TIM_ConfigClockSource+0x86>
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b10      	cmp	r3, #16
 800fc0e:	d01c      	beq.n	800fc4a <HAL_TIM_ConfigClockSource+0x86>
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2b20      	cmp	r3, #32
 800fc16:	d018      	beq.n	800fc4a <HAL_TIM_ConfigClockSource+0x86>
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	2b30      	cmp	r3, #48	; 0x30
 800fc1e:	d014      	beq.n	800fc4a <HAL_TIM_ConfigClockSource+0x86>
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b40      	cmp	r3, #64	; 0x40
 800fc26:	d010      	beq.n	800fc4a <HAL_TIM_ConfigClockSource+0x86>
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b50      	cmp	r3, #80	; 0x50
 800fc2e:	d00c      	beq.n	800fc4a <HAL_TIM_ConfigClockSource+0x86>
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	2b60      	cmp	r3, #96	; 0x60
 800fc36:	d008      	beq.n	800fc4a <HAL_TIM_ConfigClockSource+0x86>
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2b70      	cmp	r3, #112	; 0x70
 800fc3e:	d004      	beq.n	800fc4a <HAL_TIM_ConfigClockSource+0x86>
 800fc40:	f241 118a 	movw	r1, #4490	; 0x118a
 800fc44:	4896      	ldr	r0, [pc, #600]	; (800fea0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fc46:	f7fb fe7f 	bl	800b948 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fc58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fc60:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2b40      	cmp	r3, #64	; 0x40
 800fc70:	f000 81b6 	beq.w	800ffe0 <HAL_TIM_ConfigClockSource+0x41c>
 800fc74:	2b40      	cmp	r3, #64	; 0x40
 800fc76:	d80f      	bhi.n	800fc98 <HAL_TIM_ConfigClockSource+0xd4>
 800fc78:	2b10      	cmp	r3, #16
 800fc7a:	f000 81fd 	beq.w	8010078 <HAL_TIM_ConfigClockSource+0x4b4>
 800fc7e:	2b10      	cmp	r3, #16
 800fc80:	d803      	bhi.n	800fc8a <HAL_TIM_ConfigClockSource+0xc6>
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f000 81f8 	beq.w	8010078 <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800fc88:	e219      	b.n	80100be <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800fc8a:	2b20      	cmp	r3, #32
 800fc8c:	f000 81f4 	beq.w	8010078 <HAL_TIM_ConfigClockSource+0x4b4>
 800fc90:	2b30      	cmp	r3, #48	; 0x30
 800fc92:	f000 81f1 	beq.w	8010078 <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 800fc96:	e212      	b.n	80100be <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800fc98:	2b70      	cmp	r3, #112	; 0x70
 800fc9a:	d02e      	beq.n	800fcfa <HAL_TIM_ConfigClockSource+0x136>
 800fc9c:	2b70      	cmp	r3, #112	; 0x70
 800fc9e:	d806      	bhi.n	800fcae <HAL_TIM_ConfigClockSource+0xea>
 800fca0:	2b50      	cmp	r3, #80	; 0x50
 800fca2:	f000 8105 	beq.w	800feb0 <HAL_TIM_ConfigClockSource+0x2ec>
 800fca6:	2b60      	cmp	r3, #96	; 0x60
 800fca8:	f000 814e 	beq.w	800ff48 <HAL_TIM_ConfigClockSource+0x384>
      break;
 800fcac:	e207      	b.n	80100be <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800fcae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcb2:	d004      	beq.n	800fcbe <HAL_TIM_ConfigClockSource+0xfa>
 800fcb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcb8:	f000 808a 	beq.w	800fdd0 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800fcbc:	e1ff      	b.n	80100be <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4a78      	ldr	r2, [pc, #480]	; (800fea4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	f000 81f9 	beq.w	80100bc <HAL_TIM_ConfigClockSource+0x4f8>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcd2:	f000 81f3 	beq.w	80100bc <HAL_TIM_ConfigClockSource+0x4f8>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	4a73      	ldr	r2, [pc, #460]	; (800fea8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	f000 81ed 	beq.w	80100bc <HAL_TIM_ConfigClockSource+0x4f8>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4a71      	ldr	r2, [pc, #452]	; (800feac <HAL_TIM_ConfigClockSource+0x2e8>)
 800fce8:	4293      	cmp	r3, r2
 800fcea:	f000 81e7 	beq.w	80100bc <HAL_TIM_ConfigClockSource+0x4f8>
 800fcee:	f241 1196 	movw	r1, #4502	; 0x1196
 800fcf2:	486b      	ldr	r0, [pc, #428]	; (800fea0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fcf4:	f7fb fe28 	bl	800b948 <assert_failed>
      break;
 800fcf8:	e1e0      	b.n	80100bc <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4a69      	ldr	r2, [pc, #420]	; (800fea4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d013      	beq.n	800fd2c <HAL_TIM_ConfigClockSource+0x168>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd0c:	d00e      	beq.n	800fd2c <HAL_TIM_ConfigClockSource+0x168>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	4a65      	ldr	r2, [pc, #404]	; (800fea8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d009      	beq.n	800fd2c <HAL_TIM_ConfigClockSource+0x168>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	4a63      	ldr	r2, [pc, #396]	; (800feac <HAL_TIM_ConfigClockSource+0x2e8>)
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d004      	beq.n	800fd2c <HAL_TIM_ConfigClockSource+0x168>
 800fd22:	f241 119d 	movw	r1, #4509	; 0x119d
 800fd26:	485e      	ldr	r0, [pc, #376]	; (800fea0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fd28:	f7fb fe0e 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	689b      	ldr	r3, [r3, #8]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d013      	beq.n	800fd5c <HAL_TIM_ConfigClockSource+0x198>
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd3c:	d00e      	beq.n	800fd5c <HAL_TIM_ConfigClockSource+0x198>
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	689b      	ldr	r3, [r3, #8]
 800fd42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd46:	d009      	beq.n	800fd5c <HAL_TIM_ConfigClockSource+0x198>
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fd50:	d004      	beq.n	800fd5c <HAL_TIM_ConfigClockSource+0x198>
 800fd52:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 800fd56:	4852      	ldr	r0, [pc, #328]	; (800fea0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fd58:	f7fb fdf6 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd64:	d014      	beq.n	800fd90 <HAL_TIM_ConfigClockSource+0x1cc>
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	685b      	ldr	r3, [r3, #4]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d010      	beq.n	800fd90 <HAL_TIM_ConfigClockSource+0x1cc>
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d00c      	beq.n	800fd90 <HAL_TIM_ConfigClockSource+0x1cc>
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	2b02      	cmp	r3, #2
 800fd7c:	d008      	beq.n	800fd90 <HAL_TIM_ConfigClockSource+0x1cc>
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	2b0a      	cmp	r3, #10
 800fd84:	d004      	beq.n	800fd90 <HAL_TIM_ConfigClockSource+0x1cc>
 800fd86:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800fd8a:	4845      	ldr	r0, [pc, #276]	; (800fea0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fd8c:	f7fb fddc 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	2b0f      	cmp	r3, #15
 800fd96:	d904      	bls.n	800fda2 <HAL_TIM_ConfigClockSource+0x1de>
 800fd98:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800fd9c:	4840      	ldr	r0, [pc, #256]	; (800fea0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fd9e:	f7fb fdd3 	bl	800b948 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6818      	ldr	r0, [r3, #0]
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	6899      	ldr	r1, [r3, #8]
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	685a      	ldr	r2, [r3, #4]
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	f000 fa72 	bl	801029a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fdc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	68fa      	ldr	r2, [r7, #12]
 800fdcc:	609a      	str	r2, [r3, #8]
      break;
 800fdce:	e176      	b.n	80100be <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4a33      	ldr	r2, [pc, #204]	; (800fea4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d013      	beq.n	800fe02 <HAL_TIM_ConfigClockSource+0x23e>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fde2:	d00e      	beq.n	800fe02 <HAL_TIM_ConfigClockSource+0x23e>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	4a2f      	ldr	r2, [pc, #188]	; (800fea8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d009      	beq.n	800fe02 <HAL_TIM_ConfigClockSource+0x23e>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4a2e      	ldr	r2, [pc, #184]	; (800feac <HAL_TIM_ConfigClockSource+0x2e8>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d004      	beq.n	800fe02 <HAL_TIM_ConfigClockSource+0x23e>
 800fdf8:	f241 11b5 	movw	r1, #4533	; 0x11b5
 800fdfc:	4828      	ldr	r0, [pc, #160]	; (800fea0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fdfe:	f7fb fda3 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	689b      	ldr	r3, [r3, #8]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d013      	beq.n	800fe32 <HAL_TIM_ConfigClockSource+0x26e>
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	689b      	ldr	r3, [r3, #8]
 800fe0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe12:	d00e      	beq.n	800fe32 <HAL_TIM_ConfigClockSource+0x26e>
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	689b      	ldr	r3, [r3, #8]
 800fe18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe1c:	d009      	beq.n	800fe32 <HAL_TIM_ConfigClockSource+0x26e>
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	689b      	ldr	r3, [r3, #8]
 800fe22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fe26:	d004      	beq.n	800fe32 <HAL_TIM_ConfigClockSource+0x26e>
 800fe28:	f241 11b8 	movw	r1, #4536	; 0x11b8
 800fe2c:	481c      	ldr	r0, [pc, #112]	; (800fea0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fe2e:	f7fb fd8b 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe3a:	d014      	beq.n	800fe66 <HAL_TIM_ConfigClockSource+0x2a2>
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d010      	beq.n	800fe66 <HAL_TIM_ConfigClockSource+0x2a2>
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00c      	beq.n	800fe66 <HAL_TIM_ConfigClockSource+0x2a2>
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	2b02      	cmp	r3, #2
 800fe52:	d008      	beq.n	800fe66 <HAL_TIM_ConfigClockSource+0x2a2>
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	2b0a      	cmp	r3, #10
 800fe5a:	d004      	beq.n	800fe66 <HAL_TIM_ConfigClockSource+0x2a2>
 800fe5c:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800fe60:	480f      	ldr	r0, [pc, #60]	; (800fea0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fe62:	f7fb fd71 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	68db      	ldr	r3, [r3, #12]
 800fe6a:	2b0f      	cmp	r3, #15
 800fe6c:	d904      	bls.n	800fe78 <HAL_TIM_ConfigClockSource+0x2b4>
 800fe6e:	f241 11ba 	movw	r1, #4538	; 0x11ba
 800fe72:	480b      	ldr	r0, [pc, #44]	; (800fea0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fe74:	f7fb fd68 	bl	800b948 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6818      	ldr	r0, [r3, #0]
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	6899      	ldr	r1, [r3, #8]
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	685a      	ldr	r2, [r3, #4]
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	f000 fa07 	bl	801029a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	689a      	ldr	r2, [r3, #8]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fe9a:	609a      	str	r2, [r3, #8]
      break;
 800fe9c:	e10f      	b.n	80100be <HAL_TIM_ConfigClockSource+0x4fa>
 800fe9e:	bf00      	nop
 800fea0:	080156f0 	.word	0x080156f0
 800fea4:	40012c00 	.word	0x40012c00
 800fea8:	40000400 	.word	0x40000400
 800feac:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	4a88      	ldr	r2, [pc, #544]	; (80100d8 <HAL_TIM_ConfigClockSource+0x514>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d013      	beq.n	800fee2 <HAL_TIM_ConfigClockSource+0x31e>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fec2:	d00e      	beq.n	800fee2 <HAL_TIM_ConfigClockSource+0x31e>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4a84      	ldr	r2, [pc, #528]	; (80100dc <HAL_TIM_ConfigClockSource+0x518>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d009      	beq.n	800fee2 <HAL_TIM_ConfigClockSource+0x31e>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	4a83      	ldr	r2, [pc, #524]	; (80100e0 <HAL_TIM_ConfigClockSource+0x51c>)
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d004      	beq.n	800fee2 <HAL_TIM_ConfigClockSource+0x31e>
 800fed8:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800fedc:	4881      	ldr	r0, [pc, #516]	; (80100e4 <HAL_TIM_ConfigClockSource+0x520>)
 800fede:	f7fb fd33 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800feea:	d014      	beq.n	800ff16 <HAL_TIM_ConfigClockSource+0x352>
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d010      	beq.n	800ff16 <HAL_TIM_ConfigClockSource+0x352>
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d00c      	beq.n	800ff16 <HAL_TIM_ConfigClockSource+0x352>
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	2b02      	cmp	r3, #2
 800ff02:	d008      	beq.n	800ff16 <HAL_TIM_ConfigClockSource+0x352>
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	2b0a      	cmp	r3, #10
 800ff0a:	d004      	beq.n	800ff16 <HAL_TIM_ConfigClockSource+0x352>
 800ff0c:	f241 11cc 	movw	r1, #4556	; 0x11cc
 800ff10:	4874      	ldr	r0, [pc, #464]	; (80100e4 <HAL_TIM_ConfigClockSource+0x520>)
 800ff12:	f7fb fd19 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	2b0f      	cmp	r3, #15
 800ff1c:	d904      	bls.n	800ff28 <HAL_TIM_ConfigClockSource+0x364>
 800ff1e:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800ff22:	4870      	ldr	r0, [pc, #448]	; (80100e4 <HAL_TIM_ConfigClockSource+0x520>)
 800ff24:	f7fb fd10 	bl	800b948 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6818      	ldr	r0, [r3, #0]
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	6859      	ldr	r1, [r3, #4]
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	461a      	mov	r2, r3
 800ff36:	f000 f939 	bl	80101ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	2150      	movs	r1, #80	; 0x50
 800ff40:	4618      	mov	r0, r3
 800ff42:	f000 f990 	bl	8010266 <TIM_ITRx_SetConfig>
      break;
 800ff46:	e0ba      	b.n	80100be <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	4a62      	ldr	r2, [pc, #392]	; (80100d8 <HAL_TIM_ConfigClockSource+0x514>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d013      	beq.n	800ff7a <HAL_TIM_ConfigClockSource+0x3b6>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff5a:	d00e      	beq.n	800ff7a <HAL_TIM_ConfigClockSource+0x3b6>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4a5e      	ldr	r2, [pc, #376]	; (80100dc <HAL_TIM_ConfigClockSource+0x518>)
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d009      	beq.n	800ff7a <HAL_TIM_ConfigClockSource+0x3b6>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4a5d      	ldr	r2, [pc, #372]	; (80100e0 <HAL_TIM_ConfigClockSource+0x51c>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d004      	beq.n	800ff7a <HAL_TIM_ConfigClockSource+0x3b6>
 800ff70:	f241 11d9 	movw	r1, #4569	; 0x11d9
 800ff74:	485b      	ldr	r0, [pc, #364]	; (80100e4 <HAL_TIM_ConfigClockSource+0x520>)
 800ff76:	f7fb fce7 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff82:	d014      	beq.n	800ffae <HAL_TIM_ConfigClockSource+0x3ea>
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d010      	beq.n	800ffae <HAL_TIM_ConfigClockSource+0x3ea>
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d00c      	beq.n	800ffae <HAL_TIM_ConfigClockSource+0x3ea>
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	2b02      	cmp	r3, #2
 800ff9a:	d008      	beq.n	800ffae <HAL_TIM_ConfigClockSource+0x3ea>
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	2b0a      	cmp	r3, #10
 800ffa2:	d004      	beq.n	800ffae <HAL_TIM_ConfigClockSource+0x3ea>
 800ffa4:	f241 11dc 	movw	r1, #4572	; 0x11dc
 800ffa8:	484e      	ldr	r0, [pc, #312]	; (80100e4 <HAL_TIM_ConfigClockSource+0x520>)
 800ffaa:	f7fb fccd 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	2b0f      	cmp	r3, #15
 800ffb4:	d904      	bls.n	800ffc0 <HAL_TIM_ConfigClockSource+0x3fc>
 800ffb6:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800ffba:	484a      	ldr	r0, [pc, #296]	; (80100e4 <HAL_TIM_ConfigClockSource+0x520>)
 800ffbc:	f7fb fcc4 	bl	800b948 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6818      	ldr	r0, [r3, #0]
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	6859      	ldr	r1, [r3, #4]
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	461a      	mov	r2, r3
 800ffce:	f000 f91b 	bl	8010208 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	2160      	movs	r1, #96	; 0x60
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f000 f944 	bl	8010266 <TIM_ITRx_SetConfig>
      break;
 800ffde:	e06e      	b.n	80100be <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4a3c      	ldr	r2, [pc, #240]	; (80100d8 <HAL_TIM_ConfigClockSource+0x514>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d013      	beq.n	8010012 <HAL_TIM_ConfigClockSource+0x44e>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fff2:	d00e      	beq.n	8010012 <HAL_TIM_ConfigClockSource+0x44e>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4a38      	ldr	r2, [pc, #224]	; (80100dc <HAL_TIM_ConfigClockSource+0x518>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d009      	beq.n	8010012 <HAL_TIM_ConfigClockSource+0x44e>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4a37      	ldr	r2, [pc, #220]	; (80100e0 <HAL_TIM_ConfigClockSource+0x51c>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d004      	beq.n	8010012 <HAL_TIM_ConfigClockSource+0x44e>
 8010008:	f241 11e9 	movw	r1, #4585	; 0x11e9
 801000c:	4835      	ldr	r0, [pc, #212]	; (80100e4 <HAL_TIM_ConfigClockSource+0x520>)
 801000e:	f7fb fc9b 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801001a:	d014      	beq.n	8010046 <HAL_TIM_ConfigClockSource+0x482>
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d010      	beq.n	8010046 <HAL_TIM_ConfigClockSource+0x482>
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00c      	beq.n	8010046 <HAL_TIM_ConfigClockSource+0x482>
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	2b02      	cmp	r3, #2
 8010032:	d008      	beq.n	8010046 <HAL_TIM_ConfigClockSource+0x482>
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	2b0a      	cmp	r3, #10
 801003a:	d004      	beq.n	8010046 <HAL_TIM_ConfigClockSource+0x482>
 801003c:	f241 11ec 	movw	r1, #4588	; 0x11ec
 8010040:	4828      	ldr	r0, [pc, #160]	; (80100e4 <HAL_TIM_ConfigClockSource+0x520>)
 8010042:	f7fb fc81 	bl	800b948 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	68db      	ldr	r3, [r3, #12]
 801004a:	2b0f      	cmp	r3, #15
 801004c:	d904      	bls.n	8010058 <HAL_TIM_ConfigClockSource+0x494>
 801004e:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8010052:	4824      	ldr	r0, [pc, #144]	; (80100e4 <HAL_TIM_ConfigClockSource+0x520>)
 8010054:	f7fb fc78 	bl	800b948 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6818      	ldr	r0, [r3, #0]
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	6859      	ldr	r1, [r3, #4]
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	461a      	mov	r2, r3
 8010066:	f000 f8a1 	bl	80101ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	2140      	movs	r1, #64	; 0x40
 8010070:	4618      	mov	r0, r3
 8010072:	f000 f8f8 	bl	8010266 <TIM_ITRx_SetConfig>
      break;
 8010076:	e022      	b.n	80100be <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4a16      	ldr	r2, [pc, #88]	; (80100d8 <HAL_TIM_ConfigClockSource+0x514>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d013      	beq.n	80100aa <HAL_TIM_ConfigClockSource+0x4e6>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801008a:	d00e      	beq.n	80100aa <HAL_TIM_ConfigClockSource+0x4e6>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a12      	ldr	r2, [pc, #72]	; (80100dc <HAL_TIM_ConfigClockSource+0x518>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d009      	beq.n	80100aa <HAL_TIM_ConfigClockSource+0x4e6>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4a11      	ldr	r2, [pc, #68]	; (80100e0 <HAL_TIM_ConfigClockSource+0x51c>)
 801009c:	4293      	cmp	r3, r2
 801009e:	d004      	beq.n	80100aa <HAL_TIM_ConfigClockSource+0x4e6>
 80100a0:	f241 11fc 	movw	r1, #4604	; 0x11fc
 80100a4:	480f      	ldr	r0, [pc, #60]	; (80100e4 <HAL_TIM_ConfigClockSource+0x520>)
 80100a6:	f7fb fc4f 	bl	800b948 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	4619      	mov	r1, r3
 80100b4:	4610      	mov	r0, r2
 80100b6:	f000 f8d6 	bl	8010266 <TIM_ITRx_SetConfig>
      break;
 80100ba:	e000      	b.n	80100be <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 80100bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2201      	movs	r2, #1
 80100c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100ce:	2300      	movs	r3, #0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3710      	adds	r7, #16
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	40012c00 	.word	0x40012c00
 80100dc:	40000400 	.word	0x40000400
 80100e0:	40000800 	.word	0x40000800
 80100e4:	080156f0 	.word	0x080156f0

080100e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	4a29      	ldr	r2, [pc, #164]	; (80101a0 <TIM_Base_SetConfig+0xb8>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d00b      	beq.n	8010118 <TIM_Base_SetConfig+0x30>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010106:	d007      	beq.n	8010118 <TIM_Base_SetConfig+0x30>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	4a26      	ldr	r2, [pc, #152]	; (80101a4 <TIM_Base_SetConfig+0xbc>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d003      	beq.n	8010118 <TIM_Base_SetConfig+0x30>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4a25      	ldr	r2, [pc, #148]	; (80101a8 <TIM_Base_SetConfig+0xc0>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d108      	bne.n	801012a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801011e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	68fa      	ldr	r2, [r7, #12]
 8010126:	4313      	orrs	r3, r2
 8010128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	4a1c      	ldr	r2, [pc, #112]	; (80101a0 <TIM_Base_SetConfig+0xb8>)
 801012e:	4293      	cmp	r3, r2
 8010130:	d00b      	beq.n	801014a <TIM_Base_SetConfig+0x62>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010138:	d007      	beq.n	801014a <TIM_Base_SetConfig+0x62>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	4a19      	ldr	r2, [pc, #100]	; (80101a4 <TIM_Base_SetConfig+0xbc>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d003      	beq.n	801014a <TIM_Base_SetConfig+0x62>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	4a18      	ldr	r2, [pc, #96]	; (80101a8 <TIM_Base_SetConfig+0xc0>)
 8010146:	4293      	cmp	r3, r2
 8010148:	d108      	bne.n	801015c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	68fa      	ldr	r2, [r7, #12]
 8010158:	4313      	orrs	r3, r2
 801015a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	695b      	ldr	r3, [r3, #20]
 8010166:	4313      	orrs	r3, r2
 8010168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	68fa      	ldr	r2, [r7, #12]
 801016e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	689a      	ldr	r2, [r3, #8]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	4a07      	ldr	r2, [pc, #28]	; (80101a0 <TIM_Base_SetConfig+0xb8>)
 8010184:	4293      	cmp	r3, r2
 8010186:	d103      	bne.n	8010190 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	691a      	ldr	r2, [r3, #16]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2201      	movs	r2, #1
 8010194:	615a      	str	r2, [r3, #20]
}
 8010196:	bf00      	nop
 8010198:	3714      	adds	r7, #20
 801019a:	46bd      	mov	sp, r7
 801019c:	bc80      	pop	{r7}
 801019e:	4770      	bx	lr
 80101a0:	40012c00 	.word	0x40012c00
 80101a4:	40000400 	.word	0x40000400
 80101a8:	40000800 	.word	0x40000800

080101ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b087      	sub	sp, #28
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	60f8      	str	r0, [r7, #12]
 80101b4:	60b9      	str	r1, [r7, #8]
 80101b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6a1b      	ldr	r3, [r3, #32]
 80101bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	6a1b      	ldr	r3, [r3, #32]
 80101c2:	f023 0201 	bic.w	r2, r3, #1
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	699b      	ldr	r3, [r3, #24]
 80101ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80101d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	011b      	lsls	r3, r3, #4
 80101dc:	693a      	ldr	r2, [r7, #16]
 80101de:	4313      	orrs	r3, r2
 80101e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	f023 030a 	bic.w	r3, r3, #10
 80101e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80101ea:	697a      	ldr	r2, [r7, #20]
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	4313      	orrs	r3, r2
 80101f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	693a      	ldr	r2, [r7, #16]
 80101f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	697a      	ldr	r2, [r7, #20]
 80101fc:	621a      	str	r2, [r3, #32]
}
 80101fe:	bf00      	nop
 8010200:	371c      	adds	r7, #28
 8010202:	46bd      	mov	sp, r7
 8010204:	bc80      	pop	{r7}
 8010206:	4770      	bx	lr

08010208 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010208:	b480      	push	{r7}
 801020a:	b087      	sub	sp, #28
 801020c:	af00      	add	r7, sp, #0
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	60b9      	str	r1, [r7, #8]
 8010212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	6a1b      	ldr	r3, [r3, #32]
 8010218:	f023 0210 	bic.w	r2, r3, #16
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	699b      	ldr	r3, [r3, #24]
 8010224:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	6a1b      	ldr	r3, [r3, #32]
 801022a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010232:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	031b      	lsls	r3, r3, #12
 8010238:	697a      	ldr	r2, [r7, #20]
 801023a:	4313      	orrs	r3, r2
 801023c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010244:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	011b      	lsls	r3, r3, #4
 801024a:	693a      	ldr	r2, [r7, #16]
 801024c:	4313      	orrs	r3, r2
 801024e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	697a      	ldr	r2, [r7, #20]
 8010254:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	693a      	ldr	r2, [r7, #16]
 801025a:	621a      	str	r2, [r3, #32]
}
 801025c:	bf00      	nop
 801025e:	371c      	adds	r7, #28
 8010260:	46bd      	mov	sp, r7
 8010262:	bc80      	pop	{r7}
 8010264:	4770      	bx	lr

08010266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010266:	b480      	push	{r7}
 8010268:	b085      	sub	sp, #20
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	689b      	ldr	r3, [r3, #8]
 8010274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801027c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801027e:	683a      	ldr	r2, [r7, #0]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	4313      	orrs	r3, r2
 8010284:	f043 0307 	orr.w	r3, r3, #7
 8010288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	609a      	str	r2, [r3, #8]
}
 8010290:	bf00      	nop
 8010292:	3714      	adds	r7, #20
 8010294:	46bd      	mov	sp, r7
 8010296:	bc80      	pop	{r7}
 8010298:	4770      	bx	lr

0801029a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801029a:	b480      	push	{r7}
 801029c:	b087      	sub	sp, #28
 801029e:	af00      	add	r7, sp, #0
 80102a0:	60f8      	str	r0, [r7, #12]
 80102a2:	60b9      	str	r1, [r7, #8]
 80102a4:	607a      	str	r2, [r7, #4]
 80102a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80102b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	021a      	lsls	r2, r3, #8
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	431a      	orrs	r2, r3
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	4313      	orrs	r3, r2
 80102c2:	697a      	ldr	r2, [r7, #20]
 80102c4:	4313      	orrs	r3, r2
 80102c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	697a      	ldr	r2, [r7, #20]
 80102cc:	609a      	str	r2, [r3, #8]
}
 80102ce:	bf00      	nop
 80102d0:	371c      	adds	r7, #28
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bc80      	pop	{r7}
 80102d6:	4770      	bx	lr

080102d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	4a43      	ldr	r2, [pc, #268]	; (80103f4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d013      	beq.n	8010314 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102f4:	d00e      	beq.n	8010314 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4a3f      	ldr	r2, [pc, #252]	; (80103f8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d009      	beq.n	8010314 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4a3d      	ldr	r2, [pc, #244]	; (80103fc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d004      	beq.n	8010314 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 801030a:	f240 6164 	movw	r1, #1636	; 0x664
 801030e:	483c      	ldr	r0, [pc, #240]	; (8010400 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010310:	f7fb fb1a 	bl	800b948 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d020      	beq.n	801035e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2b10      	cmp	r3, #16
 8010322:	d01c      	beq.n	801035e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2b20      	cmp	r3, #32
 801032a:	d018      	beq.n	801035e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	2b30      	cmp	r3, #48	; 0x30
 8010332:	d014      	beq.n	801035e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b40      	cmp	r3, #64	; 0x40
 801033a:	d010      	beq.n	801035e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2b50      	cmp	r3, #80	; 0x50
 8010342:	d00c      	beq.n	801035e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b60      	cmp	r3, #96	; 0x60
 801034a:	d008      	beq.n	801035e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2b70      	cmp	r3, #112	; 0x70
 8010352:	d004      	beq.n	801035e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010354:	f240 6165 	movw	r1, #1637	; 0x665
 8010358:	4829      	ldr	r0, [pc, #164]	; (8010400 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801035a:	f7fb faf5 	bl	800b948 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	2b80      	cmp	r3, #128	; 0x80
 8010364:	d008      	beq.n	8010378 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	685b      	ldr	r3, [r3, #4]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d004      	beq.n	8010378 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 801036e:	f240 6166 	movw	r1, #1638	; 0x666
 8010372:	4823      	ldr	r0, [pc, #140]	; (8010400 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010374:	f7fb fae8 	bl	800b948 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801037e:	2b01      	cmp	r3, #1
 8010380:	d101      	bne.n	8010386 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010382:	2302      	movs	r3, #2
 8010384:	e032      	b.n	80103ec <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2201      	movs	r2, #1
 801038a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2202      	movs	r2, #2
 8010392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	68fa      	ldr	r2, [r7, #12]
 80103b4:	4313      	orrs	r3, r2
 80103b6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103be:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	68ba      	ldr	r2, [r7, #8]
 80103c6:	4313      	orrs	r3, r2
 80103c8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	68fa      	ldr	r2, [r7, #12]
 80103d0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	68ba      	ldr	r2, [r7, #8]
 80103d8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2201      	movs	r2, #1
 80103de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2200      	movs	r2, #0
 80103e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80103ea:	2300      	movs	r3, #0
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3710      	adds	r7, #16
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	40012c00 	.word	0x40012c00
 80103f8:	40000400 	.word	0x40000400
 80103fc:	40000800 	.word	0x40000800
 8010400:	08015728 	.word	0x08015728

08010404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d101      	bne.n	8010416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010412:	2301      	movs	r3, #1
 8010414:	e092      	b.n	801053c <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	699b      	ldr	r3, [r3, #24]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d02c      	beq.n	8010478 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4a48      	ldr	r2, [pc, #288]	; (8010544 <HAL_UART_Init+0x140>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d00e      	beq.n	8010446 <HAL_UART_Init+0x42>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4a46      	ldr	r2, [pc, #280]	; (8010548 <HAL_UART_Init+0x144>)
 801042e:	4293      	cmp	r3, r2
 8010430:	d009      	beq.n	8010446 <HAL_UART_Init+0x42>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4a45      	ldr	r2, [pc, #276]	; (801054c <HAL_UART_Init+0x148>)
 8010438:	4293      	cmp	r3, r2
 801043a:	d004      	beq.n	8010446 <HAL_UART_Init+0x42>
 801043c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8010440:	4843      	ldr	r0, [pc, #268]	; (8010550 <HAL_UART_Init+0x14c>)
 8010442:	f7fb fa81 	bl	800b948 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	699b      	ldr	r3, [r3, #24]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d028      	beq.n	80104a0 <HAL_UART_Init+0x9c>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	699b      	ldr	r3, [r3, #24]
 8010452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010456:	d023      	beq.n	80104a0 <HAL_UART_Init+0x9c>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	699b      	ldr	r3, [r3, #24]
 801045c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010460:	d01e      	beq.n	80104a0 <HAL_UART_Init+0x9c>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801046a:	d019      	beq.n	80104a0 <HAL_UART_Init+0x9c>
 801046c:	f240 1147 	movw	r1, #327	; 0x147
 8010470:	4837      	ldr	r0, [pc, #220]	; (8010550 <HAL_UART_Init+0x14c>)
 8010472:	f7fb fa69 	bl	800b948 <assert_failed>
 8010476:	e013      	b.n	80104a0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4a31      	ldr	r2, [pc, #196]	; (8010544 <HAL_UART_Init+0x140>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d00e      	beq.n	80104a0 <HAL_UART_Init+0x9c>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	4a30      	ldr	r2, [pc, #192]	; (8010548 <HAL_UART_Init+0x144>)
 8010488:	4293      	cmp	r3, r2
 801048a:	d009      	beq.n	80104a0 <HAL_UART_Init+0x9c>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4a2e      	ldr	r2, [pc, #184]	; (801054c <HAL_UART_Init+0x148>)
 8010492:	4293      	cmp	r3, r2
 8010494:	d004      	beq.n	80104a0 <HAL_UART_Init+0x9c>
 8010496:	f240 114b 	movw	r1, #331	; 0x14b
 801049a:	482d      	ldr	r0, [pc, #180]	; (8010550 <HAL_UART_Init+0x14c>)
 801049c:	f7fb fa54 	bl	800b948 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	689b      	ldr	r3, [r3, #8]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d009      	beq.n	80104bc <HAL_UART_Init+0xb8>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	689b      	ldr	r3, [r3, #8]
 80104ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104b0:	d004      	beq.n	80104bc <HAL_UART_Init+0xb8>
 80104b2:	f240 114d 	movw	r1, #333	; 0x14d
 80104b6:	4826      	ldr	r0, [pc, #152]	; (8010550 <HAL_UART_Init+0x14c>)
 80104b8:	f7fb fa46 	bl	800b948 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d106      	bne.n	80104d6 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2200      	movs	r2, #0
 80104cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f7fb fdb9 	bl	800c048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2224      	movs	r2, #36	; 0x24
 80104da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	68da      	ldr	r2, [r3, #12]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80104ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 f9ba 	bl	8010868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	691a      	ldr	r2, [r3, #16]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010502:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	695a      	ldr	r2, [r3, #20]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010512:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	68da      	ldr	r2, [r3, #12]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010522:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2220      	movs	r2, #32
 801052e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2220      	movs	r2, #32
 8010536:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801053a:	2300      	movs	r3, #0
}
 801053c:	4618      	mov	r0, r3
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	40013800 	.word	0x40013800
 8010548:	40004400 	.word	0x40004400
 801054c:	40004800 	.word	0x40004800
 8010550:	08015764 	.word	0x08015764

08010554 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b088      	sub	sp, #32
 8010558:	af02      	add	r7, sp, #8
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	603b      	str	r3, [r7, #0]
 8010560:	4613      	mov	r3, r2
 8010562:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010564:	2300      	movs	r3, #0
 8010566:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801056e:	b2db      	uxtb	r3, r3
 8010570:	2b20      	cmp	r3, #32
 8010572:	f040 8083 	bne.w	801067c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d002      	beq.n	8010582 <HAL_UART_Transmit+0x2e>
 801057c:	88fb      	ldrh	r3, [r7, #6]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d101      	bne.n	8010586 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010582:	2301      	movs	r3, #1
 8010584:	e07b      	b.n	801067e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801058c:	2b01      	cmp	r3, #1
 801058e:	d101      	bne.n	8010594 <HAL_UART_Transmit+0x40>
 8010590:	2302      	movs	r3, #2
 8010592:	e074      	b.n	801067e <HAL_UART_Transmit+0x12a>
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2201      	movs	r2, #1
 8010598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2200      	movs	r2, #0
 80105a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2221      	movs	r2, #33	; 0x21
 80105a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80105aa:	f7fb fe25 	bl	800c1f8 <HAL_GetTick>
 80105ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	88fa      	ldrh	r2, [r7, #6]
 80105b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	88fa      	ldrh	r2, [r7, #6]
 80105ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80105bc:	e042      	b.n	8010644 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	3b01      	subs	r3, #1
 80105c6:	b29a      	uxth	r2, r3
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	689b      	ldr	r3, [r3, #8]
 80105d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105d4:	d122      	bne.n	801061c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	9300      	str	r3, [sp, #0]
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	2200      	movs	r2, #0
 80105de:	2180      	movs	r1, #128	; 0x80
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f000 f8f6 	bl	80107d2 <UART_WaitOnFlagUntilTimeout>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d001      	beq.n	80105f0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80105ec:	2303      	movs	r3, #3
 80105ee:	e046      	b.n	801067e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	881b      	ldrh	r3, [r3, #0]
 80105f8:	461a      	mov	r2, r3
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010602:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	691b      	ldr	r3, [r3, #16]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d103      	bne.n	8010614 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	3302      	adds	r3, #2
 8010610:	60bb      	str	r3, [r7, #8]
 8010612:	e017      	b.n	8010644 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	3301      	adds	r3, #1
 8010618:	60bb      	str	r3, [r7, #8]
 801061a:	e013      	b.n	8010644 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	9300      	str	r3, [sp, #0]
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	2200      	movs	r2, #0
 8010624:	2180      	movs	r1, #128	; 0x80
 8010626:	68f8      	ldr	r0, [r7, #12]
 8010628:	f000 f8d3 	bl	80107d2 <UART_WaitOnFlagUntilTimeout>
 801062c:	4603      	mov	r3, r0
 801062e:	2b00      	cmp	r3, #0
 8010630:	d001      	beq.n	8010636 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8010632:	2303      	movs	r3, #3
 8010634:	e023      	b.n	801067e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	1c5a      	adds	r2, r3, #1
 801063a:	60ba      	str	r2, [r7, #8]
 801063c:	781a      	ldrb	r2, [r3, #0]
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010648:	b29b      	uxth	r3, r3
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1b7      	bne.n	80105be <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	2200      	movs	r2, #0
 8010656:	2140      	movs	r1, #64	; 0x40
 8010658:	68f8      	ldr	r0, [r7, #12]
 801065a:	f000 f8ba 	bl	80107d2 <UART_WaitOnFlagUntilTimeout>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d001      	beq.n	8010668 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8010664:	2303      	movs	r3, #3
 8010666:	e00a      	b.n	801067e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2220      	movs	r2, #32
 801066c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2200      	movs	r2, #0
 8010674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8010678:	2300      	movs	r3, #0
 801067a:	e000      	b.n	801067e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801067c:	2302      	movs	r3, #2
  }
}
 801067e:	4618      	mov	r0, r3
 8010680:	3718      	adds	r7, #24
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b088      	sub	sp, #32
 801068a:	af02      	add	r7, sp, #8
 801068c:	60f8      	str	r0, [r7, #12]
 801068e:	60b9      	str	r1, [r7, #8]
 8010690:	603b      	str	r3, [r7, #0]
 8010692:	4613      	mov	r3, r2
 8010694:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010696:	2300      	movs	r3, #0
 8010698:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80106a0:	b2db      	uxtb	r3, r3
 80106a2:	2b20      	cmp	r3, #32
 80106a4:	f040 8090 	bne.w	80107c8 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d002      	beq.n	80106b4 <HAL_UART_Receive+0x2e>
 80106ae:	88fb      	ldrh	r3, [r7, #6]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d101      	bne.n	80106b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80106b4:	2301      	movs	r3, #1
 80106b6:	e088      	b.n	80107ca <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d101      	bne.n	80106c6 <HAL_UART_Receive+0x40>
 80106c2:	2302      	movs	r3, #2
 80106c4:	e081      	b.n	80107ca <HAL_UART_Receive+0x144>
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2201      	movs	r2, #1
 80106ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2200      	movs	r2, #0
 80106d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2222      	movs	r2, #34	; 0x22
 80106d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80106dc:	f7fb fd8c 	bl	800c1f8 <HAL_GetTick>
 80106e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	88fa      	ldrh	r2, [r7, #6]
 80106e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	88fa      	ldrh	r2, [r7, #6]
 80106ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80106ee:	e05c      	b.n	80107aa <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	3b01      	subs	r3, #1
 80106f8:	b29a      	uxth	r2, r3
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	689b      	ldr	r3, [r3, #8]
 8010702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010706:	d12b      	bne.n	8010760 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	2200      	movs	r2, #0
 8010710:	2120      	movs	r1, #32
 8010712:	68f8      	ldr	r0, [r7, #12]
 8010714:	f000 f85d 	bl	80107d2 <UART_WaitOnFlagUntilTimeout>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	d001      	beq.n	8010722 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 801071e:	2303      	movs	r3, #3
 8010720:	e053      	b.n	80107ca <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	691b      	ldr	r3, [r3, #16]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d10c      	bne.n	8010748 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	b29b      	uxth	r3, r3
 8010736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801073a:	b29a      	uxth	r2, r3
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	3302      	adds	r3, #2
 8010744:	60bb      	str	r3, [r7, #8]
 8010746:	e030      	b.n	80107aa <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	b29b      	uxth	r3, r3
 8010750:	b2db      	uxtb	r3, r3
 8010752:	b29a      	uxth	r2, r3
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	3301      	adds	r3, #1
 801075c:	60bb      	str	r3, [r7, #8]
 801075e:	e024      	b.n	80107aa <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	9300      	str	r3, [sp, #0]
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	2200      	movs	r2, #0
 8010768:	2120      	movs	r1, #32
 801076a:	68f8      	ldr	r0, [r7, #12]
 801076c:	f000 f831 	bl	80107d2 <UART_WaitOnFlagUntilTimeout>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d001      	beq.n	801077a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8010776:	2303      	movs	r3, #3
 8010778:	e027      	b.n	80107ca <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	691b      	ldr	r3, [r3, #16]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d108      	bne.n	8010794 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	6859      	ldr	r1, [r3, #4]
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	1c5a      	adds	r2, r3, #1
 801078c:	60ba      	str	r2, [r7, #8]
 801078e:	b2ca      	uxtb	r2, r1
 8010790:	701a      	strb	r2, [r3, #0]
 8010792:	e00a      	b.n	80107aa <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	b2da      	uxtb	r2, r3
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	1c59      	adds	r1, r3, #1
 80107a0:	60b9      	str	r1, [r7, #8]
 80107a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80107a6:	b2d2      	uxtb	r2, r2
 80107a8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d19d      	bne.n	80106f0 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2220      	movs	r2, #32
 80107b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2200      	movs	r2, #0
 80107c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80107c4:	2300      	movs	r3, #0
 80107c6:	e000      	b.n	80107ca <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80107c8:	2302      	movs	r3, #2
  }
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3718      	adds	r7, #24
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}

080107d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80107d2:	b580      	push	{r7, lr}
 80107d4:	b084      	sub	sp, #16
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	60f8      	str	r0, [r7, #12]
 80107da:	60b9      	str	r1, [r7, #8]
 80107dc:	603b      	str	r3, [r7, #0]
 80107de:	4613      	mov	r3, r2
 80107e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80107e2:	e02c      	b.n	801083e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80107e4:	69bb      	ldr	r3, [r7, #24]
 80107e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ea:	d028      	beq.n	801083e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d007      	beq.n	8010802 <UART_WaitOnFlagUntilTimeout+0x30>
 80107f2:	f7fb fd01 	bl	800c1f8 <HAL_GetTick>
 80107f6:	4602      	mov	r2, r0
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	1ad3      	subs	r3, r2, r3
 80107fc:	69ba      	ldr	r2, [r7, #24]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d21d      	bcs.n	801083e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	68da      	ldr	r2, [r3, #12]
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010810:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	695a      	ldr	r2, [r3, #20]
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f022 0201 	bic.w	r2, r2, #1
 8010820:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2220      	movs	r2, #32
 8010826:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2220      	movs	r2, #32
 801082e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	2200      	movs	r2, #0
 8010836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801083a:	2303      	movs	r3, #3
 801083c:	e00f      	b.n	801085e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	4013      	ands	r3, r2
 8010848:	68ba      	ldr	r2, [r7, #8]
 801084a:	429a      	cmp	r2, r3
 801084c:	bf0c      	ite	eq
 801084e:	2301      	moveq	r3, #1
 8010850:	2300      	movne	r3, #0
 8010852:	b2db      	uxtb	r3, r3
 8010854:	461a      	mov	r2, r3
 8010856:	79fb      	ldrb	r3, [r7, #7]
 8010858:	429a      	cmp	r2, r3
 801085a:	d0c3      	beq.n	80107e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801085c:	2300      	movs	r3, #0
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
	...

08010868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	4a84      	ldr	r2, [pc, #528]	; (8010a88 <UART_SetConfig+0x220>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d904      	bls.n	8010884 <UART_SetConfig+0x1c>
 801087a:	f640 31fd 	movw	r1, #3069	; 0xbfd
 801087e:	4883      	ldr	r0, [pc, #524]	; (8010a8c <UART_SetConfig+0x224>)
 8010880:	f7fb f862 	bl	800b948 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d009      	beq.n	80108a0 <UART_SetConfig+0x38>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	68db      	ldr	r3, [r3, #12]
 8010890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010894:	d004      	beq.n	80108a0 <UART_SetConfig+0x38>
 8010896:	f640 31fe 	movw	r1, #3070	; 0xbfe
 801089a:	487c      	ldr	r0, [pc, #496]	; (8010a8c <UART_SetConfig+0x224>)
 801089c:	f7fb f854 	bl	800b948 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	691b      	ldr	r3, [r3, #16]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d00e      	beq.n	80108c6 <UART_SetConfig+0x5e>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	691b      	ldr	r3, [r3, #16]
 80108ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108b0:	d009      	beq.n	80108c6 <UART_SetConfig+0x5e>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	691b      	ldr	r3, [r3, #16]
 80108b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80108ba:	d004      	beq.n	80108c6 <UART_SetConfig+0x5e>
 80108bc:	f640 31ff 	movw	r1, #3071	; 0xbff
 80108c0:	4872      	ldr	r0, [pc, #456]	; (8010a8c <UART_SetConfig+0x224>)
 80108c2:	f7fb f841 	bl	800b948 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	695a      	ldr	r2, [r3, #20]
 80108ca:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80108ce:	4013      	ands	r3, r2
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d103      	bne.n	80108dc <UART_SetConfig+0x74>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	695b      	ldr	r3, [r3, #20]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d104      	bne.n	80108e6 <UART_SetConfig+0x7e>
 80108dc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80108e0:	486a      	ldr	r0, [pc, #424]	; (8010a8c <UART_SetConfig+0x224>)
 80108e2:	f7fb f831 	bl	800b948 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	691b      	ldr	r3, [r3, #16]
 80108ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	68da      	ldr	r2, [r3, #12]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	430a      	orrs	r2, r1
 80108fa:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	689a      	ldr	r2, [r3, #8]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	691b      	ldr	r3, [r3, #16]
 8010904:	431a      	orrs	r2, r3
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	695b      	ldr	r3, [r3, #20]
 801090a:	4313      	orrs	r3, r2
 801090c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010918:	f023 030c 	bic.w	r3, r3, #12
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	6812      	ldr	r2, [r2, #0]
 8010920:	68f9      	ldr	r1, [r7, #12]
 8010922:	430b      	orrs	r3, r1
 8010924:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	695b      	ldr	r3, [r3, #20]
 801092c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	699a      	ldr	r2, [r3, #24]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	430a      	orrs	r2, r1
 801093a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a53      	ldr	r2, [pc, #332]	; (8010a90 <UART_SetConfig+0x228>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d14e      	bne.n	80109e4 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8010946:	f7fe fc59 	bl	800f1fc <HAL_RCC_GetPCLK2Freq>
 801094a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801094c:	68ba      	ldr	r2, [r7, #8]
 801094e:	4613      	mov	r3, r2
 8010950:	009b      	lsls	r3, r3, #2
 8010952:	4413      	add	r3, r2
 8010954:	009a      	lsls	r2, r3, #2
 8010956:	441a      	add	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	685b      	ldr	r3, [r3, #4]
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010962:	4a4c      	ldr	r2, [pc, #304]	; (8010a94 <UART_SetConfig+0x22c>)
 8010964:	fba2 2303 	umull	r2, r3, r2, r3
 8010968:	095b      	lsrs	r3, r3, #5
 801096a:	0119      	lsls	r1, r3, #4
 801096c:	68ba      	ldr	r2, [r7, #8]
 801096e:	4613      	mov	r3, r2
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	4413      	add	r3, r2
 8010974:	009a      	lsls	r2, r3, #2
 8010976:	441a      	add	r2, r3
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010982:	4b44      	ldr	r3, [pc, #272]	; (8010a94 <UART_SetConfig+0x22c>)
 8010984:	fba3 0302 	umull	r0, r3, r3, r2
 8010988:	095b      	lsrs	r3, r3, #5
 801098a:	2064      	movs	r0, #100	; 0x64
 801098c:	fb00 f303 	mul.w	r3, r0, r3
 8010990:	1ad3      	subs	r3, r2, r3
 8010992:	011b      	lsls	r3, r3, #4
 8010994:	3332      	adds	r3, #50	; 0x32
 8010996:	4a3f      	ldr	r2, [pc, #252]	; (8010a94 <UART_SetConfig+0x22c>)
 8010998:	fba2 2303 	umull	r2, r3, r2, r3
 801099c:	095b      	lsrs	r3, r3, #5
 801099e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109a2:	4419      	add	r1, r3
 80109a4:	68ba      	ldr	r2, [r7, #8]
 80109a6:	4613      	mov	r3, r2
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	4413      	add	r3, r2
 80109ac:	009a      	lsls	r2, r3, #2
 80109ae:	441a      	add	r2, r3
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	009b      	lsls	r3, r3, #2
 80109b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80109ba:	4b36      	ldr	r3, [pc, #216]	; (8010a94 <UART_SetConfig+0x22c>)
 80109bc:	fba3 0302 	umull	r0, r3, r3, r2
 80109c0:	095b      	lsrs	r3, r3, #5
 80109c2:	2064      	movs	r0, #100	; 0x64
 80109c4:	fb00 f303 	mul.w	r3, r0, r3
 80109c8:	1ad3      	subs	r3, r2, r3
 80109ca:	011b      	lsls	r3, r3, #4
 80109cc:	3332      	adds	r3, #50	; 0x32
 80109ce:	4a31      	ldr	r2, [pc, #196]	; (8010a94 <UART_SetConfig+0x22c>)
 80109d0:	fba2 2303 	umull	r2, r3, r2, r3
 80109d4:	095b      	lsrs	r3, r3, #5
 80109d6:	f003 020f 	and.w	r2, r3, #15
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	440a      	add	r2, r1
 80109e0:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80109e2:	e04d      	b.n	8010a80 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 80109e4:	f7fe fbf6 	bl	800f1d4 <HAL_RCC_GetPCLK1Freq>
 80109e8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80109ea:	68ba      	ldr	r2, [r7, #8]
 80109ec:	4613      	mov	r3, r2
 80109ee:	009b      	lsls	r3, r3, #2
 80109f0:	4413      	add	r3, r2
 80109f2:	009a      	lsls	r2, r3, #2
 80109f4:	441a      	add	r2, r3
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a00:	4a24      	ldr	r2, [pc, #144]	; (8010a94 <UART_SetConfig+0x22c>)
 8010a02:	fba2 2303 	umull	r2, r3, r2, r3
 8010a06:	095b      	lsrs	r3, r3, #5
 8010a08:	0119      	lsls	r1, r3, #4
 8010a0a:	68ba      	ldr	r2, [r7, #8]
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	4413      	add	r3, r2
 8010a12:	009a      	lsls	r2, r3, #2
 8010a14:	441a      	add	r2, r3
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	685b      	ldr	r3, [r3, #4]
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8010a20:	4b1c      	ldr	r3, [pc, #112]	; (8010a94 <UART_SetConfig+0x22c>)
 8010a22:	fba3 0302 	umull	r0, r3, r3, r2
 8010a26:	095b      	lsrs	r3, r3, #5
 8010a28:	2064      	movs	r0, #100	; 0x64
 8010a2a:	fb00 f303 	mul.w	r3, r0, r3
 8010a2e:	1ad3      	subs	r3, r2, r3
 8010a30:	011b      	lsls	r3, r3, #4
 8010a32:	3332      	adds	r3, #50	; 0x32
 8010a34:	4a17      	ldr	r2, [pc, #92]	; (8010a94 <UART_SetConfig+0x22c>)
 8010a36:	fba2 2303 	umull	r2, r3, r2, r3
 8010a3a:	095b      	lsrs	r3, r3, #5
 8010a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a40:	4419      	add	r1, r3
 8010a42:	68ba      	ldr	r2, [r7, #8]
 8010a44:	4613      	mov	r3, r2
 8010a46:	009b      	lsls	r3, r3, #2
 8010a48:	4413      	add	r3, r2
 8010a4a:	009a      	lsls	r2, r3, #2
 8010a4c:	441a      	add	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	009b      	lsls	r3, r3, #2
 8010a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8010a58:	4b0e      	ldr	r3, [pc, #56]	; (8010a94 <UART_SetConfig+0x22c>)
 8010a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8010a5e:	095b      	lsrs	r3, r3, #5
 8010a60:	2064      	movs	r0, #100	; 0x64
 8010a62:	fb00 f303 	mul.w	r3, r0, r3
 8010a66:	1ad3      	subs	r3, r2, r3
 8010a68:	011b      	lsls	r3, r3, #4
 8010a6a:	3332      	adds	r3, #50	; 0x32
 8010a6c:	4a09      	ldr	r2, [pc, #36]	; (8010a94 <UART_SetConfig+0x22c>)
 8010a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a72:	095b      	lsrs	r3, r3, #5
 8010a74:	f003 020f 	and.w	r2, r3, #15
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	440a      	add	r2, r1
 8010a7e:	609a      	str	r2, [r3, #8]
}
 8010a80:	bf00      	nop
 8010a82:	3710      	adds	r7, #16
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	0044aa20 	.word	0x0044aa20
 8010a8c:	08015764 	.word	0x08015764
 8010a90:	40013800 	.word	0x40013800
 8010a94:	51eb851f 	.word	0x51eb851f

08010a98 <_Znaj>:
 8010a98:	f000 b800 	b.w	8010a9c <_Znwj>

08010a9c <_Znwj>:
 8010a9c:	b510      	push	{r4, lr}
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	bf14      	ite	ne
 8010aa2:	4604      	movne	r4, r0
 8010aa4:	2401      	moveq	r4, #1
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f000 fbd8 	bl	801125c <malloc>
 8010aac:	b930      	cbnz	r0, 8010abc <_Znwj+0x20>
 8010aae:	f000 f807 	bl	8010ac0 <_ZSt15get_new_handlerv>
 8010ab2:	b908      	cbnz	r0, 8010ab8 <_Znwj+0x1c>
 8010ab4:	f000 fba0 	bl	80111f8 <abort>
 8010ab8:	4780      	blx	r0
 8010aba:	e7f4      	b.n	8010aa6 <_Znwj+0xa>
 8010abc:	bd10      	pop	{r4, pc}
	...

08010ac0 <_ZSt15get_new_handlerv>:
 8010ac0:	4b02      	ldr	r3, [pc, #8]	; (8010acc <_ZSt15get_new_handlerv+0xc>)
 8010ac2:	6818      	ldr	r0, [r3, #0]
 8010ac4:	f3bf 8f5b 	dmb	ish
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	2000069c 	.word	0x2000069c

08010ad0 <_ZdlPv>:
 8010ad0:	f000 bbcc 	b.w	801126c <free>

08010ad4 <_ZNSaIcEC1Ev>:
 8010ad4:	4770      	bx	lr

08010ad6 <_ZNSaIcED1Ev>:
 8010ad6:	4770      	bx	lr

08010ad8 <_ZSt17__throw_bad_allocv>:
 8010ad8:	b508      	push	{r3, lr}
 8010ada:	f000 fb8d 	bl	80111f8 <abort>

08010ade <_ZSt19__throw_logic_errorPKc>:
 8010ade:	b508      	push	{r3, lr}
 8010ae0:	f000 fb8a 	bl	80111f8 <abort>

08010ae4 <_ZSt24__throw_invalid_argumentPKc>:
 8010ae4:	b508      	push	{r3, lr}
 8010ae6:	f000 fb87 	bl	80111f8 <abort>

08010aea <_ZSt20__throw_length_errorPKc>:
 8010aea:	b508      	push	{r3, lr}
 8010aec:	f000 fb84 	bl	80111f8 <abort>

08010af0 <_ZSt20__throw_out_of_rangePKc>:
 8010af0:	b508      	push	{r3, lr}
 8010af2:	f000 fb81 	bl	80111f8 <abort>

08010af6 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8010af6:	b40f      	push	{r0, r1, r2, r3}
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	f107 0410 	add.w	r4, r7, #16
 8010b02:	f854 5b04 	ldr.w	r5, [r4], #4
 8010b06:	4628      	mov	r0, r5
 8010b08:	f7ef fb22 	bl	8000150 <strlen>
 8010b0c:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8010b10:	f023 0307 	bic.w	r3, r3, #7
 8010b14:	ebad 0d03 	sub.w	sp, sp, r3
 8010b18:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8010b1c:	4623      	mov	r3, r4
 8010b1e:	462a      	mov	r2, r5
 8010b20:	4668      	mov	r0, sp
 8010b22:	607c      	str	r4, [r7, #4]
 8010b24:	f000 fb02 	bl	801112c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8010b28:	f000 fb66 	bl	80111f8 <abort>

08010b2c <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8010b2c:	b10a      	cbz	r2, 8010b32 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8010b2e:	f000 bbb3 	b.w	8011298 <memcmp>
 8010b32:	4610      	mov	r0, r2
 8010b34:	4770      	bx	lr

08010b36 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8010b36:	b10a      	cbz	r2, 8010b3c <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8010b38:	f000 bbbd 	b.w	80112b6 <memcpy>
 8010b3c:	4770      	bx	lr

08010b3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8010b3e:	6001      	str	r1, [r0, #0]
 8010b40:	4770      	bx	lr

08010b42 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8010b42:	6800      	ldr	r0, [r0, #0]
 8010b44:	4770      	bx	lr

08010b46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8010b46:	3008      	adds	r0, #8
 8010b48:	4770      	bx	lr

08010b4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8010b4a:	6081      	str	r1, [r0, #8]
 8010b4c:	4770      	bx	lr

08010b4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8010b4e:	2200      	movs	r2, #0
 8010b50:	6803      	ldr	r3, [r0, #0]
 8010b52:	6041      	str	r1, [r0, #4]
 8010b54:	545a      	strb	r2, [r3, r1]
 8010b56:	4770      	bx	lr

08010b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8010b58:	b508      	push	{r3, lr}
 8010b5a:	680b      	ldr	r3, [r1, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	da02      	bge.n	8010b66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8010b60:	4809      	ldr	r0, [pc, #36]	; (8010b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8010b62:	f7ff ffc2 	bl	8010aea <_ZSt20__throw_length_errorPKc>
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d908      	bls.n	8010b7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8010b6a:	0052      	lsls	r2, r2, #1
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	d205      	bcs.n	8010b7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8010b70:	2a00      	cmp	r2, #0
 8010b72:	bfb6      	itet	lt
 8010b74:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8010b78:	600a      	strge	r2, [r1, #0]
 8010b7a:	600b      	strlt	r3, [r1, #0]
 8010b7c:	6808      	ldr	r0, [r1, #0]
 8010b7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010b82:	3001      	adds	r0, #1
 8010b84:	f7ff bf8a 	b.w	8010a9c <_Znwj>
 8010b88:	08018321 	.word	0x08018321

08010b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	f853 0b08 	ldr.w	r0, [r3], #8
 8010b92:	4298      	cmp	r0, r3
 8010b94:	d001      	beq.n	8010b9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8010b96:	f7ff bf9b 	b.w	8010ad0 <_ZdlPv>
 8010b9a:	4770      	bx	lr

08010b9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8010b9c:	b510      	push	{r4, lr}
 8010b9e:	6843      	ldr	r3, [r0, #4]
 8010ba0:	4614      	mov	r4, r2
 8010ba2:	4299      	cmp	r1, r3
 8010ba4:	d904      	bls.n	8010bb0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 8010ba6:	460a      	mov	r2, r1
 8010ba8:	4802      	ldr	r0, [pc, #8]	; (8010bb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8010baa:	4621      	mov	r1, r4
 8010bac:	f7ff ffa3 	bl	8010af6 <_ZSt24__throw_out_of_range_fmtPKcz>
 8010bb0:	4608      	mov	r0, r1
 8010bb2:	bd10      	pop	{r4, pc}
 8010bb4:	0801827c 	.word	0x0801827c

08010bb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8010bb8:	b508      	push	{r3, lr}
 8010bba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8010bbe:	6840      	ldr	r0, [r0, #4]
 8010bc0:	3901      	subs	r1, #1
 8010bc2:	1a09      	subs	r1, r1, r0
 8010bc4:	4291      	cmp	r1, r2
 8010bc6:	d202      	bcs.n	8010bce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7ff ff8e 	bl	8010aea <_ZSt20__throw_length_errorPKc>
 8010bce:	bd08      	pop	{r3, pc}

08010bd0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8010bd0:	6803      	ldr	r3, [r0, #0]
 8010bd2:	428b      	cmp	r3, r1
 8010bd4:	d806      	bhi.n	8010be4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8010bd6:	6840      	ldr	r0, [r0, #4]
 8010bd8:	4418      	add	r0, r3
 8010bda:	4281      	cmp	r1, r0
 8010bdc:	bf94      	ite	ls
 8010bde:	2000      	movls	r0, #0
 8010be0:	2001      	movhi	r0, #1
 8010be2:	4770      	bx	lr
 8010be4:	2001      	movs	r0, #1
 8010be6:	4770      	bx	lr

08010be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8010be8:	2a01      	cmp	r2, #1
 8010bea:	b510      	push	{r4, lr}
 8010bec:	d102      	bne.n	8010bf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8010bee:	780a      	ldrb	r2, [r1, #0]
 8010bf0:	7002      	strb	r2, [r0, #0]
 8010bf2:	bd10      	pop	{r4, pc}
 8010bf4:	f7ff ff9f 	bl	8010b36 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8010bf8:	e7fb      	b.n	8010bf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08010bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8010bfa:	2a01      	cmp	r2, #1
 8010bfc:	b430      	push	{r4, r5}
 8010bfe:	d103      	bne.n	8010c08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8010c00:	780b      	ldrb	r3, [r1, #0]
 8010c02:	7003      	strb	r3, [r0, #0]
 8010c04:	bc30      	pop	{r4, r5}
 8010c06:	4770      	bx	lr
 8010c08:	2a00      	cmp	r2, #0
 8010c0a:	d0fb      	beq.n	8010c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8010c0c:	bc30      	pop	{r4, r5}
 8010c0e:	f000 bb5d 	b.w	80112cc <memmove>

08010c12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8010c12:	b508      	push	{r3, lr}
 8010c14:	1a52      	subs	r2, r2, r1
 8010c16:	f7ff ffe7 	bl	8010be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010c1a:	bd08      	pop	{r3, pc}

08010c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8010c1c:	b508      	push	{r3, lr}
 8010c1e:	1a52      	subs	r2, r2, r1
 8010c20:	f7ff ffe2 	bl	8010be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010c24:	bd08      	pop	{r3, pc}

08010c26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8010c26:	4288      	cmp	r0, r1
 8010c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	460e      	mov	r6, r1
 8010c2e:	d020      	beq.n	8010c72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8010c30:	6802      	ldr	r2, [r0, #0]
 8010c32:	f100 0308 	add.w	r3, r0, #8
 8010c36:	429a      	cmp	r2, r3
 8010c38:	bf08      	it	eq
 8010c3a:	220f      	moveq	r2, #15
 8010c3c:	684d      	ldr	r5, [r1, #4]
 8010c3e:	bf18      	it	ne
 8010c40:	6882      	ldrne	r2, [r0, #8]
 8010c42:	42aa      	cmp	r2, r5
 8010c44:	d20b      	bcs.n	8010c5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 8010c46:	a902      	add	r1, sp, #8
 8010c48:	f841 5d04 	str.w	r5, [r1, #-4]!
 8010c4c:	f7ff ff84 	bl	8010b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010c50:	4607      	mov	r7, r0
 8010c52:	4620      	mov	r0, r4
 8010c54:	f7ff ff9a 	bl	8010b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010c58:	9b01      	ldr	r3, [sp, #4]
 8010c5a:	6027      	str	r7, [r4, #0]
 8010c5c:	60a3      	str	r3, [r4, #8]
 8010c5e:	b125      	cbz	r5, 8010c6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8010c60:	462a      	mov	r2, r5
 8010c62:	6831      	ldr	r1, [r6, #0]
 8010c64:	6820      	ldr	r0, [r4, #0]
 8010c66:	f7ff ffbf 	bl	8010be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	6823      	ldr	r3, [r4, #0]
 8010c6e:	6065      	str	r5, [r4, #4]
 8010c70:	555a      	strb	r2, [r3, r5]
 8010c72:	b003      	add	sp, #12
 8010c74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8010c76:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c7a:	4616      	mov	r6, r2
 8010c7c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8010c80:	6842      	ldr	r2, [r0, #4]
 8010c82:	469a      	mov	sl, r3
 8010c84:	eba8 0306 	sub.w	r3, r8, r6
 8010c88:	1a57      	subs	r7, r2, r1
 8010c8a:	4413      	add	r3, r2
 8010c8c:	6802      	ldr	r2, [r0, #0]
 8010c8e:	9301      	str	r3, [sp, #4]
 8010c90:	f100 0308 	add.w	r3, r0, #8
 8010c94:	429a      	cmp	r2, r3
 8010c96:	460d      	mov	r5, r1
 8010c98:	bf14      	ite	ne
 8010c9a:	6882      	ldrne	r2, [r0, #8]
 8010c9c:	220f      	moveq	r2, #15
 8010c9e:	a901      	add	r1, sp, #4
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	f7ff ff59 	bl	8010b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010ca6:	1bbf      	subs	r7, r7, r6
 8010ca8:	4681      	mov	r9, r0
 8010caa:	b11d      	cbz	r5, 8010cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8010cac:	462a      	mov	r2, r5
 8010cae:	6821      	ldr	r1, [r4, #0]
 8010cb0:	f7ff ff9a 	bl	8010be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010cb4:	f1ba 0f00 	cmp.w	sl, #0
 8010cb8:	d008      	beq.n	8010ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8010cba:	f1b8 0f00 	cmp.w	r8, #0
 8010cbe:	d005      	beq.n	8010ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8010cc0:	4642      	mov	r2, r8
 8010cc2:	4651      	mov	r1, sl
 8010cc4:	eb09 0005 	add.w	r0, r9, r5
 8010cc8:	f7ff ff8e 	bl	8010be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010ccc:	b147      	cbz	r7, 8010ce0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8010cce:	6821      	ldr	r1, [r4, #0]
 8010cd0:	442e      	add	r6, r5
 8010cd2:	eb05 0008 	add.w	r0, r5, r8
 8010cd6:	463a      	mov	r2, r7
 8010cd8:	4431      	add	r1, r6
 8010cda:	4448      	add	r0, r9
 8010cdc:	f7ff ff84 	bl	8010be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010ce0:	4620      	mov	r0, r4
 8010ce2:	f7ff ff53 	bl	8010b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010ce6:	9b01      	ldr	r3, [sp, #4]
 8010ce8:	f8c4 9000 	str.w	r9, [r4]
 8010cec:	60a3      	str	r3, [r4, #8]
 8010cee:	b002      	add	sp, #8
 8010cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8010cf4:	f100 0208 	add.w	r2, r0, #8
 8010cf8:	6002      	str	r2, [r0, #0]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	6042      	str	r2, [r0, #4]
 8010cfe:	7202      	strb	r2, [r0, #8]
 8010d00:	4770      	bx	lr

08010d02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8010d02:	b570      	push	{r4, r5, r6, lr}
 8010d04:	4604      	mov	r4, r0
 8010d06:	460e      	mov	r6, r1
 8010d08:	3008      	adds	r0, #8
 8010d0a:	6020      	str	r0, [r4, #0]
 8010d0c:	f856 3b08 	ldr.w	r3, [r6], #8
 8010d10:	460d      	mov	r5, r1
 8010d12:	429e      	cmp	r6, r3
 8010d14:	d10b      	bne.n	8010d2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8010d16:	2210      	movs	r2, #16
 8010d18:	4631      	mov	r1, r6
 8010d1a:	f7ff ff0c 	bl	8010b36 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8010d1e:	686b      	ldr	r3, [r5, #4]
 8010d20:	4620      	mov	r0, r4
 8010d22:	6063      	str	r3, [r4, #4]
 8010d24:	2300      	movs	r3, #0
 8010d26:	602e      	str	r6, [r5, #0]
 8010d28:	606b      	str	r3, [r5, #4]
 8010d2a:	722b      	strb	r3, [r5, #8]
 8010d2c:	bd70      	pop	{r4, r5, r6, pc}
 8010d2e:	6023      	str	r3, [r4, #0]
 8010d30:	688b      	ldr	r3, [r1, #8]
 8010d32:	60a3      	str	r3, [r4, #8]
 8010d34:	e7f3      	b.n	8010d1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08010d36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8010d36:	b510      	push	{r4, lr}
 8010d38:	4604      	mov	r4, r0
 8010d3a:	f7ff ff27 	bl	8010b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010d3e:	4620      	mov	r0, r4
 8010d40:	bd10      	pop	{r4, pc}

08010d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8010d42:	b510      	push	{r4, lr}
 8010d44:	4604      	mov	r4, r0
 8010d46:	f7ff ff6e 	bl	8010c26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	bd10      	pop	{r4, pc}

08010d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8010d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d50:	460b      	mov	r3, r1
 8010d52:	4606      	mov	r6, r0
 8010d54:	f853 7b08 	ldr.w	r7, [r3], #8
 8010d58:	4605      	mov	r5, r0
 8010d5a:	42bb      	cmp	r3, r7
 8010d5c:	460c      	mov	r4, r1
 8010d5e:	f856 2b08 	ldr.w	r2, [r6], #8
 8010d62:	d016      	beq.n	8010d92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 8010d64:	4296      	cmp	r6, r2
 8010d66:	bf08      	it	eq
 8010d68:	2200      	moveq	r2, #0
 8010d6a:	6007      	str	r7, [r0, #0]
 8010d6c:	6849      	ldr	r1, [r1, #4]
 8010d6e:	bf18      	it	ne
 8010d70:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 8010d74:	6041      	str	r1, [r0, #4]
 8010d76:	68a1      	ldr	r1, [r4, #8]
 8010d78:	6081      	str	r1, [r0, #8]
 8010d7a:	b142      	cbz	r2, 8010d8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8010d7c:	6022      	str	r2, [r4, #0]
 8010d7e:	f8c4 c008 	str.w	ip, [r4, #8]
 8010d82:	2300      	movs	r3, #0
 8010d84:	6822      	ldr	r2, [r4, #0]
 8010d86:	6063      	str	r3, [r4, #4]
 8010d88:	7013      	strb	r3, [r2, #0]
 8010d8a:	4628      	mov	r0, r5
 8010d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d8e:	6023      	str	r3, [r4, #0]
 8010d90:	e7f7      	b.n	8010d82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 8010d92:	f7ff ff48 	bl	8010c26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8010d96:	e7f4      	b.n	8010d82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08010d98 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8010d98:	6840      	ldr	r0, [r0, #4]
 8010d9a:	4770      	bx	lr

08010d9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8010d9c:	6840      	ldr	r0, [r0, #4]
 8010d9e:	4770      	bx	lr

08010da0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8010da0:	6840      	ldr	r0, [r0, #4]
 8010da2:	fab0 f080 	clz	r0, r0
 8010da6:	0940      	lsrs	r0, r0, #5
 8010da8:	4770      	bx	lr

08010daa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8010daa:	6800      	ldr	r0, [r0, #0]
 8010dac:	4408      	add	r0, r1
 8010dae:	4770      	bx	lr

08010db0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8010db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010db2:	6802      	ldr	r2, [r0, #0]
 8010db4:	f100 0308 	add.w	r3, r0, #8
 8010db8:	429a      	cmp	r2, r3
 8010dba:	bf08      	it	eq
 8010dbc:	230f      	moveq	r3, #15
 8010dbe:	6846      	ldr	r6, [r0, #4]
 8010dc0:	bf18      	it	ne
 8010dc2:	6883      	ldrne	r3, [r0, #8]
 8010dc4:	1c75      	adds	r5, r6, #1
 8010dc6:	429d      	cmp	r5, r3
 8010dc8:	4604      	mov	r4, r0
 8010dca:	460f      	mov	r7, r1
 8010dcc:	d906      	bls.n	8010ddc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 8010dce:	2301      	movs	r3, #1
 8010dd0:	9300      	str	r3, [sp, #0]
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	4631      	mov	r1, r6
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	f7ff ff4d 	bl	8010c76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8010ddc:	2200      	movs	r2, #0
 8010dde:	6823      	ldr	r3, [r4, #0]
 8010de0:	559f      	strb	r7, [r3, r6]
 8010de2:	6823      	ldr	r3, [r4, #0]
 8010de4:	6065      	str	r5, [r4, #4]
 8010de6:	555a      	strb	r2, [r3, r5]
 8010de8:	b003      	add	sp, #12
 8010dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8010dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df0:	4614      	mov	r4, r2
 8010df2:	4681      	mov	r9, r0
 8010df4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010df6:	460f      	mov	r7, r1
 8010df8:	462a      	mov	r2, r5
 8010dfa:	4698      	mov	r8, r3
 8010dfc:	4621      	mov	r1, r4
 8010dfe:	4b37      	ldr	r3, [pc, #220]	; (8010edc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8010e00:	f7ff feda 	bl	8010bb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8010e04:	464a      	mov	r2, r9
 8010e06:	f852 6b08 	ldr.w	r6, [r2], #8
 8010e0a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010e0e:	4296      	cmp	r6, r2
 8010e10:	bf08      	it	eq
 8010e12:	220f      	moveq	r2, #15
 8010e14:	eba5 0b04 	sub.w	fp, r5, r4
 8010e18:	bf18      	it	ne
 8010e1a:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 8010e1e:	eb03 0a0b 	add.w	sl, r3, fp
 8010e22:	4552      	cmp	r2, sl
 8010e24:	d34e      	bcc.n	8010ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 8010e26:	443e      	add	r6, r7
 8010e28:	4641      	mov	r1, r8
 8010e2a:	1bdf      	subs	r7, r3, r7
 8010e2c:	4648      	mov	r0, r9
 8010e2e:	1b3f      	subs	r7, r7, r4
 8010e30:	f7ff fece 	bl	8010bd0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8010e34:	b170      	cbz	r0, 8010e54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8010e36:	b137      	cbz	r7, 8010e46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8010e38:	42ac      	cmp	r4, r5
 8010e3a:	d004      	beq.n	8010e46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8010e3c:	463a      	mov	r2, r7
 8010e3e:	1931      	adds	r1, r6, r4
 8010e40:	1970      	adds	r0, r6, r5
 8010e42:	f7ff feda 	bl	8010bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8010e46:	b30d      	cbz	r5, 8010e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8010e48:	462a      	mov	r2, r5
 8010e4a:	4641      	mov	r1, r8
 8010e4c:	4630      	mov	r0, r6
 8010e4e:	f7ff fecb 	bl	8010be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010e52:	e01b      	b.n	8010e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8010e54:	b135      	cbz	r5, 8010e64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 8010e56:	42ac      	cmp	r4, r5
 8010e58:	d33c      	bcc.n	8010ed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 8010e5a:	462a      	mov	r2, r5
 8010e5c:	4641      	mov	r1, r8
 8010e5e:	4630      	mov	r0, r6
 8010e60:	f7ff fecb 	bl	8010bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8010e64:	b197      	cbz	r7, 8010e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8010e66:	42ac      	cmp	r4, r5
 8010e68:	d010      	beq.n	8010e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8010e6a:	463a      	mov	r2, r7
 8010e6c:	1931      	adds	r1, r6, r4
 8010e6e:	1970      	adds	r0, r6, r5
 8010e70:	f7ff fec3 	bl	8010bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8010e74:	42ac      	cmp	r4, r5
 8010e76:	d209      	bcs.n	8010e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8010e78:	4434      	add	r4, r6
 8010e7a:	eb08 0305 	add.w	r3, r8, r5
 8010e7e:	429c      	cmp	r4, r3
 8010e80:	d30f      	bcc.n	8010ea2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 8010e82:	462a      	mov	r2, r5
 8010e84:	4641      	mov	r1, r8
 8010e86:	4630      	mov	r0, r6
 8010e88:	f7ff feb7 	bl	8010bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	4648      	mov	r0, r9
 8010e90:	f8d9 3000 	ldr.w	r3, [r9]
 8010e94:	f8c9 a004 	str.w	sl, [r9, #4]
 8010e98:	f803 200a 	strb.w	r2, [r3, sl]
 8010e9c:	b003      	add	sp, #12
 8010e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea2:	4544      	cmp	r4, r8
 8010ea4:	d803      	bhi.n	8010eae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 8010ea6:	462a      	mov	r2, r5
 8010ea8:	eb08 010b 	add.w	r1, r8, fp
 8010eac:	e7ce      	b.n	8010e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8010eae:	eba4 0408 	sub.w	r4, r4, r8
 8010eb2:	4622      	mov	r2, r4
 8010eb4:	4641      	mov	r1, r8
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	f7ff fe9f 	bl	8010bfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8010ebc:	1b2a      	subs	r2, r5, r4
 8010ebe:	1971      	adds	r1, r6, r5
 8010ec0:	1930      	adds	r0, r6, r4
 8010ec2:	e7c4      	b.n	8010e4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8010ec4:	9500      	str	r5, [sp, #0]
 8010ec6:	4643      	mov	r3, r8
 8010ec8:	4622      	mov	r2, r4
 8010eca:	4639      	mov	r1, r7
 8010ecc:	4648      	mov	r0, r9
 8010ece:	f7ff fed2 	bl	8010c76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8010ed2:	e7db      	b.n	8010e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8010ed4:	2f00      	cmp	r7, #0
 8010ed6:	d0cf      	beq.n	8010e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8010ed8:	e7c7      	b.n	8010e6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8010eda:	bf00      	nop
 8010edc:	080182b3 	.word	0x080182b3

08010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8010ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	4608      	mov	r0, r1
 8010ee6:	460d      	mov	r5, r1
 8010ee8:	f7ef f932 	bl	8000150 <strlen>
 8010eec:	462b      	mov	r3, r5
 8010eee:	9000      	str	r0, [sp, #0]
 8010ef0:	6862      	ldr	r2, [r4, #4]
 8010ef2:	2100      	movs	r1, #0
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f7ff ff79 	bl	8010dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8010efa:	b003      	add	sp, #12
 8010efc:	bd30      	pop	{r4, r5, pc}

08010efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8010efe:	b508      	push	{r3, lr}
 8010f00:	f7ff ffee 	bl	8010ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8010f04:	bd08      	pop	{r3, pc}
	...

08010f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8010f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	460f      	mov	r7, r1
 8010f0e:	4615      	mov	r5, r2
 8010f10:	4a08      	ldr	r2, [pc, #32]	; (8010f34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8010f12:	461e      	mov	r6, r3
 8010f14:	f7ff fe42 	bl	8010b9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8010f18:	6862      	ldr	r2, [r4, #4]
 8010f1a:	9b08      	ldr	r3, [sp, #32]
 8010f1c:	1bd2      	subs	r2, r2, r7
 8010f1e:	42aa      	cmp	r2, r5
 8010f20:	9300      	str	r3, [sp, #0]
 8010f22:	4601      	mov	r1, r0
 8010f24:	4633      	mov	r3, r6
 8010f26:	bf28      	it	cs
 8010f28:	462a      	movcs	r2, r5
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	f7ff ff5e 	bl	8010dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8010f30:	b003      	add	sp, #12
 8010f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f34:	0801830b 	.word	0x0801830b

08010f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8010f38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f3a:	4605      	mov	r5, r0
 8010f3c:	4610      	mov	r0, r2
 8010f3e:	4614      	mov	r4, r2
 8010f40:	460e      	mov	r6, r1
 8010f42:	f7ef f905 	bl	8000150 <strlen>
 8010f46:	4623      	mov	r3, r4
 8010f48:	9000      	str	r0, [sp, #0]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	4631      	mov	r1, r6
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f7ff ffda 	bl	8010f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8010f54:	b002      	add	sp, #8
 8010f56:	bd70      	pop	{r4, r5, r6, pc}

08010f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8010f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	4626      	mov	r6, r4
 8010f5e:	f856 3b08 	ldr.w	r3, [r6], #8
 8010f62:	6840      	ldr	r0, [r0, #4]
 8010f64:	42b3      	cmp	r3, r6
 8010f66:	bf0c      	ite	eq
 8010f68:	260f      	moveq	r6, #15
 8010f6a:	68a6      	ldrne	r6, [r4, #8]
 8010f6c:	1885      	adds	r5, r0, r2
 8010f6e:	42b5      	cmp	r5, r6
 8010f70:	d80a      	bhi.n	8010f88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 8010f72:	b112      	cbz	r2, 8010f7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 8010f74:	4418      	add	r0, r3
 8010f76:	f7ff fe37 	bl	8010be8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	6823      	ldr	r3, [r4, #0]
 8010f80:	6065      	str	r5, [r4, #4]
 8010f82:	555a      	strb	r2, [r3, r5]
 8010f84:	b002      	add	sp, #8
 8010f86:	bd70      	pop	{r4, r5, r6, pc}
 8010f88:	9200      	str	r2, [sp, #0]
 8010f8a:	460b      	mov	r3, r1
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	4601      	mov	r1, r0
 8010f90:	4620      	mov	r0, r4
 8010f92:	f7ff fe70 	bl	8010c76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8010f96:	e7f0      	b.n	8010f7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08010f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8010f98:	b508      	push	{r3, lr}
 8010f9a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8010f9e:	f7ff ffdb 	bl	8010f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8010fa2:	bd08      	pop	{r3, pc}

08010fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8010fa4:	b570      	push	{r4, r5, r6, lr}
 8010fa6:	4604      	mov	r4, r0
 8010fa8:	4608      	mov	r0, r1
 8010faa:	460d      	mov	r5, r1
 8010fac:	f7ef f8d0 	bl	8000150 <strlen>
 8010fb0:	4606      	mov	r6, r0
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	4b05      	ldr	r3, [pc, #20]	; (8010fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	2100      	movs	r1, #0
 8010fba:	f7ff fdfd 	bl	8010bb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8010fbe:	4632      	mov	r2, r6
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	f7ff ffc8 	bl	8010f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8010fc8:	bd70      	pop	{r4, r5, r6, pc}
 8010fca:	bf00      	nop
 8010fcc:	080182f6 	.word	0x080182f6

08010fd0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8010fd0:	6800      	ldr	r0, [r0, #0]
 8010fd2:	4770      	bx	lr

08010fd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8010fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fd6:	4606      	mov	r6, r0
 8010fd8:	6845      	ldr	r5, [r0, #4]
 8010fda:	4608      	mov	r0, r1
 8010fdc:	460f      	mov	r7, r1
 8010fde:	f7ef f8b7 	bl	8000150 <strlen>
 8010fe2:	4285      	cmp	r5, r0
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	462a      	mov	r2, r5
 8010fe8:	4639      	mov	r1, r7
 8010fea:	bf28      	it	cs
 8010fec:	4602      	movcs	r2, r0
 8010fee:	6830      	ldr	r0, [r6, #0]
 8010ff0:	f7ff fd9c 	bl	8010b2c <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8010ff4:	b900      	cbnz	r0, 8010ff8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8010ff6:	1b28      	subs	r0, r5, r4
 8010ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8010ffa:	6001      	str	r1, [r0, #0]
 8010ffc:	4770      	bx	lr

08010ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8010ffe:	b510      	push	{r4, lr}
 8011000:	4604      	mov	r4, r0
 8011002:	f100 0208 	add.w	r2, r0, #8
 8011006:	6002      	str	r2, [r0, #0]
 8011008:	e9d1 1200 	ldrd	r1, r2, [r1]
 801100c:	f04f 0300 	mov.w	r3, #0
 8011010:	440a      	add	r2, r1
 8011012:	f7f3 f90f 	bl	8004234 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8011016:	4620      	mov	r0, r4
 8011018:	bd10      	pop	{r4, pc}
	...

0801101c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801101c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801101e:	4604      	mov	r4, r0
 8011020:	4616      	mov	r6, r2
 8011022:	460d      	mov	r5, r1
 8011024:	b919      	cbnz	r1, 801102e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8011026:	b112      	cbz	r2, 801102e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8011028:	480d      	ldr	r0, [pc, #52]	; (8011060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801102a:	f7ff fd58 	bl	8010ade <_ZSt19__throw_logic_errorPKc>
 801102e:	1b73      	subs	r3, r6, r5
 8011030:	2b0f      	cmp	r3, #15
 8011032:	9301      	str	r3, [sp, #4]
 8011034:	d907      	bls.n	8011046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8011036:	2200      	movs	r2, #0
 8011038:	a901      	add	r1, sp, #4
 801103a:	4620      	mov	r0, r4
 801103c:	f7ff fd8c 	bl	8010b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011040:	9b01      	ldr	r3, [sp, #4]
 8011042:	6020      	str	r0, [r4, #0]
 8011044:	60a3      	str	r3, [r4, #8]
 8011046:	4632      	mov	r2, r6
 8011048:	4629      	mov	r1, r5
 801104a:	6820      	ldr	r0, [r4, #0]
 801104c:	f7ff fde6 	bl	8010c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8011050:	2100      	movs	r1, #0
 8011052:	9b01      	ldr	r3, [sp, #4]
 8011054:	6822      	ldr	r2, [r4, #0]
 8011056:	6063      	str	r3, [r4, #4]
 8011058:	54d1      	strb	r1, [r2, r3]
 801105a:	b002      	add	sp, #8
 801105c:	bd70      	pop	{r4, r5, r6, pc}
 801105e:	bf00      	nop
 8011060:	080182cc 	.word	0x080182cc

08011064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8011064:	b538      	push	{r3, r4, r5, lr}
 8011066:	f100 0308 	add.w	r3, r0, #8
 801106a:	4604      	mov	r4, r0
 801106c:	6003      	str	r3, [r0, #0]
 801106e:	460d      	mov	r5, r1
 8011070:	b159      	cbz	r1, 801108a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8011072:	4608      	mov	r0, r1
 8011074:	f7ef f86c 	bl	8000150 <strlen>
 8011078:	182a      	adds	r2, r5, r0
 801107a:	4620      	mov	r0, r4
 801107c:	f04f 0300 	mov.w	r3, #0
 8011080:	4629      	mov	r1, r5
 8011082:	f7ff ffcb 	bl	801101c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8011086:	4620      	mov	r0, r4
 8011088:	bd38      	pop	{r3, r4, r5, pc}
 801108a:	f04f 32ff 	mov.w	r2, #4294967295
 801108e:	e7f4      	b.n	801107a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08011090 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8011090:	b580      	push	{r7, lr}
 8011092:	b09c      	sub	sp, #112	; 0x70
 8011094:	af00      	add	r7, sp, #0
 8011096:	1a0e      	subs	r6, r1, r0
 8011098:	4680      	mov	r8, r0
 801109a:	2269      	movs	r2, #105	; 0x69
 801109c:	490e      	ldr	r1, [pc, #56]	; (80110d8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 801109e:	1d38      	adds	r0, r7, #4
 80110a0:	f000 f909 	bl	80112b6 <memcpy>
 80110a4:	f106 0377 	add.w	r3, r6, #119	; 0x77
 80110a8:	f023 0307 	bic.w	r3, r3, #7
 80110ac:	ebad 0d03 	sub.w	sp, sp, r3
 80110b0:	466c      	mov	r4, sp
 80110b2:	2268      	movs	r2, #104	; 0x68
 80110b4:	1d39      	adds	r1, r7, #4
 80110b6:	4620      	mov	r0, r4
 80110b8:	f000 f8fd 	bl	80112b6 <memcpy>
 80110bc:	4632      	mov	r2, r6
 80110be:	4641      	mov	r1, r8
 80110c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80110c4:	f000 f8f7 	bl	80112b6 <memcpy>
 80110c8:	2300      	movs	r3, #0
 80110ca:	1c75      	adds	r5, r6, #1
 80110cc:	4425      	add	r5, r4
 80110ce:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 80110d2:	4620      	mov	r0, r4
 80110d4:	f7ff fd03 	bl	8010ade <_ZSt19__throw_logic_errorPKc>
 80110d8:	08018344 	.word	0x08018344

080110dc <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80110dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110de:	af00      	add	r7, sp, #0
 80110e0:	b086      	sub	sp, #24
 80110e2:	466d      	mov	r5, sp
 80110e4:	f105 040c 	add.w	r4, r5, #12
 80110e8:	4623      	mov	r3, r4
 80110ea:	f04f 0c0a 	mov.w	ip, #10
 80110ee:	f8df e038 	ldr.w	lr, [pc, #56]	; 8011128 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80110f2:	fbb2 f6fc 	udiv	r6, r2, ip
 80110f6:	fb0c 2216 	mls	r2, ip, r6, r2
 80110fa:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80110fe:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8011102:	4632      	mov	r2, r6
 8011104:	2e00      	cmp	r6, #0
 8011106:	d1f4      	bne.n	80110f2 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8011108:	1ae4      	subs	r4, r4, r3
 801110a:	428c      	cmp	r4, r1
 801110c:	d808      	bhi.n	8011120 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801110e:	f1c4 010c 	rsb	r1, r4, #12
 8011112:	4622      	mov	r2, r4
 8011114:	4429      	add	r1, r5
 8011116:	f000 f8ce 	bl	80112b6 <memcpy>
 801111a:	4620      	mov	r0, r4
 801111c:	46bd      	mov	sp, r7
 801111e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011120:	f04f 34ff 	mov.w	r4, #4294967295
 8011124:	e7f9      	b.n	801111a <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8011126:	bf00      	nop
 8011128:	08018339 	.word	0x08018339

0801112c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 801112c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011130:	4606      	mov	r6, r0
 8011132:	4615      	mov	r5, r2
 8011134:	4604      	mov	r4, r0
 8011136:	3901      	subs	r1, #1
 8011138:	1847      	adds	r7, r0, r1
 801113a:	782a      	ldrb	r2, [r5, #0]
 801113c:	b39a      	cbz	r2, 80111a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 801113e:	42bc      	cmp	r4, r7
 8011140:	d22d      	bcs.n	801119e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8011142:	2a25      	cmp	r2, #37	; 0x25
 8011144:	d107      	bne.n	8011156 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8011146:	786a      	ldrb	r2, [r5, #1]
 8011148:	2a73      	cmp	r2, #115	; 0x73
 801114a:	d00a      	beq.n	8011162 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 801114c:	2a7a      	cmp	r2, #122	; 0x7a
 801114e:	d013      	beq.n	8011178 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8011150:	2a25      	cmp	r2, #37	; 0x25
 8011152:	d100      	bne.n	8011156 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8011154:	3501      	adds	r5, #1
 8011156:	782a      	ldrb	r2, [r5, #0]
 8011158:	3401      	adds	r4, #1
 801115a:	f804 2c01 	strb.w	r2, [r4, #-1]
 801115e:	3501      	adds	r5, #1
 8011160:	e7eb      	b.n	801113a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8011162:	1d19      	adds	r1, r3, #4
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	3b01      	subs	r3, #1
 8011168:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801116c:	b1a2      	cbz	r2, 8011198 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 801116e:	42bc      	cmp	r4, r7
 8011170:	d015      	beq.n	801119e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8011172:	f804 2b01 	strb.w	r2, [r4], #1
 8011176:	e7f7      	b.n	8011168 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8011178:	78aa      	ldrb	r2, [r5, #2]
 801117a:	2a75      	cmp	r2, #117	; 0x75
 801117c:	d1eb      	bne.n	8011156 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	1b39      	subs	r1, r7, r4
 8011182:	4620      	mov	r0, r4
 8011184:	f103 0804 	add.w	r8, r3, #4
 8011188:	f7ff ffa8 	bl	80110dc <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 801118c:	2800      	cmp	r0, #0
 801118e:	dd06      	ble.n	801119e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8011190:	4404      	add	r4, r0
 8011192:	3503      	adds	r5, #3
 8011194:	4643      	mov	r3, r8
 8011196:	e7d0      	b.n	801113a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8011198:	3502      	adds	r5, #2
 801119a:	460b      	mov	r3, r1
 801119c:	e7cd      	b.n	801113a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 801119e:	4621      	mov	r1, r4
 80111a0:	4630      	mov	r0, r6
 80111a2:	f7ff ff75 	bl	8011090 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80111a6:	7022      	strb	r2, [r4, #0]
 80111a8:	1ba0      	subs	r0, r4, r6
 80111aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080111b0 <roundf>:
 80111b0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80111b4:	3b7f      	subs	r3, #127	; 0x7f
 80111b6:	2b16      	cmp	r3, #22
 80111b8:	b510      	push	{r4, lr}
 80111ba:	4601      	mov	r1, r0
 80111bc:	dc14      	bgt.n	80111e8 <roundf+0x38>
 80111be:	2b00      	cmp	r3, #0
 80111c0:	da07      	bge.n	80111d2 <roundf+0x22>
 80111c2:	3301      	adds	r3, #1
 80111c4:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 80111c8:	d101      	bne.n	80111ce <roundf+0x1e>
 80111ca:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 80111ce:	4608      	mov	r0, r1
 80111d0:	bd10      	pop	{r4, pc}
 80111d2:	4a08      	ldr	r2, [pc, #32]	; (80111f4 <roundf+0x44>)
 80111d4:	411a      	asrs	r2, r3
 80111d6:	4210      	tst	r0, r2
 80111d8:	d0f9      	beq.n	80111ce <roundf+0x1e>
 80111da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80111de:	4119      	asrs	r1, r3
 80111e0:	4401      	add	r1, r0
 80111e2:	ea21 0102 	bic.w	r1, r1, r2
 80111e6:	e7f2      	b.n	80111ce <roundf+0x1e>
 80111e8:	2b80      	cmp	r3, #128	; 0x80
 80111ea:	d1f0      	bne.n	80111ce <roundf+0x1e>
 80111ec:	f7ef fcc2 	bl	8000b74 <__addsf3>
 80111f0:	4601      	mov	r1, r0
 80111f2:	e7ec      	b.n	80111ce <roundf+0x1e>
 80111f4:	007fffff 	.word	0x007fffff

080111f8 <abort>:
 80111f8:	b508      	push	{r3, lr}
 80111fa:	2006      	movs	r0, #6
 80111fc:	f000 ff9a 	bl	8012134 <raise>
 8011200:	2001      	movs	r0, #1
 8011202:	f7fa fc96 	bl	800bb32 <_exit>
	...

08011208 <__errno>:
 8011208:	4b01      	ldr	r3, [pc, #4]	; (8011210 <__errno+0x8>)
 801120a:	6818      	ldr	r0, [r3, #0]
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	200000a8 	.word	0x200000a8

08011214 <__libc_init_array>:
 8011214:	b570      	push	{r4, r5, r6, lr}
 8011216:	2500      	movs	r5, #0
 8011218:	4e0c      	ldr	r6, [pc, #48]	; (801124c <__libc_init_array+0x38>)
 801121a:	4c0d      	ldr	r4, [pc, #52]	; (8011250 <__libc_init_array+0x3c>)
 801121c:	1ba4      	subs	r4, r4, r6
 801121e:	10a4      	asrs	r4, r4, #2
 8011220:	42a5      	cmp	r5, r4
 8011222:	d109      	bne.n	8011238 <__libc_init_array+0x24>
 8011224:	f003 feba 	bl	8014f9c <_init>
 8011228:	2500      	movs	r5, #0
 801122a:	4e0a      	ldr	r6, [pc, #40]	; (8011254 <__libc_init_array+0x40>)
 801122c:	4c0a      	ldr	r4, [pc, #40]	; (8011258 <__libc_init_array+0x44>)
 801122e:	1ba4      	subs	r4, r4, r6
 8011230:	10a4      	asrs	r4, r4, #2
 8011232:	42a5      	cmp	r5, r4
 8011234:	d105      	bne.n	8011242 <__libc_init_array+0x2e>
 8011236:	bd70      	pop	{r4, r5, r6, pc}
 8011238:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801123c:	4798      	blx	r3
 801123e:	3501      	adds	r5, #1
 8011240:	e7ee      	b.n	8011220 <__libc_init_array+0xc>
 8011242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011246:	4798      	blx	r3
 8011248:	3501      	adds	r5, #1
 801124a:	e7f2      	b.n	8011232 <__libc_init_array+0x1e>
 801124c:	080186c8 	.word	0x080186c8
 8011250:	080186c8 	.word	0x080186c8
 8011254:	080186c8 	.word	0x080186c8
 8011258:	080186cc 	.word	0x080186cc

0801125c <malloc>:
 801125c:	4b02      	ldr	r3, [pc, #8]	; (8011268 <malloc+0xc>)
 801125e:	4601      	mov	r1, r0
 8011260:	6818      	ldr	r0, [r3, #0]
 8011262:	f000 b8a1 	b.w	80113a8 <_malloc_r>
 8011266:	bf00      	nop
 8011268:	200000a8 	.word	0x200000a8

0801126c <free>:
 801126c:	4b02      	ldr	r3, [pc, #8]	; (8011278 <free+0xc>)
 801126e:	4601      	mov	r1, r0
 8011270:	6818      	ldr	r0, [r3, #0]
 8011272:	f000 b84d 	b.w	8011310 <_free_r>
 8011276:	bf00      	nop
 8011278:	200000a8 	.word	0x200000a8

0801127c <memchr>:
 801127c:	b510      	push	{r4, lr}
 801127e:	b2c9      	uxtb	r1, r1
 8011280:	4402      	add	r2, r0
 8011282:	4290      	cmp	r0, r2
 8011284:	4603      	mov	r3, r0
 8011286:	d101      	bne.n	801128c <memchr+0x10>
 8011288:	2300      	movs	r3, #0
 801128a:	e003      	b.n	8011294 <memchr+0x18>
 801128c:	781c      	ldrb	r4, [r3, #0]
 801128e:	3001      	adds	r0, #1
 8011290:	428c      	cmp	r4, r1
 8011292:	d1f6      	bne.n	8011282 <memchr+0x6>
 8011294:	4618      	mov	r0, r3
 8011296:	bd10      	pop	{r4, pc}

08011298 <memcmp>:
 8011298:	b530      	push	{r4, r5, lr}
 801129a:	2400      	movs	r4, #0
 801129c:	42a2      	cmp	r2, r4
 801129e:	d101      	bne.n	80112a4 <memcmp+0xc>
 80112a0:	2000      	movs	r0, #0
 80112a2:	e007      	b.n	80112b4 <memcmp+0x1c>
 80112a4:	5d03      	ldrb	r3, [r0, r4]
 80112a6:	3401      	adds	r4, #1
 80112a8:	190d      	adds	r5, r1, r4
 80112aa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80112ae:	42ab      	cmp	r3, r5
 80112b0:	d0f4      	beq.n	801129c <memcmp+0x4>
 80112b2:	1b58      	subs	r0, r3, r5
 80112b4:	bd30      	pop	{r4, r5, pc}

080112b6 <memcpy>:
 80112b6:	b510      	push	{r4, lr}
 80112b8:	1e43      	subs	r3, r0, #1
 80112ba:	440a      	add	r2, r1
 80112bc:	4291      	cmp	r1, r2
 80112be:	d100      	bne.n	80112c2 <memcpy+0xc>
 80112c0:	bd10      	pop	{r4, pc}
 80112c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112ca:	e7f7      	b.n	80112bc <memcpy+0x6>

080112cc <memmove>:
 80112cc:	4288      	cmp	r0, r1
 80112ce:	b510      	push	{r4, lr}
 80112d0:	eb01 0302 	add.w	r3, r1, r2
 80112d4:	d807      	bhi.n	80112e6 <memmove+0x1a>
 80112d6:	1e42      	subs	r2, r0, #1
 80112d8:	4299      	cmp	r1, r3
 80112da:	d00a      	beq.n	80112f2 <memmove+0x26>
 80112dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80112e4:	e7f8      	b.n	80112d8 <memmove+0xc>
 80112e6:	4283      	cmp	r3, r0
 80112e8:	d9f5      	bls.n	80112d6 <memmove+0xa>
 80112ea:	1881      	adds	r1, r0, r2
 80112ec:	1ad2      	subs	r2, r2, r3
 80112ee:	42d3      	cmn	r3, r2
 80112f0:	d100      	bne.n	80112f4 <memmove+0x28>
 80112f2:	bd10      	pop	{r4, pc}
 80112f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80112f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80112fc:	e7f7      	b.n	80112ee <memmove+0x22>

080112fe <memset>:
 80112fe:	4603      	mov	r3, r0
 8011300:	4402      	add	r2, r0
 8011302:	4293      	cmp	r3, r2
 8011304:	d100      	bne.n	8011308 <memset+0xa>
 8011306:	4770      	bx	lr
 8011308:	f803 1b01 	strb.w	r1, [r3], #1
 801130c:	e7f9      	b.n	8011302 <memset+0x4>
	...

08011310 <_free_r>:
 8011310:	b538      	push	{r3, r4, r5, lr}
 8011312:	4605      	mov	r5, r0
 8011314:	2900      	cmp	r1, #0
 8011316:	d043      	beq.n	80113a0 <_free_r+0x90>
 8011318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801131c:	1f0c      	subs	r4, r1, #4
 801131e:	2b00      	cmp	r3, #0
 8011320:	bfb8      	it	lt
 8011322:	18e4      	addlt	r4, r4, r3
 8011324:	f003 f892 	bl	801444c <__malloc_lock>
 8011328:	4a1e      	ldr	r2, [pc, #120]	; (80113a4 <_free_r+0x94>)
 801132a:	6813      	ldr	r3, [r2, #0]
 801132c:	4610      	mov	r0, r2
 801132e:	b933      	cbnz	r3, 801133e <_free_r+0x2e>
 8011330:	6063      	str	r3, [r4, #4]
 8011332:	6014      	str	r4, [r2, #0]
 8011334:	4628      	mov	r0, r5
 8011336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801133a:	f003 b888 	b.w	801444e <__malloc_unlock>
 801133e:	42a3      	cmp	r3, r4
 8011340:	d90b      	bls.n	801135a <_free_r+0x4a>
 8011342:	6821      	ldr	r1, [r4, #0]
 8011344:	1862      	adds	r2, r4, r1
 8011346:	4293      	cmp	r3, r2
 8011348:	bf01      	itttt	eq
 801134a:	681a      	ldreq	r2, [r3, #0]
 801134c:	685b      	ldreq	r3, [r3, #4]
 801134e:	1852      	addeq	r2, r2, r1
 8011350:	6022      	streq	r2, [r4, #0]
 8011352:	6063      	str	r3, [r4, #4]
 8011354:	6004      	str	r4, [r0, #0]
 8011356:	e7ed      	b.n	8011334 <_free_r+0x24>
 8011358:	4613      	mov	r3, r2
 801135a:	685a      	ldr	r2, [r3, #4]
 801135c:	b10a      	cbz	r2, 8011362 <_free_r+0x52>
 801135e:	42a2      	cmp	r2, r4
 8011360:	d9fa      	bls.n	8011358 <_free_r+0x48>
 8011362:	6819      	ldr	r1, [r3, #0]
 8011364:	1858      	adds	r0, r3, r1
 8011366:	42a0      	cmp	r0, r4
 8011368:	d10b      	bne.n	8011382 <_free_r+0x72>
 801136a:	6820      	ldr	r0, [r4, #0]
 801136c:	4401      	add	r1, r0
 801136e:	1858      	adds	r0, r3, r1
 8011370:	4282      	cmp	r2, r0
 8011372:	6019      	str	r1, [r3, #0]
 8011374:	d1de      	bne.n	8011334 <_free_r+0x24>
 8011376:	6810      	ldr	r0, [r2, #0]
 8011378:	6852      	ldr	r2, [r2, #4]
 801137a:	4401      	add	r1, r0
 801137c:	6019      	str	r1, [r3, #0]
 801137e:	605a      	str	r2, [r3, #4]
 8011380:	e7d8      	b.n	8011334 <_free_r+0x24>
 8011382:	d902      	bls.n	801138a <_free_r+0x7a>
 8011384:	230c      	movs	r3, #12
 8011386:	602b      	str	r3, [r5, #0]
 8011388:	e7d4      	b.n	8011334 <_free_r+0x24>
 801138a:	6820      	ldr	r0, [r4, #0]
 801138c:	1821      	adds	r1, r4, r0
 801138e:	428a      	cmp	r2, r1
 8011390:	bf01      	itttt	eq
 8011392:	6811      	ldreq	r1, [r2, #0]
 8011394:	6852      	ldreq	r2, [r2, #4]
 8011396:	1809      	addeq	r1, r1, r0
 8011398:	6021      	streq	r1, [r4, #0]
 801139a:	6062      	str	r2, [r4, #4]
 801139c:	605c      	str	r4, [r3, #4]
 801139e:	e7c9      	b.n	8011334 <_free_r+0x24>
 80113a0:	bd38      	pop	{r3, r4, r5, pc}
 80113a2:	bf00      	nop
 80113a4:	200006a0 	.word	0x200006a0

080113a8 <_malloc_r>:
 80113a8:	b570      	push	{r4, r5, r6, lr}
 80113aa:	1ccd      	adds	r5, r1, #3
 80113ac:	f025 0503 	bic.w	r5, r5, #3
 80113b0:	3508      	adds	r5, #8
 80113b2:	2d0c      	cmp	r5, #12
 80113b4:	bf38      	it	cc
 80113b6:	250c      	movcc	r5, #12
 80113b8:	2d00      	cmp	r5, #0
 80113ba:	4606      	mov	r6, r0
 80113bc:	db01      	blt.n	80113c2 <_malloc_r+0x1a>
 80113be:	42a9      	cmp	r1, r5
 80113c0:	d903      	bls.n	80113ca <_malloc_r+0x22>
 80113c2:	230c      	movs	r3, #12
 80113c4:	6033      	str	r3, [r6, #0]
 80113c6:	2000      	movs	r0, #0
 80113c8:	bd70      	pop	{r4, r5, r6, pc}
 80113ca:	f003 f83f 	bl	801444c <__malloc_lock>
 80113ce:	4a21      	ldr	r2, [pc, #132]	; (8011454 <_malloc_r+0xac>)
 80113d0:	6814      	ldr	r4, [r2, #0]
 80113d2:	4621      	mov	r1, r4
 80113d4:	b991      	cbnz	r1, 80113fc <_malloc_r+0x54>
 80113d6:	4c20      	ldr	r4, [pc, #128]	; (8011458 <_malloc_r+0xb0>)
 80113d8:	6823      	ldr	r3, [r4, #0]
 80113da:	b91b      	cbnz	r3, 80113e4 <_malloc_r+0x3c>
 80113dc:	4630      	mov	r0, r6
 80113de:	f000 fe6d 	bl	80120bc <_sbrk_r>
 80113e2:	6020      	str	r0, [r4, #0]
 80113e4:	4629      	mov	r1, r5
 80113e6:	4630      	mov	r0, r6
 80113e8:	f000 fe68 	bl	80120bc <_sbrk_r>
 80113ec:	1c43      	adds	r3, r0, #1
 80113ee:	d124      	bne.n	801143a <_malloc_r+0x92>
 80113f0:	230c      	movs	r3, #12
 80113f2:	4630      	mov	r0, r6
 80113f4:	6033      	str	r3, [r6, #0]
 80113f6:	f003 f82a 	bl	801444e <__malloc_unlock>
 80113fa:	e7e4      	b.n	80113c6 <_malloc_r+0x1e>
 80113fc:	680b      	ldr	r3, [r1, #0]
 80113fe:	1b5b      	subs	r3, r3, r5
 8011400:	d418      	bmi.n	8011434 <_malloc_r+0x8c>
 8011402:	2b0b      	cmp	r3, #11
 8011404:	d90f      	bls.n	8011426 <_malloc_r+0x7e>
 8011406:	600b      	str	r3, [r1, #0]
 8011408:	18cc      	adds	r4, r1, r3
 801140a:	50cd      	str	r5, [r1, r3]
 801140c:	4630      	mov	r0, r6
 801140e:	f003 f81e 	bl	801444e <__malloc_unlock>
 8011412:	f104 000b 	add.w	r0, r4, #11
 8011416:	1d23      	adds	r3, r4, #4
 8011418:	f020 0007 	bic.w	r0, r0, #7
 801141c:	1ac3      	subs	r3, r0, r3
 801141e:	d0d3      	beq.n	80113c8 <_malloc_r+0x20>
 8011420:	425a      	negs	r2, r3
 8011422:	50e2      	str	r2, [r4, r3]
 8011424:	e7d0      	b.n	80113c8 <_malloc_r+0x20>
 8011426:	684b      	ldr	r3, [r1, #4]
 8011428:	428c      	cmp	r4, r1
 801142a:	bf16      	itet	ne
 801142c:	6063      	strne	r3, [r4, #4]
 801142e:	6013      	streq	r3, [r2, #0]
 8011430:	460c      	movne	r4, r1
 8011432:	e7eb      	b.n	801140c <_malloc_r+0x64>
 8011434:	460c      	mov	r4, r1
 8011436:	6849      	ldr	r1, [r1, #4]
 8011438:	e7cc      	b.n	80113d4 <_malloc_r+0x2c>
 801143a:	1cc4      	adds	r4, r0, #3
 801143c:	f024 0403 	bic.w	r4, r4, #3
 8011440:	42a0      	cmp	r0, r4
 8011442:	d005      	beq.n	8011450 <_malloc_r+0xa8>
 8011444:	1a21      	subs	r1, r4, r0
 8011446:	4630      	mov	r0, r6
 8011448:	f000 fe38 	bl	80120bc <_sbrk_r>
 801144c:	3001      	adds	r0, #1
 801144e:	d0cf      	beq.n	80113f0 <_malloc_r+0x48>
 8011450:	6025      	str	r5, [r4, #0]
 8011452:	e7db      	b.n	801140c <_malloc_r+0x64>
 8011454:	200006a0 	.word	0x200006a0
 8011458:	200006a4 	.word	0x200006a4

0801145c <__cvt>:
 801145c:	2b00      	cmp	r3, #0
 801145e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011462:	461e      	mov	r6, r3
 8011464:	bfbb      	ittet	lt
 8011466:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801146a:	461e      	movlt	r6, r3
 801146c:	2300      	movge	r3, #0
 801146e:	232d      	movlt	r3, #45	; 0x2d
 8011470:	b088      	sub	sp, #32
 8011472:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011474:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8011478:	f027 0720 	bic.w	r7, r7, #32
 801147c:	2f46      	cmp	r7, #70	; 0x46
 801147e:	4614      	mov	r4, r2
 8011480:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011482:	700b      	strb	r3, [r1, #0]
 8011484:	d004      	beq.n	8011490 <__cvt+0x34>
 8011486:	2f45      	cmp	r7, #69	; 0x45
 8011488:	d100      	bne.n	801148c <__cvt+0x30>
 801148a:	3501      	adds	r5, #1
 801148c:	2302      	movs	r3, #2
 801148e:	e000      	b.n	8011492 <__cvt+0x36>
 8011490:	2303      	movs	r3, #3
 8011492:	aa07      	add	r2, sp, #28
 8011494:	9204      	str	r2, [sp, #16]
 8011496:	aa06      	add	r2, sp, #24
 8011498:	e9cd a202 	strd	sl, r2, [sp, #8]
 801149c:	e9cd 3500 	strd	r3, r5, [sp]
 80114a0:	4622      	mov	r2, r4
 80114a2:	4633      	mov	r3, r6
 80114a4:	f001 fed0 	bl	8013248 <_dtoa_r>
 80114a8:	2f47      	cmp	r7, #71	; 0x47
 80114aa:	4680      	mov	r8, r0
 80114ac:	d102      	bne.n	80114b4 <__cvt+0x58>
 80114ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114b0:	07db      	lsls	r3, r3, #31
 80114b2:	d526      	bpl.n	8011502 <__cvt+0xa6>
 80114b4:	2f46      	cmp	r7, #70	; 0x46
 80114b6:	eb08 0905 	add.w	r9, r8, r5
 80114ba:	d111      	bne.n	80114e0 <__cvt+0x84>
 80114bc:	f898 3000 	ldrb.w	r3, [r8]
 80114c0:	2b30      	cmp	r3, #48	; 0x30
 80114c2:	d10a      	bne.n	80114da <__cvt+0x7e>
 80114c4:	2200      	movs	r2, #0
 80114c6:	2300      	movs	r3, #0
 80114c8:	4620      	mov	r0, r4
 80114ca:	4631      	mov	r1, r6
 80114cc:	f7ef fa6c 	bl	80009a8 <__aeabi_dcmpeq>
 80114d0:	b918      	cbnz	r0, 80114da <__cvt+0x7e>
 80114d2:	f1c5 0501 	rsb	r5, r5, #1
 80114d6:	f8ca 5000 	str.w	r5, [sl]
 80114da:	f8da 3000 	ldr.w	r3, [sl]
 80114de:	4499      	add	r9, r3
 80114e0:	2200      	movs	r2, #0
 80114e2:	2300      	movs	r3, #0
 80114e4:	4620      	mov	r0, r4
 80114e6:	4631      	mov	r1, r6
 80114e8:	f7ef fa5e 	bl	80009a8 <__aeabi_dcmpeq>
 80114ec:	b938      	cbnz	r0, 80114fe <__cvt+0xa2>
 80114ee:	2230      	movs	r2, #48	; 0x30
 80114f0:	9b07      	ldr	r3, [sp, #28]
 80114f2:	454b      	cmp	r3, r9
 80114f4:	d205      	bcs.n	8011502 <__cvt+0xa6>
 80114f6:	1c59      	adds	r1, r3, #1
 80114f8:	9107      	str	r1, [sp, #28]
 80114fa:	701a      	strb	r2, [r3, #0]
 80114fc:	e7f8      	b.n	80114f0 <__cvt+0x94>
 80114fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8011502:	4640      	mov	r0, r8
 8011504:	9b07      	ldr	r3, [sp, #28]
 8011506:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011508:	eba3 0308 	sub.w	r3, r3, r8
 801150c:	6013      	str	r3, [r2, #0]
 801150e:	b008      	add	sp, #32
 8011510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011514 <__exponent>:
 8011514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011516:	2900      	cmp	r1, #0
 8011518:	bfb4      	ite	lt
 801151a:	232d      	movlt	r3, #45	; 0x2d
 801151c:	232b      	movge	r3, #43	; 0x2b
 801151e:	4604      	mov	r4, r0
 8011520:	bfb8      	it	lt
 8011522:	4249      	neglt	r1, r1
 8011524:	2909      	cmp	r1, #9
 8011526:	f804 2b02 	strb.w	r2, [r4], #2
 801152a:	7043      	strb	r3, [r0, #1]
 801152c:	dd21      	ble.n	8011572 <__exponent+0x5e>
 801152e:	f10d 0307 	add.w	r3, sp, #7
 8011532:	461f      	mov	r7, r3
 8011534:	260a      	movs	r6, #10
 8011536:	fb91 f5f6 	sdiv	r5, r1, r6
 801153a:	fb06 1115 	mls	r1, r6, r5, r1
 801153e:	2d09      	cmp	r5, #9
 8011540:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8011544:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011548:	f103 32ff 	add.w	r2, r3, #4294967295
 801154c:	4629      	mov	r1, r5
 801154e:	dc09      	bgt.n	8011564 <__exponent+0x50>
 8011550:	3130      	adds	r1, #48	; 0x30
 8011552:	3b02      	subs	r3, #2
 8011554:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011558:	42bb      	cmp	r3, r7
 801155a:	4622      	mov	r2, r4
 801155c:	d304      	bcc.n	8011568 <__exponent+0x54>
 801155e:	1a10      	subs	r0, r2, r0
 8011560:	b003      	add	sp, #12
 8011562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011564:	4613      	mov	r3, r2
 8011566:	e7e6      	b.n	8011536 <__exponent+0x22>
 8011568:	f813 2b01 	ldrb.w	r2, [r3], #1
 801156c:	f804 2b01 	strb.w	r2, [r4], #1
 8011570:	e7f2      	b.n	8011558 <__exponent+0x44>
 8011572:	2330      	movs	r3, #48	; 0x30
 8011574:	4419      	add	r1, r3
 8011576:	7083      	strb	r3, [r0, #2]
 8011578:	1d02      	adds	r2, r0, #4
 801157a:	70c1      	strb	r1, [r0, #3]
 801157c:	e7ef      	b.n	801155e <__exponent+0x4a>
	...

08011580 <_printf_float>:
 8011580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011584:	b091      	sub	sp, #68	; 0x44
 8011586:	460c      	mov	r4, r1
 8011588:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801158a:	4693      	mov	fp, r2
 801158c:	461e      	mov	r6, r3
 801158e:	4605      	mov	r5, r0
 8011590:	f002 ff3c 	bl	801440c <_localeconv_r>
 8011594:	6803      	ldr	r3, [r0, #0]
 8011596:	4618      	mov	r0, r3
 8011598:	9309      	str	r3, [sp, #36]	; 0x24
 801159a:	f7ee fdd9 	bl	8000150 <strlen>
 801159e:	2300      	movs	r3, #0
 80115a0:	930e      	str	r3, [sp, #56]	; 0x38
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	900a      	str	r0, [sp, #40]	; 0x28
 80115a6:	3307      	adds	r3, #7
 80115a8:	f023 0307 	bic.w	r3, r3, #7
 80115ac:	f103 0208 	add.w	r2, r3, #8
 80115b0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80115b4:	f8d4 a000 	ldr.w	sl, [r4]
 80115b8:	603a      	str	r2, [r7, #0]
 80115ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80115c2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80115c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80115ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80115cc:	f04f 32ff 	mov.w	r2, #4294967295
 80115d0:	4ba6      	ldr	r3, [pc, #664]	; (801186c <_printf_float+0x2ec>)
 80115d2:	4638      	mov	r0, r7
 80115d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80115d6:	f7ef fa19 	bl	8000a0c <__aeabi_dcmpun>
 80115da:	bb68      	cbnz	r0, 8011638 <_printf_float+0xb8>
 80115dc:	f04f 32ff 	mov.w	r2, #4294967295
 80115e0:	4ba2      	ldr	r3, [pc, #648]	; (801186c <_printf_float+0x2ec>)
 80115e2:	4638      	mov	r0, r7
 80115e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80115e6:	f7ef f9f3 	bl	80009d0 <__aeabi_dcmple>
 80115ea:	bb28      	cbnz	r0, 8011638 <_printf_float+0xb8>
 80115ec:	2200      	movs	r2, #0
 80115ee:	2300      	movs	r3, #0
 80115f0:	4638      	mov	r0, r7
 80115f2:	4649      	mov	r1, r9
 80115f4:	f7ef f9e2 	bl	80009bc <__aeabi_dcmplt>
 80115f8:	b110      	cbz	r0, 8011600 <_printf_float+0x80>
 80115fa:	232d      	movs	r3, #45	; 0x2d
 80115fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011600:	4f9b      	ldr	r7, [pc, #620]	; (8011870 <_printf_float+0x2f0>)
 8011602:	4b9c      	ldr	r3, [pc, #624]	; (8011874 <_printf_float+0x2f4>)
 8011604:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011608:	bf98      	it	ls
 801160a:	461f      	movls	r7, r3
 801160c:	2303      	movs	r3, #3
 801160e:	f04f 0900 	mov.w	r9, #0
 8011612:	6123      	str	r3, [r4, #16]
 8011614:	f02a 0304 	bic.w	r3, sl, #4
 8011618:	6023      	str	r3, [r4, #0]
 801161a:	9600      	str	r6, [sp, #0]
 801161c:	465b      	mov	r3, fp
 801161e:	aa0f      	add	r2, sp, #60	; 0x3c
 8011620:	4621      	mov	r1, r4
 8011622:	4628      	mov	r0, r5
 8011624:	f000 f9e2 	bl	80119ec <_printf_common>
 8011628:	3001      	adds	r0, #1
 801162a:	f040 8090 	bne.w	801174e <_printf_float+0x1ce>
 801162e:	f04f 30ff 	mov.w	r0, #4294967295
 8011632:	b011      	add	sp, #68	; 0x44
 8011634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011638:	463a      	mov	r2, r7
 801163a:	464b      	mov	r3, r9
 801163c:	4638      	mov	r0, r7
 801163e:	4649      	mov	r1, r9
 8011640:	f7ef f9e4 	bl	8000a0c <__aeabi_dcmpun>
 8011644:	b110      	cbz	r0, 801164c <_printf_float+0xcc>
 8011646:	4f8c      	ldr	r7, [pc, #560]	; (8011878 <_printf_float+0x2f8>)
 8011648:	4b8c      	ldr	r3, [pc, #560]	; (801187c <_printf_float+0x2fc>)
 801164a:	e7db      	b.n	8011604 <_printf_float+0x84>
 801164c:	6863      	ldr	r3, [r4, #4]
 801164e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8011652:	1c59      	adds	r1, r3, #1
 8011654:	a80d      	add	r0, sp, #52	; 0x34
 8011656:	a90e      	add	r1, sp, #56	; 0x38
 8011658:	d140      	bne.n	80116dc <_printf_float+0x15c>
 801165a:	2306      	movs	r3, #6
 801165c:	6063      	str	r3, [r4, #4]
 801165e:	f04f 0c00 	mov.w	ip, #0
 8011662:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8011666:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801166a:	6863      	ldr	r3, [r4, #4]
 801166c:	6022      	str	r2, [r4, #0]
 801166e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8011672:	9300      	str	r3, [sp, #0]
 8011674:	463a      	mov	r2, r7
 8011676:	464b      	mov	r3, r9
 8011678:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 801167c:	4628      	mov	r0, r5
 801167e:	f7ff feed 	bl	801145c <__cvt>
 8011682:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8011686:	2b47      	cmp	r3, #71	; 0x47
 8011688:	4607      	mov	r7, r0
 801168a:	d109      	bne.n	80116a0 <_printf_float+0x120>
 801168c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801168e:	1cd8      	adds	r0, r3, #3
 8011690:	db02      	blt.n	8011698 <_printf_float+0x118>
 8011692:	6862      	ldr	r2, [r4, #4]
 8011694:	4293      	cmp	r3, r2
 8011696:	dd47      	ble.n	8011728 <_printf_float+0x1a8>
 8011698:	f1a8 0802 	sub.w	r8, r8, #2
 801169c:	fa5f f888 	uxtb.w	r8, r8
 80116a0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80116a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80116a6:	d824      	bhi.n	80116f2 <_printf_float+0x172>
 80116a8:	3901      	subs	r1, #1
 80116aa:	4642      	mov	r2, r8
 80116ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80116b0:	910d      	str	r1, [sp, #52]	; 0x34
 80116b2:	f7ff ff2f 	bl	8011514 <__exponent>
 80116b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80116b8:	4681      	mov	r9, r0
 80116ba:	1813      	adds	r3, r2, r0
 80116bc:	2a01      	cmp	r2, #1
 80116be:	6123      	str	r3, [r4, #16]
 80116c0:	dc02      	bgt.n	80116c8 <_printf_float+0x148>
 80116c2:	6822      	ldr	r2, [r4, #0]
 80116c4:	07d1      	lsls	r1, r2, #31
 80116c6:	d501      	bpl.n	80116cc <_printf_float+0x14c>
 80116c8:	3301      	adds	r3, #1
 80116ca:	6123      	str	r3, [r4, #16]
 80116cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d0a2      	beq.n	801161a <_printf_float+0x9a>
 80116d4:	232d      	movs	r3, #45	; 0x2d
 80116d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116da:	e79e      	b.n	801161a <_printf_float+0x9a>
 80116dc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80116e0:	f000 816e 	beq.w	80119c0 <_printf_float+0x440>
 80116e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80116e8:	d1b9      	bne.n	801165e <_printf_float+0xde>
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d1b7      	bne.n	801165e <_printf_float+0xde>
 80116ee:	2301      	movs	r3, #1
 80116f0:	e7b4      	b.n	801165c <_printf_float+0xdc>
 80116f2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80116f6:	d119      	bne.n	801172c <_printf_float+0x1ac>
 80116f8:	2900      	cmp	r1, #0
 80116fa:	6863      	ldr	r3, [r4, #4]
 80116fc:	dd0c      	ble.n	8011718 <_printf_float+0x198>
 80116fe:	6121      	str	r1, [r4, #16]
 8011700:	b913      	cbnz	r3, 8011708 <_printf_float+0x188>
 8011702:	6822      	ldr	r2, [r4, #0]
 8011704:	07d2      	lsls	r2, r2, #31
 8011706:	d502      	bpl.n	801170e <_printf_float+0x18e>
 8011708:	3301      	adds	r3, #1
 801170a:	440b      	add	r3, r1
 801170c:	6123      	str	r3, [r4, #16]
 801170e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011710:	f04f 0900 	mov.w	r9, #0
 8011714:	65a3      	str	r3, [r4, #88]	; 0x58
 8011716:	e7d9      	b.n	80116cc <_printf_float+0x14c>
 8011718:	b913      	cbnz	r3, 8011720 <_printf_float+0x1a0>
 801171a:	6822      	ldr	r2, [r4, #0]
 801171c:	07d0      	lsls	r0, r2, #31
 801171e:	d501      	bpl.n	8011724 <_printf_float+0x1a4>
 8011720:	3302      	adds	r3, #2
 8011722:	e7f3      	b.n	801170c <_printf_float+0x18c>
 8011724:	2301      	movs	r3, #1
 8011726:	e7f1      	b.n	801170c <_printf_float+0x18c>
 8011728:	f04f 0867 	mov.w	r8, #103	; 0x67
 801172c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8011730:	4293      	cmp	r3, r2
 8011732:	db05      	blt.n	8011740 <_printf_float+0x1c0>
 8011734:	6822      	ldr	r2, [r4, #0]
 8011736:	6123      	str	r3, [r4, #16]
 8011738:	07d1      	lsls	r1, r2, #31
 801173a:	d5e8      	bpl.n	801170e <_printf_float+0x18e>
 801173c:	3301      	adds	r3, #1
 801173e:	e7e5      	b.n	801170c <_printf_float+0x18c>
 8011740:	2b00      	cmp	r3, #0
 8011742:	bfcc      	ite	gt
 8011744:	2301      	movgt	r3, #1
 8011746:	f1c3 0302 	rsble	r3, r3, #2
 801174a:	4413      	add	r3, r2
 801174c:	e7de      	b.n	801170c <_printf_float+0x18c>
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	055a      	lsls	r2, r3, #21
 8011752:	d407      	bmi.n	8011764 <_printf_float+0x1e4>
 8011754:	6923      	ldr	r3, [r4, #16]
 8011756:	463a      	mov	r2, r7
 8011758:	4659      	mov	r1, fp
 801175a:	4628      	mov	r0, r5
 801175c:	47b0      	blx	r6
 801175e:	3001      	adds	r0, #1
 8011760:	d129      	bne.n	80117b6 <_printf_float+0x236>
 8011762:	e764      	b.n	801162e <_printf_float+0xae>
 8011764:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8011768:	f240 80d7 	bls.w	801191a <_printf_float+0x39a>
 801176c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011770:	2200      	movs	r2, #0
 8011772:	2300      	movs	r3, #0
 8011774:	f7ef f918 	bl	80009a8 <__aeabi_dcmpeq>
 8011778:	b388      	cbz	r0, 80117de <_printf_float+0x25e>
 801177a:	2301      	movs	r3, #1
 801177c:	4a40      	ldr	r2, [pc, #256]	; (8011880 <_printf_float+0x300>)
 801177e:	4659      	mov	r1, fp
 8011780:	4628      	mov	r0, r5
 8011782:	47b0      	blx	r6
 8011784:	3001      	adds	r0, #1
 8011786:	f43f af52 	beq.w	801162e <_printf_float+0xae>
 801178a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801178e:	429a      	cmp	r2, r3
 8011790:	db02      	blt.n	8011798 <_printf_float+0x218>
 8011792:	6823      	ldr	r3, [r4, #0]
 8011794:	07d8      	lsls	r0, r3, #31
 8011796:	d50e      	bpl.n	80117b6 <_printf_float+0x236>
 8011798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801179c:	4659      	mov	r1, fp
 801179e:	4628      	mov	r0, r5
 80117a0:	47b0      	blx	r6
 80117a2:	3001      	adds	r0, #1
 80117a4:	f43f af43 	beq.w	801162e <_printf_float+0xae>
 80117a8:	2700      	movs	r7, #0
 80117aa:	f104 081a 	add.w	r8, r4, #26
 80117ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117b0:	3b01      	subs	r3, #1
 80117b2:	42bb      	cmp	r3, r7
 80117b4:	dc09      	bgt.n	80117ca <_printf_float+0x24a>
 80117b6:	6823      	ldr	r3, [r4, #0]
 80117b8:	079f      	lsls	r7, r3, #30
 80117ba:	f100 80fd 	bmi.w	80119b8 <_printf_float+0x438>
 80117be:	68e0      	ldr	r0, [r4, #12]
 80117c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117c2:	4298      	cmp	r0, r3
 80117c4:	bfb8      	it	lt
 80117c6:	4618      	movlt	r0, r3
 80117c8:	e733      	b.n	8011632 <_printf_float+0xb2>
 80117ca:	2301      	movs	r3, #1
 80117cc:	4642      	mov	r2, r8
 80117ce:	4659      	mov	r1, fp
 80117d0:	4628      	mov	r0, r5
 80117d2:	47b0      	blx	r6
 80117d4:	3001      	adds	r0, #1
 80117d6:	f43f af2a 	beq.w	801162e <_printf_float+0xae>
 80117da:	3701      	adds	r7, #1
 80117dc:	e7e7      	b.n	80117ae <_printf_float+0x22e>
 80117de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	dc2b      	bgt.n	801183c <_printf_float+0x2bc>
 80117e4:	2301      	movs	r3, #1
 80117e6:	4a26      	ldr	r2, [pc, #152]	; (8011880 <_printf_float+0x300>)
 80117e8:	4659      	mov	r1, fp
 80117ea:	4628      	mov	r0, r5
 80117ec:	47b0      	blx	r6
 80117ee:	3001      	adds	r0, #1
 80117f0:	f43f af1d 	beq.w	801162e <_printf_float+0xae>
 80117f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117f6:	b923      	cbnz	r3, 8011802 <_printf_float+0x282>
 80117f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117fa:	b913      	cbnz	r3, 8011802 <_printf_float+0x282>
 80117fc:	6823      	ldr	r3, [r4, #0]
 80117fe:	07d9      	lsls	r1, r3, #31
 8011800:	d5d9      	bpl.n	80117b6 <_printf_float+0x236>
 8011802:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011806:	4659      	mov	r1, fp
 8011808:	4628      	mov	r0, r5
 801180a:	47b0      	blx	r6
 801180c:	3001      	adds	r0, #1
 801180e:	f43f af0e 	beq.w	801162e <_printf_float+0xae>
 8011812:	f04f 0800 	mov.w	r8, #0
 8011816:	f104 091a 	add.w	r9, r4, #26
 801181a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801181c:	425b      	negs	r3, r3
 801181e:	4543      	cmp	r3, r8
 8011820:	dc01      	bgt.n	8011826 <_printf_float+0x2a6>
 8011822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011824:	e797      	b.n	8011756 <_printf_float+0x1d6>
 8011826:	2301      	movs	r3, #1
 8011828:	464a      	mov	r2, r9
 801182a:	4659      	mov	r1, fp
 801182c:	4628      	mov	r0, r5
 801182e:	47b0      	blx	r6
 8011830:	3001      	adds	r0, #1
 8011832:	f43f aefc 	beq.w	801162e <_printf_float+0xae>
 8011836:	f108 0801 	add.w	r8, r8, #1
 801183a:	e7ee      	b.n	801181a <_printf_float+0x29a>
 801183c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801183e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011840:	429a      	cmp	r2, r3
 8011842:	bfa8      	it	ge
 8011844:	461a      	movge	r2, r3
 8011846:	2a00      	cmp	r2, #0
 8011848:	4690      	mov	r8, r2
 801184a:	dd07      	ble.n	801185c <_printf_float+0x2dc>
 801184c:	4613      	mov	r3, r2
 801184e:	4659      	mov	r1, fp
 8011850:	463a      	mov	r2, r7
 8011852:	4628      	mov	r0, r5
 8011854:	47b0      	blx	r6
 8011856:	3001      	adds	r0, #1
 8011858:	f43f aee9 	beq.w	801162e <_printf_float+0xae>
 801185c:	f104 031a 	add.w	r3, r4, #26
 8011860:	f04f 0a00 	mov.w	sl, #0
 8011864:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8011868:	930b      	str	r3, [sp, #44]	; 0x2c
 801186a:	e015      	b.n	8011898 <_printf_float+0x318>
 801186c:	7fefffff 	.word	0x7fefffff
 8011870:	080183b1 	.word	0x080183b1
 8011874:	080183ad 	.word	0x080183ad
 8011878:	080183b9 	.word	0x080183b9
 801187c:	080183b5 	.word	0x080183b5
 8011880:	080183bd 	.word	0x080183bd
 8011884:	2301      	movs	r3, #1
 8011886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011888:	4659      	mov	r1, fp
 801188a:	4628      	mov	r0, r5
 801188c:	47b0      	blx	r6
 801188e:	3001      	adds	r0, #1
 8011890:	f43f aecd 	beq.w	801162e <_printf_float+0xae>
 8011894:	f10a 0a01 	add.w	sl, sl, #1
 8011898:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801189c:	eba9 0308 	sub.w	r3, r9, r8
 80118a0:	4553      	cmp	r3, sl
 80118a2:	dcef      	bgt.n	8011884 <_printf_float+0x304>
 80118a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80118a8:	429a      	cmp	r2, r3
 80118aa:	444f      	add	r7, r9
 80118ac:	db14      	blt.n	80118d8 <_printf_float+0x358>
 80118ae:	6823      	ldr	r3, [r4, #0]
 80118b0:	07da      	lsls	r2, r3, #31
 80118b2:	d411      	bmi.n	80118d8 <_printf_float+0x358>
 80118b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80118b8:	eba3 0209 	sub.w	r2, r3, r9
 80118bc:	eba3 0901 	sub.w	r9, r3, r1
 80118c0:	4591      	cmp	r9, r2
 80118c2:	bfa8      	it	ge
 80118c4:	4691      	movge	r9, r2
 80118c6:	f1b9 0f00 	cmp.w	r9, #0
 80118ca:	dc0d      	bgt.n	80118e8 <_printf_float+0x368>
 80118cc:	2700      	movs	r7, #0
 80118ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80118d2:	f104 081a 	add.w	r8, r4, #26
 80118d6:	e018      	b.n	801190a <_printf_float+0x38a>
 80118d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118dc:	4659      	mov	r1, fp
 80118de:	4628      	mov	r0, r5
 80118e0:	47b0      	blx	r6
 80118e2:	3001      	adds	r0, #1
 80118e4:	d1e6      	bne.n	80118b4 <_printf_float+0x334>
 80118e6:	e6a2      	b.n	801162e <_printf_float+0xae>
 80118e8:	464b      	mov	r3, r9
 80118ea:	463a      	mov	r2, r7
 80118ec:	4659      	mov	r1, fp
 80118ee:	4628      	mov	r0, r5
 80118f0:	47b0      	blx	r6
 80118f2:	3001      	adds	r0, #1
 80118f4:	d1ea      	bne.n	80118cc <_printf_float+0x34c>
 80118f6:	e69a      	b.n	801162e <_printf_float+0xae>
 80118f8:	2301      	movs	r3, #1
 80118fa:	4642      	mov	r2, r8
 80118fc:	4659      	mov	r1, fp
 80118fe:	4628      	mov	r0, r5
 8011900:	47b0      	blx	r6
 8011902:	3001      	adds	r0, #1
 8011904:	f43f ae93 	beq.w	801162e <_printf_float+0xae>
 8011908:	3701      	adds	r7, #1
 801190a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801190e:	1a9b      	subs	r3, r3, r2
 8011910:	eba3 0309 	sub.w	r3, r3, r9
 8011914:	42bb      	cmp	r3, r7
 8011916:	dcef      	bgt.n	80118f8 <_printf_float+0x378>
 8011918:	e74d      	b.n	80117b6 <_printf_float+0x236>
 801191a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801191c:	2a01      	cmp	r2, #1
 801191e:	dc01      	bgt.n	8011924 <_printf_float+0x3a4>
 8011920:	07db      	lsls	r3, r3, #31
 8011922:	d538      	bpl.n	8011996 <_printf_float+0x416>
 8011924:	2301      	movs	r3, #1
 8011926:	463a      	mov	r2, r7
 8011928:	4659      	mov	r1, fp
 801192a:	4628      	mov	r0, r5
 801192c:	47b0      	blx	r6
 801192e:	3001      	adds	r0, #1
 8011930:	f43f ae7d 	beq.w	801162e <_printf_float+0xae>
 8011934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011938:	4659      	mov	r1, fp
 801193a:	4628      	mov	r0, r5
 801193c:	47b0      	blx	r6
 801193e:	3001      	adds	r0, #1
 8011940:	f107 0701 	add.w	r7, r7, #1
 8011944:	f43f ae73 	beq.w	801162e <_printf_float+0xae>
 8011948:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801194c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801194e:	2200      	movs	r2, #0
 8011950:	f103 38ff 	add.w	r8, r3, #4294967295
 8011954:	2300      	movs	r3, #0
 8011956:	f7ef f827 	bl	80009a8 <__aeabi_dcmpeq>
 801195a:	b9c0      	cbnz	r0, 801198e <_printf_float+0x40e>
 801195c:	4643      	mov	r3, r8
 801195e:	463a      	mov	r2, r7
 8011960:	4659      	mov	r1, fp
 8011962:	4628      	mov	r0, r5
 8011964:	47b0      	blx	r6
 8011966:	3001      	adds	r0, #1
 8011968:	d10d      	bne.n	8011986 <_printf_float+0x406>
 801196a:	e660      	b.n	801162e <_printf_float+0xae>
 801196c:	2301      	movs	r3, #1
 801196e:	4642      	mov	r2, r8
 8011970:	4659      	mov	r1, fp
 8011972:	4628      	mov	r0, r5
 8011974:	47b0      	blx	r6
 8011976:	3001      	adds	r0, #1
 8011978:	f43f ae59 	beq.w	801162e <_printf_float+0xae>
 801197c:	3701      	adds	r7, #1
 801197e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011980:	3b01      	subs	r3, #1
 8011982:	42bb      	cmp	r3, r7
 8011984:	dcf2      	bgt.n	801196c <_printf_float+0x3ec>
 8011986:	464b      	mov	r3, r9
 8011988:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801198c:	e6e4      	b.n	8011758 <_printf_float+0x1d8>
 801198e:	2700      	movs	r7, #0
 8011990:	f104 081a 	add.w	r8, r4, #26
 8011994:	e7f3      	b.n	801197e <_printf_float+0x3fe>
 8011996:	2301      	movs	r3, #1
 8011998:	e7e1      	b.n	801195e <_printf_float+0x3de>
 801199a:	2301      	movs	r3, #1
 801199c:	4642      	mov	r2, r8
 801199e:	4659      	mov	r1, fp
 80119a0:	4628      	mov	r0, r5
 80119a2:	47b0      	blx	r6
 80119a4:	3001      	adds	r0, #1
 80119a6:	f43f ae42 	beq.w	801162e <_printf_float+0xae>
 80119aa:	3701      	adds	r7, #1
 80119ac:	68e3      	ldr	r3, [r4, #12]
 80119ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80119b0:	1a9b      	subs	r3, r3, r2
 80119b2:	42bb      	cmp	r3, r7
 80119b4:	dcf1      	bgt.n	801199a <_printf_float+0x41a>
 80119b6:	e702      	b.n	80117be <_printf_float+0x23e>
 80119b8:	2700      	movs	r7, #0
 80119ba:	f104 0819 	add.w	r8, r4, #25
 80119be:	e7f5      	b.n	80119ac <_printf_float+0x42c>
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	f43f ae94 	beq.w	80116ee <_printf_float+0x16e>
 80119c6:	f04f 0c00 	mov.w	ip, #0
 80119ca:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80119ce:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80119d2:	6022      	str	r2, [r4, #0]
 80119d4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80119d8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80119dc:	9300      	str	r3, [sp, #0]
 80119de:	463a      	mov	r2, r7
 80119e0:	464b      	mov	r3, r9
 80119e2:	4628      	mov	r0, r5
 80119e4:	f7ff fd3a 	bl	801145c <__cvt>
 80119e8:	4607      	mov	r7, r0
 80119ea:	e64f      	b.n	801168c <_printf_float+0x10c>

080119ec <_printf_common>:
 80119ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119f0:	4691      	mov	r9, r2
 80119f2:	461f      	mov	r7, r3
 80119f4:	688a      	ldr	r2, [r1, #8]
 80119f6:	690b      	ldr	r3, [r1, #16]
 80119f8:	4606      	mov	r6, r0
 80119fa:	4293      	cmp	r3, r2
 80119fc:	bfb8      	it	lt
 80119fe:	4613      	movlt	r3, r2
 8011a00:	f8c9 3000 	str.w	r3, [r9]
 8011a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011a08:	460c      	mov	r4, r1
 8011a0a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a0e:	b112      	cbz	r2, 8011a16 <_printf_common+0x2a>
 8011a10:	3301      	adds	r3, #1
 8011a12:	f8c9 3000 	str.w	r3, [r9]
 8011a16:	6823      	ldr	r3, [r4, #0]
 8011a18:	0699      	lsls	r1, r3, #26
 8011a1a:	bf42      	ittt	mi
 8011a1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011a20:	3302      	addmi	r3, #2
 8011a22:	f8c9 3000 	strmi.w	r3, [r9]
 8011a26:	6825      	ldr	r5, [r4, #0]
 8011a28:	f015 0506 	ands.w	r5, r5, #6
 8011a2c:	d107      	bne.n	8011a3e <_printf_common+0x52>
 8011a2e:	f104 0a19 	add.w	sl, r4, #25
 8011a32:	68e3      	ldr	r3, [r4, #12]
 8011a34:	f8d9 2000 	ldr.w	r2, [r9]
 8011a38:	1a9b      	subs	r3, r3, r2
 8011a3a:	42ab      	cmp	r3, r5
 8011a3c:	dc29      	bgt.n	8011a92 <_printf_common+0xa6>
 8011a3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011a42:	6822      	ldr	r2, [r4, #0]
 8011a44:	3300      	adds	r3, #0
 8011a46:	bf18      	it	ne
 8011a48:	2301      	movne	r3, #1
 8011a4a:	0692      	lsls	r2, r2, #26
 8011a4c:	d42e      	bmi.n	8011aac <_printf_common+0xc0>
 8011a4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011a52:	4639      	mov	r1, r7
 8011a54:	4630      	mov	r0, r6
 8011a56:	47c0      	blx	r8
 8011a58:	3001      	adds	r0, #1
 8011a5a:	d021      	beq.n	8011aa0 <_printf_common+0xb4>
 8011a5c:	6823      	ldr	r3, [r4, #0]
 8011a5e:	68e5      	ldr	r5, [r4, #12]
 8011a60:	f003 0306 	and.w	r3, r3, #6
 8011a64:	2b04      	cmp	r3, #4
 8011a66:	bf18      	it	ne
 8011a68:	2500      	movne	r5, #0
 8011a6a:	f8d9 2000 	ldr.w	r2, [r9]
 8011a6e:	f04f 0900 	mov.w	r9, #0
 8011a72:	bf08      	it	eq
 8011a74:	1aad      	subeq	r5, r5, r2
 8011a76:	68a3      	ldr	r3, [r4, #8]
 8011a78:	6922      	ldr	r2, [r4, #16]
 8011a7a:	bf08      	it	eq
 8011a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a80:	4293      	cmp	r3, r2
 8011a82:	bfc4      	itt	gt
 8011a84:	1a9b      	subgt	r3, r3, r2
 8011a86:	18ed      	addgt	r5, r5, r3
 8011a88:	341a      	adds	r4, #26
 8011a8a:	454d      	cmp	r5, r9
 8011a8c:	d11a      	bne.n	8011ac4 <_printf_common+0xd8>
 8011a8e:	2000      	movs	r0, #0
 8011a90:	e008      	b.n	8011aa4 <_printf_common+0xb8>
 8011a92:	2301      	movs	r3, #1
 8011a94:	4652      	mov	r2, sl
 8011a96:	4639      	mov	r1, r7
 8011a98:	4630      	mov	r0, r6
 8011a9a:	47c0      	blx	r8
 8011a9c:	3001      	adds	r0, #1
 8011a9e:	d103      	bne.n	8011aa8 <_printf_common+0xbc>
 8011aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8011aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa8:	3501      	adds	r5, #1
 8011aaa:	e7c2      	b.n	8011a32 <_printf_common+0x46>
 8011aac:	2030      	movs	r0, #48	; 0x30
 8011aae:	18e1      	adds	r1, r4, r3
 8011ab0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ab4:	1c5a      	adds	r2, r3, #1
 8011ab6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011aba:	4422      	add	r2, r4
 8011abc:	3302      	adds	r3, #2
 8011abe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011ac2:	e7c4      	b.n	8011a4e <_printf_common+0x62>
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	4622      	mov	r2, r4
 8011ac8:	4639      	mov	r1, r7
 8011aca:	4630      	mov	r0, r6
 8011acc:	47c0      	blx	r8
 8011ace:	3001      	adds	r0, #1
 8011ad0:	d0e6      	beq.n	8011aa0 <_printf_common+0xb4>
 8011ad2:	f109 0901 	add.w	r9, r9, #1
 8011ad6:	e7d8      	b.n	8011a8a <_printf_common+0x9e>

08011ad8 <_printf_i>:
 8011ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011adc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011ae0:	460c      	mov	r4, r1
 8011ae2:	7e09      	ldrb	r1, [r1, #24]
 8011ae4:	b085      	sub	sp, #20
 8011ae6:	296e      	cmp	r1, #110	; 0x6e
 8011ae8:	4617      	mov	r7, r2
 8011aea:	4606      	mov	r6, r0
 8011aec:	4698      	mov	r8, r3
 8011aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011af0:	f000 80b3 	beq.w	8011c5a <_printf_i+0x182>
 8011af4:	d822      	bhi.n	8011b3c <_printf_i+0x64>
 8011af6:	2963      	cmp	r1, #99	; 0x63
 8011af8:	d036      	beq.n	8011b68 <_printf_i+0x90>
 8011afa:	d80a      	bhi.n	8011b12 <_printf_i+0x3a>
 8011afc:	2900      	cmp	r1, #0
 8011afe:	f000 80b9 	beq.w	8011c74 <_printf_i+0x19c>
 8011b02:	2958      	cmp	r1, #88	; 0x58
 8011b04:	f000 8083 	beq.w	8011c0e <_printf_i+0x136>
 8011b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011b10:	e032      	b.n	8011b78 <_printf_i+0xa0>
 8011b12:	2964      	cmp	r1, #100	; 0x64
 8011b14:	d001      	beq.n	8011b1a <_printf_i+0x42>
 8011b16:	2969      	cmp	r1, #105	; 0x69
 8011b18:	d1f6      	bne.n	8011b08 <_printf_i+0x30>
 8011b1a:	6820      	ldr	r0, [r4, #0]
 8011b1c:	6813      	ldr	r3, [r2, #0]
 8011b1e:	0605      	lsls	r5, r0, #24
 8011b20:	f103 0104 	add.w	r1, r3, #4
 8011b24:	d52a      	bpl.n	8011b7c <_printf_i+0xa4>
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	6011      	str	r1, [r2, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	da03      	bge.n	8011b36 <_printf_i+0x5e>
 8011b2e:	222d      	movs	r2, #45	; 0x2d
 8011b30:	425b      	negs	r3, r3
 8011b32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011b36:	486f      	ldr	r0, [pc, #444]	; (8011cf4 <_printf_i+0x21c>)
 8011b38:	220a      	movs	r2, #10
 8011b3a:	e039      	b.n	8011bb0 <_printf_i+0xd8>
 8011b3c:	2973      	cmp	r1, #115	; 0x73
 8011b3e:	f000 809d 	beq.w	8011c7c <_printf_i+0x1a4>
 8011b42:	d808      	bhi.n	8011b56 <_printf_i+0x7e>
 8011b44:	296f      	cmp	r1, #111	; 0x6f
 8011b46:	d020      	beq.n	8011b8a <_printf_i+0xb2>
 8011b48:	2970      	cmp	r1, #112	; 0x70
 8011b4a:	d1dd      	bne.n	8011b08 <_printf_i+0x30>
 8011b4c:	6823      	ldr	r3, [r4, #0]
 8011b4e:	f043 0320 	orr.w	r3, r3, #32
 8011b52:	6023      	str	r3, [r4, #0]
 8011b54:	e003      	b.n	8011b5e <_printf_i+0x86>
 8011b56:	2975      	cmp	r1, #117	; 0x75
 8011b58:	d017      	beq.n	8011b8a <_printf_i+0xb2>
 8011b5a:	2978      	cmp	r1, #120	; 0x78
 8011b5c:	d1d4      	bne.n	8011b08 <_printf_i+0x30>
 8011b5e:	2378      	movs	r3, #120	; 0x78
 8011b60:	4865      	ldr	r0, [pc, #404]	; (8011cf8 <_printf_i+0x220>)
 8011b62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011b66:	e055      	b.n	8011c14 <_printf_i+0x13c>
 8011b68:	6813      	ldr	r3, [r2, #0]
 8011b6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b6e:	1d19      	adds	r1, r3, #4
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	6011      	str	r1, [r2, #0]
 8011b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e08c      	b.n	8011c96 <_printf_i+0x1be>
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011b82:	6011      	str	r1, [r2, #0]
 8011b84:	bf18      	it	ne
 8011b86:	b21b      	sxthne	r3, r3
 8011b88:	e7cf      	b.n	8011b2a <_printf_i+0x52>
 8011b8a:	6813      	ldr	r3, [r2, #0]
 8011b8c:	6825      	ldr	r5, [r4, #0]
 8011b8e:	1d18      	adds	r0, r3, #4
 8011b90:	6010      	str	r0, [r2, #0]
 8011b92:	0628      	lsls	r0, r5, #24
 8011b94:	d501      	bpl.n	8011b9a <_printf_i+0xc2>
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	e002      	b.n	8011ba0 <_printf_i+0xc8>
 8011b9a:	0668      	lsls	r0, r5, #25
 8011b9c:	d5fb      	bpl.n	8011b96 <_printf_i+0xbe>
 8011b9e:	881b      	ldrh	r3, [r3, #0]
 8011ba0:	296f      	cmp	r1, #111	; 0x6f
 8011ba2:	bf14      	ite	ne
 8011ba4:	220a      	movne	r2, #10
 8011ba6:	2208      	moveq	r2, #8
 8011ba8:	4852      	ldr	r0, [pc, #328]	; (8011cf4 <_printf_i+0x21c>)
 8011baa:	2100      	movs	r1, #0
 8011bac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011bb0:	6865      	ldr	r5, [r4, #4]
 8011bb2:	2d00      	cmp	r5, #0
 8011bb4:	60a5      	str	r5, [r4, #8]
 8011bb6:	f2c0 8095 	blt.w	8011ce4 <_printf_i+0x20c>
 8011bba:	6821      	ldr	r1, [r4, #0]
 8011bbc:	f021 0104 	bic.w	r1, r1, #4
 8011bc0:	6021      	str	r1, [r4, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d13d      	bne.n	8011c42 <_printf_i+0x16a>
 8011bc6:	2d00      	cmp	r5, #0
 8011bc8:	f040 808e 	bne.w	8011ce8 <_printf_i+0x210>
 8011bcc:	4665      	mov	r5, ip
 8011bce:	2a08      	cmp	r2, #8
 8011bd0:	d10b      	bne.n	8011bea <_printf_i+0x112>
 8011bd2:	6823      	ldr	r3, [r4, #0]
 8011bd4:	07db      	lsls	r3, r3, #31
 8011bd6:	d508      	bpl.n	8011bea <_printf_i+0x112>
 8011bd8:	6923      	ldr	r3, [r4, #16]
 8011bda:	6862      	ldr	r2, [r4, #4]
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	bfde      	ittt	le
 8011be0:	2330      	movle	r3, #48	; 0x30
 8011be2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011be6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011bea:	ebac 0305 	sub.w	r3, ip, r5
 8011bee:	6123      	str	r3, [r4, #16]
 8011bf0:	f8cd 8000 	str.w	r8, [sp]
 8011bf4:	463b      	mov	r3, r7
 8011bf6:	aa03      	add	r2, sp, #12
 8011bf8:	4621      	mov	r1, r4
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f7ff fef6 	bl	80119ec <_printf_common>
 8011c00:	3001      	adds	r0, #1
 8011c02:	d14d      	bne.n	8011ca0 <_printf_i+0x1c8>
 8011c04:	f04f 30ff 	mov.w	r0, #4294967295
 8011c08:	b005      	add	sp, #20
 8011c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c0e:	4839      	ldr	r0, [pc, #228]	; (8011cf4 <_printf_i+0x21c>)
 8011c10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011c14:	6813      	ldr	r3, [r2, #0]
 8011c16:	6821      	ldr	r1, [r4, #0]
 8011c18:	1d1d      	adds	r5, r3, #4
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	6015      	str	r5, [r2, #0]
 8011c1e:	060a      	lsls	r2, r1, #24
 8011c20:	d50b      	bpl.n	8011c3a <_printf_i+0x162>
 8011c22:	07ca      	lsls	r2, r1, #31
 8011c24:	bf44      	itt	mi
 8011c26:	f041 0120 	orrmi.w	r1, r1, #32
 8011c2a:	6021      	strmi	r1, [r4, #0]
 8011c2c:	b91b      	cbnz	r3, 8011c36 <_printf_i+0x15e>
 8011c2e:	6822      	ldr	r2, [r4, #0]
 8011c30:	f022 0220 	bic.w	r2, r2, #32
 8011c34:	6022      	str	r2, [r4, #0]
 8011c36:	2210      	movs	r2, #16
 8011c38:	e7b7      	b.n	8011baa <_printf_i+0xd2>
 8011c3a:	064d      	lsls	r5, r1, #25
 8011c3c:	bf48      	it	mi
 8011c3e:	b29b      	uxthmi	r3, r3
 8011c40:	e7ef      	b.n	8011c22 <_printf_i+0x14a>
 8011c42:	4665      	mov	r5, ip
 8011c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c48:	fb02 3311 	mls	r3, r2, r1, r3
 8011c4c:	5cc3      	ldrb	r3, [r0, r3]
 8011c4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011c52:	460b      	mov	r3, r1
 8011c54:	2900      	cmp	r1, #0
 8011c56:	d1f5      	bne.n	8011c44 <_printf_i+0x16c>
 8011c58:	e7b9      	b.n	8011bce <_printf_i+0xf6>
 8011c5a:	6813      	ldr	r3, [r2, #0]
 8011c5c:	6825      	ldr	r5, [r4, #0]
 8011c5e:	1d18      	adds	r0, r3, #4
 8011c60:	6961      	ldr	r1, [r4, #20]
 8011c62:	6010      	str	r0, [r2, #0]
 8011c64:	0628      	lsls	r0, r5, #24
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	d501      	bpl.n	8011c6e <_printf_i+0x196>
 8011c6a:	6019      	str	r1, [r3, #0]
 8011c6c:	e002      	b.n	8011c74 <_printf_i+0x19c>
 8011c6e:	066a      	lsls	r2, r5, #25
 8011c70:	d5fb      	bpl.n	8011c6a <_printf_i+0x192>
 8011c72:	8019      	strh	r1, [r3, #0]
 8011c74:	2300      	movs	r3, #0
 8011c76:	4665      	mov	r5, ip
 8011c78:	6123      	str	r3, [r4, #16]
 8011c7a:	e7b9      	b.n	8011bf0 <_printf_i+0x118>
 8011c7c:	6813      	ldr	r3, [r2, #0]
 8011c7e:	1d19      	adds	r1, r3, #4
 8011c80:	6011      	str	r1, [r2, #0]
 8011c82:	681d      	ldr	r5, [r3, #0]
 8011c84:	6862      	ldr	r2, [r4, #4]
 8011c86:	2100      	movs	r1, #0
 8011c88:	4628      	mov	r0, r5
 8011c8a:	f7ff faf7 	bl	801127c <memchr>
 8011c8e:	b108      	cbz	r0, 8011c94 <_printf_i+0x1bc>
 8011c90:	1b40      	subs	r0, r0, r5
 8011c92:	6060      	str	r0, [r4, #4]
 8011c94:	6863      	ldr	r3, [r4, #4]
 8011c96:	6123      	str	r3, [r4, #16]
 8011c98:	2300      	movs	r3, #0
 8011c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c9e:	e7a7      	b.n	8011bf0 <_printf_i+0x118>
 8011ca0:	6923      	ldr	r3, [r4, #16]
 8011ca2:	462a      	mov	r2, r5
 8011ca4:	4639      	mov	r1, r7
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	47c0      	blx	r8
 8011caa:	3001      	adds	r0, #1
 8011cac:	d0aa      	beq.n	8011c04 <_printf_i+0x12c>
 8011cae:	6823      	ldr	r3, [r4, #0]
 8011cb0:	079b      	lsls	r3, r3, #30
 8011cb2:	d413      	bmi.n	8011cdc <_printf_i+0x204>
 8011cb4:	68e0      	ldr	r0, [r4, #12]
 8011cb6:	9b03      	ldr	r3, [sp, #12]
 8011cb8:	4298      	cmp	r0, r3
 8011cba:	bfb8      	it	lt
 8011cbc:	4618      	movlt	r0, r3
 8011cbe:	e7a3      	b.n	8011c08 <_printf_i+0x130>
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	464a      	mov	r2, r9
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	4630      	mov	r0, r6
 8011cc8:	47c0      	blx	r8
 8011cca:	3001      	adds	r0, #1
 8011ccc:	d09a      	beq.n	8011c04 <_printf_i+0x12c>
 8011cce:	3501      	adds	r5, #1
 8011cd0:	68e3      	ldr	r3, [r4, #12]
 8011cd2:	9a03      	ldr	r2, [sp, #12]
 8011cd4:	1a9b      	subs	r3, r3, r2
 8011cd6:	42ab      	cmp	r3, r5
 8011cd8:	dcf2      	bgt.n	8011cc0 <_printf_i+0x1e8>
 8011cda:	e7eb      	b.n	8011cb4 <_printf_i+0x1dc>
 8011cdc:	2500      	movs	r5, #0
 8011cde:	f104 0919 	add.w	r9, r4, #25
 8011ce2:	e7f5      	b.n	8011cd0 <_printf_i+0x1f8>
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d1ac      	bne.n	8011c42 <_printf_i+0x16a>
 8011ce8:	7803      	ldrb	r3, [r0, #0]
 8011cea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011cf2:	e76c      	b.n	8011bce <_printf_i+0xf6>
 8011cf4:	080183bf 	.word	0x080183bf
 8011cf8:	080183d0 	.word	0x080183d0

08011cfc <_scanf_float>:
 8011cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d00:	469a      	mov	sl, r3
 8011d02:	688b      	ldr	r3, [r1, #8]
 8011d04:	4616      	mov	r6, r2
 8011d06:	1e5a      	subs	r2, r3, #1
 8011d08:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011d0c:	bf88      	it	hi
 8011d0e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8011d12:	b087      	sub	sp, #28
 8011d14:	bf85      	ittet	hi
 8011d16:	189b      	addhi	r3, r3, r2
 8011d18:	9301      	strhi	r3, [sp, #4]
 8011d1a:	2300      	movls	r3, #0
 8011d1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011d20:	4688      	mov	r8, r1
 8011d22:	f04f 0b00 	mov.w	fp, #0
 8011d26:	bf8c      	ite	hi
 8011d28:	608b      	strhi	r3, [r1, #8]
 8011d2a:	9301      	strls	r3, [sp, #4]
 8011d2c:	680b      	ldr	r3, [r1, #0]
 8011d2e:	4607      	mov	r7, r0
 8011d30:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011d34:	f848 3b1c 	str.w	r3, [r8], #28
 8011d38:	460c      	mov	r4, r1
 8011d3a:	4645      	mov	r5, r8
 8011d3c:	465a      	mov	r2, fp
 8011d3e:	46d9      	mov	r9, fp
 8011d40:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8011d44:	f8cd b008 	str.w	fp, [sp, #8]
 8011d48:	68a1      	ldr	r1, [r4, #8]
 8011d4a:	b181      	cbz	r1, 8011d6e <_scanf_float+0x72>
 8011d4c:	6833      	ldr	r3, [r6, #0]
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	2b49      	cmp	r3, #73	; 0x49
 8011d52:	d071      	beq.n	8011e38 <_scanf_float+0x13c>
 8011d54:	d84d      	bhi.n	8011df2 <_scanf_float+0xf6>
 8011d56:	2b39      	cmp	r3, #57	; 0x39
 8011d58:	d840      	bhi.n	8011ddc <_scanf_float+0xe0>
 8011d5a:	2b31      	cmp	r3, #49	; 0x31
 8011d5c:	f080 8088 	bcs.w	8011e70 <_scanf_float+0x174>
 8011d60:	2b2d      	cmp	r3, #45	; 0x2d
 8011d62:	f000 8090 	beq.w	8011e86 <_scanf_float+0x18a>
 8011d66:	d815      	bhi.n	8011d94 <_scanf_float+0x98>
 8011d68:	2b2b      	cmp	r3, #43	; 0x2b
 8011d6a:	f000 808c 	beq.w	8011e86 <_scanf_float+0x18a>
 8011d6e:	f1b9 0f00 	cmp.w	r9, #0
 8011d72:	d003      	beq.n	8011d7c <_scanf_float+0x80>
 8011d74:	6823      	ldr	r3, [r4, #0]
 8011d76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011d7a:	6023      	str	r3, [r4, #0]
 8011d7c:	3a01      	subs	r2, #1
 8011d7e:	2a01      	cmp	r2, #1
 8011d80:	f200 80ea 	bhi.w	8011f58 <_scanf_float+0x25c>
 8011d84:	4545      	cmp	r5, r8
 8011d86:	f200 80dc 	bhi.w	8011f42 <_scanf_float+0x246>
 8011d8a:	2601      	movs	r6, #1
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	b007      	add	sp, #28
 8011d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d94:	2b2e      	cmp	r3, #46	; 0x2e
 8011d96:	f000 809f 	beq.w	8011ed8 <_scanf_float+0x1dc>
 8011d9a:	2b30      	cmp	r3, #48	; 0x30
 8011d9c:	d1e7      	bne.n	8011d6e <_scanf_float+0x72>
 8011d9e:	6820      	ldr	r0, [r4, #0]
 8011da0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011da4:	d064      	beq.n	8011e70 <_scanf_float+0x174>
 8011da6:	9b01      	ldr	r3, [sp, #4]
 8011da8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8011dac:	6020      	str	r0, [r4, #0]
 8011dae:	f109 0901 	add.w	r9, r9, #1
 8011db2:	b11b      	cbz	r3, 8011dbc <_scanf_float+0xc0>
 8011db4:	3b01      	subs	r3, #1
 8011db6:	3101      	adds	r1, #1
 8011db8:	9301      	str	r3, [sp, #4]
 8011dba:	60a1      	str	r1, [r4, #8]
 8011dbc:	68a3      	ldr	r3, [r4, #8]
 8011dbe:	3b01      	subs	r3, #1
 8011dc0:	60a3      	str	r3, [r4, #8]
 8011dc2:	6923      	ldr	r3, [r4, #16]
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	6123      	str	r3, [r4, #16]
 8011dc8:	6873      	ldr	r3, [r6, #4]
 8011dca:	3b01      	subs	r3, #1
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	6073      	str	r3, [r6, #4]
 8011dd0:	f340 80ac 	ble.w	8011f2c <_scanf_float+0x230>
 8011dd4:	6833      	ldr	r3, [r6, #0]
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	6033      	str	r3, [r6, #0]
 8011dda:	e7b5      	b.n	8011d48 <_scanf_float+0x4c>
 8011ddc:	2b45      	cmp	r3, #69	; 0x45
 8011dde:	f000 8085 	beq.w	8011eec <_scanf_float+0x1f0>
 8011de2:	2b46      	cmp	r3, #70	; 0x46
 8011de4:	d06a      	beq.n	8011ebc <_scanf_float+0x1c0>
 8011de6:	2b41      	cmp	r3, #65	; 0x41
 8011de8:	d1c1      	bne.n	8011d6e <_scanf_float+0x72>
 8011dea:	2a01      	cmp	r2, #1
 8011dec:	d1bf      	bne.n	8011d6e <_scanf_float+0x72>
 8011dee:	2202      	movs	r2, #2
 8011df0:	e046      	b.n	8011e80 <_scanf_float+0x184>
 8011df2:	2b65      	cmp	r3, #101	; 0x65
 8011df4:	d07a      	beq.n	8011eec <_scanf_float+0x1f0>
 8011df6:	d818      	bhi.n	8011e2a <_scanf_float+0x12e>
 8011df8:	2b54      	cmp	r3, #84	; 0x54
 8011dfa:	d066      	beq.n	8011eca <_scanf_float+0x1ce>
 8011dfc:	d811      	bhi.n	8011e22 <_scanf_float+0x126>
 8011dfe:	2b4e      	cmp	r3, #78	; 0x4e
 8011e00:	d1b5      	bne.n	8011d6e <_scanf_float+0x72>
 8011e02:	2a00      	cmp	r2, #0
 8011e04:	d146      	bne.n	8011e94 <_scanf_float+0x198>
 8011e06:	f1b9 0f00 	cmp.w	r9, #0
 8011e0a:	d145      	bne.n	8011e98 <_scanf_float+0x19c>
 8011e0c:	6821      	ldr	r1, [r4, #0]
 8011e0e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011e12:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011e16:	d13f      	bne.n	8011e98 <_scanf_float+0x19c>
 8011e18:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011e1c:	6021      	str	r1, [r4, #0]
 8011e1e:	2201      	movs	r2, #1
 8011e20:	e02e      	b.n	8011e80 <_scanf_float+0x184>
 8011e22:	2b59      	cmp	r3, #89	; 0x59
 8011e24:	d01e      	beq.n	8011e64 <_scanf_float+0x168>
 8011e26:	2b61      	cmp	r3, #97	; 0x61
 8011e28:	e7de      	b.n	8011de8 <_scanf_float+0xec>
 8011e2a:	2b6e      	cmp	r3, #110	; 0x6e
 8011e2c:	d0e9      	beq.n	8011e02 <_scanf_float+0x106>
 8011e2e:	d815      	bhi.n	8011e5c <_scanf_float+0x160>
 8011e30:	2b66      	cmp	r3, #102	; 0x66
 8011e32:	d043      	beq.n	8011ebc <_scanf_float+0x1c0>
 8011e34:	2b69      	cmp	r3, #105	; 0x69
 8011e36:	d19a      	bne.n	8011d6e <_scanf_float+0x72>
 8011e38:	f1bb 0f00 	cmp.w	fp, #0
 8011e3c:	d138      	bne.n	8011eb0 <_scanf_float+0x1b4>
 8011e3e:	f1b9 0f00 	cmp.w	r9, #0
 8011e42:	d197      	bne.n	8011d74 <_scanf_float+0x78>
 8011e44:	6821      	ldr	r1, [r4, #0]
 8011e46:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011e4a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011e4e:	d195      	bne.n	8011d7c <_scanf_float+0x80>
 8011e50:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011e54:	6021      	str	r1, [r4, #0]
 8011e56:	f04f 0b01 	mov.w	fp, #1
 8011e5a:	e011      	b.n	8011e80 <_scanf_float+0x184>
 8011e5c:	2b74      	cmp	r3, #116	; 0x74
 8011e5e:	d034      	beq.n	8011eca <_scanf_float+0x1ce>
 8011e60:	2b79      	cmp	r3, #121	; 0x79
 8011e62:	d184      	bne.n	8011d6e <_scanf_float+0x72>
 8011e64:	f1bb 0f07 	cmp.w	fp, #7
 8011e68:	d181      	bne.n	8011d6e <_scanf_float+0x72>
 8011e6a:	f04f 0b08 	mov.w	fp, #8
 8011e6e:	e007      	b.n	8011e80 <_scanf_float+0x184>
 8011e70:	eb12 0f0b 	cmn.w	r2, fp
 8011e74:	f47f af7b 	bne.w	8011d6e <_scanf_float+0x72>
 8011e78:	6821      	ldr	r1, [r4, #0]
 8011e7a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011e7e:	6021      	str	r1, [r4, #0]
 8011e80:	702b      	strb	r3, [r5, #0]
 8011e82:	3501      	adds	r5, #1
 8011e84:	e79a      	b.n	8011dbc <_scanf_float+0xc0>
 8011e86:	6821      	ldr	r1, [r4, #0]
 8011e88:	0608      	lsls	r0, r1, #24
 8011e8a:	f57f af70 	bpl.w	8011d6e <_scanf_float+0x72>
 8011e8e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011e92:	e7f4      	b.n	8011e7e <_scanf_float+0x182>
 8011e94:	2a02      	cmp	r2, #2
 8011e96:	d047      	beq.n	8011f28 <_scanf_float+0x22c>
 8011e98:	f1bb 0f01 	cmp.w	fp, #1
 8011e9c:	d003      	beq.n	8011ea6 <_scanf_float+0x1aa>
 8011e9e:	f1bb 0f04 	cmp.w	fp, #4
 8011ea2:	f47f af64 	bne.w	8011d6e <_scanf_float+0x72>
 8011ea6:	f10b 0b01 	add.w	fp, fp, #1
 8011eaa:	fa5f fb8b 	uxtb.w	fp, fp
 8011eae:	e7e7      	b.n	8011e80 <_scanf_float+0x184>
 8011eb0:	f1bb 0f03 	cmp.w	fp, #3
 8011eb4:	d0f7      	beq.n	8011ea6 <_scanf_float+0x1aa>
 8011eb6:	f1bb 0f05 	cmp.w	fp, #5
 8011eba:	e7f2      	b.n	8011ea2 <_scanf_float+0x1a6>
 8011ebc:	f1bb 0f02 	cmp.w	fp, #2
 8011ec0:	f47f af55 	bne.w	8011d6e <_scanf_float+0x72>
 8011ec4:	f04f 0b03 	mov.w	fp, #3
 8011ec8:	e7da      	b.n	8011e80 <_scanf_float+0x184>
 8011eca:	f1bb 0f06 	cmp.w	fp, #6
 8011ece:	f47f af4e 	bne.w	8011d6e <_scanf_float+0x72>
 8011ed2:	f04f 0b07 	mov.w	fp, #7
 8011ed6:	e7d3      	b.n	8011e80 <_scanf_float+0x184>
 8011ed8:	6821      	ldr	r1, [r4, #0]
 8011eda:	0588      	lsls	r0, r1, #22
 8011edc:	f57f af47 	bpl.w	8011d6e <_scanf_float+0x72>
 8011ee0:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8011ee4:	6021      	str	r1, [r4, #0]
 8011ee6:	f8cd 9008 	str.w	r9, [sp, #8]
 8011eea:	e7c9      	b.n	8011e80 <_scanf_float+0x184>
 8011eec:	6821      	ldr	r1, [r4, #0]
 8011eee:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8011ef2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011ef6:	d006      	beq.n	8011f06 <_scanf_float+0x20a>
 8011ef8:	0548      	lsls	r0, r1, #21
 8011efa:	f57f af38 	bpl.w	8011d6e <_scanf_float+0x72>
 8011efe:	f1b9 0f00 	cmp.w	r9, #0
 8011f02:	f43f af3b 	beq.w	8011d7c <_scanf_float+0x80>
 8011f06:	0588      	lsls	r0, r1, #22
 8011f08:	bf58      	it	pl
 8011f0a:	9802      	ldrpl	r0, [sp, #8]
 8011f0c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011f10:	bf58      	it	pl
 8011f12:	eba9 0000 	subpl.w	r0, r9, r0
 8011f16:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8011f1a:	bf58      	it	pl
 8011f1c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8011f20:	6021      	str	r1, [r4, #0]
 8011f22:	f04f 0900 	mov.w	r9, #0
 8011f26:	e7ab      	b.n	8011e80 <_scanf_float+0x184>
 8011f28:	2203      	movs	r2, #3
 8011f2a:	e7a9      	b.n	8011e80 <_scanf_float+0x184>
 8011f2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011f30:	4631      	mov	r1, r6
 8011f32:	4638      	mov	r0, r7
 8011f34:	9205      	str	r2, [sp, #20]
 8011f36:	4798      	blx	r3
 8011f38:	9a05      	ldr	r2, [sp, #20]
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	f43f af04 	beq.w	8011d48 <_scanf_float+0x4c>
 8011f40:	e715      	b.n	8011d6e <_scanf_float+0x72>
 8011f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011f46:	4632      	mov	r2, r6
 8011f48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011f4c:	4638      	mov	r0, r7
 8011f4e:	4798      	blx	r3
 8011f50:	6923      	ldr	r3, [r4, #16]
 8011f52:	3b01      	subs	r3, #1
 8011f54:	6123      	str	r3, [r4, #16]
 8011f56:	e715      	b.n	8011d84 <_scanf_float+0x88>
 8011f58:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011f5c:	2b06      	cmp	r3, #6
 8011f5e:	d80a      	bhi.n	8011f76 <_scanf_float+0x27a>
 8011f60:	f1bb 0f02 	cmp.w	fp, #2
 8011f64:	d967      	bls.n	8012036 <_scanf_float+0x33a>
 8011f66:	f1ab 0b03 	sub.w	fp, fp, #3
 8011f6a:	fa5f fb8b 	uxtb.w	fp, fp
 8011f6e:	eba5 0b0b 	sub.w	fp, r5, fp
 8011f72:	455d      	cmp	r5, fp
 8011f74:	d14a      	bne.n	801200c <_scanf_float+0x310>
 8011f76:	6823      	ldr	r3, [r4, #0]
 8011f78:	05da      	lsls	r2, r3, #23
 8011f7a:	d51f      	bpl.n	8011fbc <_scanf_float+0x2c0>
 8011f7c:	055b      	lsls	r3, r3, #21
 8011f7e:	d467      	bmi.n	8012050 <_scanf_float+0x354>
 8011f80:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011f84:	6923      	ldr	r3, [r4, #16]
 8011f86:	2965      	cmp	r1, #101	; 0x65
 8011f88:	f103 33ff 	add.w	r3, r3, #4294967295
 8011f8c:	f105 3bff 	add.w	fp, r5, #4294967295
 8011f90:	6123      	str	r3, [r4, #16]
 8011f92:	d00d      	beq.n	8011fb0 <_scanf_float+0x2b4>
 8011f94:	2945      	cmp	r1, #69	; 0x45
 8011f96:	d00b      	beq.n	8011fb0 <_scanf_float+0x2b4>
 8011f98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011f9c:	4632      	mov	r2, r6
 8011f9e:	4638      	mov	r0, r7
 8011fa0:	4798      	blx	r3
 8011fa2:	6923      	ldr	r3, [r4, #16]
 8011fa4:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8011fa8:	3b01      	subs	r3, #1
 8011faa:	f1a5 0b02 	sub.w	fp, r5, #2
 8011fae:	6123      	str	r3, [r4, #16]
 8011fb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011fb4:	4632      	mov	r2, r6
 8011fb6:	4638      	mov	r0, r7
 8011fb8:	4798      	blx	r3
 8011fba:	465d      	mov	r5, fp
 8011fbc:	6826      	ldr	r6, [r4, #0]
 8011fbe:	f016 0610 	ands.w	r6, r6, #16
 8011fc2:	d176      	bne.n	80120b2 <_scanf_float+0x3b6>
 8011fc4:	702e      	strb	r6, [r5, #0]
 8011fc6:	6823      	ldr	r3, [r4, #0]
 8011fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fd0:	d141      	bne.n	8012056 <_scanf_float+0x35a>
 8011fd2:	9b02      	ldr	r3, [sp, #8]
 8011fd4:	eba9 0303 	sub.w	r3, r9, r3
 8011fd8:	425a      	negs	r2, r3
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d148      	bne.n	8012070 <_scanf_float+0x374>
 8011fde:	4641      	mov	r1, r8
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	4638      	mov	r0, r7
 8011fe4:	f000 ff38 	bl	8012e58 <_strtod_r>
 8011fe8:	6825      	ldr	r5, [r4, #0]
 8011fea:	4680      	mov	r8, r0
 8011fec:	f015 0f02 	tst.w	r5, #2
 8011ff0:	4689      	mov	r9, r1
 8011ff2:	f8da 3000 	ldr.w	r3, [sl]
 8011ff6:	d046      	beq.n	8012086 <_scanf_float+0x38a>
 8011ff8:	1d1a      	adds	r2, r3, #4
 8011ffa:	f8ca 2000 	str.w	r2, [sl]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	e9c3 8900 	strd	r8, r9, [r3]
 8012004:	68e3      	ldr	r3, [r4, #12]
 8012006:	3301      	adds	r3, #1
 8012008:	60e3      	str	r3, [r4, #12]
 801200a:	e6bf      	b.n	8011d8c <_scanf_float+0x90>
 801200c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012010:	4632      	mov	r2, r6
 8012012:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012016:	4638      	mov	r0, r7
 8012018:	4798      	blx	r3
 801201a:	6923      	ldr	r3, [r4, #16]
 801201c:	3b01      	subs	r3, #1
 801201e:	6123      	str	r3, [r4, #16]
 8012020:	e7a7      	b.n	8011f72 <_scanf_float+0x276>
 8012022:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012026:	4632      	mov	r2, r6
 8012028:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801202c:	4638      	mov	r0, r7
 801202e:	4798      	blx	r3
 8012030:	6923      	ldr	r3, [r4, #16]
 8012032:	3b01      	subs	r3, #1
 8012034:	6123      	str	r3, [r4, #16]
 8012036:	4545      	cmp	r5, r8
 8012038:	d8f3      	bhi.n	8012022 <_scanf_float+0x326>
 801203a:	e6a6      	b.n	8011d8a <_scanf_float+0x8e>
 801203c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012040:	4632      	mov	r2, r6
 8012042:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012046:	4638      	mov	r0, r7
 8012048:	4798      	blx	r3
 801204a:	6923      	ldr	r3, [r4, #16]
 801204c:	3b01      	subs	r3, #1
 801204e:	6123      	str	r3, [r4, #16]
 8012050:	4545      	cmp	r5, r8
 8012052:	d8f3      	bhi.n	801203c <_scanf_float+0x340>
 8012054:	e699      	b.n	8011d8a <_scanf_float+0x8e>
 8012056:	9b03      	ldr	r3, [sp, #12]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d0c0      	beq.n	8011fde <_scanf_float+0x2e2>
 801205c:	9904      	ldr	r1, [sp, #16]
 801205e:	230a      	movs	r3, #10
 8012060:	4632      	mov	r2, r6
 8012062:	3101      	adds	r1, #1
 8012064:	4638      	mov	r0, r7
 8012066:	f000 ff83 	bl	8012f70 <_strtol_r>
 801206a:	9b03      	ldr	r3, [sp, #12]
 801206c:	9d04      	ldr	r5, [sp, #16]
 801206e:	1ac2      	subs	r2, r0, r3
 8012070:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012074:	429d      	cmp	r5, r3
 8012076:	bf28      	it	cs
 8012078:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801207c:	490e      	ldr	r1, [pc, #56]	; (80120b8 <_scanf_float+0x3bc>)
 801207e:	4628      	mov	r0, r5
 8012080:	f000 f8a8 	bl	80121d4 <siprintf>
 8012084:	e7ab      	b.n	8011fde <_scanf_float+0x2e2>
 8012086:	1d1f      	adds	r7, r3, #4
 8012088:	f015 0504 	ands.w	r5, r5, #4
 801208c:	f8ca 7000 	str.w	r7, [sl]
 8012090:	d1b5      	bne.n	8011ffe <_scanf_float+0x302>
 8012092:	681f      	ldr	r7, [r3, #0]
 8012094:	4602      	mov	r2, r0
 8012096:	460b      	mov	r3, r1
 8012098:	f7ee fcb8 	bl	8000a0c <__aeabi_dcmpun>
 801209c:	b120      	cbz	r0, 80120a8 <_scanf_float+0x3ac>
 801209e:	4628      	mov	r0, r5
 80120a0:	f000 f81c 	bl	80120dc <nanf>
 80120a4:	6038      	str	r0, [r7, #0]
 80120a6:	e7ad      	b.n	8012004 <_scanf_float+0x308>
 80120a8:	4640      	mov	r0, r8
 80120aa:	4649      	mov	r1, r9
 80120ac:	f7ee fd0c 	bl	8000ac8 <__aeabi_d2f>
 80120b0:	e7f8      	b.n	80120a4 <_scanf_float+0x3a8>
 80120b2:	2600      	movs	r6, #0
 80120b4:	e66a      	b.n	8011d8c <_scanf_float+0x90>
 80120b6:	bf00      	nop
 80120b8:	080183e1 	.word	0x080183e1

080120bc <_sbrk_r>:
 80120bc:	b538      	push	{r3, r4, r5, lr}
 80120be:	2300      	movs	r3, #0
 80120c0:	4c05      	ldr	r4, [pc, #20]	; (80120d8 <_sbrk_r+0x1c>)
 80120c2:	4605      	mov	r5, r0
 80120c4:	4608      	mov	r0, r1
 80120c6:	6023      	str	r3, [r4, #0]
 80120c8:	f7f9 fd3e 	bl	800bb48 <_sbrk>
 80120cc:	1c43      	adds	r3, r0, #1
 80120ce:	d102      	bne.n	80120d6 <_sbrk_r+0x1a>
 80120d0:	6823      	ldr	r3, [r4, #0]
 80120d2:	b103      	cbz	r3, 80120d6 <_sbrk_r+0x1a>
 80120d4:	602b      	str	r3, [r5, #0]
 80120d6:	bd38      	pop	{r3, r4, r5, pc}
 80120d8:	20000828 	.word	0x20000828

080120dc <nanf>:
 80120dc:	4800      	ldr	r0, [pc, #0]	; (80120e0 <nanf+0x4>)
 80120de:	4770      	bx	lr
 80120e0:	7fc00000 	.word	0x7fc00000

080120e4 <_raise_r>:
 80120e4:	291f      	cmp	r1, #31
 80120e6:	b538      	push	{r3, r4, r5, lr}
 80120e8:	4604      	mov	r4, r0
 80120ea:	460d      	mov	r5, r1
 80120ec:	d904      	bls.n	80120f8 <_raise_r+0x14>
 80120ee:	2316      	movs	r3, #22
 80120f0:	6003      	str	r3, [r0, #0]
 80120f2:	f04f 30ff 	mov.w	r0, #4294967295
 80120f6:	bd38      	pop	{r3, r4, r5, pc}
 80120f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80120fa:	b112      	cbz	r2, 8012102 <_raise_r+0x1e>
 80120fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012100:	b94b      	cbnz	r3, 8012116 <_raise_r+0x32>
 8012102:	4620      	mov	r0, r4
 8012104:	f000 f830 	bl	8012168 <_getpid_r>
 8012108:	462a      	mov	r2, r5
 801210a:	4601      	mov	r1, r0
 801210c:	4620      	mov	r0, r4
 801210e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012112:	f000 b817 	b.w	8012144 <_kill_r>
 8012116:	2b01      	cmp	r3, #1
 8012118:	d00a      	beq.n	8012130 <_raise_r+0x4c>
 801211a:	1c59      	adds	r1, r3, #1
 801211c:	d103      	bne.n	8012126 <_raise_r+0x42>
 801211e:	2316      	movs	r3, #22
 8012120:	6003      	str	r3, [r0, #0]
 8012122:	2001      	movs	r0, #1
 8012124:	e7e7      	b.n	80120f6 <_raise_r+0x12>
 8012126:	2400      	movs	r4, #0
 8012128:	4628      	mov	r0, r5
 801212a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801212e:	4798      	blx	r3
 8012130:	2000      	movs	r0, #0
 8012132:	e7e0      	b.n	80120f6 <_raise_r+0x12>

08012134 <raise>:
 8012134:	4b02      	ldr	r3, [pc, #8]	; (8012140 <raise+0xc>)
 8012136:	4601      	mov	r1, r0
 8012138:	6818      	ldr	r0, [r3, #0]
 801213a:	f7ff bfd3 	b.w	80120e4 <_raise_r>
 801213e:	bf00      	nop
 8012140:	200000a8 	.word	0x200000a8

08012144 <_kill_r>:
 8012144:	b538      	push	{r3, r4, r5, lr}
 8012146:	2300      	movs	r3, #0
 8012148:	4c06      	ldr	r4, [pc, #24]	; (8012164 <_kill_r+0x20>)
 801214a:	4605      	mov	r5, r0
 801214c:	4608      	mov	r0, r1
 801214e:	4611      	mov	r1, r2
 8012150:	6023      	str	r3, [r4, #0]
 8012152:	f7f9 fcde 	bl	800bb12 <_kill>
 8012156:	1c43      	adds	r3, r0, #1
 8012158:	d102      	bne.n	8012160 <_kill_r+0x1c>
 801215a:	6823      	ldr	r3, [r4, #0]
 801215c:	b103      	cbz	r3, 8012160 <_kill_r+0x1c>
 801215e:	602b      	str	r3, [r5, #0]
 8012160:	bd38      	pop	{r3, r4, r5, pc}
 8012162:	bf00      	nop
 8012164:	20000828 	.word	0x20000828

08012168 <_getpid_r>:
 8012168:	f7f9 bccc 	b.w	800bb04 <_getpid>

0801216c <sniprintf>:
 801216c:	b40c      	push	{r2, r3}
 801216e:	b530      	push	{r4, r5, lr}
 8012170:	4b17      	ldr	r3, [pc, #92]	; (80121d0 <sniprintf+0x64>)
 8012172:	1e0c      	subs	r4, r1, #0
 8012174:	b09d      	sub	sp, #116	; 0x74
 8012176:	681d      	ldr	r5, [r3, #0]
 8012178:	da08      	bge.n	801218c <sniprintf+0x20>
 801217a:	238b      	movs	r3, #139	; 0x8b
 801217c:	f04f 30ff 	mov.w	r0, #4294967295
 8012180:	602b      	str	r3, [r5, #0]
 8012182:	b01d      	add	sp, #116	; 0x74
 8012184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012188:	b002      	add	sp, #8
 801218a:	4770      	bx	lr
 801218c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012190:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012194:	bf0c      	ite	eq
 8012196:	4623      	moveq	r3, r4
 8012198:	f104 33ff 	addne.w	r3, r4, #4294967295
 801219c:	9304      	str	r3, [sp, #16]
 801219e:	9307      	str	r3, [sp, #28]
 80121a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80121a4:	9002      	str	r0, [sp, #8]
 80121a6:	9006      	str	r0, [sp, #24]
 80121a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80121ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80121ae:	ab21      	add	r3, sp, #132	; 0x84
 80121b0:	a902      	add	r1, sp, #8
 80121b2:	4628      	mov	r0, r5
 80121b4:	9301      	str	r3, [sp, #4]
 80121b6:	f002 fdab 	bl	8014d10 <_svfiprintf_r>
 80121ba:	1c43      	adds	r3, r0, #1
 80121bc:	bfbc      	itt	lt
 80121be:	238b      	movlt	r3, #139	; 0x8b
 80121c0:	602b      	strlt	r3, [r5, #0]
 80121c2:	2c00      	cmp	r4, #0
 80121c4:	d0dd      	beq.n	8012182 <sniprintf+0x16>
 80121c6:	2200      	movs	r2, #0
 80121c8:	9b02      	ldr	r3, [sp, #8]
 80121ca:	701a      	strb	r2, [r3, #0]
 80121cc:	e7d9      	b.n	8012182 <sniprintf+0x16>
 80121ce:	bf00      	nop
 80121d0:	200000a8 	.word	0x200000a8

080121d4 <siprintf>:
 80121d4:	b40e      	push	{r1, r2, r3}
 80121d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80121da:	b500      	push	{lr}
 80121dc:	b09c      	sub	sp, #112	; 0x70
 80121de:	ab1d      	add	r3, sp, #116	; 0x74
 80121e0:	9002      	str	r0, [sp, #8]
 80121e2:	9006      	str	r0, [sp, #24]
 80121e4:	9107      	str	r1, [sp, #28]
 80121e6:	9104      	str	r1, [sp, #16]
 80121e8:	4808      	ldr	r0, [pc, #32]	; (801220c <siprintf+0x38>)
 80121ea:	4909      	ldr	r1, [pc, #36]	; (8012210 <siprintf+0x3c>)
 80121ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80121f0:	9105      	str	r1, [sp, #20]
 80121f2:	6800      	ldr	r0, [r0, #0]
 80121f4:	a902      	add	r1, sp, #8
 80121f6:	9301      	str	r3, [sp, #4]
 80121f8:	f002 fd8a 	bl	8014d10 <_svfiprintf_r>
 80121fc:	2200      	movs	r2, #0
 80121fe:	9b02      	ldr	r3, [sp, #8]
 8012200:	701a      	strb	r2, [r3, #0]
 8012202:	b01c      	add	sp, #112	; 0x70
 8012204:	f85d eb04 	ldr.w	lr, [sp], #4
 8012208:	b003      	add	sp, #12
 801220a:	4770      	bx	lr
 801220c:	200000a8 	.word	0x200000a8
 8012210:	ffff0208 	.word	0xffff0208

08012214 <sulp>:
 8012214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012218:	460f      	mov	r7, r1
 801221a:	4690      	mov	r8, r2
 801221c:	f002 fbe2 	bl	80149e4 <__ulp>
 8012220:	4604      	mov	r4, r0
 8012222:	460d      	mov	r5, r1
 8012224:	f1b8 0f00 	cmp.w	r8, #0
 8012228:	d011      	beq.n	801224e <sulp+0x3a>
 801222a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 801222e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012232:	2b00      	cmp	r3, #0
 8012234:	dd0b      	ble.n	801224e <sulp+0x3a>
 8012236:	2400      	movs	r4, #0
 8012238:	051b      	lsls	r3, r3, #20
 801223a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801223e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012242:	4622      	mov	r2, r4
 8012244:	462b      	mov	r3, r5
 8012246:	f7ee f947 	bl	80004d8 <__aeabi_dmul>
 801224a:	4604      	mov	r4, r0
 801224c:	460d      	mov	r5, r1
 801224e:	4620      	mov	r0, r4
 8012250:	4629      	mov	r1, r5
 8012252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012258 <_strtod_l>:
 8012258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801225c:	461f      	mov	r7, r3
 801225e:	2300      	movs	r3, #0
 8012260:	b0a1      	sub	sp, #132	; 0x84
 8012262:	4683      	mov	fp, r0
 8012264:	4638      	mov	r0, r7
 8012266:	460e      	mov	r6, r1
 8012268:	9217      	str	r2, [sp, #92]	; 0x5c
 801226a:	931c      	str	r3, [sp, #112]	; 0x70
 801226c:	f002 f8cb 	bl	8014406 <__localeconv_l>
 8012270:	4680      	mov	r8, r0
 8012272:	6800      	ldr	r0, [r0, #0]
 8012274:	f7ed ff6c 	bl	8000150 <strlen>
 8012278:	f04f 0900 	mov.w	r9, #0
 801227c:	4604      	mov	r4, r0
 801227e:	f04f 0a00 	mov.w	sl, #0
 8012282:	961b      	str	r6, [sp, #108]	; 0x6c
 8012284:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012286:	781a      	ldrb	r2, [r3, #0]
 8012288:	2a0d      	cmp	r2, #13
 801228a:	d832      	bhi.n	80122f2 <_strtod_l+0x9a>
 801228c:	2a09      	cmp	r2, #9
 801228e:	d236      	bcs.n	80122fe <_strtod_l+0xa6>
 8012290:	2a00      	cmp	r2, #0
 8012292:	d03e      	beq.n	8012312 <_strtod_l+0xba>
 8012294:	2300      	movs	r3, #0
 8012296:	930d      	str	r3, [sp, #52]	; 0x34
 8012298:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801229a:	782b      	ldrb	r3, [r5, #0]
 801229c:	2b30      	cmp	r3, #48	; 0x30
 801229e:	f040 80ac 	bne.w	80123fa <_strtod_l+0x1a2>
 80122a2:	786b      	ldrb	r3, [r5, #1]
 80122a4:	2b58      	cmp	r3, #88	; 0x58
 80122a6:	d001      	beq.n	80122ac <_strtod_l+0x54>
 80122a8:	2b78      	cmp	r3, #120	; 0x78
 80122aa:	d167      	bne.n	801237c <_strtod_l+0x124>
 80122ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122ae:	9702      	str	r7, [sp, #8]
 80122b0:	9301      	str	r3, [sp, #4]
 80122b2:	ab1c      	add	r3, sp, #112	; 0x70
 80122b4:	9300      	str	r3, [sp, #0]
 80122b6:	4a89      	ldr	r2, [pc, #548]	; (80124dc <_strtod_l+0x284>)
 80122b8:	ab1d      	add	r3, sp, #116	; 0x74
 80122ba:	a91b      	add	r1, sp, #108	; 0x6c
 80122bc:	4658      	mov	r0, fp
 80122be:	f001 fdc7 	bl	8013e50 <__gethex>
 80122c2:	f010 0407 	ands.w	r4, r0, #7
 80122c6:	4606      	mov	r6, r0
 80122c8:	d005      	beq.n	80122d6 <_strtod_l+0x7e>
 80122ca:	2c06      	cmp	r4, #6
 80122cc:	d12b      	bne.n	8012326 <_strtod_l+0xce>
 80122ce:	2300      	movs	r3, #0
 80122d0:	3501      	adds	r5, #1
 80122d2:	951b      	str	r5, [sp, #108]	; 0x6c
 80122d4:	930d      	str	r3, [sp, #52]	; 0x34
 80122d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80122d8:	2b00      	cmp	r3, #0
 80122da:	f040 85a6 	bne.w	8012e2a <_strtod_l+0xbd2>
 80122de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122e0:	b1e3      	cbz	r3, 801231c <_strtod_l+0xc4>
 80122e2:	464a      	mov	r2, r9
 80122e4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80122e8:	4610      	mov	r0, r2
 80122ea:	4619      	mov	r1, r3
 80122ec:	b021      	add	sp, #132	; 0x84
 80122ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f2:	2a2b      	cmp	r2, #43	; 0x2b
 80122f4:	d015      	beq.n	8012322 <_strtod_l+0xca>
 80122f6:	2a2d      	cmp	r2, #45	; 0x2d
 80122f8:	d004      	beq.n	8012304 <_strtod_l+0xac>
 80122fa:	2a20      	cmp	r2, #32
 80122fc:	d1ca      	bne.n	8012294 <_strtod_l+0x3c>
 80122fe:	3301      	adds	r3, #1
 8012300:	931b      	str	r3, [sp, #108]	; 0x6c
 8012302:	e7bf      	b.n	8012284 <_strtod_l+0x2c>
 8012304:	2201      	movs	r2, #1
 8012306:	920d      	str	r2, [sp, #52]	; 0x34
 8012308:	1c5a      	adds	r2, r3, #1
 801230a:	921b      	str	r2, [sp, #108]	; 0x6c
 801230c:	785b      	ldrb	r3, [r3, #1]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d1c2      	bne.n	8012298 <_strtod_l+0x40>
 8012312:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012314:	961b      	str	r6, [sp, #108]	; 0x6c
 8012316:	2b00      	cmp	r3, #0
 8012318:	f040 8585 	bne.w	8012e26 <_strtod_l+0xbce>
 801231c:	464a      	mov	r2, r9
 801231e:	4653      	mov	r3, sl
 8012320:	e7e2      	b.n	80122e8 <_strtod_l+0x90>
 8012322:	2200      	movs	r2, #0
 8012324:	e7ef      	b.n	8012306 <_strtod_l+0xae>
 8012326:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012328:	b13a      	cbz	r2, 801233a <_strtod_l+0xe2>
 801232a:	2135      	movs	r1, #53	; 0x35
 801232c:	a81e      	add	r0, sp, #120	; 0x78
 801232e:	f002 fc4c 	bl	8014bca <__copybits>
 8012332:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012334:	4658      	mov	r0, fp
 8012336:	f002 f8bf 	bl	80144b8 <_Bfree>
 801233a:	3c01      	subs	r4, #1
 801233c:	2c04      	cmp	r4, #4
 801233e:	d806      	bhi.n	801234e <_strtod_l+0xf6>
 8012340:	e8df f004 	tbb	[pc, r4]
 8012344:	1714030a 	.word	0x1714030a
 8012348:	0a          	.byte	0x0a
 8012349:	00          	.byte	0x00
 801234a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 801234e:	0731      	lsls	r1, r6, #28
 8012350:	d5c1      	bpl.n	80122d6 <_strtod_l+0x7e>
 8012352:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8012356:	e7be      	b.n	80122d6 <_strtod_l+0x7e>
 8012358:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801235a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 801235e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012362:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012366:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 801236a:	e7f0      	b.n	801234e <_strtod_l+0xf6>
 801236c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80124e0 <_strtod_l+0x288>
 8012370:	e7ed      	b.n	801234e <_strtod_l+0xf6>
 8012372:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8012376:	f04f 39ff 	mov.w	r9, #4294967295
 801237a:	e7e8      	b.n	801234e <_strtod_l+0xf6>
 801237c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801237e:	1c5a      	adds	r2, r3, #1
 8012380:	921b      	str	r2, [sp, #108]	; 0x6c
 8012382:	785b      	ldrb	r3, [r3, #1]
 8012384:	2b30      	cmp	r3, #48	; 0x30
 8012386:	d0f9      	beq.n	801237c <_strtod_l+0x124>
 8012388:	2b00      	cmp	r3, #0
 801238a:	d0a4      	beq.n	80122d6 <_strtod_l+0x7e>
 801238c:	2301      	movs	r3, #1
 801238e:	2500      	movs	r5, #0
 8012390:	220a      	movs	r2, #10
 8012392:	9307      	str	r3, [sp, #28]
 8012394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012396:	9506      	str	r5, [sp, #24]
 8012398:	9308      	str	r3, [sp, #32]
 801239a:	9504      	str	r5, [sp, #16]
 801239c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801239e:	7807      	ldrb	r7, [r0, #0]
 80123a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80123a4:	b2d9      	uxtb	r1, r3
 80123a6:	2909      	cmp	r1, #9
 80123a8:	d929      	bls.n	80123fe <_strtod_l+0x1a6>
 80123aa:	4622      	mov	r2, r4
 80123ac:	f8d8 1000 	ldr.w	r1, [r8]
 80123b0:	f002 fda6 	bl	8014f00 <strncmp>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d031      	beq.n	801241c <_strtod_l+0x1c4>
 80123b8:	2000      	movs	r0, #0
 80123ba:	463b      	mov	r3, r7
 80123bc:	4602      	mov	r2, r0
 80123be:	9c04      	ldr	r4, [sp, #16]
 80123c0:	9005      	str	r0, [sp, #20]
 80123c2:	2b65      	cmp	r3, #101	; 0x65
 80123c4:	d001      	beq.n	80123ca <_strtod_l+0x172>
 80123c6:	2b45      	cmp	r3, #69	; 0x45
 80123c8:	d114      	bne.n	80123f4 <_strtod_l+0x19c>
 80123ca:	b924      	cbnz	r4, 80123d6 <_strtod_l+0x17e>
 80123cc:	b910      	cbnz	r0, 80123d4 <_strtod_l+0x17c>
 80123ce:	9b07      	ldr	r3, [sp, #28]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d09e      	beq.n	8012312 <_strtod_l+0xba>
 80123d4:	2400      	movs	r4, #0
 80123d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80123d8:	1c73      	adds	r3, r6, #1
 80123da:	931b      	str	r3, [sp, #108]	; 0x6c
 80123dc:	7873      	ldrb	r3, [r6, #1]
 80123de:	2b2b      	cmp	r3, #43	; 0x2b
 80123e0:	d078      	beq.n	80124d4 <_strtod_l+0x27c>
 80123e2:	2b2d      	cmp	r3, #45	; 0x2d
 80123e4:	d070      	beq.n	80124c8 <_strtod_l+0x270>
 80123e6:	f04f 0c00 	mov.w	ip, #0
 80123ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80123ee:	2f09      	cmp	r7, #9
 80123f0:	d97c      	bls.n	80124ec <_strtod_l+0x294>
 80123f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80123f4:	f04f 0e00 	mov.w	lr, #0
 80123f8:	e09a      	b.n	8012530 <_strtod_l+0x2d8>
 80123fa:	2300      	movs	r3, #0
 80123fc:	e7c7      	b.n	801238e <_strtod_l+0x136>
 80123fe:	9904      	ldr	r1, [sp, #16]
 8012400:	3001      	adds	r0, #1
 8012402:	2908      	cmp	r1, #8
 8012404:	bfd7      	itett	le
 8012406:	9906      	ldrle	r1, [sp, #24]
 8012408:	fb02 3505 	mlagt	r5, r2, r5, r3
 801240c:	fb02 3301 	mlale	r3, r2, r1, r3
 8012410:	9306      	strle	r3, [sp, #24]
 8012412:	9b04      	ldr	r3, [sp, #16]
 8012414:	901b      	str	r0, [sp, #108]	; 0x6c
 8012416:	3301      	adds	r3, #1
 8012418:	9304      	str	r3, [sp, #16]
 801241a:	e7bf      	b.n	801239c <_strtod_l+0x144>
 801241c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801241e:	191a      	adds	r2, r3, r4
 8012420:	921b      	str	r2, [sp, #108]	; 0x6c
 8012422:	9a04      	ldr	r2, [sp, #16]
 8012424:	5d1b      	ldrb	r3, [r3, r4]
 8012426:	2a00      	cmp	r2, #0
 8012428:	d037      	beq.n	801249a <_strtod_l+0x242>
 801242a:	4602      	mov	r2, r0
 801242c:	9c04      	ldr	r4, [sp, #16]
 801242e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012432:	2909      	cmp	r1, #9
 8012434:	d913      	bls.n	801245e <_strtod_l+0x206>
 8012436:	2101      	movs	r1, #1
 8012438:	9105      	str	r1, [sp, #20]
 801243a:	e7c2      	b.n	80123c2 <_strtod_l+0x16a>
 801243c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801243e:	3001      	adds	r0, #1
 8012440:	1c5a      	adds	r2, r3, #1
 8012442:	921b      	str	r2, [sp, #108]	; 0x6c
 8012444:	785b      	ldrb	r3, [r3, #1]
 8012446:	2b30      	cmp	r3, #48	; 0x30
 8012448:	d0f8      	beq.n	801243c <_strtod_l+0x1e4>
 801244a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801244e:	2a08      	cmp	r2, #8
 8012450:	f200 84f0 	bhi.w	8012e34 <_strtod_l+0xbdc>
 8012454:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012456:	9208      	str	r2, [sp, #32]
 8012458:	4602      	mov	r2, r0
 801245a:	2000      	movs	r0, #0
 801245c:	4604      	mov	r4, r0
 801245e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8012462:	f100 0101 	add.w	r1, r0, #1
 8012466:	d012      	beq.n	801248e <_strtod_l+0x236>
 8012468:	440a      	add	r2, r1
 801246a:	270a      	movs	r7, #10
 801246c:	4621      	mov	r1, r4
 801246e:	eb00 0c04 	add.w	ip, r0, r4
 8012472:	458c      	cmp	ip, r1
 8012474:	d113      	bne.n	801249e <_strtod_l+0x246>
 8012476:	1821      	adds	r1, r4, r0
 8012478:	2908      	cmp	r1, #8
 801247a:	f104 0401 	add.w	r4, r4, #1
 801247e:	4404      	add	r4, r0
 8012480:	dc19      	bgt.n	80124b6 <_strtod_l+0x25e>
 8012482:	210a      	movs	r1, #10
 8012484:	9b06      	ldr	r3, [sp, #24]
 8012486:	fb01 e303 	mla	r3, r1, r3, lr
 801248a:	9306      	str	r3, [sp, #24]
 801248c:	2100      	movs	r1, #0
 801248e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012490:	1c58      	adds	r0, r3, #1
 8012492:	901b      	str	r0, [sp, #108]	; 0x6c
 8012494:	785b      	ldrb	r3, [r3, #1]
 8012496:	4608      	mov	r0, r1
 8012498:	e7c9      	b.n	801242e <_strtod_l+0x1d6>
 801249a:	9804      	ldr	r0, [sp, #16]
 801249c:	e7d3      	b.n	8012446 <_strtod_l+0x1ee>
 801249e:	2908      	cmp	r1, #8
 80124a0:	f101 0101 	add.w	r1, r1, #1
 80124a4:	dc03      	bgt.n	80124ae <_strtod_l+0x256>
 80124a6:	9b06      	ldr	r3, [sp, #24]
 80124a8:	437b      	muls	r3, r7
 80124aa:	9306      	str	r3, [sp, #24]
 80124ac:	e7e1      	b.n	8012472 <_strtod_l+0x21a>
 80124ae:	2910      	cmp	r1, #16
 80124b0:	bfd8      	it	le
 80124b2:	437d      	mulle	r5, r7
 80124b4:	e7dd      	b.n	8012472 <_strtod_l+0x21a>
 80124b6:	2c10      	cmp	r4, #16
 80124b8:	bfdc      	itt	le
 80124ba:	210a      	movle	r1, #10
 80124bc:	fb01 e505 	mlale	r5, r1, r5, lr
 80124c0:	e7e4      	b.n	801248c <_strtod_l+0x234>
 80124c2:	2301      	movs	r3, #1
 80124c4:	9305      	str	r3, [sp, #20]
 80124c6:	e781      	b.n	80123cc <_strtod_l+0x174>
 80124c8:	f04f 0c01 	mov.w	ip, #1
 80124cc:	1cb3      	adds	r3, r6, #2
 80124ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80124d0:	78b3      	ldrb	r3, [r6, #2]
 80124d2:	e78a      	b.n	80123ea <_strtod_l+0x192>
 80124d4:	f04f 0c00 	mov.w	ip, #0
 80124d8:	e7f8      	b.n	80124cc <_strtod_l+0x274>
 80124da:	bf00      	nop
 80124dc:	080183e8 	.word	0x080183e8
 80124e0:	7ff00000 	.word	0x7ff00000
 80124e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80124e6:	1c5f      	adds	r7, r3, #1
 80124e8:	971b      	str	r7, [sp, #108]	; 0x6c
 80124ea:	785b      	ldrb	r3, [r3, #1]
 80124ec:	2b30      	cmp	r3, #48	; 0x30
 80124ee:	d0f9      	beq.n	80124e4 <_strtod_l+0x28c>
 80124f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80124f4:	2f08      	cmp	r7, #8
 80124f6:	f63f af7d 	bhi.w	80123f4 <_strtod_l+0x19c>
 80124fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80124fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012500:	9309      	str	r3, [sp, #36]	; 0x24
 8012502:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012504:	1c5f      	adds	r7, r3, #1
 8012506:	971b      	str	r7, [sp, #108]	; 0x6c
 8012508:	785b      	ldrb	r3, [r3, #1]
 801250a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801250e:	f1b8 0f09 	cmp.w	r8, #9
 8012512:	d937      	bls.n	8012584 <_strtod_l+0x32c>
 8012514:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012516:	1a7f      	subs	r7, r7, r1
 8012518:	2f08      	cmp	r7, #8
 801251a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801251e:	dc37      	bgt.n	8012590 <_strtod_l+0x338>
 8012520:	45be      	cmp	lr, r7
 8012522:	bfa8      	it	ge
 8012524:	46be      	movge	lr, r7
 8012526:	f1bc 0f00 	cmp.w	ip, #0
 801252a:	d001      	beq.n	8012530 <_strtod_l+0x2d8>
 801252c:	f1ce 0e00 	rsb	lr, lr, #0
 8012530:	2c00      	cmp	r4, #0
 8012532:	d151      	bne.n	80125d8 <_strtod_l+0x380>
 8012534:	2800      	cmp	r0, #0
 8012536:	f47f aece 	bne.w	80122d6 <_strtod_l+0x7e>
 801253a:	9a07      	ldr	r2, [sp, #28]
 801253c:	2a00      	cmp	r2, #0
 801253e:	f47f aeca 	bne.w	80122d6 <_strtod_l+0x7e>
 8012542:	9a05      	ldr	r2, [sp, #20]
 8012544:	2a00      	cmp	r2, #0
 8012546:	f47f aee4 	bne.w	8012312 <_strtod_l+0xba>
 801254a:	2b4e      	cmp	r3, #78	; 0x4e
 801254c:	d027      	beq.n	801259e <_strtod_l+0x346>
 801254e:	dc21      	bgt.n	8012594 <_strtod_l+0x33c>
 8012550:	2b49      	cmp	r3, #73	; 0x49
 8012552:	f47f aede 	bne.w	8012312 <_strtod_l+0xba>
 8012556:	49a4      	ldr	r1, [pc, #656]	; (80127e8 <_strtod_l+0x590>)
 8012558:	a81b      	add	r0, sp, #108	; 0x6c
 801255a:	f001 fead 	bl	80142b8 <__match>
 801255e:	2800      	cmp	r0, #0
 8012560:	f43f aed7 	beq.w	8012312 <_strtod_l+0xba>
 8012564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012566:	49a1      	ldr	r1, [pc, #644]	; (80127ec <_strtod_l+0x594>)
 8012568:	3b01      	subs	r3, #1
 801256a:	a81b      	add	r0, sp, #108	; 0x6c
 801256c:	931b      	str	r3, [sp, #108]	; 0x6c
 801256e:	f001 fea3 	bl	80142b8 <__match>
 8012572:	b910      	cbnz	r0, 801257a <_strtod_l+0x322>
 8012574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012576:	3301      	adds	r3, #1
 8012578:	931b      	str	r3, [sp, #108]	; 0x6c
 801257a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8012800 <_strtod_l+0x5a8>
 801257e:	f04f 0900 	mov.w	r9, #0
 8012582:	e6a8      	b.n	80122d6 <_strtod_l+0x7e>
 8012584:	210a      	movs	r1, #10
 8012586:	fb01 3e0e 	mla	lr, r1, lr, r3
 801258a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801258e:	e7b8      	b.n	8012502 <_strtod_l+0x2aa>
 8012590:	46be      	mov	lr, r7
 8012592:	e7c8      	b.n	8012526 <_strtod_l+0x2ce>
 8012594:	2b69      	cmp	r3, #105	; 0x69
 8012596:	d0de      	beq.n	8012556 <_strtod_l+0x2fe>
 8012598:	2b6e      	cmp	r3, #110	; 0x6e
 801259a:	f47f aeba 	bne.w	8012312 <_strtod_l+0xba>
 801259e:	4994      	ldr	r1, [pc, #592]	; (80127f0 <_strtod_l+0x598>)
 80125a0:	a81b      	add	r0, sp, #108	; 0x6c
 80125a2:	f001 fe89 	bl	80142b8 <__match>
 80125a6:	2800      	cmp	r0, #0
 80125a8:	f43f aeb3 	beq.w	8012312 <_strtod_l+0xba>
 80125ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	2b28      	cmp	r3, #40	; 0x28
 80125b2:	d10e      	bne.n	80125d2 <_strtod_l+0x37a>
 80125b4:	aa1e      	add	r2, sp, #120	; 0x78
 80125b6:	498f      	ldr	r1, [pc, #572]	; (80127f4 <_strtod_l+0x59c>)
 80125b8:	a81b      	add	r0, sp, #108	; 0x6c
 80125ba:	f001 fe91 	bl	80142e0 <__hexnan>
 80125be:	2805      	cmp	r0, #5
 80125c0:	d107      	bne.n	80125d2 <_strtod_l+0x37a>
 80125c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80125c4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80125c8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80125cc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80125d0:	e681      	b.n	80122d6 <_strtod_l+0x7e>
 80125d2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8012808 <_strtod_l+0x5b0>
 80125d6:	e7d2      	b.n	801257e <_strtod_l+0x326>
 80125d8:	ebae 0302 	sub.w	r3, lr, r2
 80125dc:	9307      	str	r3, [sp, #28]
 80125de:	9b04      	ldr	r3, [sp, #16]
 80125e0:	9806      	ldr	r0, [sp, #24]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	bf08      	it	eq
 80125e6:	4623      	moveq	r3, r4
 80125e8:	2c10      	cmp	r4, #16
 80125ea:	9304      	str	r3, [sp, #16]
 80125ec:	46a0      	mov	r8, r4
 80125ee:	bfa8      	it	ge
 80125f0:	f04f 0810 	movge.w	r8, #16
 80125f4:	f7ed fef6 	bl	80003e4 <__aeabi_ui2d>
 80125f8:	2c09      	cmp	r4, #9
 80125fa:	4681      	mov	r9, r0
 80125fc:	468a      	mov	sl, r1
 80125fe:	dc13      	bgt.n	8012628 <_strtod_l+0x3d0>
 8012600:	9b07      	ldr	r3, [sp, #28]
 8012602:	2b00      	cmp	r3, #0
 8012604:	f43f ae67 	beq.w	80122d6 <_strtod_l+0x7e>
 8012608:	9b07      	ldr	r3, [sp, #28]
 801260a:	dd7e      	ble.n	801270a <_strtod_l+0x4b2>
 801260c:	2b16      	cmp	r3, #22
 801260e:	dc65      	bgt.n	80126dc <_strtod_l+0x484>
 8012610:	4a79      	ldr	r2, [pc, #484]	; (80127f8 <_strtod_l+0x5a0>)
 8012612:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8012616:	464a      	mov	r2, r9
 8012618:	e9de 0100 	ldrd	r0, r1, [lr]
 801261c:	4653      	mov	r3, sl
 801261e:	f7ed ff5b 	bl	80004d8 <__aeabi_dmul>
 8012622:	4681      	mov	r9, r0
 8012624:	468a      	mov	sl, r1
 8012626:	e656      	b.n	80122d6 <_strtod_l+0x7e>
 8012628:	4b73      	ldr	r3, [pc, #460]	; (80127f8 <_strtod_l+0x5a0>)
 801262a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801262e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012632:	f7ed ff51 	bl	80004d8 <__aeabi_dmul>
 8012636:	4606      	mov	r6, r0
 8012638:	4628      	mov	r0, r5
 801263a:	460f      	mov	r7, r1
 801263c:	f7ed fed2 	bl	80003e4 <__aeabi_ui2d>
 8012640:	4602      	mov	r2, r0
 8012642:	460b      	mov	r3, r1
 8012644:	4630      	mov	r0, r6
 8012646:	4639      	mov	r1, r7
 8012648:	f7ed fd90 	bl	800016c <__adddf3>
 801264c:	2c0f      	cmp	r4, #15
 801264e:	4681      	mov	r9, r0
 8012650:	468a      	mov	sl, r1
 8012652:	ddd5      	ble.n	8012600 <_strtod_l+0x3a8>
 8012654:	9b07      	ldr	r3, [sp, #28]
 8012656:	eba4 0808 	sub.w	r8, r4, r8
 801265a:	4498      	add	r8, r3
 801265c:	f1b8 0f00 	cmp.w	r8, #0
 8012660:	f340 809a 	ble.w	8012798 <_strtod_l+0x540>
 8012664:	f018 030f 	ands.w	r3, r8, #15
 8012668:	d00a      	beq.n	8012680 <_strtod_l+0x428>
 801266a:	4963      	ldr	r1, [pc, #396]	; (80127f8 <_strtod_l+0x5a0>)
 801266c:	464a      	mov	r2, r9
 801266e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012676:	4653      	mov	r3, sl
 8012678:	f7ed ff2e 	bl	80004d8 <__aeabi_dmul>
 801267c:	4681      	mov	r9, r0
 801267e:	468a      	mov	sl, r1
 8012680:	f038 080f 	bics.w	r8, r8, #15
 8012684:	d077      	beq.n	8012776 <_strtod_l+0x51e>
 8012686:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801268a:	dd4b      	ble.n	8012724 <_strtod_l+0x4cc>
 801268c:	f04f 0800 	mov.w	r8, #0
 8012690:	f8cd 8010 	str.w	r8, [sp, #16]
 8012694:	f8cd 8020 	str.w	r8, [sp, #32]
 8012698:	f8cd 8018 	str.w	r8, [sp, #24]
 801269c:	2322      	movs	r3, #34	; 0x22
 801269e:	f04f 0900 	mov.w	r9, #0
 80126a2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8012800 <_strtod_l+0x5a8>
 80126a6:	f8cb 3000 	str.w	r3, [fp]
 80126aa:	9b08      	ldr	r3, [sp, #32]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	f43f ae12 	beq.w	80122d6 <_strtod_l+0x7e>
 80126b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80126b4:	4658      	mov	r0, fp
 80126b6:	f001 feff 	bl	80144b8 <_Bfree>
 80126ba:	9906      	ldr	r1, [sp, #24]
 80126bc:	4658      	mov	r0, fp
 80126be:	f001 fefb 	bl	80144b8 <_Bfree>
 80126c2:	9904      	ldr	r1, [sp, #16]
 80126c4:	4658      	mov	r0, fp
 80126c6:	f001 fef7 	bl	80144b8 <_Bfree>
 80126ca:	9908      	ldr	r1, [sp, #32]
 80126cc:	4658      	mov	r0, fp
 80126ce:	f001 fef3 	bl	80144b8 <_Bfree>
 80126d2:	4641      	mov	r1, r8
 80126d4:	4658      	mov	r0, fp
 80126d6:	f001 feef 	bl	80144b8 <_Bfree>
 80126da:	e5fc      	b.n	80122d6 <_strtod_l+0x7e>
 80126dc:	9a07      	ldr	r2, [sp, #28]
 80126de:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80126e2:	4293      	cmp	r3, r2
 80126e4:	dbb6      	blt.n	8012654 <_strtod_l+0x3fc>
 80126e6:	4d44      	ldr	r5, [pc, #272]	; (80127f8 <_strtod_l+0x5a0>)
 80126e8:	f1c4 040f 	rsb	r4, r4, #15
 80126ec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80126f0:	464a      	mov	r2, r9
 80126f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126f6:	4653      	mov	r3, sl
 80126f8:	f7ed feee 	bl	80004d8 <__aeabi_dmul>
 80126fc:	9b07      	ldr	r3, [sp, #28]
 80126fe:	1b1c      	subs	r4, r3, r4
 8012700:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012704:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012708:	e789      	b.n	801261e <_strtod_l+0x3c6>
 801270a:	f113 0f16 	cmn.w	r3, #22
 801270e:	dba1      	blt.n	8012654 <_strtod_l+0x3fc>
 8012710:	4a39      	ldr	r2, [pc, #228]	; (80127f8 <_strtod_l+0x5a0>)
 8012712:	4648      	mov	r0, r9
 8012714:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8012718:	e9d2 2300 	ldrd	r2, r3, [r2]
 801271c:	4651      	mov	r1, sl
 801271e:	f7ee f805 	bl	800072c <__aeabi_ddiv>
 8012722:	e77e      	b.n	8012622 <_strtod_l+0x3ca>
 8012724:	2300      	movs	r3, #0
 8012726:	4648      	mov	r0, r9
 8012728:	4651      	mov	r1, sl
 801272a:	461d      	mov	r5, r3
 801272c:	4e33      	ldr	r6, [pc, #204]	; (80127fc <_strtod_l+0x5a4>)
 801272e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012732:	f1b8 0f01 	cmp.w	r8, #1
 8012736:	dc21      	bgt.n	801277c <_strtod_l+0x524>
 8012738:	b10b      	cbz	r3, 801273e <_strtod_l+0x4e6>
 801273a:	4681      	mov	r9, r0
 801273c:	468a      	mov	sl, r1
 801273e:	4b2f      	ldr	r3, [pc, #188]	; (80127fc <_strtod_l+0x5a4>)
 8012740:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8012744:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012748:	464a      	mov	r2, r9
 801274a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801274e:	4653      	mov	r3, sl
 8012750:	f7ed fec2 	bl	80004d8 <__aeabi_dmul>
 8012754:	4b2a      	ldr	r3, [pc, #168]	; (8012800 <_strtod_l+0x5a8>)
 8012756:	460a      	mov	r2, r1
 8012758:	400b      	ands	r3, r1
 801275a:	492a      	ldr	r1, [pc, #168]	; (8012804 <_strtod_l+0x5ac>)
 801275c:	4681      	mov	r9, r0
 801275e:	428b      	cmp	r3, r1
 8012760:	d894      	bhi.n	801268c <_strtod_l+0x434>
 8012762:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012766:	428b      	cmp	r3, r1
 8012768:	bf86      	itte	hi
 801276a:	f04f 39ff 	movhi.w	r9, #4294967295
 801276e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 801280c <_strtod_l+0x5b4>
 8012772:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8012776:	2300      	movs	r3, #0
 8012778:	9305      	str	r3, [sp, #20]
 801277a:	e07b      	b.n	8012874 <_strtod_l+0x61c>
 801277c:	f018 0f01 	tst.w	r8, #1
 8012780:	d006      	beq.n	8012790 <_strtod_l+0x538>
 8012782:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8012786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278a:	f7ed fea5 	bl	80004d8 <__aeabi_dmul>
 801278e:	2301      	movs	r3, #1
 8012790:	3501      	adds	r5, #1
 8012792:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012796:	e7cc      	b.n	8012732 <_strtod_l+0x4da>
 8012798:	d0ed      	beq.n	8012776 <_strtod_l+0x51e>
 801279a:	f1c8 0800 	rsb	r8, r8, #0
 801279e:	f018 020f 	ands.w	r2, r8, #15
 80127a2:	d00a      	beq.n	80127ba <_strtod_l+0x562>
 80127a4:	4b14      	ldr	r3, [pc, #80]	; (80127f8 <_strtod_l+0x5a0>)
 80127a6:	4648      	mov	r0, r9
 80127a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80127ac:	4651      	mov	r1, sl
 80127ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b2:	f7ed ffbb 	bl	800072c <__aeabi_ddiv>
 80127b6:	4681      	mov	r9, r0
 80127b8:	468a      	mov	sl, r1
 80127ba:	ea5f 1828 	movs.w	r8, r8, asr #4
 80127be:	d0da      	beq.n	8012776 <_strtod_l+0x51e>
 80127c0:	f1b8 0f1f 	cmp.w	r8, #31
 80127c4:	dd24      	ble.n	8012810 <_strtod_l+0x5b8>
 80127c6:	f04f 0800 	mov.w	r8, #0
 80127ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80127ce:	f8cd 8020 	str.w	r8, [sp, #32]
 80127d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80127d6:	2322      	movs	r3, #34	; 0x22
 80127d8:	f04f 0900 	mov.w	r9, #0
 80127dc:	f04f 0a00 	mov.w	sl, #0
 80127e0:	f8cb 3000 	str.w	r3, [fp]
 80127e4:	e761      	b.n	80126aa <_strtod_l+0x452>
 80127e6:	bf00      	nop
 80127e8:	080183b2 	.word	0x080183b2
 80127ec:	0801843b 	.word	0x0801843b
 80127f0:	080183ba 	.word	0x080183ba
 80127f4:	080183fc 	.word	0x080183fc
 80127f8:	080184e0 	.word	0x080184e0
 80127fc:	080184b8 	.word	0x080184b8
 8012800:	7ff00000 	.word	0x7ff00000
 8012804:	7ca00000 	.word	0x7ca00000
 8012808:	fff80000 	.word	0xfff80000
 801280c:	7fefffff 	.word	0x7fefffff
 8012810:	f018 0310 	ands.w	r3, r8, #16
 8012814:	bf18      	it	ne
 8012816:	236a      	movne	r3, #106	; 0x6a
 8012818:	4648      	mov	r0, r9
 801281a:	9305      	str	r3, [sp, #20]
 801281c:	4651      	mov	r1, sl
 801281e:	2300      	movs	r3, #0
 8012820:	4da1      	ldr	r5, [pc, #644]	; (8012aa8 <_strtod_l+0x850>)
 8012822:	f1b8 0f00 	cmp.w	r8, #0
 8012826:	f300 8113 	bgt.w	8012a50 <_strtod_l+0x7f8>
 801282a:	b10b      	cbz	r3, 8012830 <_strtod_l+0x5d8>
 801282c:	4681      	mov	r9, r0
 801282e:	468a      	mov	sl, r1
 8012830:	9b05      	ldr	r3, [sp, #20]
 8012832:	b1bb      	cbz	r3, 8012864 <_strtod_l+0x60c>
 8012834:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8012838:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801283c:	2b00      	cmp	r3, #0
 801283e:	4651      	mov	r1, sl
 8012840:	dd10      	ble.n	8012864 <_strtod_l+0x60c>
 8012842:	2b1f      	cmp	r3, #31
 8012844:	f340 8110 	ble.w	8012a68 <_strtod_l+0x810>
 8012848:	2b34      	cmp	r3, #52	; 0x34
 801284a:	bfd8      	it	le
 801284c:	f04f 32ff 	movle.w	r2, #4294967295
 8012850:	f04f 0900 	mov.w	r9, #0
 8012854:	bfcf      	iteee	gt
 8012856:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 801285a:	3b20      	suble	r3, #32
 801285c:	fa02 f303 	lslle.w	r3, r2, r3
 8012860:	ea03 0a01 	andle.w	sl, r3, r1
 8012864:	2200      	movs	r2, #0
 8012866:	2300      	movs	r3, #0
 8012868:	4648      	mov	r0, r9
 801286a:	4651      	mov	r1, sl
 801286c:	f7ee f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8012870:	2800      	cmp	r0, #0
 8012872:	d1a8      	bne.n	80127c6 <_strtod_l+0x56e>
 8012874:	9b06      	ldr	r3, [sp, #24]
 8012876:	9a04      	ldr	r2, [sp, #16]
 8012878:	9300      	str	r3, [sp, #0]
 801287a:	9908      	ldr	r1, [sp, #32]
 801287c:	4623      	mov	r3, r4
 801287e:	4658      	mov	r0, fp
 8012880:	f001 fe6c 	bl	801455c <__s2b>
 8012884:	9008      	str	r0, [sp, #32]
 8012886:	2800      	cmp	r0, #0
 8012888:	f43f af00 	beq.w	801268c <_strtod_l+0x434>
 801288c:	9a07      	ldr	r2, [sp, #28]
 801288e:	9b07      	ldr	r3, [sp, #28]
 8012890:	2a00      	cmp	r2, #0
 8012892:	f1c3 0300 	rsb	r3, r3, #0
 8012896:	bfa8      	it	ge
 8012898:	2300      	movge	r3, #0
 801289a:	f04f 0800 	mov.w	r8, #0
 801289e:	930e      	str	r3, [sp, #56]	; 0x38
 80128a0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80128a4:	9316      	str	r3, [sp, #88]	; 0x58
 80128a6:	f8cd 8010 	str.w	r8, [sp, #16]
 80128aa:	9b08      	ldr	r3, [sp, #32]
 80128ac:	4658      	mov	r0, fp
 80128ae:	6859      	ldr	r1, [r3, #4]
 80128b0:	f001 fdce 	bl	8014450 <_Balloc>
 80128b4:	9006      	str	r0, [sp, #24]
 80128b6:	2800      	cmp	r0, #0
 80128b8:	f43f aef0 	beq.w	801269c <_strtod_l+0x444>
 80128bc:	9b08      	ldr	r3, [sp, #32]
 80128be:	300c      	adds	r0, #12
 80128c0:	691a      	ldr	r2, [r3, #16]
 80128c2:	f103 010c 	add.w	r1, r3, #12
 80128c6:	3202      	adds	r2, #2
 80128c8:	0092      	lsls	r2, r2, #2
 80128ca:	f7fe fcf4 	bl	80112b6 <memcpy>
 80128ce:	ab1e      	add	r3, sp, #120	; 0x78
 80128d0:	9301      	str	r3, [sp, #4]
 80128d2:	ab1d      	add	r3, sp, #116	; 0x74
 80128d4:	9300      	str	r3, [sp, #0]
 80128d6:	464a      	mov	r2, r9
 80128d8:	4653      	mov	r3, sl
 80128da:	4658      	mov	r0, fp
 80128dc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80128e0:	f002 f8f6 	bl	8014ad0 <__d2b>
 80128e4:	901c      	str	r0, [sp, #112]	; 0x70
 80128e6:	2800      	cmp	r0, #0
 80128e8:	f43f aed8 	beq.w	801269c <_strtod_l+0x444>
 80128ec:	2101      	movs	r1, #1
 80128ee:	4658      	mov	r0, fp
 80128f0:	f001 fec0 	bl	8014674 <__i2b>
 80128f4:	9004      	str	r0, [sp, #16]
 80128f6:	4603      	mov	r3, r0
 80128f8:	2800      	cmp	r0, #0
 80128fa:	f43f aecf 	beq.w	801269c <_strtod_l+0x444>
 80128fe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8012900:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012902:	2d00      	cmp	r5, #0
 8012904:	bfab      	itete	ge
 8012906:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8012908:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801290a:	18ee      	addge	r6, r5, r3
 801290c:	1b5c      	sublt	r4, r3, r5
 801290e:	9b05      	ldr	r3, [sp, #20]
 8012910:	bfa8      	it	ge
 8012912:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8012914:	eba5 0503 	sub.w	r5, r5, r3
 8012918:	4415      	add	r5, r2
 801291a:	4b64      	ldr	r3, [pc, #400]	; (8012aac <_strtod_l+0x854>)
 801291c:	f105 35ff 	add.w	r5, r5, #4294967295
 8012920:	bfb8      	it	lt
 8012922:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8012924:	429d      	cmp	r5, r3
 8012926:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801292a:	f280 80af 	bge.w	8012a8c <_strtod_l+0x834>
 801292e:	1b5b      	subs	r3, r3, r5
 8012930:	2b1f      	cmp	r3, #31
 8012932:	eba2 0203 	sub.w	r2, r2, r3
 8012936:	f04f 0701 	mov.w	r7, #1
 801293a:	f300 809c 	bgt.w	8012a76 <_strtod_l+0x81e>
 801293e:	2500      	movs	r5, #0
 8012940:	fa07 f303 	lsl.w	r3, r7, r3
 8012944:	930f      	str	r3, [sp, #60]	; 0x3c
 8012946:	18b7      	adds	r7, r6, r2
 8012948:	9b05      	ldr	r3, [sp, #20]
 801294a:	42be      	cmp	r6, r7
 801294c:	4414      	add	r4, r2
 801294e:	441c      	add	r4, r3
 8012950:	4633      	mov	r3, r6
 8012952:	bfa8      	it	ge
 8012954:	463b      	movge	r3, r7
 8012956:	42a3      	cmp	r3, r4
 8012958:	bfa8      	it	ge
 801295a:	4623      	movge	r3, r4
 801295c:	2b00      	cmp	r3, #0
 801295e:	bfc2      	ittt	gt
 8012960:	1aff      	subgt	r7, r7, r3
 8012962:	1ae4      	subgt	r4, r4, r3
 8012964:	1af6      	subgt	r6, r6, r3
 8012966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012968:	b1bb      	cbz	r3, 801299a <_strtod_l+0x742>
 801296a:	461a      	mov	r2, r3
 801296c:	9904      	ldr	r1, [sp, #16]
 801296e:	4658      	mov	r0, fp
 8012970:	f001 ff1e 	bl	80147b0 <__pow5mult>
 8012974:	9004      	str	r0, [sp, #16]
 8012976:	2800      	cmp	r0, #0
 8012978:	f43f ae90 	beq.w	801269c <_strtod_l+0x444>
 801297c:	4601      	mov	r1, r0
 801297e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012980:	4658      	mov	r0, fp
 8012982:	f001 fe80 	bl	8014686 <__multiply>
 8012986:	9009      	str	r0, [sp, #36]	; 0x24
 8012988:	2800      	cmp	r0, #0
 801298a:	f43f ae87 	beq.w	801269c <_strtod_l+0x444>
 801298e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012990:	4658      	mov	r0, fp
 8012992:	f001 fd91 	bl	80144b8 <_Bfree>
 8012996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012998:	931c      	str	r3, [sp, #112]	; 0x70
 801299a:	2f00      	cmp	r7, #0
 801299c:	dc7a      	bgt.n	8012a94 <_strtod_l+0x83c>
 801299e:	9b07      	ldr	r3, [sp, #28]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	dd08      	ble.n	80129b6 <_strtod_l+0x75e>
 80129a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80129a6:	9906      	ldr	r1, [sp, #24]
 80129a8:	4658      	mov	r0, fp
 80129aa:	f001 ff01 	bl	80147b0 <__pow5mult>
 80129ae:	9006      	str	r0, [sp, #24]
 80129b0:	2800      	cmp	r0, #0
 80129b2:	f43f ae73 	beq.w	801269c <_strtod_l+0x444>
 80129b6:	2c00      	cmp	r4, #0
 80129b8:	dd08      	ble.n	80129cc <_strtod_l+0x774>
 80129ba:	4622      	mov	r2, r4
 80129bc:	9906      	ldr	r1, [sp, #24]
 80129be:	4658      	mov	r0, fp
 80129c0:	f001 ff44 	bl	801484c <__lshift>
 80129c4:	9006      	str	r0, [sp, #24]
 80129c6:	2800      	cmp	r0, #0
 80129c8:	f43f ae68 	beq.w	801269c <_strtod_l+0x444>
 80129cc:	2e00      	cmp	r6, #0
 80129ce:	dd08      	ble.n	80129e2 <_strtod_l+0x78a>
 80129d0:	4632      	mov	r2, r6
 80129d2:	9904      	ldr	r1, [sp, #16]
 80129d4:	4658      	mov	r0, fp
 80129d6:	f001 ff39 	bl	801484c <__lshift>
 80129da:	9004      	str	r0, [sp, #16]
 80129dc:	2800      	cmp	r0, #0
 80129de:	f43f ae5d 	beq.w	801269c <_strtod_l+0x444>
 80129e2:	9a06      	ldr	r2, [sp, #24]
 80129e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80129e6:	4658      	mov	r0, fp
 80129e8:	f001 ff9e 	bl	8014928 <__mdiff>
 80129ec:	4680      	mov	r8, r0
 80129ee:	2800      	cmp	r0, #0
 80129f0:	f43f ae54 	beq.w	801269c <_strtod_l+0x444>
 80129f4:	2400      	movs	r4, #0
 80129f6:	68c3      	ldr	r3, [r0, #12]
 80129f8:	9904      	ldr	r1, [sp, #16]
 80129fa:	60c4      	str	r4, [r0, #12]
 80129fc:	930c      	str	r3, [sp, #48]	; 0x30
 80129fe:	f001 ff79 	bl	80148f4 <__mcmp>
 8012a02:	42a0      	cmp	r0, r4
 8012a04:	da54      	bge.n	8012ab0 <_strtod_l+0x858>
 8012a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a08:	b9f3      	cbnz	r3, 8012a48 <_strtod_l+0x7f0>
 8012a0a:	f1b9 0f00 	cmp.w	r9, #0
 8012a0e:	d11b      	bne.n	8012a48 <_strtod_l+0x7f0>
 8012a10:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8012a14:	b9c3      	cbnz	r3, 8012a48 <_strtod_l+0x7f0>
 8012a16:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8012a1a:	0d1b      	lsrs	r3, r3, #20
 8012a1c:	051b      	lsls	r3, r3, #20
 8012a1e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012a22:	d911      	bls.n	8012a48 <_strtod_l+0x7f0>
 8012a24:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012a28:	b91b      	cbnz	r3, 8012a32 <_strtod_l+0x7da>
 8012a2a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012a2e:	2b01      	cmp	r3, #1
 8012a30:	dd0a      	ble.n	8012a48 <_strtod_l+0x7f0>
 8012a32:	4641      	mov	r1, r8
 8012a34:	2201      	movs	r2, #1
 8012a36:	4658      	mov	r0, fp
 8012a38:	f001 ff08 	bl	801484c <__lshift>
 8012a3c:	9904      	ldr	r1, [sp, #16]
 8012a3e:	4680      	mov	r8, r0
 8012a40:	f001 ff58 	bl	80148f4 <__mcmp>
 8012a44:	2800      	cmp	r0, #0
 8012a46:	dc68      	bgt.n	8012b1a <_strtod_l+0x8c2>
 8012a48:	9b05      	ldr	r3, [sp, #20]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d172      	bne.n	8012b34 <_strtod_l+0x8dc>
 8012a4e:	e630      	b.n	80126b2 <_strtod_l+0x45a>
 8012a50:	f018 0f01 	tst.w	r8, #1
 8012a54:	d004      	beq.n	8012a60 <_strtod_l+0x808>
 8012a56:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012a5a:	f7ed fd3d 	bl	80004d8 <__aeabi_dmul>
 8012a5e:	2301      	movs	r3, #1
 8012a60:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012a64:	3508      	adds	r5, #8
 8012a66:	e6dc      	b.n	8012822 <_strtod_l+0x5ca>
 8012a68:	f04f 32ff 	mov.w	r2, #4294967295
 8012a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8012a70:	ea03 0909 	and.w	r9, r3, r9
 8012a74:	e6f6      	b.n	8012864 <_strtod_l+0x60c>
 8012a76:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8012a7a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8012a7e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8012a82:	35e2      	adds	r5, #226	; 0xe2
 8012a84:	fa07 f505 	lsl.w	r5, r7, r5
 8012a88:	970f      	str	r7, [sp, #60]	; 0x3c
 8012a8a:	e75c      	b.n	8012946 <_strtod_l+0x6ee>
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	2500      	movs	r5, #0
 8012a90:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a92:	e758      	b.n	8012946 <_strtod_l+0x6ee>
 8012a94:	463a      	mov	r2, r7
 8012a96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012a98:	4658      	mov	r0, fp
 8012a9a:	f001 fed7 	bl	801484c <__lshift>
 8012a9e:	901c      	str	r0, [sp, #112]	; 0x70
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	f47f af7c 	bne.w	801299e <_strtod_l+0x746>
 8012aa6:	e5f9      	b.n	801269c <_strtod_l+0x444>
 8012aa8:	08018410 	.word	0x08018410
 8012aac:	fffffc02 	.word	0xfffffc02
 8012ab0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012ab4:	f040 8089 	bne.w	8012bca <_strtod_l+0x972>
 8012ab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012aba:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8012abe:	b342      	cbz	r2, 8012b12 <_strtod_l+0x8ba>
 8012ac0:	4aaf      	ldr	r2, [pc, #700]	; (8012d80 <_strtod_l+0xb28>)
 8012ac2:	4293      	cmp	r3, r2
 8012ac4:	d156      	bne.n	8012b74 <_strtod_l+0x91c>
 8012ac6:	9b05      	ldr	r3, [sp, #20]
 8012ac8:	4648      	mov	r0, r9
 8012aca:	b1eb      	cbz	r3, 8012b08 <_strtod_l+0x8b0>
 8012acc:	4653      	mov	r3, sl
 8012ace:	4aad      	ldr	r2, [pc, #692]	; (8012d84 <_strtod_l+0xb2c>)
 8012ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8012ad4:	401a      	ands	r2, r3
 8012ad6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012ada:	d818      	bhi.n	8012b0e <_strtod_l+0x8b6>
 8012adc:	0d12      	lsrs	r2, r2, #20
 8012ade:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8012ae6:	4298      	cmp	r0, r3
 8012ae8:	d144      	bne.n	8012b74 <_strtod_l+0x91c>
 8012aea:	4ba7      	ldr	r3, [pc, #668]	; (8012d88 <_strtod_l+0xb30>)
 8012aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d102      	bne.n	8012af8 <_strtod_l+0x8a0>
 8012af2:	3001      	adds	r0, #1
 8012af4:	f43f add2 	beq.w	801269c <_strtod_l+0x444>
 8012af8:	4ba2      	ldr	r3, [pc, #648]	; (8012d84 <_strtod_l+0xb2c>)
 8012afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012afc:	f04f 0900 	mov.w	r9, #0
 8012b00:	401a      	ands	r2, r3
 8012b02:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8012b06:	e79f      	b.n	8012a48 <_strtod_l+0x7f0>
 8012b08:	f04f 33ff 	mov.w	r3, #4294967295
 8012b0c:	e7eb      	b.n	8012ae6 <_strtod_l+0x88e>
 8012b0e:	460b      	mov	r3, r1
 8012b10:	e7e9      	b.n	8012ae6 <_strtod_l+0x88e>
 8012b12:	bb7b      	cbnz	r3, 8012b74 <_strtod_l+0x91c>
 8012b14:	f1b9 0f00 	cmp.w	r9, #0
 8012b18:	d12c      	bne.n	8012b74 <_strtod_l+0x91c>
 8012b1a:	9905      	ldr	r1, [sp, #20]
 8012b1c:	4653      	mov	r3, sl
 8012b1e:	4a99      	ldr	r2, [pc, #612]	; (8012d84 <_strtod_l+0xb2c>)
 8012b20:	b1f1      	cbz	r1, 8012b60 <_strtod_l+0x908>
 8012b22:	ea02 010a 	and.w	r1, r2, sl
 8012b26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012b2a:	dc19      	bgt.n	8012b60 <_strtod_l+0x908>
 8012b2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012b30:	f77f ae51 	ble.w	80127d6 <_strtod_l+0x57e>
 8012b34:	2300      	movs	r3, #0
 8012b36:	4a95      	ldr	r2, [pc, #596]	; (8012d8c <_strtod_l+0xb34>)
 8012b38:	4648      	mov	r0, r9
 8012b3a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012b3e:	4651      	mov	r1, sl
 8012b40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012b44:	f7ed fcc8 	bl	80004d8 <__aeabi_dmul>
 8012b48:	4681      	mov	r9, r0
 8012b4a:	468a      	mov	sl, r1
 8012b4c:	2900      	cmp	r1, #0
 8012b4e:	f47f adb0 	bne.w	80126b2 <_strtod_l+0x45a>
 8012b52:	2800      	cmp	r0, #0
 8012b54:	f47f adad 	bne.w	80126b2 <_strtod_l+0x45a>
 8012b58:	2322      	movs	r3, #34	; 0x22
 8012b5a:	f8cb 3000 	str.w	r3, [fp]
 8012b5e:	e5a8      	b.n	80126b2 <_strtod_l+0x45a>
 8012b60:	4013      	ands	r3, r2
 8012b62:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012b66:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8012b6a:	f04f 39ff 	mov.w	r9, #4294967295
 8012b6e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8012b72:	e769      	b.n	8012a48 <_strtod_l+0x7f0>
 8012b74:	b19d      	cbz	r5, 8012b9e <_strtod_l+0x946>
 8012b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b78:	421d      	tst	r5, r3
 8012b7a:	f43f af65 	beq.w	8012a48 <_strtod_l+0x7f0>
 8012b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b80:	9a05      	ldr	r2, [sp, #20]
 8012b82:	4648      	mov	r0, r9
 8012b84:	4651      	mov	r1, sl
 8012b86:	b173      	cbz	r3, 8012ba6 <_strtod_l+0x94e>
 8012b88:	f7ff fb44 	bl	8012214 <sulp>
 8012b8c:	4602      	mov	r2, r0
 8012b8e:	460b      	mov	r3, r1
 8012b90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012b94:	f7ed faea 	bl	800016c <__adddf3>
 8012b98:	4681      	mov	r9, r0
 8012b9a:	468a      	mov	sl, r1
 8012b9c:	e754      	b.n	8012a48 <_strtod_l+0x7f0>
 8012b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ba0:	ea13 0f09 	tst.w	r3, r9
 8012ba4:	e7e9      	b.n	8012b7a <_strtod_l+0x922>
 8012ba6:	f7ff fb35 	bl	8012214 <sulp>
 8012baa:	4602      	mov	r2, r0
 8012bac:	460b      	mov	r3, r1
 8012bae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012bb2:	f7ed fad9 	bl	8000168 <__aeabi_dsub>
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	2300      	movs	r3, #0
 8012bba:	4681      	mov	r9, r0
 8012bbc:	468a      	mov	sl, r1
 8012bbe:	f7ed fef3 	bl	80009a8 <__aeabi_dcmpeq>
 8012bc2:	2800      	cmp	r0, #0
 8012bc4:	f47f ae07 	bne.w	80127d6 <_strtod_l+0x57e>
 8012bc8:	e73e      	b.n	8012a48 <_strtod_l+0x7f0>
 8012bca:	9904      	ldr	r1, [sp, #16]
 8012bcc:	4640      	mov	r0, r8
 8012bce:	f001 ffce 	bl	8014b6e <__ratio>
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012bd8:	4606      	mov	r6, r0
 8012bda:	460f      	mov	r7, r1
 8012bdc:	f7ed fef8 	bl	80009d0 <__aeabi_dcmple>
 8012be0:	2800      	cmp	r0, #0
 8012be2:	d075      	beq.n	8012cd0 <_strtod_l+0xa78>
 8012be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d047      	beq.n	8012c7a <_strtod_l+0xa22>
 8012bea:	2600      	movs	r6, #0
 8012bec:	4f68      	ldr	r7, [pc, #416]	; (8012d90 <_strtod_l+0xb38>)
 8012bee:	4d68      	ldr	r5, [pc, #416]	; (8012d90 <_strtod_l+0xb38>)
 8012bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012bf6:	0d1b      	lsrs	r3, r3, #20
 8012bf8:	051b      	lsls	r3, r3, #20
 8012bfa:	930f      	str	r3, [sp, #60]	; 0x3c
 8012bfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012bfe:	4b65      	ldr	r3, [pc, #404]	; (8012d94 <_strtod_l+0xb3c>)
 8012c00:	429a      	cmp	r2, r3
 8012c02:	f040 80cf 	bne.w	8012da4 <_strtod_l+0xb4c>
 8012c06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012c0a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8012c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c10:	4648      	mov	r0, r9
 8012c12:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8012c16:	4651      	mov	r1, sl
 8012c18:	f001 fee4 	bl	80149e4 <__ulp>
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	460b      	mov	r3, r1
 8012c20:	4630      	mov	r0, r6
 8012c22:	4639      	mov	r1, r7
 8012c24:	f7ed fc58 	bl	80004d8 <__aeabi_dmul>
 8012c28:	464a      	mov	r2, r9
 8012c2a:	4653      	mov	r3, sl
 8012c2c:	f7ed fa9e 	bl	800016c <__adddf3>
 8012c30:	460b      	mov	r3, r1
 8012c32:	4954      	ldr	r1, [pc, #336]	; (8012d84 <_strtod_l+0xb2c>)
 8012c34:	4a58      	ldr	r2, [pc, #352]	; (8012d98 <_strtod_l+0xb40>)
 8012c36:	4019      	ands	r1, r3
 8012c38:	4291      	cmp	r1, r2
 8012c3a:	4681      	mov	r9, r0
 8012c3c:	d95e      	bls.n	8012cfc <_strtod_l+0xaa4>
 8012c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c40:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012c44:	4293      	cmp	r3, r2
 8012c46:	d103      	bne.n	8012c50 <_strtod_l+0x9f8>
 8012c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	f43f ad26 	beq.w	801269c <_strtod_l+0x444>
 8012c50:	f04f 39ff 	mov.w	r9, #4294967295
 8012c54:	f8df a130 	ldr.w	sl, [pc, #304]	; 8012d88 <_strtod_l+0xb30>
 8012c58:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012c5a:	4658      	mov	r0, fp
 8012c5c:	f001 fc2c 	bl	80144b8 <_Bfree>
 8012c60:	9906      	ldr	r1, [sp, #24]
 8012c62:	4658      	mov	r0, fp
 8012c64:	f001 fc28 	bl	80144b8 <_Bfree>
 8012c68:	9904      	ldr	r1, [sp, #16]
 8012c6a:	4658      	mov	r0, fp
 8012c6c:	f001 fc24 	bl	80144b8 <_Bfree>
 8012c70:	4641      	mov	r1, r8
 8012c72:	4658      	mov	r0, fp
 8012c74:	f001 fc20 	bl	80144b8 <_Bfree>
 8012c78:	e617      	b.n	80128aa <_strtod_l+0x652>
 8012c7a:	f1b9 0f00 	cmp.w	r9, #0
 8012c7e:	d119      	bne.n	8012cb4 <_strtod_l+0xa5c>
 8012c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c86:	b9e3      	cbnz	r3, 8012cc2 <_strtod_l+0xa6a>
 8012c88:	2200      	movs	r2, #0
 8012c8a:	4b41      	ldr	r3, [pc, #260]	; (8012d90 <_strtod_l+0xb38>)
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	4639      	mov	r1, r7
 8012c90:	f7ed fe94 	bl	80009bc <__aeabi_dcmplt>
 8012c94:	b9c8      	cbnz	r0, 8012cca <_strtod_l+0xa72>
 8012c96:	2200      	movs	r2, #0
 8012c98:	4b40      	ldr	r3, [pc, #256]	; (8012d9c <_strtod_l+0xb44>)
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	4639      	mov	r1, r7
 8012c9e:	f7ed fc1b 	bl	80004d8 <__aeabi_dmul>
 8012ca2:	4604      	mov	r4, r0
 8012ca4:	460d      	mov	r5, r1
 8012ca6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8012caa:	9418      	str	r4, [sp, #96]	; 0x60
 8012cac:	9319      	str	r3, [sp, #100]	; 0x64
 8012cae:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8012cb2:	e79d      	b.n	8012bf0 <_strtod_l+0x998>
 8012cb4:	f1b9 0f01 	cmp.w	r9, #1
 8012cb8:	d103      	bne.n	8012cc2 <_strtod_l+0xa6a>
 8012cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	f43f ad8a 	beq.w	80127d6 <_strtod_l+0x57e>
 8012cc2:	2600      	movs	r6, #0
 8012cc4:	4f36      	ldr	r7, [pc, #216]	; (8012da0 <_strtod_l+0xb48>)
 8012cc6:	2400      	movs	r4, #0
 8012cc8:	e791      	b.n	8012bee <_strtod_l+0x996>
 8012cca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012ccc:	4d33      	ldr	r5, [pc, #204]	; (8012d9c <_strtod_l+0xb44>)
 8012cce:	e7ea      	b.n	8012ca6 <_strtod_l+0xa4e>
 8012cd0:	4b32      	ldr	r3, [pc, #200]	; (8012d9c <_strtod_l+0xb44>)
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	4639      	mov	r1, r7
 8012cd8:	f7ed fbfe 	bl	80004d8 <__aeabi_dmul>
 8012cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cde:	4604      	mov	r4, r0
 8012ce0:	460d      	mov	r5, r1
 8012ce2:	b933      	cbnz	r3, 8012cf2 <_strtod_l+0xa9a>
 8012ce4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ce8:	9010      	str	r0, [sp, #64]	; 0x40
 8012cea:	9311      	str	r3, [sp, #68]	; 0x44
 8012cec:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012cf0:	e77e      	b.n	8012bf0 <_strtod_l+0x998>
 8012cf2:	4602      	mov	r2, r0
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8012cfa:	e7f7      	b.n	8012cec <_strtod_l+0xa94>
 8012cfc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8012d00:	9b05      	ldr	r3, [sp, #20]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d1a8      	bne.n	8012c58 <_strtod_l+0xa00>
 8012d06:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8012d0a:	0d1b      	lsrs	r3, r3, #20
 8012d0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012d0e:	051b      	lsls	r3, r3, #20
 8012d10:	429a      	cmp	r2, r3
 8012d12:	4656      	mov	r6, sl
 8012d14:	d1a0      	bne.n	8012c58 <_strtod_l+0xa00>
 8012d16:	4629      	mov	r1, r5
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f7ed fe8d 	bl	8000a38 <__aeabi_d2iz>
 8012d1e:	f7ed fb71 	bl	8000404 <__aeabi_i2d>
 8012d22:	460b      	mov	r3, r1
 8012d24:	4602      	mov	r2, r0
 8012d26:	4629      	mov	r1, r5
 8012d28:	4620      	mov	r0, r4
 8012d2a:	f7ed fa1d 	bl	8000168 <__aeabi_dsub>
 8012d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d30:	4604      	mov	r4, r0
 8012d32:	460d      	mov	r5, r1
 8012d34:	b933      	cbnz	r3, 8012d44 <_strtod_l+0xaec>
 8012d36:	f1b9 0f00 	cmp.w	r9, #0
 8012d3a:	d103      	bne.n	8012d44 <_strtod_l+0xaec>
 8012d3c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8012d40:	2e00      	cmp	r6, #0
 8012d42:	d06a      	beq.n	8012e1a <_strtod_l+0xbc2>
 8012d44:	a30a      	add	r3, pc, #40	; (adr r3, 8012d70 <_strtod_l+0xb18>)
 8012d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	f7ed fe35 	bl	80009bc <__aeabi_dcmplt>
 8012d52:	2800      	cmp	r0, #0
 8012d54:	f47f acad 	bne.w	80126b2 <_strtod_l+0x45a>
 8012d58:	a307      	add	r3, pc, #28	; (adr r3, 8012d78 <_strtod_l+0xb20>)
 8012d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d5e:	4620      	mov	r0, r4
 8012d60:	4629      	mov	r1, r5
 8012d62:	f7ed fe49 	bl	80009f8 <__aeabi_dcmpgt>
 8012d66:	2800      	cmp	r0, #0
 8012d68:	f43f af76 	beq.w	8012c58 <_strtod_l+0xa00>
 8012d6c:	e4a1      	b.n	80126b2 <_strtod_l+0x45a>
 8012d6e:	bf00      	nop
 8012d70:	94a03595 	.word	0x94a03595
 8012d74:	3fdfffff 	.word	0x3fdfffff
 8012d78:	35afe535 	.word	0x35afe535
 8012d7c:	3fe00000 	.word	0x3fe00000
 8012d80:	000fffff 	.word	0x000fffff
 8012d84:	7ff00000 	.word	0x7ff00000
 8012d88:	7fefffff 	.word	0x7fefffff
 8012d8c:	39500000 	.word	0x39500000
 8012d90:	3ff00000 	.word	0x3ff00000
 8012d94:	7fe00000 	.word	0x7fe00000
 8012d98:	7c9fffff 	.word	0x7c9fffff
 8012d9c:	3fe00000 	.word	0x3fe00000
 8012da0:	bff00000 	.word	0xbff00000
 8012da4:	9b05      	ldr	r3, [sp, #20]
 8012da6:	b313      	cbz	r3, 8012dee <_strtod_l+0xb96>
 8012da8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012daa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012dae:	d81e      	bhi.n	8012dee <_strtod_l+0xb96>
 8012db0:	a325      	add	r3, pc, #148	; (adr r3, 8012e48 <_strtod_l+0xbf0>)
 8012db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db6:	4620      	mov	r0, r4
 8012db8:	4629      	mov	r1, r5
 8012dba:	f7ed fe09 	bl	80009d0 <__aeabi_dcmple>
 8012dbe:	b190      	cbz	r0, 8012de6 <_strtod_l+0xb8e>
 8012dc0:	4629      	mov	r1, r5
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f7ed fe60 	bl	8000a88 <__aeabi_d2uiz>
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	bf08      	it	eq
 8012dcc:	2001      	moveq	r0, #1
 8012dce:	f7ed fb09 	bl	80003e4 <__aeabi_ui2d>
 8012dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	460d      	mov	r5, r1
 8012dd8:	b9d3      	cbnz	r3, 8012e10 <_strtod_l+0xbb8>
 8012dda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012dde:	9012      	str	r0, [sp, #72]	; 0x48
 8012de0:	9313      	str	r3, [sp, #76]	; 0x4c
 8012de2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8012de6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012de8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8012dec:	1a9f      	subs	r7, r3, r2
 8012dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012df2:	f001 fdf7 	bl	80149e4 <__ulp>
 8012df6:	4602      	mov	r2, r0
 8012df8:	460b      	mov	r3, r1
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	4639      	mov	r1, r7
 8012dfe:	f7ed fb6b 	bl	80004d8 <__aeabi_dmul>
 8012e02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012e06:	f7ed f9b1 	bl	800016c <__adddf3>
 8012e0a:	4681      	mov	r9, r0
 8012e0c:	468a      	mov	sl, r1
 8012e0e:	e777      	b.n	8012d00 <_strtod_l+0xaa8>
 8012e10:	4602      	mov	r2, r0
 8012e12:	460b      	mov	r3, r1
 8012e14:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8012e18:	e7e3      	b.n	8012de2 <_strtod_l+0xb8a>
 8012e1a:	a30d      	add	r3, pc, #52	; (adr r3, 8012e50 <_strtod_l+0xbf8>)
 8012e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e20:	f7ed fdcc 	bl	80009bc <__aeabi_dcmplt>
 8012e24:	e79f      	b.n	8012d66 <_strtod_l+0xb0e>
 8012e26:	2300      	movs	r3, #0
 8012e28:	930d      	str	r3, [sp, #52]	; 0x34
 8012e2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012e2e:	6013      	str	r3, [r2, #0]
 8012e30:	f7ff ba55 	b.w	80122de <_strtod_l+0x86>
 8012e34:	2b65      	cmp	r3, #101	; 0x65
 8012e36:	f04f 0200 	mov.w	r2, #0
 8012e3a:	f43f ab42 	beq.w	80124c2 <_strtod_l+0x26a>
 8012e3e:	2101      	movs	r1, #1
 8012e40:	4614      	mov	r4, r2
 8012e42:	9105      	str	r1, [sp, #20]
 8012e44:	f7ff babf 	b.w	80123c6 <_strtod_l+0x16e>
 8012e48:	ffc00000 	.word	0xffc00000
 8012e4c:	41dfffff 	.word	0x41dfffff
 8012e50:	94a03595 	.word	0x94a03595
 8012e54:	3fcfffff 	.word	0x3fcfffff

08012e58 <_strtod_r>:
 8012e58:	4b05      	ldr	r3, [pc, #20]	; (8012e70 <_strtod_r+0x18>)
 8012e5a:	b410      	push	{r4}
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	4c05      	ldr	r4, [pc, #20]	; (8012e74 <_strtod_r+0x1c>)
 8012e60:	6a1b      	ldr	r3, [r3, #32]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	bf08      	it	eq
 8012e66:	4623      	moveq	r3, r4
 8012e68:	bc10      	pop	{r4}
 8012e6a:	f7ff b9f5 	b.w	8012258 <_strtod_l>
 8012e6e:	bf00      	nop
 8012e70:	200000a8 	.word	0x200000a8
 8012e74:	2000010c 	.word	0x2000010c

08012e78 <_strtol_l.isra.0>:
 8012e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e7c:	4680      	mov	r8, r0
 8012e7e:	4689      	mov	r9, r1
 8012e80:	4692      	mov	sl, r2
 8012e82:	461e      	mov	r6, r3
 8012e84:	460f      	mov	r7, r1
 8012e86:	463d      	mov	r5, r7
 8012e88:	9808      	ldr	r0, [sp, #32]
 8012e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e8e:	f001 fab7 	bl	8014400 <__locale_ctype_ptr_l>
 8012e92:	4420      	add	r0, r4
 8012e94:	7843      	ldrb	r3, [r0, #1]
 8012e96:	f013 0308 	ands.w	r3, r3, #8
 8012e9a:	d132      	bne.n	8012f02 <_strtol_l.isra.0+0x8a>
 8012e9c:	2c2d      	cmp	r4, #45	; 0x2d
 8012e9e:	d132      	bne.n	8012f06 <_strtol_l.isra.0+0x8e>
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	787c      	ldrb	r4, [r7, #1]
 8012ea4:	1cbd      	adds	r5, r7, #2
 8012ea6:	2e00      	cmp	r6, #0
 8012ea8:	d05d      	beq.n	8012f66 <_strtol_l.isra.0+0xee>
 8012eaa:	2e10      	cmp	r6, #16
 8012eac:	d109      	bne.n	8012ec2 <_strtol_l.isra.0+0x4a>
 8012eae:	2c30      	cmp	r4, #48	; 0x30
 8012eb0:	d107      	bne.n	8012ec2 <_strtol_l.isra.0+0x4a>
 8012eb2:	782b      	ldrb	r3, [r5, #0]
 8012eb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012eb8:	2b58      	cmp	r3, #88	; 0x58
 8012eba:	d14f      	bne.n	8012f5c <_strtol_l.isra.0+0xe4>
 8012ebc:	2610      	movs	r6, #16
 8012ebe:	786c      	ldrb	r4, [r5, #1]
 8012ec0:	3502      	adds	r5, #2
 8012ec2:	2a00      	cmp	r2, #0
 8012ec4:	bf14      	ite	ne
 8012ec6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012eca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012ece:	2700      	movs	r7, #0
 8012ed0:	fbb1 fcf6 	udiv	ip, r1, r6
 8012ed4:	4638      	mov	r0, r7
 8012ed6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012eda:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012ede:	2b09      	cmp	r3, #9
 8012ee0:	d817      	bhi.n	8012f12 <_strtol_l.isra.0+0x9a>
 8012ee2:	461c      	mov	r4, r3
 8012ee4:	42a6      	cmp	r6, r4
 8012ee6:	dd23      	ble.n	8012f30 <_strtol_l.isra.0+0xb8>
 8012ee8:	1c7b      	adds	r3, r7, #1
 8012eea:	d007      	beq.n	8012efc <_strtol_l.isra.0+0x84>
 8012eec:	4584      	cmp	ip, r0
 8012eee:	d31c      	bcc.n	8012f2a <_strtol_l.isra.0+0xb2>
 8012ef0:	d101      	bne.n	8012ef6 <_strtol_l.isra.0+0x7e>
 8012ef2:	45a6      	cmp	lr, r4
 8012ef4:	db19      	blt.n	8012f2a <_strtol_l.isra.0+0xb2>
 8012ef6:	2701      	movs	r7, #1
 8012ef8:	fb00 4006 	mla	r0, r0, r6, r4
 8012efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f00:	e7eb      	b.n	8012eda <_strtol_l.isra.0+0x62>
 8012f02:	462f      	mov	r7, r5
 8012f04:	e7bf      	b.n	8012e86 <_strtol_l.isra.0+0xe>
 8012f06:	2c2b      	cmp	r4, #43	; 0x2b
 8012f08:	bf04      	itt	eq
 8012f0a:	1cbd      	addeq	r5, r7, #2
 8012f0c:	787c      	ldrbeq	r4, [r7, #1]
 8012f0e:	461a      	mov	r2, r3
 8012f10:	e7c9      	b.n	8012ea6 <_strtol_l.isra.0+0x2e>
 8012f12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012f16:	2b19      	cmp	r3, #25
 8012f18:	d801      	bhi.n	8012f1e <_strtol_l.isra.0+0xa6>
 8012f1a:	3c37      	subs	r4, #55	; 0x37
 8012f1c:	e7e2      	b.n	8012ee4 <_strtol_l.isra.0+0x6c>
 8012f1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012f22:	2b19      	cmp	r3, #25
 8012f24:	d804      	bhi.n	8012f30 <_strtol_l.isra.0+0xb8>
 8012f26:	3c57      	subs	r4, #87	; 0x57
 8012f28:	e7dc      	b.n	8012ee4 <_strtol_l.isra.0+0x6c>
 8012f2a:	f04f 37ff 	mov.w	r7, #4294967295
 8012f2e:	e7e5      	b.n	8012efc <_strtol_l.isra.0+0x84>
 8012f30:	1c7b      	adds	r3, r7, #1
 8012f32:	d108      	bne.n	8012f46 <_strtol_l.isra.0+0xce>
 8012f34:	2322      	movs	r3, #34	; 0x22
 8012f36:	4608      	mov	r0, r1
 8012f38:	f8c8 3000 	str.w	r3, [r8]
 8012f3c:	f1ba 0f00 	cmp.w	sl, #0
 8012f40:	d107      	bne.n	8012f52 <_strtol_l.isra.0+0xda>
 8012f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f46:	b102      	cbz	r2, 8012f4a <_strtol_l.isra.0+0xd2>
 8012f48:	4240      	negs	r0, r0
 8012f4a:	f1ba 0f00 	cmp.w	sl, #0
 8012f4e:	d0f8      	beq.n	8012f42 <_strtol_l.isra.0+0xca>
 8012f50:	b10f      	cbz	r7, 8012f56 <_strtol_l.isra.0+0xde>
 8012f52:	f105 39ff 	add.w	r9, r5, #4294967295
 8012f56:	f8ca 9000 	str.w	r9, [sl]
 8012f5a:	e7f2      	b.n	8012f42 <_strtol_l.isra.0+0xca>
 8012f5c:	2430      	movs	r4, #48	; 0x30
 8012f5e:	2e00      	cmp	r6, #0
 8012f60:	d1af      	bne.n	8012ec2 <_strtol_l.isra.0+0x4a>
 8012f62:	2608      	movs	r6, #8
 8012f64:	e7ad      	b.n	8012ec2 <_strtol_l.isra.0+0x4a>
 8012f66:	2c30      	cmp	r4, #48	; 0x30
 8012f68:	d0a3      	beq.n	8012eb2 <_strtol_l.isra.0+0x3a>
 8012f6a:	260a      	movs	r6, #10
 8012f6c:	e7a9      	b.n	8012ec2 <_strtol_l.isra.0+0x4a>
	...

08012f70 <_strtol_r>:
 8012f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f72:	4c06      	ldr	r4, [pc, #24]	; (8012f8c <_strtol_r+0x1c>)
 8012f74:	4d06      	ldr	r5, [pc, #24]	; (8012f90 <_strtol_r+0x20>)
 8012f76:	6824      	ldr	r4, [r4, #0]
 8012f78:	6a24      	ldr	r4, [r4, #32]
 8012f7a:	2c00      	cmp	r4, #0
 8012f7c:	bf08      	it	eq
 8012f7e:	462c      	moveq	r4, r5
 8012f80:	9400      	str	r4, [sp, #0]
 8012f82:	f7ff ff79 	bl	8012e78 <_strtol_l.isra.0>
 8012f86:	b003      	add	sp, #12
 8012f88:	bd30      	pop	{r4, r5, pc}
 8012f8a:	bf00      	nop
 8012f8c:	200000a8 	.word	0x200000a8
 8012f90:	2000010c 	.word	0x2000010c

08012f94 <_strtoul_l.isra.0>:
 8012f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f98:	4680      	mov	r8, r0
 8012f9a:	4689      	mov	r9, r1
 8012f9c:	4692      	mov	sl, r2
 8012f9e:	461e      	mov	r6, r3
 8012fa0:	460f      	mov	r7, r1
 8012fa2:	463d      	mov	r5, r7
 8012fa4:	9808      	ldr	r0, [sp, #32]
 8012fa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012faa:	f001 fa29 	bl	8014400 <__locale_ctype_ptr_l>
 8012fae:	4420      	add	r0, r4
 8012fb0:	7843      	ldrb	r3, [r0, #1]
 8012fb2:	f013 0308 	ands.w	r3, r3, #8
 8012fb6:	d130      	bne.n	801301a <_strtoul_l.isra.0+0x86>
 8012fb8:	2c2d      	cmp	r4, #45	; 0x2d
 8012fba:	d130      	bne.n	801301e <_strtoul_l.isra.0+0x8a>
 8012fbc:	2101      	movs	r1, #1
 8012fbe:	787c      	ldrb	r4, [r7, #1]
 8012fc0:	1cbd      	adds	r5, r7, #2
 8012fc2:	2e00      	cmp	r6, #0
 8012fc4:	d05c      	beq.n	8013080 <_strtoul_l.isra.0+0xec>
 8012fc6:	2e10      	cmp	r6, #16
 8012fc8:	d109      	bne.n	8012fde <_strtoul_l.isra.0+0x4a>
 8012fca:	2c30      	cmp	r4, #48	; 0x30
 8012fcc:	d107      	bne.n	8012fde <_strtoul_l.isra.0+0x4a>
 8012fce:	782b      	ldrb	r3, [r5, #0]
 8012fd0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012fd4:	2b58      	cmp	r3, #88	; 0x58
 8012fd6:	d14e      	bne.n	8013076 <_strtoul_l.isra.0+0xe2>
 8012fd8:	2610      	movs	r6, #16
 8012fda:	786c      	ldrb	r4, [r5, #1]
 8012fdc:	3502      	adds	r5, #2
 8012fde:	f04f 32ff 	mov.w	r2, #4294967295
 8012fe2:	fbb2 f2f6 	udiv	r2, r2, r6
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	fb06 fc02 	mul.w	ip, r6, r2
 8012fec:	4618      	mov	r0, r3
 8012fee:	ea6f 0c0c 	mvn.w	ip, ip
 8012ff2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012ff6:	2f09      	cmp	r7, #9
 8012ff8:	d817      	bhi.n	801302a <_strtoul_l.isra.0+0x96>
 8012ffa:	463c      	mov	r4, r7
 8012ffc:	42a6      	cmp	r6, r4
 8012ffe:	dd23      	ble.n	8013048 <_strtoul_l.isra.0+0xb4>
 8013000:	2b00      	cmp	r3, #0
 8013002:	db1e      	blt.n	8013042 <_strtoul_l.isra.0+0xae>
 8013004:	4282      	cmp	r2, r0
 8013006:	d31c      	bcc.n	8013042 <_strtoul_l.isra.0+0xae>
 8013008:	d101      	bne.n	801300e <_strtoul_l.isra.0+0x7a>
 801300a:	45a4      	cmp	ip, r4
 801300c:	db19      	blt.n	8013042 <_strtoul_l.isra.0+0xae>
 801300e:	2301      	movs	r3, #1
 8013010:	fb00 4006 	mla	r0, r0, r6, r4
 8013014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013018:	e7eb      	b.n	8012ff2 <_strtoul_l.isra.0+0x5e>
 801301a:	462f      	mov	r7, r5
 801301c:	e7c1      	b.n	8012fa2 <_strtoul_l.isra.0+0xe>
 801301e:	2c2b      	cmp	r4, #43	; 0x2b
 8013020:	bf04      	itt	eq
 8013022:	1cbd      	addeq	r5, r7, #2
 8013024:	787c      	ldrbeq	r4, [r7, #1]
 8013026:	4619      	mov	r1, r3
 8013028:	e7cb      	b.n	8012fc2 <_strtoul_l.isra.0+0x2e>
 801302a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801302e:	2f19      	cmp	r7, #25
 8013030:	d801      	bhi.n	8013036 <_strtoul_l.isra.0+0xa2>
 8013032:	3c37      	subs	r4, #55	; 0x37
 8013034:	e7e2      	b.n	8012ffc <_strtoul_l.isra.0+0x68>
 8013036:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801303a:	2f19      	cmp	r7, #25
 801303c:	d804      	bhi.n	8013048 <_strtoul_l.isra.0+0xb4>
 801303e:	3c57      	subs	r4, #87	; 0x57
 8013040:	e7dc      	b.n	8012ffc <_strtoul_l.isra.0+0x68>
 8013042:	f04f 33ff 	mov.w	r3, #4294967295
 8013046:	e7e5      	b.n	8013014 <_strtoul_l.isra.0+0x80>
 8013048:	2b00      	cmp	r3, #0
 801304a:	da09      	bge.n	8013060 <_strtoul_l.isra.0+0xcc>
 801304c:	2322      	movs	r3, #34	; 0x22
 801304e:	f04f 30ff 	mov.w	r0, #4294967295
 8013052:	f8c8 3000 	str.w	r3, [r8]
 8013056:	f1ba 0f00 	cmp.w	sl, #0
 801305a:	d107      	bne.n	801306c <_strtoul_l.isra.0+0xd8>
 801305c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013060:	b101      	cbz	r1, 8013064 <_strtoul_l.isra.0+0xd0>
 8013062:	4240      	negs	r0, r0
 8013064:	f1ba 0f00 	cmp.w	sl, #0
 8013068:	d0f8      	beq.n	801305c <_strtoul_l.isra.0+0xc8>
 801306a:	b10b      	cbz	r3, 8013070 <_strtoul_l.isra.0+0xdc>
 801306c:	f105 39ff 	add.w	r9, r5, #4294967295
 8013070:	f8ca 9000 	str.w	r9, [sl]
 8013074:	e7f2      	b.n	801305c <_strtoul_l.isra.0+0xc8>
 8013076:	2430      	movs	r4, #48	; 0x30
 8013078:	2e00      	cmp	r6, #0
 801307a:	d1b0      	bne.n	8012fde <_strtoul_l.isra.0+0x4a>
 801307c:	2608      	movs	r6, #8
 801307e:	e7ae      	b.n	8012fde <_strtoul_l.isra.0+0x4a>
 8013080:	2c30      	cmp	r4, #48	; 0x30
 8013082:	d0a4      	beq.n	8012fce <_strtoul_l.isra.0+0x3a>
 8013084:	260a      	movs	r6, #10
 8013086:	e7aa      	b.n	8012fde <_strtoul_l.isra.0+0x4a>

08013088 <strtoul>:
 8013088:	4b08      	ldr	r3, [pc, #32]	; (80130ac <strtoul+0x24>)
 801308a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801308c:	681c      	ldr	r4, [r3, #0]
 801308e:	4d08      	ldr	r5, [pc, #32]	; (80130b0 <strtoul+0x28>)
 8013090:	6a23      	ldr	r3, [r4, #32]
 8013092:	2b00      	cmp	r3, #0
 8013094:	bf08      	it	eq
 8013096:	462b      	moveq	r3, r5
 8013098:	9300      	str	r3, [sp, #0]
 801309a:	4613      	mov	r3, r2
 801309c:	460a      	mov	r2, r1
 801309e:	4601      	mov	r1, r0
 80130a0:	4620      	mov	r0, r4
 80130a2:	f7ff ff77 	bl	8012f94 <_strtoul_l.isra.0>
 80130a6:	b003      	add	sp, #12
 80130a8:	bd30      	pop	{r4, r5, pc}
 80130aa:	bf00      	nop
 80130ac:	200000a8 	.word	0x200000a8
 80130b0:	2000010c 	.word	0x2000010c

080130b4 <_vsniprintf_r>:
 80130b4:	b530      	push	{r4, r5, lr}
 80130b6:	1e14      	subs	r4, r2, #0
 80130b8:	4605      	mov	r5, r0
 80130ba:	b09b      	sub	sp, #108	; 0x6c
 80130bc:	4618      	mov	r0, r3
 80130be:	da05      	bge.n	80130cc <_vsniprintf_r+0x18>
 80130c0:	238b      	movs	r3, #139	; 0x8b
 80130c2:	f04f 30ff 	mov.w	r0, #4294967295
 80130c6:	602b      	str	r3, [r5, #0]
 80130c8:	b01b      	add	sp, #108	; 0x6c
 80130ca:	bd30      	pop	{r4, r5, pc}
 80130cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80130d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80130d4:	bf0c      	ite	eq
 80130d6:	4623      	moveq	r3, r4
 80130d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80130dc:	9302      	str	r3, [sp, #8]
 80130de:	9305      	str	r3, [sp, #20]
 80130e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130e4:	9100      	str	r1, [sp, #0]
 80130e6:	9104      	str	r1, [sp, #16]
 80130e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80130ec:	4602      	mov	r2, r0
 80130ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80130f0:	4669      	mov	r1, sp
 80130f2:	4628      	mov	r0, r5
 80130f4:	f001 fe0c 	bl	8014d10 <_svfiprintf_r>
 80130f8:	1c43      	adds	r3, r0, #1
 80130fa:	bfbc      	itt	lt
 80130fc:	238b      	movlt	r3, #139	; 0x8b
 80130fe:	602b      	strlt	r3, [r5, #0]
 8013100:	2c00      	cmp	r4, #0
 8013102:	d0e1      	beq.n	80130c8 <_vsniprintf_r+0x14>
 8013104:	2200      	movs	r2, #0
 8013106:	9b00      	ldr	r3, [sp, #0]
 8013108:	701a      	strb	r2, [r3, #0]
 801310a:	e7dd      	b.n	80130c8 <_vsniprintf_r+0x14>

0801310c <vsniprintf>:
 801310c:	b507      	push	{r0, r1, r2, lr}
 801310e:	9300      	str	r3, [sp, #0]
 8013110:	4613      	mov	r3, r2
 8013112:	460a      	mov	r2, r1
 8013114:	4601      	mov	r1, r0
 8013116:	4803      	ldr	r0, [pc, #12]	; (8013124 <vsniprintf+0x18>)
 8013118:	6800      	ldr	r0, [r0, #0]
 801311a:	f7ff ffcb 	bl	80130b4 <_vsniprintf_r>
 801311e:	b003      	add	sp, #12
 8013120:	f85d fb04 	ldr.w	pc, [sp], #4
 8013124:	200000a8 	.word	0x200000a8

08013128 <quorem>:
 8013128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801312c:	6903      	ldr	r3, [r0, #16]
 801312e:	690c      	ldr	r4, [r1, #16]
 8013130:	4680      	mov	r8, r0
 8013132:	42a3      	cmp	r3, r4
 8013134:	f2c0 8084 	blt.w	8013240 <quorem+0x118>
 8013138:	3c01      	subs	r4, #1
 801313a:	f101 0714 	add.w	r7, r1, #20
 801313e:	f100 0614 	add.w	r6, r0, #20
 8013142:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013146:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801314a:	3501      	adds	r5, #1
 801314c:	fbb0 f5f5 	udiv	r5, r0, r5
 8013150:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013154:	eb06 030c 	add.w	r3, r6, ip
 8013158:	eb07 090c 	add.w	r9, r7, ip
 801315c:	9301      	str	r3, [sp, #4]
 801315e:	b39d      	cbz	r5, 80131c8 <quorem+0xa0>
 8013160:	f04f 0a00 	mov.w	sl, #0
 8013164:	4638      	mov	r0, r7
 8013166:	46b6      	mov	lr, r6
 8013168:	46d3      	mov	fp, sl
 801316a:	f850 2b04 	ldr.w	r2, [r0], #4
 801316e:	b293      	uxth	r3, r2
 8013170:	fb05 a303 	mla	r3, r5, r3, sl
 8013174:	0c12      	lsrs	r2, r2, #16
 8013176:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801317a:	fb05 a202 	mla	r2, r5, r2, sl
 801317e:	b29b      	uxth	r3, r3
 8013180:	ebab 0303 	sub.w	r3, fp, r3
 8013184:	f8de b000 	ldr.w	fp, [lr]
 8013188:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801318c:	fa1f fb8b 	uxth.w	fp, fp
 8013190:	445b      	add	r3, fp
 8013192:	fa1f fb82 	uxth.w	fp, r2
 8013196:	f8de 2000 	ldr.w	r2, [lr]
 801319a:	4581      	cmp	r9, r0
 801319c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80131a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131aa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80131ae:	f84e 3b04 	str.w	r3, [lr], #4
 80131b2:	d2da      	bcs.n	801316a <quorem+0x42>
 80131b4:	f856 300c 	ldr.w	r3, [r6, ip]
 80131b8:	b933      	cbnz	r3, 80131c8 <quorem+0xa0>
 80131ba:	9b01      	ldr	r3, [sp, #4]
 80131bc:	3b04      	subs	r3, #4
 80131be:	429e      	cmp	r6, r3
 80131c0:	461a      	mov	r2, r3
 80131c2:	d331      	bcc.n	8013228 <quorem+0x100>
 80131c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80131c8:	4640      	mov	r0, r8
 80131ca:	f001 fb93 	bl	80148f4 <__mcmp>
 80131ce:	2800      	cmp	r0, #0
 80131d0:	db26      	blt.n	8013220 <quorem+0xf8>
 80131d2:	4630      	mov	r0, r6
 80131d4:	f04f 0c00 	mov.w	ip, #0
 80131d8:	3501      	adds	r5, #1
 80131da:	f857 1b04 	ldr.w	r1, [r7], #4
 80131de:	f8d0 e000 	ldr.w	lr, [r0]
 80131e2:	b28b      	uxth	r3, r1
 80131e4:	ebac 0303 	sub.w	r3, ip, r3
 80131e8:	fa1f f28e 	uxth.w	r2, lr
 80131ec:	4413      	add	r3, r2
 80131ee:	0c0a      	lsrs	r2, r1, #16
 80131f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80131f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131fe:	45b9      	cmp	r9, r7
 8013200:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013204:	f840 3b04 	str.w	r3, [r0], #4
 8013208:	d2e7      	bcs.n	80131da <quorem+0xb2>
 801320a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801320e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013212:	b92a      	cbnz	r2, 8013220 <quorem+0xf8>
 8013214:	3b04      	subs	r3, #4
 8013216:	429e      	cmp	r6, r3
 8013218:	461a      	mov	r2, r3
 801321a:	d30b      	bcc.n	8013234 <quorem+0x10c>
 801321c:	f8c8 4010 	str.w	r4, [r8, #16]
 8013220:	4628      	mov	r0, r5
 8013222:	b003      	add	sp, #12
 8013224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013228:	6812      	ldr	r2, [r2, #0]
 801322a:	3b04      	subs	r3, #4
 801322c:	2a00      	cmp	r2, #0
 801322e:	d1c9      	bne.n	80131c4 <quorem+0x9c>
 8013230:	3c01      	subs	r4, #1
 8013232:	e7c4      	b.n	80131be <quorem+0x96>
 8013234:	6812      	ldr	r2, [r2, #0]
 8013236:	3b04      	subs	r3, #4
 8013238:	2a00      	cmp	r2, #0
 801323a:	d1ef      	bne.n	801321c <quorem+0xf4>
 801323c:	3c01      	subs	r4, #1
 801323e:	e7ea      	b.n	8013216 <quorem+0xee>
 8013240:	2000      	movs	r0, #0
 8013242:	e7ee      	b.n	8013222 <quorem+0xfa>
 8013244:	0000      	movs	r0, r0
	...

08013248 <_dtoa_r>:
 8013248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801324c:	4616      	mov	r6, r2
 801324e:	461f      	mov	r7, r3
 8013250:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013252:	b095      	sub	sp, #84	; 0x54
 8013254:	4604      	mov	r4, r0
 8013256:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 801325a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801325e:	b93d      	cbnz	r5, 8013270 <_dtoa_r+0x28>
 8013260:	2010      	movs	r0, #16
 8013262:	f7fd fffb 	bl	801125c <malloc>
 8013266:	6260      	str	r0, [r4, #36]	; 0x24
 8013268:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801326c:	6005      	str	r5, [r0, #0]
 801326e:	60c5      	str	r5, [r0, #12]
 8013270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013272:	6819      	ldr	r1, [r3, #0]
 8013274:	b151      	cbz	r1, 801328c <_dtoa_r+0x44>
 8013276:	685a      	ldr	r2, [r3, #4]
 8013278:	2301      	movs	r3, #1
 801327a:	4093      	lsls	r3, r2
 801327c:	604a      	str	r2, [r1, #4]
 801327e:	608b      	str	r3, [r1, #8]
 8013280:	4620      	mov	r0, r4
 8013282:	f001 f919 	bl	80144b8 <_Bfree>
 8013286:	2200      	movs	r2, #0
 8013288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801328a:	601a      	str	r2, [r3, #0]
 801328c:	1e3b      	subs	r3, r7, #0
 801328e:	bfaf      	iteee	ge
 8013290:	2300      	movge	r3, #0
 8013292:	2201      	movlt	r2, #1
 8013294:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013298:	9303      	strlt	r3, [sp, #12]
 801329a:	bfac      	ite	ge
 801329c:	f8c8 3000 	strge.w	r3, [r8]
 80132a0:	f8c8 2000 	strlt.w	r2, [r8]
 80132a4:	4bae      	ldr	r3, [pc, #696]	; (8013560 <_dtoa_r+0x318>)
 80132a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80132aa:	ea33 0308 	bics.w	r3, r3, r8
 80132ae:	d11b      	bne.n	80132e8 <_dtoa_r+0xa0>
 80132b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80132b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80132b6:	6013      	str	r3, [r2, #0]
 80132b8:	9b02      	ldr	r3, [sp, #8]
 80132ba:	b923      	cbnz	r3, 80132c6 <_dtoa_r+0x7e>
 80132bc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80132c0:	2800      	cmp	r0, #0
 80132c2:	f000 8545 	beq.w	8013d50 <_dtoa_r+0xb08>
 80132c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80132c8:	b953      	cbnz	r3, 80132e0 <_dtoa_r+0x98>
 80132ca:	4ba6      	ldr	r3, [pc, #664]	; (8013564 <_dtoa_r+0x31c>)
 80132cc:	e021      	b.n	8013312 <_dtoa_r+0xca>
 80132ce:	4ba6      	ldr	r3, [pc, #664]	; (8013568 <_dtoa_r+0x320>)
 80132d0:	9306      	str	r3, [sp, #24]
 80132d2:	3308      	adds	r3, #8
 80132d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80132d6:	6013      	str	r3, [r2, #0]
 80132d8:	9806      	ldr	r0, [sp, #24]
 80132da:	b015      	add	sp, #84	; 0x54
 80132dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e0:	4ba0      	ldr	r3, [pc, #640]	; (8013564 <_dtoa_r+0x31c>)
 80132e2:	9306      	str	r3, [sp, #24]
 80132e4:	3303      	adds	r3, #3
 80132e6:	e7f5      	b.n	80132d4 <_dtoa_r+0x8c>
 80132e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80132ec:	2200      	movs	r2, #0
 80132ee:	2300      	movs	r3, #0
 80132f0:	4630      	mov	r0, r6
 80132f2:	4639      	mov	r1, r7
 80132f4:	f7ed fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80132f8:	4682      	mov	sl, r0
 80132fa:	b160      	cbz	r0, 8013316 <_dtoa_r+0xce>
 80132fc:	2301      	movs	r3, #1
 80132fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013300:	6013      	str	r3, [r2, #0]
 8013302:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013304:	2b00      	cmp	r3, #0
 8013306:	f000 8520 	beq.w	8013d4a <_dtoa_r+0xb02>
 801330a:	4b98      	ldr	r3, [pc, #608]	; (801356c <_dtoa_r+0x324>)
 801330c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801330e:	6013      	str	r3, [r2, #0]
 8013310:	3b01      	subs	r3, #1
 8013312:	9306      	str	r3, [sp, #24]
 8013314:	e7e0      	b.n	80132d8 <_dtoa_r+0x90>
 8013316:	ab12      	add	r3, sp, #72	; 0x48
 8013318:	9301      	str	r3, [sp, #4]
 801331a:	ab13      	add	r3, sp, #76	; 0x4c
 801331c:	9300      	str	r3, [sp, #0]
 801331e:	4632      	mov	r2, r6
 8013320:	463b      	mov	r3, r7
 8013322:	4620      	mov	r0, r4
 8013324:	f001 fbd4 	bl	8014ad0 <__d2b>
 8013328:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801332c:	4683      	mov	fp, r0
 801332e:	2d00      	cmp	r5, #0
 8013330:	d07d      	beq.n	801342e <_dtoa_r+0x1e6>
 8013332:	46b0      	mov	r8, r6
 8013334:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013338:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 801333c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8013340:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013344:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8013348:	2200      	movs	r2, #0
 801334a:	4b89      	ldr	r3, [pc, #548]	; (8013570 <_dtoa_r+0x328>)
 801334c:	4640      	mov	r0, r8
 801334e:	4649      	mov	r1, r9
 8013350:	f7ec ff0a 	bl	8000168 <__aeabi_dsub>
 8013354:	a37c      	add	r3, pc, #496	; (adr r3, 8013548 <_dtoa_r+0x300>)
 8013356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335a:	f7ed f8bd 	bl	80004d8 <__aeabi_dmul>
 801335e:	a37c      	add	r3, pc, #496	; (adr r3, 8013550 <_dtoa_r+0x308>)
 8013360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013364:	f7ec ff02 	bl	800016c <__adddf3>
 8013368:	4606      	mov	r6, r0
 801336a:	4628      	mov	r0, r5
 801336c:	460f      	mov	r7, r1
 801336e:	f7ed f849 	bl	8000404 <__aeabi_i2d>
 8013372:	a379      	add	r3, pc, #484	; (adr r3, 8013558 <_dtoa_r+0x310>)
 8013374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013378:	f7ed f8ae 	bl	80004d8 <__aeabi_dmul>
 801337c:	4602      	mov	r2, r0
 801337e:	460b      	mov	r3, r1
 8013380:	4630      	mov	r0, r6
 8013382:	4639      	mov	r1, r7
 8013384:	f7ec fef2 	bl	800016c <__adddf3>
 8013388:	4606      	mov	r6, r0
 801338a:	460f      	mov	r7, r1
 801338c:	f7ed fb54 	bl	8000a38 <__aeabi_d2iz>
 8013390:	2200      	movs	r2, #0
 8013392:	4682      	mov	sl, r0
 8013394:	2300      	movs	r3, #0
 8013396:	4630      	mov	r0, r6
 8013398:	4639      	mov	r1, r7
 801339a:	f7ed fb0f 	bl	80009bc <__aeabi_dcmplt>
 801339e:	b148      	cbz	r0, 80133b4 <_dtoa_r+0x16c>
 80133a0:	4650      	mov	r0, sl
 80133a2:	f7ed f82f 	bl	8000404 <__aeabi_i2d>
 80133a6:	4632      	mov	r2, r6
 80133a8:	463b      	mov	r3, r7
 80133aa:	f7ed fafd 	bl	80009a8 <__aeabi_dcmpeq>
 80133ae:	b908      	cbnz	r0, 80133b4 <_dtoa_r+0x16c>
 80133b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80133b4:	f1ba 0f16 	cmp.w	sl, #22
 80133b8:	d85a      	bhi.n	8013470 <_dtoa_r+0x228>
 80133ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80133be:	496d      	ldr	r1, [pc, #436]	; (8013574 <_dtoa_r+0x32c>)
 80133c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80133c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133c8:	f7ed fb16 	bl	80009f8 <__aeabi_dcmpgt>
 80133cc:	2800      	cmp	r0, #0
 80133ce:	d051      	beq.n	8013474 <_dtoa_r+0x22c>
 80133d0:	2300      	movs	r3, #0
 80133d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80133d6:	930d      	str	r3, [sp, #52]	; 0x34
 80133d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80133da:	1b5d      	subs	r5, r3, r5
 80133dc:	1e6b      	subs	r3, r5, #1
 80133de:	9307      	str	r3, [sp, #28]
 80133e0:	bf43      	ittte	mi
 80133e2:	2300      	movmi	r3, #0
 80133e4:	f1c5 0901 	rsbmi	r9, r5, #1
 80133e8:	9307      	strmi	r3, [sp, #28]
 80133ea:	f04f 0900 	movpl.w	r9, #0
 80133ee:	f1ba 0f00 	cmp.w	sl, #0
 80133f2:	db41      	blt.n	8013478 <_dtoa_r+0x230>
 80133f4:	9b07      	ldr	r3, [sp, #28]
 80133f6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80133fa:	4453      	add	r3, sl
 80133fc:	9307      	str	r3, [sp, #28]
 80133fe:	2300      	movs	r3, #0
 8013400:	9308      	str	r3, [sp, #32]
 8013402:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013404:	2b09      	cmp	r3, #9
 8013406:	f200 808f 	bhi.w	8013528 <_dtoa_r+0x2e0>
 801340a:	2b05      	cmp	r3, #5
 801340c:	bfc4      	itt	gt
 801340e:	3b04      	subgt	r3, #4
 8013410:	931e      	strgt	r3, [sp, #120]	; 0x78
 8013412:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013414:	bfc8      	it	gt
 8013416:	2500      	movgt	r5, #0
 8013418:	f1a3 0302 	sub.w	r3, r3, #2
 801341c:	bfd8      	it	le
 801341e:	2501      	movle	r5, #1
 8013420:	2b03      	cmp	r3, #3
 8013422:	f200 808d 	bhi.w	8013540 <_dtoa_r+0x2f8>
 8013426:	e8df f003 	tbb	[pc, r3]
 801342a:	7d7b      	.short	0x7d7b
 801342c:	6f2f      	.short	0x6f2f
 801342e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013432:	441d      	add	r5, r3
 8013434:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013438:	2820      	cmp	r0, #32
 801343a:	dd13      	ble.n	8013464 <_dtoa_r+0x21c>
 801343c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013440:	9b02      	ldr	r3, [sp, #8]
 8013442:	fa08 f800 	lsl.w	r8, r8, r0
 8013446:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801344a:	fa23 f000 	lsr.w	r0, r3, r0
 801344e:	ea48 0000 	orr.w	r0, r8, r0
 8013452:	f7ec ffc7 	bl	80003e4 <__aeabi_ui2d>
 8013456:	2301      	movs	r3, #1
 8013458:	4680      	mov	r8, r0
 801345a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 801345e:	3d01      	subs	r5, #1
 8013460:	9310      	str	r3, [sp, #64]	; 0x40
 8013462:	e771      	b.n	8013348 <_dtoa_r+0x100>
 8013464:	9b02      	ldr	r3, [sp, #8]
 8013466:	f1c0 0020 	rsb	r0, r0, #32
 801346a:	fa03 f000 	lsl.w	r0, r3, r0
 801346e:	e7f0      	b.n	8013452 <_dtoa_r+0x20a>
 8013470:	2301      	movs	r3, #1
 8013472:	e7b0      	b.n	80133d6 <_dtoa_r+0x18e>
 8013474:	900d      	str	r0, [sp, #52]	; 0x34
 8013476:	e7af      	b.n	80133d8 <_dtoa_r+0x190>
 8013478:	f1ca 0300 	rsb	r3, sl, #0
 801347c:	9308      	str	r3, [sp, #32]
 801347e:	2300      	movs	r3, #0
 8013480:	eba9 090a 	sub.w	r9, r9, sl
 8013484:	930c      	str	r3, [sp, #48]	; 0x30
 8013486:	e7bc      	b.n	8013402 <_dtoa_r+0x1ba>
 8013488:	2301      	movs	r3, #1
 801348a:	9309      	str	r3, [sp, #36]	; 0x24
 801348c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801348e:	2b00      	cmp	r3, #0
 8013490:	dd74      	ble.n	801357c <_dtoa_r+0x334>
 8013492:	4698      	mov	r8, r3
 8013494:	9304      	str	r3, [sp, #16]
 8013496:	2200      	movs	r2, #0
 8013498:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801349a:	6072      	str	r2, [r6, #4]
 801349c:	2204      	movs	r2, #4
 801349e:	f102 0014 	add.w	r0, r2, #20
 80134a2:	4298      	cmp	r0, r3
 80134a4:	6871      	ldr	r1, [r6, #4]
 80134a6:	d96e      	bls.n	8013586 <_dtoa_r+0x33e>
 80134a8:	4620      	mov	r0, r4
 80134aa:	f000 ffd1 	bl	8014450 <_Balloc>
 80134ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134b0:	6030      	str	r0, [r6, #0]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	f1b8 0f0e 	cmp.w	r8, #14
 80134b8:	9306      	str	r3, [sp, #24]
 80134ba:	f200 80ed 	bhi.w	8013698 <_dtoa_r+0x450>
 80134be:	2d00      	cmp	r5, #0
 80134c0:	f000 80ea 	beq.w	8013698 <_dtoa_r+0x450>
 80134c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80134c8:	f1ba 0f00 	cmp.w	sl, #0
 80134cc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80134d0:	dd77      	ble.n	80135c2 <_dtoa_r+0x37a>
 80134d2:	4a28      	ldr	r2, [pc, #160]	; (8013574 <_dtoa_r+0x32c>)
 80134d4:	f00a 030f 	and.w	r3, sl, #15
 80134d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80134dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80134e0:	06f0      	lsls	r0, r6, #27
 80134e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80134ea:	d568      	bpl.n	80135be <_dtoa_r+0x376>
 80134ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80134f0:	4b21      	ldr	r3, [pc, #132]	; (8013578 <_dtoa_r+0x330>)
 80134f2:	2503      	movs	r5, #3
 80134f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80134f8:	f7ed f918 	bl	800072c <__aeabi_ddiv>
 80134fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013500:	f006 060f 	and.w	r6, r6, #15
 8013504:	4f1c      	ldr	r7, [pc, #112]	; (8013578 <_dtoa_r+0x330>)
 8013506:	e04f      	b.n	80135a8 <_dtoa_r+0x360>
 8013508:	2301      	movs	r3, #1
 801350a:	9309      	str	r3, [sp, #36]	; 0x24
 801350c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801350e:	4453      	add	r3, sl
 8013510:	f103 0801 	add.w	r8, r3, #1
 8013514:	9304      	str	r3, [sp, #16]
 8013516:	4643      	mov	r3, r8
 8013518:	2b01      	cmp	r3, #1
 801351a:	bfb8      	it	lt
 801351c:	2301      	movlt	r3, #1
 801351e:	e7ba      	b.n	8013496 <_dtoa_r+0x24e>
 8013520:	2300      	movs	r3, #0
 8013522:	e7b2      	b.n	801348a <_dtoa_r+0x242>
 8013524:	2300      	movs	r3, #0
 8013526:	e7f0      	b.n	801350a <_dtoa_r+0x2c2>
 8013528:	2501      	movs	r5, #1
 801352a:	2300      	movs	r3, #0
 801352c:	9509      	str	r5, [sp, #36]	; 0x24
 801352e:	931e      	str	r3, [sp, #120]	; 0x78
 8013530:	f04f 33ff 	mov.w	r3, #4294967295
 8013534:	2200      	movs	r2, #0
 8013536:	9304      	str	r3, [sp, #16]
 8013538:	4698      	mov	r8, r3
 801353a:	2312      	movs	r3, #18
 801353c:	921f      	str	r2, [sp, #124]	; 0x7c
 801353e:	e7aa      	b.n	8013496 <_dtoa_r+0x24e>
 8013540:	2301      	movs	r3, #1
 8013542:	9309      	str	r3, [sp, #36]	; 0x24
 8013544:	e7f4      	b.n	8013530 <_dtoa_r+0x2e8>
 8013546:	bf00      	nop
 8013548:	636f4361 	.word	0x636f4361
 801354c:	3fd287a7 	.word	0x3fd287a7
 8013550:	8b60c8b3 	.word	0x8b60c8b3
 8013554:	3fc68a28 	.word	0x3fc68a28
 8013558:	509f79fb 	.word	0x509f79fb
 801355c:	3fd34413 	.word	0x3fd34413
 8013560:	7ff00000 	.word	0x7ff00000
 8013564:	08018441 	.word	0x08018441
 8013568:	08018438 	.word	0x08018438
 801356c:	080183be 	.word	0x080183be
 8013570:	3ff80000 	.word	0x3ff80000
 8013574:	080184e0 	.word	0x080184e0
 8013578:	080184b8 	.word	0x080184b8
 801357c:	2301      	movs	r3, #1
 801357e:	9304      	str	r3, [sp, #16]
 8013580:	4698      	mov	r8, r3
 8013582:	461a      	mov	r2, r3
 8013584:	e7da      	b.n	801353c <_dtoa_r+0x2f4>
 8013586:	3101      	adds	r1, #1
 8013588:	6071      	str	r1, [r6, #4]
 801358a:	0052      	lsls	r2, r2, #1
 801358c:	e787      	b.n	801349e <_dtoa_r+0x256>
 801358e:	07f1      	lsls	r1, r6, #31
 8013590:	d508      	bpl.n	80135a4 <_dtoa_r+0x35c>
 8013592:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013596:	e9d7 2300 	ldrd	r2, r3, [r7]
 801359a:	f7ec ff9d 	bl	80004d8 <__aeabi_dmul>
 801359e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80135a2:	3501      	adds	r5, #1
 80135a4:	1076      	asrs	r6, r6, #1
 80135a6:	3708      	adds	r7, #8
 80135a8:	2e00      	cmp	r6, #0
 80135aa:	d1f0      	bne.n	801358e <_dtoa_r+0x346>
 80135ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80135b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135b4:	f7ed f8ba 	bl	800072c <__aeabi_ddiv>
 80135b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135bc:	e01b      	b.n	80135f6 <_dtoa_r+0x3ae>
 80135be:	2502      	movs	r5, #2
 80135c0:	e7a0      	b.n	8013504 <_dtoa_r+0x2bc>
 80135c2:	f000 80a4 	beq.w	801370e <_dtoa_r+0x4c6>
 80135c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80135ca:	f1ca 0600 	rsb	r6, sl, #0
 80135ce:	4ba0      	ldr	r3, [pc, #640]	; (8013850 <_dtoa_r+0x608>)
 80135d0:	f006 020f 	and.w	r2, r6, #15
 80135d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135dc:	f7ec ff7c 	bl	80004d8 <__aeabi_dmul>
 80135e0:	2502      	movs	r5, #2
 80135e2:	2300      	movs	r3, #0
 80135e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135e8:	4f9a      	ldr	r7, [pc, #616]	; (8013854 <_dtoa_r+0x60c>)
 80135ea:	1136      	asrs	r6, r6, #4
 80135ec:	2e00      	cmp	r6, #0
 80135ee:	f040 8083 	bne.w	80136f8 <_dtoa_r+0x4b0>
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d1e0      	bne.n	80135b8 <_dtoa_r+0x370>
 80135f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	f000 808a 	beq.w	8013712 <_dtoa_r+0x4ca>
 80135fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013602:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013606:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801360a:	2200      	movs	r2, #0
 801360c:	4b92      	ldr	r3, [pc, #584]	; (8013858 <_dtoa_r+0x610>)
 801360e:	f7ed f9d5 	bl	80009bc <__aeabi_dcmplt>
 8013612:	2800      	cmp	r0, #0
 8013614:	d07d      	beq.n	8013712 <_dtoa_r+0x4ca>
 8013616:	f1b8 0f00 	cmp.w	r8, #0
 801361a:	d07a      	beq.n	8013712 <_dtoa_r+0x4ca>
 801361c:	9b04      	ldr	r3, [sp, #16]
 801361e:	2b00      	cmp	r3, #0
 8013620:	dd36      	ble.n	8013690 <_dtoa_r+0x448>
 8013622:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013626:	2200      	movs	r2, #0
 8013628:	4b8c      	ldr	r3, [pc, #560]	; (801385c <_dtoa_r+0x614>)
 801362a:	f7ec ff55 	bl	80004d8 <__aeabi_dmul>
 801362e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013632:	9e04      	ldr	r6, [sp, #16]
 8013634:	f10a 37ff 	add.w	r7, sl, #4294967295
 8013638:	3501      	adds	r5, #1
 801363a:	4628      	mov	r0, r5
 801363c:	f7ec fee2 	bl	8000404 <__aeabi_i2d>
 8013640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013644:	f7ec ff48 	bl	80004d8 <__aeabi_dmul>
 8013648:	2200      	movs	r2, #0
 801364a:	4b85      	ldr	r3, [pc, #532]	; (8013860 <_dtoa_r+0x618>)
 801364c:	f7ec fd8e 	bl	800016c <__adddf3>
 8013650:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8013654:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013658:	950b      	str	r5, [sp, #44]	; 0x2c
 801365a:	2e00      	cmp	r6, #0
 801365c:	d15c      	bne.n	8013718 <_dtoa_r+0x4d0>
 801365e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013662:	2200      	movs	r2, #0
 8013664:	4b7f      	ldr	r3, [pc, #508]	; (8013864 <_dtoa_r+0x61c>)
 8013666:	f7ec fd7f 	bl	8000168 <__aeabi_dsub>
 801366a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801366c:	462b      	mov	r3, r5
 801366e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013672:	f7ed f9c1 	bl	80009f8 <__aeabi_dcmpgt>
 8013676:	2800      	cmp	r0, #0
 8013678:	f040 8281 	bne.w	8013b7e <_dtoa_r+0x936>
 801367c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013682:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8013686:	f7ed f999 	bl	80009bc <__aeabi_dcmplt>
 801368a:	2800      	cmp	r0, #0
 801368c:	f040 8275 	bne.w	8013b7a <_dtoa_r+0x932>
 8013690:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013694:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801369a:	2b00      	cmp	r3, #0
 801369c:	f2c0 814b 	blt.w	8013936 <_dtoa_r+0x6ee>
 80136a0:	f1ba 0f0e 	cmp.w	sl, #14
 80136a4:	f300 8147 	bgt.w	8013936 <_dtoa_r+0x6ee>
 80136a8:	4b69      	ldr	r3, [pc, #420]	; (8013850 <_dtoa_r+0x608>)
 80136aa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80136ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80136b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	f280 80d7 	bge.w	801386c <_dtoa_r+0x624>
 80136be:	f1b8 0f00 	cmp.w	r8, #0
 80136c2:	f300 80d3 	bgt.w	801386c <_dtoa_r+0x624>
 80136c6:	f040 8257 	bne.w	8013b78 <_dtoa_r+0x930>
 80136ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80136ce:	2200      	movs	r2, #0
 80136d0:	4b64      	ldr	r3, [pc, #400]	; (8013864 <_dtoa_r+0x61c>)
 80136d2:	f7ec ff01 	bl	80004d8 <__aeabi_dmul>
 80136d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80136da:	f7ed f983 	bl	80009e4 <__aeabi_dcmpge>
 80136de:	4646      	mov	r6, r8
 80136e0:	4647      	mov	r7, r8
 80136e2:	2800      	cmp	r0, #0
 80136e4:	f040 822d 	bne.w	8013b42 <_dtoa_r+0x8fa>
 80136e8:	9b06      	ldr	r3, [sp, #24]
 80136ea:	9a06      	ldr	r2, [sp, #24]
 80136ec:	1c5d      	adds	r5, r3, #1
 80136ee:	2331      	movs	r3, #49	; 0x31
 80136f0:	f10a 0a01 	add.w	sl, sl, #1
 80136f4:	7013      	strb	r3, [r2, #0]
 80136f6:	e228      	b.n	8013b4a <_dtoa_r+0x902>
 80136f8:	07f2      	lsls	r2, r6, #31
 80136fa:	d505      	bpl.n	8013708 <_dtoa_r+0x4c0>
 80136fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013700:	f7ec feea 	bl	80004d8 <__aeabi_dmul>
 8013704:	2301      	movs	r3, #1
 8013706:	3501      	adds	r5, #1
 8013708:	1076      	asrs	r6, r6, #1
 801370a:	3708      	adds	r7, #8
 801370c:	e76e      	b.n	80135ec <_dtoa_r+0x3a4>
 801370e:	2502      	movs	r5, #2
 8013710:	e771      	b.n	80135f6 <_dtoa_r+0x3ae>
 8013712:	4657      	mov	r7, sl
 8013714:	4646      	mov	r6, r8
 8013716:	e790      	b.n	801363a <_dtoa_r+0x3f2>
 8013718:	4b4d      	ldr	r3, [pc, #308]	; (8013850 <_dtoa_r+0x608>)
 801371a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801371e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013724:	2b00      	cmp	r3, #0
 8013726:	d048      	beq.n	80137ba <_dtoa_r+0x572>
 8013728:	4602      	mov	r2, r0
 801372a:	460b      	mov	r3, r1
 801372c:	2000      	movs	r0, #0
 801372e:	494e      	ldr	r1, [pc, #312]	; (8013868 <_dtoa_r+0x620>)
 8013730:	f7ec fffc 	bl	800072c <__aeabi_ddiv>
 8013734:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013738:	f7ec fd16 	bl	8000168 <__aeabi_dsub>
 801373c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013740:	9d06      	ldr	r5, [sp, #24]
 8013742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013746:	f7ed f977 	bl	8000a38 <__aeabi_d2iz>
 801374a:	9011      	str	r0, [sp, #68]	; 0x44
 801374c:	f7ec fe5a 	bl	8000404 <__aeabi_i2d>
 8013750:	4602      	mov	r2, r0
 8013752:	460b      	mov	r3, r1
 8013754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013758:	f7ec fd06 	bl	8000168 <__aeabi_dsub>
 801375c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801375e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013762:	3330      	adds	r3, #48	; 0x30
 8013764:	f805 3b01 	strb.w	r3, [r5], #1
 8013768:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801376c:	f7ed f926 	bl	80009bc <__aeabi_dcmplt>
 8013770:	2800      	cmp	r0, #0
 8013772:	d163      	bne.n	801383c <_dtoa_r+0x5f4>
 8013774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013778:	2000      	movs	r0, #0
 801377a:	4937      	ldr	r1, [pc, #220]	; (8013858 <_dtoa_r+0x610>)
 801377c:	f7ec fcf4 	bl	8000168 <__aeabi_dsub>
 8013780:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013784:	f7ed f91a 	bl	80009bc <__aeabi_dcmplt>
 8013788:	2800      	cmp	r0, #0
 801378a:	f040 80b5 	bne.w	80138f8 <_dtoa_r+0x6b0>
 801378e:	9b06      	ldr	r3, [sp, #24]
 8013790:	1aeb      	subs	r3, r5, r3
 8013792:	429e      	cmp	r6, r3
 8013794:	f77f af7c 	ble.w	8013690 <_dtoa_r+0x448>
 8013798:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801379c:	2200      	movs	r2, #0
 801379e:	4b2f      	ldr	r3, [pc, #188]	; (801385c <_dtoa_r+0x614>)
 80137a0:	f7ec fe9a 	bl	80004d8 <__aeabi_dmul>
 80137a4:	2200      	movs	r2, #0
 80137a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80137aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80137ae:	4b2b      	ldr	r3, [pc, #172]	; (801385c <_dtoa_r+0x614>)
 80137b0:	f7ec fe92 	bl	80004d8 <__aeabi_dmul>
 80137b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80137b8:	e7c3      	b.n	8013742 <_dtoa_r+0x4fa>
 80137ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80137be:	f7ec fe8b 	bl	80004d8 <__aeabi_dmul>
 80137c2:	9b06      	ldr	r3, [sp, #24]
 80137c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80137c8:	199d      	adds	r5, r3, r6
 80137ca:	461e      	mov	r6, r3
 80137cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80137d0:	f7ed f932 	bl	8000a38 <__aeabi_d2iz>
 80137d4:	9011      	str	r0, [sp, #68]	; 0x44
 80137d6:	f7ec fe15 	bl	8000404 <__aeabi_i2d>
 80137da:	4602      	mov	r2, r0
 80137dc:	460b      	mov	r3, r1
 80137de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80137e2:	f7ec fcc1 	bl	8000168 <__aeabi_dsub>
 80137e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80137e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80137ec:	3330      	adds	r3, #48	; 0x30
 80137ee:	f806 3b01 	strb.w	r3, [r6], #1
 80137f2:	42ae      	cmp	r6, r5
 80137f4:	f04f 0200 	mov.w	r2, #0
 80137f8:	d124      	bne.n	8013844 <_dtoa_r+0x5fc>
 80137fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80137fe:	4b1a      	ldr	r3, [pc, #104]	; (8013868 <_dtoa_r+0x620>)
 8013800:	f7ec fcb4 	bl	800016c <__adddf3>
 8013804:	4602      	mov	r2, r0
 8013806:	460b      	mov	r3, r1
 8013808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801380c:	f7ed f8f4 	bl	80009f8 <__aeabi_dcmpgt>
 8013810:	2800      	cmp	r0, #0
 8013812:	d171      	bne.n	80138f8 <_dtoa_r+0x6b0>
 8013814:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013818:	2000      	movs	r0, #0
 801381a:	4913      	ldr	r1, [pc, #76]	; (8013868 <_dtoa_r+0x620>)
 801381c:	f7ec fca4 	bl	8000168 <__aeabi_dsub>
 8013820:	4602      	mov	r2, r0
 8013822:	460b      	mov	r3, r1
 8013824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013828:	f7ed f8c8 	bl	80009bc <__aeabi_dcmplt>
 801382c:	2800      	cmp	r0, #0
 801382e:	f43f af2f 	beq.w	8013690 <_dtoa_r+0x448>
 8013832:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013836:	1e6a      	subs	r2, r5, #1
 8013838:	2b30      	cmp	r3, #48	; 0x30
 801383a:	d001      	beq.n	8013840 <_dtoa_r+0x5f8>
 801383c:	46ba      	mov	sl, r7
 801383e:	e04a      	b.n	80138d6 <_dtoa_r+0x68e>
 8013840:	4615      	mov	r5, r2
 8013842:	e7f6      	b.n	8013832 <_dtoa_r+0x5ea>
 8013844:	4b05      	ldr	r3, [pc, #20]	; (801385c <_dtoa_r+0x614>)
 8013846:	f7ec fe47 	bl	80004d8 <__aeabi_dmul>
 801384a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801384e:	e7bd      	b.n	80137cc <_dtoa_r+0x584>
 8013850:	080184e0 	.word	0x080184e0
 8013854:	080184b8 	.word	0x080184b8
 8013858:	3ff00000 	.word	0x3ff00000
 801385c:	40240000 	.word	0x40240000
 8013860:	401c0000 	.word	0x401c0000
 8013864:	40140000 	.word	0x40140000
 8013868:	3fe00000 	.word	0x3fe00000
 801386c:	9d06      	ldr	r5, [sp, #24]
 801386e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013876:	4630      	mov	r0, r6
 8013878:	4639      	mov	r1, r7
 801387a:	f7ec ff57 	bl	800072c <__aeabi_ddiv>
 801387e:	f7ed f8db 	bl	8000a38 <__aeabi_d2iz>
 8013882:	4681      	mov	r9, r0
 8013884:	f7ec fdbe 	bl	8000404 <__aeabi_i2d>
 8013888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801388c:	f7ec fe24 	bl	80004d8 <__aeabi_dmul>
 8013890:	4602      	mov	r2, r0
 8013892:	460b      	mov	r3, r1
 8013894:	4630      	mov	r0, r6
 8013896:	4639      	mov	r1, r7
 8013898:	f7ec fc66 	bl	8000168 <__aeabi_dsub>
 801389c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80138a0:	f805 6b01 	strb.w	r6, [r5], #1
 80138a4:	9e06      	ldr	r6, [sp, #24]
 80138a6:	4602      	mov	r2, r0
 80138a8:	1bae      	subs	r6, r5, r6
 80138aa:	45b0      	cmp	r8, r6
 80138ac:	460b      	mov	r3, r1
 80138ae:	d135      	bne.n	801391c <_dtoa_r+0x6d4>
 80138b0:	f7ec fc5c 	bl	800016c <__adddf3>
 80138b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138b8:	4606      	mov	r6, r0
 80138ba:	460f      	mov	r7, r1
 80138bc:	f7ed f89c 	bl	80009f8 <__aeabi_dcmpgt>
 80138c0:	b9c8      	cbnz	r0, 80138f6 <_dtoa_r+0x6ae>
 80138c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138c6:	4630      	mov	r0, r6
 80138c8:	4639      	mov	r1, r7
 80138ca:	f7ed f86d 	bl	80009a8 <__aeabi_dcmpeq>
 80138ce:	b110      	cbz	r0, 80138d6 <_dtoa_r+0x68e>
 80138d0:	f019 0f01 	tst.w	r9, #1
 80138d4:	d10f      	bne.n	80138f6 <_dtoa_r+0x6ae>
 80138d6:	4659      	mov	r1, fp
 80138d8:	4620      	mov	r0, r4
 80138da:	f000 fded 	bl	80144b8 <_Bfree>
 80138de:	2300      	movs	r3, #0
 80138e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80138e2:	702b      	strb	r3, [r5, #0]
 80138e4:	f10a 0301 	add.w	r3, sl, #1
 80138e8:	6013      	str	r3, [r2, #0]
 80138ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	f43f acf3 	beq.w	80132d8 <_dtoa_r+0x90>
 80138f2:	601d      	str	r5, [r3, #0]
 80138f4:	e4f0      	b.n	80132d8 <_dtoa_r+0x90>
 80138f6:	4657      	mov	r7, sl
 80138f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80138fc:	1e6b      	subs	r3, r5, #1
 80138fe:	2a39      	cmp	r2, #57	; 0x39
 8013900:	d106      	bne.n	8013910 <_dtoa_r+0x6c8>
 8013902:	9a06      	ldr	r2, [sp, #24]
 8013904:	429a      	cmp	r2, r3
 8013906:	d107      	bne.n	8013918 <_dtoa_r+0x6d0>
 8013908:	2330      	movs	r3, #48	; 0x30
 801390a:	7013      	strb	r3, [r2, #0]
 801390c:	4613      	mov	r3, r2
 801390e:	3701      	adds	r7, #1
 8013910:	781a      	ldrb	r2, [r3, #0]
 8013912:	3201      	adds	r2, #1
 8013914:	701a      	strb	r2, [r3, #0]
 8013916:	e791      	b.n	801383c <_dtoa_r+0x5f4>
 8013918:	461d      	mov	r5, r3
 801391a:	e7ed      	b.n	80138f8 <_dtoa_r+0x6b0>
 801391c:	2200      	movs	r2, #0
 801391e:	4b99      	ldr	r3, [pc, #612]	; (8013b84 <_dtoa_r+0x93c>)
 8013920:	f7ec fdda 	bl	80004d8 <__aeabi_dmul>
 8013924:	2200      	movs	r2, #0
 8013926:	2300      	movs	r3, #0
 8013928:	4606      	mov	r6, r0
 801392a:	460f      	mov	r7, r1
 801392c:	f7ed f83c 	bl	80009a8 <__aeabi_dcmpeq>
 8013930:	2800      	cmp	r0, #0
 8013932:	d09e      	beq.n	8013872 <_dtoa_r+0x62a>
 8013934:	e7cf      	b.n	80138d6 <_dtoa_r+0x68e>
 8013936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013938:	2a00      	cmp	r2, #0
 801393a:	f000 8088 	beq.w	8013a4e <_dtoa_r+0x806>
 801393e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013940:	2a01      	cmp	r2, #1
 8013942:	dc6d      	bgt.n	8013a20 <_dtoa_r+0x7d8>
 8013944:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013946:	2a00      	cmp	r2, #0
 8013948:	d066      	beq.n	8013a18 <_dtoa_r+0x7d0>
 801394a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801394e:	464d      	mov	r5, r9
 8013950:	9e08      	ldr	r6, [sp, #32]
 8013952:	9a07      	ldr	r2, [sp, #28]
 8013954:	2101      	movs	r1, #1
 8013956:	441a      	add	r2, r3
 8013958:	4620      	mov	r0, r4
 801395a:	4499      	add	r9, r3
 801395c:	9207      	str	r2, [sp, #28]
 801395e:	f000 fe89 	bl	8014674 <__i2b>
 8013962:	4607      	mov	r7, r0
 8013964:	2d00      	cmp	r5, #0
 8013966:	dd0b      	ble.n	8013980 <_dtoa_r+0x738>
 8013968:	9b07      	ldr	r3, [sp, #28]
 801396a:	2b00      	cmp	r3, #0
 801396c:	dd08      	ble.n	8013980 <_dtoa_r+0x738>
 801396e:	42ab      	cmp	r3, r5
 8013970:	bfa8      	it	ge
 8013972:	462b      	movge	r3, r5
 8013974:	9a07      	ldr	r2, [sp, #28]
 8013976:	eba9 0903 	sub.w	r9, r9, r3
 801397a:	1aed      	subs	r5, r5, r3
 801397c:	1ad3      	subs	r3, r2, r3
 801397e:	9307      	str	r3, [sp, #28]
 8013980:	9b08      	ldr	r3, [sp, #32]
 8013982:	b1eb      	cbz	r3, 80139c0 <_dtoa_r+0x778>
 8013984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013986:	2b00      	cmp	r3, #0
 8013988:	d065      	beq.n	8013a56 <_dtoa_r+0x80e>
 801398a:	b18e      	cbz	r6, 80139b0 <_dtoa_r+0x768>
 801398c:	4639      	mov	r1, r7
 801398e:	4632      	mov	r2, r6
 8013990:	4620      	mov	r0, r4
 8013992:	f000 ff0d 	bl	80147b0 <__pow5mult>
 8013996:	465a      	mov	r2, fp
 8013998:	4601      	mov	r1, r0
 801399a:	4607      	mov	r7, r0
 801399c:	4620      	mov	r0, r4
 801399e:	f000 fe72 	bl	8014686 <__multiply>
 80139a2:	4659      	mov	r1, fp
 80139a4:	900a      	str	r0, [sp, #40]	; 0x28
 80139a6:	4620      	mov	r0, r4
 80139a8:	f000 fd86 	bl	80144b8 <_Bfree>
 80139ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ae:	469b      	mov	fp, r3
 80139b0:	9b08      	ldr	r3, [sp, #32]
 80139b2:	1b9a      	subs	r2, r3, r6
 80139b4:	d004      	beq.n	80139c0 <_dtoa_r+0x778>
 80139b6:	4659      	mov	r1, fp
 80139b8:	4620      	mov	r0, r4
 80139ba:	f000 fef9 	bl	80147b0 <__pow5mult>
 80139be:	4683      	mov	fp, r0
 80139c0:	2101      	movs	r1, #1
 80139c2:	4620      	mov	r0, r4
 80139c4:	f000 fe56 	bl	8014674 <__i2b>
 80139c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139ca:	4606      	mov	r6, r0
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	f000 81c6 	beq.w	8013d5e <_dtoa_r+0xb16>
 80139d2:	461a      	mov	r2, r3
 80139d4:	4601      	mov	r1, r0
 80139d6:	4620      	mov	r0, r4
 80139d8:	f000 feea 	bl	80147b0 <__pow5mult>
 80139dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80139de:	4606      	mov	r6, r0
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	dc3e      	bgt.n	8013a62 <_dtoa_r+0x81a>
 80139e4:	9b02      	ldr	r3, [sp, #8]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d137      	bne.n	8013a5a <_dtoa_r+0x812>
 80139ea:	9b03      	ldr	r3, [sp, #12]
 80139ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d134      	bne.n	8013a5e <_dtoa_r+0x816>
 80139f4:	9b03      	ldr	r3, [sp, #12]
 80139f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80139fa:	0d1b      	lsrs	r3, r3, #20
 80139fc:	051b      	lsls	r3, r3, #20
 80139fe:	b12b      	cbz	r3, 8013a0c <_dtoa_r+0x7c4>
 8013a00:	9b07      	ldr	r3, [sp, #28]
 8013a02:	f109 0901 	add.w	r9, r9, #1
 8013a06:	3301      	adds	r3, #1
 8013a08:	9307      	str	r3, [sp, #28]
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	9308      	str	r3, [sp, #32]
 8013a0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d128      	bne.n	8013a66 <_dtoa_r+0x81e>
 8013a14:	2001      	movs	r0, #1
 8013a16:	e02e      	b.n	8013a76 <_dtoa_r+0x82e>
 8013a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013a1e:	e796      	b.n	801394e <_dtoa_r+0x706>
 8013a20:	9b08      	ldr	r3, [sp, #32]
 8013a22:	f108 36ff 	add.w	r6, r8, #4294967295
 8013a26:	42b3      	cmp	r3, r6
 8013a28:	bfb7      	itett	lt
 8013a2a:	9b08      	ldrlt	r3, [sp, #32]
 8013a2c:	1b9e      	subge	r6, r3, r6
 8013a2e:	1af2      	sublt	r2, r6, r3
 8013a30:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8013a32:	bfbf      	itttt	lt
 8013a34:	9608      	strlt	r6, [sp, #32]
 8013a36:	189b      	addlt	r3, r3, r2
 8013a38:	930c      	strlt	r3, [sp, #48]	; 0x30
 8013a3a:	2600      	movlt	r6, #0
 8013a3c:	f1b8 0f00 	cmp.w	r8, #0
 8013a40:	bfb9      	ittee	lt
 8013a42:	eba9 0508 	sublt.w	r5, r9, r8
 8013a46:	2300      	movlt	r3, #0
 8013a48:	464d      	movge	r5, r9
 8013a4a:	4643      	movge	r3, r8
 8013a4c:	e781      	b.n	8013952 <_dtoa_r+0x70a>
 8013a4e:	9e08      	ldr	r6, [sp, #32]
 8013a50:	464d      	mov	r5, r9
 8013a52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013a54:	e786      	b.n	8013964 <_dtoa_r+0x71c>
 8013a56:	9a08      	ldr	r2, [sp, #32]
 8013a58:	e7ad      	b.n	80139b6 <_dtoa_r+0x76e>
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	e7d6      	b.n	8013a0c <_dtoa_r+0x7c4>
 8013a5e:	9b02      	ldr	r3, [sp, #8]
 8013a60:	e7d4      	b.n	8013a0c <_dtoa_r+0x7c4>
 8013a62:	2300      	movs	r3, #0
 8013a64:	9308      	str	r3, [sp, #32]
 8013a66:	6933      	ldr	r3, [r6, #16]
 8013a68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013a6c:	6918      	ldr	r0, [r3, #16]
 8013a6e:	f000 fdb3 	bl	80145d8 <__hi0bits>
 8013a72:	f1c0 0020 	rsb	r0, r0, #32
 8013a76:	9b07      	ldr	r3, [sp, #28]
 8013a78:	4418      	add	r0, r3
 8013a7a:	f010 001f 	ands.w	r0, r0, #31
 8013a7e:	d047      	beq.n	8013b10 <_dtoa_r+0x8c8>
 8013a80:	f1c0 0320 	rsb	r3, r0, #32
 8013a84:	2b04      	cmp	r3, #4
 8013a86:	dd3b      	ble.n	8013b00 <_dtoa_r+0x8b8>
 8013a88:	9b07      	ldr	r3, [sp, #28]
 8013a8a:	f1c0 001c 	rsb	r0, r0, #28
 8013a8e:	4481      	add	r9, r0
 8013a90:	4405      	add	r5, r0
 8013a92:	4403      	add	r3, r0
 8013a94:	9307      	str	r3, [sp, #28]
 8013a96:	f1b9 0f00 	cmp.w	r9, #0
 8013a9a:	dd05      	ble.n	8013aa8 <_dtoa_r+0x860>
 8013a9c:	4659      	mov	r1, fp
 8013a9e:	464a      	mov	r2, r9
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	f000 fed3 	bl	801484c <__lshift>
 8013aa6:	4683      	mov	fp, r0
 8013aa8:	9b07      	ldr	r3, [sp, #28]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	dd05      	ble.n	8013aba <_dtoa_r+0x872>
 8013aae:	4631      	mov	r1, r6
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	f000 feca 	bl	801484c <__lshift>
 8013ab8:	4606      	mov	r6, r0
 8013aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013abc:	b353      	cbz	r3, 8013b14 <_dtoa_r+0x8cc>
 8013abe:	4631      	mov	r1, r6
 8013ac0:	4658      	mov	r0, fp
 8013ac2:	f000 ff17 	bl	80148f4 <__mcmp>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	da24      	bge.n	8013b14 <_dtoa_r+0x8cc>
 8013aca:	2300      	movs	r3, #0
 8013acc:	4659      	mov	r1, fp
 8013ace:	220a      	movs	r2, #10
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	f000 fd08 	bl	80144e6 <__multadd>
 8013ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ad8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013adc:	4683      	mov	fp, r0
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	f000 8144 	beq.w	8013d6c <_dtoa_r+0xb24>
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	4639      	mov	r1, r7
 8013ae8:	220a      	movs	r2, #10
 8013aea:	4620      	mov	r0, r4
 8013aec:	f000 fcfb 	bl	80144e6 <__multadd>
 8013af0:	9b04      	ldr	r3, [sp, #16]
 8013af2:	4607      	mov	r7, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	dc4d      	bgt.n	8013b94 <_dtoa_r+0x94c>
 8013af8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013afa:	2b02      	cmp	r3, #2
 8013afc:	dd4a      	ble.n	8013b94 <_dtoa_r+0x94c>
 8013afe:	e011      	b.n	8013b24 <_dtoa_r+0x8dc>
 8013b00:	d0c9      	beq.n	8013a96 <_dtoa_r+0x84e>
 8013b02:	9a07      	ldr	r2, [sp, #28]
 8013b04:	331c      	adds	r3, #28
 8013b06:	441a      	add	r2, r3
 8013b08:	4499      	add	r9, r3
 8013b0a:	441d      	add	r5, r3
 8013b0c:	4613      	mov	r3, r2
 8013b0e:	e7c1      	b.n	8013a94 <_dtoa_r+0x84c>
 8013b10:	4603      	mov	r3, r0
 8013b12:	e7f6      	b.n	8013b02 <_dtoa_r+0x8ba>
 8013b14:	f1b8 0f00 	cmp.w	r8, #0
 8013b18:	dc36      	bgt.n	8013b88 <_dtoa_r+0x940>
 8013b1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013b1c:	2b02      	cmp	r3, #2
 8013b1e:	dd33      	ble.n	8013b88 <_dtoa_r+0x940>
 8013b20:	f8cd 8010 	str.w	r8, [sp, #16]
 8013b24:	9b04      	ldr	r3, [sp, #16]
 8013b26:	b963      	cbnz	r3, 8013b42 <_dtoa_r+0x8fa>
 8013b28:	4631      	mov	r1, r6
 8013b2a:	2205      	movs	r2, #5
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	f000 fcda 	bl	80144e6 <__multadd>
 8013b32:	4601      	mov	r1, r0
 8013b34:	4606      	mov	r6, r0
 8013b36:	4658      	mov	r0, fp
 8013b38:	f000 fedc 	bl	80148f4 <__mcmp>
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	f73f add3 	bgt.w	80136e8 <_dtoa_r+0x4a0>
 8013b42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013b44:	9d06      	ldr	r5, [sp, #24]
 8013b46:	ea6f 0a03 	mvn.w	sl, r3
 8013b4a:	f04f 0900 	mov.w	r9, #0
 8013b4e:	4631      	mov	r1, r6
 8013b50:	4620      	mov	r0, r4
 8013b52:	f000 fcb1 	bl	80144b8 <_Bfree>
 8013b56:	2f00      	cmp	r7, #0
 8013b58:	f43f aebd 	beq.w	80138d6 <_dtoa_r+0x68e>
 8013b5c:	f1b9 0f00 	cmp.w	r9, #0
 8013b60:	d005      	beq.n	8013b6e <_dtoa_r+0x926>
 8013b62:	45b9      	cmp	r9, r7
 8013b64:	d003      	beq.n	8013b6e <_dtoa_r+0x926>
 8013b66:	4649      	mov	r1, r9
 8013b68:	4620      	mov	r0, r4
 8013b6a:	f000 fca5 	bl	80144b8 <_Bfree>
 8013b6e:	4639      	mov	r1, r7
 8013b70:	4620      	mov	r0, r4
 8013b72:	f000 fca1 	bl	80144b8 <_Bfree>
 8013b76:	e6ae      	b.n	80138d6 <_dtoa_r+0x68e>
 8013b78:	2600      	movs	r6, #0
 8013b7a:	4637      	mov	r7, r6
 8013b7c:	e7e1      	b.n	8013b42 <_dtoa_r+0x8fa>
 8013b7e:	46ba      	mov	sl, r7
 8013b80:	4637      	mov	r7, r6
 8013b82:	e5b1      	b.n	80136e8 <_dtoa_r+0x4a0>
 8013b84:	40240000 	.word	0x40240000
 8013b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b8a:	f8cd 8010 	str.w	r8, [sp, #16]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	f000 80f3 	beq.w	8013d7a <_dtoa_r+0xb32>
 8013b94:	2d00      	cmp	r5, #0
 8013b96:	dd05      	ble.n	8013ba4 <_dtoa_r+0x95c>
 8013b98:	4639      	mov	r1, r7
 8013b9a:	462a      	mov	r2, r5
 8013b9c:	4620      	mov	r0, r4
 8013b9e:	f000 fe55 	bl	801484c <__lshift>
 8013ba2:	4607      	mov	r7, r0
 8013ba4:	9b08      	ldr	r3, [sp, #32]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d04c      	beq.n	8013c44 <_dtoa_r+0x9fc>
 8013baa:	6879      	ldr	r1, [r7, #4]
 8013bac:	4620      	mov	r0, r4
 8013bae:	f000 fc4f 	bl	8014450 <_Balloc>
 8013bb2:	4605      	mov	r5, r0
 8013bb4:	693a      	ldr	r2, [r7, #16]
 8013bb6:	f107 010c 	add.w	r1, r7, #12
 8013bba:	3202      	adds	r2, #2
 8013bbc:	0092      	lsls	r2, r2, #2
 8013bbe:	300c      	adds	r0, #12
 8013bc0:	f7fd fb79 	bl	80112b6 <memcpy>
 8013bc4:	2201      	movs	r2, #1
 8013bc6:	4629      	mov	r1, r5
 8013bc8:	4620      	mov	r0, r4
 8013bca:	f000 fe3f 	bl	801484c <__lshift>
 8013bce:	46b9      	mov	r9, r7
 8013bd0:	4607      	mov	r7, r0
 8013bd2:	9b06      	ldr	r3, [sp, #24]
 8013bd4:	9307      	str	r3, [sp, #28]
 8013bd6:	9b02      	ldr	r3, [sp, #8]
 8013bd8:	f003 0301 	and.w	r3, r3, #1
 8013bdc:	9308      	str	r3, [sp, #32]
 8013bde:	4631      	mov	r1, r6
 8013be0:	4658      	mov	r0, fp
 8013be2:	f7ff faa1 	bl	8013128 <quorem>
 8013be6:	4649      	mov	r1, r9
 8013be8:	4605      	mov	r5, r0
 8013bea:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013bee:	4658      	mov	r0, fp
 8013bf0:	f000 fe80 	bl	80148f4 <__mcmp>
 8013bf4:	463a      	mov	r2, r7
 8013bf6:	9002      	str	r0, [sp, #8]
 8013bf8:	4631      	mov	r1, r6
 8013bfa:	4620      	mov	r0, r4
 8013bfc:	f000 fe94 	bl	8014928 <__mdiff>
 8013c00:	68c3      	ldr	r3, [r0, #12]
 8013c02:	4602      	mov	r2, r0
 8013c04:	bb03      	cbnz	r3, 8013c48 <_dtoa_r+0xa00>
 8013c06:	4601      	mov	r1, r0
 8013c08:	9009      	str	r0, [sp, #36]	; 0x24
 8013c0a:	4658      	mov	r0, fp
 8013c0c:	f000 fe72 	bl	80148f4 <__mcmp>
 8013c10:	4603      	mov	r3, r0
 8013c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c14:	4611      	mov	r1, r2
 8013c16:	4620      	mov	r0, r4
 8013c18:	9309      	str	r3, [sp, #36]	; 0x24
 8013c1a:	f000 fc4d 	bl	80144b8 <_Bfree>
 8013c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c20:	b9a3      	cbnz	r3, 8013c4c <_dtoa_r+0xa04>
 8013c22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013c24:	b992      	cbnz	r2, 8013c4c <_dtoa_r+0xa04>
 8013c26:	9a08      	ldr	r2, [sp, #32]
 8013c28:	b982      	cbnz	r2, 8013c4c <_dtoa_r+0xa04>
 8013c2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013c2e:	d029      	beq.n	8013c84 <_dtoa_r+0xa3c>
 8013c30:	9b02      	ldr	r3, [sp, #8]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	dd01      	ble.n	8013c3a <_dtoa_r+0x9f2>
 8013c36:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013c3a:	9b07      	ldr	r3, [sp, #28]
 8013c3c:	1c5d      	adds	r5, r3, #1
 8013c3e:	f883 8000 	strb.w	r8, [r3]
 8013c42:	e784      	b.n	8013b4e <_dtoa_r+0x906>
 8013c44:	4638      	mov	r0, r7
 8013c46:	e7c2      	b.n	8013bce <_dtoa_r+0x986>
 8013c48:	2301      	movs	r3, #1
 8013c4a:	e7e3      	b.n	8013c14 <_dtoa_r+0x9cc>
 8013c4c:	9a02      	ldr	r2, [sp, #8]
 8013c4e:	2a00      	cmp	r2, #0
 8013c50:	db04      	blt.n	8013c5c <_dtoa_r+0xa14>
 8013c52:	d123      	bne.n	8013c9c <_dtoa_r+0xa54>
 8013c54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013c56:	bb0a      	cbnz	r2, 8013c9c <_dtoa_r+0xa54>
 8013c58:	9a08      	ldr	r2, [sp, #32]
 8013c5a:	b9fa      	cbnz	r2, 8013c9c <_dtoa_r+0xa54>
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	ddec      	ble.n	8013c3a <_dtoa_r+0x9f2>
 8013c60:	4659      	mov	r1, fp
 8013c62:	2201      	movs	r2, #1
 8013c64:	4620      	mov	r0, r4
 8013c66:	f000 fdf1 	bl	801484c <__lshift>
 8013c6a:	4631      	mov	r1, r6
 8013c6c:	4683      	mov	fp, r0
 8013c6e:	f000 fe41 	bl	80148f4 <__mcmp>
 8013c72:	2800      	cmp	r0, #0
 8013c74:	dc03      	bgt.n	8013c7e <_dtoa_r+0xa36>
 8013c76:	d1e0      	bne.n	8013c3a <_dtoa_r+0x9f2>
 8013c78:	f018 0f01 	tst.w	r8, #1
 8013c7c:	d0dd      	beq.n	8013c3a <_dtoa_r+0x9f2>
 8013c7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013c82:	d1d8      	bne.n	8013c36 <_dtoa_r+0x9ee>
 8013c84:	9b07      	ldr	r3, [sp, #28]
 8013c86:	9a07      	ldr	r2, [sp, #28]
 8013c88:	1c5d      	adds	r5, r3, #1
 8013c8a:	2339      	movs	r3, #57	; 0x39
 8013c8c:	7013      	strb	r3, [r2, #0]
 8013c8e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013c92:	1e6a      	subs	r2, r5, #1
 8013c94:	2b39      	cmp	r3, #57	; 0x39
 8013c96:	d04d      	beq.n	8013d34 <_dtoa_r+0xaec>
 8013c98:	3301      	adds	r3, #1
 8013c9a:	e052      	b.n	8013d42 <_dtoa_r+0xafa>
 8013c9c:	9a07      	ldr	r2, [sp, #28]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	f102 0501 	add.w	r5, r2, #1
 8013ca4:	dd06      	ble.n	8013cb4 <_dtoa_r+0xa6c>
 8013ca6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013caa:	d0eb      	beq.n	8013c84 <_dtoa_r+0xa3c>
 8013cac:	f108 0801 	add.w	r8, r8, #1
 8013cb0:	9b07      	ldr	r3, [sp, #28]
 8013cb2:	e7c4      	b.n	8013c3e <_dtoa_r+0x9f6>
 8013cb4:	9b06      	ldr	r3, [sp, #24]
 8013cb6:	9a04      	ldr	r2, [sp, #16]
 8013cb8:	1aeb      	subs	r3, r5, r3
 8013cba:	4293      	cmp	r3, r2
 8013cbc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013cc0:	d021      	beq.n	8013d06 <_dtoa_r+0xabe>
 8013cc2:	4659      	mov	r1, fp
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	220a      	movs	r2, #10
 8013cc8:	4620      	mov	r0, r4
 8013cca:	f000 fc0c 	bl	80144e6 <__multadd>
 8013cce:	45b9      	cmp	r9, r7
 8013cd0:	4683      	mov	fp, r0
 8013cd2:	f04f 0300 	mov.w	r3, #0
 8013cd6:	f04f 020a 	mov.w	r2, #10
 8013cda:	4649      	mov	r1, r9
 8013cdc:	4620      	mov	r0, r4
 8013cde:	d105      	bne.n	8013cec <_dtoa_r+0xaa4>
 8013ce0:	f000 fc01 	bl	80144e6 <__multadd>
 8013ce4:	4681      	mov	r9, r0
 8013ce6:	4607      	mov	r7, r0
 8013ce8:	9507      	str	r5, [sp, #28]
 8013cea:	e778      	b.n	8013bde <_dtoa_r+0x996>
 8013cec:	f000 fbfb 	bl	80144e6 <__multadd>
 8013cf0:	4639      	mov	r1, r7
 8013cf2:	4681      	mov	r9, r0
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	220a      	movs	r2, #10
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f000 fbf4 	bl	80144e6 <__multadd>
 8013cfe:	4607      	mov	r7, r0
 8013d00:	e7f2      	b.n	8013ce8 <_dtoa_r+0xaa0>
 8013d02:	f04f 0900 	mov.w	r9, #0
 8013d06:	4659      	mov	r1, fp
 8013d08:	2201      	movs	r2, #1
 8013d0a:	4620      	mov	r0, r4
 8013d0c:	f000 fd9e 	bl	801484c <__lshift>
 8013d10:	4631      	mov	r1, r6
 8013d12:	4683      	mov	fp, r0
 8013d14:	f000 fdee 	bl	80148f4 <__mcmp>
 8013d18:	2800      	cmp	r0, #0
 8013d1a:	dcb8      	bgt.n	8013c8e <_dtoa_r+0xa46>
 8013d1c:	d102      	bne.n	8013d24 <_dtoa_r+0xadc>
 8013d1e:	f018 0f01 	tst.w	r8, #1
 8013d22:	d1b4      	bne.n	8013c8e <_dtoa_r+0xa46>
 8013d24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013d28:	1e6a      	subs	r2, r5, #1
 8013d2a:	2b30      	cmp	r3, #48	; 0x30
 8013d2c:	f47f af0f 	bne.w	8013b4e <_dtoa_r+0x906>
 8013d30:	4615      	mov	r5, r2
 8013d32:	e7f7      	b.n	8013d24 <_dtoa_r+0xadc>
 8013d34:	9b06      	ldr	r3, [sp, #24]
 8013d36:	4293      	cmp	r3, r2
 8013d38:	d105      	bne.n	8013d46 <_dtoa_r+0xafe>
 8013d3a:	2331      	movs	r3, #49	; 0x31
 8013d3c:	9a06      	ldr	r2, [sp, #24]
 8013d3e:	f10a 0a01 	add.w	sl, sl, #1
 8013d42:	7013      	strb	r3, [r2, #0]
 8013d44:	e703      	b.n	8013b4e <_dtoa_r+0x906>
 8013d46:	4615      	mov	r5, r2
 8013d48:	e7a1      	b.n	8013c8e <_dtoa_r+0xa46>
 8013d4a:	4b17      	ldr	r3, [pc, #92]	; (8013da8 <_dtoa_r+0xb60>)
 8013d4c:	f7ff bae1 	b.w	8013312 <_dtoa_r+0xca>
 8013d50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	f47f aabb 	bne.w	80132ce <_dtoa_r+0x86>
 8013d58:	4b14      	ldr	r3, [pc, #80]	; (8013dac <_dtoa_r+0xb64>)
 8013d5a:	f7ff bada 	b.w	8013312 <_dtoa_r+0xca>
 8013d5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	f77f ae3f 	ble.w	80139e4 <_dtoa_r+0x79c>
 8013d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d68:	9308      	str	r3, [sp, #32]
 8013d6a:	e653      	b.n	8013a14 <_dtoa_r+0x7cc>
 8013d6c:	9b04      	ldr	r3, [sp, #16]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	dc03      	bgt.n	8013d7a <_dtoa_r+0xb32>
 8013d72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013d74:	2b02      	cmp	r3, #2
 8013d76:	f73f aed5 	bgt.w	8013b24 <_dtoa_r+0x8dc>
 8013d7a:	9d06      	ldr	r5, [sp, #24]
 8013d7c:	4631      	mov	r1, r6
 8013d7e:	4658      	mov	r0, fp
 8013d80:	f7ff f9d2 	bl	8013128 <quorem>
 8013d84:	9b06      	ldr	r3, [sp, #24]
 8013d86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013d8a:	f805 8b01 	strb.w	r8, [r5], #1
 8013d8e:	9a04      	ldr	r2, [sp, #16]
 8013d90:	1aeb      	subs	r3, r5, r3
 8013d92:	429a      	cmp	r2, r3
 8013d94:	ddb5      	ble.n	8013d02 <_dtoa_r+0xaba>
 8013d96:	4659      	mov	r1, fp
 8013d98:	2300      	movs	r3, #0
 8013d9a:	220a      	movs	r2, #10
 8013d9c:	4620      	mov	r0, r4
 8013d9e:	f000 fba2 	bl	80144e6 <__multadd>
 8013da2:	4683      	mov	fp, r0
 8013da4:	e7ea      	b.n	8013d7c <_dtoa_r+0xb34>
 8013da6:	bf00      	nop
 8013da8:	080183bd 	.word	0x080183bd
 8013dac:	08018438 	.word	0x08018438

08013db0 <rshift>:
 8013db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013db2:	6906      	ldr	r6, [r0, #16]
 8013db4:	114b      	asrs	r3, r1, #5
 8013db6:	429e      	cmp	r6, r3
 8013db8:	f100 0414 	add.w	r4, r0, #20
 8013dbc:	dd31      	ble.n	8013e22 <rshift+0x72>
 8013dbe:	f011 011f 	ands.w	r1, r1, #31
 8013dc2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8013dc6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8013dca:	d108      	bne.n	8013dde <rshift+0x2e>
 8013dcc:	4621      	mov	r1, r4
 8013dce:	42b2      	cmp	r2, r6
 8013dd0:	460b      	mov	r3, r1
 8013dd2:	d211      	bcs.n	8013df8 <rshift+0x48>
 8013dd4:	f852 3b04 	ldr.w	r3, [r2], #4
 8013dd8:	f841 3b04 	str.w	r3, [r1], #4
 8013ddc:	e7f7      	b.n	8013dce <rshift+0x1e>
 8013dde:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013de2:	4623      	mov	r3, r4
 8013de4:	f1c1 0c20 	rsb	ip, r1, #32
 8013de8:	40cd      	lsrs	r5, r1
 8013dea:	3204      	adds	r2, #4
 8013dec:	42b2      	cmp	r2, r6
 8013dee:	4617      	mov	r7, r2
 8013df0:	d30d      	bcc.n	8013e0e <rshift+0x5e>
 8013df2:	601d      	str	r5, [r3, #0]
 8013df4:	b105      	cbz	r5, 8013df8 <rshift+0x48>
 8013df6:	3304      	adds	r3, #4
 8013df8:	42a3      	cmp	r3, r4
 8013dfa:	eba3 0204 	sub.w	r2, r3, r4
 8013dfe:	bf08      	it	eq
 8013e00:	2300      	moveq	r3, #0
 8013e02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013e06:	6102      	str	r2, [r0, #16]
 8013e08:	bf08      	it	eq
 8013e0a:	6143      	streq	r3, [r0, #20]
 8013e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e0e:	683f      	ldr	r7, [r7, #0]
 8013e10:	fa07 f70c 	lsl.w	r7, r7, ip
 8013e14:	433d      	orrs	r5, r7
 8013e16:	f843 5b04 	str.w	r5, [r3], #4
 8013e1a:	f852 5b04 	ldr.w	r5, [r2], #4
 8013e1e:	40cd      	lsrs	r5, r1
 8013e20:	e7e4      	b.n	8013dec <rshift+0x3c>
 8013e22:	4623      	mov	r3, r4
 8013e24:	e7e8      	b.n	8013df8 <rshift+0x48>

08013e26 <__hexdig_fun>:
 8013e26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013e2a:	2b09      	cmp	r3, #9
 8013e2c:	d802      	bhi.n	8013e34 <__hexdig_fun+0xe>
 8013e2e:	3820      	subs	r0, #32
 8013e30:	b2c0      	uxtb	r0, r0
 8013e32:	4770      	bx	lr
 8013e34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013e38:	2b05      	cmp	r3, #5
 8013e3a:	d801      	bhi.n	8013e40 <__hexdig_fun+0x1a>
 8013e3c:	3847      	subs	r0, #71	; 0x47
 8013e3e:	e7f7      	b.n	8013e30 <__hexdig_fun+0xa>
 8013e40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013e44:	2b05      	cmp	r3, #5
 8013e46:	d801      	bhi.n	8013e4c <__hexdig_fun+0x26>
 8013e48:	3827      	subs	r0, #39	; 0x27
 8013e4a:	e7f1      	b.n	8013e30 <__hexdig_fun+0xa>
 8013e4c:	2000      	movs	r0, #0
 8013e4e:	4770      	bx	lr

08013e50 <__gethex>:
 8013e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e54:	b08b      	sub	sp, #44	; 0x2c
 8013e56:	9002      	str	r0, [sp, #8]
 8013e58:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013e5a:	468a      	mov	sl, r1
 8013e5c:	4690      	mov	r8, r2
 8013e5e:	9306      	str	r3, [sp, #24]
 8013e60:	f000 fad1 	bl	8014406 <__localeconv_l>
 8013e64:	6803      	ldr	r3, [r0, #0]
 8013e66:	f04f 0b00 	mov.w	fp, #0
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	9303      	str	r3, [sp, #12]
 8013e6e:	f7ec f96f 	bl	8000150 <strlen>
 8013e72:	9b03      	ldr	r3, [sp, #12]
 8013e74:	9001      	str	r0, [sp, #4]
 8013e76:	4403      	add	r3, r0
 8013e78:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013e7c:	9307      	str	r3, [sp, #28]
 8013e7e:	f8da 3000 	ldr.w	r3, [sl]
 8013e82:	3302      	adds	r3, #2
 8013e84:	461f      	mov	r7, r3
 8013e86:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013e8a:	2830      	cmp	r0, #48	; 0x30
 8013e8c:	d06c      	beq.n	8013f68 <__gethex+0x118>
 8013e8e:	f7ff ffca 	bl	8013e26 <__hexdig_fun>
 8013e92:	4604      	mov	r4, r0
 8013e94:	2800      	cmp	r0, #0
 8013e96:	d16a      	bne.n	8013f6e <__gethex+0x11e>
 8013e98:	9a01      	ldr	r2, [sp, #4]
 8013e9a:	9903      	ldr	r1, [sp, #12]
 8013e9c:	4638      	mov	r0, r7
 8013e9e:	f001 f82f 	bl	8014f00 <strncmp>
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	d166      	bne.n	8013f74 <__gethex+0x124>
 8013ea6:	9b01      	ldr	r3, [sp, #4]
 8013ea8:	5cf8      	ldrb	r0, [r7, r3]
 8013eaa:	18fe      	adds	r6, r7, r3
 8013eac:	f7ff ffbb 	bl	8013e26 <__hexdig_fun>
 8013eb0:	2800      	cmp	r0, #0
 8013eb2:	d062      	beq.n	8013f7a <__gethex+0x12a>
 8013eb4:	4633      	mov	r3, r6
 8013eb6:	7818      	ldrb	r0, [r3, #0]
 8013eb8:	461f      	mov	r7, r3
 8013eba:	2830      	cmp	r0, #48	; 0x30
 8013ebc:	f103 0301 	add.w	r3, r3, #1
 8013ec0:	d0f9      	beq.n	8013eb6 <__gethex+0x66>
 8013ec2:	f7ff ffb0 	bl	8013e26 <__hexdig_fun>
 8013ec6:	fab0 f580 	clz	r5, r0
 8013eca:	4634      	mov	r4, r6
 8013ecc:	f04f 0b01 	mov.w	fp, #1
 8013ed0:	096d      	lsrs	r5, r5, #5
 8013ed2:	463a      	mov	r2, r7
 8013ed4:	4616      	mov	r6, r2
 8013ed6:	7830      	ldrb	r0, [r6, #0]
 8013ed8:	3201      	adds	r2, #1
 8013eda:	f7ff ffa4 	bl	8013e26 <__hexdig_fun>
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	d1f8      	bne.n	8013ed4 <__gethex+0x84>
 8013ee2:	9a01      	ldr	r2, [sp, #4]
 8013ee4:	9903      	ldr	r1, [sp, #12]
 8013ee6:	4630      	mov	r0, r6
 8013ee8:	f001 f80a 	bl	8014f00 <strncmp>
 8013eec:	b950      	cbnz	r0, 8013f04 <__gethex+0xb4>
 8013eee:	b954      	cbnz	r4, 8013f06 <__gethex+0xb6>
 8013ef0:	9b01      	ldr	r3, [sp, #4]
 8013ef2:	18f4      	adds	r4, r6, r3
 8013ef4:	4622      	mov	r2, r4
 8013ef6:	4616      	mov	r6, r2
 8013ef8:	7830      	ldrb	r0, [r6, #0]
 8013efa:	3201      	adds	r2, #1
 8013efc:	f7ff ff93 	bl	8013e26 <__hexdig_fun>
 8013f00:	2800      	cmp	r0, #0
 8013f02:	d1f8      	bne.n	8013ef6 <__gethex+0xa6>
 8013f04:	b10c      	cbz	r4, 8013f0a <__gethex+0xba>
 8013f06:	1ba4      	subs	r4, r4, r6
 8013f08:	00a4      	lsls	r4, r4, #2
 8013f0a:	7833      	ldrb	r3, [r6, #0]
 8013f0c:	2b50      	cmp	r3, #80	; 0x50
 8013f0e:	d001      	beq.n	8013f14 <__gethex+0xc4>
 8013f10:	2b70      	cmp	r3, #112	; 0x70
 8013f12:	d140      	bne.n	8013f96 <__gethex+0x146>
 8013f14:	7873      	ldrb	r3, [r6, #1]
 8013f16:	2b2b      	cmp	r3, #43	; 0x2b
 8013f18:	d031      	beq.n	8013f7e <__gethex+0x12e>
 8013f1a:	2b2d      	cmp	r3, #45	; 0x2d
 8013f1c:	d033      	beq.n	8013f86 <__gethex+0x136>
 8013f1e:	f04f 0900 	mov.w	r9, #0
 8013f22:	1c71      	adds	r1, r6, #1
 8013f24:	7808      	ldrb	r0, [r1, #0]
 8013f26:	f7ff ff7e 	bl	8013e26 <__hexdig_fun>
 8013f2a:	1e43      	subs	r3, r0, #1
 8013f2c:	b2db      	uxtb	r3, r3
 8013f2e:	2b18      	cmp	r3, #24
 8013f30:	d831      	bhi.n	8013f96 <__gethex+0x146>
 8013f32:	f1a0 0210 	sub.w	r2, r0, #16
 8013f36:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013f3a:	f7ff ff74 	bl	8013e26 <__hexdig_fun>
 8013f3e:	1e43      	subs	r3, r0, #1
 8013f40:	b2db      	uxtb	r3, r3
 8013f42:	2b18      	cmp	r3, #24
 8013f44:	d922      	bls.n	8013f8c <__gethex+0x13c>
 8013f46:	f1b9 0f00 	cmp.w	r9, #0
 8013f4a:	d000      	beq.n	8013f4e <__gethex+0xfe>
 8013f4c:	4252      	negs	r2, r2
 8013f4e:	4414      	add	r4, r2
 8013f50:	f8ca 1000 	str.w	r1, [sl]
 8013f54:	b30d      	cbz	r5, 8013f9a <__gethex+0x14a>
 8013f56:	f1bb 0f00 	cmp.w	fp, #0
 8013f5a:	bf0c      	ite	eq
 8013f5c:	2706      	moveq	r7, #6
 8013f5e:	2700      	movne	r7, #0
 8013f60:	4638      	mov	r0, r7
 8013f62:	b00b      	add	sp, #44	; 0x2c
 8013f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f68:	f10b 0b01 	add.w	fp, fp, #1
 8013f6c:	e78a      	b.n	8013e84 <__gethex+0x34>
 8013f6e:	2500      	movs	r5, #0
 8013f70:	462c      	mov	r4, r5
 8013f72:	e7ae      	b.n	8013ed2 <__gethex+0x82>
 8013f74:	463e      	mov	r6, r7
 8013f76:	2501      	movs	r5, #1
 8013f78:	e7c7      	b.n	8013f0a <__gethex+0xba>
 8013f7a:	4604      	mov	r4, r0
 8013f7c:	e7fb      	b.n	8013f76 <__gethex+0x126>
 8013f7e:	f04f 0900 	mov.w	r9, #0
 8013f82:	1cb1      	adds	r1, r6, #2
 8013f84:	e7ce      	b.n	8013f24 <__gethex+0xd4>
 8013f86:	f04f 0901 	mov.w	r9, #1
 8013f8a:	e7fa      	b.n	8013f82 <__gethex+0x132>
 8013f8c:	230a      	movs	r3, #10
 8013f8e:	fb03 0202 	mla	r2, r3, r2, r0
 8013f92:	3a10      	subs	r2, #16
 8013f94:	e7cf      	b.n	8013f36 <__gethex+0xe6>
 8013f96:	4631      	mov	r1, r6
 8013f98:	e7da      	b.n	8013f50 <__gethex+0x100>
 8013f9a:	4629      	mov	r1, r5
 8013f9c:	1bf3      	subs	r3, r6, r7
 8013f9e:	3b01      	subs	r3, #1
 8013fa0:	2b07      	cmp	r3, #7
 8013fa2:	dc49      	bgt.n	8014038 <__gethex+0x1e8>
 8013fa4:	9802      	ldr	r0, [sp, #8]
 8013fa6:	f000 fa53 	bl	8014450 <_Balloc>
 8013faa:	f04f 0b00 	mov.w	fp, #0
 8013fae:	4605      	mov	r5, r0
 8013fb0:	46da      	mov	sl, fp
 8013fb2:	9b01      	ldr	r3, [sp, #4]
 8013fb4:	f100 0914 	add.w	r9, r0, #20
 8013fb8:	f1c3 0301 	rsb	r3, r3, #1
 8013fbc:	f8cd 9010 	str.w	r9, [sp, #16]
 8013fc0:	9308      	str	r3, [sp, #32]
 8013fc2:	42b7      	cmp	r7, r6
 8013fc4:	d33b      	bcc.n	801403e <__gethex+0x1ee>
 8013fc6:	9804      	ldr	r0, [sp, #16]
 8013fc8:	f840 ab04 	str.w	sl, [r0], #4
 8013fcc:	eba0 0009 	sub.w	r0, r0, r9
 8013fd0:	1080      	asrs	r0, r0, #2
 8013fd2:	6128      	str	r0, [r5, #16]
 8013fd4:	0147      	lsls	r7, r0, #5
 8013fd6:	4650      	mov	r0, sl
 8013fd8:	f000 fafe 	bl	80145d8 <__hi0bits>
 8013fdc:	f8d8 6000 	ldr.w	r6, [r8]
 8013fe0:	1a3f      	subs	r7, r7, r0
 8013fe2:	42b7      	cmp	r7, r6
 8013fe4:	dd64      	ble.n	80140b0 <__gethex+0x260>
 8013fe6:	1bbf      	subs	r7, r7, r6
 8013fe8:	4639      	mov	r1, r7
 8013fea:	4628      	mov	r0, r5
 8013fec:	f000 fe07 	bl	8014bfe <__any_on>
 8013ff0:	4682      	mov	sl, r0
 8013ff2:	b178      	cbz	r0, 8014014 <__gethex+0x1c4>
 8013ff4:	f04f 0a01 	mov.w	sl, #1
 8013ff8:	1e7b      	subs	r3, r7, #1
 8013ffa:	1159      	asrs	r1, r3, #5
 8013ffc:	f003 021f 	and.w	r2, r3, #31
 8014000:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014004:	fa0a f202 	lsl.w	r2, sl, r2
 8014008:	420a      	tst	r2, r1
 801400a:	d003      	beq.n	8014014 <__gethex+0x1c4>
 801400c:	4553      	cmp	r3, sl
 801400e:	dc46      	bgt.n	801409e <__gethex+0x24e>
 8014010:	f04f 0a02 	mov.w	sl, #2
 8014014:	4639      	mov	r1, r7
 8014016:	4628      	mov	r0, r5
 8014018:	f7ff feca 	bl	8013db0 <rshift>
 801401c:	443c      	add	r4, r7
 801401e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014022:	42a3      	cmp	r3, r4
 8014024:	da52      	bge.n	80140cc <__gethex+0x27c>
 8014026:	4629      	mov	r1, r5
 8014028:	9802      	ldr	r0, [sp, #8]
 801402a:	f000 fa45 	bl	80144b8 <_Bfree>
 801402e:	2300      	movs	r3, #0
 8014030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014032:	27a3      	movs	r7, #163	; 0xa3
 8014034:	6013      	str	r3, [r2, #0]
 8014036:	e793      	b.n	8013f60 <__gethex+0x110>
 8014038:	3101      	adds	r1, #1
 801403a:	105b      	asrs	r3, r3, #1
 801403c:	e7b0      	b.n	8013fa0 <__gethex+0x150>
 801403e:	1e73      	subs	r3, r6, #1
 8014040:	9305      	str	r3, [sp, #20]
 8014042:	9a07      	ldr	r2, [sp, #28]
 8014044:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014048:	4293      	cmp	r3, r2
 801404a:	d018      	beq.n	801407e <__gethex+0x22e>
 801404c:	f1bb 0f20 	cmp.w	fp, #32
 8014050:	d107      	bne.n	8014062 <__gethex+0x212>
 8014052:	9b04      	ldr	r3, [sp, #16]
 8014054:	f8c3 a000 	str.w	sl, [r3]
 8014058:	f04f 0a00 	mov.w	sl, #0
 801405c:	46d3      	mov	fp, sl
 801405e:	3304      	adds	r3, #4
 8014060:	9304      	str	r3, [sp, #16]
 8014062:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014066:	f7ff fede 	bl	8013e26 <__hexdig_fun>
 801406a:	f000 000f 	and.w	r0, r0, #15
 801406e:	fa00 f00b 	lsl.w	r0, r0, fp
 8014072:	ea4a 0a00 	orr.w	sl, sl, r0
 8014076:	f10b 0b04 	add.w	fp, fp, #4
 801407a:	9b05      	ldr	r3, [sp, #20]
 801407c:	e00d      	b.n	801409a <__gethex+0x24a>
 801407e:	9b05      	ldr	r3, [sp, #20]
 8014080:	9a08      	ldr	r2, [sp, #32]
 8014082:	4413      	add	r3, r2
 8014084:	42bb      	cmp	r3, r7
 8014086:	d3e1      	bcc.n	801404c <__gethex+0x1fc>
 8014088:	4618      	mov	r0, r3
 801408a:	9a01      	ldr	r2, [sp, #4]
 801408c:	9903      	ldr	r1, [sp, #12]
 801408e:	9309      	str	r3, [sp, #36]	; 0x24
 8014090:	f000 ff36 	bl	8014f00 <strncmp>
 8014094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014096:	2800      	cmp	r0, #0
 8014098:	d1d8      	bne.n	801404c <__gethex+0x1fc>
 801409a:	461e      	mov	r6, r3
 801409c:	e791      	b.n	8013fc2 <__gethex+0x172>
 801409e:	1eb9      	subs	r1, r7, #2
 80140a0:	4628      	mov	r0, r5
 80140a2:	f000 fdac 	bl	8014bfe <__any_on>
 80140a6:	2800      	cmp	r0, #0
 80140a8:	d0b2      	beq.n	8014010 <__gethex+0x1c0>
 80140aa:	f04f 0a03 	mov.w	sl, #3
 80140ae:	e7b1      	b.n	8014014 <__gethex+0x1c4>
 80140b0:	da09      	bge.n	80140c6 <__gethex+0x276>
 80140b2:	1bf7      	subs	r7, r6, r7
 80140b4:	4629      	mov	r1, r5
 80140b6:	463a      	mov	r2, r7
 80140b8:	9802      	ldr	r0, [sp, #8]
 80140ba:	f000 fbc7 	bl	801484c <__lshift>
 80140be:	4605      	mov	r5, r0
 80140c0:	1be4      	subs	r4, r4, r7
 80140c2:	f100 0914 	add.w	r9, r0, #20
 80140c6:	f04f 0a00 	mov.w	sl, #0
 80140ca:	e7a8      	b.n	801401e <__gethex+0x1ce>
 80140cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80140d0:	42a0      	cmp	r0, r4
 80140d2:	dd6b      	ble.n	80141ac <__gethex+0x35c>
 80140d4:	1b04      	subs	r4, r0, r4
 80140d6:	42a6      	cmp	r6, r4
 80140d8:	dc2e      	bgt.n	8014138 <__gethex+0x2e8>
 80140da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80140de:	2b02      	cmp	r3, #2
 80140e0:	d022      	beq.n	8014128 <__gethex+0x2d8>
 80140e2:	2b03      	cmp	r3, #3
 80140e4:	d024      	beq.n	8014130 <__gethex+0x2e0>
 80140e6:	2b01      	cmp	r3, #1
 80140e8:	d115      	bne.n	8014116 <__gethex+0x2c6>
 80140ea:	42a6      	cmp	r6, r4
 80140ec:	d113      	bne.n	8014116 <__gethex+0x2c6>
 80140ee:	2e01      	cmp	r6, #1
 80140f0:	dc0b      	bgt.n	801410a <__gethex+0x2ba>
 80140f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80140f6:	9a06      	ldr	r2, [sp, #24]
 80140f8:	2762      	movs	r7, #98	; 0x62
 80140fa:	6013      	str	r3, [r2, #0]
 80140fc:	2301      	movs	r3, #1
 80140fe:	612b      	str	r3, [r5, #16]
 8014100:	f8c9 3000 	str.w	r3, [r9]
 8014104:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014106:	601d      	str	r5, [r3, #0]
 8014108:	e72a      	b.n	8013f60 <__gethex+0x110>
 801410a:	1e71      	subs	r1, r6, #1
 801410c:	4628      	mov	r0, r5
 801410e:	f000 fd76 	bl	8014bfe <__any_on>
 8014112:	2800      	cmp	r0, #0
 8014114:	d1ed      	bne.n	80140f2 <__gethex+0x2a2>
 8014116:	4629      	mov	r1, r5
 8014118:	9802      	ldr	r0, [sp, #8]
 801411a:	f000 f9cd 	bl	80144b8 <_Bfree>
 801411e:	2300      	movs	r3, #0
 8014120:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014122:	2750      	movs	r7, #80	; 0x50
 8014124:	6013      	str	r3, [r2, #0]
 8014126:	e71b      	b.n	8013f60 <__gethex+0x110>
 8014128:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801412a:	2b00      	cmp	r3, #0
 801412c:	d0e1      	beq.n	80140f2 <__gethex+0x2a2>
 801412e:	e7f2      	b.n	8014116 <__gethex+0x2c6>
 8014130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014132:	2b00      	cmp	r3, #0
 8014134:	d1dd      	bne.n	80140f2 <__gethex+0x2a2>
 8014136:	e7ee      	b.n	8014116 <__gethex+0x2c6>
 8014138:	1e67      	subs	r7, r4, #1
 801413a:	f1ba 0f00 	cmp.w	sl, #0
 801413e:	d132      	bne.n	80141a6 <__gethex+0x356>
 8014140:	b127      	cbz	r7, 801414c <__gethex+0x2fc>
 8014142:	4639      	mov	r1, r7
 8014144:	4628      	mov	r0, r5
 8014146:	f000 fd5a 	bl	8014bfe <__any_on>
 801414a:	4682      	mov	sl, r0
 801414c:	2301      	movs	r3, #1
 801414e:	117a      	asrs	r2, r7, #5
 8014150:	f007 071f 	and.w	r7, r7, #31
 8014154:	fa03 f707 	lsl.w	r7, r3, r7
 8014158:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801415c:	4621      	mov	r1, r4
 801415e:	421f      	tst	r7, r3
 8014160:	f04f 0702 	mov.w	r7, #2
 8014164:	4628      	mov	r0, r5
 8014166:	bf18      	it	ne
 8014168:	f04a 0a02 	orrne.w	sl, sl, #2
 801416c:	1b36      	subs	r6, r6, r4
 801416e:	f7ff fe1f 	bl	8013db0 <rshift>
 8014172:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014176:	f1ba 0f00 	cmp.w	sl, #0
 801417a:	d048      	beq.n	801420e <__gethex+0x3be>
 801417c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014180:	2b02      	cmp	r3, #2
 8014182:	d015      	beq.n	80141b0 <__gethex+0x360>
 8014184:	2b03      	cmp	r3, #3
 8014186:	d017      	beq.n	80141b8 <__gethex+0x368>
 8014188:	2b01      	cmp	r3, #1
 801418a:	d109      	bne.n	80141a0 <__gethex+0x350>
 801418c:	f01a 0f02 	tst.w	sl, #2
 8014190:	d006      	beq.n	80141a0 <__gethex+0x350>
 8014192:	f8d9 3000 	ldr.w	r3, [r9]
 8014196:	ea4a 0a03 	orr.w	sl, sl, r3
 801419a:	f01a 0f01 	tst.w	sl, #1
 801419e:	d10e      	bne.n	80141be <__gethex+0x36e>
 80141a0:	f047 0710 	orr.w	r7, r7, #16
 80141a4:	e033      	b.n	801420e <__gethex+0x3be>
 80141a6:	f04f 0a01 	mov.w	sl, #1
 80141aa:	e7cf      	b.n	801414c <__gethex+0x2fc>
 80141ac:	2701      	movs	r7, #1
 80141ae:	e7e2      	b.n	8014176 <__gethex+0x326>
 80141b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80141b2:	f1c3 0301 	rsb	r3, r3, #1
 80141b6:	9315      	str	r3, [sp, #84]	; 0x54
 80141b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d0f0      	beq.n	80141a0 <__gethex+0x350>
 80141be:	f04f 0c00 	mov.w	ip, #0
 80141c2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80141c6:	f105 0314 	add.w	r3, r5, #20
 80141ca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80141ce:	eb03 010a 	add.w	r1, r3, sl
 80141d2:	4618      	mov	r0, r3
 80141d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80141d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80141dc:	d01c      	beq.n	8014218 <__gethex+0x3c8>
 80141de:	3201      	adds	r2, #1
 80141e0:	6002      	str	r2, [r0, #0]
 80141e2:	2f02      	cmp	r7, #2
 80141e4:	f105 0314 	add.w	r3, r5, #20
 80141e8:	d138      	bne.n	801425c <__gethex+0x40c>
 80141ea:	f8d8 2000 	ldr.w	r2, [r8]
 80141ee:	3a01      	subs	r2, #1
 80141f0:	42b2      	cmp	r2, r6
 80141f2:	d10a      	bne.n	801420a <__gethex+0x3ba>
 80141f4:	2201      	movs	r2, #1
 80141f6:	1171      	asrs	r1, r6, #5
 80141f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80141fc:	f006 061f 	and.w	r6, r6, #31
 8014200:	fa02 f606 	lsl.w	r6, r2, r6
 8014204:	421e      	tst	r6, r3
 8014206:	bf18      	it	ne
 8014208:	4617      	movne	r7, r2
 801420a:	f047 0720 	orr.w	r7, r7, #32
 801420e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014210:	601d      	str	r5, [r3, #0]
 8014212:	9b06      	ldr	r3, [sp, #24]
 8014214:	601c      	str	r4, [r3, #0]
 8014216:	e6a3      	b.n	8013f60 <__gethex+0x110>
 8014218:	4299      	cmp	r1, r3
 801421a:	f843 cc04 	str.w	ip, [r3, #-4]
 801421e:	d8d8      	bhi.n	80141d2 <__gethex+0x382>
 8014220:	68ab      	ldr	r3, [r5, #8]
 8014222:	4599      	cmp	r9, r3
 8014224:	db12      	blt.n	801424c <__gethex+0x3fc>
 8014226:	6869      	ldr	r1, [r5, #4]
 8014228:	9802      	ldr	r0, [sp, #8]
 801422a:	3101      	adds	r1, #1
 801422c:	f000 f910 	bl	8014450 <_Balloc>
 8014230:	4683      	mov	fp, r0
 8014232:	692a      	ldr	r2, [r5, #16]
 8014234:	f105 010c 	add.w	r1, r5, #12
 8014238:	3202      	adds	r2, #2
 801423a:	0092      	lsls	r2, r2, #2
 801423c:	300c      	adds	r0, #12
 801423e:	f7fd f83a 	bl	80112b6 <memcpy>
 8014242:	4629      	mov	r1, r5
 8014244:	9802      	ldr	r0, [sp, #8]
 8014246:	f000 f937 	bl	80144b8 <_Bfree>
 801424a:	465d      	mov	r5, fp
 801424c:	692b      	ldr	r3, [r5, #16]
 801424e:	1c5a      	adds	r2, r3, #1
 8014250:	612a      	str	r2, [r5, #16]
 8014252:	2201      	movs	r2, #1
 8014254:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014258:	615a      	str	r2, [r3, #20]
 801425a:	e7c2      	b.n	80141e2 <__gethex+0x392>
 801425c:	692a      	ldr	r2, [r5, #16]
 801425e:	454a      	cmp	r2, r9
 8014260:	dd0b      	ble.n	801427a <__gethex+0x42a>
 8014262:	2101      	movs	r1, #1
 8014264:	4628      	mov	r0, r5
 8014266:	f7ff fda3 	bl	8013db0 <rshift>
 801426a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801426e:	3401      	adds	r4, #1
 8014270:	42a3      	cmp	r3, r4
 8014272:	f6ff aed8 	blt.w	8014026 <__gethex+0x1d6>
 8014276:	2701      	movs	r7, #1
 8014278:	e7c7      	b.n	801420a <__gethex+0x3ba>
 801427a:	f016 061f 	ands.w	r6, r6, #31
 801427e:	d0fa      	beq.n	8014276 <__gethex+0x426>
 8014280:	449a      	add	sl, r3
 8014282:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014286:	f000 f9a7 	bl	80145d8 <__hi0bits>
 801428a:	f1c6 0620 	rsb	r6, r6, #32
 801428e:	42b0      	cmp	r0, r6
 8014290:	dbe7      	blt.n	8014262 <__gethex+0x412>
 8014292:	e7f0      	b.n	8014276 <__gethex+0x426>

08014294 <L_shift>:
 8014294:	f1c2 0208 	rsb	r2, r2, #8
 8014298:	0092      	lsls	r2, r2, #2
 801429a:	b570      	push	{r4, r5, r6, lr}
 801429c:	f1c2 0620 	rsb	r6, r2, #32
 80142a0:	6843      	ldr	r3, [r0, #4]
 80142a2:	6804      	ldr	r4, [r0, #0]
 80142a4:	fa03 f506 	lsl.w	r5, r3, r6
 80142a8:	432c      	orrs	r4, r5
 80142aa:	40d3      	lsrs	r3, r2
 80142ac:	6004      	str	r4, [r0, #0]
 80142ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80142b2:	4288      	cmp	r0, r1
 80142b4:	d3f4      	bcc.n	80142a0 <L_shift+0xc>
 80142b6:	bd70      	pop	{r4, r5, r6, pc}

080142b8 <__match>:
 80142b8:	b530      	push	{r4, r5, lr}
 80142ba:	6803      	ldr	r3, [r0, #0]
 80142bc:	3301      	adds	r3, #1
 80142be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142c2:	b914      	cbnz	r4, 80142ca <__match+0x12>
 80142c4:	6003      	str	r3, [r0, #0]
 80142c6:	2001      	movs	r0, #1
 80142c8:	bd30      	pop	{r4, r5, pc}
 80142ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80142d2:	2d19      	cmp	r5, #25
 80142d4:	bf98      	it	ls
 80142d6:	3220      	addls	r2, #32
 80142d8:	42a2      	cmp	r2, r4
 80142da:	d0f0      	beq.n	80142be <__match+0x6>
 80142dc:	2000      	movs	r0, #0
 80142de:	e7f3      	b.n	80142c8 <__match+0x10>

080142e0 <__hexnan>:
 80142e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e4:	2500      	movs	r5, #0
 80142e6:	680b      	ldr	r3, [r1, #0]
 80142e8:	4682      	mov	sl, r0
 80142ea:	115f      	asrs	r7, r3, #5
 80142ec:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80142f0:	f013 031f 	ands.w	r3, r3, #31
 80142f4:	bf18      	it	ne
 80142f6:	3704      	addne	r7, #4
 80142f8:	1f3e      	subs	r6, r7, #4
 80142fa:	4690      	mov	r8, r2
 80142fc:	46b1      	mov	r9, r6
 80142fe:	4634      	mov	r4, r6
 8014300:	46ab      	mov	fp, r5
 8014302:	b087      	sub	sp, #28
 8014304:	6801      	ldr	r1, [r0, #0]
 8014306:	9301      	str	r3, [sp, #4]
 8014308:	f847 5c04 	str.w	r5, [r7, #-4]
 801430c:	9502      	str	r5, [sp, #8]
 801430e:	784a      	ldrb	r2, [r1, #1]
 8014310:	1c4b      	adds	r3, r1, #1
 8014312:	9303      	str	r3, [sp, #12]
 8014314:	b342      	cbz	r2, 8014368 <__hexnan+0x88>
 8014316:	4610      	mov	r0, r2
 8014318:	9105      	str	r1, [sp, #20]
 801431a:	9204      	str	r2, [sp, #16]
 801431c:	f7ff fd83 	bl	8013e26 <__hexdig_fun>
 8014320:	2800      	cmp	r0, #0
 8014322:	d143      	bne.n	80143ac <__hexnan+0xcc>
 8014324:	9a04      	ldr	r2, [sp, #16]
 8014326:	9905      	ldr	r1, [sp, #20]
 8014328:	2a20      	cmp	r2, #32
 801432a:	d818      	bhi.n	801435e <__hexnan+0x7e>
 801432c:	9b02      	ldr	r3, [sp, #8]
 801432e:	459b      	cmp	fp, r3
 8014330:	dd13      	ble.n	801435a <__hexnan+0x7a>
 8014332:	454c      	cmp	r4, r9
 8014334:	d206      	bcs.n	8014344 <__hexnan+0x64>
 8014336:	2d07      	cmp	r5, #7
 8014338:	dc04      	bgt.n	8014344 <__hexnan+0x64>
 801433a:	462a      	mov	r2, r5
 801433c:	4649      	mov	r1, r9
 801433e:	4620      	mov	r0, r4
 8014340:	f7ff ffa8 	bl	8014294 <L_shift>
 8014344:	4544      	cmp	r4, r8
 8014346:	d944      	bls.n	80143d2 <__hexnan+0xf2>
 8014348:	2300      	movs	r3, #0
 801434a:	f1a4 0904 	sub.w	r9, r4, #4
 801434e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014352:	461d      	mov	r5, r3
 8014354:	464c      	mov	r4, r9
 8014356:	f8cd b008 	str.w	fp, [sp, #8]
 801435a:	9903      	ldr	r1, [sp, #12]
 801435c:	e7d7      	b.n	801430e <__hexnan+0x2e>
 801435e:	2a29      	cmp	r2, #41	; 0x29
 8014360:	d14a      	bne.n	80143f8 <__hexnan+0x118>
 8014362:	3102      	adds	r1, #2
 8014364:	f8ca 1000 	str.w	r1, [sl]
 8014368:	f1bb 0f00 	cmp.w	fp, #0
 801436c:	d044      	beq.n	80143f8 <__hexnan+0x118>
 801436e:	454c      	cmp	r4, r9
 8014370:	d206      	bcs.n	8014380 <__hexnan+0xa0>
 8014372:	2d07      	cmp	r5, #7
 8014374:	dc04      	bgt.n	8014380 <__hexnan+0xa0>
 8014376:	462a      	mov	r2, r5
 8014378:	4649      	mov	r1, r9
 801437a:	4620      	mov	r0, r4
 801437c:	f7ff ff8a 	bl	8014294 <L_shift>
 8014380:	4544      	cmp	r4, r8
 8014382:	d928      	bls.n	80143d6 <__hexnan+0xf6>
 8014384:	4643      	mov	r3, r8
 8014386:	f854 2b04 	ldr.w	r2, [r4], #4
 801438a:	42a6      	cmp	r6, r4
 801438c:	f843 2b04 	str.w	r2, [r3], #4
 8014390:	d2f9      	bcs.n	8014386 <__hexnan+0xa6>
 8014392:	2200      	movs	r2, #0
 8014394:	f843 2b04 	str.w	r2, [r3], #4
 8014398:	429e      	cmp	r6, r3
 801439a:	d2fb      	bcs.n	8014394 <__hexnan+0xb4>
 801439c:	6833      	ldr	r3, [r6, #0]
 801439e:	b91b      	cbnz	r3, 80143a8 <__hexnan+0xc8>
 80143a0:	4546      	cmp	r6, r8
 80143a2:	d127      	bne.n	80143f4 <__hexnan+0x114>
 80143a4:	2301      	movs	r3, #1
 80143a6:	6033      	str	r3, [r6, #0]
 80143a8:	2005      	movs	r0, #5
 80143aa:	e026      	b.n	80143fa <__hexnan+0x11a>
 80143ac:	3501      	adds	r5, #1
 80143ae:	2d08      	cmp	r5, #8
 80143b0:	f10b 0b01 	add.w	fp, fp, #1
 80143b4:	dd06      	ble.n	80143c4 <__hexnan+0xe4>
 80143b6:	4544      	cmp	r4, r8
 80143b8:	d9cf      	bls.n	801435a <__hexnan+0x7a>
 80143ba:	2300      	movs	r3, #0
 80143bc:	2501      	movs	r5, #1
 80143be:	f844 3c04 	str.w	r3, [r4, #-4]
 80143c2:	3c04      	subs	r4, #4
 80143c4:	6822      	ldr	r2, [r4, #0]
 80143c6:	f000 000f 	and.w	r0, r0, #15
 80143ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80143ce:	6020      	str	r0, [r4, #0]
 80143d0:	e7c3      	b.n	801435a <__hexnan+0x7a>
 80143d2:	2508      	movs	r5, #8
 80143d4:	e7c1      	b.n	801435a <__hexnan+0x7a>
 80143d6:	9b01      	ldr	r3, [sp, #4]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d0df      	beq.n	801439c <__hexnan+0xbc>
 80143dc:	f04f 32ff 	mov.w	r2, #4294967295
 80143e0:	f1c3 0320 	rsb	r3, r3, #32
 80143e4:	fa22 f303 	lsr.w	r3, r2, r3
 80143e8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80143ec:	401a      	ands	r2, r3
 80143ee:	f847 2c04 	str.w	r2, [r7, #-4]
 80143f2:	e7d3      	b.n	801439c <__hexnan+0xbc>
 80143f4:	3e04      	subs	r6, #4
 80143f6:	e7d1      	b.n	801439c <__hexnan+0xbc>
 80143f8:	2004      	movs	r0, #4
 80143fa:	b007      	add	sp, #28
 80143fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014400 <__locale_ctype_ptr_l>:
 8014400:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8014404:	4770      	bx	lr

08014406 <__localeconv_l>:
 8014406:	30f0      	adds	r0, #240	; 0xf0
 8014408:	4770      	bx	lr
	...

0801440c <_localeconv_r>:
 801440c:	4b04      	ldr	r3, [pc, #16]	; (8014420 <_localeconv_r+0x14>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	6a18      	ldr	r0, [r3, #32]
 8014412:	4b04      	ldr	r3, [pc, #16]	; (8014424 <_localeconv_r+0x18>)
 8014414:	2800      	cmp	r0, #0
 8014416:	bf08      	it	eq
 8014418:	4618      	moveq	r0, r3
 801441a:	30f0      	adds	r0, #240	; 0xf0
 801441c:	4770      	bx	lr
 801441e:	bf00      	nop
 8014420:	200000a8 	.word	0x200000a8
 8014424:	2000010c 	.word	0x2000010c

08014428 <__ascii_mbtowc>:
 8014428:	b082      	sub	sp, #8
 801442a:	b901      	cbnz	r1, 801442e <__ascii_mbtowc+0x6>
 801442c:	a901      	add	r1, sp, #4
 801442e:	b142      	cbz	r2, 8014442 <__ascii_mbtowc+0x1a>
 8014430:	b14b      	cbz	r3, 8014446 <__ascii_mbtowc+0x1e>
 8014432:	7813      	ldrb	r3, [r2, #0]
 8014434:	600b      	str	r3, [r1, #0]
 8014436:	7812      	ldrb	r2, [r2, #0]
 8014438:	1c10      	adds	r0, r2, #0
 801443a:	bf18      	it	ne
 801443c:	2001      	movne	r0, #1
 801443e:	b002      	add	sp, #8
 8014440:	4770      	bx	lr
 8014442:	4610      	mov	r0, r2
 8014444:	e7fb      	b.n	801443e <__ascii_mbtowc+0x16>
 8014446:	f06f 0001 	mvn.w	r0, #1
 801444a:	e7f8      	b.n	801443e <__ascii_mbtowc+0x16>

0801444c <__malloc_lock>:
 801444c:	4770      	bx	lr

0801444e <__malloc_unlock>:
 801444e:	4770      	bx	lr

08014450 <_Balloc>:
 8014450:	b570      	push	{r4, r5, r6, lr}
 8014452:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014454:	4604      	mov	r4, r0
 8014456:	460e      	mov	r6, r1
 8014458:	b93d      	cbnz	r5, 801446a <_Balloc+0x1a>
 801445a:	2010      	movs	r0, #16
 801445c:	f7fc fefe 	bl	801125c <malloc>
 8014460:	6260      	str	r0, [r4, #36]	; 0x24
 8014462:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014466:	6005      	str	r5, [r0, #0]
 8014468:	60c5      	str	r5, [r0, #12]
 801446a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801446c:	68eb      	ldr	r3, [r5, #12]
 801446e:	b183      	cbz	r3, 8014492 <_Balloc+0x42>
 8014470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014472:	68db      	ldr	r3, [r3, #12]
 8014474:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014478:	b9b8      	cbnz	r0, 80144aa <_Balloc+0x5a>
 801447a:	2101      	movs	r1, #1
 801447c:	fa01 f506 	lsl.w	r5, r1, r6
 8014480:	1d6a      	adds	r2, r5, #5
 8014482:	0092      	lsls	r2, r2, #2
 8014484:	4620      	mov	r0, r4
 8014486:	f000 fbdb 	bl	8014c40 <_calloc_r>
 801448a:	b160      	cbz	r0, 80144a6 <_Balloc+0x56>
 801448c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014490:	e00e      	b.n	80144b0 <_Balloc+0x60>
 8014492:	2221      	movs	r2, #33	; 0x21
 8014494:	2104      	movs	r1, #4
 8014496:	4620      	mov	r0, r4
 8014498:	f000 fbd2 	bl	8014c40 <_calloc_r>
 801449c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801449e:	60e8      	str	r0, [r5, #12]
 80144a0:	68db      	ldr	r3, [r3, #12]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d1e4      	bne.n	8014470 <_Balloc+0x20>
 80144a6:	2000      	movs	r0, #0
 80144a8:	bd70      	pop	{r4, r5, r6, pc}
 80144aa:	6802      	ldr	r2, [r0, #0]
 80144ac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80144b0:	2300      	movs	r3, #0
 80144b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80144b6:	e7f7      	b.n	80144a8 <_Balloc+0x58>

080144b8 <_Bfree>:
 80144b8:	b570      	push	{r4, r5, r6, lr}
 80144ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80144bc:	4606      	mov	r6, r0
 80144be:	460d      	mov	r5, r1
 80144c0:	b93c      	cbnz	r4, 80144d2 <_Bfree+0x1a>
 80144c2:	2010      	movs	r0, #16
 80144c4:	f7fc feca 	bl	801125c <malloc>
 80144c8:	6270      	str	r0, [r6, #36]	; 0x24
 80144ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80144ce:	6004      	str	r4, [r0, #0]
 80144d0:	60c4      	str	r4, [r0, #12]
 80144d2:	b13d      	cbz	r5, 80144e4 <_Bfree+0x2c>
 80144d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80144d6:	686a      	ldr	r2, [r5, #4]
 80144d8:	68db      	ldr	r3, [r3, #12]
 80144da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80144de:	6029      	str	r1, [r5, #0]
 80144e0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80144e4:	bd70      	pop	{r4, r5, r6, pc}

080144e6 <__multadd>:
 80144e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144ea:	461f      	mov	r7, r3
 80144ec:	4606      	mov	r6, r0
 80144ee:	460c      	mov	r4, r1
 80144f0:	2300      	movs	r3, #0
 80144f2:	690d      	ldr	r5, [r1, #16]
 80144f4:	f101 0c14 	add.w	ip, r1, #20
 80144f8:	f8dc 0000 	ldr.w	r0, [ip]
 80144fc:	3301      	adds	r3, #1
 80144fe:	b281      	uxth	r1, r0
 8014500:	fb02 7101 	mla	r1, r2, r1, r7
 8014504:	0c00      	lsrs	r0, r0, #16
 8014506:	0c0f      	lsrs	r7, r1, #16
 8014508:	fb02 7000 	mla	r0, r2, r0, r7
 801450c:	b289      	uxth	r1, r1
 801450e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014512:	429d      	cmp	r5, r3
 8014514:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014518:	f84c 1b04 	str.w	r1, [ip], #4
 801451c:	dcec      	bgt.n	80144f8 <__multadd+0x12>
 801451e:	b1d7      	cbz	r7, 8014556 <__multadd+0x70>
 8014520:	68a3      	ldr	r3, [r4, #8]
 8014522:	42ab      	cmp	r3, r5
 8014524:	dc12      	bgt.n	801454c <__multadd+0x66>
 8014526:	6861      	ldr	r1, [r4, #4]
 8014528:	4630      	mov	r0, r6
 801452a:	3101      	adds	r1, #1
 801452c:	f7ff ff90 	bl	8014450 <_Balloc>
 8014530:	4680      	mov	r8, r0
 8014532:	6922      	ldr	r2, [r4, #16]
 8014534:	f104 010c 	add.w	r1, r4, #12
 8014538:	3202      	adds	r2, #2
 801453a:	0092      	lsls	r2, r2, #2
 801453c:	300c      	adds	r0, #12
 801453e:	f7fc feba 	bl	80112b6 <memcpy>
 8014542:	4621      	mov	r1, r4
 8014544:	4630      	mov	r0, r6
 8014546:	f7ff ffb7 	bl	80144b8 <_Bfree>
 801454a:	4644      	mov	r4, r8
 801454c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014550:	3501      	adds	r5, #1
 8014552:	615f      	str	r7, [r3, #20]
 8014554:	6125      	str	r5, [r4, #16]
 8014556:	4620      	mov	r0, r4
 8014558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801455c <__s2b>:
 801455c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014560:	4615      	mov	r5, r2
 8014562:	2209      	movs	r2, #9
 8014564:	461f      	mov	r7, r3
 8014566:	3308      	adds	r3, #8
 8014568:	460c      	mov	r4, r1
 801456a:	fb93 f3f2 	sdiv	r3, r3, r2
 801456e:	4606      	mov	r6, r0
 8014570:	2201      	movs	r2, #1
 8014572:	2100      	movs	r1, #0
 8014574:	429a      	cmp	r2, r3
 8014576:	db20      	blt.n	80145ba <__s2b+0x5e>
 8014578:	4630      	mov	r0, r6
 801457a:	f7ff ff69 	bl	8014450 <_Balloc>
 801457e:	9b08      	ldr	r3, [sp, #32]
 8014580:	2d09      	cmp	r5, #9
 8014582:	6143      	str	r3, [r0, #20]
 8014584:	f04f 0301 	mov.w	r3, #1
 8014588:	6103      	str	r3, [r0, #16]
 801458a:	dd19      	ble.n	80145c0 <__s2b+0x64>
 801458c:	f104 0809 	add.w	r8, r4, #9
 8014590:	46c1      	mov	r9, r8
 8014592:	442c      	add	r4, r5
 8014594:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014598:	4601      	mov	r1, r0
 801459a:	3b30      	subs	r3, #48	; 0x30
 801459c:	220a      	movs	r2, #10
 801459e:	4630      	mov	r0, r6
 80145a0:	f7ff ffa1 	bl	80144e6 <__multadd>
 80145a4:	45a1      	cmp	r9, r4
 80145a6:	d1f5      	bne.n	8014594 <__s2b+0x38>
 80145a8:	eb08 0405 	add.w	r4, r8, r5
 80145ac:	3c08      	subs	r4, #8
 80145ae:	1b2d      	subs	r5, r5, r4
 80145b0:	1963      	adds	r3, r4, r5
 80145b2:	42bb      	cmp	r3, r7
 80145b4:	db07      	blt.n	80145c6 <__s2b+0x6a>
 80145b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145ba:	0052      	lsls	r2, r2, #1
 80145bc:	3101      	adds	r1, #1
 80145be:	e7d9      	b.n	8014574 <__s2b+0x18>
 80145c0:	340a      	adds	r4, #10
 80145c2:	2509      	movs	r5, #9
 80145c4:	e7f3      	b.n	80145ae <__s2b+0x52>
 80145c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80145ca:	4601      	mov	r1, r0
 80145cc:	3b30      	subs	r3, #48	; 0x30
 80145ce:	220a      	movs	r2, #10
 80145d0:	4630      	mov	r0, r6
 80145d2:	f7ff ff88 	bl	80144e6 <__multadd>
 80145d6:	e7eb      	b.n	80145b0 <__s2b+0x54>

080145d8 <__hi0bits>:
 80145d8:	0c02      	lsrs	r2, r0, #16
 80145da:	0412      	lsls	r2, r2, #16
 80145dc:	4603      	mov	r3, r0
 80145de:	b9b2      	cbnz	r2, 801460e <__hi0bits+0x36>
 80145e0:	0403      	lsls	r3, r0, #16
 80145e2:	2010      	movs	r0, #16
 80145e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80145e8:	bf04      	itt	eq
 80145ea:	021b      	lsleq	r3, r3, #8
 80145ec:	3008      	addeq	r0, #8
 80145ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80145f2:	bf04      	itt	eq
 80145f4:	011b      	lsleq	r3, r3, #4
 80145f6:	3004      	addeq	r0, #4
 80145f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80145fc:	bf04      	itt	eq
 80145fe:	009b      	lsleq	r3, r3, #2
 8014600:	3002      	addeq	r0, #2
 8014602:	2b00      	cmp	r3, #0
 8014604:	db06      	blt.n	8014614 <__hi0bits+0x3c>
 8014606:	005b      	lsls	r3, r3, #1
 8014608:	d503      	bpl.n	8014612 <__hi0bits+0x3a>
 801460a:	3001      	adds	r0, #1
 801460c:	4770      	bx	lr
 801460e:	2000      	movs	r0, #0
 8014610:	e7e8      	b.n	80145e4 <__hi0bits+0xc>
 8014612:	2020      	movs	r0, #32
 8014614:	4770      	bx	lr

08014616 <__lo0bits>:
 8014616:	6803      	ldr	r3, [r0, #0]
 8014618:	4601      	mov	r1, r0
 801461a:	f013 0207 	ands.w	r2, r3, #7
 801461e:	d00b      	beq.n	8014638 <__lo0bits+0x22>
 8014620:	07da      	lsls	r2, r3, #31
 8014622:	d423      	bmi.n	801466c <__lo0bits+0x56>
 8014624:	0798      	lsls	r0, r3, #30
 8014626:	bf49      	itett	mi
 8014628:	085b      	lsrmi	r3, r3, #1
 801462a:	089b      	lsrpl	r3, r3, #2
 801462c:	2001      	movmi	r0, #1
 801462e:	600b      	strmi	r3, [r1, #0]
 8014630:	bf5c      	itt	pl
 8014632:	600b      	strpl	r3, [r1, #0]
 8014634:	2002      	movpl	r0, #2
 8014636:	4770      	bx	lr
 8014638:	b298      	uxth	r0, r3
 801463a:	b9a8      	cbnz	r0, 8014668 <__lo0bits+0x52>
 801463c:	2010      	movs	r0, #16
 801463e:	0c1b      	lsrs	r3, r3, #16
 8014640:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014644:	bf04      	itt	eq
 8014646:	0a1b      	lsreq	r3, r3, #8
 8014648:	3008      	addeq	r0, #8
 801464a:	071a      	lsls	r2, r3, #28
 801464c:	bf04      	itt	eq
 801464e:	091b      	lsreq	r3, r3, #4
 8014650:	3004      	addeq	r0, #4
 8014652:	079a      	lsls	r2, r3, #30
 8014654:	bf04      	itt	eq
 8014656:	089b      	lsreq	r3, r3, #2
 8014658:	3002      	addeq	r0, #2
 801465a:	07da      	lsls	r2, r3, #31
 801465c:	d402      	bmi.n	8014664 <__lo0bits+0x4e>
 801465e:	085b      	lsrs	r3, r3, #1
 8014660:	d006      	beq.n	8014670 <__lo0bits+0x5a>
 8014662:	3001      	adds	r0, #1
 8014664:	600b      	str	r3, [r1, #0]
 8014666:	4770      	bx	lr
 8014668:	4610      	mov	r0, r2
 801466a:	e7e9      	b.n	8014640 <__lo0bits+0x2a>
 801466c:	2000      	movs	r0, #0
 801466e:	4770      	bx	lr
 8014670:	2020      	movs	r0, #32
 8014672:	4770      	bx	lr

08014674 <__i2b>:
 8014674:	b510      	push	{r4, lr}
 8014676:	460c      	mov	r4, r1
 8014678:	2101      	movs	r1, #1
 801467a:	f7ff fee9 	bl	8014450 <_Balloc>
 801467e:	2201      	movs	r2, #1
 8014680:	6144      	str	r4, [r0, #20]
 8014682:	6102      	str	r2, [r0, #16]
 8014684:	bd10      	pop	{r4, pc}

08014686 <__multiply>:
 8014686:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801468a:	4614      	mov	r4, r2
 801468c:	690a      	ldr	r2, [r1, #16]
 801468e:	6923      	ldr	r3, [r4, #16]
 8014690:	4688      	mov	r8, r1
 8014692:	429a      	cmp	r2, r3
 8014694:	bfbe      	ittt	lt
 8014696:	460b      	movlt	r3, r1
 8014698:	46a0      	movlt	r8, r4
 801469a:	461c      	movlt	r4, r3
 801469c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80146a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80146a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80146a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80146ac:	eb07 0609 	add.w	r6, r7, r9
 80146b0:	42b3      	cmp	r3, r6
 80146b2:	bfb8      	it	lt
 80146b4:	3101      	addlt	r1, #1
 80146b6:	f7ff fecb 	bl	8014450 <_Balloc>
 80146ba:	f100 0514 	add.w	r5, r0, #20
 80146be:	462b      	mov	r3, r5
 80146c0:	2200      	movs	r2, #0
 80146c2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80146c6:	4573      	cmp	r3, lr
 80146c8:	d316      	bcc.n	80146f8 <__multiply+0x72>
 80146ca:	f104 0214 	add.w	r2, r4, #20
 80146ce:	f108 0114 	add.w	r1, r8, #20
 80146d2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80146d6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80146da:	9300      	str	r3, [sp, #0]
 80146dc:	9b00      	ldr	r3, [sp, #0]
 80146de:	9201      	str	r2, [sp, #4]
 80146e0:	4293      	cmp	r3, r2
 80146e2:	d80c      	bhi.n	80146fe <__multiply+0x78>
 80146e4:	2e00      	cmp	r6, #0
 80146e6:	dd03      	ble.n	80146f0 <__multiply+0x6a>
 80146e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d05d      	beq.n	80147ac <__multiply+0x126>
 80146f0:	6106      	str	r6, [r0, #16]
 80146f2:	b003      	add	sp, #12
 80146f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146f8:	f843 2b04 	str.w	r2, [r3], #4
 80146fc:	e7e3      	b.n	80146c6 <__multiply+0x40>
 80146fe:	f8b2 b000 	ldrh.w	fp, [r2]
 8014702:	f1bb 0f00 	cmp.w	fp, #0
 8014706:	d023      	beq.n	8014750 <__multiply+0xca>
 8014708:	4689      	mov	r9, r1
 801470a:	46ac      	mov	ip, r5
 801470c:	f04f 0800 	mov.w	r8, #0
 8014710:	f859 4b04 	ldr.w	r4, [r9], #4
 8014714:	f8dc a000 	ldr.w	sl, [ip]
 8014718:	b2a3      	uxth	r3, r4
 801471a:	fa1f fa8a 	uxth.w	sl, sl
 801471e:	fb0b a303 	mla	r3, fp, r3, sl
 8014722:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014726:	f8dc 4000 	ldr.w	r4, [ip]
 801472a:	4443      	add	r3, r8
 801472c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014730:	fb0b 840a 	mla	r4, fp, sl, r8
 8014734:	46e2      	mov	sl, ip
 8014736:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801473a:	b29b      	uxth	r3, r3
 801473c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014740:	454f      	cmp	r7, r9
 8014742:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014746:	f84a 3b04 	str.w	r3, [sl], #4
 801474a:	d82b      	bhi.n	80147a4 <__multiply+0x11e>
 801474c:	f8cc 8004 	str.w	r8, [ip, #4]
 8014750:	9b01      	ldr	r3, [sp, #4]
 8014752:	3204      	adds	r2, #4
 8014754:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014758:	f1ba 0f00 	cmp.w	sl, #0
 801475c:	d020      	beq.n	80147a0 <__multiply+0x11a>
 801475e:	4689      	mov	r9, r1
 8014760:	46a8      	mov	r8, r5
 8014762:	f04f 0b00 	mov.w	fp, #0
 8014766:	682b      	ldr	r3, [r5, #0]
 8014768:	f8b9 c000 	ldrh.w	ip, [r9]
 801476c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014770:	b29b      	uxth	r3, r3
 8014772:	fb0a 440c 	mla	r4, sl, ip, r4
 8014776:	46c4      	mov	ip, r8
 8014778:	445c      	add	r4, fp
 801477a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801477e:	f84c 3b04 	str.w	r3, [ip], #4
 8014782:	f859 3b04 	ldr.w	r3, [r9], #4
 8014786:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801478a:	0c1b      	lsrs	r3, r3, #16
 801478c:	fb0a b303 	mla	r3, sl, r3, fp
 8014790:	454f      	cmp	r7, r9
 8014792:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014796:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801479a:	d805      	bhi.n	80147a8 <__multiply+0x122>
 801479c:	f8c8 3004 	str.w	r3, [r8, #4]
 80147a0:	3504      	adds	r5, #4
 80147a2:	e79b      	b.n	80146dc <__multiply+0x56>
 80147a4:	46d4      	mov	ip, sl
 80147a6:	e7b3      	b.n	8014710 <__multiply+0x8a>
 80147a8:	46e0      	mov	r8, ip
 80147aa:	e7dd      	b.n	8014768 <__multiply+0xe2>
 80147ac:	3e01      	subs	r6, #1
 80147ae:	e799      	b.n	80146e4 <__multiply+0x5e>

080147b0 <__pow5mult>:
 80147b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147b4:	4615      	mov	r5, r2
 80147b6:	f012 0203 	ands.w	r2, r2, #3
 80147ba:	4606      	mov	r6, r0
 80147bc:	460f      	mov	r7, r1
 80147be:	d007      	beq.n	80147d0 <__pow5mult+0x20>
 80147c0:	4c21      	ldr	r4, [pc, #132]	; (8014848 <__pow5mult+0x98>)
 80147c2:	3a01      	subs	r2, #1
 80147c4:	2300      	movs	r3, #0
 80147c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80147ca:	f7ff fe8c 	bl	80144e6 <__multadd>
 80147ce:	4607      	mov	r7, r0
 80147d0:	10ad      	asrs	r5, r5, #2
 80147d2:	d035      	beq.n	8014840 <__pow5mult+0x90>
 80147d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80147d6:	b93c      	cbnz	r4, 80147e8 <__pow5mult+0x38>
 80147d8:	2010      	movs	r0, #16
 80147da:	f7fc fd3f 	bl	801125c <malloc>
 80147de:	6270      	str	r0, [r6, #36]	; 0x24
 80147e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80147e4:	6004      	str	r4, [r0, #0]
 80147e6:	60c4      	str	r4, [r0, #12]
 80147e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80147ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80147f0:	b94c      	cbnz	r4, 8014806 <__pow5mult+0x56>
 80147f2:	f240 2171 	movw	r1, #625	; 0x271
 80147f6:	4630      	mov	r0, r6
 80147f8:	f7ff ff3c 	bl	8014674 <__i2b>
 80147fc:	2300      	movs	r3, #0
 80147fe:	4604      	mov	r4, r0
 8014800:	f8c8 0008 	str.w	r0, [r8, #8]
 8014804:	6003      	str	r3, [r0, #0]
 8014806:	f04f 0800 	mov.w	r8, #0
 801480a:	07eb      	lsls	r3, r5, #31
 801480c:	d50a      	bpl.n	8014824 <__pow5mult+0x74>
 801480e:	4639      	mov	r1, r7
 8014810:	4622      	mov	r2, r4
 8014812:	4630      	mov	r0, r6
 8014814:	f7ff ff37 	bl	8014686 <__multiply>
 8014818:	4681      	mov	r9, r0
 801481a:	4639      	mov	r1, r7
 801481c:	4630      	mov	r0, r6
 801481e:	f7ff fe4b 	bl	80144b8 <_Bfree>
 8014822:	464f      	mov	r7, r9
 8014824:	106d      	asrs	r5, r5, #1
 8014826:	d00b      	beq.n	8014840 <__pow5mult+0x90>
 8014828:	6820      	ldr	r0, [r4, #0]
 801482a:	b938      	cbnz	r0, 801483c <__pow5mult+0x8c>
 801482c:	4622      	mov	r2, r4
 801482e:	4621      	mov	r1, r4
 8014830:	4630      	mov	r0, r6
 8014832:	f7ff ff28 	bl	8014686 <__multiply>
 8014836:	6020      	str	r0, [r4, #0]
 8014838:	f8c0 8000 	str.w	r8, [r0]
 801483c:	4604      	mov	r4, r0
 801483e:	e7e4      	b.n	801480a <__pow5mult+0x5a>
 8014840:	4638      	mov	r0, r7
 8014842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014846:	bf00      	nop
 8014848:	080185a8 	.word	0x080185a8

0801484c <__lshift>:
 801484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014850:	460c      	mov	r4, r1
 8014852:	4607      	mov	r7, r0
 8014854:	4616      	mov	r6, r2
 8014856:	6923      	ldr	r3, [r4, #16]
 8014858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801485c:	eb0a 0903 	add.w	r9, sl, r3
 8014860:	6849      	ldr	r1, [r1, #4]
 8014862:	68a3      	ldr	r3, [r4, #8]
 8014864:	f109 0501 	add.w	r5, r9, #1
 8014868:	42ab      	cmp	r3, r5
 801486a:	db32      	blt.n	80148d2 <__lshift+0x86>
 801486c:	4638      	mov	r0, r7
 801486e:	f7ff fdef 	bl	8014450 <_Balloc>
 8014872:	2300      	movs	r3, #0
 8014874:	4680      	mov	r8, r0
 8014876:	461a      	mov	r2, r3
 8014878:	f100 0114 	add.w	r1, r0, #20
 801487c:	4553      	cmp	r3, sl
 801487e:	db2b      	blt.n	80148d8 <__lshift+0x8c>
 8014880:	6920      	ldr	r0, [r4, #16]
 8014882:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014886:	f104 0314 	add.w	r3, r4, #20
 801488a:	f016 021f 	ands.w	r2, r6, #31
 801488e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014892:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014896:	d025      	beq.n	80148e4 <__lshift+0x98>
 8014898:	2000      	movs	r0, #0
 801489a:	f1c2 0e20 	rsb	lr, r2, #32
 801489e:	468a      	mov	sl, r1
 80148a0:	681e      	ldr	r6, [r3, #0]
 80148a2:	4096      	lsls	r6, r2
 80148a4:	4330      	orrs	r0, r6
 80148a6:	f84a 0b04 	str.w	r0, [sl], #4
 80148aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80148ae:	459c      	cmp	ip, r3
 80148b0:	fa20 f00e 	lsr.w	r0, r0, lr
 80148b4:	d814      	bhi.n	80148e0 <__lshift+0x94>
 80148b6:	6048      	str	r0, [r1, #4]
 80148b8:	b108      	cbz	r0, 80148be <__lshift+0x72>
 80148ba:	f109 0502 	add.w	r5, r9, #2
 80148be:	3d01      	subs	r5, #1
 80148c0:	4638      	mov	r0, r7
 80148c2:	f8c8 5010 	str.w	r5, [r8, #16]
 80148c6:	4621      	mov	r1, r4
 80148c8:	f7ff fdf6 	bl	80144b8 <_Bfree>
 80148cc:	4640      	mov	r0, r8
 80148ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148d2:	3101      	adds	r1, #1
 80148d4:	005b      	lsls	r3, r3, #1
 80148d6:	e7c7      	b.n	8014868 <__lshift+0x1c>
 80148d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80148dc:	3301      	adds	r3, #1
 80148de:	e7cd      	b.n	801487c <__lshift+0x30>
 80148e0:	4651      	mov	r1, sl
 80148e2:	e7dc      	b.n	801489e <__lshift+0x52>
 80148e4:	3904      	subs	r1, #4
 80148e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80148ea:	459c      	cmp	ip, r3
 80148ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80148f0:	d8f9      	bhi.n	80148e6 <__lshift+0x9a>
 80148f2:	e7e4      	b.n	80148be <__lshift+0x72>

080148f4 <__mcmp>:
 80148f4:	6903      	ldr	r3, [r0, #16]
 80148f6:	690a      	ldr	r2, [r1, #16]
 80148f8:	b530      	push	{r4, r5, lr}
 80148fa:	1a9b      	subs	r3, r3, r2
 80148fc:	d10c      	bne.n	8014918 <__mcmp+0x24>
 80148fe:	0092      	lsls	r2, r2, #2
 8014900:	3014      	adds	r0, #20
 8014902:	3114      	adds	r1, #20
 8014904:	1884      	adds	r4, r0, r2
 8014906:	4411      	add	r1, r2
 8014908:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801490c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014910:	4295      	cmp	r5, r2
 8014912:	d003      	beq.n	801491c <__mcmp+0x28>
 8014914:	d305      	bcc.n	8014922 <__mcmp+0x2e>
 8014916:	2301      	movs	r3, #1
 8014918:	4618      	mov	r0, r3
 801491a:	bd30      	pop	{r4, r5, pc}
 801491c:	42a0      	cmp	r0, r4
 801491e:	d3f3      	bcc.n	8014908 <__mcmp+0x14>
 8014920:	e7fa      	b.n	8014918 <__mcmp+0x24>
 8014922:	f04f 33ff 	mov.w	r3, #4294967295
 8014926:	e7f7      	b.n	8014918 <__mcmp+0x24>

08014928 <__mdiff>:
 8014928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801492c:	460d      	mov	r5, r1
 801492e:	4607      	mov	r7, r0
 8014930:	4611      	mov	r1, r2
 8014932:	4628      	mov	r0, r5
 8014934:	4614      	mov	r4, r2
 8014936:	f7ff ffdd 	bl	80148f4 <__mcmp>
 801493a:	1e06      	subs	r6, r0, #0
 801493c:	d108      	bne.n	8014950 <__mdiff+0x28>
 801493e:	4631      	mov	r1, r6
 8014940:	4638      	mov	r0, r7
 8014942:	f7ff fd85 	bl	8014450 <_Balloc>
 8014946:	2301      	movs	r3, #1
 8014948:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801494c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014950:	bfa4      	itt	ge
 8014952:	4623      	movge	r3, r4
 8014954:	462c      	movge	r4, r5
 8014956:	4638      	mov	r0, r7
 8014958:	6861      	ldr	r1, [r4, #4]
 801495a:	bfa6      	itte	ge
 801495c:	461d      	movge	r5, r3
 801495e:	2600      	movge	r6, #0
 8014960:	2601      	movlt	r6, #1
 8014962:	f7ff fd75 	bl	8014450 <_Balloc>
 8014966:	f04f 0e00 	mov.w	lr, #0
 801496a:	60c6      	str	r6, [r0, #12]
 801496c:	692b      	ldr	r3, [r5, #16]
 801496e:	6926      	ldr	r6, [r4, #16]
 8014970:	f104 0214 	add.w	r2, r4, #20
 8014974:	f105 0914 	add.w	r9, r5, #20
 8014978:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801497c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014980:	f100 0114 	add.w	r1, r0, #20
 8014984:	f852 ab04 	ldr.w	sl, [r2], #4
 8014988:	f859 5b04 	ldr.w	r5, [r9], #4
 801498c:	fa1f f38a 	uxth.w	r3, sl
 8014990:	4473      	add	r3, lr
 8014992:	b2ac      	uxth	r4, r5
 8014994:	1b1b      	subs	r3, r3, r4
 8014996:	0c2c      	lsrs	r4, r5, #16
 8014998:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 801499c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80149a6:	45c8      	cmp	r8, r9
 80149a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80149ac:	4694      	mov	ip, r2
 80149ae:	f841 4b04 	str.w	r4, [r1], #4
 80149b2:	d8e7      	bhi.n	8014984 <__mdiff+0x5c>
 80149b4:	45bc      	cmp	ip, r7
 80149b6:	d304      	bcc.n	80149c2 <__mdiff+0x9a>
 80149b8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80149bc:	b183      	cbz	r3, 80149e0 <__mdiff+0xb8>
 80149be:	6106      	str	r6, [r0, #16]
 80149c0:	e7c4      	b.n	801494c <__mdiff+0x24>
 80149c2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80149c6:	b2a2      	uxth	r2, r4
 80149c8:	4472      	add	r2, lr
 80149ca:	1413      	asrs	r3, r2, #16
 80149cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80149d0:	b292      	uxth	r2, r2
 80149d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80149d6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80149da:	f841 2b04 	str.w	r2, [r1], #4
 80149de:	e7e9      	b.n	80149b4 <__mdiff+0x8c>
 80149e0:	3e01      	subs	r6, #1
 80149e2:	e7e9      	b.n	80149b8 <__mdiff+0x90>

080149e4 <__ulp>:
 80149e4:	4b10      	ldr	r3, [pc, #64]	; (8014a28 <__ulp+0x44>)
 80149e6:	400b      	ands	r3, r1
 80149e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	dd02      	ble.n	80149f6 <__ulp+0x12>
 80149f0:	2000      	movs	r0, #0
 80149f2:	4619      	mov	r1, r3
 80149f4:	4770      	bx	lr
 80149f6:	425b      	negs	r3, r3
 80149f8:	151b      	asrs	r3, r3, #20
 80149fa:	2b13      	cmp	r3, #19
 80149fc:	f04f 0000 	mov.w	r0, #0
 8014a00:	f04f 0100 	mov.w	r1, #0
 8014a04:	dc04      	bgt.n	8014a10 <__ulp+0x2c>
 8014a06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014a0a:	fa42 f103 	asr.w	r1, r2, r3
 8014a0e:	4770      	bx	lr
 8014a10:	2201      	movs	r2, #1
 8014a12:	3b14      	subs	r3, #20
 8014a14:	2b1e      	cmp	r3, #30
 8014a16:	bfce      	itee	gt
 8014a18:	4613      	movgt	r3, r2
 8014a1a:	f1c3 031f 	rsble	r3, r3, #31
 8014a1e:	fa02 f303 	lslle.w	r3, r2, r3
 8014a22:	4618      	mov	r0, r3
 8014a24:	4770      	bx	lr
 8014a26:	bf00      	nop
 8014a28:	7ff00000 	.word	0x7ff00000

08014a2c <__b2d>:
 8014a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a30:	6907      	ldr	r7, [r0, #16]
 8014a32:	f100 0914 	add.w	r9, r0, #20
 8014a36:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8014a3a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8014a3e:	f1a7 0804 	sub.w	r8, r7, #4
 8014a42:	4630      	mov	r0, r6
 8014a44:	f7ff fdc8 	bl	80145d8 <__hi0bits>
 8014a48:	f1c0 0320 	rsb	r3, r0, #32
 8014a4c:	280a      	cmp	r0, #10
 8014a4e:	600b      	str	r3, [r1, #0]
 8014a50:	491e      	ldr	r1, [pc, #120]	; (8014acc <__b2d+0xa0>)
 8014a52:	dc17      	bgt.n	8014a84 <__b2d+0x58>
 8014a54:	45c1      	cmp	r9, r8
 8014a56:	bf28      	it	cs
 8014a58:	2200      	movcs	r2, #0
 8014a5a:	f1c0 0c0b 	rsb	ip, r0, #11
 8014a5e:	fa26 f30c 	lsr.w	r3, r6, ip
 8014a62:	bf38      	it	cc
 8014a64:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8014a68:	ea43 0501 	orr.w	r5, r3, r1
 8014a6c:	f100 0315 	add.w	r3, r0, #21
 8014a70:	fa06 f303 	lsl.w	r3, r6, r3
 8014a74:	fa22 f20c 	lsr.w	r2, r2, ip
 8014a78:	ea43 0402 	orr.w	r4, r3, r2
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	4629      	mov	r1, r5
 8014a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a84:	45c1      	cmp	r9, r8
 8014a86:	bf3a      	itte	cc
 8014a88:	f1a7 0808 	subcc.w	r8, r7, #8
 8014a8c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8014a90:	2200      	movcs	r2, #0
 8014a92:	f1b0 030b 	subs.w	r3, r0, #11
 8014a96:	d015      	beq.n	8014ac4 <__b2d+0x98>
 8014a98:	409e      	lsls	r6, r3
 8014a9a:	f1c3 0720 	rsb	r7, r3, #32
 8014a9e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8014aa2:	fa22 f107 	lsr.w	r1, r2, r7
 8014aa6:	45c8      	cmp	r8, r9
 8014aa8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8014aac:	ea46 0501 	orr.w	r5, r6, r1
 8014ab0:	bf94      	ite	ls
 8014ab2:	2100      	movls	r1, #0
 8014ab4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8014ab8:	fa02 f003 	lsl.w	r0, r2, r3
 8014abc:	40f9      	lsrs	r1, r7
 8014abe:	ea40 0401 	orr.w	r4, r0, r1
 8014ac2:	e7db      	b.n	8014a7c <__b2d+0x50>
 8014ac4:	ea46 0501 	orr.w	r5, r6, r1
 8014ac8:	4614      	mov	r4, r2
 8014aca:	e7d7      	b.n	8014a7c <__b2d+0x50>
 8014acc:	3ff00000 	.word	0x3ff00000

08014ad0 <__d2b>:
 8014ad0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014ad4:	461c      	mov	r4, r3
 8014ad6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8014ada:	2101      	movs	r1, #1
 8014adc:	4690      	mov	r8, r2
 8014ade:	f7ff fcb7 	bl	8014450 <_Balloc>
 8014ae2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8014ae6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8014aea:	4607      	mov	r7, r0
 8014aec:	bb34      	cbnz	r4, 8014b3c <__d2b+0x6c>
 8014aee:	9201      	str	r2, [sp, #4]
 8014af0:	f1b8 0200 	subs.w	r2, r8, #0
 8014af4:	d027      	beq.n	8014b46 <__d2b+0x76>
 8014af6:	a802      	add	r0, sp, #8
 8014af8:	f840 2d08 	str.w	r2, [r0, #-8]!
 8014afc:	f7ff fd8b 	bl	8014616 <__lo0bits>
 8014b00:	9900      	ldr	r1, [sp, #0]
 8014b02:	b1f0      	cbz	r0, 8014b42 <__d2b+0x72>
 8014b04:	9a01      	ldr	r2, [sp, #4]
 8014b06:	f1c0 0320 	rsb	r3, r0, #32
 8014b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8014b0e:	430b      	orrs	r3, r1
 8014b10:	40c2      	lsrs	r2, r0
 8014b12:	617b      	str	r3, [r7, #20]
 8014b14:	9201      	str	r2, [sp, #4]
 8014b16:	9b01      	ldr	r3, [sp, #4]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	bf14      	ite	ne
 8014b1c:	2102      	movne	r1, #2
 8014b1e:	2101      	moveq	r1, #1
 8014b20:	61bb      	str	r3, [r7, #24]
 8014b22:	6139      	str	r1, [r7, #16]
 8014b24:	b1c4      	cbz	r4, 8014b58 <__d2b+0x88>
 8014b26:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014b2a:	4404      	add	r4, r0
 8014b2c:	6034      	str	r4, [r6, #0]
 8014b2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014b32:	6028      	str	r0, [r5, #0]
 8014b34:	4638      	mov	r0, r7
 8014b36:	b002      	add	sp, #8
 8014b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b3c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014b40:	e7d5      	b.n	8014aee <__d2b+0x1e>
 8014b42:	6179      	str	r1, [r7, #20]
 8014b44:	e7e7      	b.n	8014b16 <__d2b+0x46>
 8014b46:	a801      	add	r0, sp, #4
 8014b48:	f7ff fd65 	bl	8014616 <__lo0bits>
 8014b4c:	2101      	movs	r1, #1
 8014b4e:	9b01      	ldr	r3, [sp, #4]
 8014b50:	6139      	str	r1, [r7, #16]
 8014b52:	617b      	str	r3, [r7, #20]
 8014b54:	3020      	adds	r0, #32
 8014b56:	e7e5      	b.n	8014b24 <__d2b+0x54>
 8014b58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014b5c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014b60:	6030      	str	r0, [r6, #0]
 8014b62:	6918      	ldr	r0, [r3, #16]
 8014b64:	f7ff fd38 	bl	80145d8 <__hi0bits>
 8014b68:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014b6c:	e7e1      	b.n	8014b32 <__d2b+0x62>

08014b6e <__ratio>:
 8014b6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b72:	4688      	mov	r8, r1
 8014b74:	4669      	mov	r1, sp
 8014b76:	4681      	mov	r9, r0
 8014b78:	f7ff ff58 	bl	8014a2c <__b2d>
 8014b7c:	468b      	mov	fp, r1
 8014b7e:	4606      	mov	r6, r0
 8014b80:	460f      	mov	r7, r1
 8014b82:	4640      	mov	r0, r8
 8014b84:	a901      	add	r1, sp, #4
 8014b86:	f7ff ff51 	bl	8014a2c <__b2d>
 8014b8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014b8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014b92:	460d      	mov	r5, r1
 8014b94:	eba3 0c02 	sub.w	ip, r3, r2
 8014b98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014b9c:	1a9b      	subs	r3, r3, r2
 8014b9e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	bfd5      	itete	le
 8014ba6:	460a      	movle	r2, r1
 8014ba8:	463a      	movgt	r2, r7
 8014baa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014bae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8014bb2:	bfd8      	it	le
 8014bb4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8014bb8:	462b      	mov	r3, r5
 8014bba:	4602      	mov	r2, r0
 8014bbc:	4659      	mov	r1, fp
 8014bbe:	4630      	mov	r0, r6
 8014bc0:	f7eb fdb4 	bl	800072c <__aeabi_ddiv>
 8014bc4:	b003      	add	sp, #12
 8014bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014bca <__copybits>:
 8014bca:	3901      	subs	r1, #1
 8014bcc:	b510      	push	{r4, lr}
 8014bce:	1149      	asrs	r1, r1, #5
 8014bd0:	6914      	ldr	r4, [r2, #16]
 8014bd2:	3101      	adds	r1, #1
 8014bd4:	f102 0314 	add.w	r3, r2, #20
 8014bd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014bdc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014be0:	42a3      	cmp	r3, r4
 8014be2:	4602      	mov	r2, r0
 8014be4:	d303      	bcc.n	8014bee <__copybits+0x24>
 8014be6:	2300      	movs	r3, #0
 8014be8:	428a      	cmp	r2, r1
 8014bea:	d305      	bcc.n	8014bf8 <__copybits+0x2e>
 8014bec:	bd10      	pop	{r4, pc}
 8014bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bf2:	f840 2b04 	str.w	r2, [r0], #4
 8014bf6:	e7f3      	b.n	8014be0 <__copybits+0x16>
 8014bf8:	f842 3b04 	str.w	r3, [r2], #4
 8014bfc:	e7f4      	b.n	8014be8 <__copybits+0x1e>

08014bfe <__any_on>:
 8014bfe:	f100 0214 	add.w	r2, r0, #20
 8014c02:	6900      	ldr	r0, [r0, #16]
 8014c04:	114b      	asrs	r3, r1, #5
 8014c06:	4298      	cmp	r0, r3
 8014c08:	b510      	push	{r4, lr}
 8014c0a:	db11      	blt.n	8014c30 <__any_on+0x32>
 8014c0c:	dd0a      	ble.n	8014c24 <__any_on+0x26>
 8014c0e:	f011 011f 	ands.w	r1, r1, #31
 8014c12:	d007      	beq.n	8014c24 <__any_on+0x26>
 8014c14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014c18:	fa24 f001 	lsr.w	r0, r4, r1
 8014c1c:	fa00 f101 	lsl.w	r1, r0, r1
 8014c20:	428c      	cmp	r4, r1
 8014c22:	d10b      	bne.n	8014c3c <__any_on+0x3e>
 8014c24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014c28:	4293      	cmp	r3, r2
 8014c2a:	d803      	bhi.n	8014c34 <__any_on+0x36>
 8014c2c:	2000      	movs	r0, #0
 8014c2e:	bd10      	pop	{r4, pc}
 8014c30:	4603      	mov	r3, r0
 8014c32:	e7f7      	b.n	8014c24 <__any_on+0x26>
 8014c34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014c38:	2900      	cmp	r1, #0
 8014c3a:	d0f5      	beq.n	8014c28 <__any_on+0x2a>
 8014c3c:	2001      	movs	r0, #1
 8014c3e:	e7f6      	b.n	8014c2e <__any_on+0x30>

08014c40 <_calloc_r>:
 8014c40:	b538      	push	{r3, r4, r5, lr}
 8014c42:	fb02 f401 	mul.w	r4, r2, r1
 8014c46:	4621      	mov	r1, r4
 8014c48:	f7fc fbae 	bl	80113a8 <_malloc_r>
 8014c4c:	4605      	mov	r5, r0
 8014c4e:	b118      	cbz	r0, 8014c58 <_calloc_r+0x18>
 8014c50:	4622      	mov	r2, r4
 8014c52:	2100      	movs	r1, #0
 8014c54:	f7fc fb53 	bl	80112fe <memset>
 8014c58:	4628      	mov	r0, r5
 8014c5a:	bd38      	pop	{r3, r4, r5, pc}

08014c5c <__ssputs_r>:
 8014c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c60:	688e      	ldr	r6, [r1, #8]
 8014c62:	4682      	mov	sl, r0
 8014c64:	429e      	cmp	r6, r3
 8014c66:	460c      	mov	r4, r1
 8014c68:	4690      	mov	r8, r2
 8014c6a:	4699      	mov	r9, r3
 8014c6c:	d837      	bhi.n	8014cde <__ssputs_r+0x82>
 8014c6e:	898a      	ldrh	r2, [r1, #12]
 8014c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014c74:	d031      	beq.n	8014cda <__ssputs_r+0x7e>
 8014c76:	2302      	movs	r3, #2
 8014c78:	6825      	ldr	r5, [r4, #0]
 8014c7a:	6909      	ldr	r1, [r1, #16]
 8014c7c:	1a6f      	subs	r7, r5, r1
 8014c7e:	6965      	ldr	r5, [r4, #20]
 8014c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c84:	fb95 f5f3 	sdiv	r5, r5, r3
 8014c88:	f109 0301 	add.w	r3, r9, #1
 8014c8c:	443b      	add	r3, r7
 8014c8e:	429d      	cmp	r5, r3
 8014c90:	bf38      	it	cc
 8014c92:	461d      	movcc	r5, r3
 8014c94:	0553      	lsls	r3, r2, #21
 8014c96:	d530      	bpl.n	8014cfa <__ssputs_r+0x9e>
 8014c98:	4629      	mov	r1, r5
 8014c9a:	f7fc fb85 	bl	80113a8 <_malloc_r>
 8014c9e:	4606      	mov	r6, r0
 8014ca0:	b950      	cbnz	r0, 8014cb8 <__ssputs_r+0x5c>
 8014ca2:	230c      	movs	r3, #12
 8014ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ca8:	f8ca 3000 	str.w	r3, [sl]
 8014cac:	89a3      	ldrh	r3, [r4, #12]
 8014cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cb2:	81a3      	strh	r3, [r4, #12]
 8014cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cb8:	463a      	mov	r2, r7
 8014cba:	6921      	ldr	r1, [r4, #16]
 8014cbc:	f7fc fafb 	bl	80112b6 <memcpy>
 8014cc0:	89a3      	ldrh	r3, [r4, #12]
 8014cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014cca:	81a3      	strh	r3, [r4, #12]
 8014ccc:	6126      	str	r6, [r4, #16]
 8014cce:	443e      	add	r6, r7
 8014cd0:	6026      	str	r6, [r4, #0]
 8014cd2:	464e      	mov	r6, r9
 8014cd4:	6165      	str	r5, [r4, #20]
 8014cd6:	1bed      	subs	r5, r5, r7
 8014cd8:	60a5      	str	r5, [r4, #8]
 8014cda:	454e      	cmp	r6, r9
 8014cdc:	d900      	bls.n	8014ce0 <__ssputs_r+0x84>
 8014cde:	464e      	mov	r6, r9
 8014ce0:	4632      	mov	r2, r6
 8014ce2:	4641      	mov	r1, r8
 8014ce4:	6820      	ldr	r0, [r4, #0]
 8014ce6:	f7fc faf1 	bl	80112cc <memmove>
 8014cea:	68a3      	ldr	r3, [r4, #8]
 8014cec:	2000      	movs	r0, #0
 8014cee:	1b9b      	subs	r3, r3, r6
 8014cf0:	60a3      	str	r3, [r4, #8]
 8014cf2:	6823      	ldr	r3, [r4, #0]
 8014cf4:	441e      	add	r6, r3
 8014cf6:	6026      	str	r6, [r4, #0]
 8014cf8:	e7dc      	b.n	8014cb4 <__ssputs_r+0x58>
 8014cfa:	462a      	mov	r2, r5
 8014cfc:	f000 f91f 	bl	8014f3e <_realloc_r>
 8014d00:	4606      	mov	r6, r0
 8014d02:	2800      	cmp	r0, #0
 8014d04:	d1e2      	bne.n	8014ccc <__ssputs_r+0x70>
 8014d06:	6921      	ldr	r1, [r4, #16]
 8014d08:	4650      	mov	r0, sl
 8014d0a:	f7fc fb01 	bl	8011310 <_free_r>
 8014d0e:	e7c8      	b.n	8014ca2 <__ssputs_r+0x46>

08014d10 <_svfiprintf_r>:
 8014d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d14:	461d      	mov	r5, r3
 8014d16:	898b      	ldrh	r3, [r1, #12]
 8014d18:	b09d      	sub	sp, #116	; 0x74
 8014d1a:	061f      	lsls	r7, r3, #24
 8014d1c:	4680      	mov	r8, r0
 8014d1e:	460c      	mov	r4, r1
 8014d20:	4616      	mov	r6, r2
 8014d22:	d50f      	bpl.n	8014d44 <_svfiprintf_r+0x34>
 8014d24:	690b      	ldr	r3, [r1, #16]
 8014d26:	b96b      	cbnz	r3, 8014d44 <_svfiprintf_r+0x34>
 8014d28:	2140      	movs	r1, #64	; 0x40
 8014d2a:	f7fc fb3d 	bl	80113a8 <_malloc_r>
 8014d2e:	6020      	str	r0, [r4, #0]
 8014d30:	6120      	str	r0, [r4, #16]
 8014d32:	b928      	cbnz	r0, 8014d40 <_svfiprintf_r+0x30>
 8014d34:	230c      	movs	r3, #12
 8014d36:	f8c8 3000 	str.w	r3, [r8]
 8014d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d3e:	e0c8      	b.n	8014ed2 <_svfiprintf_r+0x1c2>
 8014d40:	2340      	movs	r3, #64	; 0x40
 8014d42:	6163      	str	r3, [r4, #20]
 8014d44:	2300      	movs	r3, #0
 8014d46:	9309      	str	r3, [sp, #36]	; 0x24
 8014d48:	2320      	movs	r3, #32
 8014d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d4e:	2330      	movs	r3, #48	; 0x30
 8014d50:	f04f 0b01 	mov.w	fp, #1
 8014d54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d58:	9503      	str	r5, [sp, #12]
 8014d5a:	4637      	mov	r7, r6
 8014d5c:	463d      	mov	r5, r7
 8014d5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014d62:	b10b      	cbz	r3, 8014d68 <_svfiprintf_r+0x58>
 8014d64:	2b25      	cmp	r3, #37	; 0x25
 8014d66:	d13e      	bne.n	8014de6 <_svfiprintf_r+0xd6>
 8014d68:	ebb7 0a06 	subs.w	sl, r7, r6
 8014d6c:	d00b      	beq.n	8014d86 <_svfiprintf_r+0x76>
 8014d6e:	4653      	mov	r3, sl
 8014d70:	4632      	mov	r2, r6
 8014d72:	4621      	mov	r1, r4
 8014d74:	4640      	mov	r0, r8
 8014d76:	f7ff ff71 	bl	8014c5c <__ssputs_r>
 8014d7a:	3001      	adds	r0, #1
 8014d7c:	f000 80a4 	beq.w	8014ec8 <_svfiprintf_r+0x1b8>
 8014d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d82:	4453      	add	r3, sl
 8014d84:	9309      	str	r3, [sp, #36]	; 0x24
 8014d86:	783b      	ldrb	r3, [r7, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	f000 809d 	beq.w	8014ec8 <_svfiprintf_r+0x1b8>
 8014d8e:	2300      	movs	r3, #0
 8014d90:	f04f 32ff 	mov.w	r2, #4294967295
 8014d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d98:	9304      	str	r3, [sp, #16]
 8014d9a:	9307      	str	r3, [sp, #28]
 8014d9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014da0:	931a      	str	r3, [sp, #104]	; 0x68
 8014da2:	462f      	mov	r7, r5
 8014da4:	2205      	movs	r2, #5
 8014da6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014daa:	4850      	ldr	r0, [pc, #320]	; (8014eec <_svfiprintf_r+0x1dc>)
 8014dac:	f7fc fa66 	bl	801127c <memchr>
 8014db0:	9b04      	ldr	r3, [sp, #16]
 8014db2:	b9d0      	cbnz	r0, 8014dea <_svfiprintf_r+0xda>
 8014db4:	06d9      	lsls	r1, r3, #27
 8014db6:	bf44      	itt	mi
 8014db8:	2220      	movmi	r2, #32
 8014dba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014dbe:	071a      	lsls	r2, r3, #28
 8014dc0:	bf44      	itt	mi
 8014dc2:	222b      	movmi	r2, #43	; 0x2b
 8014dc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014dc8:	782a      	ldrb	r2, [r5, #0]
 8014dca:	2a2a      	cmp	r2, #42	; 0x2a
 8014dcc:	d015      	beq.n	8014dfa <_svfiprintf_r+0xea>
 8014dce:	462f      	mov	r7, r5
 8014dd0:	2000      	movs	r0, #0
 8014dd2:	250a      	movs	r5, #10
 8014dd4:	9a07      	ldr	r2, [sp, #28]
 8014dd6:	4639      	mov	r1, r7
 8014dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ddc:	3b30      	subs	r3, #48	; 0x30
 8014dde:	2b09      	cmp	r3, #9
 8014de0:	d94d      	bls.n	8014e7e <_svfiprintf_r+0x16e>
 8014de2:	b1b8      	cbz	r0, 8014e14 <_svfiprintf_r+0x104>
 8014de4:	e00f      	b.n	8014e06 <_svfiprintf_r+0xf6>
 8014de6:	462f      	mov	r7, r5
 8014de8:	e7b8      	b.n	8014d5c <_svfiprintf_r+0x4c>
 8014dea:	4a40      	ldr	r2, [pc, #256]	; (8014eec <_svfiprintf_r+0x1dc>)
 8014dec:	463d      	mov	r5, r7
 8014dee:	1a80      	subs	r0, r0, r2
 8014df0:	fa0b f000 	lsl.w	r0, fp, r0
 8014df4:	4318      	orrs	r0, r3
 8014df6:	9004      	str	r0, [sp, #16]
 8014df8:	e7d3      	b.n	8014da2 <_svfiprintf_r+0x92>
 8014dfa:	9a03      	ldr	r2, [sp, #12]
 8014dfc:	1d11      	adds	r1, r2, #4
 8014dfe:	6812      	ldr	r2, [r2, #0]
 8014e00:	9103      	str	r1, [sp, #12]
 8014e02:	2a00      	cmp	r2, #0
 8014e04:	db01      	blt.n	8014e0a <_svfiprintf_r+0xfa>
 8014e06:	9207      	str	r2, [sp, #28]
 8014e08:	e004      	b.n	8014e14 <_svfiprintf_r+0x104>
 8014e0a:	4252      	negs	r2, r2
 8014e0c:	f043 0302 	orr.w	r3, r3, #2
 8014e10:	9207      	str	r2, [sp, #28]
 8014e12:	9304      	str	r3, [sp, #16]
 8014e14:	783b      	ldrb	r3, [r7, #0]
 8014e16:	2b2e      	cmp	r3, #46	; 0x2e
 8014e18:	d10c      	bne.n	8014e34 <_svfiprintf_r+0x124>
 8014e1a:	787b      	ldrb	r3, [r7, #1]
 8014e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8014e1e:	d133      	bne.n	8014e88 <_svfiprintf_r+0x178>
 8014e20:	9b03      	ldr	r3, [sp, #12]
 8014e22:	3702      	adds	r7, #2
 8014e24:	1d1a      	adds	r2, r3, #4
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	9203      	str	r2, [sp, #12]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	bfb8      	it	lt
 8014e2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e32:	9305      	str	r3, [sp, #20]
 8014e34:	4d2e      	ldr	r5, [pc, #184]	; (8014ef0 <_svfiprintf_r+0x1e0>)
 8014e36:	2203      	movs	r2, #3
 8014e38:	7839      	ldrb	r1, [r7, #0]
 8014e3a:	4628      	mov	r0, r5
 8014e3c:	f7fc fa1e 	bl	801127c <memchr>
 8014e40:	b138      	cbz	r0, 8014e52 <_svfiprintf_r+0x142>
 8014e42:	2340      	movs	r3, #64	; 0x40
 8014e44:	1b40      	subs	r0, r0, r5
 8014e46:	fa03 f000 	lsl.w	r0, r3, r0
 8014e4a:	9b04      	ldr	r3, [sp, #16]
 8014e4c:	3701      	adds	r7, #1
 8014e4e:	4303      	orrs	r3, r0
 8014e50:	9304      	str	r3, [sp, #16]
 8014e52:	7839      	ldrb	r1, [r7, #0]
 8014e54:	2206      	movs	r2, #6
 8014e56:	4827      	ldr	r0, [pc, #156]	; (8014ef4 <_svfiprintf_r+0x1e4>)
 8014e58:	1c7e      	adds	r6, r7, #1
 8014e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e5e:	f7fc fa0d 	bl	801127c <memchr>
 8014e62:	2800      	cmp	r0, #0
 8014e64:	d038      	beq.n	8014ed8 <_svfiprintf_r+0x1c8>
 8014e66:	4b24      	ldr	r3, [pc, #144]	; (8014ef8 <_svfiprintf_r+0x1e8>)
 8014e68:	bb13      	cbnz	r3, 8014eb0 <_svfiprintf_r+0x1a0>
 8014e6a:	9b03      	ldr	r3, [sp, #12]
 8014e6c:	3307      	adds	r3, #7
 8014e6e:	f023 0307 	bic.w	r3, r3, #7
 8014e72:	3308      	adds	r3, #8
 8014e74:	9303      	str	r3, [sp, #12]
 8014e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e78:	444b      	add	r3, r9
 8014e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8014e7c:	e76d      	b.n	8014d5a <_svfiprintf_r+0x4a>
 8014e7e:	fb05 3202 	mla	r2, r5, r2, r3
 8014e82:	2001      	movs	r0, #1
 8014e84:	460f      	mov	r7, r1
 8014e86:	e7a6      	b.n	8014dd6 <_svfiprintf_r+0xc6>
 8014e88:	2300      	movs	r3, #0
 8014e8a:	250a      	movs	r5, #10
 8014e8c:	4619      	mov	r1, r3
 8014e8e:	3701      	adds	r7, #1
 8014e90:	9305      	str	r3, [sp, #20]
 8014e92:	4638      	mov	r0, r7
 8014e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e98:	3a30      	subs	r2, #48	; 0x30
 8014e9a:	2a09      	cmp	r2, #9
 8014e9c:	d903      	bls.n	8014ea6 <_svfiprintf_r+0x196>
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d0c8      	beq.n	8014e34 <_svfiprintf_r+0x124>
 8014ea2:	9105      	str	r1, [sp, #20]
 8014ea4:	e7c6      	b.n	8014e34 <_svfiprintf_r+0x124>
 8014ea6:	fb05 2101 	mla	r1, r5, r1, r2
 8014eaa:	2301      	movs	r3, #1
 8014eac:	4607      	mov	r7, r0
 8014eae:	e7f0      	b.n	8014e92 <_svfiprintf_r+0x182>
 8014eb0:	ab03      	add	r3, sp, #12
 8014eb2:	9300      	str	r3, [sp, #0]
 8014eb4:	4622      	mov	r2, r4
 8014eb6:	4b11      	ldr	r3, [pc, #68]	; (8014efc <_svfiprintf_r+0x1ec>)
 8014eb8:	a904      	add	r1, sp, #16
 8014eba:	4640      	mov	r0, r8
 8014ebc:	f7fc fb60 	bl	8011580 <_printf_float>
 8014ec0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014ec4:	4681      	mov	r9, r0
 8014ec6:	d1d6      	bne.n	8014e76 <_svfiprintf_r+0x166>
 8014ec8:	89a3      	ldrh	r3, [r4, #12]
 8014eca:	065b      	lsls	r3, r3, #25
 8014ecc:	f53f af35 	bmi.w	8014d3a <_svfiprintf_r+0x2a>
 8014ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ed2:	b01d      	add	sp, #116	; 0x74
 8014ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ed8:	ab03      	add	r3, sp, #12
 8014eda:	9300      	str	r3, [sp, #0]
 8014edc:	4622      	mov	r2, r4
 8014ede:	4b07      	ldr	r3, [pc, #28]	; (8014efc <_svfiprintf_r+0x1ec>)
 8014ee0:	a904      	add	r1, sp, #16
 8014ee2:	4640      	mov	r0, r8
 8014ee4:	f7fc fdf8 	bl	8011ad8 <_printf_i>
 8014ee8:	e7ea      	b.n	8014ec0 <_svfiprintf_r+0x1b0>
 8014eea:	bf00      	nop
 8014eec:	080185b4 	.word	0x080185b4
 8014ef0:	080185ba 	.word	0x080185ba
 8014ef4:	080185be 	.word	0x080185be
 8014ef8:	08011581 	.word	0x08011581
 8014efc:	08014c5d 	.word	0x08014c5d

08014f00 <strncmp>:
 8014f00:	b510      	push	{r4, lr}
 8014f02:	b16a      	cbz	r2, 8014f20 <strncmp+0x20>
 8014f04:	3901      	subs	r1, #1
 8014f06:	1884      	adds	r4, r0, r2
 8014f08:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014f0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014f10:	4293      	cmp	r3, r2
 8014f12:	d103      	bne.n	8014f1c <strncmp+0x1c>
 8014f14:	42a0      	cmp	r0, r4
 8014f16:	d001      	beq.n	8014f1c <strncmp+0x1c>
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d1f5      	bne.n	8014f08 <strncmp+0x8>
 8014f1c:	1a98      	subs	r0, r3, r2
 8014f1e:	bd10      	pop	{r4, pc}
 8014f20:	4610      	mov	r0, r2
 8014f22:	e7fc      	b.n	8014f1e <strncmp+0x1e>

08014f24 <__ascii_wctomb>:
 8014f24:	b149      	cbz	r1, 8014f3a <__ascii_wctomb+0x16>
 8014f26:	2aff      	cmp	r2, #255	; 0xff
 8014f28:	bf8b      	itete	hi
 8014f2a:	238a      	movhi	r3, #138	; 0x8a
 8014f2c:	700a      	strbls	r2, [r1, #0]
 8014f2e:	6003      	strhi	r3, [r0, #0]
 8014f30:	2001      	movls	r0, #1
 8014f32:	bf88      	it	hi
 8014f34:	f04f 30ff 	movhi.w	r0, #4294967295
 8014f38:	4770      	bx	lr
 8014f3a:	4608      	mov	r0, r1
 8014f3c:	4770      	bx	lr

08014f3e <_realloc_r>:
 8014f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f40:	4607      	mov	r7, r0
 8014f42:	4614      	mov	r4, r2
 8014f44:	460e      	mov	r6, r1
 8014f46:	b921      	cbnz	r1, 8014f52 <_realloc_r+0x14>
 8014f48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014f4c:	4611      	mov	r1, r2
 8014f4e:	f7fc ba2b 	b.w	80113a8 <_malloc_r>
 8014f52:	b922      	cbnz	r2, 8014f5e <_realloc_r+0x20>
 8014f54:	f7fc f9dc 	bl	8011310 <_free_r>
 8014f58:	4625      	mov	r5, r4
 8014f5a:	4628      	mov	r0, r5
 8014f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f5e:	f000 f814 	bl	8014f8a <_malloc_usable_size_r>
 8014f62:	42a0      	cmp	r0, r4
 8014f64:	d20f      	bcs.n	8014f86 <_realloc_r+0x48>
 8014f66:	4621      	mov	r1, r4
 8014f68:	4638      	mov	r0, r7
 8014f6a:	f7fc fa1d 	bl	80113a8 <_malloc_r>
 8014f6e:	4605      	mov	r5, r0
 8014f70:	2800      	cmp	r0, #0
 8014f72:	d0f2      	beq.n	8014f5a <_realloc_r+0x1c>
 8014f74:	4631      	mov	r1, r6
 8014f76:	4622      	mov	r2, r4
 8014f78:	f7fc f99d 	bl	80112b6 <memcpy>
 8014f7c:	4631      	mov	r1, r6
 8014f7e:	4638      	mov	r0, r7
 8014f80:	f7fc f9c6 	bl	8011310 <_free_r>
 8014f84:	e7e9      	b.n	8014f5a <_realloc_r+0x1c>
 8014f86:	4635      	mov	r5, r6
 8014f88:	e7e7      	b.n	8014f5a <_realloc_r+0x1c>

08014f8a <_malloc_usable_size_r>:
 8014f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f8e:	1f18      	subs	r0, r3, #4
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	bfbc      	itt	lt
 8014f94:	580b      	ldrlt	r3, [r1, r0]
 8014f96:	18c0      	addlt	r0, r0, r3
 8014f98:	4770      	bx	lr
	...

08014f9c <_init>:
 8014f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f9e:	bf00      	nop
 8014fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fa2:	bc08      	pop	{r3}
 8014fa4:	469e      	mov	lr, r3
 8014fa6:	4770      	bx	lr

08014fa8 <_fini>:
 8014fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014faa:	bf00      	nop
 8014fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fae:	bc08      	pop	{r3}
 8014fb0:	469e      	mov	lr, r3
 8014fb2:	4770      	bx	lr
